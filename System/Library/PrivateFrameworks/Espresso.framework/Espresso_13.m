void sub_192784200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  std::__shared_weak_count *v56;
  void *v57;

  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a32);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a38);
  STACK[0x260] = (unint64_t)&a56;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::gather_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_gather_kernel::kernel_type_str(Espresso::generic_gather_kernel *this)
{
  return "gather";
}

uint64_t Espresso::ANECompilerEngine::mix_gather_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  v91[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a3 + 6);
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      v9 = 0;
    }
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  uint64_t v10 = *((void *)a3 + 3);
  uint64_t v11 = *(void *)(v10 + 32);
  long long v12 = *(_OWORD *)(v10 + 16);
  v72[0] = *(_OWORD *)v10;
  v72[1] = v12;
  uint64_t v73 = v11;
  __p = 0;
  v75 = 0;
  uint64_t v76 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v10 + 40), *(void *)(v10 + 48), (uint64_t)(*(void *)(v10 + 48) - *(void *)(v10 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v77, v9, (const Espresso::layer_shape *)v72, 1);
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v13 = *((void *)a3 + 6);
  v14 = *(std::__shared_weak_count **)(v13 + 80);
  if (v14)
  {
    v15 = std::__shared_weak_count::lock(v14);
    if (v15) {
      v16 = *(const Espresso::net **)(v13 + 72);
    }
    else {
      v16 = 0;
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  uint64_t v17 = *(void *)a3;
  uint64_t v18 = *(void *)(*(void *)a3 + 32);
  long long v19 = *(_OWORD *)(*(void *)a3 + 16);
  v65[0] = *(_OWORD *)*(void *)a3;
  v65[1] = v19;
  uint64_t v66 = v18;
  v67 = 0;
  v68 = 0;
  uint64_t v69 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v67, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v70, v16, (const Espresso::layer_shape *)v65, 1);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  uint64_t v20 = *((void *)a3 + 6);
  v21 = *(std::__shared_weak_count **)(v20 + 80);
  if (v21)
  {
    v22 = std::__shared_weak_count::lock(v21);
    if (v22)
    {
      uint64_t v23 = *(void *)(v20 + 72);
      goto LABEL_24;
    }
  }
  else
  {
    v22 = 0;
  }
  uint64_t v23 = 0;
LABEL_24:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v23 + 472);
  v24 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v24, v25))
  {
    v26 = *a2;
    v27 = a2[1];
    v64[0] = v26;
    v64[1] = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v89, "gather_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, &v89, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v64, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    if (v83) {
      nitro::nitro_function::nitro_function(v83);
    }
    v58 = (void **)v82;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v58);
    v58 = (void **)&v80;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v58);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (v90 < 0) {
      operator delete((void *)v89);
    }
    if (v27) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v27);
    }
    uint64_t v28 = 0;
    goto LABEL_90;
  }
  int v29 = *(unsigned __int8 *)(v23 + 1281);
  uint64_t v30 = *((void *)a3 + 6);
  v31 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v30 + 80));
  unsigned int v32 = Espresso::ANECompilerEngine::bottom_compute_path(a3, *(const Espresso::base_kernel::validate_for_engine_args_t **)(v30 + 72), 0);
  nitro::nitro_function::nitro_function(v31);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v62, (NSString *)(a1 + 304), v24);
  v33 = v24;
  v34 = (int32x4_t *)(a1 + 280);
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v70, v33))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v77, v33))
    {
      ANECGatherLayerDescInitialize();
      if (v34->i32[0] == -1)
      {
        uint64_t v35 = 0;
      }
      else
      {
        if (v71 > 5) {
          goto LABEL_97;
        }
        *((void *)&v89 + 1) = @"Width";
        uint64_t v35 = 1;
      }
      if (*(_DWORD *)(a1 + 284) != -1)
      {
        if (v71 > 5) {
          goto LABEL_97;
        }
        v36 = (char *)&v89 + 8 * v35++;
        *((void *)v36 + 1) = @"Height";
      }
      v37 = @"Channel";
      v38 = @"Depth";
      if (*(_DWORD *)(a1 + 288) != -1)
      {
        if (v71 > 5) {
          goto LABEL_97;
        }
        if (v29) {
          BOOL v39 = v71 == 5;
        }
        else {
          BOOL v39 = 0;
        }
        if (v39) {
          v40 = @"Depth";
        }
        else {
          v40 = @"Channel";
        }
        v41 = (char *)&v89 + 8 * v35++;
        *((void *)v41 + 1) = v40;
      }
      if (*(_DWORD *)(a1 + 292) != -1)
      {
        if (v71 > 5) {
          goto LABEL_97;
        }
        if (v29) {
          BOOL v42 = v71 == 5;
        }
        else {
          BOOL v42 = 0;
        }
        if (!v42) {
          v37 = @"Batch";
        }
        v43 = (char *)&v89 + 8 * v35++;
        *((void *)v43 + 1) = v37;
      }
      if (*(_DWORD *)(a1 + 296) == -1)
      {
LABEL_72:
        uint64_t v88 = 0;
        *(void *)&long long v89 = v35;
        uint64_t v87 = 0;
        ANECTensorDescInitialize();
        ANECTensorDescInitialize();
        if (v32 < 8 && ((0x97u >> v32) & 1) != 0)
        {
          *(void *)&long long v51 = v70[3];
          *((void *)&v51 + 1) = v70[4];
          long long v52 = v51;
          v79.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5747038[v32];
          uint64_t v81 = v70[2];
          *(void *)&long long v51 = v70[0];
          *((void *)&v51 + 1) = v70[1];
          *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = v51;
          long long v80 = v52;
          int64x2_t v84 = vdupq_n_s64(1uLL);
          v82[3] = 1;
          v83 = (std::__shared_weak_count *)v35;
          uint64_t v85 = 1;
          v82[2] = @"Float16";
          char v86 = 1;
          int v53 = ANECValidateGatherLayer();
          if (v53)
          {
            std::to_string(&v78, v53);
            v54 = std::string::insert(&v78, 0, "gather_kernel: ANECValidateGatherLayer rejected operation with status ");
            v55 = (void *)v54->__r_.__value_.__r.__words[0];
            v91[0] = v54->__r_.__value_.__l.__size_;
            *(void *)((char *)v91 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
            char v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            LOBYTE(v58) = 0;
            *(void *)&v60[7] = *(void *)((char *)v91 + 7);
            v59 = v55;
            *(void *)v60 = v91[0];
            char v61 = v56;
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v78.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            LOBYTE(v58) = 1;
            std::string::basic_string[abi:ne180100]<0>(&v59, "Success");
          }
        }
        else
        {
          LOBYTE(v58) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v59, "gather_kernel: invalid compute path for input");
        }
        goto LABEL_75;
      }
      if (v71 <= 5)
      {
        if (v29) {
          BOOL v44 = v71 == 5;
        }
        else {
          BOOL v44 = 0;
        }
        if (v44) {
          v38 = @"Batch";
        }
        v45 = (char *)&v89 + 8 * v35++;
        *((void *)v45 + 1) = v38;
        goto LABEL_72;
      }
LABEL_97:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    }
    LOBYTE(v58) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v59, "gather_kernel: output blob dimensions exceed ANE limit.");
  }
  else
  {
    LOBYTE(v58) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v59, "gather_kernel: input blob dimensions exceed ANE limit.");
  }
LABEL_75:

  if ((_BYTE)v58)
  {
    v46.i64[0] = 0x100000001;
    v46.i64[1] = 0x100000001;
    uint16x4_t v47 = (uint16x4_t)vmovn_s32(vceqq_s32(*v34, v46));
    v47.i16[0] = vmaxv_u16(v47);
    uint64_t v28 = (*(_DWORD *)(a1 + 296) != -2) & ~v47.i32[0];
  }
  else
  {
    v48 = *a2;
    v49 = a2[1];
    v57[0] = v48;
    v57[1] = v49;
    if (v49) {
      atomic_fetch_add_explicit(&v49->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)&v59, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v57, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    if (v83) {
      nitro::nitro_function::nitro_function(v83);
    }
    *(void *)&long long v89 = v82;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    *(void *)&long long v89 = &v80;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (v49) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v49);
    }
    uint64_t v28 = 0;
  }
  if (v61 < 0) {
    operator delete(v59);
  }
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
LABEL_90:

  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  return v28;
}

void sub_192784BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }

  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_gather_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_gather_kernel::~mix_gather_kernel(Espresso::ANECompilerEngine::mix_gather_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_gather_kernel *)((char *)this + 304));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_gather_kernel *)((char *)this + 304));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_array_gather_kernel::~mix_array_gather_kernel(Espresso::ANECompilerEngine::mix_array_gather_kernel *this)
{
  v1 = (Espresso::ANECompilerEngine::mix_array_gather_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  v1 = (Espresso::ANECompilerEngine::mix_array_gather_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_array_gather_kernel::compile(Espresso::ANECompilerEngine::mix_array_gather_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_array_gather_kernel::compile(Espresso::ANECompilerEngine::mix_array_gather_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  *((void *)&v69 + 1) = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 304))
  {
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 280);
    LODWORD(v52.__r_.__value_.__r.__words[2]) = *((_DWORD *)this + 74);
    v21 = (std::__shared_weak_count *)operator new(0x220uLL);
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384E50;
    __n128 v22 = Espresso::ANECompilerEngine::mix_gather_kernel::mix_gather_kernel((uint64_t)&v21[1], (uint64_t *)this + 1, (__n128 *)&v52);
    (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *, __n128))(*(void *)v23 + 328))(v23, a2, a3, v22);
    v24 = v21;
LABEL_110:
    nitro::nitro_function::nitro_function(v24);
    return;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (v6 && (v7 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v48 = v7;
    uint64_t v8 = *((void *)a2 + 1);
  }
  else
  {
    v48 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v50 = v8;
  uint64_t v9 = v8 + 136;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)&v52);
  long long v12 = (const void *)*((void *)v10 + 5);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint16x4_t v47 = a2;
  v52.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  v49 = v11;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)v52.__r_.__value_.__l.__data_, (long long **)&v52);
  v15 = (int *)*((void *)v13 + 5);
  v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v52.__r_.__value_.__r.__words[0] = *((void *)a3 + 6) + 24;
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)v52.__r_.__value_.__l.__data_, (long long **)&v52);
  uint64_t v18 = (_DWORD *)*((void *)v16 + 5);
  uint64_t v17 = (std::__shared_weak_count *)*((void *)v16 + 6);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11 && v19)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    int v20 = v19[46];
    nitro::nitro_function::nitro_function(v11);
  }
  else
  {
    int v20 = v19[46];
  }
  if (v14 && v25)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    int v27 = v25[46];
    int v26 = v25[47];
    nitro::nitro_function::nitro_function(v14);
  }
  else
  {
    int v27 = v25[46];
    int v26 = v25[47];
  }
  if (v17 && v28)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    int v29 = v17;
    int v30 = v28[46];
    v31 = v29;
    nitro::nitro_function::nitro_function(v29);
  }
  else
  {
    v31 = v17;
    int v30 = v28[46];
  }
  ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)*((unsigned int *)this + 75), v15[7], *(unsigned char *)(v50 + 1281));
  v33 = ANECAxisForNDAxis;
  BOOL v51 = 0;
  BOOL v35 = v18[7] == 1 && ANECAxisForNDAxis != @"Width";
  if (v20 == 3 && v27 == 2)
  {
    v36 = v49;
    v37 = v14;
    if (v30 == 2) {
      BOOL v51 = *((_DWORD *)this + 75) == 0;
    }
  }
  else
  {
    v36 = v49;
    v37 = v14;
  }
  uint64_t v38 = *((void *)a3 + 6);
  if (*(char *)(v38 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v38 + 24), *(void *)(v38 + 32));
  }
  else {
    std::string __str = *(std::string *)(v38 + 24);
  }
  if (v35)
  {
    BOOL v39 = (int *)&v64 + 1;
    long long v64 = xmmword_192DAF430;
    int v65 = 4;
    if (v26)
    {
      if (v33 != @"Height")
      {
        if (v33 != @"Channel")
        {
          if (v33 != @"Batch")
          {
            if (v33 == @"Depth") {
              goto LABEL_53;
            }
            goto LABEL_55;
          }
          goto LABEL_52;
        }
LABEL_50:
        unsigned __int32 v40 = 2;
        BOOL v39 = (int *)&v64 + 2;
LABEL_54:
        LODWORD(v64) = v40;
        *BOOL v39 = 0;
        goto LABEL_55;
      }
    }
    else if (v33 != @"Height")
    {
      if (v33 == @"Channel")
      {
LABEL_52:
        unsigned __int32 v40 = 3;
        BOOL v39 = (int *)((unint64_t)&v64 | 0xC);
        goto LABEL_54;
      }
      if (v33 == @"Batch")
      {
LABEL_53:
        unsigned __int32 v40 = 4;
        BOOL v39 = &v65;
        goto LABEL_54;
      }
      if (v33 != @"Depth")
      {
LABEL_55:
        Espresso::abstract_engine_factory::shared(&v62);
        std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::transpose_kernel,std::allocator<Espresso::ANECompilerEngine::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path const&,Espresso::transpose_params_t &,void>(&v60, (uint64_t *)(v50 + 16), (__n128 *)&v64);
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v52.__r_.__value_.__l.__data_, (id *)a3);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v68, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string v68 = __str;
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v54, &v68, &v69, 1uLL);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        std::string::append(&__str, "@__transpose_in");
        std::string::operator=(&v52, &__str);
        (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, std::string *))(*(void *)v60 + 328))(v60, v47, &v52);

        if (v56 < 0) {
          operator delete(__p);
        }
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (v61) {
          nitro::nitro_function::nitro_function(v61);
        }
        if (v63) {
          nitro::nitro_function::nitro_function(v63);
        }
        goto LABEL_68;
      }
      goto LABEL_50;
    }
    unsigned __int32 v40 = 1;
    goto LABEL_54;
  }
LABEL_68:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v52.__r_.__value_.__l.__data_, (id *)a3);
  std::string::operator=(v54.__begin_ + 1, &__str);
  if (v51)
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v41 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v41 = *((void *)a3 + 1);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v68, v41 + 16);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v42 = &v68;
    }
    else {
      BOOL v42 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if (v41)
    {
      if (*((char *)a3 + 23) >= 0) {
        v43 = a3;
      }
      else {
        v43 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
      }
      memmove(v42, v43, v41);
    }
    strcpy((char *)v42 + v41, "@__transpose_out");
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v68;
    std::string::operator=(&v52, &__str);
  }
  BOOL v44 = objc_opt_new();
  v67 = v33;
  v45 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v67 count:1];
  int32x4_t v46 = v58;
  v58 = @"Gather";

  [v44 setObject:v45 forKeyedSubscript:@"GatherNDAxes"];
  objc_storeStrong(&v59, v44);
  Espresso::ANECompilerEngine::compiler::add_unit(v47, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v52);

  if (v56 < 0) {
    operator delete(__p);
  }
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (v51)
  {
    int v65 = 4;
    long long v64 = xmmword_192DCA410;
    Espresso::abstract_engine_factory::shared(&v62);
    std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::transpose_kernel,std::allocator<Espresso::ANECompilerEngine::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path const&,Espresso::transpose_params_t &,void>(&v60, (uint64_t *)(v50 + 16), (__n128 *)&v64);
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v52.__r_.__value_.__l.__data_, (id *)a3);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v68, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string v68 = __str;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v54, &v68, &v69, 1uLL);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, std::string *))(*(void *)v60 + 328))(v60, v47, &v52);

    if (v56 < 0) {
      operator delete(__p);
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (v61) {
      nitro::nitro_function::nitro_function(v61);
    }
    if (v63) {
      nitro::nitro_function::nitro_function(v63);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  v24 = v48;
  if (v48) {
    goto LABEL_110;
  }
}

void sub_192785700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a15);
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  if (a36) {
    nitro::nitro_function::nitro_function(a36);
  }
  if (*(char *)(v38 - 137) < 0)
  {
    operator delete(*(void **)(v38 - 160));
    if (v37) {
      goto LABEL_7;
    }
  }
  else if (v37)
  {
LABEL_7:
    nitro::nitro_function::nitro_function(v37);
    if (!v36)
    {
LABEL_12:
      if (a12) {
        nitro::nitro_function::nitro_function(a12);
      }
      if (a11) {
        nitro::nitro_function::nitro_function(a11);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    nitro::nitro_function::nitro_function(v36);
    goto LABEL_12;
  }
  if (!v36) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::transpose_kernel,std::allocator<Espresso::ANECompilerEngine::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path const&,Espresso::transpose_params_t &,void>(void *a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE384DE0;
  Espresso::ANECompilerEngine::transpose_kernel::transpose_kernel((uint64_t)(v6 + 3), a2, a3);
  *a1 = v7;
  a1[1] = v6;
}

void sub_1927858F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::mix_gather_kernel::mix_gather_kernel(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v5 = a1 + 280;
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&_Q0 = 0x100000001;
  *((void *)&_Q0 + 1) = 0x100000001;
  *(_OWORD *)uint64_t v5 = _Q0;
  *(_DWORD *)(v6 + 296) = -2;
  char v8 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(unsigned char *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(unsigned char *)(v6 + 432) = 0;
  *(_DWORD *)(v6 + 472) = 1065353216;
  *(_WORD *)(v6 + 480) = 0;
  *(unsigned char *)(v6 + 482) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v5 + 204) = _Q0;
  *(unsigned char *)(v6 + 492) = 0;
  *(void *)(v6 + 496) = 0;
  *(void *)(v6 + 504) = 0;
  *(unsigned char *)(v6 + 512) = v8;
  *(void *)uint64_t v6 = &unk_1EE342178;
  *(void *)(v6 + 304) = &unk_1EE3422D8;
  __n128 result = *a3;
  *(_DWORD *)(v6 + 296) = a3[1].n128_u32[0];
  *(__n128 *)uint64_t v5 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_gather_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384E50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::array_gather_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_array_gather_kernel::kernel_type_str(Espresso::generic_array_gather_kernel *this)
{
  return "array_gather";
}

uint64_t Espresso::ANECompilerEngine::mix_array_gather_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _OWORD **a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    char v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *((void *)v6 + 9);
      goto LABEL_6;
    }
  }
  else
  {
    char v8 = 0;
  }
  uint64_t v9 = 0;
LABEL_6:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v10, v11))
  {
    long long v12 = *a2;
    uint64_t v13 = a2[1];
    v95[0] = v12;
    v95[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "array_gather_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v91, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v95, (Espresso::base_kernel::validate_for_engine_warning_t *)v91);
    if (v94) {
      nitro::nitro_function::nitro_function(v94);
    }
    v89[0] = (void **)v93;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v89);
    v89[0] = (void **)&v91[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v89);
    if ((v91[23] & 0x80000000) != 0) {
      operator delete(*(void **)v91);
    }
    if (SBYTE7(v54) < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    uint64_t v14 = 0;
    goto LABEL_99;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v15 = a3[3];
  uint64_t v16 = *((void *)v15 + 4);
  long long v17 = v15[1];
  v84[0] = *v15;
  v84[1] = v17;
  uint64_t v85 = v16;
  char v86 = 0;
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v86, *((const void **)v15 + 5), *((void *)v15 + 6), (uint64_t)(*((void *)v15 + 6) - *((void *)v15 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v89, (const Espresso::net *)v9, (const Espresso::layer_shape *)v84, 1);
  if (v86)
  {
    uint64_t v87 = v86;
    operator delete(v86);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *a3;
  uint64_t v19 = *((void *)*a3 + 4);
  long long v20 = (*a3)[1];
  v76[0] = **a3;
  v76[1] = v20;
  uint64_t v77 = v19;
  std::string v78 = 0;
  std::string v79 = 0;
  uint64_t v80 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v78, *((const void **)v18 + 5), *((void *)v18 + 6), (uint64_t)(*((void *)v18 + 6) - *((void *)v18 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v81, (const Espresso::net *)v9, (const Espresso::layer_shape *)v76, 1);
  if (v78)
  {
    std::string v79 = v78;
    operator delete(v78);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v21 = *a3;
  long long v22 = (*a3)[5];
  v69[0] = (*a3)[4];
  v69[1] = v22;
  uint64_t v23 = (const void *)v21[13];
  uint64_t v70 = v21[12];
  unsigned int v71 = 0;
  v72 = 0;
  uint64_t v73 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v71, v23, v21[14], (uint64_t)(v21[14] - (void)v23) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v74, (const Espresso::net *)v9, (const Espresso::layer_shape *)v69, 1);
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  v24 = v10;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v81, v24))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v89, v24))
    {
      char v66 = 1;
      std::string::basic_string[abi:ne180100]<0>(v67, "Success");
    }
    else
    {
      char v66 = 0;
      std::string::basic_string[abi:ne180100]<0>(v67, "array_gather_kernel: output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    char v66 = 0;
    std::string::basic_string[abi:ne180100]<0>(v67, "array_gather_kernel: input blob dimensions exceed ANE limit.");
  }

  if (v66)
  {
    if (!*(unsigned char *)(a1 + 304))
    {
      v32.i64[0] = 0x100000001;
      v32.i64[1] = 0x100000001;
      uint16x4_t v33 = (uint16x4_t)vmovn_s32(vceqq_s32(*(int32x4_t *)(a1 + 280), v32));
      v33.i16[0] = vmaxv_u16(v33);
      uint64_t v14 = (*(_DWORD *)(a1 + 296) != -2) & ~v33.i32[0];
      goto LABEL_97;
    }
    int v25 = v82;
    ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)*(unsigned int *)(a1 + 300), v82, *(unsigned char *)(v9 + 1281));
    int v27 = v75;
    if (v75 != 1 || ANECAxisForNDAxis == @"Width") {
      goto LABEL_78;
    }
    uint64_t v28 = (int *)&v63 + 1;
    long long v63 = xmmword_192DAF430;
    int v64 = 4;
    if (v83)
    {
      if (ANECAxisForNDAxis != @"Height")
      {
        if (ANECAxisForNDAxis != @"Channel")
        {
          if (ANECAxisForNDAxis != @"Batch")
          {
            if (ANECAxisForNDAxis == @"Depth") {
              goto LABEL_61;
            }
            goto LABEL_63;
          }
          goto LABEL_60;
        }
LABEL_58:
        unsigned __int32 v34 = 2;
        uint64_t v28 = (int *)&v63 + 2;
LABEL_62:
        LODWORD(v63) = v34;
        *uint64_t v28 = 0;
        goto LABEL_63;
      }
    }
    else if (ANECAxisForNDAxis != @"Height")
    {
      if (ANECAxisForNDAxis == @"Channel")
      {
LABEL_60:
        unsigned __int32 v34 = 3;
        uint64_t v28 = (int *)((unint64_t)&v63 | 0xC);
        goto LABEL_62;
      }
      if (ANECAxisForNDAxis == @"Batch")
      {
LABEL_61:
        unsigned __int32 v34 = 4;
        uint64_t v28 = &v64;
        goto LABEL_62;
      }
      if (ANECAxisForNDAxis != @"Depth")
      {
LABEL_63:
        Espresso::abstract_engine_factory::shared(&v61);
        std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::transpose_kernel,std::allocator<Espresso::ANECompilerEngine::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path const&,Espresso::transpose_params_t &,void>(&v59, (uint64_t *)(v9 + 16), (__n128 *)&v63);
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v59 + 64))(v91);
        uint64_t v35 = *(void *)(*(void *)v91 + 32);
        long long v36 = *(_OWORD *)(*(void *)v91 + 16);
        *(_OWORD *)__p = **(_OWORD **)v91;
        long long v54 = v36;
        uint64_t v55 = v35;
        char v56 = 0;
        id v57 = 0;
        uint64_t v58 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, *(const void **)(*(void *)v91 + 40), *(void *)(*(void *)v91 + 48), (uint64_t)(*(void *)(*(void *)v91 + 48) - *(void *)(*(void *)v91 + 40)) >> 2);
        v52[0] = (void **)v91;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v52);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v47[0] = *(_OWORD *)__p;
        v47[1] = v54;
        uint64_t v48 = v55;
        v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v49, v56, (uint64_t)v57, (v57 - (unsigned char *)v56) >> 2);
        Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v52, (const Espresso::net *)v9, (const Espresso::layer_shape *)v47, 1);
        if (v49)
        {
          uint64_t v50 = v49;
          operator delete(v49);
        }
        if (v8) {
          nitro::nitro_function::nitro_function(v8);
        }
        Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)v44, v24, v74, v52);
        if (!v44[0])
        {
          unsigned __int32 v40 = *a2;
          size_t v41 = a2[1];
          v43[0] = v40;
          v43[1] = v41;
          if (v41) {
            atomic_fetch_add_explicit(&v41->i64[1], 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v91, &v45, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v43, (Espresso::base_kernel::validate_for_engine_warning_t *)v91);
          if (v94) {
            nitro::nitro_function::nitro_function(v94);
          }
          v96 = (void **)v93;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v96);
          v96 = (void **)&v91[24];
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v96);
          if ((v91[23] & 0x80000000) != 0) {
            operator delete(*(void **)v91);
          }
          if (v41) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v41);
          }
          if (v46 < 0) {
            operator delete((void *)v45);
          }
          if (v56)
          {
            id v57 = v56;
            operator delete(v56);
          }
          if (v60) {
            nitro::nitro_function::nitro_function(v60);
          }
          uint64_t v38 = v62;
          if (!v62) {
            goto LABEL_96;
          }
          goto LABEL_95;
        }
        if (v46 < 0) {
          operator delete((void *)v45);
        }
        if (v56)
        {
          id v57 = v56;
          operator delete(v56);
        }
        if (v60) {
          nitro::nitro_function::nitro_function(v60);
        }
        if (v62) {
          nitro::nitro_function::nitro_function(v62);
        }
LABEL_78:
        if (v90 == v25)
        {
          uint64_t v14 = 1;
          goto LABEL_97;
        }
        if (v90 == 3 && v25 == 2 && v27 == 2 && !*(_DWORD *)(a1 + 300))
        {
          *(void *)v91 = 0x100000001;
          *(void *)&v91[20] = 0xFFFFFFFF00000001;
          int v92 = -1;
          *(_DWORD *)&v91[8] = 1;
          *(_DWORD *)&v91[12] = v74[3];
          *(_DWORD *)&v91[16] = v81[4];
          Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)__p, v24, v91, v89);
          uint64_t v14 = LOBYTE(__p[0]) != 0;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[1]);
          }
          goto LABEL_97;
        }
        v37 = *a2;
        int v30 = a2[1];
        v42[0] = v37;
        v42[1] = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "array_gather_kernel: unsupported operation array_gather");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v91, (long long *)__p, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v42, (Espresso::base_kernel::validate_for_engine_warning_t *)v91);
        if (v94) {
          nitro::nitro_function::nitro_function(v94);
        }
        v52[0] = (void **)v93;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v52);
        v52[0] = (void **)&v91[24];
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v52);
        if ((v91[23] & 0x80000000) != 0) {
          operator delete(*(void **)v91);
        }
        if (SBYTE7(v54) < 0)
        {
          v31 = __p[0];
          goto LABEL_92;
        }
        goto LABEL_93;
      }
      goto LABEL_58;
    }
    unsigned __int32 v34 = 1;
    goto LABEL_62;
  }
  int v29 = *a2;
  int v30 = a2[1];
  v65[0] = v29;
  v65[1] = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->i64[1], 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v91, (long long *)v67, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v65, (Espresso::base_kernel::validate_for_engine_warning_t *)v91);
  if (v94) {
    nitro::nitro_function::nitro_function(v94);
  }
  __p[0] = v93;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v91[24];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((v91[23] & 0x80000000) != 0)
  {
    v31 = *(void **)v91;
LABEL_92:
    operator delete(v31);
  }
LABEL_93:
  if (v30)
  {
    uint64_t v38 = (std::__shared_weak_count *)v30;
LABEL_95:
    nitro::nitro_function::nitro_function(v38);
  }
LABEL_96:
  uint64_t v14 = 0;
LABEL_97:
  if (v68 < 0) {
    operator delete(v67[0]);
  }
LABEL_99:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v14;
}

void sub_192786394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }

  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  _Unwind_Resume(a1);
}

void sub_19278657C()
{
  if (!v0) {
    JUMPOUT(0x192786574);
  }
  JUMPOUT(0x19278656CLL);
}

void Espresso::ANECompilerEngine::mix_array_gather_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_array_gather_kernel::~mix_array_gather_kernel(Espresso::ANECompilerEngine::mix_array_gather_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_array_gather_kernel *)((char *)this + 312));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_array_gather_kernel *)((char *)this + 312));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::stir_gather_nd_kernel::~stir_gather_nd_kernel(Espresso::ANECompilerEngine::stir_gather_nd_kernel *this)
{
  v1 = (Espresso::ANECompilerEngine::stir_gather_nd_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  v1 = (Espresso::ANECompilerEngine::stir_gather_nd_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::stir_gather_nd_kernel::compile(Espresso::ANECompilerEngine::stir_gather_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::stir_gather_nd_kernel::compile(Espresso::ANECompilerEngine::stir_gather_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v358 = *MEMORY[0x1E4F143B8];
  v3 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v3 || (v277 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v5 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  v274 = a2;
  if (!*(void *)(v5 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v345.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 136, (unsigned __int8 *)v345.__r_.__value_.__l.__data_, (long long **)&v345)+ 6);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v269 = v6;
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 136, (unsigned __int8 *)a3, (long long **)&v345);
  uint64_t v9 = *((void *)v7 + 5);
  char v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v275 = v8;
  v273 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v5 + 472);
  long long v326 = 0u;
  long long v327 = 0u;
  long long v324 = 0u;
  long long v325 = 0u;
  long long v322 = 0u;
  long long v323 = 0u;
  long long v320 = 0u;
  long long v321 = 0u;
  long long v319 = 0u;
  v345.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 136, (unsigned __int8 *)v345.__r_.__value_.__l.__data_, (long long **)&v345);
  uint64_t v12 = *((void *)v10 + 5);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v268 = v9;
  v272 = v11;
  v345.__r_.__value_.__r.__words[0] = *((void *)a3 + 6) + 24;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 136, (unsigned __int8 *)v345.__r_.__value_.__l.__data_, (long long **)&v345);
  uint64_t v15 = *((void *)v13 + 5);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v271 = v14;
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 136, (unsigned __int8 *)a3, (long long **)&v345);
  uint64_t v18 = *((void *)v16 + 5);
  long long v17 = (std::__shared_weak_count *)*((void *)v16 + 6);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v270 = v17;
  atomic_fetch_add_explicit(&v277->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::abstract_blob_container::shape(v314, v12);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v317, (const Espresso::net *)v5, (const Espresso::layer_shape *)v314, 1);
  if (__p)
  {
    v316 = __p;
    operator delete(__p);
  }
  nitro::nitro_function::nitro_function(v277);
  atomic_fetch_add_explicit(&v277->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::abstract_blob_container::shape(v309, v15);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v312, (const Espresso::net *)v5, (const Espresso::layer_shape *)v309, 1);
  if (v310)
  {
    v311 = v310;
    operator delete(v310);
  }
  nitro::nitro_function::nitro_function(v277);
  atomic_fetch_add_explicit(&v277->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::abstract_blob_container::shape(v304, v18);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v307, (const Espresso::net *)v5, (const Espresso::layer_shape *)v304, 1);
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  nitro::nitro_function::nitro_function(v277);
  uint64_t v19 = (long long *)*((void *)a3 + 6);
  if (*((char *)v19 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)v19, *((void *)v19 + 1));
  }
  else
  {
    long long v20 = *v19;
    v303.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
    *(_OWORD *)&v303.__r_.__value_.__l.__data_ = v20;
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v5 + 360), &v303))
  {
    std::map<std::string,Espresso::blob_numerical_properties>::at(v5 + 352, &v303);
  }
  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v303.__r_.__value_.__l.__data_);
  }
  int v21 = *((_DWORD *)a3 + 26);
  uint64_t v22 = *((void *)a3 + 6);
  if (*(char *)(v22 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v302, *(const std::string::value_type **)(v22 + 24), *(void *)(v22 + 32));
  }
  else {
    std::string v302 = *(std::string *)(v22 + 24);
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v5 + 360), &v302))
  {
    int v23 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at(v5 + 352, &v302) + 8);
    if (v23 == -1) {
      int v21 = 1;
    }
    else {
      int v21 = v23;
    }
  }
  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v302.__r_.__value_.__l.__data_);
  }
  int v24 = *((_DWORD *)this + 70);
  if (v24)
  {
    if (v24 == 1)
    {
    }
    else
    {
      if (v24 != 2) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected gather nd mode. Should have been prohibited by valid_for_engine.");
      }
      LODWORD(v345.__r_.__value_.__l.__data_) = 0;
      *(void *)&long long v321 = *((void *)&v320 + 1);
      *(_DWORD *)__src = v345.__r_.__value_.__l.__data_;
      std::vector<Espresso::ANECompilerEngine::NamedAxis>::__assign_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis const*,Espresso::ANECompilerEngine::NamedAxis const*>((void *)&v323 + 1, __src, &__src[4]);
    }
  }
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: bad tf.gather mode data transpose. Should have been prohibited by gather_nd valid_for_engine.");
  }
  uint64_t v299 = 0;
  v300 = 0;
  unint64_t v301 = 0;
  int v25 = (long long *)*((void *)a3 + 6);
  if (*((char *)v25 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)v25, *((void *)v25 + 1));
  }
  else
  {
    long long v26 = *v25;
    v298.__r_.__value_.__r.__words[2] = *((void *)v25 + 2);
    *(_OWORD *)&v298.__r_.__value_.__l.__data_ = v26;
  }
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v297, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v297 = *(std::string *)a3;
  }
  uint64_t v27 = *((void *)a3 + 6);
  if (*(char *)(v27 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)(v27 + 24), *(void *)(v27 + 32));
  }
  else {
    std::string v296 = *(std::string *)(v27 + 24);
  }
  uint64_t v28 = v319;
  if (*((void *)&v319 + 1) - (void)v319 != 48) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Gather ND plan did not check for rank 5 3d transposes.");
  }
  if (*(void *)(v319 + 8) != *(void *)v319)
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v29 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v29 = *((void *)a3 + 1);
    }
    int v30 = __str;
    std::string::basic_string[abi:ne180100]((uint64_t)__str, v29 + 44);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v30 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if (v29)
    {
      if (*((char *)a3 + 23) >= 0) {
        v31 = a3;
      }
      else {
        v31 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
      }
      memmove(v30, v31, v29);
    }
    strcpy((char *)v30 + v29, "__rank5_3d_input_tensor_pre_gather_transpose");
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v345, (uint64_t)&v298, __str, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)v319, (std::string *)((char *)a3 + 80));
    int32x4_t v32 = v300;
    if ((unint64_t)v300 >= v301)
    {
      unint64_t v34 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
      if (v34 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v35 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
      if (v35 <= v34 + 1) {
        unint64_t v35 = v34 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v36 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v36 = v35;
      }
      *(void *)&__src[32] = &v301;
      if (v36) {
        unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v36);
      }
      else {
        uint64_t v37 = 0;
      }
      *(void *)__src = v36;
      *(void *)&__src[8] = v36 + 144 * v34;
      *(void *)&__src[16] = *(void *)&__src[8];
      *(void *)&__src[24] = v36 + 144 * v37;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v345);
      *(void *)&__src[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v299, __src);
      uint16x4_t v33 = v300;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v300, (uint64_t)&v345);
      uint16x4_t v33 = v32 + 6;
    }
    v300 = v33;
    std::string::operator=(&v298, __str);

    if (SHIBYTE(v351) < 0) {
      operator delete((void *)v350);
    }
    *(void *)__src = &v347;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    *(void *)__src = &v346;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v345.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    uint64_t v28 = v319;
  }
  if (*(void *)(v28 + 32) != *(void *)(v28 + 24))
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v38 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v38 = *((void *)a3 + 1);
    }
    BOOL v39 = __str;
    std::string::basic_string[abi:ne180100]((uint64_t)__str, v38 + 44);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v39 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    }
    if (v38)
    {
      if (*((char *)a3 + 23) >= 0) {
        unsigned __int32 v40 = a3;
      }
      else {
        unsigned __int32 v40 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
      }
      memmove(v39, v40, v38);
    }
    strcpy((char *)v39 + v38, "__rank5_3d_index_tensor_pre_gather_transpose");
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v345, (uint64_t)&v296, __str, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)(v319 + 24), (std::string *)((char *)a3 + 80));
    size_t v41 = v300;
    if ((unint64_t)v300 >= v301)
    {
      unint64_t v43 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
      if (v43 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v44 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
      if (v44 <= v43 + 1) {
        unint64_t v44 = v43 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v45 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v45 = v44;
      }
      *(void *)&__src[32] = &v301;
      if (v45) {
        unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v45);
      }
      else {
        uint64_t v46 = 0;
      }
      *(void *)__src = v45;
      *(void *)&__src[8] = v45 + 144 * v43;
      *(void *)&__src[16] = *(void *)&__src[8];
      *(void *)&__src[24] = v45 + 144 * v46;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v345);
      *(void *)&__src[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v299, __src);
      BOOL v42 = v300;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v300, (uint64_t)&v345);
      BOOL v42 = v41 + 6;
    }
    v300 = v42;
    std::string::operator=(&v296, __str);

    if (SHIBYTE(v351) < 0) {
      operator delete((void *)v350);
    }
    *(void *)__src = &v347;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    *(void *)__src = &v346;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v345.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
  }
  if (*((void *)&v320 + 1) == (void)v321)
  {
    int __val = 0;
  }
  else
  {
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v297.__r_.__value_.__l.__size_;
    }
    uint64_t v48 = &v345;
    std::string::basic_string[abi:ne180100]((uint64_t)&v345, size + 16);
    if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v48 = (std::string *)v345.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v49 = &v297;
      }
      else {
        v49 = (std::string *)v297.__r_.__value_.__r.__words[0];
      }
      memmove(v48, v49, size);
    }
    strcpy((char *)v48 + size, "__gnd_generated_");
    std::to_string((std::string *)__src, 0);
    if (__src[23] >= 0) {
      uint64_t v50 = __src;
    }
    else {
      uint64_t v50 = *(const std::string::value_type **)__src;
    }
    if (__src[23] >= 0) {
      std::string::size_type v51 = __src[23];
    }
    else {
      std::string::size_type v51 = *(void *)&__src[8];
    }
    std::string v52 = std::string::append(&v345, v50, v51);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    __str[0].__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if ((__src[23] & 0x80000000) != 0) {
      operator delete(*(void **)__src);
    }
    if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v345.__r_.__value_.__l.__data_);
    }
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v345, (uint64_t)&v298, __str, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)&v320 + 1, (std::string *)((char *)a3 + 80));
    long long v54 = v300;
    if ((unint64_t)v300 >= v301)
    {
      unint64_t v56 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
      if (v56 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v57 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
      if (v57 <= v56 + 1) {
        unint64_t v57 = v56 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v58 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v58 = v57;
      }
      *(void *)&__src[32] = &v301;
      if (v58) {
        unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v58);
      }
      else {
        uint64_t v59 = 0;
      }
      *(void *)__src = v58;
      *(void *)&__src[8] = v58 + 144 * v56;
      *(void *)&__src[16] = *(void *)&__src[8];
      *(void *)&__src[24] = v58 + 144 * v59;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v345);
      *(void *)&__src[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v299, __src);
      uint64_t v55 = v300;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v300, (uint64_t)&v345);
      uint64_t v55 = v54 + 6;
    }
    v300 = v55;
    std::string::operator=(&v298, __str);

    if (SHIBYTE(v351) < 0) {
      operator delete((void *)v350);
    }
    *(void *)__src = &v347;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    *(void *)__src = &v346;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v345.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    int __val = 1;
  }
  v281 = (unsigned int *)*((void *)&v322 + 1);
  uint64_t v60 = (unsigned int *)v322;
  if ((void)v322 != *((void *)&v322 + 1))
  {
    v279 = (std::string *)((char *)a3 + 80);
    *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v312;
    *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = v313;
    while (2)
    {
      switch(v60[6])
      {
        case 0u:
          if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v61 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v61 = v297.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v345, v61 + 16);
          if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v62 = &v345;
          }
          else {
            uint64_t v62 = (std::string *)v345.__r_.__value_.__r.__words[0];
          }
          if (v61)
          {
            if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v63 = &v297;
            }
            else {
              long long v63 = (std::string *)v297.__r_.__value_.__r.__words[0];
            }
            memmove(v62, v63, v61);
          }
          strcpy((char *)v62 + v61, "__gnd_generated_");
          std::to_string((std::string *)__src, __val);
          if (__src[23] >= 0) {
            int v64 = __src;
          }
          else {
            int v64 = *(const std::string::value_type **)__src;
          }
          if (__src[23] >= 0) {
            std::string::size_type v65 = __src[23];
          }
          else {
            std::string::size_type v65 = *(void *)&__src[8];
          }
          char v66 = std::string::append(&v345, v64, v65);
          long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
          v356.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v356.__r_.__value_.__l.__data_ = v67;
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          if ((__src[23] & 0x80000000) != 0) {
            operator delete(*(void **)__src);
          }
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v345.__r_.__value_.__l.__data_);
          }
          Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v345, (uint64_t)&v296, &v356, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)v60, v279);
          char v68 = v300;
          if ((unint64_t)v300 >= v301)
          {
            unint64_t v103 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
            unint64_t v104 = v103 + 1;
            if (v103 + 1 > 0x1C71C71C71C71C7) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            if (0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4) > v104) {
              unint64_t v104 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
            }
            if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
              unint64_t v105 = 0x1C71C71C71C71C7;
            }
            else {
              unint64_t v105 = v104;
            }
            *(void *)&__src[32] = &v301;
            if (v105) {
              unint64_t v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v105);
            }
            else {
              uint64_t v106 = 0;
            }
            *(void *)__src = v105;
            *(void *)&__src[8] = v105 + 144 * v103;
            *(void *)&__src[16] = *(void *)&__src[8];
            *(void *)&__src[24] = v105 + 144 * v106;
            std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v345);
            *(void *)&__src[16] += 144;
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v299, __src);
            long long v69 = v300;
            std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
          }
          else
          {
            std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v300, (uint64_t)&v345);
            long long v69 = v68 + 6;
          }
          v300 = v69;
          std::string::operator=(&v296, &v356);
          *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)__src;
          *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&__src[16];

          if (SHIBYTE(v351) < 0) {
            operator delete((void *)v350);
          }
          *(void *)__src = &v347;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
          *(void *)__src = &v346;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v345.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v356.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_323;
          }
          v152 = (void *)v356.__r_.__value_.__r.__words[0];
          goto LABEL_322;
        case 1u:
          if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v92 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v92 = v297.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v345, v92 + 16);
          if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v93 = &v345;
          }
          else {
            v93 = (std::string *)v345.__r_.__value_.__r.__words[0];
          }
          if (v92)
          {
            if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v94 = &v297;
            }
            else {
              v94 = (std::string *)v297.__r_.__value_.__r.__words[0];
            }
            memmove(v93, v94, v92);
          }
          strcpy((char *)v93 + v92, "__gnd_generated_");
          std::to_string((std::string *)__src, __val);
          if (__src[23] >= 0) {
            v95 = __src;
          }
          else {
            v95 = *(const std::string::value_type **)__src;
          }
          if (__src[23] >= 0) {
            std::string::size_type v96 = __src[23];
          }
          else {
            std::string::size_type v96 = *(void *)&__src[8];
          }
          v97 = std::string::append(&v345, v95, v96);
          long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          v332.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          if ((__src[23] & 0x80000000) != 0) {
            operator delete(*(void **)__src);
          }
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v345.__r_.__value_.__l.__data_);
          }
          int v99 = *((_DWORD *)a3 + 18);
          int v100 = *((_DWORD *)a3 + 26);
          v101 = (void *)*((void *)a3 + 14);
          id v102 = v101;
          Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)__src, v279);
          if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v356, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
          }
          else {
            std::string v356 = v296;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v337, &v356, &v357, 1uLL);
          if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v356.__r_.__value_.__l.__data_);
          }
          std::string::operator=((std::string *)__src, &v332);
          int v338 = v99;
          int v341 = v100;
          objc_storeStrong(&v342, v101);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v345.__r_.__value_.__l.__data_, (id *)__src);
          v127 = objc_opt_new();
          uint64_t data_low = LODWORD(__str[0].__r_.__value_.__l.__data_);
          uint64_t v129 = HIDWORD(__str[0].__r_.__value_.__r.__words[0]);
          uint64_t v131 = LODWORD(__str[0].__r_.__value_.__r.__words[1]);
          uint64_t v130 = HIDWORD(__str[0].__r_.__value_.__r.__words[1]);
          uint64_t v132 = LODWORD(__str[0].__r_.__value_.__r.__words[2]);
          switch(v60[1])
          {
            case 1u:
              signed int v133 = v60[2];
              uint64_t data_low = (v133 * LODWORD(__str[0].__r_.__value_.__l.__data_));
              uint64_t v131 = (SLODWORD(__str[0].__r_.__value_.__r.__words[1]) / v133);
              break;
            case 2u:
              signed int v136 = v60[2];
              uint64_t v131 = (v136 * LODWORD(__str[0].__r_.__value_.__r.__words[1]));
              uint64_t v129 = (SHIDWORD(__str[0].__r_.__value_.__r.__words[0]) / v136);
              break;
            case 3u:
              signed int v134 = v60[2];
              uint64_t v129 = (v134 * HIDWORD(__str[0].__r_.__value_.__r.__words[0]));
              uint64_t v130 = (SHIDWORD(__str[0].__r_.__value_.__r.__words[1]) / v134);
              break;
            case 4u:
              signed int v135 = v60[2];
              uint64_t v130 = (v135 * HIDWORD(__str[0].__r_.__value_.__r.__words[1]));
              uint64_t v132 = (SLODWORD(__str[0].__r_.__value_.__r.__words[2]) / v135);
              break;
            default:
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Contracting batch for width interleave doesn't make sense.");
          }
          v137 = [NSNumber numberWithInt:data_low];
          [v127 setObject:v137 forKeyedSubscript:@"ReshapedBatch"];

          v138 = [NSNumber numberWithInt:v131];
          [v127 setObject:v138 forKeyedSubscript:@"ReshapedDepth"];

          v139 = [NSNumber numberWithInt:v129];
          [v127 setObject:v139 forKeyedSubscript:@"ReshapedChannel"];

          v140 = [NSNumber numberWithInt:v130];
          [v127 setObject:v140 forKeyedSubscript:@"ReshapedHeight"];

          v141 = [NSNumber numberWithInt:v132];
          [v127 setObject:v141 forKeyedSubscript:@"ReshapedWidth"];

          v142 = (void *)*((void *)&v353 + 1);
          *((void *)&v353 + 1) = @"Reshape";

          id v143 = v354;
          id v354 = v127;

          if (v340 < 0) {
            operator delete(v339);
          }
          v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
          v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src[24];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
          if ((__src[23] & 0x80000000) != 0) {
            operator delete(*(void **)__src);
          }

          *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)__src;
          *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&__src[16];
          std::string::operator=(&v296, &v332);
          v114 = v300;
          if ((unint64_t)v300 < v301) {
            goto LABEL_280;
          }
          unint64_t v115 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
          unint64_t v144 = v115 + 1;
          if (v115 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4) > v144) {
            unint64_t v144 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
            unint64_t v117 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v117 = v144;
          }
          goto LABEL_307;
        case 2u:
          if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v70 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v70 = v297.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v345, v70 + 16);
          if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v71 = &v345;
          }
          else {
            unsigned int v71 = (std::string *)v345.__r_.__value_.__r.__words[0];
          }
          if (v70)
          {
            if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v72 = &v297;
            }
            else {
              v72 = (std::string *)v297.__r_.__value_.__r.__words[0];
            }
            memmove(v71, v72, v70);
          }
          strcpy((char *)v71 + v70, "__gnd_generated_");
          std::to_string((std::string *)__src, __val);
          if (__src[23] >= 0) {
            uint64_t v73 = __src;
          }
          else {
            uint64_t v73 = *(const std::string::value_type **)__src;
          }
          if (__src[23] >= 0) {
            std::string::size_type v74 = __src[23];
          }
          else {
            std::string::size_type v74 = *(void *)&__src[8];
          }
          int v75 = std::string::append(&v345, v73, v74);
          long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v332.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          if ((__src[23] & 0x80000000) != 0) {
            operator delete(*(void **)__src);
          }
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v345.__r_.__value_.__l.__data_);
          }
          int v77 = *((_DWORD *)a3 + 18);
          int v78 = *((_DWORD *)a3 + 26);
          std::string v79 = (void *)*((void *)a3 + 14);
          id v80 = v79;
          Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)__src, v279);
          if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v356, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
          }
          else {
            std::string v356 = v296;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v337, &v356, &v357, 1uLL);
          if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v356.__r_.__value_.__l.__data_);
          }
          std::string::operator=((std::string *)__src, &v332);
          int v338 = v77;
          int v341 = v78;
          objc_storeStrong(&v342, v79);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v345.__r_.__value_.__l.__data_, (id *)__src);
          v107 = objc_opt_new();
          v108 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:1];
          v109 = objc_opt_new();
          [v109 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
          [v109 setObject:@"Replication" forKeyedSubscript:@"PaddingMode"];
          [v108 setObject:v109 atIndexedSubscript:0];
          [v107 setObject:v108 forKeyedSubscript:@"PaddingInfo"];
          v110 = [NSNumber numberWithShort:0];
          [v107 setObject:v110 forKeyedSubscript:@"BackgroundValue"];

          [v107 setObject:&unk_1EE3AEE30 forKeyedSubscript:@"PadLeft"];
          v111 = [NSNumber numberWithInt:*v60];
          [v107 setObject:v111 forKeyedSubscript:@"PadRight"];

          [v107 setObject:&unk_1EE3AEE30 forKeyedSubscript:@"PadTop"];
          [v107 setObject:&unk_1EE3AEE30 forKeyedSubscript:@"PadBot"];
          [v107 setObject:&unk_1EE3AEE30 forKeyedSubscript:@"PadFront"];
          [v107 setObject:&unk_1EE3AEE30 forKeyedSubscript:@"PadBack"];
          [v107 setObject:&unk_1EE3AEE30 forKeyedSubscript:@"PadChannelFront"];
          [v107 setObject:&unk_1EE3AEE30 forKeyedSubscript:@"PadChannelBack"];
          [v107 setObject:&unk_1EE3AEE30 forKeyedSubscript:@"PadBatchFront"];
          [v107 setObject:&unk_1EE3AEE30 forKeyedSubscript:@"PadBatchBack"];
          v112 = (void *)*((void *)&v353 + 1);
          *((void *)&v353 + 1) = @"Padding";

          id v113 = v354;
          id v354 = v107;

          if (v340 < 0) {
            operator delete(v339);
          }
          v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
          v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src[24];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
          if ((__src[23] & 0x80000000) != 0) {
            operator delete(*(void **)__src);
          }

          LODWORD(__str[0].__r_.__value_.__r.__words[2]) += *v60;
          std::string::operator=(&v296, &v332);
          v114 = v300;
          if ((unint64_t)v300 < v301) {
            goto LABEL_280;
          }
          unint64_t v115 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
          unint64_t v116 = v115 + 1;
          if (v115 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4) > v116) {
            unint64_t v116 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
            unint64_t v117 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v117 = v116;
          }
          goto LABEL_307;
        case 3u:
          if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v81 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v81 = v297.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v345, v81 + 16);
          if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v82 = &v345;
          }
          else {
            int v82 = (std::string *)v345.__r_.__value_.__r.__words[0];
          }
          if (v81)
          {
            if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v83 = &v297;
            }
            else {
              int v83 = (std::string *)v297.__r_.__value_.__r.__words[0];
            }
            memmove(v82, v83, v81);
          }
          strcpy((char *)v82 + v81, "__gnd_generated_");
          std::to_string((std::string *)__src, __val);
          if (__src[23] >= 0) {
            int64x2_t v84 = __src;
          }
          else {
            int64x2_t v84 = *(const std::string::value_type **)__src;
          }
          if (__src[23] >= 0) {
            std::string::size_type v85 = __src[23];
          }
          else {
            std::string::size_type v85 = *(void *)&__src[8];
          }
          char v86 = std::string::append(&v345, v84, v85);
          long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          v332.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          if ((__src[23] & 0x80000000) != 0) {
            operator delete(*(void **)__src);
          }
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v345.__r_.__value_.__l.__data_);
          }
          int v88 = *((_DWORD *)a3 + 18);
          int v89 = *((_DWORD *)a3 + 26);
          int v90 = (void *)*((void *)a3 + 14);
          id v91 = v90;
          Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)__src, v279);
          if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v356, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
          }
          else {
            std::string v356 = v296;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v337, &v356, &v357, 1uLL);
          if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v356.__r_.__value_.__l.__data_);
          }
          std::string::operator=((std::string *)__src, &v332);
          int v338 = v88;
          int v341 = v89;
          objc_storeStrong(&v342, v90);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v345.__r_.__value_.__l.__data_, (id *)__src);
          v118 = objc_opt_new();
          [v118 setObject:@"RoundNearest" forKeyedSubscript:@"Type"];
          v119 = (void *)*((void *)&v353 + 1);
          *((void *)&v353 + 1) = @"Neuron";

          id v120 = v354;
          id v354 = v118;

          if (v340 < 0) {
            operator delete(v339);
          }
          v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
          v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src[24];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
          if ((__src[23] & 0x80000000) != 0) {
            operator delete(*(void **)__src);
          }

          std::string::operator=(&v296, &v332);
          v114 = v300;
          if ((unint64_t)v300 >= v301)
          {
            unint64_t v115 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
            unint64_t v126 = v115 + 1;
            if (v115 + 1 > 0x1C71C71C71C71C7) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            if (0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4) > v126) {
              unint64_t v126 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
            }
            if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
              unint64_t v117 = 0x1C71C71C71C71C7;
            }
            else {
              unint64_t v117 = v126;
            }
LABEL_307:
            *(void *)&__src[32] = &v301;
            v145 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v117);
            v146 = (std::string *)&v145[144 * v115];
            *(void *)__src = v145;
            *(void *)&__src[8] = v146;
            *(void *)&__src[24] = &v145[144 * v147];
            long long v148 = *(_OWORD *)&v345.__r_.__value_.__l.__data_;
            v146->__r_.__value_.__r.__words[2] = v345.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v146->__r_.__value_.__l.__data_ = v148;
            memset(&v345, 0, sizeof(v345));
            v146[1].__r_.__value_.__r.__words[0] = 0;
            v146[1].__r_.__value_.__l.__size_ = 0;
            v146[1].__r_.__value_.__r.__words[2] = 0;
            v146[1] = v346;
            memset(&v346, 0, sizeof(v346));
            v146[2].__r_.__value_.__r.__words[0] = 0;
            v146[2].__r_.__value_.__l.__size_ = 0;
            v146[2].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v146[2].__r_.__value_.__l.__data_ = v347;
            v146[2].__r_.__value_.__r.__words[2] = v348;
            long long v347 = 0uLL;
            std::string::size_type v348 = 0;
            LODWORD(v146[3].__r_.__value_.__l.__data_) = v349;
            long long v149 = v350;
            v146[4].__r_.__value_.__r.__words[0] = v351;
            *(_OWORD *)&v146[3].__r_.__value_.__r.__words[1] = v149;
            std::string::size_type v351 = 0;
            long long v350 = 0uLL;
            LODWORD(v146[4].__r_.__value_.__r.__words[1]) = v352;
            long long v150 = v353;
            long long v353 = 0uLL;
            *(_OWORD *)&v146[4].__r_.__value_.__r.__words[2] = v150;
            std::string::size_type v151 = (std::string::size_type)v354;
            id v354 = 0;
            v146[5].__r_.__value_.__l.__size_ = v151;
            v146[5].__r_.__value_.__r.__words[2] = v355;
            *(void *)&__src[16] = v146 + 6;
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v299, __src);
            v125 = v300;
            std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
          }
          else
          {
LABEL_280:
            long long v121 = *(_OWORD *)&v345.__r_.__value_.__l.__data_;
            v300->__r_.__value_.__r.__words[2] = v345.__r_.__value_.__r.__words[2];
            v114[1].__r_.__value_.__r.__words[0] = 0;
            *(_OWORD *)&v114->__r_.__value_.__l.__data_ = v121;
            *(_OWORD *)&v345.__r_.__value_.__l.__data_ = 0uLL;
            v114[1].__r_.__value_.__l.__size_ = 0;
            v114[1].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v114[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v346.__r_.__value_.__l.__data_;
            *(_OWORD *)&v346.__r_.__value_.__l.__data_ = 0uLL;
            v114[1].__r_.__value_.__r.__words[2] = v346.__r_.__value_.__r.__words[2];
            v114[2].__r_.__value_.__r.__words[0] = 0;
            v346.__r_.__value_.__r.__words[2] = 0;
            v114[2].__r_.__value_.__l.__size_ = 0;
            v114[2].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v114[2].__r_.__value_.__l.__data_ = v347;
            v114[2].__r_.__value_.__r.__words[2] = v348;
            long long v347 = 0uLL;
            std::string::size_type v348 = 0;
            LODWORD(v114[3].__r_.__value_.__l.__data_) = v349;
            long long v122 = v350;
            v114[4].__r_.__value_.__r.__words[0] = v351;
            *(_OWORD *)&v114[3].__r_.__value_.__r.__words[1] = v122;
            std::string::size_type v351 = 0;
            long long v350 = 0uLL;
            LODWORD(v114[4].__r_.__value_.__r.__words[1]) = v352;
            long long v123 = v353;
            v345.__r_.__value_.__r.__words[2] = 0;
            long long v353 = 0uLL;
            *(_OWORD *)&v114[4].__r_.__value_.__r.__words[2] = v123;
            std::string::size_type v124 = (std::string::size_type)v354;
            id v354 = 0;
            v114[5].__r_.__value_.__l.__size_ = v124;
            v114[5].__r_.__value_.__r.__words[2] = v355;
            v125 = v114 + 6;
          }
          v300 = v125;

          if (SHIBYTE(v351) < 0) {
            operator delete((void *)v350);
          }
          *(void *)__src = &v347;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
          *(void *)__src = &v346;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v345.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
          {
            v152 = (void *)v332.__r_.__value_.__r.__words[0];
LABEL_322:
            operator delete(v152);
          }
LABEL_323:
          ++__val;
LABEL_324:
          v60 += 8;
          if (v60 == v281) {
            break;
          }
          continue;
        default:
          goto LABEL_324;
      }
      break;
    }
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str[0].__r_.__value_.__l.__data_, (id *)a3);
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v345, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  }
  else {
    std::string v345 = v298;
  }
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v346, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
  }
  else {
    std::string v346 = v296;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v290, &v345, &v347, 2uLL);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v346.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v345 + i * 8 + 24));
    }
  }
  id obj = (id)objc_opt_new();
  v154 = objc_opt_new();
  v155 = (unsigned int *)*((void *)&v323 + 1);
  for (j = (unsigned int *)v324; v155 != j; ++v155)
  {
    uint64_t v157 = *v155;
    if (v157 >= 5) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
    }
    [v154 addObject:off_1E5747010[v157]];
  }
  [obj setObject:v154 forKeyedSubscript:@"GatherNDAxes"];
  v158 = v294;
  v294 = @"Gather";

  objc_storeStrong(&v295, obj);
  v160 = v287;
  v159 = v288;
  if (v288 != v287)
  {
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v161 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v161 = v297.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__src, v161 + 16);
    if (__src[23] >= 0) {
      v162 = __src;
    }
    else {
      v162 = *(unsigned char **)__src;
    }
    if (v161)
    {
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v163 = &v297;
      }
      else {
        v163 = (std::string *)v297.__r_.__value_.__r.__words[0];
      }
      memmove(v162, v163, v161);
    }
    strcpy(&v162[v161], "__gnd_generated_");
    std::to_string(&v356, __val);
    if ((v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v164 = &v356;
    }
    else {
      v164 = (std::string *)v356.__r_.__value_.__r.__words[0];
    }
    if ((v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v165 = HIBYTE(v356.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v165 = v356.__r_.__value_.__l.__size_;
    }
    v166 = std::string::append((std::string *)__src, (const std::string::value_type *)v164, v165);
    long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
    v345.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v345.__r_.__value_.__l.__data_ = v167;
    v166->__r_.__value_.__l.__size_ = 0;
    v166->__r_.__value_.__r.__words[2] = 0;
    v166->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v356.__r_.__value_.__l.__data_);
    }
    if ((__src[23] & 0x80000000) != 0) {
      operator delete(*(void **)__src);
    }
    std::string::operator=(__str, &v345);
    if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v345.__r_.__value_.__l.__data_);
    }
  }
  v168 = v300;
  if ((unint64_t)v300 >= v301)
  {
    unint64_t v170 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
    if (v170 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v171 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
    if (v171 <= v170 + 1) {
      unint64_t v171 = v170 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v172 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v172 = v171;
    }
    v346.__r_.__value_.__l.__size_ = (std::string::size_type)&v301;
    if (v172) {
      unint64_t v172 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v172);
    }
    else {
      uint64_t v173 = 0;
    }
    v345.__r_.__value_.__r.__words[0] = v172;
    v345.__r_.__value_.__l.__size_ = v172 + 144 * v170;
    v345.__r_.__value_.__r.__words[2] = v345.__r_.__value_.__l.__size_;
    v346.__r_.__value_.__r.__words[0] = v172 + 144 * v173;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v345.__r_.__value_.__l.__size_, (uint64_t)__str);
    v345.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v299, &v345);
    v169 = v300;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v345);
    v160 = v287;
    v159 = v288;
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v300, (uint64_t)__str);
    v169 = v168 + 6;
  }
  v300 = v169;
  if (v159 != v160)
  {
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v345, (uint64_t)__str, (const std::string *)a3, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)&v287, (std::string *)((char *)a3 + 80));
    v174 = v300;
    if ((unint64_t)v300 >= v301)
    {
      unint64_t v176 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
      if (v176 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v177 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
      if (v177 <= v176 + 1) {
        unint64_t v177 = v176 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v178 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v178 = v177;
      }
      *(void *)&__src[32] = &v301;
      if (v178) {
        unint64_t v178 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v178);
      }
      else {
        uint64_t v179 = 0;
      }
      *(void *)__src = v178;
      *(void *)&__src[8] = v178 + 144 * v176;
      *(void *)&__src[16] = *(void *)&__src[8];
      *(void *)&__src[24] = v178 + 144 * v179;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v345);
      *(void *)&__src[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v299, __src);
      v175 = v300;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v300, (uint64_t)&v345);
      v175 = v174 + 6;
    }
    v300 = v175;

    if (SHIBYTE(v351) < 0) {
      operator delete((void *)v350);
    }
    *(void *)__src = &v347;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    *(void *)__src = &v346;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v345.__r_.__value_.__l.__data_);
    }
  }
  atomic_fetch_add_explicit(&v277->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v275) {
    atomic_fetch_add_explicit(&v275->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v345);
  id v354 = 0;
  *((void *)&v353 + 1) = 0;
  uint64_t v355 = 0x100000000;
  uint64_t v180 = *((void *)this + 45);
  v181 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v181) {
    atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v180 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 37) + 104))() + 40))
  {
    float v182 = *(float *)(v268 + 112);
    v331[0] = v180;
    v331[1] = v181;
    if (v181) {
      atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v183 = (std::__shared_weak_count *)*((void *)this + 48);
    v330[0] = *((void *)this + 47);
    v330[1] = (uint64_t)v183;
    if (v183) {
      atomic_fetch_add_explicit(&v183->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v331, v330, (uint64_t)&v332, v182);
    if (v183) {
      nitro::nitro_function::nitro_function(v183);
    }
    if (v181) {
      nitro::nitro_function::nitro_function(v181);
    }
    uint64_t v184 = *(unsigned int *)(v180 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v328, 2 * v184, 1, 1, 1);
    uint64_t v185 = (int)v184;
    uint64_t v186 = *((void *)this + 47);
    int v187 = v184;
    if (v186) {
      int v187 = *(_DWORD *)(v186 + 8);
    }
    if (!*((unsigned char *)v274 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v356, 4 * v184);
      v241 = *(int **)(v356.__r_.__value_.__r.__words[0] + 16);
      int v242 = v184 - 1;
      if ((int)v184 >= 1)
      {
        for (uint64_t k = 0; k != v184; ++k)
        {
          float v244 = *(float *)(*(void *)(v180 + 16) + k * 4);
          *(float *)&int v245 = ldexp(1.0, -v334) * v244;
          v241[k] = v245;
        }
      }
      if (v184)
      {
        v246 = *(_WORD **)(v328 + 16);
        do
        {
          int v247 = *v241++;
          _S0 = v247;
          __asm { FCVT            H0, S0 }
          *v246++ = _S0;
          --v185;
        }
        while (v185);
      }
      if (*((void *)this + 47))
      {
        Espresso::blob<unsigned char,1>::make(__src, 4 * v187);
        long long v250 = *(_OWORD *)__src;
        Espresso::blob<unsigned char,1>::make(__src, 2 * v187);
        *(void *)v283 = *(void *)__src;
        v251 = *(int **)(v250 + 16);
        if (v187 >= 1)
        {
          for (uint64_t m = 0; m != v187; ++m)
          {
            if (v242 >= (int)m) {
              int v253 = m;
            }
            else {
              int v253 = v242;
            }
            *(float *)&int v254 = *(float *)(*(void *)(v332.__r_.__value_.__r.__words[2] + 16) + 4 * m)
                            * *(float *)(*(void *)(v332.__r_.__value_.__r.__words[0] + 16) + 4 * v253);
            v251[m] = v254;
            unsigned int v255 = v335;
            unsigned int v256 = v334;
            *(float *)&int v257 = ldexp(1.0, v335 - v334) * *(float *)&v254;
            v251[m] = v257;
            float v260 = ldexp(1.0, v256 - v255) * *(float *)&v257;
            if (v260 < -127.0 || v260 > 255.0)
            {
              v262 = Espresso::espresso_os_log_subsystem(v258, v259);
              if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
              {
                double v263 = *(float *)&v251[m];
                *(_DWORD *)__src = 134218752;
                *(double *)&__src[4] = v260;
                *(_WORD *)&__src[12] = 1024;
                *(_DWORD *)&__src[14] = v335;
                *(_WORD *)&__src[18] = 1024;
                *(_DWORD *)&__src[20] = v334;
                *(_WORD *)&__src[24] = 2048;
                *(double *)&__src[26] = v263;
                _os_log_error_impl(&dword_1920CB000, v262, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", __src, 0x22u);
              }
            }
          }
        }
        if (v187)
        {
          uint64_t v264 = v187;
          v265 = *(_WORD **)(*(void *)v283 + 16);
          do
          {
            int v266 = *v251++;
            _S0 = v266;
            __asm { FCVT            H0, S0 }
            *v265++ = _S0;
            --v264;
          }
          while (v264);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v188 = v335;
    uint64_t v189 = v328;
    if (v184)
    {
      v190 = *(int **)(v332.__r_.__value_.__r.__words[0] + 16);
      v191 = *(_WORD **)(v328 + 16);
      do
      {
        int v192 = *v190++;
        _S0 = v192;
        __asm { FCVT            H0, S0 }
        *v191++ = _S0;
        --v185;
      }
      while (v185);
    }
    unsigned int v278 = v188;
    if (v186)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(__src, 2 * v187, 1, 1, 1);
      v280 = *(std::__shared_weak_count **)&__src[8];
      uint64_t v198 = *(void *)__src;
      if (v187)
      {
        uint64_t v199 = v187;
        v200 = *(_WORD **)(*(void *)__src + 16);
        v201 = *(int **)(v332.__r_.__value_.__r.__words[2] + 16);
        do
        {
          int v202 = *v201++;
          _S0 = v202;
          __asm { FCVT            H0, S0 }
          *v200++ = _S0;
          --v199;
        }
        while (v199);
      }
    }
    else
    {
      v280 = 0;
      uint64_t v198 = 0;
    }
    int v204 = *((unsigned __int8 *)v274 + 552);
    v205 = (Espresso::ANECompilerEngine::compiler *)((char *)v274 + 128);
    v206 = v329;
    if (v329) {
      atomic_fetch_add_explicit(&v329->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v207 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v205, *(const unsigned __int8 **)(v189 + 16), *(int *)(v189 + 8));
    if (v206) {
      nitro::nitro_function::nitro_function(v206);
    }
    id v282 = (id)objc_opt_new();
    if (*((unsigned char *)v274 + 121))
    {
      id v208 = *(id *)(v299 + 128);

      id v282 = v208;
    }
    v209 = objc_opt_new();
    v210 = [NSNumber numberWithInt:v184];
    [v209 setObject:v210 forKeyedSubscript:@"ScaleCount"];

    v211 = [NSNumber numberWithInt:v207];
    [v209 setObject:v211 forKeyedSubscript:@"ScaleOffset"];

    v212 = NSNumber;
    if (v204) {
      uint64_t weights_file_index = 0;
    }
    else {
    v214 = [v212 numberWithUnsignedLong:weights_file_index];
    }
    [v209 setObject:v214 forKeyedSubscript:@"ScaleIndex"];

    [v209 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    v215 = [NSNumber numberWithInt:v334];
    [v282 setObject:v215 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 47))
    {
      if (v280) {
        atomic_fetch_add_explicit(&v280->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v216 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v205, *(const unsigned __int8 **)(v198 + 16), *(int *)(v198 + 8));
      if (v280) {
        nitro::nitro_function::nitro_function(v280);
      }
      v217 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 47) + 8)];
      [v209 setObject:v217 forKeyedSubscript:@"BiasCount"];

      v218 = [NSNumber numberWithInt:v216];
      [v209 setObject:v218 forKeyedSubscript:@"BiasOffset"];

      v219 = NSNumber;
      if (v204) {
        uint64_t v220 = 0;
      }
      else {
      v221 = [v219 numberWithUnsignedLong:v220];
      }
      [v209 setObject:v221 forKeyedSubscript:@"BiasIndex"];

      [v209 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      v222 = [NSNumber numberWithInt:v278];
      [v282 setObject:v222 forKeyedSubscript:@"BiasShift"];
    }
    [v282 setObject:v209 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)__src, (id *)a3);
    v223 = v300;
    if (v300 == (std::string *)v299) {
      goto LABEL_459;
    }
    v224 = v300 - 6;
    uint64_t v225 = HIBYTE(v300[-6].__r_.__value_.__r.__words[2]);
    char v226 = v225;
    std::string::size_type v227 = v300[-6].__r_.__value_.__l.__size_;
    if ((v225 & 0x80u) == 0) {
      std::string::size_type v228 = HIBYTE(v300[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v228 = v300[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v229 = __src[23];
    if (__src[23] < 0) {
      uint64_t v229 = *(void *)&__src[8];
    }
    if (v228 != v229) {
      goto LABEL_453;
    }
    if (__src[23] >= 0) {
      v230 = __src;
    }
    else {
      v230 = *(unsigned __int8 **)__src;
    }
    if ((char)v225 < 0)
    {
      data = (const std::string::value_type *)v224->__r_.__value_.__r.__words[0];
      if (memcmp(v224->__r_.__value_.__l.__data_, v230, v300[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_456;
      }
    }
    else if ((_BYTE)v225)
    {
      v231 = v300 - 6;
      while (v231->__r_.__value_.__s.__data_[0] == *v230)
      {
        v231 = (std::string *)((char *)v231 + 1);
        ++v230;
        if (!--v225) {
          goto LABEL_452;
        }
      }
      goto LABEL_453;
    }
LABEL_452:
    std::string::append(v223 - 6, "__@pre_scale_bias");
    char v226 = HIBYTE(v223[-6].__r_.__value_.__r.__words[2]);
LABEL_453:
    if ((v226 & 0x80) == 0)
    {
      long long v233 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
      v356.__r_.__value_.__r.__words[2] = v223[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v356.__r_.__value_.__l.__data_ = v233;
      goto LABEL_457;
    }
    data = v223[-6].__r_.__value_.__l.__data_;
    std::string::size_type v227 = v223[-6].__r_.__value_.__l.__size_;
LABEL_456:
    std::string::__init_copy_ctor_external(&v356, data, v227);
LABEL_457:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v337, &v356, &v357, 1uLL);
    if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v356.__r_.__value_.__l.__data_);
    }
LABEL_459:
    v234 = v343;
    v343 = @"GOC";

    objc_storeStrong(&v344, v282);
    if (!*((unsigned char *)v274 + 121))
    {
      v235 = v300;
      if ((unint64_t)v300 >= v301)
      {
        unint64_t v237 = 0x8E38E38E38E38E39 * (((uint64_t)v300 - v299) >> 4);
        if (v237 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v238 = 0x1C71C71C71C71C72 * ((uint64_t)(v301 - v299) >> 4);
        if (v238 <= v237 + 1) {
          unint64_t v238 = v237 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v301 - v299) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v239 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v239 = v238;
        }
        *((void *)&v357 + 1) = &v301;
        if (v239) {
          unint64_t v239 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v239);
        }
        else {
          uint64_t v240 = 0;
        }
        v356.__r_.__value_.__r.__words[0] = v239;
        v356.__r_.__value_.__l.__size_ = v239 + 144 * v237;
        v356.__r_.__value_.__r.__words[2] = v356.__r_.__value_.__l.__size_;
        *(void *)&long long v357 = v239 + 144 * v240;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v356.__r_.__value_.__l.__size_, (uint64_t)__src);
        v356.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v299, &v356);
        v236 = v300;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v356);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v300, (uint64_t)__src);
        v236 = v235 + 6;
      }
      v300 = v236;
    }

    if (v340 < 0) {
      operator delete(v339);
    }
    v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&v337;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
    v356.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v356);
    if ((__src[23] & 0x80000000) != 0) {
      operator delete(*(void **)__src);
    }

    if (v280) {
      nitro::nitro_function::nitro_function(v280);
    }
    if (v329) {
      nitro::nitro_function::nitro_function(v329);
    }
    if (v333) {
      nitro::nitro_function::nitro_function(v333);
    }
    if (v332.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v332.__r_.__value_.__l.__size_);
    }
  }
  if (v181) {
    nitro::nitro_function::nitro_function(v181);
  }

  if (SHIBYTE(v351) < 0) {
    operator delete((void *)v350);
  }
  *(void *)__src = &v347;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  *(void *)__src = &v346;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v345.__r_.__value_.__l.__data_);
  }
  if (v275) {
    nitro::nitro_function::nitro_function(v275);
  }
  nitro::nitro_function::nitro_function(v277);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 37) + 24))((char *)this + 296, v274, &v299);
  if (v287) {
    operator delete(v287);
  }

  if (v292 < 0) {
    operator delete(v291);
  }
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&v290;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v345);
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v345);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v296.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v297.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v298.__r_.__value_.__l.__data_);
  }
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&v299;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v345);
  if (v270) {
    nitro::nitro_function::nitro_function(v270);
  }
  if (v271) {
    nitro::nitro_function::nitro_function(v271);
  }
  if (v272) {
    nitro::nitro_function::nitro_function(v272);
  }
  if (*((void *)&v326 + 1))
  {
    *(void *)&long long v327 = *((void *)&v326 + 1);
    operator delete(*((void **)&v326 + 1));
  }
  if ((void)v325)
  {
    *((void *)&v325 + 1) = v325;
    operator delete((void *)v325);
  }
  if (*((void *)&v323 + 1))
  {
    *(void *)&long long v324 = *((void *)&v323 + 1);
    operator delete(*((void **)&v323 + 1));
  }
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&v322;
  if (*((void *)&v320 + 1))
  {
    *(void *)&long long v321 = *((void *)&v320 + 1);
    operator delete(*((void **)&v320 + 1));
  }
  v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&v319;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v345);

  if (v275) {
    nitro::nitro_function::nitro_function(v275);
  }
  if (v269) {
    nitro::nitro_function::nitro_function(v269);
  }
  nitro::nitro_function::nitro_function(v277);
}

void sub_1927897AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  nitro::nitro_function::nitro_function(a19);
  if (__p) {
    operator delete(__p);
  }

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a35);
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  a35 = &a73;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }

  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::torch_mode_gather_axis(unsigned int a1, int a2, int a3, int *a4)
{
  uint64_t v4 = 0;
  unint64_t v5 = (a1 & (a3 >> 31)) + a3;
  if ((v5 & 0x80000000) == 0 && v5 < (int)a1)
  {
    if (a1 <= 5 && (unsigned int v6 = ~v5 + a1, v6 <= 4))
    {
      int v7 = 4;
      switch(v6)
      {
        case 0u:
          break;
        case 1u:
          int v7 = 3;
          break;
        case 2u:
          if (((a1 == 5) & a2) != 0) {
            int v7 = 1;
          }
          else {
            int v7 = 2;
          }
          break;
        case 3u:
          if (((a1 == 5) & a2) != 0) {
            int v7 = 2;
          }
          else {
            int v7 = 0;
          }
          break;
        case 4u:
          int v7 = a2 ^ 1;
          if (a1 != 5) {
            int v7 = 1;
          }
          break;
        default:
          return 0;
      }
      *a4 = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

unsigned int **std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>>::operator=[abi:ne180100](unsigned int **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = a2 + 32 * a3;
  uint64_t v6 = 32 * a3;
  unint64_t v7 = (32 * a3) >> 5;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = *a1;
  if (v7 > (v8 - (uint64_t)*a1) >> 5)
  {
    if (v9)
    {
      uint64_t v10 = (uint64_t)a1[1];
      uint64_t v11 = v9;
      if ((unsigned int *)v10 != v9)
      {
        do
        while ((unsigned int *)v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (v6 < 0) {
      goto LABEL_38;
    }
    uint64_t v12 = v8 >> 4;
    if (v8 >> 4 <= v7) {
      uint64_t v12 = v7;
    }
    unint64_t v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v12;
    if (v13 >> 59) {
LABEL_38:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v13);
    *a1 = (unsigned int *)v14;
    a1[1] = (unsigned int *)v14;
    a1[2] = (unsigned int *)&v14[32 * v15];
    uint64_t v16 = (uint64_t)a1;
    uint64_t v17 = v3;
    goto LABEL_25;
  }
  uint64_t v18 = (uint64_t)a1[1];
  unint64_t v19 = (v18 - (uint64_t)v9) >> 5;
  if (v19 < v7)
  {
    if ((unsigned int *)v18 == v9)
    {
LABEL_24:
      uint64_t v17 = v3 + 32 * v19;
      uint64_t v16 = (uint64_t)a1;
LABEL_25:
      return a1;
    }
    uint64_t v20 = 32 * v19;
    uint64_t v21 = a2;
    while (1)
    {
      uint64_t v22 = v9[6];
      uint64_t v23 = *(unsigned int *)(v21 + 24);
      if (v22 == -1)
      {
        if (v23 != -1)
        {
LABEL_22:
          uint64_t v27 = v9;
          ((void (*)(unsigned int **, unsigned int *, uint64_t))*(&off_1EE39BD70 + v23))(&v27, v9, v21);
        }
      }
      else
      {
        if (v23 != -1) {
          goto LABEL_22;
        }
        ((void (*)(unsigned int **, unsigned int *))*(&off_1EE39BD10 + v22))(&v27, v9);
        v9[6] = -1;
      }
      v21 += 32;
      v9 += 8;
      v20 -= 32;
      if (!v20) {
        goto LABEL_24;
      }
    }
  }
  if (!a3) {
    goto LABEL_35;
  }
  do
  {
    uint64_t v24 = v9[6];
    uint64_t v25 = *(unsigned int *)(v3 + 24);
    if (v24 == -1)
    {
      if (v25 == -1) {
        goto LABEL_32;
      }
    }
    else if (v25 == -1)
    {
      ((void (*)(unsigned int **, unsigned int *))*(&off_1EE39BD10 + v24))(&v27, v9);
      v9[6] = -1;
      goto LABEL_32;
    }
    uint64_t v27 = v9;
    ((void (*)(unsigned int **, unsigned int *, uint64_t))*(&off_1EE39BD70 + v25))(&v27, v9, v3);
LABEL_32:
    v3 += 32;
    v9 += 8;
    v6 -= 32;
  }
  while (v6);
  uint64_t v18 = (uint64_t)a1[1];
LABEL_35:
  while ((unsigned int *)v18 != v9)
  a1[1] = v9;
  return a1;
}

uint64_t anonymous namespace'::maybe_round_index_tensor(uint64_t result, int a2)
{
  if (a2 != 2 && a2 != 4)
  {
    v2[6] = 3;
  }
  return result;
}

void sub_19278A2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<Espresso::ANECompilerEngine::NamedAxis>::__assign_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis const*,Espresso::ANECompilerEngine::NamedAxis const*>(void *a1, unsigned char *__src, unsigned char *a3)
{
  __n128 result = (void *)a1[2];
  unint64_t v7 = (char *)*a1;
  if (result == (void *)*a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    __n128 result = std::vector<Espresso::ANECompilerEngine::NamedAxis>::__vallocate[abi:ne180100](a1, 1uLL);
    uint64_t v11 = (char *)a1[1];
    uint64_t v8 = a1 + 1;
    unint64_t v7 = v11;
    size_t v10 = a3 - __src;
    if (a3 != __src) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v9 = (char *)a1[1];
    uint64_t v8 = a1 + 1;
    size_t v10 = a3 - __src;
    if (v9 == v7)
    {
      if (__src == a3) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    if (a3 != __src) {
LABEL_4:
    }
      __n128 result = memmove(v7, __src, v10);
  }
LABEL_5:
  void *v8 = &v7[v10];
  return result;
}

uint64_t anonymous namespace'::tf_gather_mode_plan(void *a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  id v16 = a1;
  if (a8 < 0
    || ((uint64_t v17 = (uint64_t)a9,
         int v18 = a3 - a8,
         a3 != a8)
      ? (int v19 = a3)
      : (int v19 = a3 + 1),
        (int v20 = v19 + ~a8, v20 < 0) || (v21 = v20 + a2, (int)(v20 + a2) > 5)))
  {
    uint64_t v22 = 0;
    goto LABEL_8;
  }
  int v97 = a5;
  BOOL v98 = a3 == a8;
  int v96 = a4;
  uint64_t v22 = 0;
  uint64_t v24 = 0;
  __p = 0;
  id v102 = 0;
  unint64_t v103 = 0;
  int v25 = ~((a2 & (a7 >> 31)) + a7);
  unsigned int v26 = v21 + v25;
  int v99 = (uint64_t *)(v19 + ~a8);
  signed int v27 = v21 + v25 - v99;
  if ((v27 & 0x80000000) == 0 && v27 + v19 <= 5)
  {
    unsigned int v28 = v21;
    signed int v29 = v21 - a3;
    if (a8 && v29 < v27 || a8 && (int)(v28 + v98) > 5)
    {
LABEL_15:
      uint64_t v24 = 0;
      goto LABEL_16;
    }
    unsigned int v87 = v28;
    int v88 = (a2 & (a7 >> 31)) + a7;
    if (a8) {
      BOOL v30 = v28 == a3;
    }
    else {
      BOOL v30 = 1;
    }
    int v31 = !v30;
    int v32 = (int)v99;
    id v95 = v16;
    if (v26 != v99 || v31)
    {
      int v86 = ~((a2 & (a7 >> 31)) + a7);
      unint64_t v62 = 0;
      long long v63 = 0;
      if (a3 <= 1) {
        uint64_t v64 = 1;
      }
      else {
        uint64_t v64 = a3;
      }
      int64_t v65 = v18;
      signed int v94 = v29;
      int64_t v90 = v18;
      uint64_t v92 = v64;
      while (1)
      {
        if (v62 <= 4) {
          uint64_t v66 = dword_192DD2ADC[v62];
        }
        else {
          uint64_t v66 = 0;
        }
        if ((uint64_t)v62 >= v65) {
          signed int v67 = v29;
        }
        else {
          signed int v67 = v27;
        }
        if (!a8) {
          signed int v67 = v27;
        }
        unsigned int v68 = v67 + v62;
        if (v68 > 4 || v62 == 5) {
          goto LABEL_15;
        }
        uint64_t v69 = qword_192DD2B18[v68];
        if ((unint64_t)v63 >= v103)
        {
          unsigned int v71 = __p;
          uint64_t v72 = ((char *)v63 - (unsigned char *)__p) >> 3;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = v103 - (void)__p;
          if ((uint64_t)(v103 - (void)__p) >> 2 > v73) {
            unint64_t v73 = v74 >> 2;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v73;
          }
          if (v75) {
            unint64_t v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v75);
          }
          else {
            uint64_t v76 = 0;
          }
          int v77 = (uint64_t *)(v75 + 8 * v72);
          *int v77 = v69 | v66;
          size_t v70 = v77 + 1;
          if (v63 == v71)
          {
            uint64_t v17 = (uint64_t)a9;
          }
          else
          {
            uint64_t v17 = (uint64_t)a9;
            do
            {
              uint64_t v78 = *--v63;
              *--int v77 = v78;
            }
            while (v63 != v71);
            long long v63 = __p;
          }
          __p = v77;
          unint64_t v103 = v75 + 8 * v76;
          id v16 = v95;
          if (v63) {
            operator delete(v63);
          }
          signed int v29 = v94;
          int64_t v65 = v90;
          uint64_t v64 = v92;
        }
        else
        {
          void *v63 = v69 | v66;
          size_t v70 = v63 + 1;
        }
        id v102 = v70;
        ++v62;
        long long v63 = v70;
        if (v62 == v64)
        {
          Espresso::ANECompilerEngine::fill_unpaired_transposes((uint64_t)&__p);
          std::string v79 = v102;
          int v32 = (int)v99;
          int v25 = v86;
          if (v79 != v80) {
            id v102 = v80;
          }
          break;
        }
      }
    }
    if (v32 >= 1)
    {
      uint64_t v33 = 0;
      uint64_t v24 = 0;
      unint64_t v34 = 0;
      unint64_t v35 = 0;
      unint64_t v36 = v25 + a2;
      uint64_t v37 = a2;
      if (a2 <= 5) {
        uint64_t v38 = 5 - a2;
      }
      else {
        uint64_t v38 = 0;
      }
      unint64_t v91 = v36;
      uint64_t v93 = a2;
      uint64_t v89 = v38;
      while (v33 != v38 && v33 + v36 <= 4)
      {
        uint64_t v39 = dword_192DD2ADC[v33 + v37];
        uint64_t v40 = qword_192DD2B18[v33 + v36];
        if ((unint64_t)v34 >= v35)
        {
          uint64_t v42 = v34 - v24;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v35 - (void)v24) >> 2 > v43) {
            unint64_t v43 = (uint64_t)(v35 - (void)v24) >> 2;
          }
          if (v35 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44) {
            unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v44);
          }
          else {
            uint64_t v45 = 0;
          }
          uint64_t v46 = (uint64_t *)(v44 + 8 * v42);
          *uint64_t v46 = v40 | v39;
          uint16x4_t v47 = v46 + 1;
          if (v34 == v24)
          {
            size_t v41 = v99;
          }
          else
          {
            size_t v41 = v99;
            do
            {
              uint64_t v48 = *--v34;
              *--uint64_t v46 = v48;
            }
            while (v34 != v24);
          }
          unint64_t v35 = v44 + 8 * v45;
          if (v24)
          {
            v49 = v24;
            unint64_t v50 = v35;
            operator delete(v49);
            unint64_t v35 = v50;
          }
          uint64_t v24 = v46;
          unint64_t v34 = v47;
          id v16 = v95;
          unint64_t v36 = v91;
          uint64_t v37 = a2;
          uint64_t v38 = v89;
        }
        else
        {
          *v34++ = v40 | v39;
          size_t v41 = v99;
        }
        if ((uint64_t *)++v33 == v41)
        {
          if ((int)v36 >= (int)a2)
          {
            long long v53 = v34;
            goto LABEL_118;
          }
          while (v36 <= 4 && (v41 + v36) <= 4)
          {
            uint64_t v51 = dword_192DD2ADC[v36];
            uint64_t v52 = qword_192DD2B18[(v41 + v36)];
            if ((unint64_t)v34 >= v35)
            {
              uint64_t v54 = v34 - v24;
              unint64_t v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v56 = v36;
              if ((uint64_t)(v35 - (void)v24) >> 2 > v55) {
                unint64_t v55 = (uint64_t)(v35 - (void)v24) >> 2;
              }
              if (v35 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v57 = v55;
              }
              if (v57) {
                unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v57);
              }
              else {
                uint64_t v58 = 0;
              }
              size_t v41 = (uint64_t *)(v57 + 8 * v54);
              uint64_t *v41 = v52 | v51;
              long long v53 = v41 + 1;
              if (v34 == v24)
              {
                uint64_t v17 = (uint64_t)a9;
                id v16 = v95;
              }
              else
              {
                uint64_t v17 = (uint64_t)a9;
                id v16 = v95;
                do
                {
                  uint64_t v59 = *--v34;
                  *--size_t v41 = v59;
                }
                while (v34 != v24);
              }
              unint64_t v35 = v57 + 8 * v58;
              if (v24)
              {
                uint64_t v60 = v24;
                unint64_t v61 = v35;
                operator delete(v60);
                unint64_t v35 = v61;
              }
              uint64_t v24 = v41;
              LODWORD(v41) = v99;
              unint64_t v36 = v56;
              uint64_t v37 = v93;
            }
            else
            {
              uint64_t *v34 = v52 | v51;
              long long v53 = v34 + 1;
              id v16 = v95;
            }
            ++v36;
            unint64_t v34 = v53;
            if (v36 == v37) {
              goto LABEL_118;
            }
          }
          goto LABEL_16;
        }
      }
      goto LABEL_16;
    }
    uint64_t v24 = 0;
    long long v53 = 0;
LABEL_118:
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__assign_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((void *)(v17 + 24), v24, v53, v53 - v24);
    if (v102 == __p)
    {
    }
    else
    {
      __src[0] = 0;
      __src[1] = 0;
      uint64_t v105 = 0;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)__src, (uint64_t *)__p, v102, ((char *)v102 - (unsigned char *)__p) >> 3);
      int v106 = 0;
    }
    if (v87 - v98 != v97)
    {
LABEL_16:
      uint64_t v22 = 0;
      goto LABEL_17;
    }
    unsigned int v81 = v98 + v97 - 1;
    unint64_t v82 = v81 - v88;
    if (v82 <= 4)
    {
      unsigned int v83 = dword_192DD2ADC[v82];
      LODWORD(__src[0]) = v83;
      std::vector<Espresso::ANECompilerEngine::NamedAxis>::__assign_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis const*,Espresso::ANECompilerEngine::NamedAxis const*>(a9 + 9, __src, (unsigned char *)__src + 4);
      uint64_t v22 = 1;
      if (a3 != a8 || !v88) {
        goto LABEL_124;
      }
      __src[0] = 0;
      __src[1] = 0;
      uint64_t v105 = 0;
      if (v81 <= 4)
      {
        unint64_t v100 = __PAIR64__(dword_192DD2ADC[v81], v83);
        std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](__src, &v100);
        if (v88 < 1)
        {
LABEL_131:
          std::string::size_type v85 = (void *)a9[12];
          if (v85)
          {
            a9[13] = v85;
            operator delete(v85);
            a9[12] = 0;
            a9[13] = 0;
            a9[14] = 0;
          }
          *((_OWORD *)a9 + 6) = *(_OWORD *)__src;
          a9[14] = v105;
          uint64_t v22 = 1;
          goto LABEL_124;
        }
        while (v82 <= 3)
        {
          unsigned int v84 = dword_192DD2ADC[v82];
          LODWORD(v100) = dword_192DCA940[v82];
          HIDWORD(v100) = v84;
          std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](__src, &v100);
          if ((uint64_t)++v82 >= (int)v81) {
            goto LABEL_131;
          }
        }
        if (__src[0]) {
          operator delete(__src[0]);
        }
      }
    }
    uint64_t v22 = 0;
LABEL_124:
    id v16 = v95;
  }
LABEL_17:
  if (__p) {
    operator delete(__p);
  }
  if (v24) {
    operator delete(v24);
  }
LABEL_8:

  return v22;
}

void sub_19278AAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (v23) {
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::tf_gather_nd_plan(void *a1, int a2, int a3, uint64_t a4, int *a5, uint64_t a6, int a7, void *a8)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  id v14 = a1;
  if (a2 < 0) {
    goto LABEL_46;
  }
  int v15 = a5[4];
  int v16 = v15;
  if (v15 == 5)
  {
    LODWORD(v151) = 3;
    LODWORD(v153) = 2;
    int v16 = 8;
  }
  unint64_t v126 = a5 + 4;
  int v132 = v15;
  int v134 = v16;
  int v129 = a3;
  uint64_t v17 = a5[6];
  unsigned int v139 = *(_DWORD *)(a4 + 24);
  int v18 = v17 + v139 - a2 - v15 - 1;
  a8[4] = a8[3];
  v138 = a8;
  if (a2)
  {
    uint64_t v19 = (v17 + -a2 - v15 - 1);
    if (v18 != v139)
    {
      if (v18 <= 5)
      {
        if ((v19 & 0x80000000) != 0)
        {
          uint64_t v20 = 0;
          if ((int)(v139 - a2) < 1 - ((int)v17 + -a2 - v15)) {
            goto LABEL_210;
          }
        }
        id v120 = (void **)(a8 + 3);
        uint64_t v122 = v17;
        long long v123 = a5;
        int v124 = a2;
        int v21 = v139 - 1 - a2;
        int v121 = v17 + v139 - a2 - v15 - 1;
        if ((int)(v139 - 1) <= (int)(v17 + v139 - a2 - v15 - 2)) {
          unsigned int v22 = v17 + v139 - a2 - v15 - 2;
        }
        else {
          unsigned int v22 = v139 - 1;
        }
        int v23 = v19 + v21;
        if ((int)v19 + v21 >= v21) {
          int v23 = v139 - 1 - a2;
        }
        uint64_t v24 = v22 - v23;
        long long v151 = 0uLL;
        unint64_t v152 = 0;
        std::vector<Espresso::net *>::reserve((void **)&v151, (int)v24);
        if ((int)v24 >= 1)
        {
          uint64_t v25 = 0;
          unsigned int v130 = v22;
          do
          {
            if (v22 - v25 > 4
              || (unsigned int v26 = v22 - ((int)v25 - (int)v19) % (int)v24 - (v24 & ((((int)v25 - (int)v19) % (int)v24) >> 31)),
                  v26 >= 5))
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Logic error in transpose rotation.");
            }
            uint64_t v27 = qword_192DD2AF0[v22 - v25];
            uint64_t v28 = qword_192DD2B18[v26];
            signed int v29 = (char *)*((void *)&v151 + 1);
            if (*((void *)&v151 + 1) >= v152)
            {
              uint64_t v31 = v19;
              int v32 = (char *)v151;
              uint64_t v33 = (uint64_t)(*((void *)&v151 + 1) - v151) >> 3;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v35 = v152 - v151;
              if ((uint64_t)(v152 - v151) >> 2 > v34) {
                unint64_t v34 = v35 >> 2;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36) {
                unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36);
              }
              else {
                uint64_t v37 = 0;
              }
              uint64_t v38 = (uint64_t *)(v36 + 8 * v33);
              uint64_t *v38 = v28 | v27;
              BOOL v30 = v38 + 1;
              if (v29 != v32)
              {
                do
                {
                  uint64_t v39 = *((void *)v29 - 1);
                  v29 -= 8;
                  *--uint64_t v38 = v39;
                }
                while (v29 != v32);
                signed int v29 = (char *)v151;
              }
              *(void *)&long long v151 = v38;
              unint64_t v152 = v36 + 8 * v37;
              uint64_t v19 = v31;
              if (v29) {
                operator delete(v29);
              }
              unsigned int v22 = v130;
            }
            else
            {
              **((void **)&v151 + 1) = v28 | v27;
              BOOL v30 = v29 + 8;
            }
            *((void *)&v151 + 1) = v30;
            ++v25;
          }
          while (v25 != v24);
        }
        uint64_t v40 = *v120;
        a8 = v138;
        if (*v120)
        {
          v138[4] = v40;
          operator delete(v40);
          *id v120 = 0;
          v120[1] = 0;
          v120[2] = 0;
        }
        *(_OWORD *)(v138 + 3) = v151;
        v138[5] = v152;
        a2 = v124;
        uint64_t v17 = v122;
        a5 = v123;
        int v18 = v121;
        goto LABEL_39;
      }
LABEL_46:
      uint64_t v20 = 0;
      goto LABEL_210;
    }
  }
LABEL_39:
  size_t v41 = 0;
  __p = 0;
  long long v149 = 0;
  unint64_t v150 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  unint64_t v44 = 0;
  if (v17 == 1 || v18 == v17) {
    goto LABEL_88;
  }
  int v45 = v18 - v17;
  if (v18 > 5 || v45 < -1) {
    goto LABEL_46;
  }
  BOOL v47 = (int)v17 < 2;
  if ((v17 - 6) < 0xFFFFFFFC)
  {
    if ((int)v17 < 2)
    {
      size_t v41 = 0;
      uint64_t v42 = 0;
      unint64_t v43 = 0;
      unint64_t v44 = 0;
      goto LABEL_88;
    }
    goto LABEL_46;
  }
  int v125 = a2;
  id v127 = v14;
  uint64_t v42 = 0;
  uint64_t v48 = 1;
  int v49 = 1;
  int v131 = v18 - v17;
  while (1)
  {
    if (v48 == 5)
    {
      size_t v41 = (int *)__p;
      if (v47) {
        goto LABEL_77;
      }
LABEL_74:
      uint64_t v20 = 0;
      id v14 = v127;
      goto LABEL_208;
    }
    if ((v49 + v45) > 4) {
      break;
    }
    unint64_t v50 = a5;
    uint64_t v51 = dword_192DCA940[v48 - 1];
    uint64_t v52 = qword_192DD2B18[v49 + v45];
    if ((unint64_t)v42 >= v150)
    {
      uint64_t v53 = v17;
      uint64_t v54 = (int *)__p;
      uint64_t v55 = ((char *)v42 - (unsigned char *)__p) >> 3;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v57 = v150 - (void)__p;
      if ((uint64_t)(v150 - (void)__p) >> 2 > v56) {
        unint64_t v56 = v57 >> 2;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      if (v58) {
        unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v58);
      }
      else {
        uint64_t v59 = 0;
      }
      uint64_t v60 = (uint64_t *)(v58 + 8 * v55);
      *uint64_t v60 = v52 | v51;
      unint64_t v61 = v60 + 1;
      a5 = v50;
      if (v42 != v54)
      {
        do
        {
          uint64_t v62 = *((void *)v42 - 1);
          v42 -= 2;
          *--uint64_t v60 = v62;
        }
        while (v42 != v54);
        uint64_t v42 = (int *)__p;
      }
      __p = v60;
      long long v149 = v61;
      unint64_t v150 = v58 + 8 * v59;
      if (v42) {
        operator delete(v42);
      }
      uint64_t v42 = (int *)v61;
      uint64_t v17 = v53;
      int v45 = v131;
    }
    else
    {
      *(void *)uint64_t v42 = v52 | v51;
      v42 += 2;
      a5 = v50;
    }
    long long v149 = (uint64_t *)v42;
    BOOL v63 = ++v48 >= v17;
    a8 = v138;
    if (v17 <= 5)
    {
      BOOL v47 = 0;
      ++v49;
      if (v48 < v17) {
        continue;
      }
    }
    goto LABEL_76;
  }
  BOOL v63 = v47;
LABEL_76:
  size_t v41 = (int *)__p;
  if (!v63) {
    goto LABEL_74;
  }
LABEL_77:
  id v14 = v127;
  a2 = v125;
  if (v41 == v42)
  {
    size_t v41 = v42;
    unint64_t v43 = v42;
LABEL_87:
    unint64_t v44 = v42;
  }
  else
  {
    unint64_t v43 = v41;
    while (v43[1] != 2)
    {
      v43 += 2;
      if (v43 == v42)
      {
        unint64_t v43 = v42;
        break;
      }
    }
    unint64_t v44 = v41;
    while (*v44 != 2)
    {
      v44 += 2;
      if (v44 == v42) {
        goto LABEL_87;
      }
    }
  }
LABEL_88:
  BOOL v64 = v44 == v42;
  if (a5[1] < 2) {
    BOOL v64 = 0;
  }
  if (v43 != v42) {
    BOOL v64 = 0;
  }
  id v128 = v14;
  if (v43 != v42)
  {
    int v65 = *v43;
    switch(*v43)
    {
      case 0:
        break;
      case 1:
        a5 += 2;
        break;
      case 2:
        ++a5;
        break;
      case 3:
        a5 += 3;
        break;
      case 4:
        a5 = v126;
        break;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_state_error::invalid_state_error(exception, "Bad axis.");
    }
    if (*a5 > 1)
    {
      int v66 = v134;
      if (v134 != 1)
      {
        int v67 = a2;
        char v68 = 0;
        int v69 = 1;
        switch(v65)
        {
          case 0:
            goto LABEL_112;
          case 1:
            char v68 = 0;
            int v69 = 2;
            goto LABEL_112;
          case 2:
            goto LABEL_111;
          case 3:
            int v69 = 4;
            char v68 = 1;
            goto LABEL_112;
          case 4:
            v145 = 0;
            v146 = 0;
            uint64_t v147 = 0;
            goto LABEL_135;
          default:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Nothing to the right of width in NDCHW order.");
        }
      }
      goto LABEL_157;
    }
    size_t v70 = v43 + 2;
    if (v43 + 2 == v42)
    {
      uint64_t v42 = v43;
    }
    else
    {
      do
      {
        int v71 = v70[1];
        *(v70 - 2) = *v70;
        *(v70 - 1) = v71;
        v70 += 2;
      }
      while (v70 != v42);
      uint64_t v42 = v70 - 2;
    }
    long long v149 = (uint64_t *)v42;
  }
  char v72 = !v64;
  if (v134 == 1) {
    char v72 = 1;
  }
  if (v72)
  {
    if (v134 != 1)
    {
      if ((unint64_t)v42 >= v150)
      {
        uint64_t v90 = ((char *)v42 - (char *)v41) >> 3;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v92 = v150 - (void)v41;
        if ((uint64_t)(v150 - (void)v41) >> 2 > v91) {
          unint64_t v91 = v92 >> 2;
        }
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v91;
        }
        if (v93) {
          unint64_t v93 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v93);
        }
        else {
          uint64_t v94 = 0;
        }
        int v96 = (uint64_t *)(v93 + 8 * v90);
        *int v96 = 0x200000004;
        uint64_t v74 = v96 + 1;
        if (v42 != v41)
        {
          do
          {
            uint64_t v97 = *((void *)v42 - 1);
            v42 -= 2;
            *--int v96 = v97;
          }
          while (v42 != v41);
          size_t v41 = (int *)__p;
        }
        __p = v96;
        long long v149 = v74;
        unint64_t v150 = v93 + 8 * v94;
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        *(void *)uint64_t v42 = 0x200000004;
        uint64_t v74 = (uint64_t *)(v42 + 2);
      }
      long long v149 = v74;
    }
LABEL_157:
    Espresso::ANECompilerEngine::fill_unpaired_transposes((uint64_t)&__p);
    int v89 = v132;
    if (v149 != __p)
    {
      long long v151 = 0uLL;
      unint64_t v152 = 0;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v151, (uint64_t *)__p, v149, ((char *)v149 - (unsigned char *)__p) >> 3);
      LODWORD(v153) = 0;
    }
  }
  else
  {
    int v67 = a2;
    int v66 = v134;
LABEL_111:
    char v68 = 0;
    int v69 = 3;
    int v65 = 2;
LABEL_112:
    unint64_t v73 = operator new(0x10uLL);
    *(_DWORD *)unint64_t v73 = 4;
    *((_DWORD *)v73 + 1) = v69;
    *((_DWORD *)v73 + 2) = v69;
    *((_DWORD *)v73 + 3) = 4;
    if (v68)
    {
      *(void *)&long long v151 = __PAIR64__(v69, v65);
      DWORD2(v151) = v66;
      LODWORD(v153) = 1;
      v146 = 0;
      uint64_t v147 = 0;
      v145 = 0;
      v142 = (int *)&v145;
      LOBYTE(v143) = 0;
      v145 = (char *)operator new(0x20uLL);
      v146 = v145;
      uint64_t v147 = v145 + 32;
    }
    else
    {
      long long v151 = 0uLL;
      unint64_t v152 = 0;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v151, (uint64_t *)v73, (uint64_t *)v73 + 2, 2uLL);
      LODWORD(v153) = 0;
      unint64_t v154 = __PAIR64__(v69, v65);
      int v155 = v66;
      int v156 = 1;
      memset(v157, 0, sizeof(v157));
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)v157, (uint64_t *)v73, (uint64_t *)v73 + 2, 2uLL);
      int v158 = 0;
      v146 = 0;
      uint64_t v147 = 0;
      v145 = 0;
      v142 = (int *)&v145;
      LOBYTE(v143) = 0;
      v145 = (char *)operator new(0x60uLL);
      v146 = v145;
      uint64_t v147 = v145 + 96;
      for (uint64_t i = 64; i != -32; i -= 32)
      a8 = v138;
    }
    operator delete(v73);
    uint64_t v77 = (uint64_t)v145;
    uint64_t v76 = v146;
    if (v145 != v146)
    {
      uint64_t v78 = a8 + 6;
      std::string v79 = a8 + 8;
      unint64_t v80 = a8[7];
      do
      {
        if (v80 >= *v79)
        {
          uint64_t v81 = (uint64_t)(v80 - *v78) >> 5;
          if ((unint64_t)(v81 + 1) >> 59) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v82 = *v79 - *v78;
          uint64_t v83 = v82 >> 4;
          if (v82 >> 4 <= (unint64_t)(v81 + 1)) {
            uint64_t v83 = v81 + 1;
          }
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v84 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v84 = v83;
          }
          unint64_t v154 = (unint64_t)v79;
          if (v84) {
            unint64_t v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v84);
          }
          else {
            uint64_t v85 = 0;
          }
          *(void *)&long long v151 = v84;
          *((void *)&v151 + 1) = v84 + 32 * v81;
          unint64_t v152 = *((void *)&v151 + 1);
          unint64_t v153 = v84 + 32 * v85;
          v152 += 32;
          a8 = v138;
          unint64_t v80 = v138[7];
        }
        else
        {
          v80 += 32;
          a8[7] = v80;
        }
        a8[7] = v80;
        v77 += 32;
      }
      while ((char *)v77 != v76);
    }
LABEL_135:
    Espresso::ANECompilerEngine::fill_unpaired_transposes((uint64_t)&__p);
    unsigned int v87 = __p;
    int v86 = v149;
    a2 = v67;
    if (v149 != __p)
    {
      uint64_t v88 = a8[7];
      if (v88 == a8[6] || *(_DWORD *)(v88 - 8))
      {
        long long v151 = 0uLL;
        unint64_t v152 = 0;
        std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v151, (uint64_t *)__p, v149, ((char *)v149 - (unsigned char *)__p) >> 3);
        LODWORD(v153) = 0;
      }
      else
      {
        v142 = 0;
        id v143 = 0;
        uint64_t v144 = 0;
        std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v142, *(uint64_t **)(v88 - 32), *(uint64_t **)(v88 - 24), (uint64_t)(*(void *)(v88 - 24) - *(void *)(v88 - 32)) >> 3);
        id v95 = v142;
        if ((void)v140 == *((void *)&v140 + 1))
        {
          if ((void)v140) {
            operator delete((void *)v140);
          }
        }
        else
        {
          long long v151 = v140;
          unint64_t v152 = v141;
          LODWORD(v153) = 0;
        }
        if (v95) {
          operator delete(v95);
        }
      }
    }
    *(void *)&long long v151 = &v145;
    int v89 = v132;
  }
  if (v89 < 1)
  {
    BOOL v98 = 0;
    v110 = 0;
    unint64_t v100 = 0;
LABEL_201:
    unint64_t v117 = (void *)a8[9];
    if (v117)
    {
      a8[10] = v117;
      operator delete(v117);
      a8[9] = 0;
      a8[10] = 0;
      a8[11] = 0;
    }
    a8[9] = v98;
    a8[10] = v110;
    uint64_t v20 = 1;
    a8[11] = v100;
  }
  else
  {
    BOOL v98 = 0;
    int v99 = 0;
    unint64_t v100 = 0;
    unsigned int v101 = v139 + ~a2;
    signed int v102 = v101 - v89;
    BOOL v103 = v139 == 5;
    int v104 = v129 ^ 1;
    if (v139 != 5) {
      int v104 = 1;
    }
    BOOL v105 = (v103 & v129) == 0;
    if ((v103 & v129) != 0) {
      int v106 = 2;
    }
    else {
      int v106 = 0;
    }
    int v135 = v106;
    int v137 = v104;
    if (v105) {
      int v107 = 2;
    }
    else {
      int v107 = 1;
    }
    int v133 = v107;
    while (v139 <= 5 && v101 <= 4)
    {
      int v108 = 4;
      switch(v101)
      {
        case 0u:
          break;
        case 1u:
          int v108 = 3;
          break;
        case 2u:
          int v108 = v133;
          break;
        case 3u:
          int v108 = v135;
          break;
        case 4u:
          int v108 = v137;
          break;
        default:
          goto LABEL_204;
      }
      for (j = (_DWORD *)a8[3]; j != (_DWORD *)a8[4]; j += 2)
      {
        if (v108 == *j) {
          int v108 = j[1];
        }
      }
      if ((unint64_t)v99 >= v100)
      {
        uint64_t v111 = v99 - v98;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v100 - (void)v98) >> 1 > v112) {
          unint64_t v112 = (uint64_t)(v100 - (void)v98) >> 1;
        }
        if (v100 - (unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v113 = v112;
        }
        if (v113) {
          unint64_t v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v113);
        }
        else {
          uint64_t v114 = 0;
        }
        unint64_t v115 = (int *)(v113 + 4 * v111);
        *unint64_t v115 = v108;
        v110 = v115 + 1;
        while (v99 != v98)
        {
          int v116 = *--v99;
          *--unint64_t v115 = v116;
        }
        unint64_t v100 = v113 + 4 * v114;
        if (v98) {
          operator delete(v98);
        }
        BOOL v98 = v115;
        a8 = v138;
      }
      else
      {
        *int v99 = v108;
        v110 = v99 + 1;
      }
      --v101;
      int v99 = v110;
      if ((int)v101 <= v102) {
        goto LABEL_201;
      }
    }
LABEL_204:
    if (v98) {
      operator delete(v98);
    }
    uint64_t v20 = 0;
  }
  id v14 = v128;
  size_t v41 = (int *)__p;
LABEL_208:
  if (v41)
  {
    long long v149 = (uint64_t *)v41;
    operator delete(v41);
  }
LABEL_210:

  return v20;
}

void sub_19278B820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p)
{
  if (v32) {
    operator delete(v32);
  }
  a26 = &a29;
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

_OWORD *anonymous namespace'::infer_shape_from_transpose(_OWORD *result, _OWORD *a2, _DWORD *a3, _DWORD *a4)
{
  long long v4 = a2[1];
  *__n128 result = *a2;
  result[1] = v4;
  if (a3 != a4)
  {
    while (2)
    {
      uint64_t v5 = a2;
      switch(*a3)
      {
        case 0:
          break;
        case 1:
          uint64_t v5 = (_DWORD *)a2 + 2;
          break;
        case 2:
          uint64_t v5 = (_DWORD *)a2 + 1;
          break;
        case 3:
          uint64_t v5 = (_DWORD *)a2 + 3;
          break;
        case 4:
          uint64_t v5 = a2 + 1;
          break;
        default:
LABEL_14:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
          Espresso::invalid_state_error::invalid_state_error(exception, "Bad axis.");
      }
      uint64_t v6 = result;
      switch(a3[1])
      {
        case 0:
          goto LABEL_12;
        case 1:
          uint64_t v6 = (_DWORD *)result + 2;
          goto LABEL_12;
        case 2:
          uint64_t v6 = (_DWORD *)result + 1;
          goto LABEL_12;
        case 3:
          uint64_t v6 = (_DWORD *)result + 3;
          goto LABEL_12;
        case 4:
          uint64_t v6 = result + 1;
LABEL_12:
          *uint64_t v6 = *v5;
          a3 += 2;
          if (a3 == a4) {
            return result;
          }
          continue;
        default:
          goto LABEL_14;
      }
    }
  }
  return result;
}

void sub_19278BB48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *anonymous namespace'::infer_shape_from_reshape_adjacent(int *result, _OWORD *a2, _DWORD *a3)
{
  long long v3 = a2[1];
  *(_OWORD *)__n128 result = *a2;
  *((_OWORD *)result + 1) = v3;
  long long v4 = result;
  switch(a3[1])
  {
    case 0:
      goto LABEL_6;
    case 1:
      long long v4 = result + 2;
      goto LABEL_6;
    case 2:
      long long v4 = result + 1;
      goto LABEL_6;
    case 3:
      long long v4 = result + 3;
      goto LABEL_6;
    case 4:
      long long v4 = result + 4;
LABEL_6:
      int v5 = a3[2];
      *v4 /= v5;
      switch(*a3)
      {
        case 0:
          goto LABEL_11;
        case 1:
          result += 2;
          goto LABEL_11;
        case 2:
          ++result;
          goto LABEL_11;
        case 3:
          result += 3;
          goto LABEL_11;
        case 4:
          result += 4;
LABEL_11:
          *result *= v5;
          return result;
        default:
          goto LABEL_12;
      }
    default:
      break;
  }
LABEL_12:
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_state_error::invalid_state_error(exception, "Bad axis.");
}

void sub_19278BCB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::compose_transpose_permutations(uint64_t **a1, int *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int v6 = 1;
  int v57 = 1;
  unsigned int v58 = 0;
  unsigned int v7 = 2;
  unsigned int v8 = 3;
  int v55 = 3;
  int v56 = 2;
  unsigned int v9 = 4;
  int v54 = 4;
  if (a2 == a3)
  {
    unsigned int v11 = 0;
  }
  else
  {
    while (2)
    {
      if (*a2 >= 5) {
LABEL_99:
      }
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unknown axis enum value.");
      size_t v10 = (int *)&v58;
      switch(a2[1])
      {
        case 0:
          goto LABEL_8;
        case 1:
          size_t v10 = &v57;
          goto LABEL_8;
        case 2:
          size_t v10 = &v56;
          goto LABEL_8;
        case 3:
          size_t v10 = &v55;
          goto LABEL_8;
        case 4:
          size_t v10 = &v54;
LABEL_8:
          *size_t v10 = *a2;
          a2 += 2;
          if (a2 != a3) {
            continue;
          }
          unsigned int v6 = v57;
          unsigned int v11 = v58;
          unsigned int v8 = v55;
          unsigned int v7 = v56;
          unsigned int v9 = v54;
          break;
        default:
          goto LABEL_99;
      }
      break;
    }
  }
  if (a4 != a5)
  {
    while (2)
    {
      unsigned int v12 = v11;
      switch(*a4)
      {
        case 0:
          goto LABEL_17;
        case 1:
          unsigned int v12 = v6;
          goto LABEL_17;
        case 2:
          unsigned int v12 = v7;
          goto LABEL_17;
        case 3:
          unsigned int v12 = v8;
          goto LABEL_17;
        case 4:
          unsigned int v12 = v9;
LABEL_17:
          unint64_t v13 = (int *)&v58;
          switch(a4[1])
          {
            case 0:
              goto LABEL_22;
            case 1:
              unint64_t v13 = &v57;
              goto LABEL_22;
            case 2:
              unint64_t v13 = &v56;
              goto LABEL_22;
            case 3:
              unint64_t v13 = &v55;
              goto LABEL_22;
            case 4:
              unint64_t v13 = &v54;
LABEL_22:
              *unint64_t v13 = v12;
              a4 += 2;
              if (a4 != a5) {
                continue;
              }
              unsigned int v6 = v57;
              unsigned int v11 = v58;
              unsigned int v8 = v55;
              unsigned int v7 = v56;
              unsigned int v9 = v54;
              break;
            default:
              goto LABEL_99;
          }
          goto LABEL_24;
        default:
          goto LABEL_99;
      }
    }
  }
LABEL_24:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v11)
  {
    id v14 = (uint64_t *)operator new(8uLL);
    uint64_t *v14 = v11;
    int v15 = v14 + 1;
    *a1 = v14;
    a1[1] = v14 + 1;
    a1[2] = v14 + 1;
  }
  else
  {
    id v14 = 0;
    int v15 = 0;
  }
  if (v6 == 1)
  {
    int v16 = v15;
  }
  else
  {
    uint64_t v17 = (char *)v15 - (char *)v14;
    uint64_t v18 = v15 - v14;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (v17 >> 2 > v19) {
      unint64_t v19 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20) {
      unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    unsigned int v22 = (uint64_t *)(v20 + 8 * v18);
    uint64_t *v22 = v6 | 0x100000000;
    int v16 = v22 + 1;
    if (v15 != v14)
    {
      do
      {
        uint64_t v23 = *--v15;
        *--unsigned int v22 = v23;
      }
      while (v15 != v14);
      id v14 = *a1;
    }
    *a1 = v22;
    a1[1] = v16;
    a1[2] = (uint64_t *)(v20 + 8 * v21);
    if (v14) {
      operator delete(v14);
    }
    a1[1] = v16;
  }
  if (v7 != 2)
  {
    unint64_t v24 = (unint64_t)a1[2];
    if ((unint64_t)v16 >= v24)
    {
      unsigned int v26 = *a1;
      uint64_t v27 = v16 - *a1;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v24 - (void)v26;
      if (v29 >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30) {
        unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v30);
      }
      else {
        uint64_t v31 = 0;
      }
      int v32 = (uint64_t *)(v30 + 8 * v27);
      *int v32 = v7 | 0x200000000;
      uint64_t v25 = v32 + 1;
      if (v16 != v26)
      {
        do
        {
          uint64_t v33 = *--v16;
          *--int v32 = v33;
        }
        while (v16 != v26);
        int v16 = *a1;
      }
      *a1 = v32;
      a1[1] = v25;
      a1[2] = (uint64_t *)(v30 + 8 * v31);
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      uint64_t *v16 = v7 | 0x200000000;
      uint64_t v25 = v16 + 1;
    }
    a1[1] = v25;
    int v16 = v25;
  }
  if (v8 != 3)
  {
    unint64_t v34 = (unint64_t)a1[2];
    if ((unint64_t)v16 >= v34)
    {
      unint64_t v36 = *a1;
      uint64_t v37 = v16 - *a1;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v39 = v34 - (void)v36;
      if (v39 >> 2 > v38) {
        unint64_t v38 = v39 >> 2;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40) {
        unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v40);
      }
      else {
        uint64_t v41 = 0;
      }
      uint64_t v42 = (uint64_t *)(v40 + 8 * v37);
      *uint64_t v42 = v8 | 0x300000000;
      uint64_t v35 = v42 + 1;
      if (v16 != v36)
      {
        do
        {
          uint64_t v43 = *--v16;
          *--uint64_t v42 = v43;
        }
        while (v16 != v36);
        int v16 = *a1;
      }
      *a1 = v42;
      a1[1] = v35;
      a1[2] = (uint64_t *)(v40 + 8 * v41);
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      uint64_t *v16 = v8 | 0x300000000;
      uint64_t v35 = v16 + 1;
    }
    a1[1] = v35;
    int v16 = v35;
  }
  if (v9 != 4)
  {
    unint64_t v44 = (unint64_t)a1[2];
    if ((unint64_t)v16 >= v44)
    {
      uint64_t v46 = *a1;
      uint64_t v47 = v16 - *a1;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = v44 - (void)v46;
      if (v49 >> 2 > v48) {
        unint64_t v48 = v49 >> 2;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50) {
        unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
      }
      else {
        uint64_t v51 = 0;
      }
      uint64_t v52 = (uint64_t *)(v50 + 8 * v47);
      *uint64_t v52 = v9 | 0x400000000;
      int v45 = v52 + 1;
      if (v16 != v46)
      {
        do
        {
          uint64_t v53 = *--v16;
          *--uint64_t v52 = v53;
        }
        while (v16 != v46);
        int v16 = *a1;
      }
      *a1 = v52;
      a1[1] = v45;
      a1[2] = (uint64_t *)(v50 + 8 * v51);
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      uint64_t *v16 = v9 | 0x400000000;
      int v45 = v16 + 1;
    }
    a1[1] = v45;
  }
}

void sub_19278C1C8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void anonymous namespace'::GatherNDPlan::~GatherNDPlan(_anonymous_namespace_::GatherNDPlan *this)
{
  v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  unsigned int v6 = (void **)((char *)this + 48);
  int v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void **)this;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))*(&off_1EE39BD10 + v2))(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void anonymous namespace'::add_rank5_3d_transposes_to_plan(int a1, int a2, int a3, int a4, void *a5)
{
  size_t v10 = operator new(8uLL);
  *size_t v10 = 1;
  int v55 = v10 + 1;
  int v56 = v10 + 1;
  __p = v10;
  unsigned int v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(2uLL);
  uint64_t v13 = v12;
  id v14 = &v11[v12];
  v11[1] = 0x200000000;
  *unsigned int v11 = *v10;
  int v15 = __p;
  __p = v11;
  int v56 = v14;
  if (v15) {
    operator delete(v15);
  }
  int v55 = v11 + 2;
  if (v13 < 3)
  {
    uint64_t v17 = 3;
    if ((unint64_t)(((char *)v14 - (char *)v11) >> 2) > 3) {
      uint64_t v17 = ((char *)v14 - (char *)v11) >> 2;
    }
    if ((unint64_t)((char *)v14 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = 0;
    unint64_t v21 = v18 + 16;
    unint64_t v22 = v18 + 8 * v19;
    *(void *)(v18 + 16) = 0x100000002;
    int v16 = (void *)(v18 + 24);
    do
    {
      *(void *)(v21 + v20 * 8 - 8) = v11[v20 + 1];
      --v20;
    }
    while (v20 != -2);
    uint64_t v23 = __p;
    __p = (void *)(v21 - 16);
    int v56 = (void *)v22;
    if (v23) {
      operator delete(v23);
    }
  }
  else
  {
    v11[2] = 0x100000002;
    int v16 = v11 + 3;
  }
  int v55 = v16;
  unint64_t v24 = (uint64_t *)operator new(8uLL);
  uint64_t *v24 = 0x100000000;
  uint64_t v25 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(2uLL);
  uint64_t v27 = v26;
  v25[1] = 2;
  uint64_t *v25 = *v24;
  operator delete(v24);
  if (v27 < 3)
  {
    uint64_t v30 = 3;
    if ((unint64_t)((8 * v27) >> 2) > 3) {
      uint64_t v30 = (8 * v27) >> 2;
    }
    if ((unint64_t)(8 * v27) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v31) {
      unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v31);
    }
    uint64_t v32 = 0;
    *(void *)(v31 + 16) = 0x200000001;
    unint64_t v28 = (uint64_t *)(v31 + 24);
    do
    {
      *(void *)(v31 + 16 + v32 * 8 - 8) = v25[v32 + 1];
      --v32;
    }
    while (v32 != -2);
    uint64_t v29 = (uint64_t *)v31;
    operator delete(v25);
  }
  else
  {
    v25[2] = 0x200000001;
    unint64_t v28 = v25 + 3;
    uint64_t v29 = v25;
  }
  unint64_t v33 = a5[2];
  unint64_t v34 = (void *)a5[1];
  if (a1 == 5 && a4)
  {
    if ((unint64_t)v34 >= v33)
    {
      uint64_t v35 = (void *)std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__push_back_slow_path<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>(a5, (uint64_t **)&__p);
    }
    else
    {
      std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>((uint64_t)a5, (uint64_t **)&__p);
      uint64_t v35 = v34 + 3;
    }
  }
  else if ((unint64_t)v34 >= v33)
  {
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v34 - *a5) >> 3);
    if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *a5) >> 3);
    uint64_t v38 = 2 * v37;
    if (2 * v37 <= v36 + 1) {
      uint64_t v38 = v36 + 1;
    }
    if (v37 >= 0x555555555555555) {
      unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v39 = v38;
    }
    unint64_t v61 = a5 + 2;
    unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v39);
    uint64_t v41 = &v40[24 * v36];
    int v57 = v40;
    unsigned int v58 = v41;
    uint64_t v60 = &v40[24 * v42];
    *(void *)uint64_t v41 = 0;
    *((void *)v41 + 1) = 0;
    *((void *)v41 + 2) = 0;
    uint64_t v59 = v41 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v57);
    uint64_t v35 = (void *)a5[1];
    std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v57);
  }
  else
  {
    uint64_t v35 = v34 + 3;
    void *v34 = 0;
    v34[1] = 0;
    v34[2] = 0;
    a5[1] = v34 + 3;
  }
  a5[1] = v35;
  unint64_t v43 = a5[2];
  if (a2 == 5 && a4)
  {
    if ((unint64_t)v35 >= v43)
    {
      uint64_t v44 = std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__push_back_slow_path<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>(a5, (uint64_t **)&__p);
    }
    else
    {
      std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>((uint64_t)a5, (uint64_t **)&__p);
      uint64_t v44 = (uint64_t)(v35 + 3);
    }
  }
  else if ((unint64_t)v35 >= v43)
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v35 - *a5) >> 3);
    if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a5) >> 3);
    uint64_t v47 = 2 * v46;
    if (2 * v46 <= v45 + 1) {
      uint64_t v47 = v45 + 1;
    }
    if (v46 >= 0x555555555555555) {
      unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v48 = v47;
    }
    unint64_t v61 = a5 + 2;
    uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v48);
    unint64_t v50 = &v49[24 * v45];
    int v57 = v49;
    unsigned int v58 = v50;
    uint64_t v60 = &v49[24 * v51];
    *(void *)unint64_t v50 = 0;
    *((void *)v50 + 1) = 0;
    *((void *)v50 + 2) = 0;
    uint64_t v59 = v50 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v57);
    uint64_t v44 = a5[1];
    std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v57);
  }
  else
  {
    uint64_t v44 = (uint64_t)(v35 + 3);
    *uint64_t v35 = 0;
    v35[1] = 0;
    v35[2] = 0;
    a5[1] = v35 + 3;
  }
  a5[1] = v44;
  uint64_t v52 = (void **)(a5 + 15);
  if (a3 == 5 && a4)
  {
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__assign_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>(a5 + 15, v29, v28, v28 - v29);
  }
  else
  {
    uint64_t v53 = *v52;
    if (*v52)
    {
      a5[16] = v53;
      operator delete(v53);
      *uint64_t v52 = 0;
      a5[16] = 0;
      a5[17] = 0;
    }
    *uint64_t v52 = 0;
    a5[16] = 0;
    a5[17] = 0;
  }
  operator delete(v29);
  if (__p) {
    operator delete(__p);
  }
}

void sub_19278C880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  operator delete(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  char v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + 32 * v9;
    unint64_t v17 = v12 + 32 * v13;
    uint64_t v16 = v15 + 32;
    uint64_t v8 = a1[1];
  }
  else
  {
    uint64_t v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_19278C9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](result, a4);
    unsigned int v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_19278CA48(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>>::__construct_at_end<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription> const*,std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription> const*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      v7 += 32;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(v3 + 8) = v4;
  return result;
}

uint64_t std::allocator_traits<std::allocator<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>>>::construct[abi:ne180100]<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>,std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription> const&,void>(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(_DWORD *)(result + 24) = -1;
  uint64_t v2 = *(unsigned int *)(a2 + 24);
  if (v2 != -1)
  {
    uint64_t v3 = result;
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1EE39BD50 + v2))(&v4, result, a2);
    *(_DWORD *)(v3 + 24) = v2;
  }
  return result;
}

void sub_19278CB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 32; ; i -= 32)
  {
    uint64_t v8 = v6 + i;
    if (v4 + i - 32 == v5) {
      break;
    }
    uint64_t v9 = v4 + i - 64;
  }
  uint64_t v10 = v8 - 32;
  a2[1] = v10;
  uint64_t v11 = *v3;
  uint64_t *v3 = v10;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::allocator_traits<std::allocator<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>>>::construct[abi:ne180100]<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>,std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,anonymous namespace'::ReshapeAdjacentAxesDescription,anonymous namespace'::PadRightDescription,anonymous namespace'::RoundDescription>,void>(uint64_t result, uint64_t a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(_DWORD *)(result + 24) = -1;
  uint64_t v2 = *(unsigned int *)(a2 + 24);
  if (v2 != -1)
  {
    uint64_t v3 = result;
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_1EE39BD30 + v2))(&v4, result, a2);
    *(_DWORD *)(v3 + 24) = v2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
}

char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)a2, *a3, a3[1], a3[1] - *a3);
}

char *std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  __n128 result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)v3, *a2, a2[1], a2[1] - *a2);
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_19278CE10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__push_back_slow_path<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>(void *a1, uint64_t **a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v7 + 24 * v2;
  v12[0] = v7;
  v12[1] = v9;
  unint64_t v13 = v9;
  unint64_t v14 = v7 + 24 * v8;
  *(void *)unint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)v9, *a2, a2[1], a2[1] - *a2);
  v13 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v12);
  uint64_t v10 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v12);
  return v10;
}

void sub_19278CF18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__assign_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  __n128 result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    unint64_t v18 = (char *)a1[1];
    unint64_t v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      uint64_t v25 = result;
      while (v6 != a3)
      {
        uint64_t v26 = *v6++;
        *(void *)uint64_t v25 = v26;
        v25 += 8;
      }
      unint64_t v17 = (char *)(v25 - result);
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 8 * v19;
        do
        {
          uint64_t v22 = *v6++;
          *(void *)__n128 result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      uint64_t v23 = v12;
      while (v20 != a3)
      {
        uint64_t v24 = *v20++;
        *(void *)uint64_t v23 = v24;
        v23 += 8;
      }
      unint64_t v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](a1, v11);
    unint64_t v14 = (char *)a1[1];
    unint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6++;
        *(void *)uint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    unint64_t v17 = (char *)(v15 - v12);
  }
  *unint64_t v13 = &v17[(void)v12];
  return result;
}

_DWORD *std::remove_if[abi:ne180100]<std::__wrap_iter<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis> *>,anonymous namespace'::tf_gather_mode_plan(NSString *,int,Espresso::compute_path,int,Espresso::compute_path,int,BOOL,int,int,anonymous namespace'::GatherNDPlan *)::$_0>(_DWORD *result, _DWORD *a2)
{
  while (1)
  {
    if (result == a2) {
      return a2;
    }
    if (*result == result[1]) {
      break;
    }
    result += 2;
  }
  if (result != a2)
  {
    for (uint64_t i = result + 2; i != a2; i += 2)
    {
      if (*i != i[1])
      {
        *__n128 result = *i;
        result[1] = i[1];
        result += 2;
      }
    }
  }
  return result;
}

void std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](void **a1, void *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((char *)v5 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = (void *)(v10 + 8 * v7);
    unint64_t v13 = v10 + 8 * v11;
    *uint64_t v12 = *a2;
    uint64_t v6 = v12 + 1;
    uint64_t v15 = (char *)*a1;
    unint64_t v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--uint64_t v12 = v16;
      }
      while (v14 != v15);
      unint64_t v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  a1[1] = v6;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (v2 == 3) {
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))*(&off_1EE39BD10 + v2))(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  unint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, _DWORD *))*(&off_1EE39BD10 + v5))(&v6, v4);
  }
  v4[6] = -1;
  *unint64_t v4 = *a3;
  v4[6] = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      uint64_t v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(void *)a2 = v6;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))*(&off_1EE39BD10 + v5))(&v8, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  uint64_t v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v4 = v7;
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(char *result, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3 = *(void *)result;
  if (*(_DWORD *)(*(void *)result + 24))
  {
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    __n128 result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v7, *a3, a3[1], a3[1] - *a3);
    uint64_t v4 = *(unsigned int *)(v3 + 24);
    if (v4 != -1) {
      __n128 result = (char *)((uint64_t (*)(char *, uint64_t))*(&off_1EE39BD10 + v4))(&v9, v3);
    }
    *(_OWORD *)uint64_t v3 = v7;
    *(void *)(v3 + 16) = v8;
    *(_DWORD *)(v3 + 24) = 0;
  }
  else if (a2 != a3)
  {
    uint64_t v6 = *a3;
    uint64_t v5 = a3[1];
    return std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__assign_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>(a2, v6, v5, v5 - v6);
  }
  return result;
}

BOOL Espresso::ANECompilerEngine::stir_gather_nd_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, unsigned int *a3)
{
  uint64_t v6 = *((void *)a3 + 6);
  long long v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(v6 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  unint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v10, v11))
  {
    uint64_t v12 = *a2;
    unint64_t v13 = a2[1];
    v85[0] = v12;
    v85[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "gather_nd_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v87, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v85, (Espresso::base_kernel::validate_for_engine_warning_t *)&v87);
    if ((void)v92) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v92);
    }
    *(void *)&long long v71 = &v90;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    *(void *)&long long v71 = (char *)&v88 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    if (SBYTE7(v88) < 0) {
      operator delete((void *)v87);
    }
    if (v82 < 0) {
      operator delete((void *)__p);
    }
    goto LABEL_40;
  }
  unint64_t v14 = *(void **)a3;
  if (*((void *)a3 + 1) - *(void *)a3 != 128 || *((void *)a3 + 3) == *((void *)a3 + 4))
  {
    uint64_t v27 = *a2;
    unint64_t v13 = a2[1];
    v84[0] = v27;
    v84[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "gather_nd_kernel: has to have 2 bottom tensors");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v87, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v84, (Espresso::base_kernel::validate_for_engine_warning_t *)&v87);
    if ((void)v92) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v92);
    }
    *(void *)&long long v71 = &v90;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    *(void *)&long long v71 = (char *)&v88 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    if (SBYTE7(v88) < 0) {
      operator delete((void *)v87);
    }
    if (v82 < 0)
    {
      operator delete((void *)__p);
      if (!v13) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
LABEL_40:
    if (!v13)
    {
LABEL_42:
      BOOL v28 = 0;
      goto LABEL_43;
    }
LABEL_41:
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    goto LABEL_42;
  }
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v14 = *(void **)a3;
  }
  long long v15 = *((_OWORD *)v14 + 1);
  uint64_t v16 = v14[4];
  v75[0] = *(_OWORD *)v14;
  v75[1] = v15;
  uint64_t v76 = v16;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, (const void *)v14[5], v14[6], (uint64_t)(v14[6] - v14[5]) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&__p, (const Espresso::net *)v9, (const Espresso::layer_shape *)v75, 1);
  if (v77)
  {
    uint64_t v78 = v77;
    operator delete(v77);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = *(void **)a3;
  long long v18 = *(_OWORD *)(*(void *)a3 + 80);
  v66[0] = *(_OWORD *)(*(void *)a3 + 64);
  v66[1] = v18;
  unint64_t v19 = (const void *)v17[13];
  uint64_t v67 = v17[12];
  char v68 = 0;
  int v69 = 0;
  uint64_t v70 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, v19, v17[14], (uint64_t)(v17[14] - (void)v19) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v71, (const Espresso::net *)v9, (const Espresso::layer_shape *)v66, 1);
  if (v68)
  {
    int v69 = v68;
    operator delete(v68);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *((void *)a3 + 3);
  uint64_t v21 = *(void *)(v20 + 32);
  long long v22 = *(_OWORD *)(v20 + 16);
  v55[0] = *(_OWORD *)v20;
  v55[1] = v22;
  uint64_t v56 = v21;
  int v57 = 0;
  unsigned int v58 = 0;
  uint64_t v59 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v57, *(const void **)(v20 + 40), *(void *)(v20 + 48), (uint64_t)(*(void *)(v20 + 48) - *(void *)(v20 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v60, (const Espresso::net *)v9, (const Espresso::layer_shape *)v55, 1);
  if (v57)
  {
    unsigned int v58 = v57;
    operator delete(v57);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v23 = (void *)*((void *)a3 + 6);
  uint64_t v24 = *((void *)a3 + 9);
  uint64_t v25 = *(long long **)(*v23 + 224 * v24 + 136);
  if (*((char *)v25 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v25, *((void *)v25 + 1));
    uint64_t v23 = (void *)*((void *)a3 + 6);
    uint64_t v24 = *((void *)a3 + 9);
  }
  else
  {
    long long v26 = *v25;
    v54.__r_.__value_.__r.__words[2] = *((void *)v25 + 2);
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v26;
  }
  uint64_t v30 = *(void *)(*v23 + 224 * v24 + 136);
  if (*(char *)(v30 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(v30 + 24), *(void *)(v30 + 32));
  }
  else {
    std::string v53 = *(std::string *)(v30 + 24);
  }
  unsigned int v31 = a3[16];
  uint64_t v32 = *(void **)(v9 + 360);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v32, &v54))
  {
    unint64_t v50 = &v54;
    unint64_t v33 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 352), &v54, (uint64_t)&std::piecewise_construct, (long long **)&v50);
    long long v87 = *(_OWORD *)(v33 + 56);
    *(void *)&long long v89 = 0;
    long long v88 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, *((const void **)v33 + 9), *((void *)v33 + 10), (uint64_t)(*((void *)v33 + 10) - *((void *)v33 + 9)) >> 2);
    if (DWORD2(v87) == -1) {
      int v34 = 1;
    }
    else {
      int v34 = DWORD2(v87);
    }
    if ((void)v88)
    {
      *((void *)&v88 + 1) = v88;
      operator delete((void *)v88);
    }
    unsigned int v46 = v34;
    uint64_t v32 = *(void **)(v9 + 360);
  }
  else
  {
    unsigned int v46 = v31;
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v32, &v53))
  {
    unint64_t v50 = &v53;
    uint64_t v35 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 352), &v53, (uint64_t)&std::piecewise_construct, (long long **)&v50);
    long long v87 = *(_OWORD *)(v35 + 56);
    *(void *)&long long v89 = 0;
    long long v88 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, *((const void **)v35 + 9), *((void *)v35 + 10), (uint64_t)(*((void *)v35 + 10) - *((void *)v35 + 9)) >> 2);
    unsigned int v31 = DWORD2(v87) == -1 ? 1 : DWORD2(v87);
    if ((void)v88)
    {
      *((void *)&v88 + 1) = v88;
      operator delete((void *)v88);
    }
  }
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v48, (NSString *)(a1 + 296), v10);
  int v36 = *(unsigned __int8 *)(v9 + 1281);
  unint64_t v37 = v10;
  if (v46 > 4 || v46 == 3 || v31 > 4 || v31 == 3)
  {
    LOBYTE(v50) = 0;
    std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: unsupported compute path for ANE.");
    goto LABEL_104;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&__p, v37))
  {
    LOBYTE(v50) = 0;
    std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: input tensor dimensions exceed ANE limit.");
    goto LABEL_104;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v71, v37))
  {
    LOBYTE(v50) = 0;
    std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: indexes tensor dimensions exceed ANE limit.");
    goto LABEL_104;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v60, v37))
  {
    LOBYTE(v50) = 0;
    std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: output tensor dimensions exceed ANE limit.");
    goto LABEL_104;
  }
  int v38 = *(_DWORD *)(a1 + 280);
  switch(v38)
  {
    case 0:
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v87 = 0u;
      {
        LOBYTE(v50) = 0;
        std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: Generating transposes failed for TF gather.");
        goto LABEL_103;
      }
      goto LABEL_96;
    case 1:
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v87 = 0u;
      {
        LOBYTE(v50) = 0;
        std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: Failed generating gather plan for TF_GATHER_ND");
        goto LABEL_103;
      }
LABEL_96:
LABEL_103:
      break;
    case 2:
      if (v73 == v83)
      {
        int v39 = v71;
        if (v71 != v60
          || *(void *)((char *)&v71 + 4) != v61
          || HIDWORD(v71) != v62
          || (int v40 = v72, v72 != v63)
          || v74 != v65
          || v73 != v64)
        {
          LOBYTE(v50) = 0;
          std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: Torch gather expects indexes to be the same shape as the output.");
          break;
        }
        uint64_t v45 = *(void *)((char *)&v71 + 4);
        int v44 = HIDWORD(v71);
        v96[0] = 0;
        {
          LOBYTE(v50) = 0;
          std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: Invalid gather axis with torch gather.");
          break;
        }
        int v41 = v96[0];
        if (v96[0])
        {
          if (__p != v39) {
            goto LABEL_129;
          }
          if (v96[0] != 1)
          {
            if (DWORD2(__p) != HIDWORD(v45)) {
              goto LABEL_129;
            }
            if (v96[0] == 2)
            {
              if (HIDWORD(__p) != v44) {
                goto LABEL_129;
              }
              goto LABEL_128;
            }
          }
        }
        else if (DWORD2(__p) != HIDWORD(v45))
        {
          goto LABEL_129;
        }
        if (DWORD1(__p) != v45) {
          goto LABEL_129;
        }
        if (v96[0] != 3)
        {
          if (HIDWORD(__p) != v44) {
            goto LABEL_129;
          }
          if (v96[0] == 4)
          {
LABEL_133:
            long long v94 = 0u;
            long long v95 = 0u;
            long long v92 = 0u;
            long long v93 = 0u;
            long long v90 = 0u;
            long long v91 = 0u;
            long long v88 = 0u;
            long long v89 = 0u;
            long long v87 = 0u;
            int __src = v41;
            std::vector<Espresso::ANECompilerEngine::NamedAxis>::__assign_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis const*,Espresso::ANECompilerEngine::NamedAxis const*>((void *)&v91 + 1, &__src, &v87);
            goto LABEL_103;
          }
        }
LABEL_128:
        if (v81 != v40)
        {
LABEL_129:
          LOBYTE(v50) = 0;
          std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: Indexes shape can only differ from input shape on gather axis for torch mode.");
          break;
        }
        goto LABEL_133;
      }
      LOBYTE(v50) = 0;
      std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: Torch gather expects same number of dimensions for data and index tensor.");
      break;
    default:
      LOBYTE(v50) = 0;
      std::string::basic_string[abi:ne180100]<0>(v51, "gather_nd_kernel: Unknown GATHER_ND mode.");
      break;
  }
LABEL_104:

  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  if (!(_BYTE)v50)
  {
    uint64_t v42 = *a2;
    unint64_t v43 = a2[1];
    v47[0] = v42;
    v47[1] = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v87, (long long *)v51, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v47, (Espresso::base_kernel::validate_for_engine_warning_t *)&v87);
    if ((void)v92) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v92);
    }
    unint64_t v48 = (void **)&v90;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v48);
    unint64_t v48 = (void **)&v88 + 1;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v48);
    if (SBYTE7(v88) < 0) {
      operator delete((void *)v87);
    }
    if (v43) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v43);
    }
  }
  BOOL v28 = (_BYTE)v50 != 0;
  if (v52 < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
LABEL_43:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v28;
}

void sub_19278DE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }

  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  _Unwind_Resume(a1);
}

void sub_19278DFE8()
{
  if (!v0) {
    JUMPOUT(0x19278DFE0);
  }
  JUMPOUT(0x19278DFD8);
}

void anonymous namespace'::validate_gather_nd_plan(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, long long *a5, unsigned int a6, _DWORD ***a7)
{
  v83[2] = *MEMORY[0x1E4F143B8];
  if (a4 >= 8 || ((0x97u >> a4) & 1) == 0)
  {
    *(unsigned char *)a1 = 0;
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = "Invalid compute path for input.";
LABEL_4:
    std::string::basic_string[abi:ne180100]<0>(v8, v9);
    return;
  }
  if (a6 >= 8 || ((0x97u >> a6) & 1) == 0)
  {
    *(unsigned char *)a1 = 0;
    uint64_t v8 = (void *)(a1 + 8);
    uint64_t v9 = "Invalid compute path for indexes.";
    goto LABEL_4;
  }
  uint64_t v12 = off_1E5747038[a4];
  unint64_t v13 = off_1E5747038[a6];
  long long v14 = a5[1];
  long long v70 = *a5;
  long long v71 = v14;
  long long v15 = *(_OWORD *)(a3 + 16);
  int32x4_t v68 = *(int32x4_t *)a3;
  long long v69 = v15;
  uint64_t v16 = *a7;
  if ((char *)a7[1] - (char *)*a7 != 48)
  {
    std::string::basic_string[abi:ne180100]<0>(v74, "Validation of gather_nd plan failed, check for 3d ops was skipped.");
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v74;
    *(void *)(a1 + 24) = *(void *)&v74[16];
    return;
  }
  uint64_t v57 = (uint64_t)v12;
  if (v16[1] != *v16)
  {
    long long v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)int v74 = *(_OWORD *)a3;
    *(_OWORD *)&v74[16] = v18;
    Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)v74, (uint64_t)v12, v16);
    if (!*(unsigned char *)a1) {
      return;
    }
    int32x4_t v68 = *(int32x4_t *)v72;
    long long v69 = *(_OWORD *)&v72[16];
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    uint64_t v16 = *a7;
  }
  uint64_t v20 = v16[3];
  uint64_t v21 = v16[4];
  unint64_t v19 = v16 + 3;
  if (v21 != v20)
  {
    long long v22 = a5[1];
    *(_OWORD *)int v74 = *a5;
    *(_OWORD *)&v74[16] = v22;
    Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)v74, (uint64_t)v13, v19);
    if (!*(unsigned char *)a1) {
      return;
    }
    int32x4_t v68 = *(int32x4_t *)v72;
    long long v69 = *(_OWORD *)&v72[16];
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  uint64_t v23 = a7[6];
  uint64_t v24 = a7[7];
  if (v23 == v24)
  {
LABEL_45:
    if (a7[4] != a7[3])
    {
      Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)&v68, v57, (unsigned int **)a7 + 3);
      if (!*(unsigned char *)a1) {
        return;
      }
      int32x4_t v68 = *(int32x4_t *)v74;
      long long v69 = *(_OWORD *)&v74[16];
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
    }
    ANECGatherLayerDescInitialize();
    int v39 = (unsigned int *)a7[9];
    unint64_t v40 = ((char *)a7[10] - (char *)v39) >> 2;
    if (a7[10] != (_DWORD **)v39)
    {
      if (v40 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = ((char *)a7[10] - (char *)v39) >> 2;
      }
      uint64_t v42 = &v72[8];
      do
      {
        unsigned int v44 = *v39++;
        uint64_t v43 = v44;
        if (v44 >= 5) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
        }
        *v42++ = off_1E5747010[v43];
        --v41;
      }
      while (v41);
    }
    *(void *)int v72 = v40;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    ANECTensorDescInitialize();
    ANECTensorDescInitialize();
    int v59 = v69;
    *(void *)&long long v45 = v68.i32[3];
    *((void *)&v45 + 1) = (int)v69;
    *(_OWORD *)&v74[24] = v45;
    *(void *)int v74 = v57;
    uint64_t v75 = v68.i32[2];
    *(void *)&long long v45 = v68.i32[0];
    *((void *)&v45 + 1) = v68.i32[1];
    *(_OWORD *)&v74[8] = v45;
    uint64_t v76 = v13;
    *(void *)&long long v45 = SHIDWORD(v70);
    *((void *)&v45 + 1) = (int)v71;
    long long v78 = v45;
    uint64_t v79 = SDWORD2(v70);
    *(void *)&long long v45 = (int)v70;
    *((void *)&v45 + 1) = SDWORD1(v70);
    long long v77 = v45;
    int v46 = ANECValidateGatherLayer();
    if (v46)
    {
      Espresso::ANECompilerEngine::violations_from_alternates<ANECGatherLayerDescAlternate>((uint64_t)v65, v67, v66);
      std::to_string(&v82, v46);
      uint64_t v47 = std::string::insert(&v82, 0, "ANECValidateGatherLayer rejected GatherND operation with status ");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      *(void *)&v81[16] = *((void *)&v47->__r_.__value_.__l + 2);
      *(_OWORD *)int v81 = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      Espresso::ANECompilerEngine::format_validation_violations((uint64_t)__p, (uint64_t)v65);
      if ((v64 & 0x80u) == 0) {
        uint64_t v49 = __p;
      }
      else {
        uint64_t v49 = (void **)__p[0];
      }
      if ((v64 & 0x80u) == 0) {
        std::string::size_type v50 = v64;
      }
      else {
        std::string::size_type v50 = (std::string::size_type)__p[1];
      }
      uint64_t v51 = std::string::append((std::string *)v81, (const std::string::value_type *)v49, v50);
      std::string::size_type v52 = v51->__r_.__value_.__r.__words[0];
      v83[0] = v51->__r_.__value_.__l.__size_;
      *(void *)((char *)v83 + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
      char v53 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 23) = *(void *)((char *)v83 + 7);
      uint64_t v54 = v83[0];
      *(void *)(a1 + 8) = v52;
      *(void *)(a1 + 16) = v54;
      *(unsigned char *)(a1 + 31) = v53;
      if ((char)v64 < 0) {
        operator delete(__p[0]);
      }
      if ((v81[23] & 0x80000000) != 0) {
        operator delete(*(void **)v81);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v65);
      return;
    }
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    int v60 = 0;
    std::vector<Espresso::ANECompilerEngine::NamedAxis>::__init_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis*,Espresso::ANECompilerEngine::NamedAxis*>(&v60, a7[9], (uint64_t)a7[10], ((char *)a7[10] - (char *)a7[9]) >> 2);
    int v55 = v60;
    if (v55) {
      operator delete(v55);
    }
    long long v56 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
    *(_OWORD *)&v65[0].__r_.__value_.__l.__data_ = *(_OWORD *)v81;
    *(_OWORD *)&v65[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v81[16];
    if (*((void *)&v56 + 1) != (void)v56)
    {
      Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)v65, v57, (unsigned int **)&v82);
      if (!*(unsigned char *)a1) {
        goto LABEL_79;
      }
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
    }
    *(unsigned char *)a1 = 1;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "GatherND plan validates.");
LABEL_79:
    if ((void)v56) {
      operator delete((void *)v56);
    }
    return;
  }
  uint64_t v25 = (void *)(a1 + 16);
  while (2)
  {
    switch(*((_DWORD *)v23 + 6))
    {
      case 0:
        Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)&v70, (uint64_t)v13, v23);
        if (*(unsigned char *)a1)
        {
          goto LABEL_41;
        }
        break;
      case 1:
        int v26 = *((_DWORD *)v23 + 2);
        if (v26 > 1)
        {
          if (v26 < 9)
          {
            ANECReshapeLayerDescInitialize();
            *(void *)&v72[32] = SLODWORD(v65[0].__r_.__value_.__r.__words[1]);
            *(void *)&long long v33 = SLODWORD(v65[0].__r_.__value_.__l.__data_);
            *((void *)&v33 + 1) = SHIDWORD(v65[0].__r_.__value_.__r.__words[0]);
            long long v34 = v33;
            *(void *)&long long v33 = SHIDWORD(v65[0].__r_.__value_.__r.__words[1]);
            *((void *)&v33 + 1) = SLODWORD(v65[0].__r_.__value_.__r.__words[2]);
            *(_OWORD *)int v72 = v34;
            *(_OWORD *)&v72[16] = v33;
            ANECTensorDescInitialize();
            *(void *)&long long v33 = SHIDWORD(v70);
            *((void *)&v33 + 1) = (int)v71;
            *(_OWORD *)&v74[24] = v33;
            *(void *)int v74 = v13;
            uint64_t v75 = SDWORD2(v70);
            *(void *)&long long v33 = (int)v70;
            *((void *)&v33 + 1) = SDWORD1(v70);
            *(_OWORD *)&v74[8] = v33;
            __p[0] = 0;
            v83[0] = 0;
            int v35 = ANECValidateReshapeLayer();
            if (v35)
            {
              std::to_string((std::string *)v81, v35);
              int v36 = std::string::insert((std::string *)v81, 0, "ANECValidateReshapeLayer returned invalid status ");
              std::string::size_type v37 = v36->__r_.__value_.__r.__words[0];
              v82.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
              char v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
              v36->__r_.__value_.__l.__size_ = 0;
              v36->__r_.__value_.__r.__words[2] = 0;
              v36->__r_.__value_.__r.__words[0] = 0;
              *(unsigned char *)a1 = 0;
              *(void *)(a1 + 8) = v37;
              *(void *)(a1 + 23) = *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 7);
              void *v25 = v82.__r_.__value_.__r.__words[0];
              *(unsigned char *)(a1 + 31) = v38;
              if ((v81[23] & 0x80000000) != 0) {
                operator delete(*(void **)v81);
              }
            }
            else
            {
              *(unsigned char *)a1 = 1;
              std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Valid interleave.");
            }
          }
          else
          {
            *(unsigned char *)a1 = 0;
            std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Maximum size of gather slice vector is 8.");
          }
        }
        else
        {
          *(unsigned char *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Nonsensical interleave amount.");
        }
        if (*(unsigned char *)a1)
        {
LABEL_41:
          long long v70 = *(_OWORD *)v74;
          long long v71 = *(_OWORD *)&v74[16];
          goto LABEL_42;
        }
        break;
      case 2:
        int v27 = *(_DWORD *)v23;
        ANECPadLayerDescInitialize();
        *(void *)int v74 = 1;
        *(void *)&v74[8] = @"Width";
        *(void *)&v74[16] = @"Replication";
        *(_DWORD *)&v74[24] = 0;
        *(_DWORD *)&v74[28] = v27;
        int v80 = 0;
        ANECTensorDescInitialize();
        int v58 = v71;
        *(void *)&long long v28 = SHIDWORD(v70);
        *((void *)&v28 + 1) = (int)v71;
        *(_OWORD *)&v72[24] = v28;
        *(void *)int v72 = v13;
        uint64_t v73 = SDWORD2(v70);
        *(void *)&long long v28 = (int)v70;
        *((void *)&v28 + 1) = SDWORD1(v70);
        *(_OWORD *)&v72[8] = v28;
        v82.__r_.__value_.__r.__words[0] = 0;
        __p[0] = 0;
        int v29 = ANECValidatePadLayer();
        if (v29)
        {
          std::to_string(v65, v29);
          uint64_t v30 = std::string::insert(v65, 0, "ANECValidatePadLayer for gather pad right check failed with status ");
          std::string::size_type v31 = v30->__r_.__value_.__r.__words[0];
          *(void *)int v81 = v30->__r_.__value_.__l.__size_;
          *(void *)&v81[7] = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
          char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 8) = v31;
          *(void *)(a1 + 23) = *(void *)&v81[7];
          void *v25 = *(void *)v81;
          *(unsigned char *)(a1 + 31) = v32;
          if (SHIBYTE(v65[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65[0].__r_.__value_.__l.__data_);
          }
        }
        else
        {
          *(unsigned char *)a1 = 1;
          std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "");
        }
        if (*(unsigned char *)a1)
        {
          LODWORD(v71) = *(_DWORD *)v23 + v58;
LABEL_42:
          if (*(char *)(a1 + 31) < 0) {
            operator delete(*(void **)(a1 + 8));
          }
          goto LABEL_44;
        }
        break;
      case 3:
LABEL_44:
        v23 += 4;
        if (v23 == v24) {
          goto LABEL_45;
        }
        continue;
      default:
        *(unsigned char *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Unknown index tensor transform.");
        break;
    }
    break;
  }
}

void sub_19278E870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v29 = *(void **)(v27 - 144);
  if (v29) {
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECGatherLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    long long v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 584 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        unint64_t v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 73;
    }
    while (v6 != a2);
  }
}

void sub_19278EA20(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::vector<Espresso::ANECompilerEngine::NamedAxis>::__init_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis*,Espresso::ANECompilerEngine::NamedAxis*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<Espresso::ANECompilerEngine::NamedAxis>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19278EA94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::infer_gather_output_shape(uint64_t result, int a2, uint64_t a3, int *a4, int *a5, int32x4_t a6)
{
  if (a4 == a5) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot infer gather_nd shape for gather with no gather axes.");
  }
  *(void *)(result + 20) = 0xFFFFFFFF00000001;
  *(_DWORD *)(result + 28) = -1;
  __int32 v6 = *(_DWORD *)a3;
  unint64_t v7 = *(int *)(a3 + 4) / (unint64_t)(a5 - a4);
  int v8 = *(_DWORD *)(a3 + 16);
  if (a2 <= v8) {
    int v9 = *(_DWORD *)(a3 + 16);
  }
  else {
    int v9 = a2;
  }
  v10.i32[0] = *(_DWORD *)a3;
  v10.i32[1] = *(int *)(a3 + 4) / (unint64_t)(a5 - a4);
  v10.i64[1] = *(void *)(a3 + 8);
  *(_DWORD *)(result + 16) = v9;
  *(int32x4_t *)__n128 result = vmaxq_s32(a6, v10);
  do
  {
    switch(*a4)
    {
      case 0:
        *(_DWORD *)__n128 result = v6;
        break;
      case 1:
        *(_DWORD *)(result + 8) = v10.i32[2];
        break;
      case 2:
        *(_DWORD *)(result + 4) = v7;
        break;
      case 3:
        *(_DWORD *)(result + 12) = v10.i32[3];
        break;
      case 4:
        *(_DWORD *)(result + 16) = v8;
        break;
      default:
        std::to_string(&v14, *a4);
        uint64_t v11 = std::string::insert(&v14, 0, "Illegal gather axis ");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        int64_t v16 = v11->__r_.__value_.__r.__words[2];
        long long v15 = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        if (v16 >= 0) {
          unint64_t v13 = (const char *)&v15;
        }
        else {
          unint64_t v13 = (const char *)v15;
        }
        Espresso::throw_exception_selector<Espresso::invalid_state_error>(v13);
    }
    ++a4;
  }
  while (a4 != a5);
  return result;
}

void sub_19278EBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::stir_gather_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::stir_gather_nd_kernel::~stir_gather_nd_kernel(Espresso::ANECompilerEngine::stir_gather_nd_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::stir_gather_nd_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::stir_gather_nd_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

__n128 Espresso::ANECompilerEngine::mix_array_gather_kernel::mix_array_gather_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 280;
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&_Q0 = 0x100000001;
  *((void *)&_Q0 + 1) = 0x100000001;
  *(_OWORD *)uint64_t v5 = _Q0;
  *(void *)(v6 + 296) = 4294967294;
  *(unsigned char *)(v6 + 304) = 0;
  char v8 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(unsigned char *)(v6 + 368) = 0;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(unsigned char *)(v6 + 440) = 0;
  *(_DWORD *)(v6 + 480) = 1065353216;
  *(_WORD *)(v6 + 488) = 0;
  *(unsigned char *)(v6 + 490) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v5 + 212) = _Q0;
  *(unsigned char *)(v6 + 500) = 0;
  *(void *)(v6 + 504) = 0;
  *(void *)(v6 + 512) = 0;
  *(unsigned char *)(v6 + 520) = v8;
  *(void *)uint64_t v6 = &unk_1EE346208;
  *(void *)(v6 + 312) = &unk_1EE346368;
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)(v5 + 9) = *(_OWORD *)(a3 + 9);
  *(__n128 *)uint64_t v5 = result;
  return result;
}

double Espresso::ANECompilerEngine::stir_gather_nd_kernel::stir_gather_nd_kernel(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(_DWORD *)(v5 + 288) = 0;
  *(_WORD *)(v5 + 292) = 257;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(unsigned char *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(unsigned char *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(unsigned char *)(v5 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 476) = result;
  *(unsigned char *)(v5 + 484) = 0;
  *(void *)(v5 + 488) = 0;
  *(void *)(v5 + 496) = 0;
  *(unsigned char *)(v5 + 504) = v6;
  *(void *)uint64_t v5 = &unk_1EE3455F0;
  *(void *)(v5 + 296) = &unk_1EE345750;
  uint64_t v12 = *a3;
  *(void *)(v5 + 286) = *(uint64_t *)((char *)a3 + 6);
  *(void *)(v5 + 280) = v12;
  return result;
}

uint64_t Espresso::profiler_t::profiler_t(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = *a2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 850045863;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v3 = (char *)operator new(0xC000uLL);
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 104) = v3 + 49152;
  return a1;
}

void sub_19278EF34(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  std::mutex::~mutex(v5);
  unint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 96) = v7;
    operator delete(v7);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  Espresso::profiler_t::network_performance_t::~network_performance_t(v2);
  _Unwind_Resume(a1);
}

void Espresso::profiler_t::network_performance_t::~network_performance_t(Espresso::profiler_t::network_performance_t *this)
{
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::profiler_t::event_t>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

void Espresso::profiler_t::~profiler_t(Espresso::profiler_t *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  uint64_t v4 = (void **)((char *)this + 32);
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void Espresso::profiler_t::log_event(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 112);
  std::mutex::lock((std::mutex *)(a1 + 112));
  uint64_t v5 = *(_OWORD **)(a1 + 96);
  unint64_t v6 = *(void *)(a1 + 104);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v10 = *(void *)(a1 + 88);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v10) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::profiler_t::event_t>>(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int64_t v16 = (_OWORD *)(v14 + 48 * v11);
    unint64_t v17 = v14 + 48 * v15;
    long long v18 = *a2;
    long long v19 = a2[2];
    v16[1] = a2[1];
    v16[2] = v19;
    _OWORD *v16 = v18;
    int v9 = v16 + 3;
    uint64_t v21 = *(char **)(a1 + 88);
    uint64_t v20 = *(char **)(a1 + 96);
    if (v20 != v21)
    {
      do
      {
        long long v22 = *((_OWORD *)v20 - 3);
        long long v23 = *((_OWORD *)v20 - 1);
        *(v16 - 2) = *((_OWORD *)v20 - 2);
        *(v16 - 1) = v23;
        *(v16 - 3) = v22;
        v16 -= 3;
        v20 -= 48;
      }
      while (v20 != v21);
      uint64_t v20 = *(char **)(a1 + 88);
    }
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v9;
    *(void *)(a1 + 104) = v17;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[2];
    v5[1] = a2[1];
    v5[2] = v8;
    *uint64_t v5 = v7;
    int v9 = v5 + 3;
  }
  *(void *)(a1 + 96) = v9;
  if (Espresso::time_seconds(void)::onceToken != -1) {
    dispatch_once(&Espresso::time_seconds(void)::onceToken, &__block_literal_global_3415);
  }
  *(double *)(*(void *)(a1 + 96) - 48) = (double)(std::chrono::steady_clock::now().__d_.__rep_
                                                    - Espresso::time_seconds(void)::t0)
                                           * 0.000000001;

  std::mutex::unlock(v4);
}

void sub_19278F218(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::chrono::steady_clock::time_point ___ZN8Espresso12time_secondsEv_block_invoke_3418()
{
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Espresso::time_seconds(void)::t0 = result.__d_.__rep_;
  return result;
}

void Espresso::profiler_t::static_entries(Espresso::profiler_t *this@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = Espresso::espresso_os_log_subsystem(this, a2);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1920CB000, v5, OS_LOG_TYPE_INFO, "[profiler_t::static_entries] Start static_entries()", (uint8_t *)&buf, 2u);
  }

  std::vector<Espresso::profiler_t::entry_t>::vector(a3, (uint64_t)(*(void *)(*((void *)this + 10) + 40) - *(void *)(*((void *)this + 10) + 32)) >> 4);
  LODWORD(buf.__r_.__value_.__l.__data_) = 100;
  Espresso::create_context((int *)&buf, &v86);
  uint64_t v6 = *((void *)this + 10);
  if (*(unsigned char *)(*(void *)(v6 + 16) + 123)) {
    Espresso::load_network_from_net_no_dispatch(v6, &v86, 0, (uint64_t *)&buf);
  }
  else {
    Espresso::load_network_no_dispatch(v6 + 592, &v86, 0, (uint64_t *)&buf);
  }
  long long v7 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  long long v8 = (void *)*((void *)this + 10);
  uint64_t v9 = v8[4];
  if (v8[5] != v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unint64_t v13 = *(uint64_t (****)(void))(*(void *)(*(void *)(*(void *)(v9 + v10) + 64) + 8) + 8);
      int v14 = (**v13)(v13);
      uint64_t v15 = *a3 + v11;
      *(_DWORD *)(v15 + 64) = v14;
      *(void *)uint64_t v15 = v12;
      std::string::operator=((std::string *)(v15 + 8), (const std::string *)(*(void *)(v9 + v10) + 16));
      std::string::operator=((std::string *)(*a3 + v11 + 32), (const std::string *)(*(void *)(v9 + v10) + 40));
      uint64_t v16 = *(void *)(v9 + v10);
      if (*(char *)(v16 + 223) < 0) {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v16 + 200), *(void *)(v16 + 208));
      }
      else {
        std::string buf = *(std::string *)(v16 + 200);
      }
      uint64_t v17 = *a3 + v11;
      uint64_t v18 = v17 + 128;
      if (*(char *)(v17 + 151) < 0) {
        operator delete(*(void **)v18);
      }
      long long v19 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)(v18 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v18 = v19;
      ++v12;
      long long v8 = (void *)*((void *)this + 10);
      uint64_t v9 = v8[4];
      v11 += 152;
      v10 += 16;
    }
    while (v12 < (v8[5] - v9) >> 4);
  }
  uint64_t v20 = (Espresso *)(***(uint64_t (****)(void))(v8[2] + 8))(*(void *)(v8[2] + 8));
  int v22 = (int)v20;
  if (v20) {
    BOOL v23 = v20 == 100;
  }
  else {
    BOOL v23 = 1;
  }
  int v24 = v23;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
  if (!v20 || v20 == 100)
  {
    *(void *)&v88[8] = 0;
    *(void *)&v88[16] = 0;
    *(void *)long long v88 = &v88[8];
    uint64_t v25 = *(void *)v7;
    if (*(void *)(v7 + 8) != *(void *)v7)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        long long __p = (void *)(v25 + v26);
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v88, (void *)(v25 + v26), (long long **)&__p)[7] = v27++;
        uint64_t v25 = *(void *)v7;
        v26 += 224;
      }
      while (v27 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 5));
    }
    unint64_t v84 = 0;
    uint64_t v28 = *(void *)(*((void *)this + 10) + 32);
    if (*(void *)(*((void *)this + 10) + 40) != v28)
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      do
      {
        uint64_t v31 = *(void *)(v28 + v29);
        char v32 = (char *)(v31 + 16);
        if (*(char *)(v31 + 39) < 0) {
          char v32 = *(char **)v32;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v32);
        uint64_t v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)&v88[8], &__p);
        uint64_t v34 = v33;
        if (v83 < 0)
        {
          operator delete(__p);
          if (v34)
          {
LABEL_33:
            std::string::basic_string[abi:ne180100]<0>(&__p, v32);
            uint64_t v35 = *(void *)std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v88, &__p);
            if (v83 < 0) {
              operator delete(__p);
            }
            std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&buf, v30, (uint64_t *)&v84)[5] = v35;
          }
        }
        else if (v33)
        {
          goto LABEL_33;
        }
        unint64_t v84 = ++v30;
        uint64_t v28 = *(void *)(*((void *)this + 10) + 32);
        v29 += 16;
      }
      while (v30 < (*(void *)(*((void *)this + 10) + 40) - v28) >> 4);
    }
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)&v88[8]);
  }
  if (*(void *)(*((void *)this + 10) + 712))
  {
    int v36 = Espresso::espresso_os_log_subsystem(v20, v21);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      std::string::size_type v37 = (void *)*((void *)this + 10);
      uint64_t v38 = (uint64_t)(v37[5] - v37[4]) >> 4;
      uint64_t v39 = (uint64_t)(*(void *)(v37[89] + 56) - *(void *)(v37[89] + 48)) >> 2;
      *(_DWORD *)long long v88 = 134218240;
      *(void *)&v88[4] = v38;
      *(_WORD *)&v88[12] = 2048;
      *(void *)&v88[14] = v39;
      _os_log_impl(&dword_1920CB000, v36, OS_LOG_TYPE_INFO, "[profiler_t::static_entries] Network size %lu fallback size %lu", v88, 0x16u);
    }

    uint64_t v40 = *((void *)this + 10);
    uint64_t v41 = *(void *)(v40 + 712);
    uint64_t v43 = v40 + 32;
    uint64_t v42 = *(void *)(v40 + 32);
    if (*(void *)(v43 + 8) != v42)
    {
      unint64_t v44 = 0;
      do
      {
        uint64_t v45 = *(void *)(v42 + 16 * v44);
        int v46 = (char *)(v45 + 16);
        if (*(char *)(v45 + 39) < 0) {
          int v46 = *(char **)v46;
        }
        std::string::basic_string[abi:ne180100]<0>(v88, v46);
        int v48 = v24;
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v41 + 80), v88))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, v46);
          int v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v41 + 104), &__p)? 1: v24;
          if (v83 < 0) {
            operator delete(__p);
          }
        }
        if ((v88[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v88);
          if (!v48)
          {
LABEL_65:
            uint64_t v52 = *a3 + 152 * v44;
            *(_WORD *)(v52 + 120) = 0;
            *(unsigned char *)(v52 + 122) = 1;
            goto LABEL_101;
          }
        }
        else if (!v48)
        {
          goto LABEL_65;
        }
        if (v22 != 100 && v22)
        {
          std::string::basic_string[abi:ne180100]<0>(v88, v46);
          char v53 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v41 + 72, v88);
          if ((v88[23] & 0x80000000) != 0) {
            operator delete(*(void **)v88);
          }
          std::string::basic_string[abi:ne180100]<0>(v88, v46);
          uint64_t v54 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v41 + 96, v88);
          if ((v88[23] & 0x80000000) != 0) {
            operator delete(*(void **)v88);
          }
          std::map<Espresso::platform,int>::map[abi:ne180100]((uint64_t)v88, v53 + 7);
          std::map<Espresso::platform,int>::map[abi:ne180100]((uint64_t)&__p, v54 + 7);
          int v55 = *(uint64_t **)&v88[8];
          if (!*(void *)&v88[8]) {
            goto LABEL_80;
          }
          long long v56 = &v88[8];
          do
          {
            uint64_t v57 = v55;
            int v58 = v56;
            int v59 = *((_DWORD *)v55 + 7);
            if (v59 >= v22) {
              long long v56 = v55;
            }
            else {
              ++v55;
            }
            int v55 = (uint64_t *)*v55;
          }
          while (v55);
          if (v56 == &v88[8]) {
            goto LABEL_80;
          }
          if (v59 < v22) {
            uint64_t v57 = v58;
          }
          if (v22 < *((_DWORD *)v57 + 7)) {
LABEL_80:
          }
            long long v56 = &v88[8];
          int v60 = v82;
          if (v82)
          {
            uint64_t v61 = &v82;
            uint64_t v62 = v82;
            do
            {
              int v63 = v62;
              unsigned __int8 v64 = v61;
              int v65 = *((_DWORD *)v62 + 7);
              if (v65 >= v22) {
                uint64_t v61 = v62;
              }
              else {
                ++v62;
              }
              uint64_t v62 = (void *)*v62;
            }
            while (v62);
            if (v61 != &v82)
            {
              uint64_t v66 = v65 >= v22 ? v63 : v64;
              if (v22 >= *((_DWORD *)v66 + 7) && v56 != &v88[8])
              {
                int32x4_t v68 = (unsigned char *)(*a3 + 152 * v44);
                v68[120] = *((_DWORD *)v56 + 8) != 0;
                if (v65 >= v22) {
                  long long v69 = v63;
                }
                else {
                  long long v69 = v64;
                }
                v68[121] = *((_DWORD *)v69 + 8) != 0;
                v68[122] = 0;
              }
            }
          }
          std::__tree<int>::destroy(v60);
          std::__tree<int>::destroy(*(void **)&v88[8]);
        }
        else
        {
          if (buf.__r_.__value_.__l.__size_)
          {
            size_t size = (void *)buf.__r_.__value_.__l.__size_;
            do
            {
              unint64_t v50 = size[4];
              if (v44 >= v50)
              {
                if (v50 >= v44)
                {
                  uint64_t v70 = *(void *)v7
                      + 224 * *std::map<unsigned long,unsigned long>::at((void *)buf.__r_.__value_.__l.__size_, v44);
                  uint64_t v71 = *a3 + 152 * v44;
                  *(unsigned char *)(v71 + 120) = *(void *)(v70 + 88) != 0;
                  *(_WORD *)(v71 + 121) = *(unsigned __int8 *)(v70 + 105);
                  goto LABEL_101;
                }
                ++size;
              }
              size_t size = (void *)*size;
            }
            while (size);
          }
          uint64_t v51 = Espresso::espresso_os_log_subsystem((Espresso *)buf.__r_.__value_.__l.__size_, v47);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long v88 = 136315138;
            *(void *)&v88[4] = v46;
            _os_log_impl(&dword_1920CB000, v51, OS_LOG_TYPE_INFO, "Failed to find layer %s in tmp ir", v88, 0xCu);
          }
        }
LABEL_101:
        uint64_t v20 = (Espresso *)std::string::operator=((std::string *)(*a3 + 152 * v44 + 32), (const std::string *)(*(void *)(*(void *)(*((void *)this + 10) + 32) + 16 * v44)+ 40));
        ++v44;
        int v72 = (void *)*((void *)this + 10);
        uint64_t v42 = v72[4];
      }
      while (v44 < (v72[5] - v42) >> 4);
      uint64_t v41 = v72[89];
    }
    uint64_t v73 = *(const Espresso::base_kernel::validate_for_engine_warning_t **)v41;
    int v74 = *(const Espresso::base_kernel::validate_for_engine_warning_t **)(v41 + 8);
    if (*(const Espresso::base_kernel::validate_for_engine_warning_t **)v41 != v74)
    {
      do
      {
        unint64_t v75 = *((void *)v73 + 12);
        if (v75 < (uint64_t)(*(void *)(*((void *)this + 10) + 40) - *(void *)(*((void *)this + 10) + 32)) >> 4)
        {
          uint64_t v76 = *a3 + 152 * v75;
          long long v78 = *(std::string **)(v76 + 104);
          unint64_t v77 = *(void *)(v76 + 112);
          uint64_t v79 = (Espresso **)(v76 + 104);
          if ((unint64_t)v78 >= v77)
          {
            uint64_t v20 = (Espresso *)std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>((int64x2_t *)(*a3 + 152 * v75 + 96), v73);
          }
          else
          {
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(v78, v73);
            uint64_t v20 = (Espresso *)&v78[4].__r_.__value_.__r.__words[2];
            *uint64_t v79 = (Espresso *)&v78[4].__r_.__value_.__r.__words[2];
          }
          *uint64_t v79 = v20;
        }
        uint64_t v73 = (const Espresso::base_kernel::validate_for_engine_warning_t *)((char *)v73 + 112);
      }
      while (v73 != v74);
    }
  }
  int v80 = Espresso::espresso_os_log_subsystem(v20, v21);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long v88 = 0;
    _os_log_impl(&dword_1920CB000, v80, OS_LOG_TYPE_INFO, "[profiler_t::static_entries] Exit static_entries()", v88, 2u);
  }

  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&buf, (void *)buf.__r_.__value_.__l.__size_);
  if (*((void *)&v7 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v7 + 1));
  }
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
}

void sub_19278FAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a29) {
    nitro::nitro_function::nitro_function(a29);
  }
  std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

void *std::vector<Espresso::profiler_t::entry_t>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x1AF286BCA1AF287) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(152 * a2);
    *a1 = v4;
    a1[2] = &v4[152 * a2];
    size_t v5 = 152 * ((152 * a2 - 152) / 0x98) + 152;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19278FC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::map<unsigned long,unsigned long>::at(void *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unint64_t v2 = a1[4];
      if (v2 <= a2) {
        break;
      }
      a1 = (void *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (void *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

uint64_t std::map<Espresso::platform,int>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  size_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      long long v7 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          long long v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      int v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6) {
          unint64_t v12 = v7;
        }
        else {
          unint64_t v12 = v3;
        }
        if (v6) {
          unint64_t v13 = v7 + 1;
        }
        else {
          unint64_t v13 = v3;
        }
      }
      else
      {
        unint64_t v12 = v3;
        unint64_t v13 = v3;
        if (v6)
        {
          unint64_t v13 = v3;
          while (1)
          {
            while (1)
            {
              unint64_t v12 = (uint64_t **)v6;
              int v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17) {
                break;
              }
              uint64_t v6 = *v12;
              unint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v17 >= v11) {
              break;
            }
            unint64_t v13 = v12 + 1;
            uint64_t v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        int v14 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v14 + 28) = *(void *)((char *)v5 + 28);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          size_t v5 = v16;
        }
        while (!v10);
      }
      size_t v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_19278FE30(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        long long v7 = v4 - 7;
        std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v6 = *(v4 - 10);
        if (v6)
        {
          *(v4 - 9) = v6;
          operator delete(v6);
        }
        if (*((char *)v4 - 97) < 0) {
          operator delete(*(v4 - 15));
        }
        if (*((char *)v4 - 121) < 0) {
          operator delete(*(v4 - 18));
        }
        v4 -= 19;
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::profiler_t::get_result(Espresso::profiler_t *this@<X0>, const Espresso::profiler_t::entry_t **a2@<X8>)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = (std::mutex *)((char *)this + 112);
  std::mutex::lock((std::mutex *)((char *)this + 112));
  Espresso::profiler_t::static_entries(this, v4, a2);
  uint64_t v6 = *((void *)this + 11);
  for (uint64_t i = *((void *)this + 12); v6 != i; v6 += 48)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    int v8 = *(_DWORD *)(v6 + 8);
    if (v8 == 723714200)
    {
      uint64_t v17 = (uint64_t)*a2 + 152 * v7;
      uint64_t v19 = *(void *)(v17 + 72);
      uint64_t v18 = *(void *)(v17 + 80);
      if (v19 != v18) {
        *(void *)(v18 - 8) = *(void *)v6;
      }
    }
    else if (v8 == 723714196)
    {
      uint64_t v9 = (uint64_t)*a2 + 152 * v7;
      unint64_t v12 = *(void *)(v9 + 88);
      int v11 = (void *)(v9 + 88);
      unint64_t v10 = v12;
      uint64_t v13 = *(void *)v6;
      uint64_t v15 = (int64x2_t **)(v11 - 1);
      int v14 = (int64x2_t *)*(v11 - 1);
      if ((unint64_t)v14 >= v12)
      {
        uint64_t v41 = *(void *)v6;
        uint64_t v20 = (void **)(v11 - 2);
        uint64_t v21 = (int64x2_t *)*(v11 - 2);
        uint64_t v22 = v14 - v21;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v10 - (void)v21;
        if (v24 >> 3 > v23) {
          unint64_t v23 = v24 >> 3;
        }
        BOOL v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
        if (!v25) {
          unint64_t v26 = v23;
        }
        if (v26)
        {
          unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v26);
          int v14 = *v15;
          uint64_t v21 = (int64x2_t *)*v20;
        }
        else
        {
          uint64_t v27 = 0;
        }
        uint64_t v28 = (int64x2_t *)(v26 + 16 * v22);
        *uint64_t v28 = vdupq_lane_s64(v41, 0);
        uint64_t v16 = v28 + 1;
        if (v14 != v21)
        {
          do
          {
            v28[-1] = v14[-1];
            --v28;
            --v14;
          }
          while (v14 != v21);
          uint64_t v21 = (int64x2_t *)*v20;
        }
        *uint64_t v20 = v28;
        void *v15 = v16;
        *int v11 = v26 + 16 * v27;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        v14->i64[0] = v13;
        v14->i64[1] = v13;
        uint64_t v16 = v14 + 1;
      }
      void *v15 = v16;
    }
  }
  uint64_t v29 = *a2;
  unint64_t v30 = a2[1];
  if (*a2 != v30)
  {
    do
    {
      uint64_t v31 = Espresso::profiler_t::entry_t::entry_t((Espresso::profiler_t::entry_t *)&v42, v29);
      if (v48 != v49)
      {
        double v47 = 0.0;
        double v33 = 0.0;
        uint64_t v34 = (double *)v48;
        do
        {
          double v35 = *v34;
          double v36 = v34[1];
          v34 += 2;
          double v33 = v33 + v36 - v35;
          double v47 = v33;
        }
        while (v34 != (double *)v49);
        double v47 = v33 / (double)(unint64_t)((v49 - (unsigned char *)v48) >> 4);
        std::string::size_type v37 = Espresso::espresso_os_log_subsystem(v31, v32);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          if (v44 >= 0) {
            uint64_t v38 = &v43;
          }
          else {
            uint64_t v38 = v43;
          }
          float v39 = v47;
          *(_DWORD *)std::string buf = 134218498;
          *(void *)&buf[4] = v42;
          __int16 v54 = 2080;
          int v55 = v38;
          __int16 v56 = 2048;
          double v57 = (float)(v39 * 1000.0);
          _os_log_impl(&dword_1920CB000, v37, OS_LOG_TYPE_INFO, "[profiler_t::get_result] %llu\t%s\t%.3f", buf, 0x20u);
        }
      }
      if (v52 < 0) {
        operator delete(__p);
      }
      *(void *)std::string buf = &v50;
      std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (v48)
      {
        uint64_t v49 = v48;
        operator delete(v48);
      }
      if (v46 < 0) {
        operator delete(v45);
      }
      if (v44 < 0) {
        operator delete(v43);
      }
      uint64_t v29 = (const Espresso::profiler_t::entry_t *)((char *)v29 + 152);
    }
    while (v29 != v30);
  }
  std::mutex::unlock(v40);
}

void sub_192790268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

Espresso::profiler_t::entry_t *Espresso::profiler_t::entry_t::entry_t(Espresso::profiler_t::entry_t *this, const Espresso::profiler_t::entry_t *a2)
{
  *(void *)this = *(void *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  uint64_t v6 = *((void *)a2 + 7);
  int v7 = *((_DWORD *)a2 + 16);
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 16) = v7;
  *((void *)this + 7) = v6;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  int v8 = (char *)*((void *)a2 + 9);
  uint64_t v9 = (char *)*((void *)a2 + 10);
  uint64_t v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10 >> 4);
    *((void *)this + 9) = v11;
    *((void *)this + 10) = v11;
    *((void *)this + 11) = &v11[v12];
    do
    {
      long long v13 = *(_OWORD *)v8;
      v8 += 16;
      *v11++ = v13;
    }
    while (v8 != v9);
    *((void *)this + 10) = v11;
  }
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  uint64_t v14 = *((void *)a2 + 12);
  uint64_t v15 = *((void *)a2 + 13);
  if (v15 != v14)
  {
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 4);
    if (v16 >= 0x24924924924924ALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>>(v16);
    uint64_t v18 = 0;
    *((void *)this + 12) = v17;
    *((void *)this + 13) = v17;
    *((void *)this + 14) = &v17[112 * v19];
    do
    {
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v17[v18], (const Espresso::base_kernel::validate_for_engine_warning_t *)(v14 + v18));
      v18 += 112;
    }
    while (v14 + v18 != v15);
    *((void *)this + 13) = &v17[v18];
  }
  __int16 v20 = *((_WORD *)a2 + 60);
  *((unsigned char *)this + 122) = *((unsigned char *)a2 + 122);
  *((_WORD *)this + 60) = v20;
  uint64_t v21 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v22 = *((_OWORD *)a2 + 8);
    *((void *)this + 18) = *((void *)a2 + 18);
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
  }
  return this;
}

void sub_192790490(_Unwind_Exception *a1, uint64_t a2, void **a3, ...)
{
  va_start(va, a3);
  std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  int v7 = *v5;
  if (*v5)
  {
    *(void *)(v3 + 80) = v7;
    operator delete(v7);
  }
  if (*(char *)(v3 + 55) < 0) {
    operator delete(*a3);
  }
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*v4);
  }
  _Unwind_Resume(a1);
}

void Espresso::profiler_t::entry_t::~entry_t(void **this)
{
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  uint64_t v3 = this + 12;
  std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void Espresso::profiler_t::results_for_platform_and_compute_path(Espresso::profiler_t *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  v27[0] = a2;
  if (*((void *)a1 + 10))
  {
    Espresso::profiler_t::get_network_path(a1, &v26);
    Espresso::create_context(v27, &v24);
    if (v24)
    {
      uint64_t v7 = *((void *)a1 + 10);
      if (*(unsigned char *)(*(void *)(v7 + 16) + 123)) {
        Espresso::load_network_from_net_no_dispatch(v7, &v24, a3, (uint64_t *)&__str);
      }
      else {
        Espresso::load_network_no_dispatch((uint64_t)&v26, &v24, a3, (uint64_t *)&__str);
      }
      long long v8 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      size_t size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__r.__words[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "received wrong object, expected net_info_ir_t");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (__str.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v8 + 1));
      }
      std::vector<Espresso::profiler_t::entry_t>::vector(a4, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 5));
      uint64_t v9 = *(void *)v8;
      if (*(void *)(v8 + 8) != *(void *)v8)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        do
        {
          Espresso::kernel_info_t::kernel_info_t(&__str, (const Espresso::kernel_info_t *)(v9 + v10));
          uint64_t v13 = *a4 + v11;
          *(_DWORD *)(v13 + 64) = -1;
          *(void *)uint64_t v13 = v12;
          BOOL v14 = v22 != 0;
          char v15 = v23;
          std::string::operator=((std::string *)(v13 + 8), &__str);
          std::string::operator=((std::string *)(*a4 + v11 + 32), &v21);
          std::string::operator=((std::string *)(*a4 + v11 + 128), &v20);
          uint64_t v16 = *a4 + v11;
          *(unsigned char *)(v16 + 121) = v14;
          *(unsigned char *)(v16 + 120) = v15;
          Espresso::kernel_info_t::~kernel_info_t((Espresso::kernel_info_t *)&__str);
          ++v12;
          uint64_t v9 = *(void *)v8;
          v11 += 152;
          v10 += 224;
        }
        while (v12 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 5));
      }
      if (size) {
        nitro::nitro_function::nitro_function(size);
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_1927907E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = *(std::__shared_weak_count **)(v10 - 128);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (*(char *)(v10 - 97) < 0) {
    operator delete(*(void **)(v10 - 120));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::profiler_t::get_network_path(Espresso::profiler_t *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 10);
  if (!v2) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("expected network to be valid object in profiler");
  }
  if (*(char *)(v2 + 615) < 0)
  {
    long long v5 = *(const std::string::value_type **)(v2 + 592);
    std::string::size_type v6 = *(void *)(v2 + 600);
    std::string::__init_copy_ctor_external(a2, v5, v6);
  }
  else
  {
    uint64_t v3 = (long long *)(v2 + 592);
    long long v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void *__copy_helper_atomic_property__45(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *std::chrono::steady_clock::time_point result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_192790A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192790A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property__3455(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *std::chrono::steady_clock::time_point result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_192790C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_192790D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_192790DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void PTMutex::~PTMutex(PTMutex *this)
{
  PTMutex::~PTMutex(this);

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE322FF8;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

void Espresso::convert_float32_to_float16(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = *(id *)(a2 + 152);
  int v23 = a5;
  uint64_t v16 = (void *)[*(id *)(a1 + 144) newBufferWithBytes:&v23 length:4 options:0];
  uint64_t v17 = [*(id *)(a1 + 160) kernelForFunction:"convert_float32_to_float16" cacheString:0 withConstants:0];
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v15 setComputePipelineState:v17];
  [v15 setBuffer:v13 offset:a6 atIndex:0];
  [v15 setBuffer:v14 offset:a7 atIndex:1];
  [v15 setBuffer:v16 offset:0 atIndex:2];
  unint64_t v21 = ((unint64_t)(a5 - 1) >> 7) + 1;
  int64x2_t v22 = vdupq_n_s64(1uLL);
  long long v19 = xmmword_192DCA420;
  uint64_t v20 = 1;
  [v15 dispatchThreadgroups:&v21 threadsPerThreadgroup:&v19];
}

void sub_192791088(_Unwind_Exception *a1)
{
  __cxa_free_exception(v6);

  _Unwind_Resume(a1);
}

void Espresso::convert_float16_to_float32(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = *(id *)(a2 + 152);
  int v23 = a5;
  uint64_t v16 = (void *)[*(id *)(a1 + 144) newBufferWithBytes:&v23 length:4 options:0];
  uint64_t v17 = [*(id *)(a1 + 160) kernelForFunction:"convert_float16_to_float32" cacheString:0 withConstants:0];
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v15 setComputePipelineState:v17];
  [v15 setBuffer:v13 offset:a6 atIndex:0];
  [v15 setBuffer:v14 offset:a7 atIndex:1];
  [v15 setBuffer:v16 offset:0 atIndex:2];
  unint64_t v21 = ((unint64_t)(a5 - 1) >> 7) + 1;
  int64x2_t v22 = vdupq_n_s64(1uLL);
  long long v19 = xmmword_192DCA420;
  uint64_t v20 = 1;
  [v15 dispatchThreadgroups:&v21 threadsPerThreadgroup:&v19];
}

void sub_19279124C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v6);

  _Unwind_Resume(a1);
}

void Espresso::copy_float32_to_float32(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = *(id *)(a2 + 152);
  int v23 = a5;
  uint64_t v16 = (void *)[*(id *)(a1 + 144) newBufferWithBytes:&v23 length:4 options:0];
  uint64_t v17 = [*(id *)(a1 + 160) kernelForFunction:"copy_float32_to_float32" cacheString:0 withConstants:0];
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v15 setComputePipelineState:v17];
  [v15 setBuffer:v13 offset:a6 atIndex:0];
  [v15 setBuffer:v14 offset:a7 atIndex:1];
  [v15 setBuffer:v16 offset:0 atIndex:2];
  unint64_t v21 = ((unint64_t)(a5 - 1) >> 6) + 1;
  int64x2_t v22 = vdupq_n_s64(1uLL);
  long long v19 = xmmword_192DCA430;
  uint64_t v20 = 1;
  [v15 dispatchThreadgroups:&v21 threadsPerThreadgroup:&v19];
}

void sub_192791410(_Unwind_Exception *a1)
{
  __cxa_free_exception(v6);

  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphEngine::Kernels::activation_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)long long __p = *(_OWORD *)"\b";
  v17[0] = unk_192DD2BD4;
  v17[1] = xmmword_192DD2BE4;
  long long v18 = unk_192DD2BF4;
  uint64_t v19 = 0x900000001;
  std::unordered_set<Espresso::activation_mode>::unordered_set((uint64_t)v14, (int *)__p, 18);
  int v6 = *(_DWORD *)(a1 + 304);
  if (std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(v14[0], v14[1], v6))
  {
    if (v6 != 11
      || *(void *)(a3 + 8) - *(void *)a3 == 64
      && (Espresso::layer_nd_shape::layer_nd_shape((uint64_t)__p, *(const Espresso::layer_shape **)a3, 0),
          DWORD1(v17[0]) <= 4))
    {
      uint64_t v7 = 1;
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v7 = 0;
    goto LABEL_19;
  }
  long long v8 = *(int64x2_t **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  v13[0] = v8;
  v13[1] = (int64x2_t *)v7;
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    int v6 = *(_DWORD *)(a1 + 304);
  }
  std::to_string(&v11, v6);
  uint64_t v9 = std::string::insert(&v11, 0, "[Dispatch::MPSGraph::activation_kernel] Unsupported: activation mode ");
  std::string v12 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, (long long *)&v12, a3, 0);
  Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  id v15 = (void **)&v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v15);
  id v15 = (void **)v17 + 1;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SBYTE7(v17[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v7)
  {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v7);
    goto LABEL_18;
  }
LABEL_19:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v14);
  return v7;
}

void sub_192791638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t std::unordered_set<Espresso::activation_mode>::unordered_set(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__emplace_unique_key_args<Espresso::activation_mode,Espresso::activation_mode const&>(a1, *a2, *a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_19279170C(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::activation_kernel::~activation_kernel(Espresso::MPSGraphEngine::Kernels::activation_kernel *this)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::activation_kernel::~activation_kernel(Espresso::ANECompilerEngine::activation_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::activation_kernel *)((char *)this - 392);
  *((void *)this - 49) = &unk_1EE341C98;
  *(void *)this = &unk_1EE341E50;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_activation_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::activation_kernel *)((char *)this - 392);
  *((void *)this - 49) = &unk_1EE341C98;
  *(void *)this = &unk_1EE341E50;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::activation_kernel::compile(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::activation_kernel::compile_with_lut_polymorphism_option(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3, int a4)
{
  uint64_t v232 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v5 || (v193 = std::__shared_weak_count::lock(v5)) == 0 || (uint64_t v9 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v9 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v203[0] = a3[6];
  uint64_t v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9 + 136, (unsigned __int8 *)v203[0], (long long **)v203)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v203[0] = a3;
  int v192 = v10;
  std::string v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9 + 136, (unsigned __int8 *)a3, (long long **)v203);
  uint64_t v13 = *((void *)v11 + 5);
  std::string v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v189 = *((unsigned __int8 *)a2 + 552);
  uint64_t v211 = 0;
  v212 = 0;
  unint64_t v213 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v203, a3);
  id obj = (id)objc_opt_new();
  id v14 = v209;
  v209 = @"Neuron";

  id v15 = (char *)this + 392;
  int v16 = *(unsigned __int8 *)((*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392)
                           + 42);
  std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(&__str, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>(v9 + 472, (uint64_t)&__p, (uint64_t)&__str, &v202);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = @"Type";
  long long v18 = @"Swish";
  switch(*((_DWORD *)this + 76))
  {
    case 0:
      long long v18 = @"ReLU";
      goto LABEL_45;
    case 1:
      if (v16)
      {
        if (a4)
        {
          uint64_t v42 = (void (**)(Espresso::ANECompilerEngine::activation_kernel *, Espresso::ANECompilerEngine::compiler *, void **, __CFString *))(*(void *)this + 416);
          goto LABEL_40;
        }
        Espresso::ANECompilerEngine::activation_kernel::add_quantized_tanh_lut(this, a2, a3);
        goto LABEL_93;
      }
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v202.__r_.__value_.__l.__size_ == 1)
        {
          std::string v82 = (std::string *)v202.__r_.__value_.__r.__words[0];
LABEL_197:
          if (v82->__r_.__value_.__s.__data_[0] == 48)
          {
            long long v18 = @"Tanh";
            goto LABEL_45;
          }
        }
      }
      else if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) == 1)
      {
        std::string v82 = &v202;
        goto LABEL_197;
      }
      Espresso::ANECompilerEngine::ane_kernel::add_high_precision_tanh_units((Espresso::ANECompilerEngine::activation_kernel *)((char *)this + 392), a2, a3);
      goto LABEL_93;
    case 2:
      [obj setObject:@"LeakyReLU" forKeyedSubscript:@"Type"];
      _S0 = *((_DWORD *)this + 77);
      __asm { FCVT            H0, S0 }
      uint64_t v66 = [NSNumber numberWithShort:(__int16)_S0];
      [obj setObject:v66 forKeyedSubscript:@"ReluSlope"];

      uint64_t v17 = @"ReluOffset";
      long long v18 = (__CFString *)&unk_1EE3AEE48;
      goto LABEL_45;
    case 3:
      if (v16)
      {
        if (a4)
        {
          uint64_t v42 = (void (**)(Espresso::ANECompilerEngine::activation_kernel *, Espresso::ANECompilerEngine::compiler *, void **, __CFString *))(*(void *)this + 408);
LABEL_40:
          (*v42)(this, a2, a3, @"Type");
        }
        else
        {
          Espresso::ANECompilerEngine::activation_kernel::add_quantized_sigmoid_lut(this, a2, a3);
        }
        goto LABEL_93;
      }
      if ((SHIBYTE(v202.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) == 1)
        {
          int v81 = &v202;
          goto LABEL_192;
        }
LABEL_194:
        Espresso::ANECompilerEngine::ane_kernel::add_high_precision_sigmoid_units((Espresso::ANECompilerEngine::activation_kernel *)((char *)this + 392), a2, a3, 1);
        goto LABEL_93;
      }
      if (v202.__r_.__value_.__l.__size_ != 1) {
        goto LABEL_194;
      }
      int v81 = (std::string *)v202.__r_.__value_.__r.__words[0];
LABEL_192:
      if (v81->__r_.__value_.__s.__data_[0] != 48) {
        goto LABEL_194;
      }
      long long v18 = @"Sigmoid";
LABEL_45:
      [obj setObject:v18 forKeyedSubscript:v17];
LABEL_76:
      objc_storeStrong(v210, obj);
      long long v87 = v212;
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v89 = 0x8E38E38E38E38E39 * (((uint64_t)v212 - v211) >> 4);
        if (v89 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v90 = 0x1C71C71C71C71C72 * ((uint64_t)(v213 - v211) >> 4);
        if (v90 <= v89 + 1) {
          unint64_t v90 = v89 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v213 - v211) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v91 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v91 = v90;
        }
        uint64_t v216 = &v213;
        if (v91) {
          unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v91);
        }
        else {
          uint64_t v92 = 0;
        }
        __p.__r_.__value_.__r.__words[0] = v91;
        __p.__r_.__value_.__l.__size_ = v91 + 144 * v89;
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        unint64_t v215 = v91 + 144 * v92;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__p.__r_.__value_.__l.__size_, (uint64_t)v203);
        __p.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v211, &__p);
        long long v88 = v212;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)v203);
        long long v88 = v87 + 6;
      }
      v212 = v88;
      atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
      v195[0] = v13;
      v195[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::activation_kernel *>(this, a2, a3, (uint64_t)v195, &v211);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      nitro::nitro_function::nitro_function(v193);
      (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v15 + 32))((char *)this + 392, a2, &v211);
LABEL_93:
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v202.__r_.__value_.__l.__data_);
      }

      if (v207 < 0) {
        operator delete(v206[4]);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v204 < 0) {
        operator delete(v203[0]);
      }
      v203[0] = &v211;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v203);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v192) {
        nitro::nitro_function::nitro_function(v192);
      }
      nitro::nitro_function::nitro_function(v193);
      return;
    case 4:
      uint64_t v43 = *((void *)this + 76);
      if (!v43) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("PRELU params not set");
      }
      char v44 = *(float **)(v43 + 16);
      _S8 = *v44;
      unint64_t v46 = *(int *)(v43 + 8);
      if (v46 < 4) {
        goto LABEL_36;
      }
      vDSP_Length v47 = v46 >> 2;
      uint64_t v48 = v46 >> 2 <= 1 ? 1 : v46 >> 2;
      float v49 = 0.0;
      do
      {
        float v50 = *v44++;
        float v51 = vabds_f32(v50, _S8);
        if (v51 > v49) {
          float v49 = v51;
        }
        --v48;
      }
      while (v48);
      if (v49 < 0.000000001)
      {
LABEL_36:
        [obj setObject:@"LeakyReLU" forKeyedSubscript:@"Type"];
        __asm { FCVT            H0, S8 }
        double v57 = [NSNumber numberWithShort:_H0];
        [obj setObject:v57 forKeyedSubscript:@"ReluSlope"];

        [obj setObject:&unk_1EE3AEE48 forKeyedSubscript:@"ReluOffset"];
        goto LABEL_76;
      }
      long long v93 = objc_opt_new();
      [v93 setObject:@"ReLU" forKeyedSubscript:@"Type"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      objc_storeStrong(v224, v93);
      long long v94 = v223;
      v223 = @"Neuron";

      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      p_str = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 10);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(p_str, p_p, size);
      }
      strcpy((char *)p_str + size, "_tmp_relux");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      BOOL v98 = v212;
      if ((unint64_t)v212 >= v213)
      {
        int v99 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v211, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)&__p);
        int v99 = v98 + 6;
      }
      v212 = v99;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v221 < 0) {
        operator delete(v220);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }

      int v132 = objc_opt_new();
      int v133 = [NSNumber numberWithShort:4294949888];
      [v132 setObject:v133 forKeyedSubscript:@"ScaleScalar"];

      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      objc_storeStrong(v224, v132);
      int v134 = v223;
      v223 = @"GOC";

      int v135 = v212;
      if ((unint64_t)v212 >= v213)
      {
        signed int v136 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v211, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)&__p);
        signed int v136 = v135 + 6;
      }
      v212 = v136;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v137 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v137 = __p.__r_.__value_.__l.__size_;
      }
      v138 = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v137 + 7);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v138 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v137)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v139 = &__p;
        }
        else {
          unsigned int v139 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v138, v139, v137);
      }
      strcpy((char *)v138 + v137, "_tmp_mx");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v221 < 0) {
        operator delete(v220);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }

      long long v140 = objc_opt_new();
      [v140 setObject:@"ReLU" forKeyedSubscript:@"Type"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      objc_storeStrong(v224, v140);
      unint64_t v141 = v223;
      v223 = @"Neuron";

      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v142 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v142 = __p.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v142 + 7);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v143 = &__str;
      }
      else {
        id v143 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v142)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v144 = &__p;
        }
        else {
          uint64_t v144 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v143, v144, v142);
      }
      strcpy((char *)v143 + v142, "_tmp_mx");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v218, &__str, &v226, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v145 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v145 = __p.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v145 + 12);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v146 = &__str;
      }
      else {
        v146 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v145)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v147 = &__p;
        }
        else {
          uint64_t v147 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v146, v147, v145);
      }
      strcpy((char *)v146 + v145, "_tmp_relu_mx");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      long long v148 = v212;
      if ((unint64_t)v212 >= v213)
      {
        long long v149 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v211, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)&__p);
        long long v149 = v148 + 6;
      }
      v212 = v149;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v221 < 0) {
        operator delete(v220);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }

      unint64_t v150 = objc_opt_new();
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,Espresso::blob<unsigned char,1>::UnitializedBlobType,void>(&v198, *(_DWORD *)(*((void *)this + 76) + 8), 1, 1, 1);
      uint64_t v151 = v198;
      vDSP_vneg(*(const float **)(*((void *)this + 76) + 16), 1, *(float **)(v198 + 16), 1, v47);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,Espresso::blob<unsigned char,1>::UnitializedBlobType,void>(&v196, 2 * v47, 1, 1, 1);
      unint64_t v152 = *(int **)(v151 + 16);
      uint64_t v153 = v196;
      unint64_t v154 = *(_WORD **)(v196 + 16);
      vDSP_Length v155 = v47;
      do
      {
        int v156 = *v152++;
        _S0 = v156;
        __asm { FCVT            H0, S0 }
        *v154++ = _S0;
        --v155;
      }
      while (v155);
      int v158 = v197;
      if (v197) {
        atomic_fetch_add_explicit(&v197->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v159 = v199;
      uint64_t v198 = v153;
      uint64_t v199 = v158;
      if (v159) {
        nitro::nitro_function::nitro_function(v159);
      }
      if (v158) {
        atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v160 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v153 + 16), *(int *)(v153 + 8));
      if (v158) {
        nitro::nitro_function::nitro_function(v158);
      }
      size_t v161 = objc_opt_new();
      v162 = [NSNumber numberWithUnsignedLong:v47];
      [v161 setObject:v162 forKeyedSubscript:@"ScaleCount"];

      v163 = [NSNumber numberWithInt:v160];
      [v161 setObject:v163 forKeyedSubscript:@"ScaleOffset"];

      v164 = NSNumber;
      if (v189) {
        uint64_t weights_file_index = 0;
      }
      else {
      v166 = [v164 numberWithUnsignedLong:weights_file_index];
      }
      [v161 setObject:v166 forKeyedSubscript:@"ScaleIndex"];

      [v161 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
      [v150 setObject:v161 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      objc_storeStrong(v224, v150);
      long long v167 = v223;
      v223 = @"GOC";

      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v168 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v168 = __p.__r_.__value_.__l.__size_;
      }
      v169 = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v168 + 12);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v169 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v168)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v170 = &__p;
        }
        else {
          unint64_t v170 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v169, v170, v168);
      }
      strcpy((char *)v169 + v168, "_tmp_relu_mx");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v218, &__str, &v226, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v171 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v171 = __p.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v171 + 18);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v172 = &__str;
      }
      else {
        unint64_t v172 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v171)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v173 = &__p;
        }
        else {
          uint64_t v173 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v172, v173, v171);
      }
      strcpy((char *)v172 + v171, "_tmp_relu_mx_alpha");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      v174 = v212;
      if ((unint64_t)v212 >= v213)
      {
        v175 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v211, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)&__p);
        v175 = v174 + 6;
      }
      v212 = v175;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v221 < 0) {
        operator delete(v220);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }

      if (v158)
      {
        nitro::nitro_function::nitro_function(v158);
        nitro::nitro_function::nitro_function(v158);
      }

      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      unint64_t v176 = objc_opt_new();
      [v176 setObject:@"Add" forKeyedSubscript:@"Type"];
      unint64_t v177 = v223;
      v223 = @"ElementWise";

      objc_storeStrong(v224, v176);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v178 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v178 = __p.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v178 + 10);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v179 = &__str;
      }
      else {
        uint64_t v179 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v178)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v180 = &__p;
        }
        else {
          uint64_t v180 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v179, v180, v178);
      }
      strcpy((char *)v179 + v178, "_tmp_relux");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v181 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v181 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v182 = std::string::basic_string[abi:ne180100]((uint64_t)&v226, v181 + 18);
      if (SHIBYTE(v227) >= 0) {
        v183 = (void *)v182;
      }
      else {
        v183 = (void *)v226;
      }
      if (v181)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v184 = &__p;
        }
        else {
          uint64_t v184 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v183, v184, v181);
      }
      strcpy((char *)v183 + v181, "_tmp_relu_mx_alpha");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v218, &__str, &v228, 2uLL);
      for (uint64_t i = 0; i != -48; i -= 24)
      {
        if (*((char *)&v227 + i + 7) < 0) {
          operator delete(*(void **)((char *)&__str + i + 24));
        }
      }
      uint64_t v186 = v212;
      if ((unint64_t)v212 >= v213)
      {
        int v187 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v211, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)&__p);
        int v187 = v186 + 6;
      }
      v212 = v187;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v221 < 0) {
        operator delete(v220);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_93;
    case 5:
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      uint64_t v67 = objc_opt_new();
      objc_storeStrong(v224, v67);
      int32x4_t v68 = v223;
      v223 = @"GOC";

      _S0 = *((_DWORD *)this + 78);
      __asm { FCVT            H0, S0 }
      uint64_t v70 = [NSNumber numberWithShort:(__int16)_S0];
      [v67 setObject:v70 forKeyedSubscript:@"ScaleScalar"];

      uint64_t v71 = v212;
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v77 = 0x8E38E38E38E38E39 * (((uint64_t)v212 - v211) >> 4);
        if (v77 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v78 = 0x1C71C71C71C71C72 * ((uint64_t)(v213 - v211) >> 4);
        if (v78 <= v77 + 1) {
          unint64_t v78 = v77 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v213 - v211) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v79 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v79 = v78;
        }
        *((void *)&v226 + 1) = &v213;
        if (v79) {
          unint64_t v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v79);
        }
        else {
          uint64_t v80 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v79;
        __str.__r_.__value_.__l.__size_ = v79 + 144 * v77;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v226 = v79 + 144 * v80;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&__p);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v211, &__str);
        int v72 = v212;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)&__p);
        int v72 = v71 + 6;
      }
      v212 = v72;

      if (v221 < 0) {
        operator delete(v220);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      int v106 = objc_opt_new();
      objc_storeStrong(v224, v106);
      int v107 = v223;
      v223 = @"Neuron";

      [v106 setObject:@"Tanh" forKeyedSubscript:@"Type"];
      int v108 = v212;
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v110 = 0x8E38E38E38E38E39 * (((uint64_t)v212 - v211) >> 4);
        if (v110 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v111 = 0x1C71C71C71C71C72 * ((uint64_t)(v213 - v211) >> 4);
        if (v111 <= v110 + 1) {
          unint64_t v111 = v110 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v213 - v211) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v112 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v112 = v111;
        }
        *((void *)&v226 + 1) = &v213;
        if (v112) {
          unint64_t v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v112);
        }
        else {
          uint64_t v113 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v112;
        __str.__r_.__value_.__l.__size_ = v112 + 144 * v110;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v226 = v112 + 144 * v113;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&__p);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v211, &__str);
        v109 = v212;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)&__p);
        v109 = v108 + 6;
      }
      v212 = v109;

      if (v221 < 0) {
        operator delete(v220);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      uint64_t v122 = objc_opt_new();
      objc_storeStrong(v224, v122);
      long long v123 = v223;
      v223 = @"GOC";

      _S0 = *((_DWORD *)this + 77);
      __asm { FCVT            H0, S0 }
      int v125 = [NSNumber numberWithShort:(__int16)_S0];
      [v122 setObject:v125 forKeyedSubscript:@"ScaleScalar"];

      unint64_t v126 = v212;
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v128 = 0x8E38E38E38E38E39 * (((uint64_t)v212 - v211) >> 4);
        if (v128 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v129 = 0x1C71C71C71C71C72 * ((uint64_t)(v213 - v211) >> 4);
        if (v129 <= v128 + 1) {
          unint64_t v129 = v128 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v213 - v211) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v130 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v130 = v129;
        }
        *((void *)&v226 + 1) = &v213;
        if (v130) {
          unint64_t v130 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v130);
        }
        else {
          uint64_t v131 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v130;
        __str.__r_.__value_.__l.__size_ = v130 + 144 * v128;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v226 = v130 + 144 * v131;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&__p);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v211, &__str);
        id v127 = v212;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)&__p);
        id v127 = v126 + 6;
      }
      v212 = v127;

      if (v221 < 0) {
        operator delete(v220);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v218;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
      v201[0] = v13;
      v201[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::activation_kernel *>(this, a2, a3, (uint64_t)v201, &v211);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      nitro::nitro_function::nitro_function(v193);
      (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v15 + 32))((char *)this + 392, a2, &v211);
      goto LABEL_93;
    case 6:
      uint64_t v58 = v209;
      v209 = @"GOC";

      int v59 = objc_opt_new();
      [obj setObject:v59 forKeyedSubscript:@"BiasScaleGroupData"];
      _S0 = *((_DWORD *)this + 77);
      __asm { FCVT            H0, S0 }
      uint64_t v61 = [NSNumber numberWithShort:(__int16)_S0];
      [obj setObject:v61 forKeyedSubscript:@"ScaleScalar"];

      if (*((unsigned char *)a2 + 384))
      {
        float v62 = *((float *)this + 77);
        if (v62 == 0.0) {
          goto LABEL_74;
        }
        _S0 = *((float *)this + 78) / v62;
        __asm { FCVT            H0, S0 }
        unsigned __int8 v64 = [NSNumber numberWithShort:SLOWORD(_S0)];
        [obj setObject:v64 forKeyedSubscript:@"BiasScalar"];
      }
      else
      {
        _S0 = *((_DWORD *)this + 78);
        __asm { FCVT            H0, S0 }
        unsigned __int8 v64 = [NSNumber numberWithShort:(__int16)_S0];
        [obj setObject:v64 forKeyedSubscript:@"BiasScalar"];
      }

LABEL_74:
      [obj removeObjectForKey:@"BiasScaleGroupData"];
LABEL_75:

      goto LABEL_76;
    case 7:
      uint64_t v29 = v209;
      v209 = @"NeuronCustom";

      unint64_t v30 = Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)&__block_literal_global_3598, -2.5, 2.5, -2.6, 2.6, 0.0, 1.0);
      id v31 = v210[0];
      v210[0] = v30;

      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v203);
      goto LABEL_93;
    case 8:
      uint64_t v19 = v209;
      v209 = @"NeuronCustom";

      v200[0] = MEMORY[0x1E4F143A8];
      v200[1] = 3221225472;
      v200[2] = ___ZN8Espresso17ANECompilerEngine17activation_kernel36compile_with_lut_polymorphism_optionEPNS0_8compilerERKNS2_18layer_graph_info_tEb_block_invoke;
      v200[3] = &__block_descriptor_40_e8_f12__0f8l;
      v200[4] = this;
      v190 = (void *)MEMORY[0x192FF2250](v200);
      float v20 = *((float *)this + 77);
      uint64_t v21 = Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)v190, -1.0, 0.0, -1.0625, 65504.0, 0.0, 65504.0);
      uint64_t v22 = Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)v190, -5.0, -1.0625, -7.0, -1.0, -v20, 0.0);
      objc_storeStrong(v210, v21);
      int v23 = (void *)v22;
      uint64_t v24 = v212;
      if ((unint64_t)v212 >= v213)
      {
        unint64_t v73 = 0x8E38E38E38E38E39 * (((uint64_t)v212 - v211) >> 4);
        if (v73 + 1 > 0x1C71C71C71C71C7) {
          goto LABEL_342;
        }
        unint64_t v74 = 0x1C71C71C71C71C72 * ((uint64_t)(v213 - v211) >> 4);
        if (v74 <= v73 + 1) {
          unint64_t v74 = v73 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v213 - v211) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v75 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v75 = v74;
        }
        uint64_t v216 = &v213;
        if (v75) {
          unint64_t v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v75);
        }
        else {
          uint64_t v76 = 0;
        }
        __p.__r_.__value_.__r.__words[0] = v75;
        __p.__r_.__value_.__l.__size_ = v75 + 144 * v73;
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        unint64_t v215 = v75 + 144 * v76;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__p.__r_.__value_.__l.__size_, (uint64_t)v203);
        __p.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v211, &__p);
        BOOL v25 = v212;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)v203);
        BOOL v25 = v24 + 6;
      }
      v212 = v25;
      objc_storeStrong(v210, v23);
      unint64_t v100 = v212;
      if ((unint64_t)v212 < v213)
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)v203);
        unsigned int v101 = v100 + 6;
LABEL_150:
        v212 = v101;
        uint64_t v114 = objc_opt_new();
        [v114 setObject:@"Add" forKeyedSubscript:@"Type"];
        unint64_t v115 = v209;
        v209 = @"ElementWise";

        objc_storeStrong(v210, v114);
        int v116 = v212;
        if ((unint64_t)v212 >= v213)
        {
          unint64_t v118 = 0x8E38E38E38E38E39 * (((uint64_t)v212 - v211) >> 4);
          if (v118 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v119 = 0x1C71C71C71C71C72 * ((uint64_t)(v213 - v211) >> 4);
          if (v119 <= v118 + 1) {
            unint64_t v119 = v118 + 1;
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v213 - v211) >> 4) >= 0xE38E38E38E38E3) {
            unint64_t v120 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v120 = v119;
          }
          uint64_t v216 = &v213;
          if (v120) {
            unint64_t v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v120);
          }
          else {
            uint64_t v121 = 0;
          }
          __p.__r_.__value_.__r.__words[0] = v120;
          __p.__r_.__value_.__l.__size_ = v120 + 144 * v118;
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          unint64_t v215 = v120 + 144 * v121;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__p.__r_.__value_.__l.__size_, (uint64_t)v203);
          __p.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v211, &__p);
          unint64_t v117 = v212;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v212, (uint64_t)v203);
          unint64_t v117 = v116 + 6;
        }
        v212 = v117;
        (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *, uint64_t))(*(void *)v15 + 40))(v15, a2, &v211, 1);

        goto LABEL_93;
      }
      unint64_t v102 = 0x8E38E38E38E38E39 * (((uint64_t)v212 - v211) >> 4);
      if (v102 + 1 <= 0x1C71C71C71C71C7)
      {
        unint64_t v103 = 0x1C71C71C71C71C72 * ((uint64_t)(v213 - v211) >> 4);
        if (v103 <= v102 + 1) {
          unint64_t v103 = v102 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v213 - v211) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v104 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v104 = v103;
        }
        uint64_t v216 = &v213;
        if (v104) {
          unint64_t v104 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v104);
        }
        else {
          uint64_t v105 = 0;
        }
        __p.__r_.__value_.__r.__words[0] = v104;
        __p.__r_.__value_.__l.__size_ = v104 + 144 * v102;
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        unint64_t v215 = v104 + 144 * v105;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__p.__r_.__value_.__l.__size_, (uint64_t)v203);
        __p.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v211, &__p);
        unsigned int v101 = v212;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__p);
        goto LABEL_150;
      }
LABEL_342:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    case 0xE:
      [obj setObject:@"ClampedReLU" forKeyedSubscript:@"Type"];
      std::string v26 = v206[0];
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v9 + 360), v206[0]))
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        uint64_t v27 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 352), v26, (uint64_t)&std::piecewise_construct, (long long **)&__str);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v27 + 56);
        unint64_t v215 = 0;
        uint64_t v216 = 0;
        __p.__r_.__value_.__r.__words[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v27 + 9), *((void *)v27 + 10), (uint64_t)(*((void *)v27 + 10) - *((void *)v27 + 9)) >> 2);
        float v28 = *(float *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__r.__words[2])
        {
          unint64_t v215 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
      }
      else
      {
        float v28 = 1.0;
      }
      _S0 = v28 * *((float *)this + 77);
      __asm { FCVT            H0, S0 }
      unint64_t v84 = [NSNumber numberWithShort:SLOWORD(_S0)];
      [obj setObject:v84 forKeyedSubscript:@"ReluMin"];

      _S0 = v28 * *((float *)this + 78);
      __asm { FCVT            H0, S0 }
      int v59 = [NSNumber numberWithShort:SLOWORD(_S0)];
      [obj setObject:v59 forKeyedSubscript:@"ReluMax"];
      goto LABEL_75;
    case 0x13:
    case 0x15:
    case 0x16:
      long long v18 = @"GELU";
      goto LABEL_45;
    case 0x17:
      char v32 = v209;
      v209 = @"NeuronCustom";

      double v33 = [NSNumber numberWithShort:0];
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)@"XSatLeft";
      __p.__r_.__value_.__r.__words[0] = [NSNumber numberWithShort:4294951424];
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)@"YSatLeft";
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)@"SlopeLeft";
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v33;
      *(void *)&long long v226 = @"XLeft";
      v191 = (void *)__p.__r_.__value_.__r.__words[0];
      uint64_t v34 = [NSNumber numberWithShort:4294950912];
      unint64_t v215 = (unint64_t)v34;
      *((void *)&v226 + 1) = @"YIntercept";
      constant_array(33, v33);
      double v35 = (unint64_t *)objc_claimAutoreleasedReturnValue();
      uint64_t v216 = v35;
      std::string::size_type v227 = @"Slope";
      double v36 = constant_array(32, v33);
      v217 = v36;
      v218.__begin_ = (std::vector<std::string>::pointer)MEMORY[0x1E4F1CC28];
      *(void *)&long long v228 = @"AntiSymmetric";
      *((void *)&v228 + 1) = @"XRight";
      std::string::size_type v37 = [NSNumber numberWithShort:4294949888];
      v218.__end_ = v37;
      v218.__end_cap_.__value_ = (std::string *)v33;
      uint64_t v229 = @"XSatRight";
      v230 = @"YSatRight";
      uint64_t v38 = [NSNumber numberWithShort:15360];
      v231 = @"SlopeRight";
      v219 = v38;
      uint64_t v220 = v33;
      float v39 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&__p forKeys:&__str count:11];

      uint64_t v40 = (void *)[v39 mutableCopy];
      id v41 = v210[0];
      v210[0] = v40;

      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v203);
      goto LABEL_93;
    case 0x19:
      goto LABEL_45;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
  }
}

void sub_192793950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a56);
  if (a34 < 0) {
    operator delete(__p);
  }

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a35);
  a35 = &a53;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::activation_kernel::add_quantized_tanh_lut(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  long long v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v32[0] = a3[6];
  uint64_t v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v32[0], (long long **)v32)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v32[0] = a3;
  std::string v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v32)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v32, a3);
  std::string v12 = v39;
  float v39 = @"NeuronCustom";

  uint64_t v13 = (char *)this + 392;
  float v14 = *(float *)((*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392) + 44);
  float v15 = *(float *)((*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392) + 48);
  if (v15 == 1.0 && v14 == 1.0)
  {
    uint64_t v18 = *((void *)this + 57);
    uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 58);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v18)
    {
      uint64_t v19 = *(float **)(v18 + 16);
      float v15 = *v19;
      uint64_t v20 = *(int *)(v18 + 8);
      if (!v20) {
        goto LABEL_24;
      }
      while (v15 == *v19)
      {
        ++v19;
        if (!--v20)
        {
          if (v17) {
            nitro::nitro_function::nitro_function(v17);
          }
          *(unsigned char *)((*(uint64_t (**)(char *))(*(void *)v13 + 104))((char *)this + 392) + 40) = 1;
          goto LABEL_26;
        }
      }
    }
    float v15 = 1.0;
LABEL_24:
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
LABEL_26:
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN8Espresso17ANECompilerEngine17activation_kernel22add_quantized_tanh_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke;
  v29[3] = &__block_descriptor_40_e8_f12__0f8l;
  float v30 = v14;
  float v31 = v15;
  uint64_t v21 = (void *)MEMORY[0x192FF2250](v29);
  uint64_t v22 = Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)v21, 0.0 / v14, 4.0 / v14, 0.0 / v14, 4.0 / v14, v15 * 0.0, v15);
  objc_storeStrong(&v40, v22);
  int v23 = v42;
  if ((unint64_t)v42 >= v43)
  {
    unint64_t v25 = 0x8E38E38E38E38E39 * (((uint64_t)v42 - v41) >> 4);
    if (v25 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v26 = 0x1C71C71C71C71C72 * ((uint64_t)(v43 - v41) >> 4);
    if (v26 <= v25 + 1) {
      unint64_t v26 = v25 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v43 - v41) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v27 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v27 = v26;
    }
    uint64_t v48 = &v43;
    if (v27) {
      unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v27);
    }
    else {
      uint64_t v28 = 0;
    }
    char v44 = (void **)v27;
    uint64_t v45 = (std::string *)(v27 + 144 * v25);
    unint64_t v46 = v45;
    unint64_t v47 = v27 + 144 * v28;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v45, (uint64_t)v32);
    v46 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v41, &v44);
    uint64_t v24 = v42;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v44);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v42, (uint64_t)v32);
    uint64_t v24 = v23 + 6;
  }
  uint64_t v42 = v24;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v13 + 32))(v13, a2, &v41);

  if (v37 < 0) {
    operator delete(__p);
  }
  char v44 = (void **)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
  char v44 = (void **)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  v32[0] = &v41;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192794324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v20 - 136);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a15);
  a15 = (void **)(v20 - 160);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a15);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  nitro::nitro_function::nitro_function(v15);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::activation_kernel *>(void *a1, unsigned char *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v115);
  id v122 = 0;
  id v123 = 0;
  uint64_t v124 = 0x100000000;
  uint64_t v10 = a1[57];
  uint64_t v9 = (std::__shared_weak_count *)a1[58];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10 && !*(unsigned char *)((*(uint64_t (**)(void))(a1[49] + 104))() + 40))
  {
    float v11 = *(float *)(*(void *)a4 + 112);
    v108[0] = v10;
    v108[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v12 = (std::__shared_weak_count *)a1[60];
    v107[0] = a1[59];
    v107[1] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v108, v107, (uint64_t)&v109, v11);
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    uint64_t v13 = *(unsigned int *)(v10 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v105, 2 * v13, 1, 1, 1);
    uint64_t v14 = (int)v13;
    uint64_t v15 = a1[59];
    int v16 = v13;
    if (v15) {
      int v16 = *(_DWORD *)(v15 + 8);
    }
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v13);
      uint64_t v71 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      int v72 = v13 - 1;
      if ((int)v13 >= 1)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          float v74 = *(float *)(*(void *)(v10 + 16) + i * 4);
          *(float *)&int v75 = ldexp(1.0, -v113) * v74;
          v71[i] = v75;
        }
      }
      if (v13)
      {
        uint64_t v76 = *(_WORD **)(v105 + 16);
        do
        {
          int v77 = *v71++;
          _S0 = v77;
          __asm { FCVT            H0, S0 }
          *v76++ = _S0;
          --v14;
        }
        while (v14);
      }
      if (a1[59])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v16);
        uint64_t v80 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v16);
        uint64_t v101 = *(void *)buf;
        int v81 = *(int **)(v80 + 16);
        if (v16 >= 1)
        {
          for (uint64_t j = 0; j != v16; ++j)
          {
            if (v72 >= (int)j) {
              int v83 = j;
            }
            else {
              int v83 = v72;
            }
            float v84 = *(float *)(*(void *)(v111 + 16) + 4 * j) * *(float *)(*(void *)(v109 + 16) + 4 * v83);
            uint64_t v85 = (float *)&v81[j];
            *uint64_t v85 = v84;
            unsigned int v86 = v113;
            unsigned int v87 = v114;
            float v88 = ldexp(1.0, v114 - v113) * v84;
            *uint64_t v85 = v88;
            float v91 = ldexp(1.0, v86 - v87) * v88;
            if (v91 < -127.0 || v91 > 255.0)
            {
              long long v93 = Espresso::espresso_os_log_subsystem(v89, v90);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
              {
                double v94 = *(float *)&v81[j];
                *(_DWORD *)std::string buf = 134218752;
                *(double *)&buf[4] = v91;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v114;
                __int16 v126 = 1024;
                int v127 = v113;
                __int16 v128 = 2048;
                double v129 = v94;
                _os_log_error_impl(&dword_1920CB000, v93, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v16)
        {
          uint64_t v95 = v16;
          int v96 = *(_WORD **)(v101 + 16);
          do
          {
            int v97 = *v81++;
            _S0 = v97;
            __asm { FCVT            H0, S0 }
            *v96++ = _S0;
            --v95;
          }
          while (v95);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v17 = v114;
    uint64_t v18 = v105;
    if (v13)
    {
      uint64_t v19 = *(int **)(v109 + 16);
      uint64_t v20 = *(_WORD **)(v105 + 16);
      do
      {
        int v21 = *v19++;
        _S0 = v21;
        __asm { FCVT            H0, S0 }
        *v20++ = _S0;
        --v14;
      }
      while (v14);
    }
    unsigned int v99 = v17;
    if (v15)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v16, 1, 1, 1);
      uint64_t v27 = *(void *)buf;
      unint64_t v102 = *(std::__shared_weak_count **)&buf[8];
      if (v16)
      {
        uint64_t v28 = v16;
        uint64_t v29 = *(_WORD **)(*(void *)buf + 16);
        float v30 = *(int **)(v111 + 16);
        do
        {
          int v31 = *v30++;
          _S0 = v31;
          __asm { FCVT            H0, S0 }
          *v29++ = _S0;
          --v28;
        }
        while (v28);
      }
    }
    else
    {
      unint64_t v102 = 0;
      uint64_t v27 = 0;
    }
    int v100 = a2[552];
    char v33 = v106;
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v18 + 16), *(int *)(v18 + 8));
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    id obj = objc_opt_new();
    if (a5 && a2[121])
    {
      id v35 = *(id *)(*a5 + 128);

      id obj = v35;
    }
    double v36 = objc_opt_new();
    char v37 = [NSNumber numberWithInt:v13];
    [v36 setObject:v37 forKeyedSubscript:@"ScaleCount"];

    id v38 = [NSNumber numberWithInt:v34];
    [v36 setObject:v38 forKeyedSubscript:@"ScaleOffset"];

    float v39 = NSNumber;
    if (v100) {
      uint64_t weights_file_index = 0;
    }
    else {
    uint64_t v41 = [v39 numberWithUnsignedLong:weights_file_index];
    }
    [v36 setObject:v41 forKeyedSubscript:@"ScaleIndex"];

    [v36 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    uint64_t v42 = [NSNumber numberWithInt:v113];
    [obj setObject:v42 forKeyedSubscript:@"ScaleShift"];

    if (a1[59])
    {
      if (v102) {
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v43 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v27 + 16), *(int *)(v27 + 8));
      if (v102) {
        nitro::nitro_function::nitro_function(v102);
      }
      char v44 = [NSNumber numberWithInt:*(unsigned int *)(a1[59] + 8)];
      [v36 setObject:v44 forKeyedSubscript:@"BiasCount"];

      uint64_t v45 = [NSNumber numberWithInt:v43];
      [v36 setObject:v45 forKeyedSubscript:@"BiasOffset"];

      unint64_t v46 = NSNumber;
      if (v100) {
        uint64_t v47 = 0;
      }
      else {
      uint64_t v48 = [v46 numberWithUnsignedLong:v47];
      }
      [v36 setObject:v48 forKeyedSubscript:@"BiasIndex"];

      [v36 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      float v49 = [NSNumber numberWithInt:v99];
      [obj setObject:v49 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v36 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    uint64_t v50 = a5[1];
    if (v50 == *a5) {
      goto LABEL_68;
    }
    float v51 = (const void **)(v50 - 144);
    uint64_t v52 = *(unsigned __int8 *)(v50 - 121);
    char v53 = v52;
    std::string::size_type v54 = *(void *)(v50 - 136);
    if ((v52 & 0x80u) == 0) {
      uint64_t v55 = *(unsigned __int8 *)(v50 - 121);
    }
    else {
      uint64_t v55 = *(void *)(v50 - 136);
    }
    uint64_t v56 = HIBYTE(v127);
    if (v127 < 0) {
      uint64_t v56 = *(void *)&buf[8];
    }
    if (v55 != v56) {
      goto LABEL_62;
    }
    if (v127 >= 0) {
      double v57 = buf;
    }
    else {
      double v57 = *(unsigned __int8 **)buf;
    }
    if ((char)v52 < 0)
    {
      int v59 = (const std::string::value_type *)*v51;
      if (memcmp(*v51, v57, *(void *)(v50 - 136))) {
        goto LABEL_65;
      }
    }
    else if ((_BYTE)v52)
    {
      uint64_t v58 = (unsigned __int8 *)(v50 - 144);
      while (*v58 == *v57)
      {
        ++v58;
        ++v57;
        if (!--v52) {
          goto LABEL_61;
        }
      }
      goto LABEL_62;
    }
LABEL_61:
    std::string::append((std::string *)(v50 - 144), "__@pre_scale_bias");
    char v53 = *(unsigned char *)(v50 - 121);
LABEL_62:
    if ((v53 & 0x80) == 0)
    {
      long long v60 = *(_OWORD *)v51;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v50 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v60;
      goto LABEL_66;
    }
    int v59 = *(const std::string::value_type **)(v50 - 144);
    std::string::size_type v54 = *(void *)(v50 - 136);
LABEL_65:
    std::string::__init_copy_ctor_external(&__str, v59, v54);
LABEL_66:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v130, &__str, &v137, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_68:
    uint64_t v61 = v134;
    int v134 = @"GOC";

    objc_storeStrong(&v135, obj);
    if (a2[121]) {
      BOOL v62 = a5 != 0;
    }
    else {
      BOOL v62 = 0;
    }
    if (!v62)
    {
      if (a5)
      {
        unint64_t v63 = a5[2];
        unint64_t v64 = a5[1];
        if (v64 >= v63)
        {
          unint64_t v66 = 0x8E38E38E38E38E39 * ((uint64_t)(v64 - *a5) >> 4);
          if (v66 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v67 = 0x8E38E38E38E38E39 * ((uint64_t)(v63 - *a5) >> 4);
          uint64_t v68 = 2 * v67;
          if (2 * v67 <= v66 + 1) {
            uint64_t v68 = v66 + 1;
          }
          if (v67 >= 0xE38E38E38E38E3) {
            unint64_t v69 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v69 = v68;
          }
          *((void *)&v137 + 1) = a5 + 2;
          if (v69) {
            unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          __str.__r_.__value_.__r.__words[0] = v69;
          __str.__r_.__value_.__l.__size_ = v69 + 144 * v66;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(void *)&long long v137 = v69 + 144 * v70;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          uint64_t v65 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          uint64_t v65 = v64 + 144;
          a5[1] = v65;
        }
        a5[1] = v65;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v132 < 0) {
      operator delete(__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v127) < 0) {
      operator delete(*(void **)buf);
    }

    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    if (v106) {
      nitro::nitro_function::nitro_function(v106);
    }
    if (v112) {
      nitro::nitro_function::nitro_function(v112);
    }
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }

  if (v120 < 0) {
    operator delete(v119);
  }
  *(void *)std::string buf = &v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v116 < 0) {
    operator delete(v115);
  }
}

void sub_192794E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  float v30 = *(std::__shared_weak_count **)(v28 - 152);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)&a22);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a27);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::activation_kernel::add_quantized_sigmoid_lut(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  long long v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v32[0] = a3[6];
  uint64_t v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v32[0], (long long **)v32)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v32[0] = a3;
  float v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v32)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v32, a3);
  std::string v12 = v39;
  float v39 = @"NeuronCustom";

  uint64_t v13 = (char *)this + 392;
  float v14 = *(float *)((*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392) + 44);
  float v15 = *(float *)((*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392) + 48);
  if (v15 == 1.0 && v14 == 1.0)
  {
    uint64_t v18 = *((void *)this + 57);
    unsigned int v17 = (std::__shared_weak_count *)*((void *)this + 58);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v18)
    {
      uint64_t v19 = *(float **)(v18 + 16);
      float v15 = *v19;
      uint64_t v20 = *(int *)(v18 + 8);
      if (!v20) {
        goto LABEL_24;
      }
      while (v15 == *v19)
      {
        ++v19;
        if (!--v20)
        {
          if (v17) {
            nitro::nitro_function::nitro_function(v17);
          }
          *(unsigned char *)((*(uint64_t (**)(char *))(*(void *)v13 + 104))((char *)this + 392) + 40) = 1;
          goto LABEL_26;
        }
      }
    }
    float v15 = 1.0;
LABEL_24:
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
LABEL_26:
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN8Espresso17ANECompilerEngine17activation_kernel25add_quantized_sigmoid_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke;
  v29[3] = &__block_descriptor_40_e8_f12__0f8l;
  float v30 = v14;
  float v31 = v15;
  int v21 = (void *)MEMORY[0x192FF2250](v29);
  uint64_t v22 = Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)v21, -4.75 / v14, 4.75 / v14, -5.0 / v14, 5.0 / v14, v15 * 0.0, v15);
  objc_storeStrong(&v40, v22);
  int v23 = v42;
  if ((unint64_t)v42 >= v43)
  {
    unint64_t v25 = 0x8E38E38E38E38E39 * (((uint64_t)v42 - v41) >> 4);
    if (v25 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v26 = 0x1C71C71C71C71C72 * ((uint64_t)(v43 - v41) >> 4);
    if (v26 <= v25 + 1) {
      unint64_t v26 = v25 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v43 - v41) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v27 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v27 = v26;
    }
    uint64_t v48 = &v43;
    if (v27) {
      unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v27);
    }
    else {
      uint64_t v28 = 0;
    }
    char v44 = (void **)v27;
    uint64_t v45 = (std::string *)(v27 + 144 * v25);
    unint64_t v46 = v45;
    unint64_t v47 = v27 + 144 * v28;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v45, (uint64_t)v32);
    v46 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v41, &v44);
    uint64_t v24 = v42;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v44);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v42, (uint64_t)v32);
    uint64_t v24 = v23 + 6;
  }
  uint64_t v42 = v24;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v13 + 32))(v13, a2, &v41);

  if (v37 < 0) {
    operator delete(__p);
  }
  char v44 = (void **)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
  char v44 = (void **)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  v32[0] = &v41;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192795474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v20 - 136);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a15);
  a15 = (void **)(v20 - 160);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a15);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  nitro::nitro_function::nitro_function(v15);
  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine17activation_kernel36compile_with_lut_polymorphism_optionEPNS0_8compilerERKNS2_18layer_graph_info_tEb_block_invoke(uint64_t a1, float result)
{
  if (result <= 0.0)
  {
    double v2 = *(float *)(*(void *)(a1 + 32) + 308);
    return (expf(result) + -1.0) * v2;
  }
  return result;
}

id constant_array(uint64_t a1, NSNumber *a2)
{
  uint64_t v3 = a2;
  long long v4 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:a1];
  uint64_t v5 = 0;
  do
    [v4 setObject:v3 atIndexedSubscript:v5++];
  while (a1 != v5);

  return v4;
}

void sub_1927955E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,Espresso::blob<unsigned char,1>::UnitializedBlobType,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389A70;
  *((void *)v10 + 3) = &unk_1EE36BF70;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  std::chrono::steady_clock::time_point result = Espresso::kern_alloc_uninitialized((Espresso *)(a3 * (uint64_t)a2 * a4 * a5));
  *((void *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_1927956CC(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine17activation_kernel36compile_with_lut_polymorphism_optionEPNS0_8compilerERKNS2_18layer_graph_info_tEb_block_invoke_2(float a1)
{
  float result = (float)(a1 * 0.2) + 0.5;
  if (result < 0.0) {
    float result = 0.0;
  }
  if (result > 1.0) {
    return 1.0;
  }
  return result;
}

float ___ZN8Espresso17ANECompilerEngine17activation_kernel25add_quantized_sigmoid_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(uint64_t a1, float a2)
{
  return *(float *)(a1 + 36) * (float)(1.0 / (float)(expf(-(float)(*(float *)(a1 + 32) * a2)) + 1.0));
}

float ___ZN8Espresso17ANECompilerEngine17activation_kernel22add_quantized_tanh_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(uint64_t a1, float a2)
{
  float v4 = *(float *)(a1 + 32);
  double v5 = expf(v4 * a2);
  float v6 = expf(-(float)(v4 * a2));
  return (v5 - v6) / (v5 + v6) * *(float *)(a1 + 36);
}

void Espresso::ANECompilerEngine::activation_kernel::compile(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

uint64_t Espresso::ANECompilerEngine::activation_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 12) {
      goto LABEL_10;
    }
    float v4 = (uint64_t *)*a2;
  }
  else
  {
    float v4 = a2;
    if (v3 != 12) {
      goto LABEL_10;
    }
  }
  uint64_t v5 = *v4;
  int v6 = *((_DWORD *)v4 + 2);
  if (v5 == 0x705F736D61726170 && v6 == 1970038130) {
    return 1;
  }
LABEL_10:
  if (Espresso::generic_activation_kernel::supports_weight_key(a1, a2)) {
    return 1;
  }

  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

void Espresso::ANECompilerEngine::activation_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5)
{
  int v9 = *(char *)(a3 + 23);
  if (v9 < 0)
  {
    if (*(void *)(a3 + 8) != 12)
    {
LABEL_10:
      Espresso::generic_activation_kernel::__set_weight_raw_blob((char *)a1, a2, (uint64_t *)a3, a4, a5);
      Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 392), (uint64_t *)a3, a4, a5);
      return;
    }
    uint64_t v10 = *(void *)a3;
  }
  else
  {
    uint64_t v10 = a3;
    if (v9 != 12) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *(void *)v10;
  int v12 = *(_DWORD *)(v10 + 8);
  if (v11 != 0x705F736D61726170 || v12 != 1970038130) {
    goto LABEL_10;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v56, a5, 1, 1, 1);
  std::string::size_type v14 = v56.__r_.__value_.__r.__words[0];
  float v15 = *(std::__shared_weak_count **)(a1 + 616);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
  if (v15)
  {
    nitro::nitro_function::nitro_function(v15);
    std::string::size_type v16 = *(void *)(a1 + 608);
  }
  else
  {
    std::string::size_type v16 = v14;
  }
  if (*(_DWORD *)(v16 + 8) != a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v19 = a5;
    uint64_t v20 = exception;
    std::to_string(&v49, v19);
    int v21 = std::string::insert(&v49, 0, "Unexpected size s=");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    int v23 = std::string::append(&v50, "/blob=");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v48, *(int *)(*(void *)(a1 + 608) + 8));
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v25 = &v48;
    }
    else {
      unint64_t v25 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v48.__r_.__value_.__l.__size_;
    }
    unint64_t v27 = std::string::append(&v51, (const std::string::value_type *)v25, size);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v46, " @ ");
    if ((v47 & 0x80u) == 0) {
      uint64_t v29 = (const std::string::value_type *)v46;
    }
    else {
      uint64_t v29 = (const std::string::value_type *)v46[0];
    }
    if ((v47 & 0x80u) == 0) {
      std::string::size_type v30 = v47;
    }
    else {
      std::string::size_type v30 = v46[1];
    }
    float v31 = std::string::append(&v52, v29, v30);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    char v33 = std::string::append(&v53, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANECompilerEngine/Layers/ANECompilerActivation.mm");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v44, ":");
    if ((v45 & 0x80u) == 0) {
      uint64_t v35 = (const std::string::value_type *)v44;
    }
    else {
      uint64_t v35 = (const std::string::value_type *)v44[0];
    }
    if ((v45 & 0x80u) == 0) {
      std::string::size_type v36 = v45;
    }
    else {
      std::string::size_type v36 = v44[1];
    }
    char v37 = std::string::append(&v54, v35, v36);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v43, 106);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v39 = &v43;
    }
    else {
      float v39 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = v43.__r_.__value_.__l.__size_;
    }
    uint64_t v41 = std::string::append(&v55, (const std::string::value_type *)v39, v40);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v20, &v56);
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v17 = *(void **)(v16 + 16);

  memcpy(v17, a4, a5);
}

void sub_192795C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::ANECompilerEngine::activation_kernel::~activation_kernel(Espresso::ANECompilerEngine::activation_kernel *this)
{
  *(void *)this = &unk_1EE341C98;
  double v2 = (Espresso::ANECompilerEngine::activation_kernel *)((char *)this + 392);
  *((void *)this + 49) = &unk_1EE341E50;
  int v3 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE341C98;
  double v2 = (Espresso::ANECompilerEngine::activation_kernel *)((char *)this + 392);
  *((void *)this + 49) = &unk_1EE341E50;
  int v3 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_sigmoid_units(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3, int a4)
{
}

void Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_sigmoid_units(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3, int a4)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v5 || (v9 = std::__shared_weak_count::lock(v5)) == 0 || (uint64_t v10 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v10 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v11 = v10 + 136;
  v64.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  int v12 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 136, (unsigned __int8 *)v64.__r_.__value_.__l.__data_, (long long **)&v64)+ 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  std::string v50 = v12;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)a3, (long long **)&v64);
  uint64_t v15 = *((void *)v13 + 5);
  std::string::size_type v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v72 = 0;
  unint64_t v73 = 0;
  unint64_t v74 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v64.__r_.__value_.__l.__data_, (id *)a3);
  std::string::append(&v64, "_@pre_bias");
  std::string::size_type v16 = v70;
  uint64_t v70 = @"NeuronCustom";
  unsigned int v17 = ;
  objc_storeStrong(&v71, v17);
  uint64_t v18 = v73;
  if ((unint64_t)v73 >= v74)
  {
    unint64_t v20 = 0x8E38E38E38E38E39 * (((uint64_t)v73 - v72) >> 4);
    if (v20 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0x1C71C71C71C71C72 * ((uint64_t)(v74 - v72) >> 4);
    if (v21 <= v20 + 1) {
      unint64_t v21 = v20 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v74 - v72) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v22 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v22 = v21;
    }
    v55[1] = &v74;
    if (v22) {
      unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v22);
    }
    else {
      uint64_t v23 = 0;
    }
    std::string v52 = (void *)v22;
    std::string v53 = (std::string *)(v22 + 144 * v20);
    std::string v54 = v53;
    v55[0] = v22 + 144 * v23;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v53, (uint64_t)&v64);
    std::string v54 = v53 + 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v72, &v52);
    unint64_t v19 = v73;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v52);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v73, (uint64_t)&v64);
    unint64_t v19 = v18 + 6;
  }
  uint64_t v49 = v15;
  unint64_t v73 = v19;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v52, (id *)a3);
  long long v24 = v56;
  for (uint64_t i = v57; i != v24; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i[-1].__r_.__value_.__l.__data_);
    }
  }
  double v57 = v24;
  if ((unint64_t)v24 >= v58)
  {
    unint64_t v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v56, (uint64_t)&v64);
  }
  else
  {
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v24, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v26 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
      v24->__r_.__value_.__r.__words[2] = v64.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    unint64_t v27 = v24 + 1;
  }
  double v57 = v27;
  long long v28 = objc_opt_new();
  objc_storeStrong(&v63, v28);
  uint64_t v29 = v62;
  BOOL v62 = @"GOC";

  std::string::size_type v30 = (char *)this + 392;
  uint64_t v31 = *((void *)this + 57);
  if (v31)
  {
    if (a4)
    {
      uint64_t v32 = *(int *)(v31 + 8);
      if (v32)
      {
        char v33 = *(float **)(v31 + 16);
        _S8 = *v33;
        while (_S8 == *v33)
        {
          ++v33;
          if (!--v32)
          {
            *(unsigned char *)((*(uint64_t (**)(char *))(*(void *)v30 + 104))((char *)this + 392) + 40) = 1;
            __asm { FCVT            H0, S8 }
            std::string::size_type v40 = [NSNumber numberWithShort:_H0];
            [v28 setObject:v40 forKeyedSubscript:@"ScaleScalar"];

            _S0 = _S8 * 0.5;
            __asm { FCVT            H0, S0 }
            long long v42 = [NSNumber numberWithShort:SLOWORD(_S0)];
            [v28 setObject:v42 forKeyedSubscript:@"BiasScalar"];
            goto LABEL_40;
          }
        }
      }
    }
  }
  long long v42 = objc_msgSend(NSNumber, "numberWithShort:", 14336, v49);
  [v28 setObject:v42 forKeyedSubscript:@"BiasScalar"];
LABEL_40:

  std::string v43 = v73;
  if ((unint64_t)v73 >= v74)
  {
    unint64_t v45 = 0x8E38E38E38E38E39 * (((uint64_t)v73 - v72) >> 4);
    if (v45 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v46 = 0x1C71C71C71C71C72 * ((uint64_t)(v74 - v72) >> 4);
    if (v46 <= v45 + 1) {
      unint64_t v46 = v45 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v74 - v72) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v47 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v47 = v46;
    }
    unint64_t v79 = &v74;
    if (v47) {
      unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v47);
    }
    else {
      uint64_t v48 = 0;
    }
    int v75 = (char **)v47;
    uint64_t v76 = (std::string *)(v47 + 144 * v45);
    int v77 = v76;
    unint64_t v78 = v47 + 144 * v48;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v76, (uint64_t)&v52);
    v77 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v72, &v75);
    char v44 = v73;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v75);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v73, (uint64_t)&v52);
    char v44 = v43 + 6;
  }
  unint64_t v73 = v44;

  if (v60 < 0) {
    operator delete(__p);
  }
  int v75 = (char **)&v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  int v75 = (char **)v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  v51[0] = v49;
  v51[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(this, a2, (id *)a3, (uint64_t)v51, &v72);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  nitro::nitro_function::nitro_function(v9);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v30 + 32))((char *)this + 392, a2, &v72);

  if (v68 < 0) {
    operator delete(v67);
  }
  std::string v52 = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  std::string v52 = &v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  nitro::nitro_function::nitro_function(v9);
}

void sub_192796588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a14);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a32);
  a32 = (void **)(v36 - 168);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a32);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(void *a1, unsigned char *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v115);
  id v122 = 0;
  id v123 = 0;
  uint64_t v124 = 0x100000000;
  uint64_t v10 = a1[57];
  int v9 = (std::__shared_weak_count *)a1[58];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10 && !*(unsigned char *)((*(uint64_t (**)(void))(a1[49] + 104))() + 40))
  {
    float v11 = *(float *)(*(void *)a4 + 112);
    v108[0] = v10;
    v108[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v12 = (std::__shared_weak_count *)a1[60];
    v107[0] = a1[59];
    v107[1] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v108, v107, (uint64_t)&v109, v11);
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    uint64_t v13 = *(unsigned int *)(v10 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v105, 2 * v13, 1, 1, 1);
    uint64_t v14 = (int)v13;
    uint64_t v15 = a1[59];
    int v16 = v13;
    if (v15) {
      int v16 = *(_DWORD *)(v15 + 8);
    }
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v13);
      id v71 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      int v72 = v13 - 1;
      if ((int)v13 >= 1)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          float v74 = *(float *)(*(void *)(v10 + 16) + i * 4);
          *(float *)&int v75 = ldexp(1.0, -v113) * v74;
          v71[i] = v75;
        }
      }
      if (v13)
      {
        uint64_t v76 = *(_WORD **)(v105 + 16);
        do
        {
          int v77 = *v71++;
          _S0 = v77;
          __asm { FCVT            H0, S0 }
          *v76++ = _S0;
          --v14;
        }
        while (v14);
      }
      if (a1[59])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v16);
        uint64_t v80 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v16);
        uint64_t v101 = *(void *)buf;
        int v81 = *(int **)(v80 + 16);
        if (v16 >= 1)
        {
          for (uint64_t j = 0; j != v16; ++j)
          {
            if (v72 >= (int)j) {
              int v83 = j;
            }
            else {
              int v83 = v72;
            }
            float v84 = *(float *)(*(void *)(v111 + 16) + 4 * j) * *(float *)(*(void *)(v109 + 16) + 4 * v83);
            uint64_t v85 = (float *)&v81[j];
            *uint64_t v85 = v84;
            unsigned int v86 = v113;
            unsigned int v87 = v114;
            float v88 = ldexp(1.0, v114 - v113) * v84;
            *uint64_t v85 = v88;
            float v91 = ldexp(1.0, v86 - v87) * v88;
            if (v91 < -127.0 || v91 > 255.0)
            {
              long long v93 = Espresso::espresso_os_log_subsystem(v89, v90);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
              {
                double v94 = *(float *)&v81[j];
                *(_DWORD *)std::string buf = 134218752;
                *(double *)&buf[4] = v91;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v114;
                __int16 v126 = 1024;
                int v127 = v113;
                __int16 v128 = 2048;
                double v129 = v94;
                _os_log_error_impl(&dword_1920CB000, v93, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v16)
        {
          uint64_t v95 = v16;
          int v96 = *(_WORD **)(v101 + 16);
          do
          {
            int v97 = *v81++;
            _S0 = v97;
            __asm { FCVT            H0, S0 }
            *v96++ = _S0;
            --v95;
          }
          while (v95);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v17 = v114;
    uint64_t v18 = v105;
    if (v13)
    {
      unint64_t v19 = *(int **)(v109 + 16);
      unint64_t v20 = *(_WORD **)(v105 + 16);
      do
      {
        int v21 = *v19++;
        _S0 = v21;
        __asm { FCVT            H0, S0 }
        *v20++ = _S0;
        --v14;
      }
      while (v14);
    }
    unsigned int v99 = v17;
    if (v15)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v16, 1, 1, 1);
      uint64_t v27 = *(void *)buf;
      unint64_t v102 = *(std::__shared_weak_count **)&buf[8];
      if (v16)
      {
        uint64_t v28 = v16;
        uint64_t v29 = *(_WORD **)(*(void *)buf + 16);
        std::string::size_type v30 = *(int **)(v111 + 16);
        do
        {
          int v31 = *v30++;
          _S0 = v31;
          __asm { FCVT            H0, S0 }
          *v29++ = _S0;
          --v28;
        }
        while (v28);
      }
    }
    else
    {
      unint64_t v102 = 0;
      uint64_t v27 = 0;
    }
    int v100 = a2[552];
    char v33 = v106;
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v18 + 16), *(int *)(v18 + 8));
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    id obj = objc_opt_new();
    if (a5 && a2[121])
    {
      id v35 = *(id *)(*a5 + 128);

      id obj = v35;
    }
    uint64_t v36 = objc_opt_new();
    char v37 = [NSNumber numberWithInt:v13];
    [v36 setObject:v37 forKeyedSubscript:@"ScaleCount"];

    long long v38 = [NSNumber numberWithInt:v34];
    [v36 setObject:v38 forKeyedSubscript:@"ScaleOffset"];

    float v39 = NSNumber;
    if (v100) {
      uint64_t weights_file_index = 0;
    }
    else {
    uint64_t v41 = [v39 numberWithUnsignedLong:weights_file_index];
    }
    [v36 setObject:v41 forKeyedSubscript:@"ScaleIndex"];

    [v36 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    long long v42 = [NSNumber numberWithInt:v113];
    [obj setObject:v42 forKeyedSubscript:@"ScaleShift"];

    if (a1[59])
    {
      if (v102) {
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v43 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v27 + 16), *(int *)(v27 + 8));
      if (v102) {
        nitro::nitro_function::nitro_function(v102);
      }
      char v44 = [NSNumber numberWithInt:*(unsigned int *)(a1[59] + 8)];
      [v36 setObject:v44 forKeyedSubscript:@"BiasCount"];

      unint64_t v45 = [NSNumber numberWithInt:v43];
      [v36 setObject:v45 forKeyedSubscript:@"BiasOffset"];

      unint64_t v46 = NSNumber;
      if (v100) {
        uint64_t v47 = 0;
      }
      else {
      uint64_t v48 = [v46 numberWithUnsignedLong:v47];
      }
      [v36 setObject:v48 forKeyedSubscript:@"BiasIndex"];

      [v36 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v49 = [NSNumber numberWithInt:v99];
      [obj setObject:v49 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v36 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    uint64_t v50 = a5[1];
    if (v50 == *a5) {
      goto LABEL_68;
    }
    std::string v51 = (const void **)(v50 - 144);
    uint64_t v52 = *(unsigned __int8 *)(v50 - 121);
    char v53 = v52;
    std::string::size_type v54 = *(void *)(v50 - 136);
    if ((v52 & 0x80u) == 0) {
      uint64_t v55 = *(unsigned __int8 *)(v50 - 121);
    }
    else {
      uint64_t v55 = *(void *)(v50 - 136);
    }
    uint64_t v56 = HIBYTE(v127);
    if (v127 < 0) {
      uint64_t v56 = *(void *)&buf[8];
    }
    if (v55 != v56) {
      goto LABEL_62;
    }
    if (v127 >= 0) {
      double v57 = buf;
    }
    else {
      double v57 = *(unsigned __int8 **)buf;
    }
    if ((char)v52 < 0)
    {
      int v59 = (const std::string::value_type *)*v51;
      if (memcmp(*v51, v57, *(void *)(v50 - 136))) {
        goto LABEL_65;
      }
    }
    else if ((_BYTE)v52)
    {
      unint64_t v58 = (unsigned __int8 *)(v50 - 144);
      while (*v58 == *v57)
      {
        ++v58;
        ++v57;
        if (!--v52) {
          goto LABEL_61;
        }
      }
      goto LABEL_62;
    }
LABEL_61:
    std::string::append((std::string *)(v50 - 144), "__@pre_scale_bias");
    char v53 = *(unsigned char *)(v50 - 121);
LABEL_62:
    if ((v53 & 0x80) == 0)
    {
      long long v60 = *(_OWORD *)v51;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v50 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v60;
      goto LABEL_66;
    }
    int v59 = *(const std::string::value_type **)(v50 - 144);
    std::string::size_type v54 = *(void *)(v50 - 136);
LABEL_65:
    std::string::__init_copy_ctor_external(&__str, v59, v54);
LABEL_66:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v130, &__str, &v137, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_68:
    id v61 = v134;
    int v134 = @"GOC";

    objc_storeStrong(&v135, obj);
    if (a2[121]) {
      BOOL v62 = a5 != 0;
    }
    else {
      BOOL v62 = 0;
    }
    if (!v62)
    {
      if (a5)
      {
        unint64_t v63 = a5[2];
        unint64_t v64 = a5[1];
        if (v64 >= v63)
        {
          unint64_t v66 = 0x8E38E38E38E38E39 * ((uint64_t)(v64 - *a5) >> 4);
          if (v66 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v67 = 0x8E38E38E38E38E39 * ((uint64_t)(v63 - *a5) >> 4);
          uint64_t v68 = 2 * v67;
          if (2 * v67 <= v66 + 1) {
            uint64_t v68 = v66 + 1;
          }
          if (v67 >= 0xE38E38E38E38E3) {
            unint64_t v69 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v69 = v68;
          }
          *((void *)&v137 + 1) = a5 + 2;
          if (v69) {
            unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          __str.__r_.__value_.__r.__words[0] = v69;
          __str.__r_.__value_.__l.__size_ = v69 + 144 * v66;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(void *)&long long v137 = v69 + 144 * v70;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          uint64_t v65 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          uint64_t v65 = v64 + 144;
          a5[1] = v65;
        }
        a5[1] = v65;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v132 < 0) {
      operator delete(__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v127) < 0) {
      operator delete(*(void **)buf);
    }

    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    if (v106) {
      nitro::nitro_function::nitro_function(v106);
    }
    if (v112) {
      nitro::nitro_function::nitro_function(v112);
    }
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }

  if (v120 < 0) {
    operator delete(v119);
  }
  *(void *)std::string buf = &v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v116 < 0) {
    operator delete(v115);
  }
}

void sub_1927970F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  std::string::size_type v30 = *(std::__shared_weak_count **)(v28 - 152);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)&a22);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a27);
  _Unwind_Resume(a1);
}

float anonymous namespace'::high_precision_sigmoid_function(_anonymous_namespace_ *this, float a2)
{
  return 1.0 / (expf(-a2) + 1.0) + -0.5;
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_tanh_units(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_tanh_units(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  float v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v39[0] = a3[6];
  uint64_t v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v39[0], (long long **)v39)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v39[0] = a3;
  uint64_t v34 = v10;
  float v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v39);
  uint64_t v12 = *((void *)v11 + 5);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v39, a3);
  uint64_t v14 = v46;
  unint64_t v46 = @"NeuronCustom";

  uint64_t v15 = (char *)this + 392;
  float v16 = *(float *)((*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392) + 44);
  float v17 = *(float *)((*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392) + 48);
  if (v17 == 1.0 && v16 == 1.0)
  {
    uint64_t v20 = *((void *)this + 57);
    unint64_t v19 = (std::__shared_weak_count *)*((void *)this + 58);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v20)
    {
      int v21 = *(float **)(v20 + 16);
      float v17 = *v21;
      uint64_t v22 = *(int *)(v20 + 8);
      if (!v22) {
        goto LABEL_24;
      }
      while (v17 == *v21)
      {
        ++v21;
        if (!--v22)
        {
          if (v19) {
            nitro::nitro_function::nitro_function(v19);
          }
          *(unsigned char *)((*(uint64_t (**)(char *))(*(void *)v15 + 104))((char *)this + 392) + 40) = 1;
          goto LABEL_26;
        }
      }
    }
    float v17 = 1.0;
LABEL_24:
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
LABEL_26:
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  v36[2] = ___ZN8Espresso17ANECompilerEngine21mix_activation_kernel29add_high_precision_tanh_unitsEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke;
  v36[3] = &__block_descriptor_40_e8_f12__0f8l;
  float v37 = v16;
  float v38 = v17;
  uint64_t v23 = (void *)MEMORY[0x192FF2250](v36);
  float v24 = 0.0 / v16;
  float v25 = 4.0 / v16;
  LODWORD(v26) = vcvtms_s32_f32(log2f(32.0 / v25));
  uint64_t v27 = Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(v26, 0, 1, 1, v23, v24, v25, v17 * 0.0, v17, v17, v17 * 0.0, v17 * 0.0, v17);
  objc_storeStrong(&v47, v27);
  uint64_t v28 = v49;
  if ((unint64_t)v49 >= v50)
  {
    unint64_t v30 = 0x8E38E38E38E38E39 * (((uint64_t)v49 - v48) >> 4);
    if (v30 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = 0x1C71C71C71C71C72 * ((uint64_t)(v50 - v48) >> 4);
    if (v31 <= v30 + 1) {
      unint64_t v31 = v30 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v50 - v48) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v32 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v32 = v31;
    }
    uint64_t v55 = &v50;
    if (v32) {
      unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v32);
    }
    else {
      uint64_t v33 = 0;
    }
    std::string v51 = (void **)v32;
    uint64_t v52 = (std::string *)(v32 + 144 * v30);
    char v53 = v52;
    unint64_t v54 = v32 + 144 * v33;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v52, (uint64_t)v39);
    v53 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v48, &v51);
    uint64_t v29 = v49;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v51);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v49, (uint64_t)v39);
    uint64_t v29 = v28 + 6;
  }
  uint64_t v49 = v29;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  v35[0] = v12;
  v35[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(this, a2, a3, (uint64_t)v35, &v48);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  nitro::nitro_function::nitro_function(v7);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v15 + 32))((char *)this + 392, a2, &v48);

  if (v44 < 0) {
    operator delete(__p);
  }
  std::string v51 = (void **)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  std::string v51 = (void **)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  v39[0] = &v48;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192797808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v22 - 160);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a18);
  a18 = (void **)(v22 - 184);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  nitro::nitro_function::nitro_function(v18);
  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine21mix_activation_kernel29add_high_precision_tanh_unitsEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(uint64_t a1, float a2)
{
  float v4 = *(float *)(a1 + 32);
  double v5 = expf(v4 * a2);
  float v6 = expf(-(float)(v4 * a2));
  return (v5 - v6) / (v5 + v6) * *(float *)(a1 + 36);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_activation_kernel::~mix_activation_kernel(Espresso::ANECompilerEngine::mix_activation_kernel *this)
{
  double v2 = (Espresso::ANECompilerEngine::mix_activation_kernel *)((char *)this - 392);
  *((void *)this - 49) = &unk_1EE344D88;
  *(void *)this = &unk_1EE344F50;
  int v3 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)double v2 = &unk_1EE341C98;
  *(void *)this = &unk_1EE341E50;
  float v4 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_activation_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  double v2 = (Espresso::ANECompilerEngine::mix_activation_kernel *)((char *)this - 392);
  *((void *)this - 49) = &unk_1EE344D88;
  *(void *)this = &unk_1EE344F50;
  int v3 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)double v2 = &unk_1EE341C98;
  *(void *)this = &unk_1EE341E50;
  float v4 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_activation_kernel::compile(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_activation_kernel::compile(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  float v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v47[0] = a3[6];
  uint64_t v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v47[0], (long long **)v47)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v47[0] = a3;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)v47);
  float v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  uint64_t v41 = *((void *)v10 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  uint64_t v12 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v12, v13))
  {
    Espresso::ANECompilerEngine::activation_kernel::compile_with_lut_polymorphism_option(this, a2, a3, 0);
    goto LABEL_70;
  }
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v47, a3);
  id obj = (id)objc_opt_new();
  uint64_t v14 = v53;
  char v53 = @"Neuron";

  std::string::basic_string[abi:ne180100]<0>(&v58, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)&v58, (uint64_t)__p, &v46);
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  uint64_t v15 = (*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392);
  unsigned int v16 = *((_DWORD *)this + 76);
  switch(v16)
  {
    case 1u:
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v46.__r_.__value_.__l.__size_ == 1)
        {
          float v17 = (std::string *)v46.__r_.__value_.__r.__words[0];
          goto LABEL_34;
        }
      }
      else if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) == 1)
      {
        float v17 = &v46;
LABEL_34:
        if (!*(unsigned char *)(v15 + 42) && v17->__r_.__value_.__s.__data_[0] == 48)
        {
          unint64_t v31 = @"Tanh";
          goto LABEL_79;
        }
      }
      float v25 = (void (**)(Espresso::ANECompilerEngine::mix_activation_kernel *, Espresso::ANECompilerEngine::compiler *, void **))(*(void *)this + 424);
      goto LABEL_38;
    case 2u:
    case 4u:
    case 5u:
    case 6u:
      goto LABEL_43;
    case 3u:
      if (!*(unsigned char *)(v15 + 42))
      {
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v46.__r_.__value_.__l.__size_ != 1) {
            goto LABEL_80;
          }
          unint64_t v30 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) != 1) {
            goto LABEL_80;
          }
          unint64_t v30 = &v46;
        }
        if (v30->__r_.__value_.__s.__data_[0] == 48)
        {
          unint64_t v31 = @"SigmoidHighPrecision";
LABEL_79:
          objc_msgSend(obj, "setObject:forKeyedSubscript:", v31, @"Type", v41);
LABEL_42:
          unsigned int v16 = *((_DWORD *)this + 76);
LABEL_43:
          if (v16 <= 0x17 && ((1 << v16) & 0x80018A) != 0)
          {
            objc_storeStrong(&v54, obj);
            id v35 = v56;
            if ((unint64_t)v56 >= v57)
            {
              unint64_t v37 = 0x8E38E38E38E38E39 * (((uint64_t)v56 - v55) >> 4);
              if (v37 + 1 > 0x1C71C71C71C71C7) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v38 = 0x1C71C71C71C71C72 * ((uint64_t)(v57 - v55) >> 4);
              if (v38 <= v37 + 1) {
                unint64_t v38 = v37 + 1;
              }
              if (0x8E38E38E38E38E39 * ((uint64_t)(v57 - v55) >> 4) >= 0xE38E38E38E38E3) {
                unint64_t v39 = 0x1C71C71C71C71C7;
              }
              else {
                unint64_t v39 = v38;
              }
              id v61 = &v57;
              if (v39) {
                unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v39);
              }
              else {
                uint64_t v40 = 0;
              }
              *(void *)&long long v58 = v39;
              *((void *)&v58 + 1) = v39 + 144 * v37;
              int v59 = (char *)*((void *)&v58 + 1);
              long long v60 = (char *)(v39 + 144 * v40);
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*((std::string **)&v58 + 1), (uint64_t)v47);
              v59 += 144;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v55, &v58);
              uint64_t v36 = v56;
              std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v58);
            }
            else
            {
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v56, (uint64_t)v47);
              uint64_t v36 = v35 + 6;
            }
            uint64_t v56 = v36;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            v43[0] = v41;
            v43[1] = v11;
            if (v11) {
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(this, a2, a3, (uint64_t)v43, &v55);
            if (v11) {
              nitro::nitro_function::nitro_function(v11);
            }
            nitro::nitro_function::nitro_function(v7);
            (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 49)
                                                                                               + 32))((char *)this + 392, a2, &v55);
          }
          else
          {
            Espresso::ANECompilerEngine::activation_kernel::compile_with_lut_polymorphism_option(this, a2, a3, 1);
          }
          goto LABEL_63;
        }
LABEL_80:
        (*(void (**)(Espresso::ANECompilerEngine::mix_activation_kernel *, Espresso::ANECompilerEngine::compiler *, void **, uint64_t))(*(void *)this + 432))(this, a2, a3, 1);
        goto LABEL_63;
      }
      float v25 = (void (**)(Espresso::ANECompilerEngine::mix_activation_kernel *, Espresso::ANECompilerEngine::compiler *, void **))(*(void *)this + 408);
LABEL_38:
      (*v25)(this, a2, a3);
LABEL_63:
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }

      if (v51 < 0) {
        operator delete(v50[4]);
      }
      *(void *)&long long v58 = v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      *(void *)&long long v58 = &v49;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      if (v48 < 0) {
        operator delete(v47[0]);
      }
      v47[0] = &v55;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
LABEL_70:

      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      nitro::nitro_function::nitro_function(v7);
      return;
    case 7u:
      uint64_t v26 = v53;
      char v53 = @"NeuronCustom";
      unint64_t v19 = ;
      [obj addEntriesFromDictionary:v19];
      goto LABEL_41;
    case 8u:
      [obj setObject:@"ELU" forKeyedSubscript:@"Type"];
      _S0 = *((_DWORD *)this + 77);
      __asm { FCVT            H0, S0 }
      unint64_t v19 = [NSNumber numberWithShort:(__int16)_S0];
      [obj setObject:v19 forKeyedSubscript:@"EluAlpha"];
      goto LABEL_41;
    default:
      if (v16 == 14)
      {
        [obj setObject:@"ClampedReLU" forKeyedSubscript:@"Type"];
        uint64_t v27 = v50[0];
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v8 + 360), v50[0]))
        {
          __p[0] = v27;
          uint64_t v28 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 352), v27, (uint64_t)&std::piecewise_construct, (long long **)__p);
          long long v58 = *(_OWORD *)(v28 + 56);
          long long v60 = 0;
          id v61 = 0;
          int v59 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v59, *((const void **)v28 + 9), *((void *)v28 + 10), (uint64_t)(*((void *)v28 + 10) - *((void *)v28 + 9)) >> 2);
          float v29 = *(float *)&v58;
          if (v59)
          {
            long long v60 = v59;
            operator delete(v59);
          }
        }
        else
        {
          float v29 = 1.0;
        }
        _S0 = v29 * *((float *)this + 77);
        __asm { FCVT            H0, S0 }
        uint64_t v33 = objc_msgSend(NSNumber, "numberWithShort:", SLOWORD(_S0), v41);
        [obj setObject:v33 forKeyedSubscript:@"ReluMin"];

        _S0 = v29 * *((float *)this + 78);
        __asm { FCVT            H0, S0 }
        unint64_t v19 = [NSNumber numberWithShort:SLOWORD(_S0)];
        [obj setObject:v19 forKeyedSubscript:@"ReluMax"];
      }
      else
      {
        if (v16 != 23) {
          goto LABEL_43;
        }
        uint64_t v18 = v53;
        char v53 = @"NeuronCustom";
        unint64_t v19 = ;
        [obj addEntriesFromDictionary:v19];
      }
LABEL_41:

      goto LABEL_42;
  }
}

void sub_19279830C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a25);
  a25 = v29 - 176;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);

  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  nitro::nitro_function::nitro_function(v25);
  _Unwind_Resume(a1);
}

float anonymous namespace'::step_activation_function(_anonymous_namespace_ *this, float a2)
{
  BOOL v2 = a2 < 0.0;
  float result = 0.0;
  if (!v2) {
    return 1.0;
  }
  return result;
}

float anonymous namespace'::hard_sigmoid_activation_function(_anonymous_namespace_ *this, float a2)
{
  float result = (float)(a2 * 0.2) + 0.5;
  if (result < 0.0) {
    float result = 0.0;
  }
  if (result > 1.0) {
    return 1.0;
  }
  return result;
}

void Espresso::ANECompilerEngine::mix_activation_kernel::add_quantized_sigmoid_lut(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  float v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v39[0] = a3[6];
  uint64_t v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v39[0], (long long **)v39)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v39[0] = a3;
  uint64_t v34 = v10;
  float v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v39);
  uint64_t v12 = *((void *)v11 + 5);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v39, a3);
  uint64_t v14 = v46;
  std::string v46 = @"NeuronCustom";

  uint64_t v15 = (char *)this + 392;
  float v16 = *(float *)((*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392) + 44);
  float v17 = *(float *)((*(uint64_t (**)(char *))(*((void *)this + 49) + 104))((char *)this + 392) + 48);
  if (v17 == 1.0 && v16 == 1.0)
  {
    uint64_t v20 = *((void *)this + 57);
    unint64_t v19 = (std::__shared_weak_count *)*((void *)this + 58);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v20)
    {
      int v21 = *(float **)(v20 + 16);
      float v17 = *v21;
      uint64_t v22 = *(int *)(v20 + 8);
      if (!v22) {
        goto LABEL_24;
      }
      while (v17 == *v21)
      {
        ++v21;
        if (!--v22)
        {
          if (v19) {
            nitro::nitro_function::nitro_function(v19);
          }
          *(unsigned char *)((*(uint64_t (**)(char *))(*(void *)v15 + 104))((char *)this + 392) + 40) = 1;
          goto LABEL_26;
        }
      }
    }
    float v17 = 1.0;
LABEL_24:
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
LABEL_26:
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  v36[2] = ___ZN8Espresso17ANECompilerEngine21mix_activation_kernel25add_quantized_sigmoid_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke;
  v36[3] = &__block_descriptor_40_e8_f12__0f8l;
  float v37 = v16;
  float v38 = v17;
  uint64_t v23 = (void *)MEMORY[0x192FF2250](v36);
  float v24 = -5.0 / v16;
  float v25 = 5.0 / v16;
  LODWORD(v26) = vcvtms_s32_f32(log2f(16.0 / v25));
  uint64_t v27 = Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(v26, 1, 0, 0, v23, v24, v25, v17 * 0.0, v17, v17 * 0.0113, v17 * 0.0113, v17 * 0.063186, v17 * 0.9368);
  objc_storeStrong(&v47, v27);
  uint64_t v28 = v49;
  if ((unint64_t)v49 >= v50)
  {
    unint64_t v30 = 0x8E38E38E38E38E39 * (((uint64_t)v49 - v48) >> 4);
    if (v30 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = 0x1C71C71C71C71C72 * ((uint64_t)(v50 - v48) >> 4);
    if (v31 <= v30 + 1) {
      unint64_t v31 = v30 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v50 - v48) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v32 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v32 = v31;
    }
    uint64_t v55 = &v50;
    if (v32) {
      unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v32);
    }
    else {
      uint64_t v33 = 0;
    }
    char v51 = (void **)v32;
    id v52 = (std::string *)(v32 + 144 * v30);
    char v53 = v52;
    unint64_t v54 = v32 + 144 * v33;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v52, (uint64_t)v39);
    v53 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v48, &v51);
    uint64_t v29 = v49;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v51);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v49, (uint64_t)v39);
    uint64_t v29 = v28 + 6;
  }
  uint64_t v49 = v29;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  v35[0] = v12;
  v35[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(this, a2, a3, (uint64_t)v35, &v48);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  nitro::nitro_function::nitro_function(v7);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v15 + 32))((char *)this + 392, a2, &v48);

  if (v44 < 0) {
    operator delete(__p);
  }
  char v51 = (void **)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  char v51 = (void **)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  v39[0] = &v48;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_1927989B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v22 - 160);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a18);
  a18 = (void **)(v22 - 184);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  nitro::nitro_function::nitro_function(v18);
  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine21mix_activation_kernel25add_quantized_sigmoid_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(uint64_t a1, float a2)
{
  return *(float *)(a1 + 36) * (float)(1.0 / (float)(expf(-(float)(*(float *)(a1 + 32) * a2)) + 1.0));
}

void Espresso::ANECompilerEngine::mix_activation_kernel::~mix_activation_kernel(Espresso::ANECompilerEngine::mix_activation_kernel *this)
{
  *(void *)this = &unk_1EE344D88;
  BOOL v2 = (Espresso::ANECompilerEngine::mix_activation_kernel *)((char *)this + 392);
  *((void *)this + 49) = &unk_1EE344F50;
  int v3 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE341C98;
  *((void *)this + 49) = &unk_1EE341E50;
  float v4 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE344D88;
  BOOL v2 = (Espresso::ANECompilerEngine::mix_activation_kernel *)((char *)this + 392);
  *((void *)this + 49) = &unk_1EE344F50;
  int v3 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE341C98;
  *((void *)this + 49) = &unk_1EE341E50;
  float v4 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

void Espresso::zephyr::es_function_t::pprint(Espresso::zephyr::es_function_t *a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  Espresso::zephyr::es_function_t::dump_to_net((Espresso::zephyr::es_function_t *)&v3, a1);
  v5[3] = 0;
  Espresso::net::pprint(v3, a2, (uint64_t)v5);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v5);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_192798CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    nitro::nitro_function::nitro_function(a4);
  }
  _Unwind_Resume(a1);
}

void Espresso::zephyr::es_function_t::dump_to_net(Espresso::zephyr::es_function_t *this, Espresso::zephyr::es_function_t *a2)
{
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
  int v7 = 0;
  Espresso::create_context(&v7, &v8);
  uint64_t v4 = *(void *)this;
  long long v5 = v8;
  long long v8 = 0uLL;
  float v6 = *(std::__shared_weak_count **)(v4 + 24);
  *(_OWORD *)(v4 + 16) = v5;
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
    if (*((void *)&v8 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  Espresso::zephyr::es_function_t::lower_to_net(a2, (Espresso::net *)v4);
}

void sub_192798D84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::zephyr::es_function_t::lower_to_net(Espresso::zephyr::es_function_t *this, Espresso::net *a2)
{
  int v81 = (uint64_t *)((char *)a2 + 32);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)a2 + 4);
  std::string v82 = (char *)a2 + 96;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear((uint64_t)a2 + 96);
  int v83 = (char *)a2 + 56;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear((uint64_t)a2 + 56);
  int v77 = (float *)((char *)a2 + 888);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear((void *)a2 + 111);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear((uint64_t)a2 + 136);
  uint64_t v76 = (uint64_t **)((char *)a2 + 184);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)a2 + 184, *((char **)a2 + 24));
  *((void *)a2 + 23) = (char *)a2 + 192;
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 25) = 0;
  Espresso::zephyr::function_t::get_referenced_objects(this, &v94);
  int v75 = this;
  uint64_t v4 = (long long *)*((void *)this + 18);
  if (!v4) {
    goto LABEL_22;
  }
  do
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v4 + 1);
    long long v5 = v95;
    if (!v95) {
      goto LABEL_8;
    }
    float v6 = v88;
    while (1)
    {
      unint64_t v7 = v5[4];
      if ((unint64_t)v88 >= v7) {
        break;
      }
LABEL_7:
      long long v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_8;
      }
    }
    if (v7 < (unint64_t)v88)
    {
      ++v5;
      goto LABEL_7;
    }
    long long v8 = *(char **)(*((void *)v88 + 1) + 8);
    if (v8)
    {
      p_p = &__p;
      uint64_t v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v76, &__p, (long long **)&p_p);
      long long v10 = *(_OWORD *)v8;
      long long v11 = *((_OWORD *)v8 + 1);
      *((void *)v9 + 11) = *((void *)v8 + 4);
      *(_OWORD *)(v9 + 72) = v11;
      *(_OWORD *)(v9 + 56) = v10;
      if (v9 + 56 != v8) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9 + 96, *((char **)v8 + 5), *((void *)v8 + 6), (uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 2);
      }
    }
    uint64_t v12 = *((void *)v6 + 1);
    uint64_t v13 = *(_OWORD **)(v12 + 40);
    if (v13)
    {
      p_p = &__p;
      uint64_t v14 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 41, &__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
      *(_OWORD *)(v14 + 56) = *v13;
      long long v15 = v13[1];
      long long v16 = v13[2];
      long long v17 = v13[3];
      *(_OWORD *)(v14 + 116) = *(_OWORD *)((char *)v13 + 60);
      *(_OWORD *)(v14 + 104) = v17;
      *(_OWORD *)(v14 + 88) = v16;
      *(_OWORD *)(v14 + 72) = v15;
      uint64_t v12 = *((void *)v6 + 1);
    }
    uint64_t v18 = *(void *)(v12 + 24);
    if (v18)
    {
      p_p = &__p;
      unint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, &__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
      *(_OWORD *)(v19 + 56) = *(_OWORD *)v18;
      if (v19 + 56 != (char *)v18) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v19 + 72, *(char **)(v18 + 16), *(void *)(v18 + 24), (uint64_t)(*(void *)(v18 + 24) - *(void *)(v18 + 16)) >> 2);
      }
    }
LABEL_8:
    if ((void)v89) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v89);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v4 = *(long long **)v4;
  }
  while (v4);
LABEL_22:
  float v84 = a2;
  uint64_t v20 = (char *)*((void *)this + 9);
  unint64_t v78 = (char *)this + 64;
  int v21 = (float *)((char *)a2 + 888);
  if (v20 != (char *)this + 64)
  {
    uint64_t v80 = (char *)a2 + 48;
    uint64_t v22 = "basic_block_head";
    do
    {
      unint64_t v23 = (uint64_t)(*((void *)v84 + 5) - *((void *)v84 + 4)) >> 4;
      unint64_t v93 = v23;
      uint64_t v24 = *((void *)v20 + 2);
      uint64_t v25 = *(void *)(v24 + 120);
      uint64_t v85 = v24 + 112;
      if (v25 != v24 + 112)
      {
        unint64_t v79 = v20;
        uint64_t v26 = 0;
        uint64_t v27 = v84;
        do
        {
          uint64_t v28 = *(const std::string **)(v25 + 16);
          uint64_t v29 = (char *)operator new(0xF8uLL);
          *((void *)v29 + 1) = 0;
          *(void *)uint64_t v29 = &unk_1EE389DF0;
          *((void *)v29 + 2) = 0;
          *((void *)v29 + 3) = &unk_1EE36C758;
          *(_OWORD *)(v29 + 56) = 0u;
          *(_OWORD *)(v29 + 72) = 0u;
          *(_OWORD *)(v29 + 88) = 0u;
          *(_OWORD *)(v29 + 104) = 0u;
          *(_OWORD *)(v29 + 120) = 0u;
          *(_OWORD *)(v29 + 136) = 0u;
          *(_OWORD *)(v29 + 152) = 0u;
          *(_OWORD *)(v29 + 161) = 0u;
          *(_OWORD *)(v29 + 40) = 0u;
          *((_OWORD *)v29 + 13) = 0u;
          *((_OWORD *)v29 + 14) = 0u;
          *((void *)v29 + 30) = 0;
          std::string::operator=((std::string *)(v29 + 40), v28 + 6);
          std::string::size_type size = v28->__r_.__value_.__l.__size_;
          uint64_t v32 = *(void *)(size + 8);
          uint64_t v31 = *(void *)(size + 16);
          if (v31) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v33 = (std::__shared_weak_count *)*((void *)v29 + 12);
          *((void *)v29 + 11) = v32;
          *((void *)v29 + 12) = v31;
          if (v33)
          {
            nitro::nitro_function::nitro_function(v33);
            uint64_t v32 = *((void *)v29 + 11);
          }
          if (v32)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, v22);
            std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((void *)(v32 + 240), (unsigned __int8 *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            uint64_t v34 = (*(uint64_t (**)(void))(**((void **)v29 + 11) + 272))(*((void *)v29 + 11));
            MEMORY[0x192FF0F50](v29 + 64, v34);
            id v35 = *(unsigned int (****)(void))(*(void *)(*((void *)v29 + 11) + 8) + 8);
            *((void *)v29 + 4) = (**v35)(v35);
            uint64_t v37 = *((void *)v27 + 4);
            uint64_t v36 = (void *)*((void *)v27 + 5);
            uint64_t v38 = ((uint64_t)v36 - v37) >> 4;
            uint64_t v92 = v38;
            unint64_t v39 = *((void *)v27 + 6);
            if ((unint64_t)v36 >= v39)
            {
              unint64_t v41 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 60) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v42 = v39 - v37;
              if (v42 >> 3 > v41) {
                unint64_t v41 = v42 >> 3;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              *(void *)&long long v89 = v80;
              char v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v43);
              *(void *)&long long v45 = v29 + 24;
              *((void *)&v45 + 1) = v29;
              std::string v46 = &v44[16 * v38];
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
              float v88 = (long long *)&v44[16 * v47];
              *(_OWORD *)std::string v46 = v45;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 1, 1uLL, memory_order_relaxed);
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v46 + 16);
              std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer(v81, &__p);
              char v40 = (void *)*((void *)v27 + 5);
              std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&__p);
            }
            else
            {
              void *v36 = v29 + 24;
              v36[1] = v29;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v29 + 1, 1uLL, memory_order_relaxed);
              char v40 = v36 + 2;
              *((void *)v27 + 5) = v36 + 2;
            }
            *((void *)v27 + 5) = v40;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
            uint64_t v48 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v83, (unint64_t *)&v92, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
            uint64_t v49 = (char **)&v48[1];
            std::vector<std::string>::reserve(v48 + 1, (uint64_t)(v28[5].__r_.__value_.__l.__size_ - v28[5].__r_.__value_.__r.__words[0]) >> 3);
            unint64_t v50 = v22;
            data = v28[5].__r_.__value_.__l.__data_;
            char v51 = (void *)v28[5].__r_.__value_.__l.__size_;
            if (data != v51)
            {
              end = v48[1].__end_;
              do
              {
                unint64_t v54 = (long long *)(*data + 32);
                if (end >= v48[1].__end_cap_.__value_)
                {
                  end = std::vector<std::string>::__push_back_slow_path<std::string const&>(v49, (uint64_t)v54);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v49, v54);
                  ++end;
                }
                v48[1].__end_ = end;
                ++data;
              }
              while (data != v51);
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
            uint64_t v55 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v82, (unint64_t *)&v92, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
            uint64_t v56 = (char **)&v55[1];
            std::vector<std::string>::reserve(v55 + 1, (uint64_t)(v28[4].__r_.__value_.__l.__size_ - v28[4].__r_.__value_.__r.__words[0]) >> 3);
            long long v58 = v28[4].__r_.__value_.__l.__data_;
            unint64_t v57 = (void *)v28[4].__r_.__value_.__l.__size_;
            if (v58 != v57)
            {
              int v59 = v55[1].__end_;
              do
              {
                long long v60 = (long long *)(*v58 + 32);
                if (v59 >= v55[1].__end_cap_.__value_)
                {
                  int v59 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v56, (uint64_t)v60);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v56, v60);
                  ++v59;
                }
                v55[1].__end_ = v59;
                ++v58;
              }
              while (v58 != v57);
            }
            uint64_t v61 = *(void *)(v28->__r_.__value_.__l.__size_ + 8);
            uint64_t v22 = v50;
            std::string::basic_string[abi:ne180100]<0>(&__p, v50);
            uint64_t v27 = v84;
            if (v26)
            {
              std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((void *)(v61 + 240), (unsigned __int8 *)&__p);
            }
            else
            {
              p_p = &__p;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v61 + 240, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 10) = 1;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            ++v26;
          }
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v29);
          uint64_t v25 = *(void *)(v25 + 8);
        }
        while (v25 != v85);
        unint64_t v23 = v93;
        int v21 = v77;
        uint64_t v20 = v79;
      }
      BOOL v62 = std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v21, v23, &v93);
      v62[3] = 0;
      v62[4] = 0;
      *((unsigned char *)v62 + 40) = 0;
      std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v21, v23, &v93)[3] = v23;
      uint64_t v64 = *((void *)v84 + 4);
      uint64_t v63 = *((void *)v84 + 5);
      std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v21, v23, &v93)[4] = (v63 - v64) >> 4;
      uint64_t v20 = (char *)*((void *)v20 + 1);
    }
    while (v20 != v78);
  }
  v91[0] = 0;
  v91[1] = 0;
  p_p = (std::string *)v91;
  uint64_t v65 = *((void *)v75 + 4);
  unint64_t v66 = *(uint64_t **)(v65 + 96);
  for (uint64_t i = *(uint64_t **)(v65 + 104); v66 != i; ++v66)
  {
    uint64_t v68 = *v66;
    unint64_t v69 = *(char **)(*(void *)(*v66 + 8) + 8);
    if (v69)
    {
      __p.__r_.__value_.__r.__words[0] = v68 + 32;
      uint64_t v70 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&p_p, (void *)(v68 + 32), (long long **)&__p);
      long long v71 = *(_OWORD *)v69;
      long long v72 = *((_OWORD *)v69 + 1);
      *((void *)v70 + 11) = *((void *)v69 + 4);
      *(_OWORD *)(v70 + 72) = v72;
      *(_OWORD *)(v70 + 56) = v71;
      if (v70 + 56 != v69) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v70 + 96, *((char **)v69 + 5), *((void *)v69 + 6), (uint64_t)(*((void *)v69 + 6) - *((void *)v69 + 5)) >> 2);
      }
    }
  }
  Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>((uint64_t)&__p, (uint64_t)v84, (uint64_t)&p_p);
  if (v76 != (uint64_t **)&__p)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(v76, (long long *)__p.__r_.__value_.__l.__data_, (long long *)&__p.__r_.__value_.__r.__words[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v84 + 26, v88, &v89);
  }
  unint64_t v73 = (std::__shared_weak_count *)*((void *)v84 + 122);
  *(_OWORD *)((char *)v84 + 968) = 0u;
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  if (Espresso::net::needs_interpreter(v84))
  {
    Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)v84);
    v86[0] = 0;
    v86[1] = 0;
    Espresso::net::setup_script((uint64_t)v84, v86, 0);
  }
  *((unsigned char *)v84 + 180) = 0;
  Espresso::shape_network_recursive(v84, (Espresso::net *)&__p, 0, 0);
  Espresso::correct_jump_labels_after_ordering_change(v84, v74);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v88, (char *)v89);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&p_p, v91[0]);
  std::__tree<int>::destroy(v95);
}

void sub_1927995C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,char *a33)
{
  Espresso::network_shape::~network_shape((char **)&__p);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a32, a33);
  std::__tree<int>::destroy(*(void **)(v33 - 112));
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node(*(char **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__shared_ptr_emplace<Espresso::net>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389680;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::net>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::zephyr::es_function_t::new_value_content(Espresso::zephyr::es_function_t *this)
{
}

void Espresso::zephyr::es_value_content::copy_from(void *a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = v3;
  uint64_t v6 = v3[1];
  uint64_t v5 = v3[2];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)a1[2];
  a1[1] = v6;
  a1[2] = v5;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v9 = v4[3];
  uint64_t v8 = v4[4];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v10 = (std::__shared_weak_count *)a1[4];
  a1[3] = v9;
  a1[4] = v8;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v12 = v4[5];
  uint64_t v11 = v4[6];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a1[6];
  a1[5] = v12;
  a1[6] = v11;
  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
  }
}

void Espresso::zephyr::es_value_content::~es_value_content(Espresso::zephyr::es_value_content *this)
{
  Espresso::zephyr::es_value_content::~es_value_content(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EE36EE80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::zephyr::es_function_t::new_node_content(Espresso::zephyr::es_function_t *this)
{
}

void Espresso::zephyr::es_node_content::copy_from(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v3[1];
  uint64_t v4 = v3[2];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
  }
}

void Espresso::zephyr::es_node_content::~es_node_content(Espresso::zephyr::es_node_content *this)
{
  *(void *)this = &unk_1EE36EE28;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE36EE28;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void Espresso::zephyr::es_function_t::~es_function_t(Espresso::zephyr::es_function_t *this)
{
  Espresso::zephyr::function_t::~function_t(this);

  JUMPOUT(0x192FF16B0);
}

double std::allocate_shared[abi:ne180100]<Espresso::zephyr::ordered_block_t,std::allocator<Espresso::zephyr::ordered_block_t>,Espresso::zephyr::es_function_t *,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0xA0uLL);
  double result = 0.0;
  *(_OWORD *)((char *)v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_1EE38BD70;
  uint64_t v6 = *(atomic_ullong **)(a2 + 24);
  v4[2] = 0u;
  *((void *)v4 + 6) = v6;
  unint64_t add = atomic_fetch_add(v6, 1uLL);
  *(_OWORD *)((char *)v4 + 72) = 0u;
  *((void *)v4 + 7) = a2;
  *((void *)v4 + 8) = (char *)v4 + 72;
  v4[6] = 0u;
  *((void *)v4 + 11) = v4 + 6;
  *(_OWORD *)((char *)v4 + 120) = 0u;
  *((void *)v4 + 14) = (char *)v4 + 120;
  *((void *)v4 + 3) = &unk_1EE36EE50;
  *((void *)v4 + 4) = add;
  *((void *)v4 + 17) = (char *)v4 + 136;
  *((void *)v4 + 18) = (char *)v4 + 136;
  *((void *)v4 + 19) = 0;
  *a1 = (char *)v4 + 24;
  a1[1] = v4;
  return result;
}

void *std::list<std::shared_ptr<Espresso::zephyr::ordered_block_t>>::push_back(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  double result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a1;
  *double result = *a1;
  result[1] = a1;
  *(void *)(v7 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void *Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_0::operator()(uint64_t *a1, Espresso::zephyr::ordered_block_t *a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 32) + 16 * a3;
  uint64_t v7 = Espresso::zephyr::function_t::new_detached_node(a1[1], *(void *)v6 + 16);
  uint64_t v8 = *((void *)v7 + 1);
  uint64_t v10 = *(void *)(*(void *)v6 + 64);
  uint64_t v9 = *(void *)(*(void *)v6 + 72);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v8 + 16);
  *(void *)(v8 + 8) = v10;
  *(void *)(v8 + 16) = v9;
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  std::string::operator=((std::string *)(v7 + 32), (const std::string *)(*(void *)v6 + 16));
  uint64_t v12 = *a1;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)(*a1 + 56), a3);
  uint64_t v14 = (unsigned __int8 *)v13[3];
  long long v15 = (unsigned __int8 *)v13[4];
  if (v14 != v15)
  {
    do
    {
      long long v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)a1[2], v14);
      if (!v16) {
LABEL_16:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v7, *((Espresso::zephyr::value_t **)v16 + 5));
      v14 += 24;
    }
    while (v14 != v15);
    uint64_t v12 = *a1;
  }
  long long v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)(v12 + 96), a3);
  uint64_t v18 = (unsigned __int8 *)v17[3];
  unint64_t v19 = (unsigned __int8 *)v17[4];
  while (v18 != v19)
  {
    uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)a1[2], v18);
    if (!v20) {
      goto LABEL_16;
    }
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v7, *((Espresso::zephyr::value_t **)v20 + 5));
    v18 += 24;
  }

  return Espresso::zephyr::ordered_block_t::insert_node_after(a2, (Espresso::zephyr::node_t *)v7, 0);
}

void std::__introsort<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a2 - 24;
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(void *)v10 < *(void *)v11)
                {
                  uint64_t v110 = *(void *)(v11 + 16);
                  long long v102 = *(_OWORD *)v11;
                  long long v43 = *(_OWORD *)v10;
                  *(unsigned char *)(v11 + 16) = *(unsigned char *)(a2 - 8);
                  *(_OWORD *)unint64_t v11 = v43;
                  *(unsigned char *)(a2 - 8) = v110;
                  *(_OWORD *)unint64_t v10 = v102;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((long long *)v11, (unint64_t *)(v11 + 24), (unint64_t *)(a2 - 24));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(v11, (unint64_t *)(v11 + 24), (unint64_t *)(v11 + 48), a2 - 24);
                break;
              case 5uLL:
                char v44 = (long long *)(v11 + 24);
                long long v45 = (long long *)(v11 + 48);
                std::string v46 = (long long *)(v11 + 72);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(v11, (unint64_t *)(v11 + 24), (unint64_t *)(v11 + 48), v11 + 72);
                if (*(void *)v10 < *(void *)(v11 + 72))
                {
                  long long v47 = *v46;
                  char v48 = *(void *)(v11 + 88);
                  char v49 = *(unsigned char *)(v10 + 16);
                  *std::string v46 = *(_OWORD *)v10;
                  *(unsigned char *)(v11 + 88) = v49;
                  *(unsigned char *)(v10 + 16) = v48;
                  *(_OWORD *)unint64_t v10 = v47;
                  if (*(void *)v46 < *(void *)v45)
                  {
                    uint64_t v50 = *(void *)(v11 + 64);
                    long long v51 = *v45;
                    long long *v45 = *v46;
                    *(unsigned char *)(v11 + 64) = *(unsigned char *)(v11 + 88);
                    *std::string v46 = v51;
                    *(unsigned char *)(v11 + 88) = v50;
                    if (*(void *)v45 < *(void *)v44)
                    {
                      uint64_t v52 = *(void *)(v11 + 40);
                      long long v53 = *v44;
                      *char v44 = *v45;
                      *(unsigned char *)(v11 + 40) = *(unsigned char *)(v11 + 64);
                      long long *v45 = v53;
                      *(unsigned char *)(v11 + 64) = v52;
                      if (*(void *)(v11 + 24) < *(void *)v11)
                      {
                        uint64_t v111 = *(void *)(v11 + 16);
                        long long v103 = *(_OWORD *)v11;
                        *(_OWORD *)unint64_t v11 = *v44;
                        *(unsigned char *)(v11 + 16) = *(unsigned char *)(v11 + 40);
                        *char v44 = v103;
                        *(unsigned char *)(v11 + 40) = v111;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 575)
          {
            unint64_t v54 = v11 + 24;
            BOOL v56 = v11 == a2 || v54 == a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v11;
                do
                {
                  unint64_t v59 = v54;
                  unint64_t v60 = *(void *)(v58 + 24);
                  if (v60 < *(void *)v58)
                  {
                    long long v104 = *(_OWORD *)(v58 + 32);
                    uint64_t v61 = v57;
                    while (1)
                    {
                      uint64_t v62 = v11 + v61;
                      *(_OWORD *)(v62 + 24) = *(_OWORD *)(v11 + v61);
                      *(unsigned char *)(v62 + 40) = *(unsigned char *)(v11 + v61 + 16);
                      if (!v61) {
                        break;
                      }
                      v61 -= 24;
                      if (v60 >= *(void *)(v62 - 24))
                      {
                        uint64_t v63 = v11 + v61 + 24;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v63 = v11;
LABEL_80:
                    *(void *)uint64_t v63 = v60;
                    *(void *)(v63 + 8) = v104;
                    *(unsigned char *)(v63 + 16) = BYTE8(v104);
                  }
                  unint64_t v54 = v59 + 24;
                  v57 += 24;
                  unint64_t v58 = v59;
                }
                while (v59 + 24 != a2);
              }
            }
            else if (!v56)
            {
              do
              {
                unint64_t v94 = v54;
                unint64_t v95 = *(void *)(a1 + 24);
                if (v95 < *(void *)a1)
                {
                  long long v107 = *(_OWORD *)(a1 + 32);
                  do
                  {
                    *(_OWORD *)unint64_t v54 = *(_OWORD *)(v54 - 24);
                    *(unsigned char *)(v54 + 16) = *(unsigned char *)(v54 - 8);
                    unint64_t v96 = *(void *)(v54 - 48);
                    v54 -= 24;
                  }
                  while (v95 < v96);
                  *(void *)unint64_t v54 = v95;
                  *(unsigned char *)(v54 + 16) = BYTE8(v107);
                  *(void *)(v54 + 8) = v107;
                }
                unint64_t v54 = v94 + 24;
                a1 = v94;
              }
              while (v94 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v64 = (v13 - 2) >> 1;
              int64_t v65 = v64;
              do
              {
                int64_t v66 = v65;
                if (v64 >= v65)
                {
                  uint64_t v67 = (2 * v65) | 1;
                  unint64_t v68 = v11 + 24 * v67;
                  if (2 * v66 + 2 < (uint64_t)v13)
                  {
                    unint64_t v70 = *(void *)(v68 + 24);
                    BOOL v69 = *(void *)v68 >= v70;
                    if (*(void *)v68 > v70) {
                      unint64_t v70 = *(void *)v68;
                    }
                    if (!v69)
                    {
                      v68 += 24;
                      uint64_t v67 = 2 * v66 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v70 = *(void *)v68;
                  }
                  unint64_t v71 = v11 + 24 * v66;
                  unint64_t v72 = *(void *)v71;
                  if (v70 >= *(void *)v71)
                  {
                    long long v105 = *(_OWORD *)(v71 + 8);
                    do
                    {
                      unint64_t v73 = v71;
                      unint64_t v71 = v68;
                      long long v74 = *(_OWORD *)v68;
                      *(unsigned char *)(v73 + 16) = *(unsigned char *)(v68 + 16);
                      *(_OWORD *)unint64_t v73 = v74;
                      if (v64 < v67) {
                        break;
                      }
                      uint64_t v75 = (2 * v67) | 1;
                      unint64_t v68 = v11 + 24 * v75;
                      uint64_t v67 = 2 * v67 + 2;
                      if (v67 < (uint64_t)v13)
                      {
                        unint64_t v78 = *(void *)v68;
                        unint64_t v76 = *(void *)(v68 + 24);
                        BOOL v77 = *(void *)v68 >= v76;
                        if (*(void *)v68 <= v76) {
                          unint64_t v78 = *(void *)(v68 + 24);
                        }
                        if (*(void *)v68 < v76) {
                          v68 += 24;
                        }
                        if (v77) {
                          uint64_t v67 = v75;
                        }
                      }
                      else
                      {
                        unint64_t v78 = *(void *)v68;
                        uint64_t v67 = v75;
                      }
                    }
                    while (v78 >= v72);
                    *(void *)unint64_t v71 = v72;
                    *(void *)(v71 + 8) = v105;
                    *(unsigned char *)(v71 + 16) = BYTE8(v105);
                  }
                }
                int64_t v65 = v66 - 1;
              }
              while (v66);
              int64_t v79 = v12 / 0x18uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v112 = *(void *)(v11 + 16);
                long long v106 = *(_OWORD *)v11;
                unint64_t v81 = v11;
                do
                {
                  uint64_t v82 = v81 + 24 * v80 + 24;
                  uint64_t v83 = (2 * v80) | 1;
                  uint64_t v84 = 2 * v80 + 2;
                  if (v84 < v79 && *(void *)v82 < *(void *)(v82 + 24))
                  {
                    v82 += 24;
                    uint64_t v83 = v84;
                  }
                  long long v85 = *(_OWORD *)v82;
                  *(unsigned char *)(v81 + 16) = *(unsigned char *)(v82 + 16);
                  *(_OWORD *)unint64_t v81 = v85;
                  unint64_t v81 = v82;
                  uint64_t v80 = v83;
                }
                while (v83 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 24;
                if (v82 == a2)
                {
                  *(unsigned char *)(v82 + 16) = v112;
                  *(_OWORD *)uint64_t v82 = v106;
                }
                else
                {
                  long long v86 = *(_OWORD *)a2;
                  *(unsigned char *)(v82 + 16) = *(unsigned char *)(a2 + 16);
                  *(_OWORD *)uint64_t v82 = v86;
                  *(unsigned char *)(a2 + 16) = v112;
                  *(_OWORD *)a2 = v106;
                  uint64_t v87 = v82 - v11 + 24;
                  if (v87 >= 25)
                  {
                    unint64_t v88 = (v87 / 0x18uLL - 2) >> 1;
                    uint64_t v89 = v11 + 24 * v88;
                    unint64_t v90 = *(void *)v82;
                    if (*(void *)v89 < *(void *)v82)
                    {
                      long long v99 = *(_OWORD *)(v82 + 8);
                      do
                      {
                        uint64_t v91 = v82;
                        uint64_t v82 = v89;
                        long long v92 = *(_OWORD *)v89;
                        *(unsigned char *)(v91 + 16) = *(unsigned char *)(v89 + 16);
                        *(_OWORD *)uint64_t v91 = v92;
                        if (!v88) {
                          break;
                        }
                        unint64_t v88 = (v88 - 1) >> 1;
                        uint64_t v89 = v11 + 24 * v88;
                      }
                      while (*(void *)v89 < v90);
                      *(void *)uint64_t v82 = v90;
                      *(void *)(v82 + 8) = v99;
                      *(unsigned char *)(v82 + 16) = BYTE8(v99);
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = v11 + 24 * (v13 >> 1);
          if ((unint64_t)v12 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((long long *)a1, (unint64_t *)(a1 + 24 * (v13 >> 1)), (unint64_t *)(a2 - 24));
            uint64_t v16 = 3 * v14;
            long long v17 = (unint64_t *)(a1 + 24 * v14 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((long long *)(a1 + 24), v17, (unint64_t *)(a2 - 48));
            uint64_t v18 = (unint64_t *)(a1 + 24 + 8 * v16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((long long *)(a1 + 48), v18, (unint64_t *)(a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((long long *)v17, (unint64_t *)v15, v18);
            uint64_t v108 = *(void *)(a1 + 16);
            long long v100 = *(_OWORD *)a1;
            char v19 = *(unsigned char *)(v15 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(unsigned char *)(a1 + 16) = v19;
            *(unsigned char *)(v15 + 16) = v108;
            *(_OWORD *)unint64_t v15 = v100;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((long long *)(a1 + 24 * (v13 >> 1)), (unint64_t *)a1, (unint64_t *)(a2 - 24));
          }
          --a3;
          unint64_t v20 = *(void *)a1;
          if ((a4 & 1) != 0 || *(void *)(a1 - 24) < v20) {
            break;
          }
          long long v98 = *(_OWORD *)(a1 + 8);
          if (v20 >= *(void *)v10)
          {
            unint64_t v36 = a1 + 24;
            do
            {
              unint64_t v11 = v36;
              if (v36 >= a2) {
                break;
              }
              v36 += 24;
            }
            while (v20 >= *(void *)v11);
          }
          else
          {
            unint64_t v11 = a1;
            do
            {
              unint64_t v35 = *(void *)(v11 + 24);
              v11 += 24;
            }
            while (v20 >= v35);
          }
          unint64_t v37 = a2;
          if (v11 < a2)
          {
            unint64_t v37 = a2;
            do
            {
              unint64_t v38 = *(void *)(v37 - 24);
              v37 -= 24;
            }
            while (v20 < v38);
          }
          while (v11 < v37)
          {
            uint64_t v109 = *(void *)(v11 + 16);
            long long v101 = *(_OWORD *)v11;
            long long v39 = *(_OWORD *)v37;
            *(unsigned char *)(v11 + 16) = *(unsigned char *)(v37 + 16);
            *(_OWORD *)unint64_t v11 = v39;
            *(unsigned char *)(v37 + 16) = v109;
            *(_OWORD *)unint64_t v37 = v101;
            do
            {
              unint64_t v40 = *(void *)(v11 + 24);
              v11 += 24;
            }
            while (v20 >= v40);
            do
            {
              unint64_t v41 = *(void *)(v37 - 24);
              v37 -= 24;
            }
            while (v20 < v41);
          }
          BOOL v4 = v11 - 24 >= a1;
          BOOL v5 = v11 - 24 == a1;
          if (v11 - 24 != a1)
          {
            long long v42 = *(_OWORD *)(v11 - 24);
            *(unsigned char *)(a1 + 16) = *(unsigned char *)(v11 - 8);
            *(_OWORD *)a1 = v42;
          }
          a4 = 0;
          *(void *)(v11 - 24) = v20;
          *(unsigned char *)(v11 - 8) = BYTE8(v98);
          *(void *)(v11 - 16) = v98;
        }
        long long v97 = *(_OWORD *)(a1 + 8);
        unint64_t v21 = a1;
        do
        {
          unint64_t v22 = v21;
          unint64_t v23 = *(void *)(v21 + 24);
          v21 += 24;
        }
        while (v23 < v20);
        unint64_t v24 = a2;
        if (v22 == a1)
        {
          unint64_t v24 = a2;
          do
          {
            if (v21 >= v24) {
              break;
            }
            unint64_t v26 = *(void *)(v24 - 24);
            v24 -= 24;
          }
          while (v26 >= v20);
        }
        else
        {
          do
          {
            unint64_t v25 = *(void *)(v24 - 24);
            v24 -= 24;
          }
          while (v25 >= v20);
        }
        unint64_t v11 = v21;
        if (v21 < v24)
        {
          unint64_t v27 = v24;
          do
          {
            long long v28 = *(_OWORD *)v11;
            uint64_t v29 = *(void *)(v11 + 16);
            char v30 = *(unsigned char *)(v27 + 16);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v27;
            *(unsigned char *)(v11 + 16) = v30;
            *(unsigned char *)(v27 + 16) = v29;
            *(_OWORD *)unint64_t v27 = v28;
            do
            {
              unint64_t v31 = *(void *)(v11 + 24);
              v11 += 24;
            }
            while (v31 < v20);
            do
            {
              unint64_t v32 = *(void *)(v27 - 24);
              v27 -= 24;
            }
            while (v32 >= v20);
          }
          while (v11 < v27);
        }
        if (v11 - 24 != a1)
        {
          long long v33 = *(_OWORD *)(v11 - 24);
          *(unsigned char *)(a1 + 16) = *(unsigned char *)(v11 - 8);
          *(_OWORD *)a1 = v33;
        }
        *(void *)(v11 - 24) = v20;
        *(unsigned char *)(v11 - 8) = BYTE8(v97);
        *(void *)(v11 - 16) = v97;
        if (v21 >= v24) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *,false>(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(a1, v11 - 24);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(v11, a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_30;
      }
    }
    a2 = v11 - 24;
    if (!v34) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(long long *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)result)
  {
    if (v4 < v3)
    {
      long long v8 = *(_OWORD *)a2;
      unint64_t v9 = a2[2];
      char v10 = *((unsigned char *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((unsigned char *)a2 + 16) = v10;
      *((unsigned char *)a3 + 16) = v9;
      *(_OWORD *)a3 = v8;
      if (*a2 < *(void *)result)
      {
        long long v11 = *result;
        uint64_t v12 = *((void *)result + 2);
        char v13 = *((unsigned char *)a2 + 16);
        *double result = *(_OWORD *)a2;
        *((unsigned char *)result + 16) = v13;
        *((unsigned char *)a2 + 16) = v12;
        *(_OWORD *)a2 = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v14 = *result;
      uint64_t v15 = *((void *)result + 2);
      char v16 = *((unsigned char *)a2 + 16);
      *double result = *(_OWORD *)a2;
      *((unsigned char *)result + 16) = v16;
      *((unsigned char *)a2 + 16) = v15;
      *(_OWORD *)a2 = v14;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      unint64_t v6 = a2[2];
      char v17 = *((unsigned char *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((unsigned char *)a2 + 16) = v17;
    }
    else
    {
      long long v5 = *result;
      unint64_t v6 = *((void *)result + 2);
      char v7 = *((unsigned char *)a3 + 16);
      *double result = *(_OWORD *)a3;
      *((unsigned char *)result + 16) = v7;
    }
    *((unsigned char *)a3 + 16) = v6;
    *(_OWORD *)a3 = v5;
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((long long *)a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    unint64_t v9 = a3[2];
    char v10 = *(unsigned char *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((unsigned char *)a3 + 16) = v10;
    *(unsigned char *)(a4 + 16) = v9;
    *(__n128 *)a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      unint64_t v11 = a2[2];
      char v12 = *((unsigned char *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((unsigned char *)a2 + 16) = v12;
      *((unsigned char *)a3 + 16) = v11;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = *(__n128 *)a1;
        uint64_t v13 = *(void *)(a1 + 16);
        char v14 = *((unsigned char *)a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = v14;
        *((unsigned char *)a2 + 16) = v13;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = (long long *)(a2 - 24);
      if (*(void *)(a2 - 24) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a1 + 16);
        char v9 = *(unsigned char *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(unsigned char *)(a1 + 16) = v9;
        *(unsigned char *)(a2 - 8) = v8;
        *unint64_t v6 = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      uint64_t v18 = (long long *)(a1 + 24);
      char v19 = (long long *)(a1 + 48);
      unint64_t v20 = (long long *)(a1 + 72);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a1 + 72);
      unint64_t v22 = *(void *)(a2 - 24);
      uint64_t v21 = a2 - 24;
      if (v22 < *(void *)(a1 + 72))
      {
        long long v23 = *v20;
        uint64_t v24 = *(void *)(a1 + 88);
        char v25 = *(unsigned char *)(v21 + 16);
        *unint64_t v20 = *(_OWORD *)v21;
        *(unsigned char *)(a1 + 88) = v25;
        *(unsigned char *)(v21 + 16) = v24;
        *(_OWORD *)uint64_t v21 = v23;
        if (*(void *)v20 < *(void *)v19)
        {
          uint64_t v26 = *(void *)(a1 + 64);
          long long v27 = *v19;
          *char v19 = *v20;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 88);
          *unint64_t v20 = v27;
          *(unsigned char *)(a1 + 88) = v26;
          if (*(void *)v19 < *(void *)v18)
          {
            uint64_t v28 = *(void *)(a1 + 40);
            long long v29 = *v18;
            *uint64_t v18 = *v19;
            *(unsigned char *)(a1 + 40) = *(unsigned char *)(a1 + 64);
            *char v19 = v29;
            *(unsigned char *)(a1 + 64) = v28;
            if (*(void *)(a1 + 24) < *(void *)a1)
            {
              uint64_t v30 = *(void *)(a1 + 16);
              long long v31 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v18;
              *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 40);
              *uint64_t v18 = v31;
              *(unsigned char *)(a1 + 40) = v30;
            }
          }
        }
      }
      return 1;
    default:
      char v10 = (void *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      long long v32 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(unsigned char *)(v16 + 88) = *(unsigned char *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(void *)uint64_t v17 = v14;
      *(void *)(v17 + 8) = v32;
      *(unsigned char *)(v17 + 16) = BYTE8(v32);
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    char v10 = (void *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::ordered_block_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::zephyr::ordered_block_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BD70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::zephyr::ordered_block_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::layer_shape>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::layer_shape>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381880;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::layer_shape>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::vimage2espresso_param>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387578;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::vimage2espresso_param>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob_numerical_properties>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::blob_numerical_properties>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388260;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob_numerical_properties>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::node_t>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    long long v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::zephyr::node_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BDE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::zephyr::node_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BDE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::es_function_t *this, atomic_ullong *a2, const Espresso::net *a3)
{
  *(void *)Espresso::zephyr::function_t::function_t((uint64_t)this, a2) = &unk_1EE36EDF0;
  operator new();
}

void sub_19279BA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&__p);
  Espresso::zephyr::function_t::~function_t(v30);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr::match_kernel_chain(uint64_t a1, uint64_t *a2, void *a3)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  v11[0] = &unk_1EE37DA30;
  v11[1] = a2;
  v11[3] = v11;
  uint64_t v6 = a3[3];
  if (v6)
  {
    if ((void *)v6 == a3)
    {
      char v10 = v9;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v9);
      goto LABEL_6;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  char v10 = (void *)v6;
LABEL_6:
  uint64_t matched = Espresso::zephyr::ordered_block_t::match_simple_chain(a1, 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3), (uint64_t)v11, (uint64_t)v9);
  std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v11);
  return matched;
}

void sub_19279BD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr18match_kernel_chainERNS0_15ordered_block_tERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEENS3_8functionIFbRKNS4_IPNS0_6node_tENS8_ISH_EEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a3 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t result = *(void *)(v3 + 8);
  if (!result) {
    return result;
  }
  uint64_t v6 = (void *)(**(void **)(a1 + 8) + 24 * *a2);
  long long v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)result + 272))(result);
  size_t v8 = strlen(v7);
  if ((*((char *)v6 + 23) & 0x80000000) == 0)
  {
    if (v8 != *((unsigned __int8 *)v6 + 23)) {
      return 0;
    }
    return memcmp(v6, v7, v8) == 0;
  }
  if (v8 == v6[1])
  {
    if (v8 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v6 = (void *)*v6;
    return memcmp(v6, v7, v8) == 0;
  }
  return 0;
}

uint64_t std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DA30;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE37DA30;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::~__func()
{
}

void Espresso::zephyr::need_shape(Espresso::zephyr *this, Espresso::zephyr::value_t *a2)
{
  uint64_t v3 = *((void *)a2 + 1);
  if (!v3) {
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4) {
    goto LABEL_3;
  }
  long long v7 = (void *)*((void *)a2 + 10);
  uint64_t v8 = v7[1];
  if (!v8 || !*(void *)(v8 + 8))
  {
LABEL_25:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    return;
  }
  std::vector<Espresso::layer_shape>::vector(v29, (uint64_t)(v7[16] - v7[15]) >> 3);
  uint64_t v9 = v7[15];
  if (v7[16] == v9)
  {
LABEL_17:
    (*(void (**)(void ***__return_ptr))(**(void **)(v8 + 8) + 64))(&v27);
    uint64_t v16 = v27;
    unint64_t v17 = ((char *)v28 - (char *)v27) >> 6;
    uint64_t v18 = v7[12];
    uint64_t v19 = v7[13];
    uint64_t v20 = v19 - v18;
    if (v17 == (v19 - v18) >> 3)
    {
      if (v19 != v18)
      {
        uint64_t v21 = 0;
        if (v17 <= 1) {
          int64_t v22 = 1;
        }
        else {
          int64_t v22 = ((char *)v28 - (char *)v27) >> 6;
        }
        while (*(Espresso::zephyr::value_t **)(v18 + 8 * v21) != a2)
        {
          if (v22 == ++v21) {
            goto LABEL_32;
          }
        }
        long long v23 = (char *)operator new(0x58uLL);
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 2) = 0;
        *(void *)long long v23 = &unk_1EE381880;
        *(_OWORD *)(v23 + 24) = xmmword_192DC3600;
        uint64_t v24 = (uint64_t)(v23 + 24);
        *((_OWORD *)v23 + 3) = 0u;
        *((_OWORD *)v23 + 4) = 0u;
        *((void *)v23 + 10) = 0;
        *((void *)v23 + 5) = 0xFFFFFFFF00000001;
        *(void *)&long long v25 = v23 + 24;
        *((void *)&v25 + 1) = v23;
        uint64_t v26 = *(std::__shared_weak_count **)(v3 + 16);
        *(_OWORD *)(v3 + 8) = v25;
        if (v26)
        {
          nitro::nitro_function::nitro_function(v26);
          uint64_t v16 = v27;
          uint64_t v24 = *(void *)(v3 + 8);
        }
        Espresso::layer_shape::operator=(v24, (long long *)&v16[8 * v21]);
      }
    }
    else
    {
      *(void *)this = 0;
      *((void *)this + 1) = 0;
    }
LABEL_32:
    uint64_t v30 = &v27;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    long long v27 = (void **)v29;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v27);
    if (v17 == v20 >> 3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
LABEL_3:
      uint64_t v5 = *(void *)(v3 + 16);
      *(void *)this = v4;
      *((void *)this + 1) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      Espresso::zephyr::need_shape((Espresso::zephyr *)&v27, *(Espresso::zephyr::value_t **)(v9 + 8 * v11));
      uint64_t v12 = v27;
      if (v27)
      {
        uint64_t v13 = v29[0] + v10;
        long long v14 = *(_OWORD *)v27;
        long long v15 = *((_OWORD *)v27 + 1);
        *(void *)(v13 + 32) = v27[4];
        *(_OWORD *)uint64_t v13 = v14;
        *(_OWORD *)(v13 + 16) = v15;
        if ((void **)v13 != v12) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v13 + 40), (char *)v12[5], (uint64_t)v12[6], ((unsigned char *)v12[6] - (unsigned char *)v12[5]) >> 2);
        }
      }
      else
      {
        *(void *)this = 0;
        *((void *)this + 1) = 0;
      }
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      if (!v12) {
        break;
      }
      ++v11;
      uint64_t v9 = v7[15];
      v10 += 64;
      if (v11 >= (v7[16] - v9) >> 3) {
        goto LABEL_17;
      }
    }
    long long v27 = (void **)v29;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v27);
  }
}

void sub_19279C1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void ***a16)
{
  a16 = &a10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a10 = (void **)&a13;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t Espresso::layer_shape::operator=(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  if ((long long *)a1 != a2) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 40), *((char **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  }
  return a1;
}

void *Espresso::zephyr::match_simple_eltwise_unaryop(uint64_t a1, int a2)
{
  uint64_t result = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(a1);
  if (result)
  {
    if (*(void *)(a1 + 128) - *(void *)(a1 + 120) == 8
      && (v5 = result, uint64_t v6 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)result + 320))(result), *v6 == a2))
    {
      if (v6[1]) {
        return 0;
      }
      else {
        return v5;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *Espresso::zephyr::match_simple_activation(uint64_t a1, int a2)
{
  uint64_t result = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(a1);
  if (result)
  {
    if (*(void *)(a1 + 128) - *(void *)(a1 + 120) == 8)
    {
      uint64_t v5 = result;
      if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)result + 384))(result) == a2) {
        return v5;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *Espresso::zephyr::match_simple_eltwise_binop(uint64_t a1, unsigned int a2)
{
  long long v4 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(a1);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  if (*(void *)(a1 + 128) - *(void *)(a1 + 120) != 16 || *(_DWORD *)v6 != a2) {
    return 0;
  }
  if (a2 <= 0xD && ((1 << a2) & 0x200C) != 0)
  {
    if (*(_DWORD *)(v6 + 4)) {
      return 0;
    }
    return v5;
  }
  uint64_t v8 = 0;
  if (*(_DWORD *)(v6 + 4)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = *(float *)(v6 + 8) == 1.0;
  }
  if (v10 && *(float *)(v6 + 12) == 0.0) {
    return v5;
  }
  return (void *)v8;
}

uint64_t Espresso::zephyr::match_standalone_deconv(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v3 = Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>((uint64_t)this);
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v3 + 384))(v3);
    if (*((_DWORD *)v6 + 6))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 358;
          __int16 v16 = 2080;
          unint64_t v17 = "p.fused_relu == 0";
LABEL_35:
          _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          goto LABEL_36;
        }
        goto LABEL_36;
      }
    }
    else if (*((_DWORD *)v6 + 28))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 359;
          __int16 v16 = 2080;
          unint64_t v17 = "p.has_batch_norm == 0";
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    else if (*((_DWORD *)v6 + 7))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 360;
          __int16 v16 = 2080;
          unint64_t v17 = "p.fused_tanh == 0";
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    else if (*((_DWORD *)v6 + 15) == -1)
    {
      if (*((void *)this + 16) - *((void *)this + 15) == 8)
      {
        (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v5 + 456))(buf, v5);
        if (*(void *)buf)
        {
          BOOL v10 = 0;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v5 + 552))(&v13, v5);
          BOOL v10 = v13 == 0;
          if (v14) {
            nitro::nitro_function::nitro_function(v14);
          }
        }
        unint64_t v11 = *(Espresso **)&buf[8];
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if (!v10) {
          return 1;
        }
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v8 = Espresso::espresso_os_log_subsystem(v11, v9);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 364;
            __int16 v16 = 2080;
            unint64_t v17 = "k_deconv->get_weights() || k_deconv->get_f16_weights()";
            goto LABEL_35;
          }
          goto LABEL_36;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 363;
          __int16 v16 = 2080;
          unint64_t v17 = "node->inputs().size() == 1";
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 361;
        __int16 v16 = 2080;
        unint64_t v17 = "p.fused_activation_mode == ACTIVATION_NONE";
        goto LABEL_35;
      }
      goto LABEL_36;
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    uint64_t v8 = Espresso::espresso_os_log_subsystem(0, v4);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 356;
      __int16 v16 = 2080;
      unint64_t v17 = "k_deconv != nullptr";
      goto LABEL_35;
    }
LABEL_36:
  }
  return 0;
}

void sub_19279C924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

uint64_t Espresso::zephyr::match_standalone_conv(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v3 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>((uint64_t)this);
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>((uint64_t)this);
    if (v6)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 373;
          __int16 v18 = 2080;
          uint64_t v19 = "zephyr::cast_kernel<generic_deconvolution_kernel>(node) == nullptr";
LABEL_39:
          _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          goto LABEL_40;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v9 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
      if (*((_DWORD *)v9 + 6))
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 375;
            __int16 v18 = 2080;
            uint64_t v19 = "p.fused_relu == 0";
            goto LABEL_39;
          }
          goto LABEL_40;
        }
      }
      else if (*((_DWORD *)v9 + 28))
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 376;
            __int16 v18 = 2080;
            uint64_t v19 = "p.has_batch_norm == 0";
            goto LABEL_39;
          }
          goto LABEL_40;
        }
      }
      else if (*((_DWORD *)v9 + 7))
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 377;
            __int16 v18 = 2080;
            uint64_t v19 = "p.fused_tanh == 0";
            goto LABEL_39;
          }
          goto LABEL_40;
        }
      }
      else if (*((_DWORD *)v9 + 15) == -1)
      {
        if (*((void *)this + 16) - *((void *)this + 15) == 8)
        {
          (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v5 + 456))(buf, v5);
          if (*(void *)buf)
          {
            BOOL v12 = 0;
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v5 + 552))(&v15, v5);
            BOOL v12 = v15 == 0;
            if (v16) {
              nitro::nitro_function::nitro_function(v16);
            }
          }
          uint64_t v13 = *(Espresso **)&buf[8];
          if (*(void *)&buf[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
          }
          if (!v12) {
            return 1;
          }
          if (Espresso::zephyr::match_verbose)
          {
            uint64_t v8 = Espresso::espresso_os_log_subsystem(v13, v11);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::string buf = 136315650;
              *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 381;
              __int16 v18 = 2080;
              uint64_t v19 = "k_conv->get_weights() || k_conv->get_f16_weights()";
              goto LABEL_39;
            }
            goto LABEL_40;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          uint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 380;
            __int16 v18 = 2080;
            uint64_t v19 = "node->inputs().size() == 1";
            goto LABEL_39;
          }
          goto LABEL_40;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        uint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 378;
          __int16 v18 = 2080;
          uint64_t v19 = "p.fused_activation_mode == ACTIVATION_NONE";
          goto LABEL_39;
        }
        goto LABEL_40;
      }
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    uint64_t v8 = Espresso::espresso_os_log_subsystem(0, v4);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 371;
      __int16 v18 = 2080;
      uint64_t v19 = "k_conv != nullptr";
      goto LABEL_39;
    }
LABEL_40:
  }
  return 0;
}

void sub_19279CF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void *Espresso::zephyr::match_transpose_to_nchw(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  uint64_t result = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>((uint64_t)this);
  if (result)
  {
    long long v3 = (int32x4_t *)(*(uint64_t (**)(void *))(*(void *)result + 320))(result);
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v3, (int32x4_t)xmmword_192DCA440))))) {
      return 0;
    }
    else {
      return (void *)(v3[1].i32[0] == 4);
    }
  }
  return result;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void *Espresso::zephyr::match_transpose_to_nhwc(uint64_t a1)
{
  uint64_t result = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(a1);
  if (result)
  {
    uint64_t v2 = (int32x4_t *)(*(uint64_t (**)(void *))(*(void *)result + 320))(result);
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v2, (int32x4_t)xmmword_192DCA440))))) {
      return 0;
    }
    else {
      return (void *)(v2[1].i32[0] == 4);
    }
  }
  return result;
}

void *Espresso::zephyr::match_transpose_to_seqw(uint64_t a1)
{
  uint64_t result = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(a1);
  if (result)
  {
    uint64_t v2 = (int32x4_t *)(*(uint64_t (**)(void *))(*(void *)result + 320))(result);
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v2, (int32x4_t)xmmword_192DCA450))))) {
      return 0;
    }
    else {
      return (void *)(v2[1].i32[0] == 0);
    }
  }
  return result;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

uint64_t Espresso::zephyr::match_squeeze_4d_to_3d(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  long long v3 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>((uint64_t)this);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)v3 + 320))(v3);
  uint64_t v5 = (Espresso::zephyr::value_t **)*((void *)this + 15);
  uint64_t v6 = (Espresso::zephyr::value_t **)*((void *)this + 16);
  if ((char *)v6 - (char *)v5 != 8) {
    return 0;
  }
  if (v6 == v5) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v7 = *(_DWORD *)v4;
  int v8 = *(_DWORD *)(v4 + 4);
  int v9 = *(_DWORD *)(v4 + 8);
  char v10 = *(unsigned char *)(v4 + 136);
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v16, *v5);
  if (!v16) {
    goto LABEL_22;
  }
  int v11 = *(_DWORD *)(v16 + 20);
  if (v11 == -1)
  {
    if (*(_DWORD *)(v16 + 16) == 1) {
      int v11 = 4;
    }
    else {
      int v11 = 5;
    }
  }
  BOOL v12 = v11 == 4 && v8 <= 1;
  if (!v12 || (v10 & 1) != 0) {
    goto LABEL_22;
  }
  if (v8)
  {
    if (v9 == -2)
    {
LABEL_19:
      uint64_t v14 = 1;
      goto LABEL_23;
    }
  }
  else if (v7 == 2)
  {
    goto LABEL_19;
  }
LABEL_22:
  uint64_t v14 = 0;
LABEL_23:
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  return v14;
}

uint64_t Espresso::zephyr::match_expanddims_3d_to_4d(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  long long v3 = Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>((uint64_t)this);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (int *)(*(uint64_t (**)(void *))(*(void *)v3 + 320))(v3);
  uint64_t v5 = (Espresso::zephyr::value_t **)*((void *)this + 15);
  uint64_t v6 = (Espresso::zephyr::value_t **)*((void *)this + 16);
  if ((char *)v6 - (char *)v5 != 8) {
    return 0;
  }
  if (v6 == v5) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v7 = *v4;
  int v8 = v4[1];
  int v9 = v4[2];
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v14, *v5);
  if (!v14) {
    goto LABEL_16;
  }
  int v10 = *(_DWORD *)(v14 + 20);
  if (v10 == -1) {
    goto LABEL_16;
  }
  if (v10 != 3 || v8 > 1) {
    goto LABEL_16;
  }
  if (v8)
  {
    if (v9 == -2)
    {
LABEL_13:
      uint64_t v12 = 1;
      goto LABEL_17;
    }
  }
  else if (v7 == 2)
  {
    goto LABEL_13;
  }
LABEL_16:
  uint64_t v12 = 0;
LABEL_17:
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  return v12;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void sub_19279D6D4(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_lstm_atomizer::run_on_network(Espresso::pass_lstm_atomizer *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v587 = *MEMORY[0x1E4F143B8];
  BOOL v4 = getenv("LSTM_ANE") != 0;
  BOOL v544 = v4;
  v269 = getenv("LSTM_GPU");
  if (v269) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4;
  }
  BOOL v282 = v5;
  *(void *)v543 = 0;
  unsigned int v278 = a2;
  if (*((void *)a2 + 5) != *((void *)a2 + 4))
  {
    v273 = (char *)a2 + 96;
    v274 = (char *)a2 + 56;
    uint64_t v6 = (char *)a2 + 136;
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v272 = _Q0;
    __asm { FMOV            V15.2S, #1.0 }
    v270 = (char *)a2 + 136;
    while (1)
    {
      *(void *)std::string buf = v543;
      uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v274, (unint64_t *)v543, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v551 = 0;
      v550[0] = 0;
      v550[1] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v550, v12[3], v12[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4] - v12[3]) >> 3));
      *(void *)std::string __p = v543;
      uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v273, (unint64_t *)v543, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
      uint64_t v556 = 0;
      v554 = 0;
      uint64_t v555 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v554, v13[3], v13[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[4] - v13[3]) >> 3));
      uint64_t v14 = *(void *)v543;
      uint64_t v15 = *((void *)v278 + 4);
      uint64_t v16 = *(void *)(v15 + 16 * *(void *)v543);
      if (*(char *)(v16 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v553, *(const std::string::value_type **)(v16 + 16), *(void *)(v16 + 24));
        uint64_t v14 = *(void *)v543;
        uint64_t v15 = *((void *)v278 + 4);
      }
      else
      {
        std::string v553 = *(std::string *)(v16 + 16);
      }
      uint64_t v17 = *(void *)(v15 + 16 * v14);
      __int16 v18 = *(const void **)(v17 + 64);
      if (v18)
      {
        if (v284) {
          break;
        }
      }
LABEL_784:
      if (SHIBYTE(v553.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v553.__r_.__value_.__l.__data_);
      }
      *(void *)std::string buf = &v554;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)std::string buf = v550;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (++*(void *)v543 >= (unint64_t)((uint64_t)(*((void *)v278 + 5) - *((void *)v278 + 4)) >> 4)) {
        goto LABEL_787;
      }
    }
    uint64_t v19 = *(std::__shared_weak_count **)(v17 + 72);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = (*(uint64_t (**)(char *))(*(void *)v284 + 384))(v284);
    if (*(_DWORD *)v20) {
      _ZF = 0;
    }
    else {
      _ZF = *(_DWORD *)(v20 + 136) == 1;
    }
    if (!_ZF
      || (unsigned int v280 = *(_DWORD *)(v20 + 148), v280 > 1)
      || ((int v283 = *(_DWORD *)(v20 + 16),
           v22.i64[0] = *(void *)(v20 + 20),
           *(int32x2_t *)&v22.u32[2] = vrev64_s32(*(int32x2_t *)(v20 + 8)),
           (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_192DCA330, (int8x16_t)vceqq_f32(v22, v272))) & 0xF) == 0)
        ? (BOOL v23 = *(_DWORD *)(v20 + 144) == 0)
        : (BOOL v23 = 1),
          !v23 ? (BOOL v24 = (v283 & 0xFFFFFFFE) == 2) : (BOOL v24 = 0),
          v24 ? (BOOL v25 = *(_DWORD *)(v20 + 4) == 0) : (BOOL v25 = 0),
          !v25))
    {
LABEL_782:
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
      goto LABEL_784;
    }
    int v26 = *(_DWORD *)(v20 + 76);
    Espresso::net::remove_layer(v278, v543[0]);
    *(void **)std::string __p = v550[0];
    int v279 = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v550[0], (long long **)__p)+ 5)+ 24);
    *(void **)std::string __p = v550[0];
    unsigned int v281 = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v550[0], (long long **)__p)+ 5)+ 20);
    *(void **)std::string __p = v550[0];
    int v285 = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v550[0], (long long **)__p)+ 5)+ 16);
    std::string::basic_string[abi:ne180100]<0>(buf, "_i");
    v271 = v19;
    std::string::basic_string[abi:ne180100]<0>(&buf[24], "_f");
    std::string::basic_string[abi:ne180100]<0>(&buf[48], "_o");
    std::string::basic_string[abi:ne180100]<0>(v573, "_g");
    memset(&v549, 0, sizeof(v549));
    *(void *)std::string __p = &v549;
    __p[8] = 0;
    v549.__begin_ = (std::vector<std::string>::pointer)operator new(0x60uLL);
    v549.__end_ = v549.__begin_;
    v549.__end_cap_.__value_ = v549.__begin_ + 4;
    long long v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v549.__end_cap_, (long long *)buf, &v575, v549.__begin_);
    uint64_t v29 = 0;
    v549.__end_ = v27;
    do
    {
      if (SHIBYTE((&v574)[v29]) < 0) {
        operator delete((void *)v573[v29]);
      }
      v29 -= 3;
    }
    while (v29 != -12);
    uint64_t v30 = Espresso::espresso_os_log_subsystem((Espresso *)v27, v28);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218752;
      *(void *)&buf[4] = *(void *)v543;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v279;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v281;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v285;
      _os_log_debug_impl(&dword_1920CB000, v30, OS_LOG_TYPE_DEBUG, "pass_lstm_atomizer: ilayer=%zu in_seq=%d, in_batch=%d, in_ch=%d", buf, 0x1Eu);
    }

    long long v31 = (std::__shared_weak_count *)*((void *)v278 + 3);
    v542[0] = *((void *)v278 + 2);
    v542[1] = (uint64_t)v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v541[1] = 0;
    v541[0] = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)buf, v542, 0, v541);
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
    if (*((char *)v550[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v548, *(const std::string::value_type **)v550[0], *((void *)v550[0] + 1));
    }
    else
    {
      long long v32 = *(_OWORD *)v550[0];
      v548.__r_.__value_.__r.__words[2] = *((void *)v550[0] + 2);
      *(_OWORD *)&v548.__r_.__value_.__l.__data_ = v32;
    }
    if (*((char *)v554 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v547, *(const std::string::value_type **)v554, *((void *)v554 + 1));
    }
    else
    {
      long long v33 = *(_OWORD *)v554;
      v547.__r_.__value_.__r.__words[2] = *((void *)v554 + 2);
      *(_OWORD *)&v547.__r_.__value_.__l.__data_ = v33;
    }
    if (*((char *)v550[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v540, *(const std::string::value_type **)v550[0], *((void *)v550[0] + 1));
    }
    else
    {
      long long v34 = *(_OWORD *)v550[0];
      v540.__r_.__value_.__r.__words[2] = *((void *)v550[0] + 2);
      *(_OWORD *)&v540.__r_.__value_.__l.__data_ = v34;
    }
    if (*((char *)v554 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v539, *(const std::string::value_type **)v554, *((void *)v554 + 1));
    }
    else
    {
      long long v35 = *(_OWORD *)v554;
      v539.__r_.__value_.__r.__words[2] = *((void *)v554 + 2);
      *(_OWORD *)&v539.__r_.__value_.__l.__data_ = v35;
    }
    v537 = 0;
    v536 = 0;
    unint64_t v538 = 0;
    if (v544)
    {
      *(_OWORD *)&v567.__r_.__value_.__l.__data_ = xmmword_192DCA460;
      LODWORD(v567.__r_.__value_.__r.__words[2]) = 1;
      if ((v540.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v540.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v540.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 3);
      if (__p[23] >= 0) {
        unint64_t v37 = __p;
      }
      else {
        unint64_t v37 = *(unsigned char **)__p;
      }
      if (size)
      {
        if ((v540.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v38 = &v540;
        }
        else {
          unint64_t v38 = (std::string *)v540.__r_.__value_.__r.__words[0];
        }
        memmove(v37, v38, size);
      }
      *(_DWORD *)&v37[size] = 7626591;
      if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v548.__r_.__value_.__l.__data_);
      }
      std::string v548 = *(std::string *)__p;
      if ((v539.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v39 = HIBYTE(v539.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v39 = v539.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v39 + 3);
      if (__p[23] >= 0) {
        unint64_t v40 = __p;
      }
      else {
        unint64_t v40 = *(unsigned char **)__p;
      }
      if (v39)
      {
        if ((v539.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v41 = &v539;
        }
        else {
          unint64_t v41 = (std::string *)v539.__r_.__value_.__r.__words[0];
        }
        memmove(v40, v41, v39);
      }
      *(_DWORD *)&v40[v39] = 7626591;
      if (SHIBYTE(v547.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v547.__r_.__value_.__l.__data_);
      }
      std::string v547 = *(std::string *)__p;
      std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
      if ((v548.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v42 = HIBYTE(v548.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v42 = v548.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v584, v42 + 16);
      if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v43 = &v584;
      }
      else {
        long long v43 = (std::string *)v584.__r_.__value_.__r.__words[0];
      }
      if (v42)
      {
        if ((v548.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v44 = &v548;
        }
        else {
          char v44 = (std::string *)v548.__r_.__value_.__r.__words[0];
        }
        memmove(v43, v44, v42);
      }
      strcpy((char *)v43 + v42, "__conv_transpose");
      if (SHIBYTE(v540.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)v578, v540.__r_.__value_.__l.__data_, v540.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)v578 = v540;
      }
      v532 = 0;
      v531 = 0;
      v533 = 0;
      v569.__r_.__value_.__r.__words[0] = (std::string::size_type)&v531;
      v569.__r_.__value_.__s.__data_[8] = 0;
      v531 = (std::string *)operator new(0x18uLL);
      v532 = v531;
      v533 = v531 + 1;
      v532 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v533, (long long *)v578, (long long *)&v578[24], v531);
      if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v569, v548.__r_.__value_.__l.__data_, v548.__r_.__value_.__l.__size_);
      }
      else {
        std::string v569 = v548;
      }
      v529 = 0;
      v528 = 0;
      v530 = 0;
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v528;
      __sz.__r_.__value_.__s.__data_[8] = 0;
      v528 = (std::string *)operator new(0x18uLL);
      v529 = v528;
      v530 = v528 + 1;
      v529 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v530, (long long *)&v569, (long long *)&v570, v528);
      Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v534, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v584, (uint64_t)&v567, (uint64_t)v531, (uint64_t)v532, (uint64_t *)&v528);
      if (v535) {
        nitro::nitro_function::nitro_function(v535);
      }
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v528;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
      if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v569.__r_.__value_.__l.__data_);
      }
      v569.__r_.__value_.__r.__words[0] = (std::string::size_type)&v531;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v569);
      if ((v578[23] & 0x80000000) != 0) {
        operator delete(*(void **)v578);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v45 = 0;
    uint64_t v46 = 1;
    if (v280) {
      uint64_t v46 = 2;
    }
    uint64_t v276 = v46;
    int v277 = 4 * v26;
    if (v283 == 3) {
      int v47 = 18;
    }
    else {
      int v47 = 17;
    }
    int v275 = v47;
    while (1)
    {
      if (v45) {
        char v48 = "j";
      }
      else {
        char v48 = "i";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v48);
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v569, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (v280)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "y");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v567, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      else if (SHIBYTE(v547.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v567, v547.__r_.__value_.__l.__data_, v547.__r_.__value_.__l.__size_);
      }
      else
      {
        std::string v567 = v547;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "W_X_batch");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&__sz, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      char v49 = v537;
      if ((unint64_t)v537 >= v538)
      {
        long long v51 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v536, (uint64_t)&v567);
      }
      else
      {
        if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v537, v567.__r_.__value_.__l.__data_, v567.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v50 = *(_OWORD *)&v567.__r_.__value_.__l.__data_;
          v537->__r_.__value_.__r.__words[2] = v567.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
        }
        long long v51 = v49 + 1;
      }
      v537 = v51;
      v527[0] = &v544;
      v527[1] = buf;
      if (v544) {
        int v52 = 0;
      }
      else {
        int v52 = v26;
      }
      if (v544) {
        unsigned int v53 = 1;
      }
      else {
        unsigned int v53 = v279;
      }
      Espresso::add_constant((uint64_t *)buf, (uint64_t)&v567, v52, v281, v53, 5u, 0.0);
      std::string::basic_string[abi:ne180100]<0>(&v584, "i");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v584);
      Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, 1, 1u, 1u, 1u, 0.0);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v584, "max_iter");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v584);
      Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, 1, 1u, 1u, 1u, (float)v279);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v584, "h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v584);
      Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, v26, v281, 1u, 5u, 0.0);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v584, "c");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v584);
      Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, v26, v281, 1u, 5u, 0.0);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      if (v45 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v584, "j");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, 1, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v584);
        Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, 1, 1u, 1u, 1u, (float)(v279 - 1));
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v584.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v54 = (uint64_t)&v284[16 * v45 + 624];
      if (v282)
      {
        int v55 = 0;
        for (uint64_t i = 0; i != 4; ++i)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__sz.__r_.__value_.__l.__data_, (const void **)&v549.__begin_[i].__r_.__value_.__l.__data_, (uint64_t)__p);
          (*(void (**)(uint64_t *__return_ptr))(**(void **)v54 + 416))(&v523);
          (*(void (**)(uint64_t *__return_ptr))(**(void **)v54 + 408))(&v521);
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(&v525, (uint64_t)v527, (uint64_t)&v548, (uint64_t)__p, v285, v26, (uint64_t)&v523, (uint64_t)&v521, v55);
          if (v526) {
            nitro::nitro_function::nitro_function(v526);
          }
          if (v522) {
            nitro::nitro_function::nitro_function(v522);
          }
          if (v524) {
            nitro::nitro_function::nitro_function(v524);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          v55 += v26;
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)v54 + 416))(&v517);
        (*(void (**)(uint64_t *__return_ptr))(**(void **)v54 + 408))(&v515);
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(&v519, (uint64_t)v527, (uint64_t)&v548, (uint64_t)&__sz, v285, v277, (uint64_t)&v517, (uint64_t)&v515, 0);
        if (v520) {
          nitro::nitro_function::nitro_function(v520);
        }
        if (v516) {
          nitro::nitro_function::nitro_function(v516);
        }
        if (v518) {
          nitro::nitro_function::nitro_function(v518);
        }
      }
      LODWORD(v562.__r_.__value_.__l.__data_) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_loop");
      std::string::basic_string[abi:ne180100]<0>(v578, "loop");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)v578);
      memset(v512, 0, sizeof(v512));
      memset(v511, 0, sizeof(v511));
      Espresso::sequential_builder::add<Espresso::cf_loop_params_t>(&v513, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v584, (uint64_t)&v562, 0, 0, v511);
      if (v514) {
        nitro::nitro_function::nitro_function(v514);
      }
      v563.__r_.__value_.__r.__words[0] = (std::string::size_type)v511;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
      v563.__r_.__value_.__r.__words[0] = (std::string::size_type)v512;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      if ((v578[23] & 0x80000000) != 0) {
        operator delete(*(void **)v578);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      *(void *)&__p[16] = 897988541;
      __p[24] = 0;
      *(void *)((char *)&v580 + 4) = 0;
      *(void *)&__p[8] = 1065353216;
      *(void *)std::string __p = 103;
      std::string::basic_string[abi:ne180100]<0>(v578, "elementwise");
      std::string::basic_string[abi:ne180100]<0>(&v562, "check");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
      std::string::basic_string[abi:ne180100]<0>(&v561, "i");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
      std::string::basic_string[abi:ne180100]<0>(&v559, "max_iter");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v585, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
      v507 = 0;
      v506 = 0;
      v508 = 0;
      v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v506;
      v558.__r_.__value_.__s.__data_[8] = 0;
      v506 = (std::string *)operator new(0x30uLL);
      v507 = v506;
      v508 = v506 + 2;
      v507 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v508, (long long *)&v584, (long long *)&v586[4], v506);
      std::string::basic_string[abi:ne180100]<0>(&v500, "check");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v558, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
      v504 = 0;
      v503 = 0;
      v505 = 0;
      v383 = &v503;
      char v384 = 0;
      v503 = (std::string *)operator new(0x18uLL);
      v504 = v503;
      v505 = v503 + 1;
      v504 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v505, (long long *)&v558, (long long *)&v559, v503);
      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v509, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)__p, (uint64_t)v506, (uint64_t)v507, (uint64_t *)&v503);
      if (v510) {
        nitro::nitro_function::nitro_function(v510);
      }
      v383 = &v503;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
      if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v558.__r_.__value_.__l.__data_);
      }
      if (v502 < 0) {
        operator delete(v500);
      }
      v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v506;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
      for (uint64_t j = 0; j != -48; j -= 24)
      {
        if ((char)v586[j + 3] < 0) {
          operator delete(*(void **)((char *)&v584 + j + 24));
        }
      }
      if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v559.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v561.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v563.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v562.__r_.__value_.__l.__data_);
      }
      if ((v578[23] & 0x80000000) != 0) {
        operator delete(*(void **)v578);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
      std::string::basic_string[abi:ne180100]<0>(v578, "if");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)v578);
      std::string::basic_string[abi:ne180100]<0>(&v562, "check");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
      v496 = 0;
      v495 = 0;
      v497 = 0;
      v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v495;
      v561.__r_.__value_.__s.__data_[8] = 0;
      v495 = (std::string *)operator new(0x18uLL);
      v496 = v495;
      v497 = v495 + 1;
      v496 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v497, (long long *)&v563, (long long *)&v564, v495);
      memset(v494, 0, sizeof(v494));
      Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v498, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v584, (uint64_t)&v559, (uint64_t)v495, (uint64_t)v496, v494);
      if (v499) {
        nitro::nitro_function::nitro_function(v499);
      }
      v561.__r_.__value_.__r.__words[0] = (std::string::size_type)v494;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v561);
      v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v495;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v561);
      if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v563.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v562.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      if ((v578[23] & 0x80000000) != 0) {
        operator delete(*(void **)v578);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (v544) {
        int v58 = 1;
      }
      else {
        int v58 = 4;
      }
      LODWORD(v584.__r_.__value_.__l.__data_) = v58;
      HIDWORD(v584.__r_.__value_.__r.__words[2]) = 1;
      *(_OWORD *)((char *)v584.__r_.__value_.__r.__words + 4) = xmmword_192DCA470;
      if (v282)
      {
        for (uint64_t k = 0; k != 4; ++k)
        {
          std::string::basic_string[abi:ne180100]<0>(v578, "slice");
          std::operator+<char>();
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__sz.__r_.__value_.__l.__data_, (const void **)&v549.__begin_[k].__r_.__value_.__l.__data_, (uint64_t)__p);
          if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[24], v569.__r_.__value_.__l.__data_, v569.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__p[24] = *(_OWORD *)&v569.__r_.__value_.__l.__data_;
            *(void *)&long long v580 = *((void *)&v569.__r_.__value_.__l + 2);
          }
          v490 = 0;
          v489 = 0;
          v491 = 0;
          v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v489;
          v561.__r_.__value_.__s.__data_[8] = 0;
          v489 = (std::string *)operator new(0x30uLL);
          v490 = v489;
          v491 = v489 + 2;
          v490 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v491, (long long *)__p, (long long *)((char *)&v580 + 8), v489);
          std::operator+<char>();
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v561, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
          v487 = 0;
          v486 = 0;
          v488 = 0;
          v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v486;
          v558.__r_.__value_.__s.__data_[8] = 0;
          v486 = (std::string *)operator new(0x18uLL);
          v487 = v486;
          v488 = v486 + 1;
          v487 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v488, (long long *)&v561, (long long *)&v562, v486);
          Espresso::sequential_builder::add<Espresso::slice_params_t>(&v492, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)&v584, (uint64_t)v489, (uint64_t)v490, (uint64_t *)&v486);
          if (v493) {
            nitro::nitro_function::nitro_function(v493);
          }
          v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v486;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
          if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v561.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v559.__r_.__value_.__l.__data_);
          }
          v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v489;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v561);
          for (uint64_t m = 0; m != -48; m -= 24)
          {
            if (*((char *)&v580 + m + 7) < 0) {
              operator delete(*(void **)&__p[m + 24]);
            }
          }
          if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v563.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v562.__r_.__value_.__l.__data_);
          }
          if ((v578[23] & 0x80000000) != 0) {
            operator delete(*(void **)v578);
          }
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v578, "slice");
        std::string::basic_string[abi:ne180100]<0>(&v562, "W_x");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)__p, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)std::string __p = __sz;
        }
        if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[24], v569.__r_.__value_.__l.__data_, v569.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[24] = *(_OWORD *)&v569.__r_.__value_.__l.__data_;
          *(void *)&long long v580 = *((void *)&v569.__r_.__value_.__l + 2);
        }
        v482 = 0;
        v481 = 0;
        v483 = 0;
        v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v481;
        v561.__r_.__value_.__s.__data_[8] = 0;
        v481 = (std::string *)operator new(0x30uLL);
        v482 = v481;
        v483 = v481 + 2;
        v482 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v483, (long long *)__p, (long long *)((char *)&v580 + 8), v481);
        std::string::basic_string[abi:ne180100]<0>(&v559, "W_x");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v561, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
        v479 = 0;
        v478 = 0;
        v480 = 0;
        v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v478;
        v558.__r_.__value_.__s.__data_[8] = 0;
        v478 = (std::string *)operator new(0x18uLL);
        v479 = v478;
        v480 = v478 + 1;
        v479 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v480, (long long *)&v561, (long long *)&v562, v478);
        Espresso::sequential_builder::add<Espresso::slice_params_t>(&v484, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)&v584, (uint64_t)v481, (uint64_t)v482, (uint64_t *)&v478);
        if (v485) {
          nitro::nitro_function::nitro_function(v485);
        }
        v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v478;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
        if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v561.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v559.__r_.__value_.__l.__data_);
        }
        v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v481;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v561);
        for (uint64_t n = 0; n != -48; n -= 24)
        {
          if (*((char *)&v580 + n + 7) < 0) {
            operator delete(*(void **)&__p[n + 24]);
          }
        }
        if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v563.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v562.__r_.__value_.__l.__data_);
        }
        if ((v578[23] & 0x80000000) != 0) {
          operator delete(*(void **)v578);
        }
      }
      if (v282)
      {
        int v62 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = (uint64_t)&v284[16 * v45 + 656];
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&v584, "h");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v584);
          std::operator+<char>();
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v578, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v563);
          (*(void (**)(uint64_t *__return_ptr))(**(void **)v64 + 416))(&v474);
          (*(void (**)(uint64_t *__return_ptr))(**(void **)v64 + 408))(&v472);
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(&v476, (uint64_t)v527, (uint64_t)__p, (uint64_t)v578, v26, v26, (uint64_t)&v474, (uint64_t)&v472, v62);
          if (v477) {
            nitro::nitro_function::nitro_function(v477);
          }
          if (v473) {
            nitro::nitro_function::nitro_function(v473);
          }
          if (v475) {
            nitro::nitro_function::nitro_function(v475);
          }
          if ((v578[23] & 0x80000000) != 0) {
            operator delete(*(void **)v578);
          }
          if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v563.__r_.__value_.__l.__data_);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v584.__r_.__value_.__l.__data_);
          }
          v63 += 24;
          v62 += v26;
        }
        while (v63 != 96);
        uint64_t v65 = 0;
        while (1)
        {
          *(void *)std::string __p = 0;
          *(void *)&__p[8] = 1065353216;
          *(void *)&__p[16] = 897988541;
          __p[24] = 0;
          *(void *)((char *)&v580 + 4) = 0;
          if (v65 == 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v578, "elementwise");
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v585, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
            v462 = 0;
            v461 = 0;
            v463 = 0;
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v461;
            v558.__r_.__value_.__s.__data_[8] = 0;
            v461 = (std::string *)operator new(0x30uLL);
            v462 = v461;
            v463 = v461 + 2;
            v462 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v463, (long long *)&v584, (long long *)&v586[4], v461);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v558, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
            v459 = 0;
            v458 = 0;
            v460 = 0;
            v383 = &v458;
            char v384 = 0;
            v458 = (std::string *)operator new(0x18uLL);
            v459 = v458;
            v460 = v458 + 1;
            v459 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v460, (long long *)&v558, (long long *)&v559, v458);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v464, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)__p, (uint64_t)v461, (uint64_t)v462, (uint64_t *)&v458);
            if (v465) {
              nitro::nitro_function::nitro_function(v465);
            }
            v383 = &v458;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
            if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v558.__r_.__value_.__l.__data_);
            }
            if (v502 < 0) {
              operator delete(v500);
            }
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v461;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
            for (iuint64_t i = 0; ii != -48; ii -= 24)
            {
              if ((char)v586[ii + 3] < 0) {
                operator delete(*(void **)((char *)&v584 + ii + 24));
              }
            }
            if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v559.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v561.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v563.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v562.__r_.__value_.__l.__data_);
            }
            if ((v578[23] & 0x80000000) != 0) {
              operator delete(*(void **)v578);
            }
            v584.__r_.__value_.__r.__words[2] = 897988541;
            LOBYTE(v585) = 0;
            *(void *)v586 = 0;
            v584.__r_.__value_.__r.__words[0] = 2;
            v584.__r_.__value_.__l.__size_ = 1065353216;
            float v67 = *(float *)((*(uint64_t (**)(char *))(*(void *)v284 + 384))(v284) + 84);
            *(float *)&v584.__r_.__value_.__r.__words[1] = v67
                                                         * (float)*(int *)((*(uint64_t (**)(char *))(*(void *)v284 + 384))(v284)
                                                                         + 100);
            std::string::basic_string[abi:ne180100]<0>(v578, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v562, "forget_bias");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v561, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
            v454 = 0;
            v453 = 0;
            v455 = 0;
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v453;
            v558.__r_.__value_.__s.__data_[8] = 0;
            v453 = (std::string *)operator new(0x18uLL);
            v454 = v453;
            v455 = v453 + 1;
            v454 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v455, (long long *)&v561, (long long *)&v562, v453);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v558, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
            v451 = 0;
            v450 = 0;
            v452 = 0;
            v383 = &v450;
            char v384 = 0;
            v450 = (std::string *)operator new(0x18uLL);
            v451 = v450;
            v452 = v450 + 1;
            v451 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v452, (long long *)&v558, (long long *)&v559, v450);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v456, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)&v584, (uint64_t)v453, (uint64_t)v454, (uint64_t *)&v450);
            if (v457) {
              nitro::nitro_function::nitro_function(v457);
            }
            v383 = &v450;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
            if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v558.__r_.__value_.__l.__data_);
            }
            if (v502 < 0) {
              operator delete(v500);
            }
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v453;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
            if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v561.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v559.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_328;
            }
            unint64_t v68 = (void *)v559.__r_.__value_.__r.__words[0];
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v578, "elementwise");
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v585, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
            v446 = 0;
            v445 = 0;
            v447 = 0;
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v445;
            v558.__r_.__value_.__s.__data_[8] = 0;
            v445 = (std::string *)operator new(0x30uLL);
            v446 = v445;
            v447 = v445 + 2;
            v446 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v447, (long long *)&v584, (long long *)&v586[4], v445);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v558, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
            v443 = 0;
            v442 = 0;
            v444 = 0;
            v383 = &v442;
            char v384 = 0;
            v442 = (std::string *)operator new(0x18uLL);
            v443 = v442;
            v444 = v442 + 1;
            v443 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v444, (long long *)&v558, (long long *)&v559, v442);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v448, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)__p, (uint64_t)v445, (uint64_t)v446, (uint64_t *)&v442);
            if (v449) {
              nitro::nitro_function::nitro_function(v449);
            }
            v383 = &v442;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
            if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v558.__r_.__value_.__l.__data_);
            }
            if (v502 < 0) {
              operator delete(v500);
            }
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v445;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
            for (juint64_t j = 0; jj != -48; jj -= 24)
            {
              if ((char)v586[jj + 3] < 0) {
                operator delete(*(void **)((char *)&v584 + jj + 24));
              }
            }
            if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v559.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v561.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_328;
            }
            unint64_t v68 = (void *)v561.__r_.__value_.__r.__words[0];
          }
          operator delete(v68);
LABEL_328:
          if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v563.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v562.__r_.__value_.__l.__data_);
          }
          if ((v578[23] & 0x80000000) != 0) {
            operator delete(*(void **)v578);
          }
          if (++v65 == 4)
          {
            for (kuint64_t k = 0; kk != 96; kk += 24)
            {
              *(_OWORD *)&__p[4] = _D15;
              *(_OWORD *)&__p[20] = 0uLL;
              if (kk == 72)
              {
                *(_DWORD *)std::string __p = 1;
              }
              else if (v283 == 3)
              {
                *(_DWORD *)std::string __p = 7;
                *(void *)&__p[4] = 0x3F0000003E4CCCCDLL;
              }
              else
              {
                *(_DWORD *)std::string __p = 3;
              }
              std::string::basic_string[abi:ne180100]<0>(&v584, "activation");
              std::operator+<char>();
              Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v578, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v563);
              std::operator+<char>();
              Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v562, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
              v438 = 0;
              v437 = 0;
              v439 = 0;
              v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v437;
              v559.__r_.__value_.__s.__data_[8] = 0;
              v437 = (std::string *)operator new(0x18uLL);
              v438 = v437;
              v439 = v437 + 1;
              v438 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v439, (long long *)&v562, (long long *)&v563, v437);
              std::operator+<char>();
              Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v559, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v558);
              v435 = 0;
              v434 = 0;
              v436 = 0;
              v500 = &v434;
              char v501 = 0;
              v434 = (std::string *)operator new(0x18uLL);
              v435 = v434;
              v436 = v434 + 1;
              v435 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v436, (long long *)&v559, (long long *)&v560, v434);
              Espresso::sequential_builder::add<Espresso::activation_params>(&v440, (uint64_t *)buf, (uint64_t)&v584, (uint64_t)v578, (uint64_t)__p, (uint64_t)v437, (uint64_t)v438, (uint64_t *)&v434);
              if (v441) {
                nitro::nitro_function::nitro_function(v441);
              }
              v500 = &v434;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v500);
              if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v559.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v558.__r_.__value_.__l.__data_);
              }
              v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v437;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v559);
              if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v562.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v561.__r_.__value_.__l.__data_);
              }
              if ((v578[23] & 0x80000000) != 0) {
                operator delete(*(void **)v578);
              }
              if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v563.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v584.__r_.__value_.__l.__data_);
              }
            }
            *(void *)&__p[16] = 897988541;
            __p[24] = 0;
            *(void *)((char *)&v580 + 4) = 0;
            *(void *)&__p[8] = 1065353216;
            *(void *)std::string __p = 1;
            std::string::basic_string[abi:ne180100]<0>(v578, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v562, "mul_fc");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
            std::string::basic_string[abi:ne180100]<0>(&v561, "act__f");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
            std::string::basic_string[abi:ne180100]<0>(&v559, "c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v585, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
            v430 = 0;
            v429 = 0;
            v431 = 0;
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429;
            v558.__r_.__value_.__s.__data_[8] = 0;
            v429 = (std::string *)operator new(0x30uLL);
            v430 = v429;
            v431 = v429 + 2;
            v430 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v431, (long long *)&v584, (long long *)&v586[4], v429);
            std::string::basic_string[abi:ne180100]<0>(&v500, "mul_fc");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v558, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
            v427 = 0;
            v426 = 0;
            v428 = 0;
            v383 = &v426;
            char v384 = 0;
            v426 = (std::string *)operator new(0x18uLL);
            v427 = v426;
            v428 = v426 + 1;
            v427 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v428, (long long *)&v558, (long long *)&v559, v426);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v432, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)__p, (uint64_t)v429, (uint64_t)v430, (uint64_t *)&v426);
            if (v433) {
              nitro::nitro_function::nitro_function(v433);
            }
            v383 = &v426;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
            if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v558.__r_.__value_.__l.__data_);
            }
            if (v502 < 0) {
              operator delete(v500);
            }
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
            for (muint64_t m = 0; mm != -48; mm -= 24)
            {
              if ((char)v586[mm + 3] < 0) {
                operator delete(*(void **)((char *)&v584 + mm + 24));
              }
            }
            if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v559.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v561.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v563.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v562.__r_.__value_.__l.__data_);
            }
            if ((v578[23] & 0x80000000) != 0) {
              operator delete(*(void **)v578);
            }
            *(void *)&__p[16] = 897988541;
            __p[24] = 0;
            *(void *)((char *)&v580 + 4) = 0;
            *(void *)&__p[8] = 1065353216;
            *(void *)std::string __p = 1;
            std::string::basic_string[abi:ne180100]<0>(v578, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v562, "mul_ig");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
            std::string::basic_string[abi:ne180100]<0>(&v561, "act__i");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
            std::string::basic_string[abi:ne180100]<0>(&v559, "act__g");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v585, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
            v422 = 0;
            v421 = 0;
            v423 = 0;
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v421;
            v558.__r_.__value_.__s.__data_[8] = 0;
            v421 = (std::string *)operator new(0x30uLL);
            v422 = v421;
            v423 = v421 + 2;
            v422 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v423, (long long *)&v584, (long long *)&v586[4], v421);
            std::string::basic_string[abi:ne180100]<0>(&v500, "mul_ig");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v558, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
            v419 = 0;
            v418 = 0;
            v420 = 0;
            v383 = &v418;
            char v384 = 0;
            v418 = (std::string *)operator new(0x18uLL);
            v419 = v418;
            v420 = v418 + 1;
            v419 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v420, (long long *)&v558, (long long *)&v559, v418);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v424, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)__p, (uint64_t)v421, (uint64_t)v422, (uint64_t *)&v418);
            if (v425) {
              nitro::nitro_function::nitro_function(v425);
            }
            v383 = &v418;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
            if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v558.__r_.__value_.__l.__data_);
            }
            if (v502 < 0) {
              operator delete(v500);
            }
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v421;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
            for (nuint64_t n = 0; nn != -48; nn -= 24)
            {
              if ((char)v586[nn + 3] < 0) {
                operator delete(*(void **)((char *)&v584 + nn + 24));
              }
            }
            if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v559.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v561.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v563.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v562.__r_.__value_.__l.__data_);
            }
            if ((v578[23] & 0x80000000) != 0) {
              operator delete(*(void **)v578);
            }
            *(void *)std::string __p = 0;
            *(void *)&__p[8] = 1065353216;
            *(void *)&__p[16] = 897988541;
            __p[24] = 0;
            *(void *)((char *)&v580 + 4) = 0;
            std::string::basic_string[abi:ne180100]<0>(v578, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v562, "add_c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
            std::string::basic_string[abi:ne180100]<0>(&v561, "mul_fc");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
            std::string::basic_string[abi:ne180100]<0>(&v559, "mul_ig");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v585, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
            v414 = 0;
            v413 = 0;
            v415 = 0;
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v413;
            v558.__r_.__value_.__s.__data_[8] = 0;
            v413 = (std::string *)operator new(0x30uLL);
            v414 = v413;
            v415 = v413 + 2;
            v414 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v415, (long long *)&v584, (long long *)&v586[4], v413);
            std::string::basic_string[abi:ne180100]<0>(&v500, "c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v558, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
            v411 = 0;
            v410 = 0;
            v412 = 0;
            v383 = &v410;
            char v384 = 0;
            v410 = (std::string *)operator new(0x18uLL);
            v411 = v410;
            v412 = v410 + 1;
            v411 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v412, (long long *)&v558, (long long *)&v559, v410);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v416, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)__p, (uint64_t)v413, (uint64_t)v414, (uint64_t *)&v410);
            if (v417) {
              nitro::nitro_function::nitro_function(v417);
            }
            v383 = &v410;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
            if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v558.__r_.__value_.__l.__data_);
            }
            if (v502 < 0) {
              operator delete(v500);
            }
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v413;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
            for (uint64_t i1 = 0; i1 != -48; i1 -= 24)
            {
              if ((char)v586[i1 + 3] < 0) {
                operator delete(*(void **)((char *)&v584 + i1 + 24));
              }
            }
            if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v559.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v561.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v563.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v562.__r_.__value_.__l.__data_);
            }
            if ((v578[23] & 0x80000000) != 0) {
              operator delete(*(void **)v578);
            }
            *(void *)&__p[4] = _D15;
            memset(&__p[12], 0, 24);
            *(_DWORD *)std::string __p = 1;
            std::string::basic_string[abi:ne180100]<0>(&v584, "activation");
            std::string::basic_string[abi:ne180100]<0>(&v563, "tanh_c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v578, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v563);
            std::string::basic_string[abi:ne180100]<0>(&v561, "c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v562, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
            v406 = 0;
            v405 = 0;
            v407 = 0;
            v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v405;
            v559.__r_.__value_.__s.__data_[8] = 0;
            v405 = (std::string *)operator new(0x18uLL);
            v406 = v405;
            v407 = v405 + 1;
            v406 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v407, (long long *)&v562, (long long *)&v563, v405);
            std::string::basic_string[abi:ne180100]<0>(&v558, "tanh_c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v559, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v558);
            v403 = 0;
            v402 = 0;
            v404 = 0;
            v500 = &v402;
            char v501 = 0;
            v402 = (std::string *)operator new(0x18uLL);
            v403 = v402;
            v404 = v402 + 1;
            v403 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v404, (long long *)&v559, (long long *)&v560, v402);
            Espresso::sequential_builder::add<Espresso::activation_params>(&v408, (uint64_t *)buf, (uint64_t)&v584, (uint64_t)v578, (uint64_t)__p, (uint64_t)v405, (uint64_t)v406, (uint64_t *)&v402);
            if (v409) {
              nitro::nitro_function::nitro_function(v409);
            }
            v500 = &v402;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v500);
            if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v559.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v558.__r_.__value_.__l.__data_);
            }
            v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v405;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v559);
            if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v562.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v561.__r_.__value_.__l.__data_);
            }
            if ((v578[23] & 0x80000000) != 0) {
              operator delete(*(void **)v578);
            }
            if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v563.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v584.__r_.__value_.__l.__data_);
            }
            *(void *)&__p[16] = 897988541;
            __p[24] = 0;
            *(void *)((char *)&v580 + 4) = 0;
            *(void *)&__p[8] = 1065353216;
            *(void *)std::string __p = 1;
            std::string::basic_string[abi:ne180100]<0>(v578, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v562, "mul_otanhc");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
            std::string::basic_string[abi:ne180100]<0>(&v561, "act__o");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
            std::string::basic_string[abi:ne180100]<0>(&v559, "tanh_c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v585, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
            v398 = 0;
            v397 = 0;
            v399 = 0;
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v397;
            v558.__r_.__value_.__s.__data_[8] = 0;
            v397 = (std::string *)operator new(0x30uLL);
            v398 = v397;
            v399 = v397 + 2;
            v398 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v399, (long long *)&v584, (long long *)&v586[4], v397);
            std::string::basic_string[abi:ne180100]<0>(&v500, "h");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v558, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
            v395 = 0;
            v394 = 0;
            v396 = 0;
            v383 = &v394;
            char v384 = 0;
            v394 = (std::string *)operator new(0x18uLL);
            v395 = v394;
            v396 = v394 + 1;
            v395 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v396, (long long *)&v558, (long long *)&v559, v394);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v400, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)__p, (uint64_t)v397, (uint64_t)v398, (uint64_t *)&v394);
            if (v401) {
              nitro::nitro_function::nitro_function(v401);
            }
            v383 = &v394;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
            if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v558.__r_.__value_.__l.__data_);
            }
            if (v502 < 0) {
              operator delete(v500);
            }
            v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v397;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
            for (uint64_t i2 = 0; i2 != -48; i2 -= 24)
            {
              if ((char)v586[i2 + 3] < 0) {
                operator delete(*(void **)((char *)&v584 + i2 + 24));
              }
            }
            if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v559.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v561.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v563.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v562.__r_.__value_.__l.__data_);
            }
            if ((v578[23] & 0x80000000) != 0)
            {
              uint64_t v75 = *(void **)v578;
              goto LABEL_494;
            }
            goto LABEL_495;
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v584, "h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v584);
      std::string::basic_string[abi:ne180100]<0>(&v563, "W_h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v578, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v563);
      unint64_t v76 = &v284[16 * v45];
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v76 + 82) + 416))(&v468);
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v76 + 82) + 408))(&v466);
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(&v470, (uint64_t)v527, (uint64_t)__p, (uint64_t)v578, v26, v277, (uint64_t)&v468, (uint64_t)&v466, 0);
      if (v471) {
        nitro::nitro_function::nitro_function(v471);
      }
      if (v467) {
        nitro::nitro_function::nitro_function(v467);
      }
      if (v469) {
        nitro::nitro_function::nitro_function(v469);
      }
      if ((v578[23] & 0x80000000) != 0) {
        operator delete(*(void **)v578);
      }
      if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v563.__r_.__value_.__l.__data_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)v578 = 0;
      *(_OWORD *)&v578[4] = _D15;
      *(_OWORD *)&v578[20] = 0uLL;
      float v77 = *(float *)((*(uint64_t (**)(char *))(*(void *)v284 + 384))(v284) + 84);
      *(float *)&v578[4] = v77
                         * (float)*(int *)((*(uint64_t (**)(char *))(*(void *)v284 + 384))(v284) + 100);
      *(_DWORD *)v578 = v275;
      std::string::basic_string[abi:ne180100]<0>(&v563, "activation");
      std::string::basic_string[abi:ne180100]<0>(&v561, "ch");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v562, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
      std::string::basic_string[abi:ne180100]<0>(&v559, "W_h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
      std::string::basic_string[abi:ne180100]<0>(&v558, "W_x");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&__p[24], v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v558);
      std::string::basic_string[abi:ne180100]<0>(&v500, "c");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)((char *)&v580 + 8), v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
      v390 = 0;
      v389 = 0;
      v391 = 0;
      v584.__r_.__value_.__r.__words[0] = (std::string::size_type)&v389;
      v584.__r_.__value_.__s.__data_[8] = 0;
      v389 = (std::string *)operator new(0x48uLL);
      v390 = v389;
      v391 = v389 + 3;
      v390 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v391, (long long *)__p, (long long *)&v583, v389);
      std::string::basic_string[abi:ne180100]<0>(&v383, "c");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v383);
      std::string::basic_string[abi:ne180100]<0>(v381, "h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v585, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)v381);
      v387 = 0;
      v386 = 0;
      v388 = 0;
      v545 = &v386;
      char v546 = 0;
      v386 = (std::string *)operator new(0x30uLL);
      v387 = v386;
      v388 = v386 + 2;
      v387 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v388, (long long *)&v584, (long long *)&v586[4], v386);
      Espresso::sequential_builder::add<Espresso::activation_params>(&v392, (uint64_t *)buf, (uint64_t)&v563, (uint64_t)&v562, (uint64_t)v578, (uint64_t)v389, (uint64_t)v390, (uint64_t *)&v386);
      if (v393) {
        nitro::nitro_function::nitro_function(v393);
      }
      v545 = &v386;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v545);
      for (uint64_t i3 = 0; i3 != -48; i3 -= 24)
      {
        if ((char)v586[i3 + 3] < 0) {
          operator delete(*(void **)((char *)&v584 + i3 + 24));
        }
      }
      if (v382 < 0) {
        operator delete(v381[0]);
      }
      if (v385 < 0) {
        operator delete(v383);
      }
      v584.__r_.__value_.__r.__words[0] = (std::string::size_type)&v389;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v584);
      for (uint64_t i4 = 0; i4 != -9; i4 -= 3)
      {
        if (SHIBYTE(v582[i4]) < 0) {
          operator delete(*(void **)((char *)&v580 + i4 * 8 + 8));
        }
      }
      if (v502 < 0) {
        operator delete(v500);
      }
      if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v558.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v559.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v562.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v561.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v75 = (void *)v563.__r_.__value_.__r.__words[0];
LABEL_494:
        operator delete(v75);
      }
LABEL_495:
      if (v544)
      {
        WORD2(v558.__r_.__value_.__r.__words[0]) = 0;
        LODWORD(v558.__r_.__value_.__l.__data_) = 2;
        if (v45)
        {
          std::string::basic_string[abi:ne180100]<0>(&v584, "general_concat");
          std::string::basic_string[abi:ne180100]<0>(&v563, "scatter");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v578, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v563);
          std::string::basic_string[abi:ne180100]<0>(&v562, "h");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
          if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[24], v567.__r_.__value_.__l.__data_, v567.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__p[24] = *(_OWORD *)&v567.__r_.__value_.__l.__data_;
            *(void *)&long long v580 = *((void *)&v567.__r_.__value_.__l + 2);
          }
          v369 = 0;
          v368 = 0;
          v370 = 0;
          v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v368;
          v561.__r_.__value_.__s.__data_[8] = 0;
          v368 = (std::string *)operator new(0x30uLL);
          v369 = v368;
          v370 = v368 + 2;
          v369 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v370, (long long *)__p, (long long *)((char *)&v580 + 8), v368);
          if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v561, v567.__r_.__value_.__l.__data_, v567.__r_.__value_.__l.__size_);
          }
          else {
            std::string v561 = v567;
          }
          v366 = 0;
          v365 = 0;
          v367 = 0;
          v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v365;
          v559.__r_.__value_.__s.__data_[8] = 0;
          v365 = (std::string *)operator new(0x18uLL);
          v366 = v365;
          v367 = v365 + 1;
          v366 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v367, (long long *)&v561, (long long *)&v562, v365);
          Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v371, (uint64_t *)buf, (uint64_t)&v584, (uint64_t)v578, (uint64_t)&v558, (uint64_t)v368, (uint64_t)v369, (uint64_t *)&v365);
          if (v372) {
            nitro::nitro_function::nitro_function(v372);
          }
          v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v365;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v559);
          if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v561.__r_.__value_.__l.__data_);
          }
          v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v368;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v561);
          for (uint64_t i5 = 0; i5 != -48; i5 -= 24)
          {
            if (*((char *)&v580 + i5 + 7) < 0) {
              operator delete(*(void **)&__p[i5 + 24]);
            }
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v584, "general_concat");
          std::string::basic_string[abi:ne180100]<0>(&v563, "scatter");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v578, 0, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v563);
          if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)__p, v567.__r_.__value_.__l.__data_, v567.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)std::string __p = v567;
          }
          std::string::basic_string[abi:ne180100]<0>(&v562, "h");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&__p[24], 0, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
          v377 = 0;
          v376 = 0;
          v378 = 0;
          v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v376;
          v561.__r_.__value_.__s.__data_[8] = 0;
          v376 = (std::string *)operator new(0x30uLL);
          v377 = v376;
          v378 = v376 + 2;
          v377 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v378, (long long *)__p, (long long *)((char *)&v580 + 8), v376);
          if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v561, v567.__r_.__value_.__l.__data_, v567.__r_.__value_.__l.__size_);
          }
          else {
            std::string v561 = v567;
          }
          v374 = 0;
          v373 = 0;
          v375 = 0;
          v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v373;
          v559.__r_.__value_.__s.__data_[8] = 0;
          v373 = (std::string *)operator new(0x18uLL);
          v374 = v373;
          v375 = v373 + 1;
          v374 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v375, (long long *)&v561, (long long *)&v562, v373);
          Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v379, (uint64_t *)buf, (uint64_t)&v584, (uint64_t)v578, (uint64_t)&v558, (uint64_t)v376, (uint64_t)v377, (uint64_t *)&v373);
          if (v380) {
            nitro::nitro_function::nitro_function(v380);
          }
          v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v373;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v559);
          if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v561.__r_.__value_.__l.__data_);
          }
          v561.__r_.__value_.__r.__words[0] = (std::string::size_type)&v376;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v561);
          for (uint64_t i6 = 0; i6 != -48; i6 -= 24)
          {
            if (*((char *)&v580 + i6 + 7) < 0) {
              operator delete(*(void **)&__p[i6 + 24]);
            }
          }
        }
        if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v562.__r_.__value_.__l.__data_);
        }
        if ((v578[23] & 0x80000000) != 0) {
          operator delete(*(void **)v578);
        }
        if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v563.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v584.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_560;
        }
        uint64_t v83 = (void *)v584.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(void *)&long long v80 = 0x100000001;
        *((void *)&v80 + 1) = 0x100000001;
        *(_OWORD *)&v584.__r_.__value_.__l.__data_ = v80;
        LODWORD(v584.__r_.__value_.__r.__words[2]) = -2;
        WORD2(v584.__r_.__value_.__r.__words[2]) = 256;
        v584.__r_.__value_.__s.__data_[22] = 0;
        std::string::basic_string[abi:ne180100]<0>(v578, "scatter");
        std::string::basic_string[abi:ne180100]<0>(&v562, "scatter");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
        if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)__p, v567.__r_.__value_.__l.__data_, v567.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)std::string __p = v567;
        }
        if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[24], v569.__r_.__value_.__l.__data_, v569.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[24] = *(_OWORD *)&v569.__r_.__value_.__l.__data_;
          *(void *)&long long v580 = *((void *)&v569.__r_.__value_.__l + 2);
        }
        std::string::basic_string[abi:ne180100]<0>(&v561, "h");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)((char *)&v580 + 8), v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
        v361 = 0;
        v360 = 0;
        v362 = 0;
        v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
        v559.__r_.__value_.__s.__data_[8] = 0;
        v360 = (std::string *)operator new(0x48uLL);
        v361 = v360;
        v362 = v360 + 3;
        v361 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v362, (long long *)__p, (long long *)&v583, v360);
        if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v559, v567.__r_.__value_.__l.__data_, v567.__r_.__value_.__l.__size_);
        }
        else {
          std::string v559 = v567;
        }
        uint64_t v358 = 0;
        long long v357 = 0;
        v359 = 0;
        v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v357;
        v558.__r_.__value_.__s.__data_[8] = 0;
        long long v357 = (std::string *)operator new(0x18uLL);
        uint64_t v358 = v357;
        v359 = v357 + 1;
        uint64_t v358 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v359, (long long *)&v559, (long long *)&v560, v357);
        Espresso::sequential_builder::add<Espresso::scatter_params_t>(&v363, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)&v584, (uint64_t)v360, (uint64_t)v361, (uint64_t *)&v357);
        if (v364) {
          nitro::nitro_function::nitro_function(v364);
        }
        v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v357;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
        if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v559.__r_.__value_.__l.__data_);
        }
        v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v360;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v559);
        for (uint64_t i7 = 0; i7 != -9; i7 -= 3)
        {
          if (SHIBYTE(v582[i7]) < 0) {
            operator delete(*(void **)((char *)&v580 + i7 * 8 + 8));
          }
        }
        if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v561.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v563.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v562.__r_.__value_.__l.__data_);
        }
        if ((v578[23] & 0x80000000) == 0) {
          goto LABEL_560;
        }
        uint64_t v83 = *(void **)v578;
      }
      operator delete(v83);
LABEL_560:
      *(void *)&__p[16] = 897988541;
      __p[24] = 0;
      *(void *)((char *)&v580 + 4) = 0;
      *(void *)std::string __p = 2;
      *(void *)&__p[8] = 1065353216;
      std::string::basic_string[abi:ne180100]<0>(&v584, "elementwise");
      std::string::basic_string[abi:ne180100]<0>(&v563, "inext");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v578, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v563);
      std::string::basic_string[abi:ne180100]<0>(&v561, "i");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v562, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v561);
      long long v353 = 0;
      int v352 = 0;
      id v354 = 0;
      v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v352;
      v559.__r_.__value_.__s.__data_[8] = 0;
      int v352 = (std::string *)operator new(0x18uLL);
      long long v353 = v352;
      id v354 = v352 + 1;
      long long v353 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v354, (long long *)&v562, (long long *)&v563, v352);
      std::string::basic_string[abi:ne180100]<0>(&v558, "i");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v559, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v558);
      long long v350 = 0;
      int v349 = 0;
      std::string::size_type v351 = 0;
      v500 = &v349;
      char v501 = 0;
      int v349 = (std::string *)operator new(0x18uLL);
      long long v350 = v349;
      std::string::size_type v351 = v349 + 1;
      long long v350 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v351, (long long *)&v559, (long long *)&v560, v349);
      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v355, (uint64_t *)buf, (uint64_t)&v584, (uint64_t)v578, (uint64_t)__p, (uint64_t)v352, (uint64_t)v353, (uint64_t *)&v349);
      if (v356) {
        nitro::nitro_function::nitro_function(v356);
      }
      v500 = &v349;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v500);
      if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v559.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v558.__r_.__value_.__l.__data_);
      }
      v559.__r_.__value_.__r.__words[0] = (std::string::size_type)&v352;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v559);
      if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v562.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v561.__r_.__value_.__l.__data_);
      }
      if ((v578[23] & 0x80000000) != 0) {
        operator delete(*(void **)v578);
      }
      if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v563.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      if (v45 == 1)
      {
        v584.__r_.__value_.__r.__words[2] = 897988541;
        LOBYTE(v585) = 0;
        *(void *)v586 = 0;
        v584.__r_.__value_.__r.__words[0] = 2;
        v584.__r_.__value_.__l.__size_ = 3212836864;
        std::string::basic_string[abi:ne180100]<0>(v578, "elementwise");
        std::string::basic_string[abi:ne180100]<0>(&v562, "jnext");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v563, 1, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v562);
        std::string::basic_string[abi:ne180100]<0>(&v559, "j");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v561, 1, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v559);
        std::string v345 = 0;
        id v344 = 0;
        std::string v346 = 0;
        v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v344;
        v558.__r_.__value_.__s.__data_[8] = 0;
        id v344 = (std::string *)operator new(0x18uLL);
        std::string v345 = v344;
        std::string v346 = v344 + 1;
        std::string v345 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v346, (long long *)&v561, (long long *)&v562, v344);
        std::string::basic_string[abi:ne180100]<0>(&v500, "j");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v558, 1, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)&v500);
        id v342 = 0;
        int v341 = 0;
        v343 = 0;
        v383 = &v341;
        char v384 = 0;
        int v341 = (std::string *)operator new(0x18uLL);
        id v342 = v341;
        v343 = v341 + 1;
        id v342 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v343, (long long *)&v558, (long long *)&v559, v341);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v347, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v563, (uint64_t)&v584, (uint64_t)v344, (uint64_t)v345, (uint64_t *)&v341);
        if (v348) {
          nitro::nitro_function::nitro_function(v348);
        }
        v383 = &v341;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v383);
        if (SHIBYTE(v558.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v558.__r_.__value_.__l.__data_);
        }
        if (v502 < 0) {
          operator delete(v500);
        }
        v558.__r_.__value_.__r.__words[0] = (std::string::size_type)&v344;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v558);
        if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v561.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v559.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v563.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v562.__r_.__value_.__l.__data_);
        }
        if ((v578[23] & 0x80000000) != 0) {
          operator delete(*(void **)v578);
        }
      }
      LODWORD(v562.__r_.__value_.__l.__data_) = 1;
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_jump");
      std::string::basic_string[abi:ne180100]<0>(v578, "jump");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)v578);
      memset(v338, 0, sizeof(v338));
      memset(v337, 0, sizeof(v337));
      Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v339, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v584, (uint64_t)&v562, 0, 0, v337);
      if (v340) {
        nitro::nitro_function::nitro_function(v340);
      }
      v563.__r_.__value_.__r.__words[0] = (std::string::size_type)v337;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
      v563.__r_.__value_.__r.__words[0] = (std::string::size_type)v338;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      if ((v578[23] & 0x80000000) != 0) {
        operator delete(*(void **)v578);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
      std::string::basic_string[abi:ne180100]<0>(v578, "end_if");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)v578);
      memset(v334, 0, sizeof(v334));
      memset(v333, 0, sizeof(v333));
      Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v335, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v584, (uint64_t)&v562, 0, 0, v333);
      if (v336) {
        nitro::nitro_function::nitro_function(v336);
      }
      v563.__r_.__value_.__r.__words[0] = (std::string::size_type)v333;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
      v563.__r_.__value_.__r.__words[0] = (std::string::size_type)v334;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      if ((v578[23] & 0x80000000) != 0) {
        operator delete(*(void **)v578);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
      std::string::basic_string[abi:ne180100]<0>(v578, "end_loop");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)v578);
      memset(v330, 0, sizeof(v330));
      memset(v329, 0, sizeof(v329));
      Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v331, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v584, (uint64_t)&v562, 0, 0, v329);
      if (v332) {
        nitro::nitro_function::nitro_function(v332);
      }
      v563.__r_.__value_.__r.__words[0] = (std::string::size_type)v329;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
      v563.__r_.__value_.__r.__words[0] = (std::string::size_type)v330;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
      if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v584.__r_.__value_.__l.__data_);
      }
      if ((v578[23] & 0x80000000) != 0) {
        operator delete(*(void **)v578);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (!v282)
      {
        LODWORD(v561.__r_.__value_.__l.__data_) = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "copy");
        long long v85 = v554;
        std::string::basic_string[abi:ne180100]<0>(v578, "h");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)v578);
        long long v325 = 0;
        long long v324 = 0;
        long long v326 = 0;
        v563.__r_.__value_.__r.__words[0] = (std::string::size_type)&v324;
        v563.__r_.__value_.__s.__data_[8] = 0;
        long long v324 = (std::string *)operator new(0x18uLL);
        long long v325 = v324;
        long long v326 = v324 + 1;
        uint64_t v86 = (2 * v45) | 1;
        long long v325 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v326, (long long *)&v584, &v585, v324);
        uint64_t v87 = (char *)v554 + 24 * v86;
        if (v87[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v563, *(const std::string::value_type **)v87, *((void *)v87 + 1));
        }
        else
        {
          long long v88 = *(_OWORD *)v87;
          v563.__r_.__value_.__r.__words[2] = *((void *)v87 + 2);
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v88;
        }
        long long v322 = 0;
        long long v321 = 0;
        long long v323 = 0;
        v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
        v562.__r_.__value_.__s.__data_[8] = 0;
        long long v321 = (std::string *)operator new(0x18uLL);
        long long v322 = v321;
        long long v323 = v321 + 1;
        long long v322 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v323, (long long *)&v563, (long long *)&v564, v321);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v327, (uint64_t *)buf, (uint64_t)__p, (uint64_t)v85 + 24 * v86, (uint64_t)&v561, (uint64_t)v324, (uint64_t)v325, (uint64_t *)&v321);
        if (v328) {
          nitro::nitro_function::nitro_function(v328);
        }
        v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v562);
        if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v563.__r_.__value_.__l.__data_);
        }
        v563.__r_.__value_.__r.__words[0] = (std::string::size_type)&v324;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
        if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v584.__r_.__value_.__l.__data_);
        }
        if ((v578[23] & 0x80000000) != 0) {
          operator delete(*(void **)v578);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "copy");
        uint64_t v89 = v554;
        std::string::basic_string[abi:ne180100]<0>(v578, "c");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v584, v45, (const void **)&v553.__r_.__value_.__l.__data_, (uint64_t)v578);
        v317 = 0;
        v316 = 0;
        unsigned int v318 = 0;
        v563.__r_.__value_.__r.__words[0] = (std::string::size_type)&v316;
        v563.__r_.__value_.__s.__data_[8] = 0;
        v316 = (std::string *)operator new(0x18uLL);
        v317 = v316;
        unsigned int v318 = v316 + 1;
        uint64_t v90 = 2 * v45 + 2;
        v317 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v318, (long long *)&v584, &v585, v316);
        uint64_t v91 = (char *)v554 + 24 * v90;
        if (v91[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v563, *(const std::string::value_type **)v91, *((void *)v91 + 1));
        }
        else
        {
          long long v92 = *(_OWORD *)v91;
          v563.__r_.__value_.__r.__words[2] = *((void *)v91 + 2);
          *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v92;
        }
        v314 = 0;
        long long v313 = 0;
        v315 = 0;
        v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v313;
        v562.__r_.__value_.__s.__data_[8] = 0;
        long long v313 = (std::string *)operator new(0x18uLL);
        v314 = v313;
        v315 = v313 + 1;
        v314 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v315, (long long *)&v563, (long long *)&v564, v313);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v319, (uint64_t *)buf, (uint64_t)__p, (uint64_t)v89 + 24 * v90, (uint64_t)&v561, (uint64_t)v316, (uint64_t)v317, (uint64_t *)&v313);
        if (v320) {
          nitro::nitro_function::nitro_function(v320);
        }
        v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v313;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v562);
        if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v563.__r_.__value_.__l.__data_);
        }
        v563.__r_.__value_.__r.__words[0] = (std::string::size_type)&v316;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
        if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v584.__r_.__value_.__l.__data_);
        }
        if ((v578[23] & 0x80000000) != 0) {
          operator delete(*(void **)v578);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__sz.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v567.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v569.__r_.__value_.__l.__data_);
      }
      if (++v45 == v276)
      {
        if (v544)
        {
          unint64_t v93 = v536;
          unint64_t v94 = v537;
          while (v93 != (char *)v94)
          {
            if (v93[23] >= 0) {
              size_t v95 = v93[23];
            }
            else {
              size_t v95 = *((void *)v93 + 1);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v584, v95 + 1);
            if ((v584.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v96 = &v584;
            }
            else {
              unint64_t v96 = (std::string *)v584.__r_.__value_.__r.__words[0];
            }
            if (v95)
            {
              if (v93[23] >= 0) {
                long long v97 = v93;
              }
              else {
                long long v97 = *(const std::string::value_type **)v93;
              }
              memmove(v96, v97, v95);
            }
            *(_WORD *)((char *)&v96->__r_.__value_.__l.__data_ + v95) = 99;
            *(_WORD *)&__p[32] = 1;
            *(_DWORD *)&__p[36] = 1;
            *(_DWORD *)std::string __p = 0;
            *(_DWORD *)&__p[4] = v26;
            *(_DWORD *)&__p[28] = 0;
            *(_DWORD *)&__p[8] = v279;
            *(_OWORD *)&__p[12] = xmmword_192DCA480;
            std::string::basic_string[abi:ne180100]<0>(v578, "reshape");
            if (v93[23] >= 0) {
              size_t v98 = v93[23];
            }
            else {
              size_t v98 = *((void *)v93 + 1);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v569, v98 + 14);
            if ((v569.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v99 = &v569;
            }
            else {
              long long v99 = (std::string *)v569.__r_.__value_.__r.__words[0];
            }
            if (v98)
            {
              if (v93[23] >= 0) {
                long long v100 = v93;
              }
              else {
                long long v100 = *(char **)v93;
              }
              memmove(v99, v100, v98);
            }
            strcpy((char *)v99 + v98, "__conv_reshape");
            if (v93[23] < 0)
            {
              std::string::__init_copy_ctor_external(&v567, *(const std::string::value_type **)v93, *((void *)v93 + 1));
            }
            else
            {
              long long v101 = *(_OWORD *)v93;
              v567.__r_.__value_.__r.__words[2] = *((void *)v93 + 2);
              *(_OWORD *)&v567.__r_.__value_.__l.__data_ = v101;
            }
            v309 = 0;
            int v308 = 0;
            v310 = 0;
            __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v308;
            __sz.__r_.__value_.__s.__data_[8] = 0;
            int v308 = (std::string *)operator new(0x18uLL);
            v309 = v308;
            v310 = v308 + 1;
            v309 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v310, (long long *)&v567, (long long *)&v568, v308);
            if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__sz, v584.__r_.__value_.__l.__data_, v584.__r_.__value_.__l.__size_);
            }
            else {
              std::string __sz = v584;
            }
            v306 = 0;
            v305 = 0;
            v307 = 0;
            v563.__r_.__value_.__r.__words[0] = (std::string::size_type)&v305;
            v563.__r_.__value_.__s.__data_[8] = 0;
            v305 = (std::string *)operator new(0x18uLL);
            v306 = v305;
            v307 = v305 + 1;
            v306 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v307, (long long *)&__sz, (long long *)&v566, v305);
            Espresso::sequential_builder::add<Espresso::reshape_params>(&v311, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v569, (uint64_t)__p, (uint64_t)v308, (uint64_t)v309, (uint64_t *)&v305);
            if (v312) {
              nitro::nitro_function::nitro_function(v312);
            }
            v563.__r_.__value_.__r.__words[0] = (std::string::size_type)&v305;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v563);
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__sz.__r_.__value_.__l.__data_);
            }
            __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v308;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
            if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v567.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v569.__r_.__value_.__l.__data_);
            }
            if ((v578[23] & 0x80000000) != 0) {
              operator delete(*(void **)v578);
            }
            LODWORD(v563.__r_.__value_.__r.__words[2]) = 2;
            *(_OWORD *)&v563.__r_.__value_.__l.__data_ = xmmword_192DCA490;
            if (v280)
            {
              if (v93[23] >= 0) {
                size_t v102 = v93[23];
              }
              else {
                size_t v102 = *((void *)v93 + 1);
              }
              std::string::basic_string[abi:ne180100]((uint64_t)__p, v102 + 3);
              if (__p[23] >= 0) {
                long long v103 = __p;
              }
              else {
                long long v103 = *(unsigned char **)__p;
              }
              if (v102)
              {
                if (v93[23] >= 0) {
                  long long v104 = v93;
                }
                else {
                  long long v104 = *(const std::string::value_type **)v93;
                }
                memmove(v103, v104, v102);
              }
              *(_DWORD *)&v103[v102] = 7626591;
            }
            else if (SHIBYTE(v539.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, v539.__r_.__value_.__l.__data_, v539.__r_.__value_.__l.__size_);
            }
            else
            {
              *(std::string *)std::string __p = v539;
            }
            std::string::basic_string[abi:ne180100]<0>(v578, "transpose");
            if (v93[23] >= 0) {
              size_t v105 = v93[23];
            }
            else {
              size_t v105 = *((void *)v93 + 1);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v569, v105 + 16);
            if ((v569.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v106 = &v569;
            }
            else {
              long long v106 = (std::string *)v569.__r_.__value_.__r.__words[0];
            }
            if (v105)
            {
              if (v93[23] >= 0) {
                long long v107 = v93;
              }
              else {
                long long v107 = *(const std::string::value_type **)v93;
              }
              memmove(v106, v107, v105);
            }
            strcpy((char *)v106 + v105, "__conv_transpose");
            if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v567, v584.__r_.__value_.__l.__data_, v584.__r_.__value_.__l.__size_);
            }
            else {
              std::string v567 = v584;
            }
            unint64_t v301 = 0;
            v300 = 0;
            std::string v302 = 0;
            __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300;
            __sz.__r_.__value_.__s.__data_[8] = 0;
            v300 = (std::string *)operator new(0x18uLL);
            unint64_t v301 = v300;
            std::string v302 = v300 + 1;
            unint64_t v301 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v302, (long long *)&v567, (long long *)&v568, v300);
            if ((__p[23] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(&__sz, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else {
              std::string __sz = *(std::string *)__p;
            }
            std::string v298 = 0;
            std::string v297 = 0;
            uint64_t v299 = 0;
            v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v297;
            v562.__r_.__value_.__s.__data_[8] = 0;
            std::string v297 = (std::string *)operator new(0x18uLL);
            std::string v298 = v297;
            uint64_t v299 = v297 + 1;
            std::string v298 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v299, (long long *)&__sz, (long long *)&v566, v297);
            Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v303, (uint64_t *)buf, (uint64_t)v578, (uint64_t)&v569, (uint64_t)&v563, (uint64_t)v300, (uint64_t)v301, (uint64_t *)&v297);
            if (v304) {
              nitro::nitro_function::nitro_function(v304);
            }
            v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v297;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v562);
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__sz.__r_.__value_.__l.__data_);
            }
            __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
            if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v567.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v569.__r_.__value_.__l.__data_);
            }
            if ((v578[23] & 0x80000000) != 0) {
              operator delete(*(void **)v578);
            }
            std::string::operator=((std::string *)v93, (const std::string *)__p);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v584.__r_.__value_.__l.__data_);
            }
            v93 += 24;
          }
        }
        uint64_t v6 = v270;
        uint64_t v19 = v271;
        if (v280)
        {
          BYTE4(v581) = 0;
          LOWORD(v580) = 0;
          *(_DWORD *)std::string __p = 0;
          *(_DWORD *)&__p[32] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v584, "concat");
          if ((v547.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v108 = HIBYTE(v547.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v108 = v547.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v578, v108 + 8);
          if (v578[23] >= 0) {
            uint64_t v109 = v578;
          }
          else {
            uint64_t v109 = *(unsigned char **)v578;
          }
          if (v108)
          {
            if ((v547.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v110 = &v547;
            }
            else {
              uint64_t v110 = (std::string *)v547.__r_.__value_.__r.__words[0];
            }
            memmove(v109, v110, v108);
          }
          strcpy(&v109[v108], "__concat");
          uint64_t v293 = 0;
          uint64_t v292 = 0;
          uint64_t v294 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v292, (uint64_t)v536, (uint64_t)v537, 0xAAAAAAAAAAAAAAABLL * (((char *)v537 - v536) >> 3));
          if (SHIBYTE(v539.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v569, v539.__r_.__value_.__l.__data_, v539.__r_.__value_.__l.__size_);
          }
          else {
            std::string v569 = v539;
          }
          std::vector<std::string> v290 = 0;
          v289 = 0;
          v291 = 0;
          v567.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
          v567.__r_.__value_.__s.__data_[8] = 0;
          v289 = (std::string *)operator new(0x18uLL);
          std::vector<std::string> v290 = v289;
          v291 = v289 + 1;
          std::vector<std::string> v290 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v291, (long long *)&v569, (long long *)&v570, v289);
          Espresso::sequential_builder::add<Espresso::concat_params>(&v295, (uint64_t *)buf, (uint64_t)&v584, (uint64_t)v578, (uint64_t)__p, v292, v293, (uint64_t *)&v289);
          uint64_t v6 = v270;
          if (v296) {
            nitro::nitro_function::nitro_function(v296);
          }
          v567.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v567);
          if (SHIBYTE(v569.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v569.__r_.__value_.__l.__data_);
          }
          v569.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v569);
          if ((v578[23] & 0x80000000) != 0) {
            operator delete(*(void **)v578);
          }
          if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v584.__r_.__value_.__l.__data_);
          }
        }
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 1065353216;
        Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)buf, (long long **)v278, v543[0], (uint64_t)__p);
        std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
        *(void *)std::string __p = &v536;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v539.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v539.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v540.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v540.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v547.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v547.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v548.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v548.__r_.__value_.__l.__data_);
        }
        std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v577);
        if (v576) {
          nitro::nitro_function::nitro_function(v576);
        }
        if (*((void *)&v575 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v575 + 1));
        }
        if (v574) {
          nitro::nitro_function::nitro_function(v574);
        }
        if (SHIBYTE(v573[0]) < 0) {
          operator delete(*(void **)&buf[56]);
        }
        std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&buf[16], *(void **)&buf[24]);
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        *(void *)std::string buf = &v549;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        goto LABEL_782;
      }
    }
  }
LABEL_787:
  v288[1] = 0;
  v288[0] = 0;
  Espresso::net::setup_script((uint64_t)v278, v288, 0);
  *((unsigned char *)v278 + 180) = 0;
  v287 = (Espresso::net *)((char *)v278 + 184);
  Espresso::shape_network_recursive(v278, (Espresso::net *)((char *)v278 + 184), 0, 0);
  uint64_t v112 = v278;
  if (v282)
  {
    Espresso::util_unroll_loop(v278, v111);
    std::string::basic_string[abi:ne180100]<0>(buf, "unrolled");
    v557[3] = 0;
    uint64_t v113 = (uint64_t)v278;
    Espresso::net::pprint((uint64_t)v278, (uint64_t)buf, (uint64_t)v557);
    std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v557);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v555 = 0;
    v554 = 0;
    uint64_t v556 = 0;
    Espresso::net::get_producers_of_blobs(v278, (uint64_t)&v584);
    memset(buf, 0, 32);
    *(_DWORD *)&buf[32] = 1065353216;
    Espresso::net::get_consumers_of_blobs(v278, buf, (uint64_t)v578);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)buf);
    unsigned int v114 = (std::string *)std::vector<BOOL>::vector(&v553, (uint64_t)(*((void *)v278 + 5) - *((void *)v278 + 4)) >> 4);
    if (*((void *)v278 + 5) != *((void *)v278 + 4))
    {
      unint64_t v116 = 0;
      uint64_t v117 = (uint64_t)v278 + 96;
      do
      {
        unint64_t v286 = v116;
        v540.__r_.__value_.__r.__words[0] = v116;
        v550[1] = 0;
        v550[0] = 0;
        v551 = 0;
        int v552 = -1;
        do
        {
          uint64_t v118 = *(void *)(*(void *)(v113 + 32) + 16 * v540.__r_.__value_.__r.__words[0]);
          unint64_t v119 = *(const void **)(v118 + 64);
          if (!v119) {
            break;
          }
          if (!v120)
          {
            if (!v114) {
              break;
            }
            id v121 = *(std::__shared_weak_count **)(v118 + 72);
            if (!v121)
            {
              int data = 2;
              uint64_t v123 = (uint64_t)v278 + 56;
              goto LABEL_804;
            }
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
            int data = 2;
LABEL_802:
            nitro::nitro_function::nitro_function(v121);
            goto LABEL_803;
          }
          id v121 = *(std::__shared_weak_count **)(v118 + 72);
          if (v121) {
            atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v114 = (std::string *)(*(uint64_t (**)(void *))(*(void *)v120 + 320))(v120);
          int data = (int)v114->__r_.__value_.__l.__data_;
          if (v121) {
            goto LABEL_802;
          }
LABEL_803:
          uint64_t v123 = (uint64_t)v278 + 56;
          if (data == -2) {
            break;
          }
LABEL_804:
          if (data != v552 && v550[0] != v550[1]) {
            break;
          }
          *(void *)std::string buf = &v540;
          unsigned int v114 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v117, (unint64_t *)&v540, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
          if (v114[1].__r_.__value_.__r.__words[0] == v114[1].__r_.__value_.__l.__size_) {
            break;
          }
          *(void *)std::string buf = &v540;
          unsigned int v114 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v123, (unint64_t *)&v540, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
          if (v114[1].__r_.__value_.__l.__size_ - v114[1].__r_.__value_.__r.__words[0] != 48
            || ((*(void *)(v553.__r_.__value_.__r.__words[0]
                           + ((v540.__r_.__value_.__r.__words[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v540.__r_.__value_.__s.__data_[0]) & 1) != 0)
          {
            break;
          }
          if (v550[0] == v550[1]) {
            int v552 = data;
          }
          memset(&buf[8], 0, 49);
          *(void *)std::string buf = v540.__r_.__value_.__r.__words[0];
          *(void *)std::string __p = &v540;
          uint64_t v124 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v117, (unint64_t *)&v540, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
          std::string::operator=((std::string *)&buf[32], (const std::string *)v124[3]);
          if (v550[0] == v550[1])
          {
            *(void *)std::string __p = &v540;
            id v133 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v123, (unint64_t *)&v540, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
            if (&buf[8] != (unsigned char *)(v133 + 3)) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&buf[8], (std::string *)v133[3], (std::string *)v133[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v133[4] - v133[3]) >> 3));
            }
            goto LABEL_839;
          }
          *(void *)std::string __p = &v540;
          uint64_t v125 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v123, (unint64_t *)&v540, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
          uint64_t v126 = *(unsigned __int8 *)(v125 + 47);
          size_t v127 = *(void *)(v125 + 32);
          if ((v126 & 0x80u) == 0) {
            uint64_t v128 = *(unsigned __int8 *)(v125 + 47);
          }
          else {
            uint64_t v128 = *(void *)(v125 + 32);
          }
          uint64_t v129 = *((unsigned __int8 *)v550[1] - 9);
          int v130 = (char)v129;
          if ((v129 & 0x80u) != 0) {
            uint64_t v129 = *((void *)v550[1] - 3);
          }
          if (v128 != v129) {
            goto LABEL_828;
          }
          uint64_t v131 = (const void **)(v125 + 24);
          if (v130 >= 0) {
            char v132 = (unsigned __int8 *)v550[1] - 32;
          }
          else {
            char v132 = (unsigned __int8 *)*((void *)v550[1] - 4);
          }
          if ((v126 & 0x80) == 0)
          {
            if (!v126)
            {
LABEL_825:
              buf[56] = 1;
LABEL_834:
              v549.__begin_ = &v540;
              signed int v136 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v123, (unint64_t *)&v540, (uint64_t)&std::piecewise_construct, (uint64_t **)&v549)[3];
              if (*((char *)v136 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v136, *((void *)v136 + 1));
              }
              else
              {
                long long v137 = *v136;
                *(void *)&__p[16] = *((void *)v136 + 2);
                *(_OWORD *)std::string __p = v137;
              }
              goto LABEL_837;
            }
            while (*(unsigned __int8 *)v131 == *v132)
            {
              uint64_t v131 = (const void **)((char *)v131 + 1);
              ++v132;
              if (!--v126) {
                goto LABEL_825;
              }
            }
LABEL_828:
            buf[56] = 0;
            goto LABEL_829;
          }
          int v135 = memcmp(*v131, v132, v127);
          buf[56] = v135 == 0;
          if (!v135) {
            goto LABEL_834;
          }
LABEL_829:
          v549.__begin_ = &v540;
          uint64_t v134 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v123, (unint64_t *)&v540, (uint64_t)&std::piecewise_construct, (uint64_t **)&v549)[3];
          if (*(char *)(v134 + 47) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v134 + 24), *(void *)(v134 + 32));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(v134 + 24);
            *(void *)&__p[16] = *(void *)(v134 + 40);
          }
LABEL_837:
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[8], (std::string *)__p, (long long *)&__p[24], 1uLL);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
LABEL_839:
          uint64_t v138 = (char *)v550[1];
          if (v550[1] >= v551)
          {
            int64_t v140 = ((char *)v550[1] - (char *)v550[0]) >> 6;
            if ((unint64_t)(v140 + 1) >> 58) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v141 = (int64_t)((uint64_t)v551 - (unint64_t)v550[0]) >> 5;
            if (v141 <= v140 + 1) {
              unint64_t v141 = v140 + 1;
            }
            if ((unint64_t)v551 - (unint64_t)v550[0] >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v142 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v142 = v141;
            }
            *(void *)&__p[32] = &v551;
            if (v142)
            {
              if (v142 >> 58) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              id v143 = (char *)operator new(v142 << 6);
            }
            else
            {
              id v143 = 0;
            }
            *(void *)std::string __p = v143;
            *(void *)&__p[8] = &v143[64 * v140];
            *(void *)&__p[16] = *(void *)&__p[8];
            *(void *)&__p[24] = &v143[64 * v142];
            std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::construct[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,util_chain_concats(Espresso::net &,BOOL)::concat_chain_element const&,void>(*(uint64_t *)&__p[8], (uint64_t)buf);
            uint64_t v144 = *(char **)&__p[8];
            unsigned int v139 = (void *)(*(void *)&__p[16] + 64);
            *(void *)&__p[16] += 64;
            size_t v145 = (char *)v550[1];
            v146 = (char *)v550[0];
            if (v550[1] == v550[0])
            {
              int64x2_t v151 = vdupq_n_s64((unint64_t)v550[1]);
            }
            else
            {
              uint64_t v147 = 0;
              do
              {
                long long v148 = &v144[v147];
                long long v149 = &v145[v147];
                *((void *)v148 - 8) = *(void *)&v145[v147 - 64];
                *((void *)v148 - 7) = 0;
                *((void *)v148 - 6) = 0;
                *((void *)v148 - 5) = 0;
                *(_OWORD *)(v148 - 56) = *(_OWORD *)&v145[v147 - 56];
                *((void *)v148 - 5) = *(void *)&v145[v147 - 40];
                *((void *)v149 - 7) = 0;
                *((void *)v149 - 6) = 0;
                *((void *)v149 - 5) = 0;
                long long v150 = *(_OWORD *)&v145[v147 - 32];
                *((void *)v148 - 2) = *(void *)&v145[v147 - 16];
                *((_OWORD *)v148 - 2) = v150;
                *((void *)v149 - 3) = 0;
                *((void *)v149 - 2) = 0;
                *((void *)v149 - 4) = 0;
                *(v148 - 8) = v145[v147 - 8];
                v147 -= 64;
              }
              while (&v145[v147] != v146);
              v144 += v147;
              int64x2_t v151 = *(int64x2_t *)v550;
              unsigned int v139 = *(void **)&__p[16];
            }
            v550[0] = v144;
            v550[1] = v139;
            *(int64x2_t *)&__p[8] = v151;
            unint64_t v152 = v551;
            v551 = *(void **)&__p[24];
            *(void *)&__p[24] = v152;
            *(void *)std::string __p = v151.i64[0];
            std::__split_buffer<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element> &>::~__split_buffer((uint64_t)__p);
          }
          else
          {
            std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::construct[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,util_chain_concats(Espresso::net &,BOOL)::concat_chain_element const&,void>((uint64_t)v550[1], (uint64_t)buf);
            unsigned int v139 = v138 + 64;
          }
          v550[1] = v139;
          *(void *)(v553.__r_.__value_.__r.__words[0]
                    + ((v540.__r_.__value_.__r.__words[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v540.__r_.__value_.__s.__data_[0];
          v549.__begin_ = &v540;
          uint64_t v153 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v117, (unint64_t *)&v540, (uint64_t)&std::piecewise_construct, (uint64_t **)&v549)[3];
          if (*((char *)v153 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v153, *((void *)v153 + 1));
          }
          else
          {
            long long v154 = *v153;
            *(void *)&__p[16] = *((void *)v153 + 2);
            *(_OWORD *)std::string __p = v154;
          }
          vDSP_Length v155 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v578, __p);
          if (v155
            && (int v156 = (std::string::size_type *)*((void *)v155 + 5), *((void *)v155 + 6) - (void)v156 == 8))
          {
            v540.__r_.__value_.__r.__words[0] = *v156;
            char v157 = 1;
          }
          else
          {
            char v157 = 0;
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if ((buf[55] & 0x80000000) != 0) {
            operator delete(*(void **)&buf[32]);
          }
          *(void *)std::string __p = &buf[8];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        }
        while ((v157 & 1) != 0);
        int v158 = (uint64_t *)v550[1];
        uint64_t v159 = (uint64_t *)v550[0];
        if ((void *)((char *)v550[1] - (char *)v550[0]) < (void *)0x41)
        {
          unint64_t v178 = v286;
          if (!v550[0]) {
            goto LABEL_962;
          }
LABEL_958:
          v212 = (uint64_t *)v550[1];
          unint64_t v213 = v159;
          if (v550[1] != v159)
          {
            do
            {
              v212 -= 8;
              std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::destroy[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,void>((uint64_t)v212);
            }
            while (v212 != v159);
            unint64_t v213 = (uint64_t *)v550[0];
          }
          v550[1] = v159;
          operator delete(v213);
          goto LABEL_962;
        }
        memset(&v549, 0, sizeof(v549));
        memset(&v548, 0, sizeof(v548));
        if (v550[0] != v550[1])
        {
          do
          {
            uint64_t v160 = v159[1];
            uint64_t v161 = v159[2];
            while (v160 != v161)
            {
              *(void *)std::string __p = v160;
              v162 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v278 + 136, (unsigned __int8 *)v160, (long long **)__p);
              Espresso::abstract_blob_container::shape(buf, *((void *)v162 + 5));
              uint64_t v164 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
              std::string::size_type v165 = *(Espresso **)&buf[40];
              if (*(void *)&buf[40])
              {
                *(void *)&buf[48] = *(void *)&buf[40];
                operator delete(*(void **)&buf[40]);
              }
              v166 = Espresso::espresso_os_log_subsystem(v165, v163);
              if (os_log_type_enabled(v166, OS_LOG_TYPE_DEBUG))
              {
                unint64_t v172 = (const std::string::value_type *)v160;
                if (*(char *)(v160 + 23) < 0) {
                  unint64_t v172 = *(const std::string::value_type **)v160;
                }
                int v173 = *((unsigned __int8 *)v159 + 56);
                *(_DWORD *)std::string buf = 136315650;
                *(void *)&buf[4] = v172;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v173;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v164 < 1;
                _os_log_debug_impl(&dword_1920CB000, v166, OS_LOG_TYPE_DEBUG, "concat_chain: bottom=%s on_left=%d empty=%d", buf, 0x18u);
              }

              if (v164 < 1)
              {
                size_t v168 = (_OWORD *)v548.__r_.__value_.__l.__size_;
                if (v548.__r_.__value_.__l.__size_ >= v548.__r_.__value_.__r.__words[2])
                {
                  unsigned int v114 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v548.__r_.__value_.__l.__data_, v160);
                }
                else
                {
                  if (*(char *)(v160 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v548.__r_.__value_.__l.__size_, *(const std::string::value_type **)v160, *(void *)(v160 + 8));
                  }
                  else
                  {
                    long long v169 = *(_OWORD *)v160;
                    *(void *)(v548.__r_.__value_.__l.__size_ + 16) = *(void *)(v160 + 16);
                    _OWORD *v168 = v169;
                  }
                  unsigned int v114 = (std::string *)((char *)v168 + 24);
                }
                v548.__r_.__value_.__l.__size_ = (std::string::size_type)v114;
              }
              else if (*((unsigned char *)v159 + 56))
              {
                v167.__i_ = v549.__begin_;
                unsigned int v114 = std::vector<std::string>::insert(&v549, v167, (std::vector<std::string>::const_reference)v160).__i_;
              }
              else
              {
                std::vector<std::string>::pointer end = v549.__end_;
                if (v549.__end_ >= v549.__end_cap_.__value_)
                {
                  unsigned int v114 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v549, v160);
                }
                else
                {
                  if (*(char *)(v160 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v549.__end_, *(const std::string::value_type **)v160, *(void *)(v160 + 8));
                  }
                  else
                  {
                    long long v171 = *(_OWORD *)v160;
                    v549.__end_->__r_.__value_.__r.__words[2] = *(void *)(v160 + 16);
                    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v171;
                  }
                  unsigned int v114 = end + 1;
                }
                v549.__end_ = v114;
              }
              v160 += 24;
            }
            v159 += 8;
          }
          while (v159 != v158);
          int v158 = (uint64_t *)v550[1];
        }
        v539.__r_.__value_.__r.__words[0] = 0;
        v539.__r_.__value_.__r.__words[0] = *(v158 - 8);
        v174 = Espresso::espresso_os_log_subsystem((Espresso *)v114, v115);
        if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
        {
          *(void *)std::string __p = &v539;
          v214 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v117, (unint64_t *)&v539, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
          if (*((char *)v214 + 23) < 0) {
            v214 = (uint64_t **)*v214;
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&buf[4] = v214;
          _os_log_debug_impl(&dword_1920CB000, v174, OS_LOG_TYPE_DEBUG, "concat_chain: last_top=%s", buf, 0xCu);
        }

        *(void *)std::string __p = &v539;
        v175 = (std::vector<std::string> *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v278 + 56, (unint64_t *)&v539, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)+ 3);
        if (v175 != &v549) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v175, v549.__begin_, v549.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v549.__end_ - (char *)v549.__begin_) >> 3));
        }
        unint64_t v176 = 0;
        memset(&v547, 0, sizeof(v547));
        unint64_t v177 = v550[0];
        uint64_t v113 = (uint64_t)v278;
        unint64_t v178 = v286;
        if ((void *)((char *)v550[1] - (char *)v550[0]) != (void *)64)
        {
          uint64_t v179 = 0;
          unint64_t v180 = 0;
          do
          {
            int v181 = v177[16 * v180];
            if ((unint64_t)v179 >= v547.__r_.__value_.__r.__words[2])
            {
              uint64_t v182 = (_DWORD *)v547.__r_.__value_.__r.__words[0];
              uint64_t v183 = (uint64_t)((uint64_t)v179 - v547.__r_.__value_.__r.__words[0]) >> 2;
              unint64_t v184 = v183 + 1;
              if ((unint64_t)(v183 + 1) >> 62) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              int64_t v185 = v547.__r_.__value_.__r.__words[2] - v547.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v547.__r_.__value_.__r.__words[2] - v547.__r_.__value_.__r.__words[0]) >> 1 > v184) {
                unint64_t v184 = v185 >> 1;
              }
              _CF = (unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v186 = 0x3FFFFFFFFFFFFFFFLL;
              if (!_CF) {
                unint64_t v186 = v184;
              }
              if (v186)
              {
                unint64_t v186 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v186);
                uint64_t v179 = (_DWORD *)v547.__r_.__value_.__l.__size_;
                uint64_t v182 = (_DWORD *)v547.__r_.__value_.__r.__words[0];
              }
              else
              {
                uint64_t v187 = 0;
              }
              unsigned int v188 = (_DWORD *)(v186 + 4 * v183);
              *unsigned int v188 = v181;
              unint64_t v176 = v188 + 1;
              while (v179 != v182)
              {
                int v189 = *--v179;
                *--unsigned int v188 = v189;
              }
              v547.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
              v547.__r_.__value_.__l.__size_ = (std::string::size_type)v176;
              v547.__r_.__value_.__r.__words[2] = v186 + 4 * v187;
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *uint64_t v179 = v181;
              unint64_t v176 = v179 + 1;
            }
            v547.__r_.__value_.__l.__size_ = (std::string::size_type)v176;
            ++v180;
            unint64_t v177 = v550[0];
            uint64_t v179 = v176;
          }
          while (v180 < (((char *)v550[1] - (char *)v550[0]) >> 6) - 1);
        }
        std::string::size_type v190 = v548.__r_.__value_.__l.__size_;
        v191 = (unsigned __int8 *)v548.__r_.__value_.__r.__words[0];
        if (v548.__r_.__value_.__r.__words[0] != v548.__r_.__value_.__l.__size_)
        {
          do
          {
            int v192 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v578, v191);
            v193 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v584, (uint64_t)v191);
            if (v192)
            {
              if (*((void *)v192 + 6) - *((void *)v192 + 5) == 8 && v193 != 0)
              {
                int v195 = *((_DWORD *)v193 + 10);
                std::string::size_type v196 = v547.__r_.__value_.__l.__size_;
                if (v547.__r_.__value_.__l.__size_ >= v547.__r_.__value_.__r.__words[2])
                {
                  uint64_t v198 = (void *)v547.__r_.__value_.__r.__words[0];
                  uint64_t v199 = (uint64_t)(v547.__r_.__value_.__l.__size_ - v547.__r_.__value_.__r.__words[0]) >> 2;
                  unint64_t v200 = v199 + 1;
                  if ((unint64_t)(v199 + 1) >> 62) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  int64_t v201 = v547.__r_.__value_.__r.__words[2] - v547.__r_.__value_.__r.__words[0];
                  if ((uint64_t)(v547.__r_.__value_.__r.__words[2] - v547.__r_.__value_.__r.__words[0]) >> 1 > v200) {
                    unint64_t v200 = v201 >> 1;
                  }
                  _CF = (unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v202 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!_CF) {
                    unint64_t v202 = v200;
                  }
                  if (v202)
                  {
                    unint64_t v202 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v202);
                    std::string::size_type v196 = v547.__r_.__value_.__l.__size_;
                    uint64_t v198 = (void *)v547.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    uint64_t v203 = 0;
                  }
                  char v204 = (_DWORD *)(v202 + 4 * v199);
                  *char v204 = v195;
                  std::string::size_type v197 = (std::string::size_type)(v204 + 1);
                  while ((void *)v196 != v198)
                  {
                    int v205 = *(_DWORD *)(v196 - 4);
                    v196 -= 4;
                    *--char v204 = v205;
                  }
                  v547.__r_.__value_.__r.__words[0] = (std::string::size_type)v204;
                  v547.__r_.__value_.__l.__size_ = v197;
                  v547.__r_.__value_.__r.__words[2] = v202 + 4 * v203;
                  if (v198) {
                    operator delete(v198);
                  }
                }
                else
                {
                  *(_DWORD *)v547.__r_.__value_.__l.__size_ = v195;
                  std::string::size_type v197 = v196 + 4;
                }
                v547.__r_.__value_.__l.__size_ = v197;
              }
            }
            v191 += 24;
          }
          while (v191 != (unsigned __int8 *)v190);
          unint64_t v176 = (int *)v547.__r_.__value_.__l.__size_;
        }
        unint64_t v206 = 126 - 2 * __clz((uint64_t)((uint64_t)v176 - v547.__r_.__value_.__r.__words[0]) >> 2);
        if (v176 == (int *)v547.__r_.__value_.__l.__data_) {
          uint64_t v207 = 0;
        }
        else {
          uint64_t v207 = v206;
        }
        std::__introsort<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *,false>((int *)v547.__r_.__value_.__l.__data_, v176, v207, 1);
        std::string::size_type v209 = v547.__r_.__value_.__l.__size_;
        for (i8 = (int *)v547.__r_.__value_.__r.__words[0]; i8 != (int *)v209; ++i8)
          Espresso::net::remove_layer(v278, *i8);
        Espresso::net::get_producers_of_blobs(v278, (uint64_t)buf);
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)&v584, (uint64_t *)buf);
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&buf[16]);
        v210 = *(void **)buf;
        *(void *)std::string buf = 0;
        if (v210) {
          operator delete(v210);
        }
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 1065353216;
        Espresso::net::get_consumers_of_blobs(v278, __p, (uint64_t)buf);
        std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__move_assign((uint64_t)v578, (uint64_t *)buf);
        std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(void **)&buf[16]);
        uint64_t v211 = *(void **)buf;
        *(void *)std::string buf = 0;
        if (v211) {
          operator delete(v211);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
        if (v547.__r_.__value_.__r.__words[0])
        {
          v547.__r_.__value_.__l.__size_ = v547.__r_.__value_.__r.__words[0];
          operator delete(v547.__r_.__value_.__l.__data_);
        }
        *(void *)std::string buf = &v548;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(void *)std::string buf = &v549;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        uint64_t v159 = (uint64_t *)v550[0];
        if (v550[0]) {
          goto LABEL_958;
        }
LABEL_962:
        unint64_t v116 = v178 + 1;
      }
      while (v116 < (uint64_t)(*(void *)(v113 + 40) - *(void *)(v113 + 32)) >> 4);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "util_chain_concats");
    *(void *)&buf[24] = 0;
    Espresso::net::pprint(v113, (uint64_t)__p, (uint64_t)buf);
    std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](buf);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v553.__r_.__value_.__r.__words[0]) {
      operator delete(v553.__r_.__value_.__l.__data_);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(void **)&v578[16]);
    unint64_t v215 = *(void **)v578;
    *(void *)v578 = 0;
    if (v215) {
      operator delete(v215);
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v584.__r_.__value_.__r.__words[2]);
    uint64_t v216 = (void *)v584.__r_.__value_.__r.__words[0];
    v584.__r_.__value_.__r.__words[0] = 0;
    if (v216) {
      operator delete(v216);
    }
    std::vector<util_chain_concats(Espresso::net &,BOOL)::concat_chain,std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain>>::~vector[abi:ne180100]((void ***)&v554);
    v217 = *(std::__shared_weak_count **)(v113 + 976);
    *(_OWORD *)(v113 + 968) = 0u;
    if (v217) {
      nitro::nitro_function::nitro_function(v217);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "ane_compiler_batch");
    uint64_t v112 = v278;
    *(void *)std::string __p = buf;
    std::vector<std::string> v218 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v278 + 59, buf, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    MEMORY[0x192FF0F50]((char *)v218 + 56, "1");
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (v269)
  {
    *((unsigned char *)v112 + 180) = 0;
    Espresso::shape_network_recursive(v112, v287, 0, 0);
    v551 = 0;
    v550[1] = 0;
    v550[0] = &v550[1];
    v219 = v278;
    uint64_t v220 = *((void *)v278 + 80);
    for (uint64_t i9 = *((void *)v278 + 81); v220 != i9; v219 = v278)
    {
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v219 + 24), (void *)v220))
      {
        *(void *)std::string __p = v220;
        id v222 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v287, (void *)v220, (long long **)__p);
        long long v223 = *(_OWORD *)(v222 + 72);
        *(_OWORD *)std::string buf = *(_OWORD *)(v222 + 56);
        *(_OWORD *)&buf[16] = v223;
        v224 = (const void *)*((void *)v222 + 12);
        *(void *)&buf[32] = *((void *)v222 + 11);
        memset(&buf[40], 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], v224, *((void *)v222 + 13), (uint64_t)(*((void *)v222 + 13) - (void)v224) >> 2);
        *(void *)std::string buf = *(void *)&buf[8];
        int v225 = *(_DWORD *)&buf[16];
        *(void *)&unsigned char buf[12] = 0x100000001;
        *(_DWORD *)&buf[8] = v225;
        *(_DWORD *)&buf[20] = 3;
        *(void *)std::string __p = v220;
        long long v226 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v550, (void *)v220, (long long **)__p);
        long long v227 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v226 + 56) = *(_OWORD *)buf;
        *(_OWORD *)(v226 + 72) = v227;
        *((void *)v226 + 11) = *(void *)&buf[32];
        if (v226 + 56 != buf) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v226 + 96, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(void *)&buf[48] - *(void *)&buf[40]) >> 2);
        }
        if (*(void *)&buf[40])
        {
          *(void *)&buf[48] = *(void *)&buf[40];
          operator delete(*(void **)&buf[40]);
        }
      }
      long long v228 = (const char *)v220;
      if (*(char *)(v220 + 23) < 0) {
        long long v228 = *(const char **)v220;
      }
      *(void *)std::string buf = v220;
      uint64_t v229 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v550, (void *)v220, (long long **)buf);
      int v230 = *((_DWORD *)v229 + 19);
      if (v230 == -1)
      {
        if (*((_DWORD *)v229 + 18) == 1) {
          int v230 = 4;
        }
        else {
          int v230 = 5;
        }
      }
      *(void *)std::string buf = v220;
      int v231 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v550, (void *)v220, (long long **)buf)+ 14);
      *(void *)std::string buf = v220;
      int v232 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v550, (void *)v220, (long long **)buf)+ 15);
      *(void *)std::string buf = v220;
      int v233 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v550, (void *)v220, (long long **)buf)+ 16);
      *(void *)std::string buf = v220;
      v234 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v550, (void *)v220, (long long **)buf);
      printf("%s rank=%d (%d %d %d %d)\n", v228, v230, v231, v232, v233, *((_DWORD *)v234 + 17));
      v220 += 24;
    }
    id v235 = &__block_literal_global_3862;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v584, v219);
    memset(buf, 0, 60);
    v572 = v219;
    uint64_t v236 = *((void *)v219 + 4);
    if (*((void *)v219 + 5) != v236)
    {
      unint64_t v237 = 0;
      do
      {
        *(_DWORD *)&buf[56] = v237;
        long long v238 = *(_OWORD *)(v236 + 16 * v237);
        uint64_t v239 = *(void *)(v236 + 16 * v237 + 8);
        if (v239) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v239 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v240 = *(std::__shared_weak_count **)&buf[24];
        *(_OWORD *)&buf[16] = v238;
        if (v240)
        {
          nitro::nitro_function::nitro_function(v240);
          uint64_t v241 = *(void *)&buf[16];
        }
        else
        {
          uint64_t v241 = v238;
        }
        int v242 = *(void **)(v241 + 64);
        if (v242
        {
          uint64_t v243 = *(void *)(v241 + 72);
          if (v243) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v243 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v243 = 0;
        }
        float v244 = *(std::__shared_weak_count **)&buf[8];
        *(void *)std::string buf = v242;
        *(void *)&buf[8] = v243;
        if (v244)
        {
          nitro::nitro_function::nitro_function(v244);
          int v242 = *(void **)buf;
        }
        if (v242)
        {
          int v245 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v242 + 320))(v242);
          *v245 -= 2;
        }
        ++v237;
        uint64_t v236 = *((void *)v219 + 4);
      }
      while (v237 < (*((void *)v219 + 5) - v236) >> 4);
      v246 = *(uint64_t **)&buf[40];
      if (*(void *)&buf[32] != *(void *)&buf[40])
      {
        int v247 = 0;
        v248 = (uint64_t *)(*(void *)&buf[32] + 32);
        do
        {
          v249 = v248 - 4;
          int v250 = *((_DWORD *)v248 - 8) + v247;
          *((_DWORD *)v248 - 8) = v250;
          uint64_t v251 = *(v248 - 3);
          if (v251)
          {
            *(_DWORD *)std::string __p = v250;
            *(void *)&__p[8] = v251;
            uint64_t v252 = *(v248 - 2);
            *(void *)&__p[16] = v252;
            if (v252) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v252 + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)&__p[24] = 0;
            *(void *)&__p[32] = 0;
            *(void *)&long long v580 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(v248 - 1), *v248, 0xAAAAAAAAAAAAAAABLL * ((*v248 - *(v248 - 1)) >> 3));
            *((void *)&v580 + 1) = 0;
            uint64_t v581 = 0;
            v582[0] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v580 + 1, v248[2], v248[3], 0xAAAAAAAAAAAAAAABLL * ((v248[3] - v248[2]) >> 3));
            memset(v578, 0, 24);
            v554 = v578;
            LOBYTE(v555) = 0;
            *(void *)v578 = operator new(0x48uLL);
            *(void *)&v578[8] = *(void *)v578;
            *(void *)&v578[16] = *(void *)v578 + 72;
            *(void *)&v578[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v578[16], (uint64_t)__p, (uint64_t)&v583, *(uint64_t *)v578);
            Espresso::net::insert_layers((uint64_t)v278, (uint64_t **)v578);
            v554 = v578;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v554);
            v554 = (char *)&v580 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v554);
            v554 = &__p[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v554);
            if (*(void *)&__p[16]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[16]);
            }
            int v253 = 1;
          }
          else
          {
            Espresso::net::remove_layer(v278, v250);
            int v253 = -1;
          }
          v247 += v253;
          v248 += 9;
        }
        while (v249 + 9 != v246);
      }
    }
    *(void *)std::string __p = &buf[32];
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (*(void *)&buf[24]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[24]);
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&v586[4]);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v585);
    if (v584.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v584.__r_.__value_.__l.__size_);
    }

    uint64_t v112 = v278;
    Espresso::single_match_replace<Espresso::generic_load_constant_kernel>(v278, &__block_literal_global_88_3864);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v287, *((char **)v278 + 24));
    *((void *)v278 + 23) = (char *)v278 + 192;
    *((void *)v278 + 25) = 0;
    *((void *)v278 + 24) = 0;
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(v578, *(void *)v112, *((std::__shared_weak_count **)v112 + 1));
    Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)v578, (uint64_t)v550, (uint64_t)buf);
    if (*(void *)&v578[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v578[8]);
    }
    *((unsigned char *)v278 + 180) = 0;
    Espresso::shape_network_recursive(v278, (Espresso::net *)buf, 0, 0);
    std::string::basic_string[abi:ne180100]<0>(&v584, "make_shape_from_2d_to_4d");
    *(void *)&__p[24] = 0;
    Espresso::net::pprint((uint64_t)v278, (uint64_t)&v584, (uint64_t)__p);
    std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](__p);
    if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v584.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&buf[24], *(char **)&buf[32]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v550, (char *)v550[1]);
  }
  if (v544)
  {
    *((unsigned char *)v112 + 180) = 0;
    Espresso::shape_network_recursive(v112, v287, 0, 0);
    v584.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    v584.__r_.__value_.__l.__size_ = 3221225472;
    v584.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL26make_shape_from_4d_to_convRN8Espresso3netE_block_invoke;
    *(void *)&long long v585 = &__block_descriptor_40_e9_v16__0_v8l;
    *((void *)&v585 + 1) = v278;
    Espresso::single_match_replace<Espresso::generic_load_constant_kernel>(v278, &v584);
    *(void *)v578 = MEMORY[0x1E4F143A8];
    *(void *)&v578[8] = 3221225472;
    *(void *)&v578[16] = ___ZL26make_shape_from_4d_to_convRN8Espresso3netE_block_invoke_2;
    *(void *)&v578[24] = &__block_descriptor_40_e9_v16__0_v8l;
    *(void *)&v578[32] = v278;
    Espresso::single_match_replace<Espresso::generic_fill_kernel>(v278, v578);
    v551 = 0;
    v550[1] = 0;
    v550[0] = &v550[1];
    int v254 = (void *)*((void *)v278 + 80);
    for (i10 = (void *)*((void *)v278 + 81); v254 != i10; v254 += 3)
    {
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v278 + 24), v254))
      {
        *(void *)std::string __p = v254;
        unsigned int v256 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v287, v254, (long long **)__p);
        long long v257 = *(_OWORD *)(v256 + 72);
        *(_OWORD *)std::string buf = *(_OWORD *)(v256 + 56);
        *(_OWORD *)&buf[16] = v257;
        v258 = (const void *)*((void *)v256 + 12);
        *(void *)&buf[32] = *((void *)v256 + 11);
        memset(&buf[40], 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], v258, *((void *)v256 + 13), (uint64_t)(*((void *)v256 + 13) - (void)v258) >> 2);
        *(void *)std::string __p = v254;
        v259 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v550, v254, (long long **)__p);
        long long v260 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v259 + 56) = *(_OWORD *)buf;
        *(_OWORD *)(v259 + 72) = v260;
        *((void *)v259 + 11) = *(void *)&buf[32];
        if (v259 + 56 != buf) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v259 + 96, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(void *)&buf[48] - *(void *)&buf[40]) >> 2);
        }
        if (*(void *)&buf[40])
        {
          *(void *)&buf[48] = *(void *)&buf[40];
          operator delete(*(void **)&buf[40]);
        }
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v287, *((char **)v278 + 24));
    *((void *)v278 + 23) = (char *)v278 + 192;
    *((void *)v278 + 25) = 0;
    *((void *)v278 + 24) = 0;
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v553, *(void *)v278, *((std::__shared_weak_count **)v278 + 1));
    Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v553, (uint64_t)v550, (uint64_t)__p);
    if (v553.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v553.__r_.__value_.__l.__size_);
    }
    *((unsigned char *)v278 + 180) = 0;
    Espresso::shape_network_recursive(v278, (Espresso::net *)__p, 0, 0);
    v261 = (void *)*((void *)v278 + 86);
    for (i11 = (void *)*((void *)v278 + 87); v261 != i11; v261 += 3)
    {
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v278 + 24), v261))
      {
        v554 = v261;
        double v263 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v287, v261, (long long **)&v554);
        long long v264 = *(_OWORD *)(v263 + 72);
        *(_OWORD *)std::string buf = *(_OWORD *)(v263 + 56);
        *(_OWORD *)&buf[16] = v264;
        v265 = (const void *)*((void *)v263 + 12);
        *(void *)&buf[32] = *((void *)v263 + 11);
        memset(&buf[40], 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], v265, *((void *)v263 + 13), (uint64_t)(*((void *)v263 + 13) - (void)v265) >> 2);
        v554 = v261;
        int v266 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v550, v261, (long long **)&v554);
        long long v267 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v266 + 56) = *(_OWORD *)buf;
        *(_OWORD *)(v266 + 72) = v267;
        *((void *)v266 + 11) = *(void *)&buf[32];
        if (v266 + 56 != buf) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v266 + 96, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(void *)&buf[48] - *(void *)&buf[40]) >> 2);
        }
        if (*(void *)&buf[40])
        {
          *(void *)&buf[48] = *(void *)&buf[40];
          operator delete(*(void **)&buf[40]);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v554, "make_shape_from_4d_to_conv");
    *(void *)&buf[24] = 0;
    Espresso::net::pprint((uint64_t)v278, (uint64_t)&v554, (uint64_t)buf);
    std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](buf);
    if (SHIBYTE(v556) < 0) {
      operator delete(v554);
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p[24], *(char **)&__p[32]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, *(char **)&__p[8]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v550, (char *)v550[1]);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "find_shared_weights");
  Espresso::run_custom_pass_on_network((uint64_t *)buf, (uint64_t)v278);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
}

void sub_1927A3C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  STACK[0xDF0] = (unint64_t)&STACK[0x388];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xDF0]);
  if (SLOBYTE(STACK[0xEF7]) < 0) {
    operator delete((void *)STACK[0xEE0]);
  }
  if (*(char *)(v34 - 217) < 0) {
    operator delete(*(void **)(v34 - 240));
  }
  STACK[0xF10] = (unint64_t)&STACK[0xBC8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xF10]);
  if (SLOBYTE(STACK[0xBF7]) < 0) {
    operator delete((void *)STACK[0xBE0]);
  }
  if (SLOBYTE(STACK[0xC17]) < 0) {
    operator delete((void *)STACK[0xC00]);
  }
  if (SLOBYTE(STACK[0xC77]) < 0) {
    operator delete((void *)STACK[0xC60]);
  }
  if (SLOBYTE(STACK[0xC97]) < 0) {
    operator delete((void *)STACK[0xC80]);
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](a25);
  if (STACK[0xE88]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0xE88]);
  }
  if (STACK[0xE78]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0xE78]);
  }
  if (STACK[0xE68]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0xE68]);
  }
  if (SLOBYTE(STACK[0xE5F]) < 0) {
    operator delete((void *)STACK[0xE48]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a26, (void *)STACK[0xE28]);
  if (STACK[0xE18]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0xE18]);
  }
  STACK[0xE10] = (unint64_t)&STACK[0xC98];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xE10]);
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  if (SLOBYTE(STACK[0xCE7]) < 0) {
    operator delete((void *)STACK[0xCD0]);
  }
  STACK[0xE10] = (unint64_t)&STACK[0xCF0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xE10]);
  STACK[0xE10] = (unint64_t)&STACK[0xCB0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xE10]);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::transpose_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  BOOL v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  BOOL v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1927A5C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(std::string *a1, int a2, const void **a3, uint64_t a4)
{
  if (a2)
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v7 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v7 = (size_t)a3[1];
    }
    int v8 = &v18;
    std::string::basic_string[abi:ne180100]((uint64_t)&v18, v7 + 7);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if (v7)
    {
      if (*((char *)a3 + 23) >= 0) {
        int v9 = a3;
      }
      else {
        int v9 = *a3;
      }
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, "__rev__");
    int v10 = *(char *)(a4 + 23);
    if (v10 >= 0) {
      int v11 = (const std::string::value_type *)a4;
    }
    else {
      int v11 = *(const std::string::value_type **)a4;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a4 + 8);
    }
  }
  else
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v13 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v13 = (size_t)a3[1];
    }
    uint64_t v14 = &v18;
    std::string::basic_string[abi:ne180100]((uint64_t)&v18, v13 + 2);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v15 = a3;
      }
      else {
        uint64_t v15 = *a3;
      }
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, "__");
    int v16 = *(char *)(a4 + 23);
    if (v16 >= 0) {
      int v11 = (const std::string::value_type *)a4;
    }
    else {
      int v11 = *(const std::string::value_type **)a4;
    }
    if (v16 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a4 + 8);
    }
  }
  uint64_t v17 = std::string::append(&v18, v11, v12);
  *a1 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1927A5E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::add_constant(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, float a7)
{
  *(void *)&long long v53 = *MEMORY[0x1E4F143B8];
  int v11 = a5 * a4;
  if ((int)(a5 * a4 * a3) < 1)
  {
    unsigned int v30 = a6;
    int v31 = 0;
    char v32 = 1;
    *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = 0x100000001;
    *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 4) = __PAIR64__(a4, a3);
    *(float *)&v29.__r_.__value_.__l.__data_ = a7;
    HIDWORD(v29.__r_.__value_.__r.__words[2]) = a5;
    std::string::basic_string[abi:ne180100]<0>(v43, "fill");
    memset(v26, 0, sizeof(v26));
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v52 = *(std::string *)a2;
    }
    BOOL v23 = 0;
    BOOL v24 = 0;
    BOOL v25 = 0;
    std::string __p = &v23;
    char v41 = 0;
    BOOL v23 = (std::string *)operator new(0x18uLL);
    BOOL v24 = v23;
    BOOL v25 = v23 + 1;
    BOOL v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v25, (long long *)&v52, &v53, v23);
    Espresso::sequential_builder::add_t<Espresso::generic_fill_kernel,Espresso::fill_params_t>(&v27, a1, (uint64_t)v43, a2, (uint64_t)&v29, v26, (uint64_t *)&v23);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    std::string __p = &v23;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    if (SHIBYTE(v44) < 0) {
      operator delete(v43[0]);
    }
  }
  else
  {
    v52.__r_.__value_.__r.__words[0] = 0x100000001;
    v52.__r_.__value_.__l.__size_ = __PAIR64__(a4, a3);
    v52.__r_.__value_.__r.__words[2] = __PAIR64__(a6, a5);
    std::string::basic_string[abi:ne180100]<0>(&__p, "load_constant");
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v50 = *(std::string *)a2;
    }
    uint64_t v34 = 0;
    long long v35 = 0;
    unint64_t v36 = 0;
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    v29.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v34 = (std::string *)operator new(0x18uLL);
    long long v35 = v34;
    unint64_t v36 = v34 + 1;
    long long v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v50, (long long *)&v51, v34);
    uint64_t v12 = a1[12];
    LODWORD(v29.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a1[14] + 8))();
    Espresso::abstract_engine_factory::make_kernel_priv(v12, (uint64_t)(a1 + 14), (uint64_t)&__p, (uint64_t)&v52, (int *)&v29);
    size_t v13 = v47;
    if (!v47
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v29);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v15 = v14;
    int v16 = v48;
    if (v48)
    {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v45 = v13;
      uint64_t v46 = v48;
      if (v48) {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v45 = v13;
      uint64_t v46 = 0;
    }
    memset(&v29, 0, sizeof(v29));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, (uint64_t)v37, v38, 0xAAAAAAAAAAAAAAABLL * ((v38 - (uint64_t)v37) >> 3));
    v43[0] = 0;
    v43[1] = 0;
    uint64_t v44 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v43, (uint64_t)v34, (uint64_t)v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
    Espresso::sequential_builder::add_kernel((uint64_t)a1, &v45, (uint64_t)&__p, a2, (std::string **)&v29, (std::string **)v43);
    char v49 = (std::string *)v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    char v49 = &v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    if (*a1) {
      Espresso::sequential_builder::add_shape_from_kernel(a1, (uint64_t)v47, &v37, (uint64_t *)&v34);
    }
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (v42 < 0) {
      operator delete(__p);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v29, 1, 1, a3, v11);
    std::string::size_type v17 = v29.__r_.__value_.__r.__words[0];
    uint64_t v18 = *(int *)(v29.__r_.__value_.__r.__words[0] + 8);
    for (uint64_t i = 12; i != 24; i += 4)
      v18 *= *(int *)(v29.__r_.__value_.__r.__words[0] + i);
    if (v18)
    {
      uint64_t v20 = *(float **)(v29.__r_.__value_.__r.__words[0] + 24);
      do
      {
        *v20++ = a7;
        --v18;
      }
      while (v18);
    }
    size_t size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
    v33[0] = v17;
    v33[1] = v29.__r_.__value_.__l.__size_;
    if (v29.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v29.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::generic_load_constant_kernel::set_constant_blob(v15, (uint64_t)v33);
    if (size)
    {
      nitro::nitro_function::nitro_function(size);
      nitro::nitro_function::nitro_function(size);
    }
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
  }
}

void sub_1927A63B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  *(void *)(v44 - 128) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 128));
  if (a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9)
{
  *(void *)&long long v82 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v75, a6, 1, 1, 1);
  if (*(void *)a8) {
    memcpy(*(void **)(v75 + 16), (const void *)(*(void *)(*(void *)a8 + 16) + 4 * a9), 4 * a6);
  }
  __asm { FMOV            V0.2S, #1.0 }
  if (**(unsigned char **)a2)
  {
    unint64_t v61 = _D0;
    __int16 v62 = 1;
    memset(v64, 0, sizeof(v64));
    uint64_t v63 = 0;
    uint64_t v65 = 0x1000100010001;
    v66[0] = 0;
    v66[5] = 1;
    int v73 = 0;
    char v74 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    unint64_t v56 = 0;
    uint64_t v57 = 0;
    *(void *)&v58[8] = 0;
    *(void *)&v58[16] = 1;
    *(_OWORD *)&v66[1] = xmmword_192DCA230;
    uint64_t v67 = 0;
    int v68 = 0x10000;
    int v71 = 0;
    __int16 v72 = 1;
    int v59 = a6;
    *(_DWORD *)unint64_t v60 = a5;
    *(_OWORD *)&v60[4] = xmmword_192DCA4A0;
    *(void *)int v58 = 0;
    float32x4_t v22 = *(uint64_t **)(a2 + 8);
    std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v81 = *(std::string *)a3;
    }
    char v48 = 0;
    char v49 = 0;
    std::string v50 = 0;
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
    v79.__r_.__value_.__s.__data_[8] = 0;
    char v48 = (std::string *)operator new(0x18uLL);
    char v49 = v48;
    std::string v50 = v48 + 1;
    char v49 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v50, (long long *)&v81, &v82, v48);
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v79 = *(std::string *)a4;
    }
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = 0;
    float v77 = &v45;
    char v78 = 0;
    uint64_t v45 = (std::string *)operator new(0x18uLL);
    uint64_t v46 = v45;
    int v47 = v45 + 1;
    uint64_t v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47, (long long *)&v79, (long long *)&v80, v45);
    Espresso::sequential_builder::add_t<Espresso::generic_convolution_kernel,Espresso::convolution_uniforms>(&v54, v22, (uint64_t)&__p, a4, (uint64_t)&v56, (uint64_t *)&v48, (uint64_t *)&v45);
    float v77 = &v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (v53 < 0) {
      operator delete(__p);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&__p, 1, 1, a5, a6);
    BOOL v24 = __p;
    memcpy(*((void **)__p + 3), (const void *)(*(void *)(*(void *)a7 + 16) + 4 * a9 * a5), 4 * a5 * (uint64_t)a6);
    uint64_t v25 = v54;
    int v26 = v52;
    long long v43 = v24;
    uint64_t v44 = v52;
    if (v52) {
      atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v25 + 400))(v25, &v43);
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
    uint64_t v27 = v76;
    uint64_t v41 = v75;
    char v42 = v76;
    if (v76) {
      atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v25 + 392))(v25, &v41);
    uint64_t v28 = v42;
    if (v42) {
LABEL_25:
    }
      nitro::nitro_function::nitro_function(v28);
  }
  else
  {
    LOBYTE(v59) = 0;
    *(_DWORD *)&v60[8] = -1;
    *(void *)&v60[12] = _D0;
    uint64_t v67 = 0;
    uint64_t v57 = 1;
    *(_OWORD *)&v58[4] = _D0;
    *(void *)&v64[1] = 0;
    *(void *)unint64_t v60 = 0;
    *(_DWORD *)int v58 = 0;
    *(_DWORD *)&v58[20] = 0;
    memset(v66, 0, sizeof(v66));
    unint64_t v56 = __PAIR64__(a5, a6);
    BOOL v23 = *(uint64_t **)(a2 + 8);
    std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v81 = *(std::string *)a3;
    }
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
    v79.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v38 = (std::string *)operator new(0x18uLL);
    uint64_t v39 = v38;
    unint64_t v40 = v38 + 1;
    uint64_t v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, (long long *)&v81, &v82, v38);
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v79 = *(std::string *)a4;
    }
    long long v35 = 0;
    unint64_t v36 = 0;
    unint64_t v37 = 0;
    float v77 = &v35;
    char v78 = 0;
    long long v35 = (std::string *)operator new(0x18uLL);
    unint64_t v36 = v35;
    unint64_t v37 = v35 + 1;
    unint64_t v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (long long *)&v79, (long long *)&v80, v35);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v54, v23, (uint64_t)&__p, a4, (uint64_t)&v56, (uint64_t *)&v38, (uint64_t *)&v35);
    float v77 = &v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (v53 < 0) {
      operator delete(__p);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(&__p, a5, a6, 1, 1);
    unsigned int v30 = __p;
    memcpy(*((void **)__p + 2), (const void *)(*(void *)(*(void *)a7 + 16) + 4 * a9 * a5), 4 * a5 * (uint64_t)a6);
    uint64_t v25 = v54;
    int v26 = v52;
    long long v33 = v30;
    uint64_t v34 = v52;
    if (v52) {
      atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v25 + 400))(v25, &v33);
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
    uint64_t v27 = v76;
    uint64_t v31 = v75;
    char v32 = v76;
    if (v76) {
      atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v25 + 392))(v25, &v31);
    uint64_t v28 = v32;
    if (v32) {
      goto LABEL_25;
    }
  }
  std::string v29 = v55;
  if (v55) {
    atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = v25;
  a1[1] = v29;
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_1927A6BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36)
{
  *(void *)(v36 - 144) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 144));
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v36 - 168);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  _Unwind_Resume(a1);
}

void sub_1927A6D34()
{
}

void Espresso::sequential_builder::add<Espresso::scatter_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1927A6F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::concat_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1927A7184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::util_unroll_loop(Espresso *this, Espresso::net *a2)
{
  v116[4] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 126)) {
    return;
  }
  uint64_t v2 = this;
  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)this);
  memset(buf, 0, sizeof(buf));
  Espresso::net::setup_script((uint64_t)v2, (uint64_t *)buf, 0);
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  long long v3 = (const void *)*((void *)v2 + 121);
  if (!v3) {
    return;
  }
  if (!v4) {
    return;
  }
  BOOL v5 = v4;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v2 + 122);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v84 = v6;
  Espresso::run_pass_on_network<Espresso::pass_constant_if_conditions>((uint64_t)v2);
  size_t v7 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)v2 + 140, (uint64_t)buf);
  int v8 = v7;
  if (!v7) {
    goto LABEL_136;
  }
  int v9 = (const void *)v7[3];
  int v10 = (std::__shared_weak_count *)v8[4];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v9)
  {
LABEL_136:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v106, "Analysis missing: ");
    char v78 = std::string::append(&v106, (const std::string::value_type *)((unint64_t)"N8Espresso34pass_constant_if_conditions_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    *(void *)&v113[0] = *((void *)&v78->__r_.__value_.__l + 2);
    *(_OWORD *)std::string buf = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)buf);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!v11)
  {
    uint64_t v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v106, "Analysis mismatch: ");
    std::string v81 = std::string::append(&v106, (const std::string::value_type *)((unint64_t)"N8Espresso34pass_constant_if_conditions_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    *(void *)&v113[0] = *((void *)&v81->__r_.__value_.__l + 2);
    *(_OWORD *)std::string buf = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v80, (const std::string *)buf);
    __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v13 = v11;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v10);
    nitro::nitro_function::nitro_function(v10);
  }
  for (uint64_t i = (uint64_t *)*((void *)v13 + 3); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v15 = Espresso::espresso_os_log_subsystem(v11, v12);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = i + 2;
      if (*((char *)i + 39) < 0) {
        uint64_t v16 = (void *)*v16;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&buf[4] = v16;
      _os_log_debug_impl(&dword_1920CB000, v15, OS_LOG_TYPE_DEBUG, "unroll_loop: constant=%s", buf, 0xCu);
    }
  }
  (***((void (****)(uint64_t *__return_ptr))v2 + 2))(&v104);
  *(_OWORD *)long long v101 = 0u;
  long long v102 = 0u;
  int v103 = 1065353216;
  memset(v100, 0, sizeof(v100));
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)size_t v98 = 0u;
  int v99 = 1065353216;
  uint64_t v17 = operator new(0x28uLL);
  *uint64_t v17 = &unk_1EE37C278;
  v17[1] = &v104;
  uint64_t v18 = v5 + 112;
  _OWORD v17[2] = __p;
  v17[3] = v13;
  v17[4] = v100;
  *((void *)&v113[0] + 1) = v17;
  if (v5 + 112 != (char *)buf)
  {
    if (*((char **)v5 + 17) == v18)
    {
      (*(void (**)(char *, uint8_t *))(*(void *)v18 + 24))(v5 + 112, buf);
      (*(void (**)(void))(**((void **)v5 + 17) + 32))(*((void *)v5 + 17));
      *((void *)v5 + 17) = *((void *)&v113[0] + 1);
      *((void *)&v113[0] + 1) = buf;
    }
    else
    {
      *((void *)&v113[0] + 1) = *((void *)v5 + 17);
      *((void *)v5 + 17) = v17;
    }
  }
  uint64_t v19 = std::__function::__value_func<void ()(Espresso::net *,unsigned long)>::~__value_func[abi:ne180100](buf);
  uint64_t v20 = *((void *)v2 + 121);
  std::string::basic_string[abi:ne180100]<0>(v19, "__main__");
  (*(void (**)(uint64_t, uint64_t *, uint8_t *, void, uint64_t))(*(void *)v20 + 16))(v20, &v104, buf, 0, 0xFFFFFFFFLL);
  if (SBYTE7(v113[0]) < 0) {
    operator delete(*(void **)buf);
  }
  (*(void (**)(uint64_t))(*(void *)v104 + 24))(v104);
  for (uint64_t j = (uint64_t)(*((void *)v2 + 5) - *((void *)v2 + 4)) >> 4; j; Espresso::net::remove_layer(v2, j))
    --j;
  *(_DWORD *)std::string buf = 0;
  Espresso::net::insert_layers((uint64_t)v2, (int *)buf, v100);
  std::string::basic_string[abi:ne180100]<0>(buf, "unrolled");
  v116[3] = 0;
  Espresso::net::pprint((uint64_t)v2, (uint64_t)buf, (uint64_t)v116);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v116);
  if (SBYTE7(v113[0]) < 0) {
    operator delete(*(void **)buf);
  }
  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)v2);
  memset(buf, 0, sizeof(buf));
  Espresso::net::setup_script((uint64_t)v2, (uint64_t *)buf, 0);
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  std::string::basic_string[abi:ne180100]<0>(buf, "post_compile");
  v115[3] = 0;
  Espresso::net::pprint((uint64_t)v2, (uint64_t)buf, (uint64_t)v115);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v115);
  if (SBYTE7(v113[0]) < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v22 = *((void *)v2 + 121);
  BOOL v23 = (std::__shared_weak_count *)*((void *)v2 + 122);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v83 = v23;
  if (v22)
  {
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v95, v22 + 184);
  }
  else
  {
    memset(v95, 0, sizeof(v95));
    int v96 = 1065353216;
  }
  int64x2_t v93 = 0uLL;
  unint64_t v94 = 0;
  unint64_t v92 = 0;
  uint64_t v24 = *((void *)v2 + 4);
  if (*((void *)v2 + 5) == v24)
  {
    v106.__r_.__value_.__r.__words[0] = 0;
    goto LABEL_122;
  }
  unint64_t v25 = 0;
  uint64_t v86 = (uint64_t)v2 + 96;
  uint64_t v87 = (uint64_t)v2 + 56;
  long long v85 = v2;
  do
  {
    long long v114 = 0u;
    *(_OWORD *)std::string buf = 0u;
    memset(v113, 0, sizeof(v113));
    long long v26 = *(_OWORD *)(v24 + 16 * v25);
    uint64_t v27 = *(void *)(v24 + 16 * v25 + 8);
    if (v27)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      uint64_t v28 = (std::__shared_weak_count *)*((void *)&v114 + 1);
      long long v114 = v26;
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
    }
    else
    {
      long long v114 = v26;
    }
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
    std::string v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v87, &v92, (uint64_t)&std::piecewise_construct, (uint64_t **)&v106);
    if (buf != (uint8_t *)(v29 + 3)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)buf, (std::string *)v29[3], (std::string *)v29[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[4] - v29[3]) >> 3));
    }
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
    unsigned int v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v86, &v92, (uint64_t)&std::piecewise_construct, (uint64_t **)&v106);
    if ((void *)((char *)v113 + 8) != v30 + 3) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v113 + 8, (std::string *)v30[3], (std::string *)v30[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[4] - v30[3]) >> 3));
    }
    char v31 = 0;
    uint64_t v32 = 0;
    v111[0] = buf;
    v111[1] = (char *)v113 + 8;
    do
    {
      char v88 = v31;
      long long v33 = (uint64_t *)v111[v32];
      uint64_t v35 = *v33;
      uint64_t v34 = v33[1];
      while (v35 != v34)
      {
        if (*(char *)(v35 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)v35, *(void *)(v35 + 8));
        }
        else
        {
          long long v36 = *(_OWORD *)v35;
          v91.__r_.__value_.__r.__words[2] = *(void *)(v35 + 16);
          *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v36;
        }
        Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v106, (uint64_t)&v91);
        if (v106.__r_.__value_.__s.__data_[0])
        {
          if (SHIBYTE(v107) >= 0) {
            size_t v37 = HIBYTE(v107);
          }
          else {
            size_t v37 = v106.__r_.__value_.__r.__words[2];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v90, v37 + 8);
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v38 = &v90;
          }
          else {
            uint64_t v38 = (std::string *)v90.__r_.__value_.__r.__words[0];
          }
          if (v37)
          {
            if (SHIBYTE(v107) >= 0) {
              p_std::string::size_type size = &v106.__r_.__value_.__l.__size_;
            }
            else {
              p_std::string::size_type size = (std::string::size_type *)v106.__r_.__value_.__l.__size_;
            }
            memmove(v38, p_size, v37);
          }
          strcpy((char *)v38 + v37, "_unroll_");
          std::to_string(&v89, __val);
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v40 = &v89;
          }
          else {
            unint64_t v40 = (std::string *)v89.__r_.__value_.__r.__words[0];
          }
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v89.__r_.__value_.__l.__size_;
          }
          char v42 = std::string::append(&v90, (const std::string::value_type *)v40, size);
          std::string::size_type v43 = v42->__r_.__value_.__r.__words[0];
          v110[0] = v42->__r_.__value_.__l.__size_;
          *(void *)((char *)v110 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
          char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v35 + 23) < 0) {
            operator delete(*(void **)v35);
          }
          uint64_t v45 = v110[0];
          *(void *)uint64_t v35 = v43;
          *(void *)(v35 + 8) = v45;
          *(void *)(v35 + 15) = *(void *)((char *)v110 + 7);
          *(unsigned char *)(v35 + 23) = v44;
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v90.__r_.__value_.__l.__data_);
            if (!v22) {
              goto LABEL_82;
            }
          }
          else if (!v22)
          {
            goto LABEL_82;
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v22 + 184), (uint64_t)&v91))
          {
            v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
            uint64_t v46 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22 + 184, (uint64_t)&v91, (uint64_t)&std::piecewise_construct, (long long **)&v90);
            v90.__r_.__value_.__r.__words[0] = v35;
            int v47 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95, v35, (uint64_t)&std::piecewise_construct, (long long **)&v90);
            std::string::operator=((std::string *)(v47 + 5), (const std::string *)(v46 + 5));
          }
        }
LABEL_82:
        if (SHIBYTE(v107) < 0) {
          operator delete((void *)v106.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        v35 += 24;
      }
      char v31 = 1;
      uint64_t v32 = 1;
    }
    while ((v88 & 1) == 0);
    uint64_t v48 = v93.i64[1];
    if (v93.i64[1] >= (unint64_t)v94)
    {
      uint64_t v50 = (v93.i64[1] - v93.i64[0]) >> 6;
      if ((unint64_t)(v50 + 1) >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v51 = (uint64_t)&v94[-v93.i64[0]] >> 5;
      if (v51 <= v50 + 1) {
        unint64_t v51 = v50 + 1;
      }
      if ((unint64_t)&v94[-v93.i64[0]] >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v52 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v51;
      }
      uint64_t v2 = v85;
      unint64_t __val = (unint64_t)&v94;
      if (v52)
      {
        if (v52 >> 58) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v53 = (char *)operator new(v52 << 6);
      }
      else
      {
        char v53 = 0;
      }
      v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
      v106.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[64 * v50];
      v106.__r_.__value_.__r.__words[2] = v106.__r_.__value_.__l.__size_;
      long long v107 = &v53[64 * v52];
      std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::construct[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info const&,void>((void *)v106.__r_.__value_.__l.__size_, (uint64_t *)buf);
      std::string::size_type v54 = v106.__r_.__value_.__l.__size_;
      std::string::size_type v49 = v106.__r_.__value_.__r.__words[2] + 64;
      v106.__r_.__value_.__r.__words[2] += 64;
      uint64_t v55 = v93.i64[1];
      uint64_t v56 = v93.i64[0];
      if (v93.i64[1] == v93.i64[0])
      {
        int64x2_t v58 = vdupq_n_s64(v93.u64[1]);
      }
      else
      {
        do
        {
          *(void *)(v54 - 64) = 0;
          *(void *)(v54 - 56) = 0;
          v54 -= 64;
          *(void *)(v54 + 16) = 0;
          long long v57 = *(_OWORD *)(v55 - 64);
          v55 -= 64;
          *(_OWORD *)std::string::size_type v54 = v57;
          *(void *)(v54 + 16) = *(void *)(v55 + 16);
          *(void *)uint64_t v55 = 0;
          *(void *)(v55 + 8) = 0;
          *(void *)(v55 + 16) = 0;
          *(void *)(v54 + 24) = 0;
          *(void *)(v54 + 32) = 0;
          *(void *)(v54 + 40) = 0;
          *(_OWORD *)(v54 + 24) = *(_OWORD *)(v55 + 24);
          *(void *)(v54 + 40) = *(void *)(v55 + 40);
          *(void *)(v55 + 24) = 0;
          *(void *)(v55 + 32) = 0;
          *(void *)(v55 + 40) = 0;
          *(_OWORD *)(v54 + 48) = *(_OWORD *)(v55 + 48);
          *(void *)(v55 + 48) = 0;
          *(void *)(v55 + 56) = 0;
        }
        while (v55 != v56);
        int64x2_t v58 = v93;
        std::string::size_type v49 = v106.__r_.__value_.__r.__words[2];
      }
      v93.i64[0] = v54;
      v93.i64[1] = v49;
      *(int64x2_t *)&v106.__r_.__value_.__r.__words[1] = v58;
      int v59 = v94;
      unint64_t v94 = v107;
      long long v107 = v59;
      v106.__r_.__value_.__r.__words[0] = v58.i64[0];
      std::__split_buffer<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info> &>::~__split_buffer((uint64_t)&v106);
    }
    else
    {
      std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::construct[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info const&,void>((void *)v93.i64[1], (uint64_t *)buf);
      std::string::size_type v49 = v48 + 64;
      uint64_t v2 = v85;
    }
    v93.i64[1] = v49;
    if (*((void *)&v114 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v114 + 1));
    }
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v113 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
    unint64_t v25 = v92 + 1;
    unint64_t v92 = v25;
    uint64_t v24 = *((void *)v2 + 4);
  }
  while (v25 < (*((void *)v2 + 5) - v24) >> 4);
  uint64_t v60 = v93.i64[0];
  v106.__r_.__value_.__r.__words[0] = 0;
  if (v93.i64[1] != v93.i64[0])
  {
    std::string::size_type v61 = 0;
    do
    {
      std::string::size_type v62 = v60 + (v61 << 6);
      uint64_t v63 = *((void *)v2 + 4);
      uint64_t v65 = *(void *)(v62 + 48);
      uint64_t v64 = *(void *)(v62 + 56);
      if (v64) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
      }
      int64_t v66 = (void *)(v63 + 16 * v61);
      uint64_t v67 = (std::__shared_weak_count *)v66[1];
      *int64_t v66 = v65;
      v66[1] = v64;
      if (v67)
      {
        nitro::nitro_function::nitro_function(v67);
        std::string::size_type v61 = v106.__r_.__value_.__r.__words[0];
      }
      uint64_t v68 = v93.i64[0];
      *(void *)std::string buf = &v106;
      uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v2 + 56, (unint64_t *)&v106, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      uint64_t v70 = (std::string **)(v68 + (v61 << 6));
      uint64_t v71 = (uint64_t)(v69 + 3);
      if ((std::string **)v71 != v70) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v71, *v70, v70[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v70[1] - (char *)*v70) >> 3));
      }
      std::string::size_type v72 = v106.__r_.__value_.__r.__words[0];
      uint64_t v73 = v93.i64[0];
      *(void *)std::string buf = &v106;
      char v74 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v2 + 96, (unint64_t *)&v106, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      std::string::size_type v75 = v73 + (v72 << 6);
      if (v74 != (void *)v75) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v74 + 3), *(std::string **)(v75 + 24), *(std::string **)(v75 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v75 + 32) - *(void *)(v75 + 24)) >> 3));
      }
      std::string::size_type v61 = v106.__r_.__value_.__r.__words[0] + 1;
      v106.__r_.__value_.__r.__words[0] = v61;
      uint64_t v60 = v93.i64[0];
    }
    while (v61 < (v93.i64[1] - v93.i64[0]) >> 6);
  }
LABEL_122:
  std::string::basic_string[abi:ne180100]<0>(buf, "sorted");
  v109[3] = 0;
  Espresso::net::pprint((uint64_t)v2, (uint64_t)buf, (uint64_t)v109);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v109);
  if (SBYTE7(v113[0]) < 0) {
    operator delete(*(void **)buf);
  }
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)v2);
  memset(buf, 0, sizeof(buf));
  Espresso::net::setup_script((uint64_t)v2, (uint64_t *)buf, 0);
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  std::vector<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::~vector[abi:ne180100]((void **)&v93);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v95);
  if (v83) {
    nitro::nitro_function::nitro_function(v83);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v98[0]);
  unint64_t v76 = __p[0];
  __p[0] = 0;
  if (v76) {
    operator delete(v76);
  }
  *(void *)std::string buf = v100;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((void *)v102);
  if (v101[0]) {
    operator delete(v101[0]);
  }
  if (v105) {
    nitro::nitro_function::nitro_function(v105);
  }
  if (v84) {
    nitro::nitro_function::nitro_function(v84);
  }
}

void sub_1927A7ED4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::construct[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,util_chain_concats(Espresso::net &,BOOL)::concat_chain_element const&,void>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  unint64_t v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
}

void sub_1927A8254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::destroy[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,void>(i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t util_chain_concats(Espresso::net &,BOOL)::concat_chain_element::~concat_chain_element(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::const_reference __x)
{
  std::vector<std::string>::pointer end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begiuint64_t n = this->__begin_;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)__position.__i_ - (char *)begin;
    int64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v14 > v11) {
      unint64_t v11 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v11;
    }
    v32.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v15)
    {
      uint64_t v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v15);
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v16 = 0;
    }
    std::__split_buffer<std::string>::pointer v18 = v17 + v13;
    v32.__first_ = v17;
    v32.__begin_ = v18;
    v32.__end_ = v18;
    v32.__end_cap_.__value_ = &v17[v16];
    if (v13 == v16)
    {
      if (v12 < 1)
      {
        if (begin == __position.__i_) {
          unint64_t v20 = 1;
        }
        else {
          unint64_t v20 = 2 * v13;
        }
        v33.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
        uint64_t v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v20);
        std::__split_buffer<std::string>::pointer v23 = v32.__begin_;
        if (v32.__end_ == v32.__begin_)
        {
          int64x2_t v29 = vdupq_n_s64((unint64_t)v32.__begin_);
          unint64_t v25 = &v21[v20 >> 2];
        }
        else
        {
          int64_t v24 = v32.__end_ - v32.__begin_;
          unint64_t v25 = &v21[(v20 >> 2) + v24];
          uint64_t v26 = 24 * v24;
          uint64_t v27 = &v21[v20 >> 2];
          do
          {
            long long v28 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v27->__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
            ++v27;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            ++v23;
            v26 -= 24;
          }
          while (v26);
          int64x2_t v29 = *(int64x2_t *)&v32.__begin_;
        }
        unsigned int v30 = v32.__end_cap_.__value_;
        v33.__first_ = v32.__first_;
        v32.__first_ = v21;
        v32.__begin_ = &v21[v20 >> 2];
        *(int64x2_t *)&v33.__begin_ = v29;
        v32.__end_ = v25;
        v32.__end_cap_.__value_ = &v21[v22];
        v33.__end_cap_.__value_ = v30;
        std::__split_buffer<std::string>::~__split_buffer(&v33);
        std::__split_buffer<std::string>::pointer v18 = v32.__end_;
      }
      else
      {
        uint64_t v19 = v13 + 2;
        if (v13 >= -1) {
          uint64_t v19 = v13 + 1;
        }
        v18 -= v19 >> 1;
        v32.__begin_ = v18;
        v32.__end_ = v18;
      }
    }
    if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v18, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v31 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
      v18->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v31;
    }
    ++v32.__end_;
    std::vector<std::string>::__swap_out_circular_buffer(this, &v32, (std::vector<std::string>::pointer)__position.__i_);
    std::__split_buffer<std::string>::~__split_buffer(&v32);
  }
  else if (__position.__i_ == end)
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this, (long long *)__x);
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (__position.__i_ <= __x) {
      __x += this->__end_ > __x;
    }
    return (std::vector<std::string>::iterator)std::string::operator=((std::string *)__position.__i_, __x);
  }
  return v9;
}

void sub_1927A85C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int *std::__introsort<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  std::vector<std::string>::iterator v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          std::vector<std::string>::iterator v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                int v40 = *v11;
                if (*v10 > *v11)
                {
                  *unint64_t v11 = *v10;
                  *uint64_t v10 = v40;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v41 = v11 + 2;
                char v42 = v11 + 3;
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v11, v11 + 1, v11 + 2, v11 + 3);
                int v43 = v11[3];
                if (*v10 > v43)
                {
                  *char v42 = *v10;
                  *uint64_t v10 = v43;
                  int v44 = *v42;
                  int v45 = *v41;
                  if (*v42 > *v41)
                  {
                    int *v41 = v44;
                    *char v42 = v45;
                    int v46 = v11[1];
                    if (v44 > v46)
                    {
                      v11[1] = v44;
                      v11[2] = v46;
                      int v47 = *v11;
                      if (v44 > *v11)
                      {
                        *unint64_t v11 = v44;
                        v11[1] = v47;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            uint64_t v48 = v11 + 1;
            BOOL v50 = v11 == a2 || v48 == a2;
            if (a4)
            {
              if (!v50)
              {
                uint64_t v51 = 4;
                unint64_t v52 = v11;
                do
                {
                  int v54 = *v52;
                  int v53 = v52[1];
                  unint64_t v52 = v48;
                  if (v53 > v54)
                  {
                    uint64_t v55 = v51;
                    do
                    {
                      *(int *)((char *)v11 + v55) = v54;
                      uint64_t v56 = v55 - 4;
                      if (v55 == 4)
                      {
                        long long v57 = v11;
                        goto LABEL_81;
                      }
                      int v54 = *(int *)((char *)v11 + v55 - 8);
                      v55 -= 4;
                    }
                    while (v53 > v54);
                    long long v57 = (int *)((char *)v11 + v56);
LABEL_81:
                    *long long v57 = v53;
                  }
                  uint64_t v48 = v52 + 1;
                  v51 += 4;
                }
                while (v52 + 1 != a2);
              }
            }
            else if (!v50)
            {
              do
              {
                int v90 = *v9;
                int v89 = v9[1];
                std::vector<std::string>::iterator v9 = v48;
                if (v89 > v90)
                {
                  do
                  {
                    int *v48 = v90;
                    int v90 = *(v48 - 2);
                    --v48;
                  }
                  while (v89 > v90);
                  int *v48 = v89;
                }
                uint64_t v48 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v58 = (v13 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  std::string::size_type v62 = &v11[v61];
                  int v63 = *v62;
                  if (2 * v60 + 2 < (uint64_t)v13)
                  {
                    int v64 = v62[1];
                    BOOL v65 = v63 <= v64;
                    if (v63 >= v64) {
                      int v63 = v62[1];
                    }
                    if (!v65)
                    {
                      ++v62;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  int64_t v66 = &v11[v60];
                  int v67 = *v66;
                  if (v63 <= *v66)
                  {
                    do
                    {
                      uint64_t v68 = v62;
                      *int64_t v66 = v63;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v69 = (2 * v61) | 1;
                      std::string::size_type v62 = &v11[v69];
                      uint64_t v61 = 2 * v61 + 2;
                      int v63 = *v62;
                      if (v61 < (uint64_t)v13)
                      {
                        uint64_t result = v62 + 1;
                        int v70 = v62[1];
                        BOOL v71 = v63 <= v70;
                        if (v63 >= v70) {
                          int v63 = v62[1];
                        }
                        if (v71) {
                          uint64_t v61 = v69;
                        }
                        else {
                          ++v62;
                        }
                      }
                      else
                      {
                        uint64_t v61 = v69;
                      }
                      int64_t v66 = v68;
                    }
                    while (v63 <= v67);
                    int *v68 = v67;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v72 = (unint64_t)v12 >> 2;
              do
              {
                uint64_t v73 = 0;
                int v74 = *v11;
                std::string::size_type v75 = v11;
                do
                {
                  unint64_t v76 = &v75[v73];
                  int v79 = v76[1];
                  float v77 = v76 + 1;
                  int v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v73 = 2 * v73 + 2;
                  if (v73 >= v72)
                  {
                    uint64_t v73 = v80;
                  }
                  else
                  {
                    int v81 = v77[1];
                    BOOL v82 = v78 <= v81;
                    if (v78 >= v81) {
                      int v78 = v77[1];
                    }
                    if (v82) {
                      uint64_t v73 = v80;
                    }
                    else {
                      ++v77;
                    }
                  }
                  int *v75 = v78;
                  std::string::size_type v75 = v77;
                }
                while (v73 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
                if (v77 == --a2)
                {
                  *float v77 = v74;
                }
                else
                {
                  *float v77 = *a2;
                  *a2 = v74;
                  uint64_t v83 = (char *)v77 - (char *)v11 + 4;
                  if (v83 >= 5)
                  {
                    unint64_t v84 = (((unint64_t)v83 >> 2) - 2) >> 1;
                    long long v85 = &v11[v84];
                    int v86 = *v85;
                    int v87 = *v77;
                    if (*v85 > *v77)
                    {
                      do
                      {
                        char v88 = v85;
                        *float v77 = v86;
                        if (!v84) {
                          break;
                        }
                        unint64_t v84 = (v84 - 1) >> 1;
                        long long v85 = &v11[v84];
                        int v86 = *v85;
                        float v77 = v88;
                      }
                      while (*v85 > v87);
                      *char v88 = v87;
                    }
                  }
                }
                BOOL v65 = v72-- <= 2;
              }
              while (!v65);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v15 - 1, v15, &v9[v14 + 1]);
            int v16 = *v9;
            int *v9 = *v15;
            int *v15 = v16;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          int v17 = *v9;
          std::__split_buffer<std::string>::pointer v18 = v9;
          if (a4) {
            break;
          }
          std::__split_buffer<std::string>::pointer v18 = v9;
          if (*(v9 - 1) > v17) {
            break;
          }
          if (v17 <= *v10)
          {
            std::__split_buffer<std::string> v32 = v9 + 1;
            do
            {
              unint64_t v11 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 <= *v11);
          }
          else
          {
            unint64_t v11 = v9;
            do
            {
              int v31 = v11[1];
              ++v11;
            }
            while (v17 <= v31);
          }
          std::__split_buffer<std::string> v33 = a2;
          if (v11 < a2)
          {
            std::__split_buffer<std::string> v33 = a2;
            do
              int v34 = *--v33;
            while (v17 > v34);
          }
          if (v11 < v33)
          {
            int v35 = *v11;
            int v36 = *v33;
            do
            {
              *unint64_t v11 = v36;
              int *v33 = v35;
              do
              {
                int v37 = v11[1];
                ++v11;
                int v35 = v37;
              }
              while (v17 <= v37);
              do
              {
                int v38 = *--v33;
                int v36 = v38;
              }
              while (v17 > v38);
            }
            while (v11 < v33);
          }
          uint64_t v39 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            int *v9 = *v39;
          }
          a4 = 0;
          *uint64_t v39 = v17;
        }
        do
        {
          uint64_t v19 = v18;
          int v21 = v18[1];
          ++v18;
          int v20 = v21;
        }
        while (v21 > v17);
        uint64_t v22 = a2;
        if (v19 == v9)
        {
          uint64_t v22 = a2;
          do
          {
            if (v18 >= v22) {
              break;
            }
            int v24 = *--v22;
          }
          while (v24 <= v17);
        }
        else
        {
          do
            int v23 = *--v22;
          while (v23 <= v17);
        }
        if (v18 < v22)
        {
          int v25 = *v22;
          uint64_t v26 = v18;
          uint64_t v27 = v22;
          do
          {
            int *v26 = v25;
            int *v27 = v20;
            do
            {
              uint64_t v19 = v26;
              int v28 = v26[1];
              ++v26;
              int v20 = v28;
            }
            while (v28 > v17);
            do
            {
              int v29 = *--v27;
              int v25 = v29;
            }
            while (v29 <= v17);
          }
          while (v26 < v27);
        }
        if (v19 != v9) {
          int *v9 = *v19;
        }
        *uint64_t v19 = v17;
        if (v18 >= v22) {
          break;
        }
LABEL_30:
        uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *,false>(v9, v19, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v19 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, v19);
      unint64_t v11 = v19 + 1;
      uint64_t result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v19 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v19;
    if (!v30) {
      continue;
    }
    return result;
  }
}

void std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::destroy[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,void>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void ***std::vector<util_chain_concats(Espresso::net &,BOOL)::concat_chain,std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain>>::~vector[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      BOOL v5 = a1[1];
      do
      {
        unint64_t v7 = *(v5 - 4);
        v5 -= 4;
        unint64_t v6 = v7;
        if (v7)
        {
          uint64_t v8 = (uint64_t)*(v3 - 3);
          std::vector<std::string>::iterator v9 = v6;
          if ((void *)v8 != v6)
          {
            do
            {
              v8 -= 64;
              std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::destroy[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,void>(v8);
            }
            while ((void *)v8 != v6);
            std::vector<std::string>::iterator v9 = *v5;
          }
          *(v3 - 3) = v6;
          operator delete(v9);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ___ZL26make_shape_from_4d_to_convRN8Espresso3netE_block_invoke(uint64_t a1, int *a2)
{
  BOOL v4 = (int *)(*(uint64_t (**)(void))(**(void **)a2 + 384))(*(void *)a2);
  int v6 = *v4;
  int v5 = v4[1];
  int v7 = v4[2];
  if (v5 == 1) {
    int v9 = 1;
  }
  else {
    int v9 = v4[4];
  }
  if (v5 == 1) {
    int v10 = v4[4];
  }
  else {
    int v10 = v4[1];
  }
  int v8 = v4[3];
  *(_DWORD *)(*(uint64_t (**)(void))(**(void **)a2 + 384))(*(void *)a2) = v8;
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 384))() + 4) = v10;
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 384))() + 8) = v7;
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 384))() + 12) = v6;
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 384))() + 16) = v9;
  if (v9 == 1) {
    int v11 = 4;
  }
  else {
    int v11 = 5;
  }
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 384))() + 20) = v11;
  uint64_t v12 = *(void *)(a1 + 32);
  unint64_t v13 = a2[14];
  unint64_t v15 = v13;
  unint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12 + 96, v13, &v15);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)(v12 + 184), (void *)v14[3]);
}

void ___ZL26make_shape_from_4d_to_convRN8Espresso3netE_block_invoke_2(uint64_t a1, int *a2)
{
  BOOL v4 = (_DWORD *)(*(uint64_t (**)(void))(**(void **)a2 + 320))(*(void *)a2);
  int v6 = v4[1];
  int v5 = v4[2];
  int v7 = v4[3];
  if (v5 == 1) {
    int v9 = 1;
  }
  else {
    int v9 = v4[5];
  }
  if (v5 == 1) {
    int v10 = v4[5];
  }
  else {
    int v10 = v4[2];
  }
  int v8 = v4[4];
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 320))(*(void *)a2) + 4) = v8;
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 320))() + 8) = v10;
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 320))() + 12) = v7;
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 320))() + 16) = v6;
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 320))() + 20) = v9;
  if (v9 == 1) {
    int v11 = 4;
  }
  else {
    int v11 = 5;
  }
  *(_DWORD *)((*(uint64_t (**)(void))(**(void **)a2 + 320))() + 24) = v11;
  uint64_t v12 = *(void *)(a1 + 32);
  unint64_t v13 = a2[14];
  unint64_t v15 = v13;
  unint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12 + 96, v13, &v15);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)(v12 + 184), (void *)v14[3]);
}

uint64_t ___ZL24make_shape_from_4d_to_2dRN8Espresso3netE_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v3 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2);
  int v4 = v3[2];
  int v5 = v3[3];
  int v6 = v3[4];
  *(_DWORD *)(*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2) = v4;
  *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 4) = v5;
  *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 8) = v6;
  *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 12) = 1;
  *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 16) = 1;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 384))();
  *(_DWORD *)(result + 20) = 3;
  return result;
}

_DWORD *___ZL24make_shape_from_4d_to_2dRN8Espresso3netE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2);
  *result -= 2;
  return result;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(int *result, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *result;
  int v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      int v6 = *result;
      if (*a2 > *result)
      {
        *uint64_t result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*a3 <= v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v5;
    }
    *a3 = v4;
  }
  return result;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a2, a3);
  int v9 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (*a3 > *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      int v11 = *a1;
      if (*a2 > *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 > *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      int v17 = a1 + 2;
      std::__split_buffer<std::string>::pointer v18 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3);
      int v19 = *(a2 - 1);
      int v20 = a1[3];
      if (v19 > v20)
      {
        *std::__split_buffer<std::string>::pointer v18 = v19;
        *(a2 - 1) = v20;
        int v21 = *v18;
        int v22 = *v17;
        if (*v18 > *v17)
        {
          *int v17 = v21;
          *std::__split_buffer<std::string>::pointer v18 = v22;
          int v23 = a1[1];
          if (v21 > v23)
          {
            a1[1] = v21;
            a1[2] = v23;
            int v24 = *a1;
            if (v21 > *a1)
            {
              *a1 = v21;
              a1[1] = v24;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (*v9 > *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        int v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 <= v13)
        {
          int v16 = (int *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      int v16 = a1;
LABEL_13:
      int *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()(uint64_t a1)
{
  v13[0] = 0;
  v13[1] = 0;
  int v12 = v13;
  uint64_t v2 = *(long long **)(a1 + 640);
  for (uint64_t i = *(long long **)(a1 + 648); v2 != i; v2 = (long long *)((char *)v2 + 24))
  {
    v10[0] = v2;
    uint64_t v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), v2, v10);
    v10[0] = v2;
    int v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v12, v2, v10);
    long long v6 = *(_OWORD *)(v4 + 56);
    long long v7 = *(_OWORD *)(v4 + 72);
    *((void *)v5 + 11) = *((void *)v4 + 11);
    *(_OWORD *)(v5 + 72) = v7;
    *(_OWORD *)(v5 + 56) = v6;
    if (v5 != v4) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5 + 96, *((char **)v4 + 12), *((void *)v4 + 13), (uint64_t)(*((void *)v4 + 13) - *((void *)v4 + 12)) >> 2);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 184, *(char **)(a1 + 192));
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v8, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
  Espresso::compute_network_shape_starting_from_data_shapes(&v8, (uint64_t)&v12, (uint64_t)v10);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  *(unsigned char *)(a1 + 180) = 0;
  Espresso::shape_network_recursive((Espresso *)a1, (Espresso::net *)v10, 0, 0);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v11, v11[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v10, (char *)v10[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v12, v13[0]);
}

void sub_1927A9804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
}

void std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::construct[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info const&,void>(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 3, a2[3], a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 3));
  uint64_t v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1927A98D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::destroy[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,void>(i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **std::vector<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 64;
        std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::destroy[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,void>(v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::destroy[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,void>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void *std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso16util_unroll_loopERNS_3netEbbE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  *(void *)&long long v106 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  unint64_t v102 = *a3;
  unint64_t v5 = *(void *)(v4 + 32) + 16 * v102;
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(void *)(*(void *)v5 + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v7 + 240), (unsigned __int8 *)&__p);
  if (v8) {
    int v9 = *((_DWORD *)v8 + 10);
  }
  else {
    int v9 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *(void *)v5;
  uint64_t v11 = (uint64_t *)(*(void *)v5 + 40);
  int v12 = *(unsigned __int8 *)(*(void *)v5 + 63);
  if ((*(char *)(*(void *)v5 + 63) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)v5 + 40;
    if (v12 != 6)
    {
      uint64_t v14 = (int *)(*(void *)v5 + 40);
      if (v12 != 7)
      {
LABEL_29:
        if (v12 != 7)
        {
          if (v12 != 11) {
            goto LABEL_51;
          }
          goto LABEL_45;
        }
        int v24 = (int *)(*(void *)v5 + 40);
        goto LABEL_35;
      }
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(v10 + 48);
  if (v15 == 6)
  {
    uint64_t v13 = *v11;
LABEL_12:
    int v16 = *(_DWORD *)v13;
    int v17 = *(unsigned __int16 *)(v13 + 4);
    BOOL v19 = v16 == 1700750947 && v17 == 25710;
    v9 |= v19;
    if ((v12 & 0x80) == 0) {
      goto LABEL_51;
    }
    uint64_t v15 = *(void *)(v10 + 48);
  }
  if (v15 != 7) {
    goto LABEL_43;
  }
  uint64_t v14 = (int *)*v11;
LABEL_22:
  int v20 = *v14;
  int v21 = *(int *)((char *)v14 + 3);
  BOOL v23 = v20 == 1784637027 && v21 == 1886221674;
  v9 |= v23;
  if ((v12 & 0x80) == 0) {
    goto LABEL_29;
  }
  uint64_t v15 = *(void *)(v10 + 48);
  if (v15 == 7)
  {
    int v24 = (int *)*v11;
LABEL_35:
    int v25 = *v24;
    int v26 = *(int *)((char *)v24 + 3);
    BOOL v28 = v25 == 1818191459 && v26 == 1886351212;
    v9 |= v28;
    if ((v12 & 0x80) == 0) {
      goto LABEL_51;
    }
    uint64_t v15 = *(void *)(v10 + 48);
  }
LABEL_43:
  if (v15 != 11)
  {
LABEL_51:
    BOOL v32 = 0;
    goto LABEL_52;
  }
  uint64_t v11 = (uint64_t *)*v11;
LABEL_45:
  uint64_t v29 = *v11;
  uint64_t v30 = *(uint64_t *)((char *)v11 + 3);
  BOOL v32 = v29 == 0x747269765F696870 && v30 == 0x6C6175747269765FLL;
LABEL_52:
  if (v9 | v32)
  {
    uint64_t v33 = *(void *)(*(void *)(v4 + 32) + 16 * v102);
    (*(void (**)(uint64_t, void))(*(void *)v33 + 8))(v33, *(void *)(a1 + 8));
  }
  else
  {
    uint64_t v34 = *(void *)(a1 + 16);
    *(void *)std::string buf = v10 + 16;
    int v35 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (unsigned __int8 *)(v10 + 16), (uint64_t)&std::piecewise_construct, (long long **)buf);
    int v36 = *((_DWORD *)v35 + 10);
    *((_DWORD *)v35 + 10) = v36 + 1;
    std::to_string(&__p, v36);
    int v37 = std::string::insert(&__p, 0, "__unroll_");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    std::string::size_type v101 = v37->__r_.__value_.__r.__words[2];
    long long v100 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    memset(v99, 0, sizeof(v99));
    uint64_t v39 = (char *)operator new(0xF8uLL);
    *((void *)v39 + 1) = 0;
    *((void *)v39 + 2) = 0;
    *(void *)uint64_t v39 = &unk_1EE389DF0;
    *((void *)v39 + 3) = &unk_1EE36C758;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
    *(_OWORD *)(v39 + 72) = 0u;
    *(_OWORD *)(v39 + 88) = 0u;
    *(_OWORD *)(v39 + 104) = 0u;
    *(_OWORD *)(v39 + 120) = 0u;
    *(_OWORD *)(v39 + 136) = 0u;
    *(_OWORD *)(v39 + 152) = 0u;
    *(_OWORD *)(v39 + 161) = 0u;
    *((_OWORD *)v39 + 13) = 0u;
    *((_OWORD *)v39 + 14) = 0u;
    *((void *)v39 + 30) = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v39 + 24);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(*(void *)v5 + 16), (const void **)&v100, (uint64_t)buf);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v41 = __p.__r_.__value_.__l.__size_ + 16;
    if (*(char *)(__p.__r_.__value_.__l.__size_ + 39) < 0)
    {
      operator delete(*(void **)v41);
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v42 = *(void *)&buf[16];
    *(_OWORD *)std::string::size_type v41 = *(_OWORD *)buf;
    *(void *)(v41 + 16) = v42;
    std::string::operator=((std::string *)(size + 40), (const std::string *)(*(void *)v5 + 40));
    std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
    *(void *)(__p.__r_.__value_.__l.__size_ + 8) = *(void *)(*(void *)v5 + 8);
    uint64_t v45 = *(void *)(v6 + 64);
    uint64_t v44 = *(void *)(v6 + 72);
    if (v44) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
    }
    int v46 = *(std::__shared_weak_count **)(v43 + 72);
    *(void *)(v43 + 64) = v45;
    *(void *)(v43 + 72) = v44;
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
    int v47 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4 + 56, &v102, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
    if (&__p != v47) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v99, (std::string *)v47[1].__r_.__value_.__l.__data_, (std::string *)v47[1].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47[1].__r_.__value_.__l.__size_ - v47[1].__r_.__value_.__r.__words[0]) >> 3));
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
    uint64_t v48 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4 + 96, &v102, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
    if (&v99[1] != &v48[1]) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v99[1], v48[1].__begin_, v48[1].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v48[1].__end_ - (char *)v48[1].__begin_) >> 3));
    }
    std::string::size_type v49 = *(const void **)(v6 + 64);
    if (v49)
    {
      if (v50)
      {
        uint64_t v51 = v50;
        unint64_t v52 = *(std::__shared_weak_count **)(v6 + 72);
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v50 + 320))(v50) + 16) == 1
          && *(void *)(*(void *)v5 + 88) - *(void *)(*(void *)v5 + 80) == 32)
        {
          uint64_t v53 = *(void *)(a1 + 24);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
          int v54 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4 + 56, &v102, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
          if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v53 + 8), (unsigned __int8 *)(v54[3] + 24)))
          {
            uint64_t v55 = *(void *)(*(void *)v5 + 80);
            uint64_t v56 = *(std::__shared_weak_count **)(v55 + 24);
            v95[0] = *(void *)(v55 + 16);
            v95[1] = v56;
            if (v56) {
              atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::sync_copy_to_host(&v96, v95);
            if (v56) {
              nitro::nitro_function::nitro_function(v56);
            }
            uint64_t v57 = (*(uint64_t (**)(void *))(*(void *)v51 + 320))(v51);
            long long v58 = *(_OWORD *)v57;
            *(void *)&uint8_t buf[16] = *(void *)(v57 + 16);
            *(_OWORD *)std::string buf = v58;
            *(_DWORD *)&uint8_t buf[16] = 0;
            LODWORD(v58) = **(_DWORD **)(v96 + 24);
            *(_DWORD *)&buf[4] = (int)(float)(*(float *)&v58 + 0.5);
            *(_DWORD *)&buf[8] = (int)(float)((float)(*(float *)&v58 + (float)*(int *)&buf[20]) + 0.5);
            Espresso::abstract_engine_factory::shared(&v91);
            int64_t v59 = v91;
            std::string::basic_string[abi:ne180100]<0>(&__str, "slice");
            LODWORD(v89) = 0;
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v59, v4 + 16, (uint64_t)&__str, (uint64_t)buf, (int *)&v89);
            int64_t v60 = lpsrc;
            if (lpsrc
            {
              uint64_t v61 = v94;
              if (v94) {
                atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              uint64_t v61 = 0;
            }
            std::string::size_type v62 = __p.__r_.__value_.__l.__size_;
            int v63 = *(std::__shared_weak_count **)(__p.__r_.__value_.__l.__size_ + 72);
            *(void *)(__p.__r_.__value_.__l.__size_ + 64) = v60;
            *(void *)(v62 + 72) = v61;
            if (v63) {
              nitro::nitro_function::nitro_function(v63);
            }
            if (v94) {
              nitro::nitro_function::nitro_function(v94);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (v92) {
              nitro::nitro_function::nitro_function(v92);
            }
            if (SHIBYTE(v99[0].__begin_->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, v99[0].__begin_->__r_.__value_.__l.__data_, v99[0].__begin_->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v64 = *(_OWORD *)&v99[0].__begin_->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v99[0].__begin_->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v64;
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v99, &__str, &v106, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (v97) {
              nitro::nitro_function::nitro_function(v97);
            }
          }
        }
        if (v52) {
          nitro::nitro_function::nitro_function(v52);
        }
      }
      BOOL v65 = *(const void **)(v6 + 64);
      if (v65)
      {
        if (v66)
        {
          int v67 = v66;
          uint64_t v68 = *(std::__shared_weak_count **)(v6 + 72);
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*(unsigned char *)((*(uint64_t (**)(void *))(*(void *)v66 + 320))(v66) + 21))
          {
            if (*(void *)(*(void *)v5 + 88) - *(void *)(*(void *)v5 + 80) == 48)
            {
              uint64_t v69 = *(void *)(a1 + 24);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
              int v70 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4 + 56, &v102, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
              if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v69 + 8), (unsigned __int8 *)(v70[3] + 24)))
              {
                uint64_t v71 = *(void *)(*(void *)v5 + 80);
                uint64_t v72 = *(std::__shared_weak_count **)(v71 + 24);
                lpsrc = *(void **)(v71 + 16);
                unint64_t v94 = v72;
                if (v72) {
                  atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::sync_copy_to_host(&v96, &lpsrc);
                if (v72) {
                  nitro::nitro_function::nitro_function(v72);
                }
                uint64_t v73 = (*(uint64_t (**)(void *))(*(void *)v67 + 320))(v67);
                long long v74 = *(_OWORD *)v73;
                *(void *)&uint8_t buf[16] = *(void *)(v73 + 16);
                *(_OWORD *)std::string buf = v74;
                *(_DWORD *)&uint8_t buf[16] = (int)**(float **)(v96 + 24);
                Espresso::abstract_engine_factory::shared(&v89);
                uint64_t v75 = v89;
                std::string::basic_string[abi:ne180100]<0>(&__str, "scatter");
                int v88 = 0;
                Espresso::abstract_engine_factory::make_kernel_priv(v75, v4 + 16, (uint64_t)&__str, (uint64_t)buf, &v88);
                unint64_t v76 = v91;
                if (v91
                {
                  float v77 = v92;
                  if (v92) {
                    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  float v77 = 0;
                }
                std::string::size_type v78 = __p.__r_.__value_.__l.__size_;
                int v79 = *(std::__shared_weak_count **)(__p.__r_.__value_.__l.__size_ + 72);
                *(void *)(__p.__r_.__value_.__l.__size_ + 64) = v76;
                *(void *)(v78 + 72) = v77;
                if (v79) {
                  nitro::nitro_function::nitro_function(v79);
                }
                if (v92) {
                  nitro::nitro_function::nitro_function(v92);
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (v90) {
                  nitro::nitro_function::nitro_function(v90);
                }
                if (v97) {
                  nitro::nitro_function::nitro_function(v97);
                }
              }
            }
          }
          if (v68) {
            nitro::nitro_function::nitro_function(v68);
          }
        }
      }
    }
    uint64_t v80 = *(void *)(a1 + 32);
    unint64_t v81 = *(void *)(v80 + 8);
    if (v81 >= *(void *)(v80 + 16))
    {
      uint64_t v83 = (Espresso *)std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(*(int64x2_t **)(a1 + 32), (uint64_t)&__p);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(*(void *)(v80 + 8), (uint64_t)&__p);
      uint64_t v83 = (Espresso *)(v81 + 72);
      *(void *)(v80 + 8) = v81 + 72;
    }
    *(void *)(v80 + 8) = v83;
    unint64_t v84 = Espresso::espresso_os_log_subsystem(v83, v82);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v85 = *(void *)(*(void *)(v4 + 32) + 16 * v102);
      int v86 = (void *)(v85 + 40);
      if (*(char *)(v85 + 63) < 0) {
        int v86 = (void *)*v86;
      }
      int v87 = (void *)(v85 + 16);
      if (*(char *)(v85 + 39) < 0) {
        int v87 = (void *)*v87;
      }
      *(_DWORD *)std::string buf = 134218498;
      *(void *)&buf[4] = v102;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v86;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v104 = v87;
      _os_log_debug_impl(&dword_1920CB000, v84, OS_LOG_TYPE_DEBUG, "Unroll: %zu %s %s\n", buf, 0x20u);
    }

    *(void *)std::string buf = &v99[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)std::string buf = v99;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (__p.__r_.__value_.__r.__words[2]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
    }
    if (SHIBYTE(v101) < 0) {
      operator delete((void *)v100);
    }
  }
}

void sub_1927AA564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  *(void *)(v37 + 104) = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 160));
  *(void *)(v37 + 104) = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 160));
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a36 < 0) {
    operator delete(*(void **)(v37 + 72));
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE37C278;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::~__func()
{
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389958;
  *((void *)v10 + 3) = &unk_1EE36BED0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  __n128 result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  *((void *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_1927AA828(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_fill_kernel,Espresso::fill_params_t>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14 = (uint64_t)(a2 + 14);
  uint64_t v15 = a2[12];
  LODWORD(v24.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v14, a3, a5, (int *)&v24);
  int v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::__split_buffer<std::string>::pointer v18 = v26;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    int v22 = v16;
    BOOL v23 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v22 = v16;
    BOOL v23 = 0;
  }
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, &v22, a3, a4, v21, v20);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)a6, a7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
}

void sub_1927AAAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_lstm_atomizer::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_lstm_atomizer::~pass_lstm_atomizer(Espresso::pass_lstm_atomizer *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_lstm_atomizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_lstm_atomizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3867E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_lstm_atomizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3867E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::report_benchmark_result(uint64_t a1, const char *a2, uint64_t *a3, const char *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  {
    Espresso::report_benchmark_result(Espresso::benchmark_result,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&)::skip_report_benchmark___n128 result = (uint64_t)getenv("ESPRESSO_SKIP_REPORT_BENCHMARK_RESULT");
  }
  if (!Espresso::report_benchmark_result(Espresso::benchmark_result,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&)::skip_report_benchmark_result)
  {
    if (*(char *)(a7 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
    }
    else {
      std::string v104 = *(std::string *)a7;
    }
    if (*(char *)(a6 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
    }
    else {
      std::string v103 = *(std::string *)a6;
    }
    v101[0] = 0;
    v101[1] = 0;
    uint64_t v102 = 0;
    v99[0] = 0;
    v99[1] = 0;
    uint64_t v100 = 0;
    v97[0] = 0;
    v97[1] = 0;
    uint64_t v98 = 0;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v104.__r_.__value_.__l.__size_) {
        goto LABEL_15;
      }
    }
    else if (*((unsigned char *)&v104.__r_.__value_.__s + 23))
    {
      goto LABEL_15;
    }
    MEMORY[0x192FF0F50](&v104, "http://polluce.apple.com:18888/");
    uint64_t v13 = getenv("ESPRESSO_PERF_SERVER");
    if (v13) {
      MEMORY[0x192FF0F50](&v104, v13);
    }
LABEL_15:
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v103.__r_.__value_.__l.__size_)
      {
LABEL_19:
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v134 = 0u;
        long long v135 = 0u;
        long long v132 = 0u;
        long long v133 = 0u;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        long long v126 = 0u;
        long long v127 = 0u;
        long long __s = 0u;
        long long v125 = 0u;
        *(void *)&long long v108 = 256;
        sysctlbyname("hw.model", &__s, (size_t *)&v108, 0, 0);
        MEMORY[0x192FF0F50](&v103, &__s);
      }
    }
    else if (!*((unsigned char *)&v103.__r_.__value_.__s + 23))
    {
      goto LABEL_19;
    }
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long __s = 0u;
    long long v125 = 0u;
    v95[0] = 256;
    sysctlbyname("kern.osversion", &__s, v95, 0, 0);
    MEMORY[0x192FF0F50](v101, &__s);
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    v93[0] = 256;
    sysctlbyname("machdep.cpu.brand_string", &v108, v93, 0, 0);
    MEMORY[0x192FF0F50](v99, &v108);
    MEMORY[0x192FF0F50](v97, Espresso::context_metal::last_device_name);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v104.__r_.__value_.__l.__size_;
    }
    p_s = &__s;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, size + 16);
    if (SBYTE7(v125) < 0) {
      p_s = (long long *)__s;
    }
    if (size)
    {
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v16 = &v104;
      }
      else {
        int v16 = (std::string *)v104.__r_.__value_.__r.__words[0];
      }
      memmove(p_s, v16, size);
    }
    strcpy((char *)p_s + size, "result/add/json/");
    int v17 = [NSString stringWithUTF8String:"3402.5.1"];
    std::__split_buffer<std::string>::pointer v18 = [v17 componentsSeparatedByString:@"-"];

    long long v108 = 0uLL;
    *(void *)&long long v109 = 0;
    int v87 = v18;
    std::string::basic_string[abi:ne180100]<0>(v95, "3402.5.1");
    if ([v18 count] == 2)
    {
      id v19 = [v18 objectAtIndexedSubscript:0];
      MEMORY[0x192FF0F50](&v108, [v19 UTF8String]);

      id v20 = [v18 objectAtIndexedSubscript:1];
      MEMORY[0x192FF0F50](v95, [v20 UTF8String]);
    }
    std::string::basic_string[abi:ne180100]<0>(v93, "Espresso");
    v106[0] = @"commitid";
    if (v96 >= 0) {
      int v21 = v95;
    }
    else {
      int v21 = (size_t *)v95[0];
    }
    uint64_t v22 = [NSString stringWithUTF8String:v21];
    v107[0] = v22;
    v106[1] = @"branch";
    if ((SBYTE7(v109) & 0x80u) == 0) {
      BOOL v23 = &v108;
    }
    else {
      BOOL v23 = (long long *)v108;
    }
    uint64_t v83 = (void *)v22;
    std::string v24 = [NSString stringWithUTF8String:v23];
    v107[1] = v24;
    uint64_t v107[2] = @"Espresso";
    v106[2] = @"project";
    v106[3] = @"executable";
    if (*((char *)a3 + 23) >= 0) {
      int v25 = a3;
    }
    else {
      int v25 = (uint64_t *)*a3;
    }
    BOOL v82 = [NSString stringWithUTF8String:v25];
    v107[3] = v82;
    v106[4] = @"engine";
    if (a4[23] >= 0) {
      int v26 = (uint64_t *)a4;
    }
    else {
      int v26 = *(uint64_t **)a4;
    }
    unint64_t v81 = [NSString stringWithUTF8String:v26];
    v107[4] = v81;
    v106[5] = @"compute_path";
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v27 = a5;
    }
    else {
      uint64_t v27 = (uint64_t *)*a5;
    }
    uint64_t v80 = [NSString stringWithUTF8String:v27];
    v107[5] = v80;
    v106[6] = @"benchmark";
    if (a2[23] >= 0) {
      BOOL v28 = (uint64_t *)a2;
    }
    else {
      BOOL v28 = *(uint64_t **)a2;
    }
    int v86 = [NSString stringWithUTF8String:v28];
    v107[6] = v86;
    v106[7] = @"environment";
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v29 = &v103;
    }
    else {
      uint64_t v29 = (std::string *)v103.__r_.__value_.__r.__words[0];
    }
    int v79 = [NSString stringWithUTF8String:v29];
    v107[7] = v79;
    v106[8] = @"os";
    if (v102 >= 0) {
      uint64_t v30 = v101;
    }
    else {
      uint64_t v30 = (void **)v101[0];
    }
    std::string::size_type v78 = [NSString stringWithUTF8String:v30];
    v107[8] = v78;
    v106[9] = @"cpu";
    if (v100 >= 0) {
      int v31 = v99;
    }
    else {
      int v31 = (void **)v99[0];
    }
    float v77 = [NSString stringWithUTF8String:v31];
    v107[9] = v77;
    v106[10] = @"gpu";
    if (v98 >= 0) {
      BOOL v32 = v97;
    }
    else {
      BOOL v32 = (void **)v97[0];
    }
    uint64_t v85 = [NSString stringWithUTF8String:v32];
    v107[10] = v85;
    v106[11] = @"result_time";
    LODWORD(v33) = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v33 = -10000000.0;
    }
    unint64_t v76 = [NSNumber numberWithFloat:v33];
    v107[11] = v76;
    v106[12] = @"result_nerr";
    LODWORD(v34) = *(_DWORD *)(a1 + 4);
    if ((LODWORD(v34) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v34 = -10000000.0;
    }
    uint64_t v75 = [NSNumber numberWithFloat:v34];
    v107[12] = v75;
    v106[13] = @"result_psnr";
    LODWORD(v35) = *(_DWORD *)(a1 + 12);
    if ((LODWORD(v35) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v35 = -10000000.0;
    }
    long long v74 = [NSNumber numberWithFloat:v35];
    v107[13] = v74;
    v106[14] = @"result_aerr";
    LODWORD(v36) = *(_DWORD *)(a1 + 8);
    if ((LODWORD(v36) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v36 = -10000000.0;
    }
    unint64_t v84 = [NSNumber numberWithFloat:v36];
    v107[14] = v84;
    v106[15] = @"result_dcos10";
    LODWORD(v37) = *(_DWORD *)(a1 + 16);
    if ((LODWORD(v37) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v37 = -10000000.0;
    }
    uint64_t v73 = [NSNumber numberWithFloat:v37];
    v107[15] = v73;
    v106[16] = @"result_mem";
    LODWORD(v38) = *(_DWORD *)(a1 + 20);
    if ((LODWORD(v38) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v38 = -10000000.0;
    }
    uint64_t v72 = [NSNumber numberWithFloat:v38];
    v107[16] = v72;
    v106[17] = @"result_ioaccel_mem";
    LODWORD(v39) = *(_DWORD *)(a1 + 24);
    if ((LODWORD(v39) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v39 = -10000000.0;
    }
    uint64_t v71 = [NSNumber numberWithFloat:v39];
    v107[17] = v71;
    v106[18] = @"result_power";
    LODWORD(v40) = *(_DWORD *)(a1 + 28);
    if ((LODWORD(v40) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v40 = -10000000.0;
    }
    std::string::size_type v41 = [NSNumber numberWithFloat:v40];
    v107[18] = v41;
    v106[19] = @"result_top1";
    LODWORD(v42) = *(_DWORD *)(a1 + 32);
    if ((LODWORD(v42) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v42 = -10000000.0;
    }
    std::string::size_type v43 = [NSNumber numberWithFloat:v42];
    v107[19] = v43;
    v106[20] = @"result_top5";
    LODWORD(v44) = *(_DWORD *)(a1 + 36);
    if ((LODWORD(v44) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v44 = -10000000.0;
    }
    uint64_t v45 = [NSNumber numberWithFloat:v44];
    v107[20] = v45;
    v106[21] = @"aux0";
    LODWORD(v46) = *(_DWORD *)(a1 + 40);
    if ((LODWORD(v46) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v46 = -10000000.0;
    }
    int v47 = [NSNumber numberWithFloat:v46];
    v107[21] = v47;
    v106[22] = @"aux1";
    LODWORD(v48) = *(_DWORD *)(a1 + 44);
    if ((LODWORD(v48) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v48 = -10000000.0;
    }
    std::string::size_type v49 = [NSNumber numberWithFloat:v48];
    v107[22] = v49;
    v106[23] = @"aux2";
    LODWORD(v50) = *(_DWORD *)(a1 + 48);
    if ((LODWORD(v50) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v50 = -10000000.0;
    }
    uint64_t v51 = [NSNumber numberWithFloat:v50];
    v107[23] = v51;
    v106[24] = @"aux3";
    LODWORD(v52) = *(_DWORD *)(a1 + 52);
    if ((LODWORD(v52) & 0x7FFFFFFFu) >= 0x7F800000) {
      *(float *)&double v52 = -10000000.0;
    }
    uint64_t v53 = [NSNumber numberWithFloat:v52];
    v107[24] = v53;
    int v88 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v107 forKeys:v106 count:25];

    if (a2[23] >= 0) {
      int v54 = a2;
    }
    else {
      int v54 = *(const char **)a2;
    }
    if (a4[23] >= 0) {
      uint64_t v55 = a4;
    }
    else {
      uint64_t v55 = *(const char **)a4;
    }
    printf("[report_benchmark_result] t=%.2fms psnr=%.2f %s@%s\n", *(float *)a1, *(float *)(a1 + 12), v54, v55);
    uint64_t v56 = (void *)MEMORY[0x1E4F28D90];
    size_t v105 = v88;
    uint64_t v57 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v105 count:1];
    long long v58 = [v56 dataWithJSONObject:v57 options:1 error:0];

    int64_t v59 = (void *)MEMORY[0x1E4F28E88];
    int64_t v60 = (void *)MEMORY[0x1E4F1CB10];
    if ((SBYTE7(v125) & 0x80u) == 0) {
      uint64_t v61 = &__s;
    }
    else {
      uint64_t v61 = (long long *)__s;
    }
    std::string::size_type v62 = [NSString stringWithUTF8String:v61];
    int v63 = [v60 URLWithString:v62];
    long long v64 = [v59 requestWithURL:v63];

    [v64 setHTTPMethod:@"POST"];
    [v64 setValue:@"application/json; charset=utf-8" forHTTPHeaderField:@"Content-Type"];
    [v64 setHTTPBody:v58];
    dispatch_semaphore_t v65 = dispatch_semaphore_create(0);
    int64_t v66 = [MEMORY[0x1E4F290E0] sharedSession];
    if (v66)
    {
      v90[0] = MEMORY[0x1E4F143A8];
      v90[1] = 3321888768;
      v90[2] = ___ZN8Espresso23report_benchmark_resultENS_16benchmark_resultERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_S9_S9_S9_S9__block_invoke;
      v90[3] = &unk_1EE38EEA0;
      if (SBYTE7(v125) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = __s;
        __p.__r_.__value_.__r.__words[2] = v125;
      }
      int v67 = v65;
      std::string v91 = v67;
      uint64_t v68 = [v66 dataTaskWithRequest:v64 completionHandler:v90];
      uint64_t v69 = v68;
      if (v68)
      {
        [v68 resume];
        dispatch_time_t v70 = dispatch_time(0, 2000000000);
        dispatch_semaphore_wait(v67, v70);
      }

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    if (v94 < 0) {
      operator delete((void *)v93[0]);
    }
    if (v96 < 0) {
      operator delete((void *)v95[0]);
    }
    if (SBYTE7(v109) < 0) {
      operator delete((void *)v108);
    }

    if (SBYTE7(v125) < 0) {
      operator delete((void *)__s);
    }
    if (SHIBYTE(v98) < 0) {
      operator delete(v97[0]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(v99[0]);
    }
    if (SHIBYTE(v102) < 0) {
      operator delete(v101[0]);
    }
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1927AB94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }

  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso23report_benchmark_resultENS_16benchmark_resultERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_S9_S9_S9_S9__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v6 = *(const char **)v6;
  }
  id v9 = v5;
  id v7 = [v5 localizedDescription];
  if ([v7 UTF8String])
  {
    id v8 = [v9 localizedDescription];
    printf("[report_benchmark_result] %s error=%s\n", v6, (const char *)[v8 UTF8String]);
  }
  else
  {
    printf("[report_benchmark_result] %s error=%s\n", v6, "");
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1927ABD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void Espresso::report_benchmark_result(uint64_t a1, const char *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *a4;
  long long v13 = *(_OWORD *)(a1 + 16);
  if (*a4)
  {
    v19[0] = *(_OWORD *)a1;
    v19[1] = v13;
    v19[2] = *(_OWORD *)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v14 = (char *)(*(uint64_t (**)(void))(**(void **)(v12 + 8) + 16))(*(void *)(v12 + 8));
    std::string::basic_string[abi:ne180100]<0>(__p, v14);
    Espresso::report_benchmark_result((uint64_t)v19, a2, a3, (const char *)__p, a5, a6, a7);
  }
  else
  {
    v15[0] = *(_OWORD *)a1;
    v15[1] = v13;
    v15[2] = *(_OWORD *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(__p, "NONE");
    Espresso::report_benchmark_result((uint64_t)v15, a2, a3, (const char *)__p, a5, a6, a7);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1927ABE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::compute_all_blobs(void *a1@<X0>, void *a2@<X8>)
{
  void (***v4)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v5;
  uint64_t *v6;
  void v7[8];
  std::__shared_weak_count *v8;
  void v9[6];
  char **v10;
  char *v11[2];
  void **v12[6];
  char **v13;
  char *v14[2];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 (*v18)(void *, uint64_t);
  void (*v19)(uint64_t);
  const char *v20;
  void **v21;
  void *v22[2];
  void v23[3];

  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  int v17 = 0x6012000000;
  char v18 = __Block_byref_object_copy__3992;
  id v19 = __Block_byref_object_dispose__3993;
  uint64_t v20 = "";
  v22[1] = 0;
  memset(v23, 0, sizeof(v23));
  int v21 = v22;
  v22[0] = 0;
  v12[0] = 0;
  v12[1] = (void **)v12;
  void v12[2] = (void **)0x4812000000;
  v12[3] = (void **)__Block_byref_object_copy__130;
  v12[4] = (void **)__Block_byref_object_dispose__131;
  v12[5] = (void **)"";
  v14[0] = 0;
  v14[1] = 0;
  long long v13 = v14;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x4812000000;
  void v9[3] = __Block_byref_object_copy__130;
  v9[4] = __Block_byref_object_dispose__131;
  v9[5] = "";
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = v11;
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (****)(uint64_t *__return_ptr, void))(*a1 + 16);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3321888768;
  v7[2] = ___ZN8Espresso17compute_all_blobsENSt3__110shared_ptrINS_3netEEE_block_invoke;
  v7[3] = &unk_1EE38EFD0;
  id v5 = (std::__shared_weak_count *)a1[1];
  v7[7] = v3;
  id v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v7[4] = v12;
  v7[5] = &v15;
  v7[6] = v9;
  Espresso::abstract_context::compute_batch_sync(v4, v7);
  uint64_t v6 = v16;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)a2, v16 + 6);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2 + 3, v6[9], v6[10], 0xAAAAAAAAAAAAAAABLL * ((v6[10] - v6[9]) >> 3));
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  _Block_object_dispose(v9, 8);
  std::__tree<std::string>::destroy((uint64_t)&v10, v11[0]);
  _Block_object_dispose(v12, 8);
  std::__tree<std::string>::destroy((uint64_t)&v13, v14[0]);
  _Block_object_dispose(&v15, 8);
  v12[0] = (void **)v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v12);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v22[0]);
}

void sub_1927AC0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(v37 + 8));
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Block_object_dispose(&a19, 8);
  std::__tree<std::string>::destroy(v36, a26);
  _Block_object_dispose(&a28, 8);
  std::__tree<std::string>::destroy(v35, a35);
  _Block_object_dispose((const void *)(v39 - 144), 8);
  Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(v38 + 48);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3992(void *a1, uint64_t a2)
{
  a1[6] = *(void *)(a2 + 48);
  uint64_t v2 = (void *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 56);
  a1[7] = v3;
  uint64_t v4 = a1 + 7;
  uint64_t v5 = *(void *)(a2 + 64);
  a1[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 48) = v2;
    void *v2 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v4;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 9) = result;
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  return result;
}

void __Block_byref_object_dispose__3993(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)(a1 + 56);

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v2);
}

void *__Block_byref_object_copy__130(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    void *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__131(uint64_t a1)
{
}

uint64_t ___ZN8Espresso17compute_all_blobsENSt3__110shared_ptrINS_3netEEE_block_invoke(void *a1, void *a2)
{
  uint64_t result = a1[7];
  if (*(void *)(result + 40) != *(void *)(result + 32))
  {
    std::string::size_type v5 = 0;
    do
    {
      unint64_t v6 = v5 + 1;
      Espresso::net::__forward(result, a2, v5, v5 + 1);
      uint64_t v7 = a1[7] + 56;
      v49.__r_.__value_.__r.__words[0] = v5;
      id v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v5, &v49);
      id v9 = (long long *)v8[3];
      uint64_t v10 = (long long *)v8[4];
      while (v9 != v10)
      {
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v9, *((void *)v9 + 1));
        }
        else
        {
          long long v11 = *v9;
          v49.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v11;
        }
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*(void *)(a1[4] + 8) + 56), &v49))
        {
          uint64_t v12 = *(void *)(a1[5] + 8);
          unint64_t v13 = *(void *)(v12 + 80);
          if (v13 >= *(void *)(v12 + 88))
          {
            uint64_t v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(v12 + 72), (uint64_t)&v49);
          }
          else
          {
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(v12 + 80), v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v14 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
              *(void *)(v13 + 16) = *((void *)&v49.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v13 = v14;
            }
            uint64_t v15 = (std::string *)(v13 + 24);
            *(void *)(v12 + 80) = v13 + 24;
          }
          *(void *)(v12 + 80) = v15;
          uint64_t v16 = a1[7] + 136;
          double v50 = &v49;
          int v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (unsigned __int8 *)&v49, (long long **)&v50);
          (*(void (**)(long long *__return_ptr))(**((void **)v17 + 5) + 56))(&v48);
          char v18 = (uint64_t **)(*(void *)(a1[5] + 8) + 48);
          double v50 = &v49;
          id v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, &v49, (long long **)&v50);
          long long v20 = v48;
          long long v48 = 0uLL;
          int v21 = (std::__shared_weak_count *)v19[8];
          *(_OWORD *)(v19 + 7) = v20;
          if (v21)
          {
            nitro::nitro_function::nitro_function(v21);
            if (*((void *)&v48 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v48 + 1));
            }
          }
          uint64_t v22 = a1[7] + 136;
          *(void *)&long long v48 = &v49;
          uint64_t v23 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)&v49, (long long **)&v48)+ 5);
          std::string v24 = (uint64_t **)(*(void *)(a1[5] + 8) + 48);
          *(void *)&long long v48 = &v49;
          int v25 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, &v49, (long long **)&v48);
          (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v23 + 40))(v23, a2, v25 + 7);
          int v26 = (uint64_t **)(*(void *)(a1[4] + 8) + 48);
          *(void *)&long long v48 = &v49;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, &v49, (long long **)&v48)[56] = 1;
          uint64_t v27 = (uint64_t **)(*(void *)(a1[6] + 8) + 48);
          *(void *)&long long v48 = &v49;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, &v49, (long long **)&v48)[56] = 1;
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        id v9 = (long long *)((char *)v9 + 24);
      }
      uint64_t v28 = a1[7] + 96;
      v49.__r_.__value_.__r.__words[0] = v5;
      uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28, v5, &v49);
      uint64_t v30 = (long long *)v29[3];
      int v31 = (long long *)v29[4];
      while (v30 != v31)
      {
        if (*((char *)v30 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v30, *((void *)v30 + 1));
        }
        else
        {
          long long v32 = *v30;
          v49.__r_.__value_.__r.__words[2] = *((void *)v30 + 2);
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v32;
        }
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*(void *)(a1[4] + 8) + 56), &v49))
        {
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*(void *)(a1[6] + 8) + 56), &v49))
          {
            uint64_t v33 = *(void *)(a1[5] + 8);
            unint64_t v34 = *(void *)(v33 + 80);
            if (v34 >= *(void *)(v33 + 88))
            {
              uint64_t v36 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(v33 + 72), (uint64_t)&v49);
            }
            else
            {
              if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v33 + 80), v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v35 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
                *(void *)(v34 + 16) = *((void *)&v49.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v34 = v35;
              }
              uint64_t v36 = (std::string *)(v34 + 24);
              *(void *)(v33 + 80) = v34 + 24;
            }
            *(void *)(v33 + 80) = v36;
          }
          uint64_t v37 = a1[7] + 136;
          double v50 = &v49;
          uint64_t v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, (unsigned __int8 *)&v49, (long long **)&v50);
          (*(void (**)(long long *__return_ptr))(**((void **)v38 + 5) + 56))(&v48);
          uint64_t v39 = (uint64_t **)(*(void *)(a1[5] + 8) + 48);
          double v50 = &v49;
          double v40 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, &v49, (long long **)&v50);
          long long v41 = v48;
          long long v48 = 0uLL;
          double v42 = (std::__shared_weak_count *)v40[8];
          *(_OWORD *)(v40 + 7) = v41;
          if (v42)
          {
            nitro::nitro_function::nitro_function(v42);
            if (*((void *)&v48 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v48 + 1));
            }
          }
          uint64_t v43 = a1[7] + 136;
          *(void *)&long long v48 = &v49;
          uint64_t v44 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, (unsigned __int8 *)&v49, (long long **)&v48)+ 5);
          uint64_t v45 = (uint64_t **)(*(void *)(a1[5] + 8) + 48);
          *(void *)&long long v48 = &v49;
          double v46 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, &v49, (long long **)&v48);
          (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v44 + 40))(v44, a2, v46 + 7);
          int v47 = (uint64_t **)(*(void *)(a1[6] + 8) + 48);
          *(void *)&long long v48 = &v49;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v47, &v49, (long long **)&v48)[56] = 1;
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        uint64_t v30 = (long long *)((char *)v30 + 24);
      }
      uint64_t result = a1[7];
      std::string::size_type v5 = v6;
    }
    while (v6 < (uint64_t)(*(void *)(result + 40) - *(void *)(result + 32)) >> 4);
  }
  return result;
}

void sub_1927AC6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v17 + 80) = v16;
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = (long long *)(a2 + 1);
  std::string::size_type v5 = (long long *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      id v8 = *(void **)(a1 + 8);
      id v9 = (void *)v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          id v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          id v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, (void *)v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          uint64_t v16 = (void *)v3;
          long long v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>> const&>((uint64_t)v15, a1, v5 + 2);
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15[0]);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        uint64_t v16 = v7;
        long long v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        long long v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, (void *)v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      uint64_t v12 = (long long *)*((void *)v5 + 1);
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = *(long long **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (long long *)*((void *)v5 + 2);
          BOOL v10 = *(void *)v13 == (void)v5;
          std::string::size_type v5 = v13;
        }
        while (!v10);
      }
      std::string::size_type v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_1927AC85C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 8));
  return a1;
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_1927AC908(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    id v8 = (std::string *)(v6 + 4);
    id v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1927ACA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::compute_blobs(void *a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  void (***v8)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v9;
  uint64_t *v10;
  void v11[7];
  std::__shared_weak_count *v12;
  char *v13[3];
  void **v14[6];
  char **v15;
  char *v16[2];
  char **v17;
  char *v18[2];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 (*v22)(void *, uint64_t);
  void (*v23)(uint64_t);
  const char *v24;
  void **v25;
  void *v26[2];
  void v27[3];
  long long *v28;

  id v19 = 0;
  long long v20 = &v19;
  int v21 = 0x6012000000;
  uint64_t v22 = __Block_byref_object_copy__3992;
  uint64_t v23 = __Block_byref_object_dispose__3993;
  std::string v24 = "";
  v26[1] = 0;
  memset(v27, 0, sizeof(v27));
  int v25 = v26;
  v26[0] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v16[1] = 0;
  uint64_t v17 = v18;
  v14[0] = 0;
  v14[1] = (void **)v14;
  v14[2] = (void **)0x4812000000;
  v14[3] = (void **)__Block_byref_object_copy__130;
  v14[4] = (void **)__Block_byref_object_dispose__131;
  uint64_t v14[5] = (void **)"";
  uint64_t v15 = v16;
  v16[0] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      uint64_t v28 = v5;
      std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v17, v5, &v28)[56] = 1;
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != v6);
  }
  uint64_t v7 = *a1;
  id v8 = *(void (****)(uint64_t *__return_ptr, void))(*a1 + 16);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  v11[2] = ___ZN8Espresso13compute_blobsENSt3__110shared_ptrINS_3netEEERKNS0_6vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS8_ISA_EEEE_block_invoke;
  v11[3] = &unk_1EE38F1A0;
  id v9 = (std::__shared_weak_count *)a1[1];
  v11[6] = v7;
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::map<std::string,BOOL>::map[abi:ne180100]((uint64_t)v13, &v17);
  v11[4] = v14;
  void v11[5] = &v19;
  Espresso::abstract_context::compute_batch_sync(v8, v11);
  long long v10 = v20;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)a3, v20 + 6);
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3 + 3, v10[9], v10[10], 0xAAAAAAAAAAAAAAABLL * ((v10[10] - v10[9]) >> 3));
  std::__tree<std::string>::destroy((uint64_t)v13, v13[1]);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Block_object_dispose(v14, 8);
  std::__tree<std::string>::destroy((uint64_t)&v15, v16[0]);
  std::__tree<std::string>::destroy((uint64_t)&v17, v18[0]);
  _Block_object_dispose(&v19, 8);
  v14[0] = (void **)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v14);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v26[0]);
}

void sub_1927ACC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,char a29,char *a30)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(v31 + 8));
  std::__tree<std::string>::destroy(v32, a18);
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Block_object_dispose(&a20, 8);
  std::__tree<std::string>::destroy(v30, a27);
  std::__tree<std::string>::destroy((uint64_t)&a29, a30);
  _Block_object_dispose((const void *)(v34 - 168), 8);
  Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(v33 + 48);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso13compute_blobsENSt3__110shared_ptrINS_3netEEERKNS0_6vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS8_ISA_EEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (*(void *)(result + 40) != *(void *)(result + 32))
  {
    std::string::size_type v5 = 0;
    do
    {
      unint64_t v6 = v5 + 1;
      Espresso::net::__forward(result, a2, v5, v5 + 1);
      uint64_t v7 = *(void *)(a1 + 48) + 56;
      v34.__r_.__value_.__r.__words[0] = v5;
      id v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v5, &v34);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      long long v35 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v35, v8[3], v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
      uint64_t v9 = v36;
      uint64_t v10 = *(void *)(a1 + 48) + 96;
      v34.__r_.__value_.__r.__words[0] = v5;
      long long v11 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v5, &v34)[3];
      uint64_t v12 = *(void *)(a1 + 48) + 96;
      *(void *)&long long v33 = v5;
      char v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v5, &v33);
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)&v35, v9, v11, (std::string *)v13[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[4] - (void)v11) >> 3));
      uint64_t v14 = v35;
      uint64_t v15 = (char *)v36;
      while (v14 != v15)
      {
        if (v14[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v14, *((void *)v14 + 1));
        }
        else
        {
          long long v16 = *(_OWORD *)v14;
          v34.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
        }
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a1 + 72), &v34))
        {
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 56), &v34))
          {
            if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*(void *)(a1 + 48) + 136), (unsigned __int8 *)&v34))
            {
              uint64_t v17 = *(void *)(a1 + 48) + 136;
              *(void *)&long long v33 = &v34;
              if (*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (unsigned __int8 *)&v34, (long long **)&v33)+ 5))
              {
                uint64_t v18 = *(void *)(a1 + 48) + 136;
                uint64_t v38 = &v34;
                id v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (unsigned __int8 *)&v34, (long long **)&v38);
                (*(void (**)(long long *__return_ptr))(**((void **)v19 + 5) + 56))(&v33);
                long long v20 = (uint64_t **)(*(void *)(*(void *)(a1 + 40) + 8) + 48);
                uint64_t v38 = &v34;
                int v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, &v34, (long long **)&v38);
                long long v22 = v33;
                long long v33 = 0uLL;
                uint64_t v23 = (std::__shared_weak_count *)v21[8];
                *(_OWORD *)(v21 + 7) = v22;
                if (v23)
                {
                  nitro::nitro_function::nitro_function(v23);
                  if (*((void *)&v33 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v33 + 1));
                  }
                }
                uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8);
                unint64_t v25 = *(void *)(v24 + 80);
                if (v25 >= *(void *)(v24 + 88))
                {
                  uint64_t v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(v24 + 72), (uint64_t)&v34);
                }
                else
                {
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)(v24 + 80), v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v26 = *(_OWORD *)&v34.__r_.__value_.__l.__data_;
                    *(void *)(v25 + 16) = *((void *)&v34.__r_.__value_.__l + 2);
                    *(_OWORD *)unint64_t v25 = v26;
                  }
                  uint64_t v27 = (std::string *)(v25 + 24);
                  *(void *)(v24 + 80) = v25 + 24;
                }
                *(void *)(v24 + 80) = v27;
                uint64_t v28 = *(void *)(a1 + 48) + 136;
                *(void *)&long long v33 = &v34;
                uint64_t v29 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (unsigned __int8 *)&v34, (long long **)&v33)+ 5);
                uint64_t v30 = (uint64_t **)(*(void *)(*(void *)(a1 + 40) + 8) + 48);
                *(void *)&long long v33 = &v34;
                uint64_t v31 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, &v34, (long long **)&v33);
                (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v29 + 40))(v29, a2, v31 + 7);
                uint64_t v32 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
                *(void *)&long long v33 = &v34;
                std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, &v34, (long long **)&v33)[56] = 1;
              }
            }
          }
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        v14 += 24;
      }
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      uint64_t result = *(void *)(a1 + 48);
      std::string::size_type v5 = v6;
    }
    while (v6 < (uint64_t)(*(void *)(result + 40) - *(void *)(result + 32)) >> 4);
  }
  return result;
}

void sub_1927AD048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  *(void *)(v19 + 80) = v18;
  if (a16 < 0) {
    operator delete(__p);
  }
  std::string __p = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,BOOL>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  std::string::size_type v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      id v8 = *(void **)(a1 + 8);
      uint64_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          id v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          long long v16 = (void *)v3;
          long long v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>((uint64_t)&v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15);
          goto LABEL_15;
        }
        long long v16 = v7;
        long long v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        long long v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          char v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          std::string::size_type v5 = v13;
        }
        while (!v10);
      }
      std::string::size_type v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_1927AD1F4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  v6[56] = *(unsigned char *)(a3 + 24);
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_1927AD288(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE64c114_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbNS_4lessIS6_EENS4_INS_4pairIKS6_bEEEEEE(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 64, *(char **)(a1 + 72));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

uint64_t __copy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE64c114_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbNS_4lessIS6_EENS4_INS_4pairIKS6_bEEEEEE(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return std::map<std::string,BOOL>::map[abi:ne180100](a1 + 64, a2 + 8);
}

void sub_1927AD338(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::compute_all_output_blobs(void *a1@<X0>, void *a2@<X8>)
{
  void (***v5)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  long long *v10;
  long long *v11;
  long long v12;
  char **v13;
  char *v14;
  long long v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  long long *v19;
  long long *v20;
  long long v21;
  char **v22;
  char *v23;
  long long v24;
  std::string *v25;
  char **v26;
  std::string __p;
  uint64_t *v28;
  void *v29[2];
  void v30[6];
  std::__shared_weak_count *v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  __n128 (*v35)(void *, uint64_t);
  void (*v36)(uint64_t);
  const char *v37;
  void **v38;
  void *v39[2];
  void v40[3];
  long long *v41[2];

  uint64_t v32 = 0;
  long long v33 = (char **)&v32;
  std::string v34 = 0x6012000000;
  long long v35 = __Block_byref_object_copy__3992;
  uint64_t v36 = __Block_byref_object_dispose__3993;
  uint64_t v37 = "";
  v39[1] = 0;
  memset(v40, 0, sizeof(v40));
  uint64_t v38 = v39;
  v39[0] = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void (****)(uint64_t *__return_ptr, void))(*a1 + 16);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3321888768;
  v30[2] = ___ZN8Espresso24compute_all_output_blobsENSt3__110shared_ptrINS_3netEEE_block_invoke;
  v30[3] = &unk_1EE38ECD8;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  v30[5] = v4;
  uint64_t v31 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v30[4] = &v32;
  Espresso::abstract_context::compute_batch_sync(v5, v30);
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v28 = (uint64_t *)v29;
  uint64_t v7 = *a1;
  if (*(void *)(*a1 + 40) != *(void *)(*a1 + 32))
  {
    id v8 = 0;
    do
    {
      __p.__r_.__value_.__r.__words[0] = v8;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7 + 56, v8, &__p);
      BOOL v10 = (long long *)v9[3];
      long long v11 = (long long *)v9[4];
      while (v10 != v11)
      {
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
        }
        else
        {
          uint64_t v12 = *v10;
          __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
        }
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v29[0], &__p))
        {
          char v13 = v33;
          uint64_t v14 = v33[10];
          if (v14 >= v33[11])
          {
            long long v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v33 + 9, (uint64_t)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v33[10], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              uint64_t v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *((void *)v14 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v14 = v15;
            }
            long long v16 = (std::string *)(v14 + 24);
            v13[10] = v14 + 24;
          }
          v13[10] = (char *)v16;
          v41[0] = (long long *)&__p;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v28, &__p, v41)[56] = 1;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        BOOL v10 = (long long *)((char *)v10 + 24);
      }
      uint64_t v17 = *a1 + 96;
      __p.__r_.__value_.__r.__words[0] = v8;
      uint64_t v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v8, &__p);
      uint64_t v19 = (long long *)v18[3];
      long long v20 = (long long *)v18[4];
      while (v19 != v20)
      {
        if (*((char *)v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v19, *((void *)v19 + 1));
        }
        else
        {
          int v21 = *v19;
          __p.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
        }
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v29[0], &__p))
        {
          long long v22 = v33;
          uint64_t v23 = v33[10];
          if (v23 >= v33[11])
          {
            unint64_t v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v33 + 9, (uint64_t)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v33[10], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              uint64_t v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *((void *)v23 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v23 = v24;
            }
            unint64_t v25 = (std::string *)(v23 + 24);
            v22[10] = v23 + 24;
          }
          v22[10] = (char *)v25;
          v41[0] = (long long *)&__p;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v28, &__p, v41)[56] = 1;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v19 = (long long *)((char *)v19 + 24);
      }
      ++v8;
      uint64_t v7 = *a1;
    }
    while (v8 < (uint64_t)(*(void *)(*a1 + 40) - *(void *)(*a1 + 32)) >> 4);
  }
  long long v26 = v33;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)a2, v33 + 6);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2 + 3, (uint64_t)v26[9], (uint64_t)v26[10], 0xAAAAAAAAAAAAAAABLL * ((v26[10] - v26[9]) >> 3));
  std::__tree<std::string>::destroy((uint64_t)&v28, (char *)v29[0]);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  _Block_object_dispose(&v32, 8);
  uint64_t v28 = v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v39[0]);
}

void sub_1927AD6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(v26 + 8));
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Block_object_dispose(&a26, 8);
  Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(v27 + 48);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso24compute_all_output_blobsENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, void *a2)
{
  Espresso::net::__forward(*(void *)(a1 + 40), a2, 0, 0xFFFFFFFFLL);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void **)(v4 + 256);
  uint64_t v6 = (void *)(v4 + 264);
  if (v5 != (void *)(v4 + 264))
  {
    do
    {
      if (*((char *)v5 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v5[4], v5[5]);
      }
      else {
        std::string v21 = *(std::string *)(v5 + 4);
      }
      char v22 = *((unsigned char *)v5 + 56);
      uint64_t v7 = *(void *)(a1 + 40) + 136;
      uint64_t v23 = &v21;
      id v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)&v21, (long long **)&v23);
      (*(void (**)(long long *__return_ptr))(**((void **)v8 + 5) + 56))(&v20);
      uint64_t v9 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
      uint64_t v23 = &v21;
      BOOL v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, &v21, (long long **)&v23);
      long long v11 = v20;
      long long v20 = 0uLL;
      uint64_t v12 = (std::__shared_weak_count *)v10[8];
      *(_OWORD *)(v10 + 7) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        if (*((void *)&v20 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v20 + 1));
        }
      }
      uint64_t v13 = *(void *)(a1 + 40) + 136;
      *(void *)&long long v20 = &v21;
      uint64_t v14 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (unsigned __int8 *)&v21, (long long **)&v20)+ 5);
      uint64_t v15 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
      *(void *)&long long v20 = &v21;
      long long v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, &v21, (long long **)&v20);
      (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v14 + 40))(v14, a2, v16 + 7);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      uint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v5[2];
          BOOL v19 = *v18 == (void)v5;
          uint64_t v5 = v18;
        }
        while (!v19);
      }
      uint64_t v5 = v18;
    }
    while (v18 != v6);
  }
}

void sub_1927AD934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1927ADB2C(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_make_fully_conv::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  Espresso::single_match_replace<Espresso::generic_pool_kernel>(a1, &__block_literal_global_4005);
  Espresso::single_match_replace<Espresso::generic_deconvolution_kernel>(a1, &__block_literal_global_2);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_3;
  v6[3] = &__block_descriptor_40_e9_v16__0_v8l;
  v6[4] = a1;
  Espresso::single_match_replace<Espresso::generic_elementwise_kernel>(a1, v6);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_4;
  v5[3] = &__block_descriptor_40_e9_v16__0_v8l;
  v5[4] = a1;
  Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(a1, v5);
  *((unsigned char *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)((char *)a1 + 184), 0, 0);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)a2 = 1;
}

void ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_3(uint64_t a1, int *a2)
{
  uint64_t v4 = (int *)(*(uint64_t (**)(void))(**(void **)a2 + 320))(*(void *)a2);
  if (*v4 <= 1)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)(a1 + 32) + 56;
    unint64_t v7 = a2[14];
    uint64_t v15 = (unsigned __int8 *)v7;
    id v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, &v15);
    if (v8[4] - v8[3] == 48)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = v9 + 136;
      unint64_t v11 = a2[14];
      unint64_t v14 = v11;
      uint64_t v15 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 56, v11, &v14)[3]+ 24);
      uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v15, (long long **)&v15);
      Espresso::abstract_blob_container::shape((char *)&v15, *((void *)v12 + 5));
      if (v17 > 1 || v16 != 1 || v15 != (unsigned __int8 *)0x100000001) {
        goto LABEL_11;
      }
      if (*v5)
      {
        if (*v5 != 1) {
          goto LABEL_11;
        }
        int v13 = 8;
      }
      else
      {
        int v13 = 5;
      }
      *uint64_t v5 = v13;
LABEL_11:
      if (__p)
      {
        BOOL v19 = __p;
        operator delete(__p);
      }
    }
  }
}

void Espresso::single_match_replace<Espresso::generic_elementwise_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      id v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      uint64_t v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        uint64_t v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    int v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      uint64_t v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        int v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        uint64_t v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          BOOL v19 = (std::__shared_weak_count *)*(v15 - 2);
          std::string v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          std::string v21 = 0;
          char v22 = 0;
          uint64_t v23 = 0;
          uint64_t v31 = (void **)&v21;
          char v32 = 0;
          std::string v21 = (uint64_t *)operator new(0x48uLL);
          char v22 = v21;
          uint64_t v23 = v21 + 9;
          char v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          uint64_t v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1927AE0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_4(uint64_t a1, int64x2_t *a2)
{
  uint64_t v5 = a2->i64[0];
  uint64_t v4 = (std::__shared_weak_count *)a2->i64[1];
  uint64_t v6 = a2->i64[0];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = a2->i64[0];
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 416))(&v72);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a2->i64[0] + 472))(&v70);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a2->i64[0] + 408))(&v68);
  uint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 384))(v5);
  uint64_t v8 = *v7;
  uint64_t v9 = *(uint64_t *)((char *)v7 + 12);
  Espresso::single_match_state<Espresso::generic_inner_product_kernel>::remove_layer(a2);
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v51 = _D0;
  __int16 v52 = 1;
  uint64_t v54 = 0;
  uint64_t v53 = 0;
  __int16 v55 = 0;
  uint64_t v56 = 0x1000100010001;
  int v57 = 0;
  int v59 = 1;
  int v66 = 0;
  char v67 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  memset(v49, 0, 24);
  v49[4] = 1;
  long long v58 = xmmword_192DCA230;
  uint64_t v60 = 0;
  int v61 = 0x10000;
  int v64 = 0;
  __int16 v65 = 1;
  v49[3] = v9;
  v49[5] = v8;
  long long v50 = xmmword_192DCA4A0;
  Espresso::abstract_engine_factory::shared(&v45);
  uint64_t v15 = v45;
  uint64_t v16 = *(void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  uint64_t v43 = 0;
  Espresso::abstract_engine_factory::make_kernel_priv(v15, v16 + 16, (uint64_t)&__p, (uint64_t)v49, (int *)&v43 + 1);
  if (lpsrc)
  {
    if (v17)
    {
      uint64_t v18 = v48;
      if (v48) {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    int v17 = 0;
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  uint64_t v41 = v68;
  double v42 = v69;
  if (v69) {
    atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *))(*(void *)v17 + 392))(v17, &v41);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  uint64_t v19 = v72;
  if (v72)
  {
    int v20 = (std::__shared_weak_count *)operator new(0x60uLL);
    v20->__shared_owners_ = 0;
    v20->__shared_weak_owners_ = 0;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3899C8;
    std::string v21 = *(std::__shared_weak_count_vtbl **)(v19 + 16);
    v20[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BF10;
    uint64_t v22 = *(void *)(v19 + 8);
    *(_OWORD *)&v20[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v20[3].__shared_owners_ = 0u;
    v20[1].__shared_owners_ = 0x100000001;
    v20[1].__shared_weak_owners_ = v22;
    v20[2].__vftable = v21;
    LOBYTE(v20[2].__shared_owners_) = 0;
    uint64_t v39 = v20 + 1;
    double v40 = v20;
    (*(void (**)(void *, std::__shared_weak_count **))(*(void *)v17 + 400))(v17, &v39);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
  }
  uint64_t v23 = v70;
  if (v70)
  {
    long long v24 = (std::__shared_weak_count *)operator new(0x60uLL);
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
    v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389D80;
    long long v25 = *(std::__shared_weak_count_vtbl **)(v23 + 16);
    v24[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36C130;
    uint64_t v26 = *(void *)(v23 + 8);
    *(_OWORD *)&v24[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v24[3].__shared_owners_ = 0u;
    v24[1].__shared_owners_ = 0x100000001;
    v24[1].__shared_weak_owners_ = v26;
    v24[2].__vftable = v25;
    LOBYTE(v24[2].__shared_owners_) = 0;
    uint64_t v37 = v24 + 1;
    uint64_t v38 = v24;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(void *, std::__shared_weak_count **, std::string *))(*(void *)v17 + 544))(v17, &v37, &__p);
    if (__p.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
  }
  v36[0] = v17;
  v36[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  uint64_t v27 = *(void *)(a1 + 32);
  unint64_t v28 = a2[3].i32[2];
  uint64_t v29 = *(void *)(*(void *)(v27 + 32) + 16 * v28);
  lpsrc = (void *)v28;
  uint64_t v30 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27 + 56, v28, &lpsrc);
  uint64_t v31 = *(void *)(a1 + 32) + 96;
  unint64_t v32 = a2[3].i32[2];
  unint64_t v45 = v32;
  long long v33 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v31, v32, &v45);
  Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v36, &__p, (const std::string *)(v29 + 16), v30 + 3, v33 + 3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  uint64_t v34 = v68;
  long long v35 = v69;
  if (v69) {
    atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *))(*(void *)v17 + 392))(v17, &v34);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_1927AE744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,std::__shared_weak_count *a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  unint64_t v32 = *(std::__shared_weak_count **)(v30 - 120);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  long long v33 = *(std::__shared_weak_count **)(v30 - 104);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 88);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_state<Espresso::generic_inner_product_kernel>::remove_layer(int64x2_t *a1)
{
  memset(v7, 0, sizeof(v7));
  __int32 v4 = a1[3].i32[2];
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    uint64_t v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v4);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v4);
    uint64_t v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  uint64_t v8 = (void **)&v7[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_1927AE90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  long long v24 = v12 + 24;
  long long v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  int v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_1927AEBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2);
  *(void *)(result + 136) = 0;
  return result;
}

uint64_t ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2);
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void Espresso::pass_make_fully_conv::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_make_fully_conv::~pass_make_fully_conv(Espresso::pass_make_fully_conv *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_make_fully_conv>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_make_fully_conv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386F58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_make_fully_conv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::quantizer::quantizer(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(unsigned char *)(a1 + 64) = 0;
  long long v6 = *a3;
  *(void *)(a1 + 88) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 72) = v6;
  std::unordered_map<std::string,float>::unordered_map(a1 + 96, (uint64_t)a3 + 24);
  int v7 = *((_DWORD *)a3 + 16);
  *(_DWORD *)(a1 + 139) = *(_DWORD *)((char *)a3 + 67);
  *(_DWORD *)(a1 + 136) = v7;
  std::unordered_set<std::string>::unordered_set(a1 + 144, (uint64_t)a3 + 72);
  std::unordered_set<std::string>::unordered_set(a1 + 184, (uint64_t)(a3 + 7));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  return a1;
}

void sub_1927AEEB8(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(v3);
  Espresso::dataset_estimator::result_t::~result_t(v2);
  long long v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,float>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    long long v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16)) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v15 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = v8;
      uint64_t v16 = (std::string *)(v15 + 16);
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
      }
      else
      {
        long long v17 = *((_OWORD *)v5 + 1);
        *((void *)v15 + 4) = *((void *)v5 + 4);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      *((_DWORD *)v15 + 10) = *((_DWORD *)v5 + 10);
      float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        BOOL v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v9);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v24 = *(void *)a1;
      long long v25 = *(void **)(*(void *)a1 + 8 * v2);
      if (v25)
      {
        *(void *)uint64_t v15 = *v25;
      }
      else
      {
        *(void *)uint64_t v15 = *v6;
        *long long v6 = v15;
        *(void *)(v24 + 8 * v2) = v6;
        if (!*(void *)v15) {
          goto LABEL_43;
        }
        unint64_t v26 = *(void *)(*(void *)v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9) {
            v26 %= v9;
          }
        }
        else
        {
          v26 &= v9 - 1;
        }
        long long v25 = (void *)(*(void *)a1 + 8 * v26);
      }
      void *v25 = v15;
LABEL_43:
      ++*(void *)(a1 + 24);
LABEL_44:
      uint64_t v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1927AF15C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::dataset_estimator::result_t::~result_t(Espresso::dataset_estimator::result_t *this)
{
}

void std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(a1[1]);
    std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::dataset_estimator::statistics_entry_t>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Espresso::dataset_estimator::statistics_entry_t>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 88)
  {
    uint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

float Espresso::quantizer::get_scale_from_min_max(float a1, float a2, uint64_t a3, Espresso::q_target_traits *a4)
{
  return Espresso::q_target_traits::get_scale_from_min_max(a4, a1, a2);
}

float Espresso::q_target_traits::get_scale_from_min_max(Espresso::q_target_traits *this, float a2, float a3)
{
  float v3 = 1.0;
  if (vabds_f32(a3, a2) >= 0.0000001)
  {
    uint64_t v4 = (unsigned __int8 *)&unk_1E9303000;
    {
      unint64_t v21 = this;
      float v19 = a3;
      float v20 = a2;
      uint64_t v4 = (unsigned char *)&unk_1E9303000;
      a3 = v19;
      a2 = v20;
      int v18 = v17;
      this = v21;
      if (v18)
      {
        Espresso::q_target_traits::get_scale_from_min_max(float,float)const::symmetric_formula = getenv("ESPRESSO_QUANTIZER_SYMMETRIC") != 0;
        uint64_t v4 = (unsigned char *)&unk_1E9303000;
        this = v21;
        a3 = v19;
        a2 = v20;
      }
    }
    int v5 = v4[3944];
    if (*((unsigned char *)this + 20)) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      float v10 = (double)*((int *)this + 3) / a3;
      float v11 = (double)*((int *)this + 2) / a2;
      float v22 = v11;
      float v23 = v10;
      uint64_t v12 = &v23;
      uint64_t v13 = &v22;
      if (v11 >= v10) {
        unint64_t v14 = &v23;
      }
      else {
        unint64_t v14 = &v22;
      }
      if (a3 > 0.0) {
        uint64_t v13 = v14;
      }
      if (a2 < 0.0) {
        uint64_t v12 = v13;
      }
      float v9 = *v12;
    }
    else
    {
      float v7 = fabsf(a2);
      float v8 = fabsf(a3);
      if (v7 < v8) {
        float v7 = v8;
      }
      float v9 = (double)*((int *)this + 3) / v7;
    }
    float v15 = 65504.0;
    if (v9 <= 65504.0) {
      float v15 = v9;
    }
    float v3 = -65504.0;
    if (v9 >= -65504.0) {
      return v15;
    }
  }
  return v3;
}

void Espresso::quantizer::get_per_channel_scale_from_min_max(long long *a1@<X1>, Espresso::dataset_estimator::statistics_entry_t *a2@<X2>, float *a3@<X3>, int a4@<W4>, uint64_t *a5@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a5, a4, 1, 1, 1);
  if (a4 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a5;
    uint64_t v12 = 4 * a4;
    do
    {
      Espresso::dataset_estimator::statistics_entry_t::compute_single(a2, a3, 0, (uint64_t)v17);
      long long v15 = *a1;
      uint64_t v16 = *((void *)a1 + 2);
      float v13 = v17[0];
      float v14 = v17[1];
      *(float *)(*(void *)(v11 + 16) + v10) = Espresso::q_target_traits::get_scale_from_min_max((Espresso::q_target_traits *)&v15, v13, v14);
      if (__p) {
        operator delete(__p);
      }
      v10 += 4;
      a2 = (Espresso::dataset_estimator::statistics_entry_t *)((char *)a2 + 4 * (int)a3);
    }
    while (v12 != v10);
  }
}

void sub_1927AF5BC(_Unwind_Exception *exception_object)
{
  float v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantizer::get_per_channel_scale_from_min_max(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *a2;
  int v4 = *(_DWORD *)(*a2 + 20);
  int v5 = (float *)(*(_DWORD *)(*a2 + 12) * *(_DWORD *)(*a2 + 8) * *(_DWORD *)(*a2 + 16));
  long long v6 = *(_OWORD *)a1;
  uint64_t v7 = *(void *)(a1 + 16);
  Espresso::quantizer::get_per_channel_scale_from_min_max(&v6, *(Espresso::dataset_estimator::statistics_entry_t **)(v3 + 24), v5, v4, a3);
}

void Espresso::quantizer::get_per_channel_scale_from_min_max(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  long long v3 = *(_OWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  Espresso::quantizer::get_per_channel_scale_from_min_max(&v3, *(Espresso::dataset_estimator::statistics_entry_t **)(*(void *)a2 + 16), (float *)*(unsigned int *)(*(void *)a2 + 8), *(_DWORD *)(*(void *)a2 + 12), a3);
}

void Espresso::quantizer::load_stats(Espresso::quantizer *a1, uint64_t a2)
{
  long long v3 = (uint64_t *)v4;
  v4[0] = 0;
  v5[0] = 0;
  v5[1] = 0;
  v4[1] = 0;
  v4[2] = v5;
  Espresso::dataset_estimator::result_t::load(&v3, a2);
  Espresso::quantizer::set_stats(a1, (const Espresso::dataset_estimator::result_t *)&v3);
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(v5[0]);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v4[0]);
}

void sub_1927AF6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void Espresso::quantizer::set_stats(Espresso::quantizer *this, const Espresso::dataset_estimator::result_t *a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t **)((char *)this + 16);
  if ((Espresso::quantizer *)((char *)this + 16) != a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)this + 16, *(long long **)a2, (long long *)((char *)a2 + 8));
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *> *,long>>((char *)this + 40, *((long long **)a2 + 3), (long long *)a2 + 2);
  }
  *((unsigned char *)this + 64) = 1;
  Espresso::quantizer::merge_stats_for_concat(this);
  if (*((unsigned char *)this + 88))
  {
    float v8 = Espresso::espresso_os_log_subsystem(v6, v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v67.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_1920CB000, v8, OS_LOG_TYPE_DEBUG, "[quantizer::estimate_stats] no_mixed_precision=1", (uint8_t *)&v67, 2u);
    }

    unint64_t v2 = *(void *)(*(void *)this + 688);
    for (uint64_t i = *(void *)(*(void *)this + 696); v2 != i; v2 += 24)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
      }
      else
      {
        long long v10 = *(_OWORD *)v2;
        v67.__r_.__value_.__r.__words[2] = *(void *)(v2 + 16);
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v10;
      }
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)this + 3), &v67))
      {
        *(void *)std::string buf = &v67;
        uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, &v67, (long long **)buf);
        double v12 = fabs(*((double *)v11 + 7));
        double v13 = fabs(*((double *)v11 + 8));
        if (v12 < v13) {
          double v12 = v13;
        }
        *((double *)v11 + 7) = -v12;
        *((double *)v11 + 8) = v12;
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v14 = *(void *)this;
  long long v15 = *(long long **)(*(void *)this + 688);
  uint64_t v16 = *(long long **)(*(void *)this + 696);
  if (v15 != v16)
  {
    uint64_t v60 = (uint64_t *)((char *)this + 96);
    int v59 = (void *)((char *)this + 112);
    long long v58 = v4;
    while (1)
    {
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)v15, *((void *)v15 + 1));
      }
      else
      {
        long long v17 = *v15;
        v76.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v17;
      }
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)this + 3), &v76))
      {
        break;
      }
LABEL_89:
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      long long v15 = (long long *)((char *)v15 + 24);
      if (v15 == v16)
      {
        uint64_t v14 = *(void *)this;
        goto LABEL_109;
      }
    }
    *(void *)std::string buf = &v76;
    int v18 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, &v76, (long long **)buf);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v67, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
    }
    else {
      std::string v67 = v76;
    }
    long long v19 = *(_OWORD *)(v18 + 72);
    long long v68 = *(_OWORD *)(v18 + 56);
    long long v69 = v19;
    long long v70 = *(_OWORD *)(v18 + 88);
    float v71 = *((float *)v18 + 26);
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    float v20 = (const void *)*((void *)v18 + 14);
    uint64_t v21 = *((void *)v18 + 15);
    std::string __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v20, v21, (v21 - (uint64_t)v20) >> 2);
    char v75 = v18[136];
    Espresso::quantizer::traits_for_blob((uint64_t)this, (long long *)&v67, (int8x8_t *)&v65);
    double v22 = *((double *)&v68 + 1);
    float v23 = *(double *)&v68;
    if (*((float *)this + 23) <= 0.0
      && !std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v60, (unsigned __int8 *)&v76))
    {
LABEL_78:
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)this + 18, (uint64_t)&v76))
      {
        float scale_from_min_max = v71;
      }
      else
      {
        float v49 = v22;
        long long v63 = v65;
        uint64_t v64 = v66;
        float scale_from_min_max = Espresso::q_target_traits::get_scale_from_min_max((Espresso::q_target_traits *)&v63, v23, v49);
      }
      long long v50 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)this + 23, (uint64_t)&v76);
      uint64_t v52 = 0x100000000;
      if (!v50)
      {
        uint64_t v52 = 0x200000001;
        if (*(double *)&v68 >= -0.000001) {
          uint64_t v52 = 0x400000000;
        }
      }
      uint64_t v53 = Espresso::espresso_os_log_subsystem((Espresso *)v50, v51);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__str, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        }
        else {
          std::string __str = v67;
        }
        std::string::basic_string(&v77, &__str, 0, 0x14uLL, (std::allocator<char> *)&v78);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string __str = v77;
        std::string::size_type size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v77.__r_.__value_.__l.__size_;
        }
        unint64_t v2 = size - 20;
        if (size != 20)
        {
          do
            std::string::append(&__str, " ");
          while (!__CFADD__(v2++, 1));
        }
        std::string v62 = __str;
        memset(&__str, 0, sizeof(__str));
        int v57 = &v62;
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v57 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        uint64_t v81 = v68;
        *(_DWORD *)std::string buf = 136316418;
        *(void *)&buf[4] = v57;
        __int16 v80 = 2048;
        __int16 v82 = 2048;
        uint64_t v83 = *((void *)&v68 + 1);
        __int16 v84 = 2048;
        uint64_t v85 = v69;
        __int16 v86 = 2048;
        double v87 = scale_from_min_max;
        __int16 v88 = 1024;
        BOOL v89 = *(double *)&v68 < -0.000001;
        _os_log_debug_impl(&dword_1920CB000, v53, OS_LOG_TYPE_DEBUG, "[quantizer::estimate_stats] %s: min=%.2e max=%.2e avg=%.3e scale=%.3f signed=%d", buf, 0x3Au);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }

      *(void *)std::string buf = &v67;
      uint64_t v54 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, &v67, (uint64_t)&std::piecewise_construct, (long long **)buf);
      *((float *)v54 + 14) = scale_from_min_max;
      *(void *)(v54 + 60) = v52;
      *((_DWORD *)v54 + 17) = 1;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v54 + 72, 0, 0, 0);
      if (__p)
      {
        uint64_t v73 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      goto LABEL_89;
    }
    uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v60, (unsigned __int8 *)&v76);
    long long v25 = (float *)((char *)this + 92);
    if (!v24)
    {
LABEL_73:
      if (*v25 != 0.0)
      {
        double v45 = *v25;
        double v46 = *(double *)&v69 + *((double *)&v69 + 1) * v45;
        float v47 = *(double *)&v69 - *((double *)&v69 + 1) * v45;
        if (*(double *)&v68 < -0.000001) {
          float v23 = v47;
        }
        else {
          float v23 = 0.0;
        }
        double v22 = v46;
      }
      goto LABEL_78;
    }
    unint64_t v26 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v76);
    unint64_t v27 = v26;
    unint64_t v28 = *((void *)this + 13);
    if (v28)
    {
      uint64_t v29 = v16;
      uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
      v30.i16[0] = vaddlv_u8(v30);
      unint64_t v31 = v30.u32[0];
      if (v30.u32[0] > 1uLL)
      {
        unint64_t v2 = v26;
        if (v26 >= v28) {
          unint64_t v2 = v26 % v28;
        }
      }
      else
      {
        unint64_t v2 = (v28 - 1) & v26;
      }
      unint64_t v32 = *(void ***)(*v60 + 8 * v2);
      if (v32)
      {
        long long v33 = (char *)*v32;
        if (*v32)
        {
          while (1)
          {
            unint64_t v34 = *((void *)v33 + 1);
            if (v34 == v27)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v33 + 16, (unsigned __int8 *)&v76))
              {
                uint64_t v4 = v58;
                uint64_t v16 = v29;
                goto LABEL_72;
              }
            }
            else
            {
              if (v31 > 1)
              {
                if (v34 >= v28) {
                  v34 %= v28;
                }
              }
              else
              {
                v34 &= v28 - 1;
              }
              if (v34 != v2)
              {
LABEL_45:
                uint64_t v4 = v58;
                break;
              }
            }
            long long v33 = *(char **)v33;
            if (!v33) {
              goto LABEL_45;
            }
          }
        }
      }
      uint64_t v16 = v29;
    }
    long long v33 = (char *)operator new(0x30uLL);
    *(void *)long long v33 = 0;
    *((void *)v33 + 1) = v27;
    long long v35 = (std::string *)(v33 + 16);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v35, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
      *((void *)v33 + 4) = *((void *)&v76.__r_.__value_.__l + 2);
    }
    *((_DWORD *)v33 + 10) = 0;
    float v36 = (float)(unint64_t)(*((void *)this + 15) + 1);
    float v37 = *((float *)this + 32);
    if (!v28 || (float)(v37 * (float)v28) < v36)
    {
      BOOL v38 = (v28 & (v28 - 1)) != 0;
      if (v28 < 3) {
        BOOL v38 = 1;
      }
      unint64_t v39 = v38 | (2 * v28);
      unint64_t v40 = vcvtps_u32_f32(v36 / v37);
      if (v39 <= v40) {
        size_t v41 = v40;
      }
      else {
        size_t v41 = v39;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)v60, v41);
      unint64_t v28 = *((void *)this + 13);
      if ((v28 & (v28 - 1)) != 0)
      {
        if (v27 >= v28) {
          unint64_t v2 = v27 % v28;
        }
        else {
          unint64_t v2 = v27;
        }
      }
      else
      {
        unint64_t v2 = (v28 - 1) & v27;
      }
    }
    uint64_t v42 = *v60;
    uint64_t v43 = *(void **)(*v60 + 8 * v2);
    if (v43)
    {
      *(void *)long long v33 = *v43;
    }
    else
    {
      *(void *)long long v33 = *v59;
      void *v59 = v33;
      *(void *)(v42 + 8 * v2) = v59;
      if (!*(void *)v33) {
        goto LABEL_71;
      }
      unint64_t v44 = *(void *)(*(void *)v33 + 8);
      if ((v28 & (v28 - 1)) != 0)
      {
        if (v44 >= v28) {
          v44 %= v28;
        }
      }
      else
      {
        v44 &= v28 - 1;
      }
      uint64_t v43 = (void *)(*v60 + 8 * v44);
    }
    void *v43 = v33;
LABEL_71:
    ++*((void *)this + 15);
LABEL_72:
    long long v25 = (float *)(v33 + 40);
    goto LABEL_73;
  }
LABEL_109:
  if ((Espresso::quantizer *)(v14 + 352) != (Espresso::quantizer *)((char *)this + 224)) {
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *> *,long>>(v14 + 352, *((uint64_t **)this + 28), (uint64_t *)this + 29);
  }
}

void sub_1927AFF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v60);
  std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>::~tuple((uint64_t)&a38);
  if (a60 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>(char *a1, long long *a2, long long *a3)
{
  if (*((void *)a1 + 2))
  {
    long long v6 = *(uint64_t **)a1;
    float v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    if (v6[1]) {
      float v9 = (uint64_t *)v6[1];
    }
    else {
      float v9 = v6;
    }
    unint64_t v26 = a1;
    unint64_t v27 = v9;
    unint64_t v28 = v9;
    if (v9)
    {
      unint64_t v27 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        long long v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 2));
          long long v11 = *(long long *)((char *)v10 + 56);
          long long v12 = *(long long *)((char *)v10 + 72);
          long long v13 = *(long long *)((char *)v10 + 88);
          *((_DWORD *)v9 + 26) = *((_DWORD *)v10 + 26);
          *(_OWORD *)(v9 + 11) = v13;
          *(_OWORD *)(v9 + 9) = v12;
          *(_OWORD *)(v9 + 7) = v11;
          if (v9 != (uint64_t *)v10) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v9 + 112, *((char **)v10 + 14), *((void *)v10 + 15), (uint64_t)(*((void *)v10 + 15) - *((void *)v10 + 14)) >> 2);
          }
          *((unsigned char *)v9 + 136) = *((unsigned char *)v10 + 136);
          uint64_t v14 = *v8;
          long long v15 = (uint64_t **)(a1 + 8);
          uint64_t v16 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                long long v15 = (uint64_t **)v14;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v28 + 4, v14 + 4)) {
                  break;
                }
                uint64_t v14 = *v15;
                uint64_t v16 = v15;
                if (!*v15) {
                  goto LABEL_16;
                }
              }
              uint64_t v14 = v15[1];
            }
            while (v14);
            uint64_t v16 = v15 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v16, v28);
          float v9 = v27;
          unint64_t v28 = v27;
          if (v27) {
            unint64_t v27 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v27);
          }
          long long v17 = (long long *)*((void *)v10 + 1);
          if (v17)
          {
            do
            {
              a2 = v17;
              long long v17 = *(long long **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v10 + 2);
              BOOL v18 = *(void *)a2 == (void)v10;
              long long v10 = a2;
            }
            while (!v18);
          }
          if (!v9) {
            break;
          }
          long long v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v26);
  }
  if (a2 != a3)
  {
    long long v19 = (uint64_t **)(a1 + 8);
    do
    {
      float v20 = (char *)operator new(0x90uLL);
      unint64_t v26 = v20;
      unint64_t v27 = (uint64_t *)(a1 + 8);
      LOBYTE(v28) = 0;
      std::pair<std::string const,Espresso::dataset_estimator::statistics_entry_t>::pair[abi:ne180100]((std::string *)(v20 + 32), a2 + 2);
      LOBYTE(v28) = 1;
      uint64_t v21 = *v19;
      double v22 = (uint64_t **)(a1 + 8);
      float v23 = (uint64_t **)(a1 + 8);
      if (*v19)
      {
        do
        {
          while (1)
          {
            double v22 = (uint64_t **)v21;
            if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v20 + 4, v21 + 4))break; {
            uint64_t v21 = *v22;
            }
            float v23 = v22;
            if (!*v22) {
              goto LABEL_34;
            }
          }
          uint64_t v21 = v22[1];
        }
        while (v21);
        float v23 = v22 + 1;
      }
LABEL_34:
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v22, v23, (uint64_t *)v20);
      unint64_t v26 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>>>>::reset[abi:ne180100]((uint64_t)&v26);
      uint64_t v24 = (long long *)*((void *)a2 + 1);
      if (v24)
      {
        do
        {
          long long v25 = v24;
          uint64_t v24 = *(long long **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          long long v25 = (long long *)*((void *)a2 + 2);
          BOOL v18 = *(void *)v25 == (void)a2;
          a2 = v25;
        }
        while (!v18);
      }
      a2 = v25;
    }
    while (v25 != a3);
  }
}

void sub_1927B0228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *> *,long>>(char *a1, long long *a2, long long *a3)
{
  if (*((void *)a1 + 2))
  {
    long long v6 = *(uint64_t **)a1;
    float v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *((void *)a1 + 1);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    if (v6[1]) {
      float v9 = (uint64_t *)v6[1];
    }
    else {
      float v9 = v6;
    }
    float v37 = a1;
    BOOL v38 = v9;
    unint64_t v39 = v9;
    if (v9)
    {
      BOOL v38 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        long long v10 = a2;
        while (1)
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 2));
          if (v9 != (uint64_t *)v10)
          {
            long long v12 = (long long *)*((void *)v10 + 7);
            long long v11 = (long long *)*((void *)v10 + 8);
            uint64_t v13 = v9[9];
            unint64_t v14 = 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v12) >> 3);
            uint64_t v15 = v9[7];
            if (0x2E8BA2E8BA2E8BA3 * ((v13 - v15) >> 3) >= v14)
            {
              if (0x2E8BA2E8BA2E8BA3 * ((v9[8] - v15) >> 3) >= v14)
              {
                uint64_t v22 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *>(*((void *)v10 + 7), *((void *)v10 + 8), v15);
                for (uint64_t i = v9[8]; i != v22; i -= 88)
                {
                  uint64_t v24 = *(void **)(i - 32);
                  if (v24)
                  {
                    *(void *)(i - 24) = v24;
                    operator delete(v24);
                  }
                }
                v9[8] = v22;
                goto LABEL_28;
              }
              uint64_t v21 = (long long *)((char *)v12 + 8 * ((v9[8] - v15) >> 3));
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *>(*((void *)v10 + 7), (uint64_t)v21, v15);
              uint64_t v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>((uint64_t)(v9 + 9), v21, v11, v9[8]);
            }
            else
            {
              uint64_t v16 = (void **)(v9 + 7);
              if (v15)
              {
                std::vector<Espresso::dataset_estimator::statistics_entry_t>::__clear[abi:ne180100](v9 + 7);
                operator delete(*v16);
                uint64_t v13 = 0;
                long long *v16 = 0;
                v9[8] = 0;
                v9[9] = 0;
              }
              if (v14 > 0x2E8BA2E8BA2E8BALL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v17 = 0x2E8BA2E8BA2E8BA3 * (v13 >> 3);
              uint64_t v18 = 2 * v17;
              if (2 * v17 <= v14) {
                uint64_t v18 = 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v12) >> 3);
              }
              if (v17 >= 0x1745D1745D1745DLL) {
                unint64_t v19 = 0x2E8BA2E8BA2E8BALL;
              }
              else {
                unint64_t v19 = v18;
              }
              std::vector<Espresso::dataset_estimator::statistics_entry_t>::__vallocate[abi:ne180100](v9 + 7, v19);
              uint64_t v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>((uint64_t)(v9 + 9), v12, v11, v9[8]);
            }
            v9[8] = v20;
          }
LABEL_28:
          long long v25 = *v8;
          unint64_t v26 = (uint64_t **)(a1 + 8);
          unint64_t v27 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                unint64_t v26 = (uint64_t **)v25;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v39 + 4, v25 + 4)) {
                  break;
                }
                long long v25 = *v26;
                unint64_t v27 = v26;
                if (!*v26) {
                  goto LABEL_34;
                }
              }
              long long v25 = v26[1];
            }
            while (v25);
            unint64_t v27 = v26 + 1;
          }
LABEL_34:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v26, v27, v39);
          float v9 = v38;
          unint64_t v39 = v38;
          if (v38) {
            BOOL v38 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v38);
          }
          unint64_t v28 = (long long *)*((void *)v10 + 1);
          if (v28)
          {
            do
            {
              a2 = v28;
              unint64_t v28 = *(long long **)v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v10 + 2);
              BOOL v29 = *(void *)a2 == (void)v10;
              long long v10 = a2;
            }
            while (!v29);
          }
          if (v9)
          {
            long long v10 = a2;
            if (a2 != a3) {
              continue;
            }
          }
          break;
        }
      }
    }
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v37);
  }
  if (a2 != a3)
  {
    uint8x8_t v30 = (uint64_t **)(a1 + 8);
    do
    {
      unint64_t v31 = (char *)operator new(0x50uLL);
      float v37 = v31;
      BOOL v38 = (uint64_t *)(a1 + 8);
      LOBYTE(v39) = 0;
      std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>::pair[abi:ne180100]((std::string *)(v31 + 32), a2 + 2);
      LOBYTE(v39) = 1;
      unint64_t v32 = *v30;
      long long v33 = (uint64_t **)(a1 + 8);
      unint64_t v34 = (uint64_t **)(a1 + 8);
      if (*v30)
      {
        do
        {
          while (1)
          {
            long long v33 = (uint64_t **)v32;
            if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v31 + 4, v32 + 4))break; {
            unint64_t v32 = *v33;
            }
            unint64_t v34 = v33;
            if (!*v33) {
              goto LABEL_52;
            }
          }
          unint64_t v32 = v33[1];
        }
        while (v32);
        unint64_t v34 = v33 + 1;
      }
LABEL_52:
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v33, v34, (uint64_t *)v31);
      float v37 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v37);
      long long v35 = (long long *)*((void *)a2 + 1);
      if (v35)
      {
        do
        {
          float v36 = v35;
          long long v35 = *(long long **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          float v36 = (long long *)*((void *)a2 + 2);
          BOOL v29 = *(void *)v36 == (void)a2;
          a2 = v36;
        }
        while (!v29);
      }
      a2 = v36;
    }
    while (v36 != a3);
  }
}

void sub_1927B05F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 64) = v3;
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::quantizer::merge_stats_for_concat(Espresso::quantizer *this)
{
  unint64_t v1 = *(void *)(*(void *)this + 40) - *(void *)(*(void *)this + 32);
  if ((int)(v1 >> 4) >= 1)
  {
    uint64_t v3 = (void *)((char *)this + 184);
    uint64_t v4 = (uint64_t **)((char *)this + 16);
    uint64_t v5 = (v1 >> 4);
    int v47 = *((unsigned __int8 *)this + 140);
    int v48 = *((unsigned __int8 *)this + 141);
    float v49 = (char *)this + 184;
    do
    {
      uint64_t v6 = *(void *)this + 96;
      unint64_t v7 = (v5 - 1);
      unint64_t v51 = v7;
      float v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, &v51);
      if (v8[4] != v8[3])
      {
        uint64_t v9 = *(void *)this + 96;
        unint64_t v51 = (v5 - 1);
        long long v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v51, &v51);
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v3, v10[3]))
        {
          uint64_t v12 = *(void *)(*(void *)(*(void *)this + 32) + 16 * v7);
          uint64_t v13 = *(const void **)(v12 + 64);
          if (v13
          {
            unint64_t v14 = *(std::__shared_weak_count **)(v12 + 72);
            if (v14)
            {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
              nitro::nitro_function::nitro_function(v14);
            }
            if (!v48)
            {
              uint64_t v36 = *(void *)this + 56;
              unint64_t v51 = (v5 - 1);
              float v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v36, v51, &v51);
              unint64_t v39 = (long long *)v37[3];
              BOOL v38 = (long long *)v37[4];
              while (v39 != v38)
              {
                uint64_t v40 = *(void *)this + 96;
                unint64_t v50 = (v5 - 1);
                unint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v40, v50, &v50)[3];
                size_t v41 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (void *)v51, (long long **)&v51);
                unint64_t v51 = (unint64_t)v39;
                uint64_t v42 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v39, (long long **)&v51);
                uint64_t v43 = v42;
                long long v44 = *(_OWORD *)(v41 + 56);
                long long v45 = *(_OWORD *)(v41 + 72);
                long long v46 = *(_OWORD *)(v41 + 88);
                *((_DWORD *)v42 + 26) = *((_DWORD *)v41 + 26);
                *(_OWORD *)(v42 + 88) = v46;
                *(_OWORD *)(v42 + 72) = v45;
                *(_OWORD *)(v42 + 56) = v44;
                if (v42 != v41) {
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v42 + 112, *((char **)v41 + 14), *((void *)v41 + 15), (uint64_t)(*((void *)v41 + 15) - *((void *)v41 + 14)) >> 2);
                }
                v43[136] = v41[136];
                unint64_t v39 = (long long *)((char *)v39 + 24);
              }
            }
          }
          uint64_t v15 = *(void *)(*(void *)(*(void *)this + 32) + 16 * v7);
          uint64_t v16 = *(const void **)(v15 + 64);
          uint64_t v3 = v49;
          if (v16)
          {
            if (v17)
            {
              uint64_t v18 = *(std::__shared_weak_count **)(v15 + 72);
              if (v18) {
                atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unsigned int v19 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v17 + 320))(v17);
              BOOL v20 = v19 - 100 > 7 || ((1 << (v19 - 100)) & 0xF9) == 0;
              if (!v20
                || ((BOOL v11 = v19 > 0x21, v21 = (1 << v19) & 0x200C00001, !v11) ? (v22 = v21 == 0) : (v22 = 1), !v22))
              {
                if (!v47)
                {
                  uint64_t v23 = *(void *)this + 56;
                  unint64_t v51 = (v5 - 1);
                  uint64_t v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v23, v51, &v51);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24[4] - v24[3]) >> 3) >= 2)
                  {
                    uint64_t v25 = *(void *)this + 56;
                    unint64_t v51 = (v5 - 1);
                    unint64_t v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v25, v51, &v51);
                    unint64_t v28 = (long long *)v26[3];
                    unint64_t v27 = (long long *)v26[4];
                    while (v28 != v27)
                    {
                      uint64_t v29 = *(void *)this + 96;
                      unint64_t v50 = (v5 - 1);
                      unint64_t v51 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29, v50, &v50)[3];
                      uint8x8_t v30 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (void *)v51, (long long **)&v51);
                      unint64_t v51 = (unint64_t)v28;
                      unint64_t v31 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v28, (long long **)&v51);
                      unint64_t v32 = v31;
                      long long v33 = *(_OWORD *)(v30 + 56);
                      long long v34 = *(_OWORD *)(v30 + 72);
                      long long v35 = *(_OWORD *)(v30 + 88);
                      *((_DWORD *)v31 + 26) = *((_DWORD *)v30 + 26);
                      *(_OWORD *)(v31 + 88) = v35;
                      *(_OWORD *)(v31 + 72) = v34;
                      *(_OWORD *)(v31 + 56) = v33;
                      if (v31 != v30) {
                        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v31 + 112, *((char **)v30 + 14), *((void *)v30 + 15), (uint64_t)(*((void *)v30 + 15) - *((void *)v30 + 14)) >> 2);
                      }
                      v32[136] = v30[136];
                      unint64_t v28 = (long long *)((char *)v28 + 24);
                    }
                  }
                }
              }
              uint64_t v3 = v49;
              if (v18) {
                nitro::nitro_function::nitro_function(v18);
              }
            }
          }
        }
      }
      BOOL v11 = v5-- <= 1;
    }
    while (!v11);
  }
}

void sub_1927B0A60(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x90uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    float v8 = (std::string *)(v6 + 32);
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *((void *)v6 + 16) = 0;
    *((void *)v6 + 17) = 0;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_DWORD *)v6 + 26) = -1082130432;
    *((void *)v6 + 14) = 0;
    *((void *)v6 + 15) = 0;
    v6[136] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1927B0B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int8x8_t Espresso::quantizer::traits_for_blob@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, int8x8_t *a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 64))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state: estimate_stats or load_stats must be called first");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = a2;
  double v4 = *((double *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 16), a2, &v9)+ 7);
  unsigned int v5 = v4 < -0.000001;
  if (v4 >= -0.000001) {
    int v6 = 4;
  }
  else {
    int v6 = 2;
  }
  a3->i32[0] = v6;
  a3->i32[1] = 8;
  int8x8_t result = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v5), 0x1FuLL)), (int8x8_t)0x7FFFFFFF80, (int8x8_t)0xFF00000000);
  a3[1] = result;
  a3[2].i32[0] = 255;
  a3[2].i8[4] = v5;
  return result;
}

void sub_1927B0C54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    int8x8_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      int8x8_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1927B0CC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100]((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__init_with_size[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(this[1].__r_.__value_.__r.__words, *((long long **)a2 + 3), *((long long **)a2 + 4), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1927B0E64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<Espresso::dataset_estimator::statistics_entry_t>::__init_with_size[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<Espresso::dataset_estimator::statistics_entry_t>::__vallocate[abi:ne180100](result, a4);
    int8x8_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1927B0EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::dataset_estimator::statistics_entry_t>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int8x8_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      long long v7 = *v6;
      long long v8 = v6[1];
      long long v9 = v6[2];
      *(_DWORD *)(v4 + 48) = *((_DWORD *)v6 + 12);
      *(_OWORD *)(v4 + 16) = v8;
      *(_OWORD *)(v4 + 32) = v9;
      *(_OWORD *)uint64_t v4 = v7;
      *(void *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 0;
      *(void *)(v4 + 56) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(v4 + 56), *((const void **)v6 + 7), *((void *)v6 + 8), (uint64_t)(*((void *)v6 + 8) - *((void *)v6 + 7)) >> 2);
      *(unsigned char *)(v4 + 80) = *((unsigned char *)v6 + 80);
      uint64_t v4 = v14 + 88;
      v14 += 88;
      int v6 = (long long *)((char *)v6 + 88);
    }
    while (v6 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1927B101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      unsigned int v5 = *(void **)(v3 - 32);
      if (v5)
      {
        *(void *)(v3 - 24) = v5;
        operator delete(v5);
      }
      v3 -= 88;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 64;
    do
    {
      uint64_t v6 = v5 - 64;
      long long v7 = *(_OWORD *)(v5 - 64);
      long long v8 = *(_OWORD *)(v5 - 48);
      long long v9 = *(_OWORD *)(v5 - 32);
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(v5 - 16);
      *(_OWORD *)(a3 + 16) = v8;
      *(_OWORD *)(a3 + 32) = v9;
      *(_OWORD *)a3 = v7;
      if (a3 != v5 - 64) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a3 + 56), *(char **)(v5 - 8), *(void *)v5, (uint64_t)(*(void *)v5 - *(void *)(v5 - 8)) >> 2);
      }
      *(unsigned char *)(a3 + 80) = *(unsigned char *)(v5 + 16);
      a3 += 88;
      v5 += 88;
    }
    while (v6 + 88 != a2);
  }
  return a3;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v2);
  }
  return a1;
}

std::string *std::pair<std::string const,Espresso::dataset_estimator::statistics_entry_t>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  long long v6 = *(long long *)((char *)a2 + 40);
  long long v7 = *(long long *)((char *)a2 + 56);
  int v8 = *((_DWORD *)a2 + 18);
  this[3].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[3].__r_.__value_.__l.__data_) = v8;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v7;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[3].__r_.__value_.__l.__size_, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  this[4].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 104);
  return this;
}

void sub_1927B1250(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantizer::save_stats(uint64_t a1, uint64_t a2)
{
}

void Espresso::quantizer::estimate_stats(uint64_t a1, uint64_t *a2)
{
  long long v5 = *(std::string **)a1;
  long long v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = v5;
    uint64_t v15 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v14 = v5;
    uint64_t v15 = 0;
  }
  uint64_t v16 = v17;
  v17[0] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17[1] = 0;
  _OWORD v17[2] = v18;
  v19[0] = 0;
  v19[1] = 0;
  v18[2] = v19;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  char v10 = 0;
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  v9[0] = *(_DWORD *)(a1 + 76);
  v9[1] = 1;
  int v11 = *(_DWORD *)(a1 + 136);
  if (v12 != (_OWORD *)(a1 + 144))
  {
    int v13 = *(_DWORD *)(a1 + 176);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v12, *(uint64_t **)(a1 + 160), 0);
  }
  uint64_t v6 = *a2;
  long long v7 = (std::__shared_weak_count *)a2[1];
  v8[0] = v6;
  v8[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::dataset_estimator::estimate(&v14, v8, v9, 0);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::quantizer::set_stats((Espresso::quantizer *)a1, (const Espresso::dataset_estimator::result_t *)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(v19[0]);
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(v18[0]);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v17[0]);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_1927B13C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v10);
  Espresso::dataset_estimator::~dataset_estimator((Espresso::dataset_estimator *)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void Espresso::dataset_estimator::~dataset_estimator(Espresso::dataset_estimator *this)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(*((void **)this + 9));
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*((void **)this + 6));
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*((void **)this + 3));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void ***)(a1 + 32);
    long long v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v3 -= 3;
        uint64_t v6 = v3;
        std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v3 != v2);
      long long v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v5 = *(void **)a1;
    operator delete(v5);
  }
}

void Espresso::quantizer::quantize(Espresso::quantizer *this)
{
  if (!*((unsigned char *)this + 64))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state: estimate_stats or load_stats must be called first");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 40) != v3)
  {
    unint64_t v4 = 0;
    long long v5 = (uint64_t **)((char *)this + 224);
    uint64_t v6 = (void *)((char *)this + 184);
    long long v114 = (uint64_t **)((char *)this + 224);
    long long v115 = (char *)this + 184;
    while (1)
    {
      long long v7 = (uint64_t *)(v3 + 16 * v4);
      uint64_t v8 = *v7;
      long long v9 = (std::__shared_weak_count *)v7[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(void *)(v8 + 64);
      uint64_t v10 = *(std::__shared_weak_count **)(v8 + 72);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *(void *)this + 56;
      buf.int data = (void *)v4;
      int v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v4, &buf);
      uint64_t v140 = 0;
      unint64_t v141 = 0;
      uint64_t v142 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v140, v13[3], v13[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[4] - v13[3]) >> 3));
      uint64_t v14 = *(void *)this + 96;
      buf.int data = (void *)v4;
      uint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v4, &buf);
      long long v137 = 0;
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v137, v15[3], v15[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[4] - v15[3]) >> 3));
      if (v138 - (void)v137 != 24) {
        break;
      }
      if (v141 == (long long *)v140)
      {
        unint64_t v27 = Espresso::espresso_os_log_subsystem(v16, v140);
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          goto LABEL_22;
        }
        LOWORD(buf.data) = 0;
        unint64_t v28 = v27;
        uint64_t v29 = "No bottom";
        goto LABEL_37;
      }
      buf.int data = v140;
      float v18 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
      buf.int data = v137;
      float v19 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, v137, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
      if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v6, (uint64_t)v137))
      {
        uint64_t v20 = *(void *)(*(void *)(*(void *)this + 32) + 16 * v4);
        uint64_t v21 = *(const void **)(v20 + 64);
        if (v21)
        {
          if (v22)
          {
            uint64_t v23 = (uint64_t)v22;
            uint64_t v24 = *(std::__shared_weak_count **)(v20 + 72);
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(vImage_Buffer *__return_ptr, void *))(*(void *)v22 + 448))(&buf, v22);
            height = (std::__shared_weak_count *)buf.height;
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v23 + 456))(&v145, v23);
            if (!(void)v145)
            {
              (*(void (**)(int **__return_ptr, uint64_t))(*(void *)v23 + 552))(&v143, v23);
              if (!v143) {
                Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cannot find convolution weights. The model needs to be in float32 or float16");
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&buf, (uint64_t)(v143 + 2));
              uint64_t v25 = (std::__shared_weak_count *)*((void *)&v145 + 1);
              long long v145 = *(_OWORD *)&buf.data;
              if (v25)
              {
                nitro::nitro_function::nitro_function(v25);
                int data = (int *)v145;
              }
              else
              {
                int data = (int *)buf.data;
              }
              uint64_t v40 = 0;
              size_t v41 = (void *)*((void *)data + 3);
              vImagePixelCount v42 = data[2];
              uint64_t v43 = (char *)(data + 3);
              do
              {
                v42 *= *(int *)&v43[v40];
                v40 += 4;
              }
              while (v40 != 12);
              buf.int data = (void *)*((void *)v143 + 3);
              buf.height = 1;
              buf.width = v42;
              buf.rowBytes = 2 * v42;
              dest.int data = v41;
              dest.height = 1;
              dest.width = v42;
              dest.rowBytes = 4 * v42;
              vImageConvert_Planar16FtoPlanarF(&buf, &dest, 0);
              *(_OWORD *)&buf.int data = v145;
              if (*((void *)&v145 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v145 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, vImage_Buffer *))(*(void *)v23 + 400))(v23, &buf);
              if (buf.height) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.height);
              }
              if (v144) {
                nitro::nitro_function::nitro_function(v144);
              }
            }
            if (*((void *)&v145 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v145 + 1));
            }
            long long v44 = v24;
            uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 384))(v23);
            uint64_t v46 = *(unsigned int *)(v45 + 40);
            int v47 = *(_DWORD *)(v45 + 116);
            (*(void (**)(vImage_Buffer *__return_ptr, uint64_t))(*(void *)v23 + 456))(&buf, v23);
            std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int const*&,void>(&dest, (uint64_t)buf.data + 8);
            Espresso::blob<float,4>::transpose((uint64_t *)&v145, (uint64_t)buf.data, (uint64_t)dword_192DCA950);
            int v48 = (float *)(*(_DWORD *)(v145 + 12) * *(_DWORD *)(v145 + 8) * *(_DWORD *)(v145 + 16) / v47);
            long long v134 = xmmword_192DCA4B0;
            int v135 = 255;
            char v136 = 1;
            Espresso::quantizer::get_per_channel_scale_from_min_max(&v134, *(Espresso::dataset_estimator::statistics_entry_t **)(v145 + 24), v48, v46, (uint64_t *)&v143);
            long long v117 = v144;
            long long v118 = v143;
            float v37 = v44;
            if ((int)v46 >= 1)
            {
              unint64_t v51 = (float *)*((void *)v143 + 2);
              do
              {
                *unint64_t v51 = v19 / (float)(v18 * *v51);
                ++v51;
                --v46;
              }
              while (v46);
            }
            v133[0] = v23;
            v133[1] = (uint64_t)v44;
            if (v44) {
              atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::quantizer::quantize_deconv_weights(v49, v50, v133);
            long long v5 = v114;
            uint64_t v6 = v115;
            if (v44) {
              nitro::nitro_function::nitro_function(v44);
            }
            if (*((void *)&v145 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v145 + 1));
            }
            if (dest.height) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.height);
            }
            if (buf.height)
            {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.height);
              if (!v44) {
                goto LABEL_224;
              }
LABEL_181:
              nitro::nitro_function::nitro_function(v37);
LABEL_224:
              dest.int data = 0;
              dest.height = 0;
              std::string::basic_string[abi:ne180100]<0>(&buf, "post_scale");
              (*(void (**)(uint64_t, vImage_Buffer *, vImage_Buffer *, void, uint64_t, void))(*(void *)v11 + 168))(v11, &dest, &buf, *((void *)v118 + 2), 4 * v118[2], 0);
              if (SHIBYTE(buf.width) < 0) {
                operator delete(buf.data);
              }
              if (dest.height) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.height);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&dest, 1, 1, 1, 1);
              long long v110 = (int *)dest.data;
              **((float **)dest.data + 2) = v19;
              long long v145 = 0uLL;
              std::string::basic_string[abi:ne180100]<0>(&buf, "hx_extra_f");
              (*(void (**)(uint64_t, long long *, vImage_Buffer *, void, uint64_t, void))(*(void *)v11 + 168))(v11, &v145, &buf, *((void *)v110 + 2), 4 * v110[2], 0);
              if (SHIBYTE(buf.width) < 0) {
                operator delete(buf.data);
              }
              if (*((void *)&v145 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v145 + 1));
              }
              if (dest.height) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.height);
              }
              if (height) {
                nitro::nitro_function::nitro_function(height);
              }
              if (v117) {
                nitro::nitro_function::nitro_function(v117);
              }
              goto LABEL_23;
            }
LABEL_180:
            if (v37) {
              goto LABEL_181;
            }
            goto LABEL_224;
          }
          if (v30)
          {
            uint64_t v31 = (uint64_t)v30;
            unint64_t v32 = *(std::__shared_weak_count **)(v20 + 72);
            if (v32) {
              atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(long long *__return_ptr, void *))(*(void *)v30 + 456))(&v145, v30);
            if (!(void)v145)
            {
              (*(void (**)(int **__return_ptr, uint64_t))(*(void *)v31 + 552))(&v143, v31);
              if (!v143) {
                Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cannot find convolution weights. The model needs to be in float32 or float16");
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&buf, (uint64_t)(v143 + 2));
              long long v33 = (std::__shared_weak_count *)*((void *)&v145 + 1);
              long long v145 = *(_OWORD *)&buf.data;
              if (v33)
              {
                nitro::nitro_function::nitro_function(v33);
                long long v34 = (int *)v145;
              }
              else
              {
                long long v34 = (int *)buf.data;
              }
              uint64_t v59 = 0;
              uint64_t v60 = (void *)*((void *)v34 + 3);
              vImagePixelCount v61 = v34[2];
              std::string v62 = (char *)(v34 + 3);
              do
              {
                v61 *= *(int *)&v62[v59];
                v59 += 4;
              }
              while (v59 != 12);
              buf.int data = (void *)*((void *)v143 + 3);
              buf.height = 1;
              buf.width = v61;
              buf.rowBytes = 2 * v61;
              dest.int data = v60;
              dest.height = 1;
              dest.width = v61;
              dest.rowBytes = 4 * v61;
              vImageConvert_Planar16FtoPlanarF(&buf, &dest, 0);
              *(_OWORD *)&buf.int data = v145;
              if (*((void *)&v145 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v145 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, vImage_Buffer *))(*(void *)v31 + 400))(v31, &buf);
              if (buf.height) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.height);
              }
              if (v144) {
                nitro::nitro_function::nitro_function(v144);
              }
            }
            if (*((void *)&v145 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v145 + 1));
            }
            uint64_t v63 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v31 + 384))(v31) + 40);
            (*(void (**)(vImage_Buffer *__return_ptr, uint64_t))(*(void *)v31 + 456))(&dest, v31);
            (*(void (**)(vImage_Buffer *__return_ptr, uint64_t))(*(void *)v31 + 448))(&buf, v31);
            height = (std::__shared_weak_count *)buf.height;
            uint64_t v64 = dest.data;
            long long v65 = (std::__shared_weak_count *)dest.height;
            if (dest.height) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(dest.height + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v66 = (float *)(*((_DWORD *)v64 + 3) * *((_DWORD *)v64 + 2) * *((_DWORD *)v64 + 4));
            *(_OWORD *)&buf.int data = xmmword_192DCA4B0;
            LODWORD(buf.width) = 255;
            BYTE4(buf.width) = 1;
            Espresso::quantizer::get_per_channel_scale_from_min_max((long long *)&buf, *((Espresso::dataset_estimator::statistics_entry_t **)v64 + 3), v66, *((_DWORD *)v64 + 5), (uint64_t *)&v145);
            long long v117 = (std::__shared_weak_count *)*((void *)&v145 + 1);
            long long v118 = (int *)v145;
            if (v65) {
              nitro::nitro_function::nitro_function(v65);
            }
            float v37 = v32;
            if (*((unsigned char *)this + 142))
            {
              v132[0] = v118;
              v132[1] = v117;
              if (v117) {
                atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              min_max_scale_to_qscale(&v145, (uint64_t)v132);
              if (v117) {
                nitro::nitro_function::nitro_function(v117);
              }
              id v143 = 0;
              uint64_t v144 = 0;
              std::string::basic_string[abi:ne180100]<0>(&buf, "per_ch_qscale");
              (*(void (**)(uint64_t, int **, vImage_Buffer *, void, uint64_t, void))(*(void *)v31 + 168))(v31, &v143, &buf, *(void *)(v145 + 16), 4 * *(int *)(v145 + 8), 0);
              if (SHIBYTE(buf.width) < 0) {
                operator delete(buf.data);
              }
              if (v144) {
                nitro::nitro_function::nitro_function(v144);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v143, v63, 1, 1, 1);
              uint64_t v130 = 0;
              long long v131 = 0;
              std::string::basic_string[abi:ne180100]<0>(&buf, "per_ch_qbias");
              (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *, void, uint64_t, void))(*(void *)v31 + 168))(v31, &v130, &buf, *((void *)v143 + 2), 4 * v143[2], 0);
              if (SHIBYTE(buf.width) < 0) {
                operator delete(buf.data);
              }
              if (v131) {
                nitro::nitro_function::nitro_function(v131);
              }
              if (v144) {
                nitro::nitro_function::nitro_function(v144);
              }
              uint64_t v67 = *((void *)&v145 + 1);
              if (*((void *)&v145 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v145 + 1));
              }
            }
            if ((int)v63 >= 1)
            {
              long long v69 = (float *)*((void *)v118 + 2);
              do
              {
                *long long v69 = v19 / (float)(v18 * *v69);
                ++v69;
                --v63;
              }
              while (v63);
            }
            v129[0] = v31;
            v129[1] = (uint64_t)v32;
            if (v32) {
              atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::quantizer::quantize_conv_weights(v67, v68, v129);
            long long v5 = v114;
            if (v32) {
              nitro::nitro_function::nitro_function(v32);
            }
            if (!*((unsigned char *)this + 142)) {
              goto LABEL_177;
            }
            uint64_t v127 = 0;
            long long v128 = 0;
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v31 + 400))(v31, &v127);
            long long v70 = v128;
            if (!v128) {
              goto LABEL_177;
            }
LABEL_176:
            nitro::nitro_function::nitro_function(v70);
            goto LABEL_177;
          }
          if (v35)
          {
            uint64_t v36 = (uint64_t)v35;
            float v37 = *(std::__shared_weak_count **)(v20 + 72);
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(long long *__return_ptr, void *))(*(void *)v35 + 416))(&v145, v35);
            if (!(void)v145)
            {
              (*(void (**)(int **__return_ptr, uint64_t))(*(void *)v36 + 472))(&v143, v36);
              if (!v143) {
                Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cannot find convolution weights. The model needs to be in float32 or float16");
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&buf, v143 + 2);
              BOOL v38 = (std::__shared_weak_count *)*((void *)&v145 + 1);
              long long v145 = *(_OWORD *)&buf.data;
              if (v38)
              {
                nitro::nitro_function::nitro_function(v38);
                unint64_t v39 = (int *)v145;
              }
              else
              {
                unint64_t v39 = (int *)buf.data;
              }
              uint64_t v81 = (void *)*((void *)v39 + 2);
              vImagePixelCount v82 = v39[3] * (uint64_t)v39[2];
              buf.int data = (void *)*((void *)v143 + 2);
              buf.height = 1;
              buf.width = v82;
              buf.rowBytes = 2 * v82;
              dest.int data = v81;
              dest.height = 1;
              dest.width = v82;
              dest.rowBytes = 4 * v82;
              vImageConvert_Planar16FtoPlanarF(&buf, &dest, 0);
              *(_OWORD *)&buf.int data = v145;
              if (*((void *)&v145 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v145 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, vImage_Buffer *))(*(void *)v36 + 400))(v36, &buf);
              if (buf.height) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.height);
              }
              if (v144) {
                nitro::nitro_function::nitro_function(v144);
              }
            }
            if (*((void *)&v145 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v145 + 1));
            }
            int v83 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v36 + 384))(v36);
            (*(void (**)(vImage_Buffer *__return_ptr, uint64_t))(*(void *)v36 + 416))(&dest, v36);
            (*(void (**)(vImage_Buffer *__return_ptr, uint64_t))(*(void *)v36 + 408))(&buf, v36);
            height = (std::__shared_weak_count *)buf.height;
            uint64_t v84 = *(void *)this + 136;
            buf.int data = v140;
            if (*(int *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v84, (unsigned __int8 *)v140, (long long **)&buf)+ 5)+ 28) > 2)
            {
              long long v113 = v37;
              __int16 v88 = (Espresso::dataset_estimator::statistics_entry_t **)dest.data;
              BOOL v89 = (std::__shared_weak_count *)dest.height;
              if (dest.height) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(dest.height + 8), 1uLL, memory_order_relaxed);
              }
              *(_OWORD *)&buf.int data = xmmword_192DCA4B0;
              LODWORD(buf.width) = 255;
              BYTE4(buf.width) = 1;
              Espresso::quantizer::get_per_channel_scale_from_min_max((long long *)&buf, v88[2], (float *)*((unsigned int *)v88 + 2), *((_DWORD *)v88 + 3), (uint64_t *)&v145);
              long long v117 = (std::__shared_weak_count *)*((void *)&v145 + 1);
              long long v118 = (int *)v145;
              if (v89) {
                nitro::nitro_function::nitro_function(v89);
              }
              float v37 = v113;
            }
            else
            {
              uint64_t v85 = (float *)(*((_DWORD *)dest.data + 3) * *((_DWORD *)dest.data + 2));
              long long v124 = xmmword_192DCA4B0;
              int v125 = 255;
              char v126 = 1;
              Espresso::quantizer::get_per_channel_scale_from_min_max(&v124, *((Espresso::dataset_estimator::statistics_entry_t **)dest.data + 2), v85, 1, (uint64_t *)&buf);
              long long v117 = (std::__shared_weak_count *)buf.height;
              long long v118 = (int *)buf.data;
            }
            if (*((unsigned char *)this + 142))
            {
              v123[0] = v118;
              v123[1] = v117;
              if (v117) {
                atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              min_max_scale_to_qscale(&v145, (uint64_t)v123);
              if (v117) {
                nitro::nitro_function::nitro_function(v117);
              }
              id v143 = 0;
              uint64_t v144 = 0;
              std::string::basic_string[abi:ne180100]<0>(&buf, "per_ch_qscale");
              (*(void (**)(uint64_t, int **, vImage_Buffer *, void, uint64_t, void))(*(void *)v36 + 168))(v36, &v143, &buf, *(void *)(v145 + 16), 4 * *(int *)(v145 + 8), 0);
              if (SHIBYTE(buf.width) < 0) {
                operator delete(buf.data);
              }
              if (v144) {
                nitro::nitro_function::nitro_function(v144);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v143, v83, 1, 1, 1);
              uint64_t v130 = 0;
              long long v131 = 0;
              std::string::basic_string[abi:ne180100]<0>(&buf, "per_ch_qbias");
              (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *, void, uint64_t, void))(*(void *)v36 + 168))(v36, &v130, &buf, *((void *)v143 + 2), 4 * v143[2], 0);
              if (SHIBYTE(buf.width) < 0) {
                operator delete(buf.data);
              }
              if (v131) {
                nitro::nitro_function::nitro_function(v131);
              }
              if (v144) {
                nitro::nitro_function::nitro_function(v144);
              }
              uint64_t v86 = *((void *)&v145 + 1);
              if (*((void *)&v145 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v145 + 1));
              }
            }
            uint64_t v90 = v118[2];
            if (v90)
            {
              std::string v91 = (float *)*((void *)v118 + 2);
              do
              {
                *std::string v91 = v19 / (float)(v18 * *v91);
                ++v91;
                --v90;
              }
              while (v90);
            }
            v122[0] = v36;
            v122[1] = (uint64_t)v37;
            long long v5 = v114;
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::quantizer::quantize_inner_product_weights(v86, v87, v122);
            if (v37) {
              nitro::nitro_function::nitro_function(v37);
            }
            if (*((unsigned char *)this + 142))
            {
              uint64_t v120 = 0;
              long long v121 = 0;
              (*(void (**)(uint64_t, uint64_t *))(*(void *)v36 + 400))(v36, &v120);
              long long v70 = v121;
              if (v121) {
                goto LABEL_176;
              }
            }
LABEL_177:
            if (dest.height) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.height);
            }
LABEL_179:
            uint64_t v6 = v115;
            goto LABEL_180;
          }
          if (v52)
          {
            float v37 = *(std::__shared_weak_count **)(v20 + 72);
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v53 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v52 + 320))(v52);
            long long v5 = v114;
            int v54 = *v53;
            float v55 = *((float *)v53 + 2);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&buf, 1, 1, 1, 1);
            long long v117 = (std::__shared_weak_count *)buf.height;
            long long v118 = (int *)buf.data;
            if (v54 <= 99)
            {
              switch(v54)
              {
                case 22:
                case 23:
                  goto LABEL_77;
                case 24:
                case 25:
                case 29:
                case 30:
                case 31:
                case 32:
                case 34:
                  goto LABEL_132;
                case 26:
                case 27:
                case 35:
                case 36:
                case 37:
                  goto LABEL_130;
                case 28:
                  goto LABEL_218;
                case 33:
LABEL_189:
                  if ((char *)v141 - v140 != 48) {
                    goto LABEL_132;
                  }
                  buf.int data = v140;
                  float v95 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
                  buf.int data = v140 + 24;
                  char v96 = (float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, (void *)v140 + 3, (uint64_t)&std::piecewise_construct, (long long **)&buf);
                  if ((float)(1.0 / sqrtf(v95)) == (float)(1.0 / sqrtf(v96[14]))) {
                    goto LABEL_132;
                  }
                  std::string v76 = Espresso::espresso_os_log_subsystem((Espresso *)v96, v97);
                  if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_131;
                  }
                  LOWORD(buf.data) = 0;
                  std::string v77 = v76;
                  char v78 = "Detected Elementwise-Add/Sub with inputs having different scales";
                  break;
                default:
                  switch(v54)
                  {
                    case 0:
                      goto LABEL_189;
                    case 1:
                      unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - v140) >> 3);
                      if (v107 == 1)
                      {
                        buf.int data = v140;
                        float v18 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
                        goto LABEL_132;
                      }
                      if (v107 != 2) {
                        goto LABEL_132;
                      }
                      break;
                    case 10:
                      buf.int data = v140;
                      float v105 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
                      goto LABEL_214;
                    case 11:
                      buf.int data = v140;
                      float v18 = sqrtf(*((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14));
                      goto LABEL_132;
                    case 12:
                      buf.int data = v140;
                      float v105 = sqrtf(*((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14));
LABEL_214:
                      float v18 = 1.0 / v105;
                      goto LABEL_132;
                    case 13:
                      buf.int data = v140;
                      long long v106 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf);
                      float v18 = powf(*((float *)v106 + 14), v55);
                      goto LABEL_132;
                    default:
                      goto LABEL_132;
                  }
LABEL_218:
                  buf.int data = v140;
                  float v108 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
                  buf.int data = v140 + 24;
                  float v18 = v108
                      * *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, (void *)v140 + 3, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
                  goto LABEL_132;
              }
            }
            else
            {
              char v58 = v54 - 100;
              if ((v54 - 100) > 0x1E) {
                goto LABEL_200;
              }
              if (((1 << v58) & 0x7FE60000) == 0)
              {
                if (((1 << v58) & 0x2CF9) != 0)
                {
LABEL_77:
                  is_valid_multiple_inputs_scale((long long **)&v140, v114);
                  goto LABEL_132;
                }
                if (v54 == 102)
                {
LABEL_201:
                  buf.int data = v140;
                  float v101 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
                  buf.int data = v140 + 24;
                  float v18 = v101
                      / *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, (void *)v140 + 3, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
                }
                else
                {
LABEL_200:
                  if (v54 == 1021) {
                    goto LABEL_201;
                  }
                }
LABEL_132:
                height = 0;
                float v79 = v19 / v18;
                __int16 v80 = (float *)*((void *)v118 + 2);
LABEL_133:
                *__int16 v80 = v79;
                goto LABEL_179;
              }
LABEL_130:
              std::string v76 = Espresso::espresso_os_log_subsystem(v56, v57);
              if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
              {
LABEL_131:

                goto LABEL_132;
              }
              LOWORD(buf.data) = 0;
              std::string v77 = v76;
              char v78 = "Detected Elementwise with non-linear operations not supported for quantization. Please check precision";
            }
LABEL_210:
            _os_log_debug_impl(&dword_1920CB000, v77, OS_LOG_TYPE_DEBUG, v78, (uint8_t *)&buf, 2u);
            goto LABEL_131;
          }
          if (v71)
          {
            float v37 = *(std::__shared_weak_count **)(v20 + 72);
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v5 = v114;
            unsigned int v72 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v71 + 384))(v71);
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&buf, 1, 1, 1, 1);
            long long v117 = (std::__shared_weak_count *)buf.height;
            long long v118 = (int *)buf.data;
            if (v72 > 8 || ((1 << v72) & 0x12A) == 0) {
              goto LABEL_132;
            }
            std::string v76 = Espresso::espresso_os_log_subsystem(v73, v74);
            if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_131;
            }
            LOWORD(buf.data) = 0;
            std::string v77 = v76;
            char v78 = "Detected Activation with non-linear modes not supported for quantization. Please check precision";
            goto LABEL_210;
          }
          uint64_t v6 = v115;
          {
            float v37 = *(std::__shared_weak_count **)(v20 + 72);
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&buf, 1, 1, 1, 1);
            long long v5 = v114;
            unint64_t v92 = (float **)buf.data;
            long long v117 = (std::__shared_weak_count *)buf.height;
            is_valid_multiple_inputs_scale((long long **)&v140, v114);
            height = 0;
            float v93 = v19 / v18;
            long long v118 = (int *)v92;
            char v94 = v92[2];
            goto LABEL_186;
          }
          if (v98)
          {
            float v37 = *(std::__shared_weak_count **)(v20 + 72);
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v100 = Espresso::espresso_os_log_subsystem(v98, v99);
            long long v5 = v114;
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(buf.data) = 0;
              _os_log_debug_impl(&dword_1920CB000, v100, OS_LOG_TYPE_DEBUG, "Detected softmax kernel not supported for quantization. Please check precision", (uint8_t *)&buf, 2u);
            }

            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&buf, 1, 1, 1, 1);
LABEL_208:
            height = 0;
            long long v117 = (std::__shared_weak_count *)buf.height;
            long long v118 = (int *)buf.data;
            __int16 v80 = (float *)*((void *)buf.data + 2);
            float v79 = v19 / v18;
            goto LABEL_133;
          }
          if (v102)
          {
            float v37 = *(std::__shared_weak_count **)(v20 + 72);
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string v104 = Espresso::espresso_os_log_subsystem(v102, v103);
            long long v5 = v114;
            if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(buf.data) = 0;
              _os_log_debug_impl(&dword_1920CB000, v104, OS_LOG_TYPE_DEBUG, "Detected softmax_nd kernel not supported for quantization. Please check precision", (uint8_t *)&buf, 2u);
            }

            Espresso::blob<float,1>::make(&buf, 1);
            goto LABEL_208;
          }
          long long v5 = v114;
          {
            float v37 = *(std::__shared_weak_count **)(v20 + 72);
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&buf, 1, 1, 1, 1);
            long long v117 = (std::__shared_weak_count *)buf.height;
            long long v118 = (int *)buf.data;
            buf.int data = v140;
            float v109 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, v140, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14);
            buf.int data = v140 + 24;
            height = 0;
            float v93 = v19
                / (float)(v109
                        * *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, (void *)v140 + 3, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 14));
            char v94 = (float *)*((void *)v118 + 2);
LABEL_186:
            float *v94 = v93;
            if (!v37) {
              goto LABEL_224;
            }
            goto LABEL_181;
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&buf, 1, 1, 1, 1);
        height = 0;
        long long v117 = (std::__shared_weak_count *)buf.height;
        long long v118 = (int *)buf.data;
        **((float **)buf.data + 2) = v19 / v18;
        goto LABEL_224;
      }
LABEL_23:
      buf.int data = &v137;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      buf.int data = &v140;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      ++v4;
      uint64_t v2 = *(void *)this;
      uint64_t v3 = *(void *)(*(void *)this + 32);
      if (v4 >= (*(void *)(*(void *)this + 40) - v3) >> 4) {
        goto LABEL_239;
      }
    }
    unint64_t v27 = Espresso::espresso_os_log_subsystem(v16, v17);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
LABEL_22:

      goto LABEL_23;
    }
    LOWORD(buf.data) = 0;
    unint64_t v28 = v27;
    uint64_t v29 = "No top";
LABEL_37:
    _os_log_error_impl(&dword_1920CB000, v28, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, 2u);
    goto LABEL_22;
  }
LABEL_239:
  long long v111 = (std::__shared_weak_count *)*((void *)this + 1);
  v119[0] = v2;
  v119[1] = v111;
  if (v111) {
    atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::convert_weights_to_fp16((uint64_t)v119);
  if (v111) {
    nitro::nitro_function::nitro_function(v111);
  }
}

void sub_1927B2F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45)
{
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  *(void *)(v48 - 224) = &a45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 224));
  a45 = (void **)(v48 - 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a45);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int const*&,void>(void *a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x60uLL);
  long long v5 = v4;
  uint64_t v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *unint64_t v4 = &unk_1EE3898B0;
  long long v7 = (char *)(v4 + 3);
  v4[3] = &unk_1EE36BE70;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  size_t v8 = 1;
  do
  {
    uint64_t v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  uint64_t v10 = Espresso::kern_alloc_uninitialized((Espresso *)v8);
  bzero(v10, v8);
  v5[6] = v10;
  *((unsigned char *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_1927B34B8(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  unint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<float,4>::transpose(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  do
  {
    *(_DWORD *)&v35[v6] = *(_DWORD *)(a2 + 4 * *(int *)(a3 + v6) + 8);
    v6 += 4;
  }
  while (v6 != 16);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(a1, (uint64_t)v35);
  uint64_t v7 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v8 = 1;
  do
  {
    *((void *)&v31 + v7) = (int)v8;
    v8 *= *(int *)(a2 + 8 + 4 * v7++);
  }
  while (v7 != 4);
  uint64_t v9 = 0;
  uint64_t v33 = v8;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v10 = *a1;
  uint64_t v11 = *a1 + 8;
  uint64_t v12 = 1;
  do
  {
    *((void *)&v28 + v9) = (int)v12;
    v12 *= *(int *)(v11 + 4 * v9++);
  }
  while (v9 != 4);
  unint64_t v13 = 0;
  uint64_t v30 = v12;
  unint64_t v14 = *(int *)(a2 + 8);
  while (1)
  {
    uint64_t v15 = 0;
    unint64_t v16 = v14;
    do
    {
      uint64_t result = *(int *)(a2 + 12 + v15);
      v16 *= result;
      v15 += 4;
    }
    while (v15 != 12);
    if (v16 <= v13) {
      break;
    }
    v26[0] = v31;
    v26[1] = v32;
    uint64_t v27 = v33;
    uint64_t v18 = 3;
    LODWORD(v19) = v13;
    do
    {
      unint64_t v20 = *((void *)v26 + v18);
      *(_DWORD *)&v34[4 * v18 + 16] = (int)v19 / v20;
      unint64_t v19 = (int)v19 % v20;
      --v18;
    }
    while (v18 != -1);
    for (uint64_t i = 0; i != 16; i += 4)
      *(_DWORD *)&v34[i] = *(_DWORD *)&v34[4 * *(int *)(a3 + i) + 16];
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    v24[0] = v28;
    v24[1] = v29;
    uint64_t v25 = v30;
    do
    {
      v23 += *((void *)v24 + v22) * *(int *)&v34[4 * v22];
      ++v22;
    }
    while (v22 != 4);
    *(_DWORD *)(*(void *)(v10 + 24) + 4 * v23) = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v13++);
  }
  return result;
}

void Espresso::quantizer::quantize_deconv_weights(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a3 + 456))(&v32);
  Espresso::blob<float,4>::transpose(&v30, v32, (uint64_t)dword_192DCA950);
  unint64_t v4 = (std::__shared_weak_count *)v31;
  v27[0] = v30;
  v27[1] = v31;
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  quantize_S8_w_tensor<4>(&v28, v27);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = 0;
  uint64_t v6 = v28;
  do
  {
    *(_DWORD *)&v45[v5 * 4] = *(_DWORD *)(v6 + 4 * dword_192DCA950[v5] + 8);
    ++v5;
  }
  while (v5 != 4);
  std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int const*&,void>(&v25, (uint64_t)v45);
  uint64_t v7 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v8 = 1;
  do
  {
    *((void *)&v41 + v7) = (int)v8;
    v8 *= *(int *)(v6 + 8 + 4 * v7++);
  }
  while (v7 != 4);
  uint64_t v9 = 0;
  uint64_t v43 = v8;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v10 = v25;
  uint64_t v11 = v25 + 8;
  uint64_t v12 = 1;
  do
  {
    *((void *)&v38 + v9) = (int)v12;
    v12 *= *(int *)(v11 + 4 * v9++);
  }
  while (v9 != 4);
  unint64_t v13 = 0;
  uint64_t v40 = v12;
  while (1)
  {
    uint64_t v14 = 0;
    unint64_t v15 = *(int *)(v6 + 8);
    do
    {
      v15 *= *(int *)(v6 + 12 + v14);
      v14 += 4;
    }
    while (v14 != 12);
    if (v15 <= v13) {
      break;
    }
    v36[0] = v41;
    v36[1] = v42;
    uint64_t v37 = v43;
    uint64_t v16 = 3;
    LODWORD(v17) = v13;
    do
    {
      unint64_t v18 = *((void *)v36 + v16);
      *(_DWORD *)&v44[4 * v16 + 16] = (int)v17 / v18;
      unint64_t v17 = (int)v17 % v18;
      --v16;
    }
    while (v16 != -1);
    for (uint64_t i = 0; i != 4; ++i)
      *(_DWORD *)&v44[i * 4] = *(_DWORD *)&v44[4 * dword_192DCA950[i] + 16];
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    v34[0] = v38;
    v34[1] = v39;
    uint64_t v35 = v40;
    do
    {
      v21 += *((void *)v34 + v20) * *(int *)&v44[4 * v20];
      ++v20;
    }
    while (v20 != 4);
    *(unsigned char *)(*(void *)(v10 + 24) + v21) = *(unsigned char *)(*(void *)(v6 + 24) + v13++);
  }
  uint64_t v22 = *a3;
  long long v38 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v41, "W_S8");
  uint64_t v23 = 0;
  uint64_t v24 = *(int *)(v10 + 8);
  do
  {
    v24 *= *(int *)(v10 + 12 + v23);
    v23 += 4;
  }
  while (v23 != 12);
  (*(void (**)(uint64_t, long long *, long long *, void, uint64_t, void))(*(void *)v22 + 168))(v22, &v38, &v41, *(void *)(v10 + 24), v24, 0);
  if (SBYTE7(v42) < 0) {
    operator delete((void *)v41);
  }
  if (*((void *)&v38 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v38 + 1));
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
}

void sub_1927B39EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (*(char *)(v33 - 121) < 0) {
    operator delete(*(void **)(v33 - 144));
  }
  if (a32) {
    nitro::nitro_function::nitro_function(a32);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void min_max_scale_to_qscale(void *a1, uint64_t a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a1, *(_DWORD *)(*(void *)a2 + 8), 1, 1, 1);
  uint64_t v4 = *(int *)(*(void *)a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(float **)(*(void *)a2 + 16);
    uint64_t v6 = *(float **)(*a1 + 16);
    do
    {
      float v7 = *v5++;
      *v6++ = 1.0 / v7;
      --v4;
    }
    while (v4);
  }
}

void Espresso::quantizer::quantize_conv_weights(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a3 + 456))(&v15);
  uint64_t v4 = v16;
  v12[0] = v15;
  v12[1] = (uint64_t)v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quantize_S8_w_tensor<4>(&v13, v12);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *a3;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "W_S8");
  uint64_t v6 = 0;
  uint64_t v7 = *(int *)(v13 + 8);
  do
  {
    v7 *= *(int *)(v13 + 12 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v5 + 168))(v5, &v10, __p, *(void *)(v13 + 24), v7, 0);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_1927B3C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  unint64_t v19 = *(std::__shared_weak_count **)(v17 - 40);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v17 - 24);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1927B3C60()
{
  if (!v0) {
    JUMPOUT(0x1927B3C4CLL);
  }
  JUMPOUT(0x1927B3C48);
}

void Espresso::quantizer::quantize_inner_product_weights(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a3 + 416))(&v18);
  uint64_t v5 = v18;
  uint64_t v4 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE389878;
  *((void *)v6 + 3) = &unk_1EE36BE50;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  int v7 = *(_DWORD *)(v5 + 8);
  *((_DWORD *)v6 + 8) = v7;
  int v8 = *(_DWORD *)(v5 + 12);
  *((_DWORD *)v6 + 9) = v8;
  size_t v9 = v8 * (uint64_t)v7;
  uint64_t v10 = Espresso::kern_alloc_uninitialized((Espresso *)v9);
  bzero(v10, v9);
  *((void *)v6 + 5) = v10;
  v6[48] = 1;
  unint64_t v11 = *(int *)(v5 + 12);
  unint64_t v12 = (int)v11 * (uint64_t)*(int *)(v5 + 8);
  uint64_t v13 = *(Espresso **)(v5 + 16);
  *(_OWORD *)std::string __p = xmmword_192DCA4B0;
  int v21 = 255;
  char v22 = 1;
  Espresso::quantize_per_ch(v13, (float *)v10, v12, v12 / v11, (int *)__p, v14);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v15 = *a3;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "W_S8");
  (*(void (**)(uint64_t, uint64_t *, void **, void, uint64_t, void))(*(void *)v15 + 168))(v15, &v16, __p, *((void *)v6 + 5), *((int *)v6 + 9) * (uint64_t)*((int *)v6 + 8), 0);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
}

void sub_1927B3E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  nitro::nitro_function::nitro_function(v18);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

char *is_valid_multiple_inputs_scale(long long **a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) <= 1) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Expect two inputs, only detected one.");
  }
  uint64_t v13 = *a1;
  float v5 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v3, (uint64_t)&std::piecewise_construct, &v13)+ 14);
  uint64_t v13 = *a1;
  int v6 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v13, (uint64_t)&std::piecewise_construct, &v13)+ 16);
  uint64_t v13 = *a1;
  uint64_t result = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v13, (uint64_t)&std::piecewise_construct, &v13);
  int v8 = *a1;
  size_t v9 = a1[1];
  if (*a1 != v9)
  {
    int v10 = *((_DWORD *)result + 15);
    char v11 = 1;
    do
    {
      uint64_t v13 = v8;
      uint64_t result = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v8, (uint64_t)&std::piecewise_construct, &v13);
      if (v5 == *((float *)result + 14)
        && (uint64_t v13 = v8,
            uint64_t result = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v8, (uint64_t)&std::piecewise_construct, &v13), v6 == *((_DWORD *)result + 16)))
      {
        uint64_t v13 = v8;
        uint64_t result = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v8, (uint64_t)&std::piecewise_construct, &v13);
        BOOL v12 = v10 == *((_DWORD *)result + 15);
      }
      else
      {
        BOOL v12 = 0;
      }
      v11 &= v12;
      int v8 = (long long *)((char *)v8 + 24);
    }
    while (v8 != v9);
    if ((v11 & 1) == 0) {
      Espresso::throw_exception_selector<Espresso::generic_error>("multiple inputs should have the same numerical properties");
    }
  }
  return result;
}

void Espresso::blob<float,1>::make(void *a1, int a2)
{
}

void Espresso::quantize_per_ch(Espresso *this, float *a2, unint64_t a3, vDSP_Length a4, int *a5, const Espresso::q_target_traits *a6)
{
  int v21 = a4;
  uint64_t v10 = 4 * a4;
  unint64_t v11 = (a3 - 1) / a4;
  BOOL v12 = (float *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  if (v11 != -1)
  {
    unint64_t v13 = v11 + 1;
    do
    {
      float v19 = 0.0;
      float __C = 0.0;
      vDSP_minv((const float *)this, 1, &__C, a4);
      vDSP_maxv((const float *)this, 1, &v19, a4);
      float __B = 1.0;
      float __B = Espresso::q_target_traits::get_scale_from_min_max((Espresso::q_target_traits *)a5, __C, v19);
      float v14 = (float)a5[2];
      float v16 = (float)a5[3];
      float v17 = v14;
      vDSP_vsmul((const float *)this, 1, &__B, v12, 1, a4);
      vvnintf(v12, v12, &v21);
      vDSP_vclip(v12, 1, &v17, &v16, v12, 1, a4);
      if (*a5 == 2)
      {
        vDSP_vfix8(v12, 1, (char *)a2, 1, a4);
      }
      else
      {
        if (*a5 != 4)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Not implemented");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        vDSP_vfixu8(v12, 1, (unsigned __int8 *)a2, 1, a4);
      }
      a2 = (float *)((char *)a2 + a4);
      this = (Espresso *)((char *)this + v10);
      --v13;
    }
    while (v13);
  }
  free(v12);
}

void sub_1927B4234(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::blob<signed char,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE50;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  float v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<signed char,2>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BE50;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  float v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<signed char,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389878;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(void *a1, int *a2)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE389958;
  *((void *)v4 + 3) = &unk_1EE36BED0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  int v5 = *a2;
  int v6 = a2[1];
  *((_DWORD *)v4 + 8) = *a2;
  *((_DWORD *)v4 + 9) = v6;
  int v7 = (Espresso *)(4 * v5 * (uint64_t)v6);
  int v8 = Espresso::kern_alloc_uninitialized(v7);
  bzero(v8, (size_t)v7);
  *((void *)v4 + 5) = v8;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_1927B44BC(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void quantize_S8_w_tensor<4>(void *a1, uint64_t *a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int const*&,void>(a1, *a2 + 8);
  uint64_t v5 = 0;
  uint64_t v6 = *a2;
  unint64_t v7 = *(int *)(*a2 + 8);
  do
  {
    v7 *= *(int *)(*a2 + 12 + v5);
    v5 += 4;
  }
  while (v5 != 12);
  unint64_t v8 = *(int *)(v6 + 20);
  size_t v9 = *(Espresso **)(v6 + 24);
  uint64_t v10 = *(float **)(*a1 + 24);
  long long v11 = xmmword_192DCA4B0;
  int v12 = 255;
  char v13 = 1;
  Espresso::quantize_per_ch(v9, v10, v7, v7 / v8, (int *)&v11, v4);
}

void sub_1927B4580(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

double Espresso::quantizer::traits_for_weights@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 0x800000002;
  *(_OWORD *)a1 = xmmword_192DCA4B0;
  *(_DWORD *)(a1 + 16) = 255;
  *(unsigned char *)(a1 + 20) = 1;
  return result;
}

void Espresso::quantizer::evaluate_discrepancy(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  int v7 = *(_DWORD *)(a1 + 84);
  uint64_t v82 = 0;
  int v83 = (int *)&v82;
  uint64_t v84 = 0x2020000000;
  int v85 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = &v73;
  uint64_t v75 = 0x6012000000;
  std::string v76 = __Block_byref_object_copy__4041;
  std::string v77 = __Block_byref_object_dispose__4042;
  char v78 = "";
  v80[1] = 0;
  memset(v81, 0, sizeof(v81));
  float v79 = v80;
  v80[0] = 0;
  uint64_t v64 = 0;
  long long v65 = &v64;
  uint64_t v66 = 0x6012000000;
  uint64_t v67 = __Block_byref_object_copy__4041;
  uint64_t v68 = __Block_byref_object_dispose__4042;
  long long v69 = "";
  v71[1] = 0;
  memset(v72, 0, sizeof(v72));
  long long v70 = v71;
  v71[0] = 0;
  uint64_t v59 = &v60;
  long long v60 = 0uLL;
  vImagePixelCount v61 = 0;
  std::string v62 = 0;
  uint64_t v63 = 0;
  unint64_t v8 = (std::__shared_weak_count *)a4[1];
  v58[0] = *a4;
  v58[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a2[1];
  *(void *)vImage_Buffer buf = *a2;
  *(void *)&buf[8] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a3[1];
  *(void *)&uint8_t buf[16] = *a3;
  uint64_t v88 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  float v55 = 0;
  uint64_t v56 = 0;
  int v57 = 0;
  v53.__r_.__value_.__s.__data_[8] = 0;
  float v55 = (uint64_t *)operator new(0x20uLL);
  uint64_t v56 = v55;
  int v57 = v55 + 4;
  uint64_t v56 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)&v57, buf, &v89, v55);
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 3221225472;
  v54[2] = ___ZN8Espresso9quantizer20evaluate_discrepancyENSt3__110shared_ptrINS_3netEEES4_NS2_INS_20abstract_data_sourceEEE_block_invoke;
  v54[3] = &unk_1E5747080;
  v54[4] = &v73;
  v54[5] = &v64;
  v54[6] = &v82;
  Espresso::feed_data_source_to_networks((uint64_t)v58, &v55, v6 | ((unint64_t)(v7 != 0) << 32), v54);
  uint64_t v52 = a5;
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    char v13 = *(std::__shared_weak_count **)&buf[i];
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v83[6] >= 2)
  {
    float v14 = Espresso::espresso_os_log_subsystem((Espresso *)v13, v11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_impl(&dword_1920CB000, v14, OS_LOG_TYPE_INFO, "Stats for PSNR", buf, 2u);
    }

    uint64_t v18 = (long long *)v74[9];
    for (j = (long long *)v74[10]; v18 != j; uint64_t v18 = (long long *)((char *)v18 + 24))
    {
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v19 = *v18;
        v53.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v19;
      }
      uint64_t v20 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v21 = &v53;
        }
        else {
          int v21 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        uint64_t v86 = &v53;
        uint64_t v22 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v74 + 6, &v53, (long long **)&v86)+ 9);
        uint64_t v86 = &v53;
        uint64_t v23 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v74 + 6, &v53, (long long **)&v86)+ 10);
        uint64_t v86 = &v53;
        uint64_t v24 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v74 + 6, &v53, (long long **)&v86)+ 7);
        uint64_t v86 = &v53;
        uint64_t v25 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v74 + 6, &v53, (long long **)&v86)+ 8);
        *(_DWORD *)vImage_Buffer buf = 136316162;
        *(void *)&buf[4] = v21;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v22;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v88 = v23;
        __int16 v89 = 2048;
        uint64_t v90 = v24;
        __int16 v91 = 2048;
        uint64_t v92 = v25;
        _os_log_impl(&dword_1920CB000, v20, OS_LOG_TYPE_INFO, "psnr: blob=%s mean=%.2f stddev=%.2f min=%.2f max=%.2f", buf, 0x34u);
      }

      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
    }
    unint64_t v26 = Espresso::espresso_os_log_subsystem(v15, v16);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "Stats for MAXABSDIFF", buf, 2u);
    }

    long long v29 = v65[9];
    for (uint64_t k = v65[10]; v29 != k; v29 += 3)
    {
      if (*((char *)v29 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, (const std::string::value_type *)*v29, (std::string::size_type)v29[1]);
      }
      else
      {
        long long v31 = *(_OWORD *)v29;
        v53.__r_.__value_.__r.__words[2] = (std::string::size_type)v29[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v31;
      }
      uint64_t v32 = Espresso::espresso_os_log_subsystem(v27, v28);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v33 = &v53;
        }
        else {
          uint64_t v33 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        uint64_t v86 = &v53;
        uint64_t v34 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v65 + 6, &v53, (long long **)&v86)+ 9);
        uint64_t v86 = &v53;
        uint64_t v35 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v65 + 6, &v53, (long long **)&v86)+ 10);
        uint64_t v86 = &v53;
        uint64_t v36 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v65 + 6, &v53, (long long **)&v86)+ 7);
        uint64_t v86 = &v53;
        uint64_t v37 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v65 + 6, &v53, (long long **)&v86)+ 8);
        *(_DWORD *)vImage_Buffer buf = 136316162;
        *(void *)&buf[4] = v33;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v34;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v88 = v35;
        __int16 v89 = 2048;
        uint64_t v90 = v36;
        __int16 v91 = 2048;
        uint64_t v92 = v37;
        _os_log_impl(&dword_1920CB000, v32, OS_LOG_TYPE_INFO, "maxabsdiff: blob=%s mean=%.2e stddev=%.2e min=%.2e max=%.2e", buf, 0x34u);
      }

      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
    }
    long long v38 = Espresso::espresso_os_log_subsystem(v27, v28);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_impl(&dword_1920CB000, v38, OS_LOG_TYPE_INFO, "Stats for MAXRELDIFF", buf, 2u);
    }

    long long v41 = v61;
    for (uint64_t m = v62; v41 != m; ++v41)
    {
      if (SHIBYTE(v41->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, v41->__r_.__value_.__l.__data_, v41->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v43 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v43;
      }
      long long v44 = Espresso::espresso_os_log_subsystem(v39, v40);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v45 = &v53;
        }
        else {
          uint64_t v45 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        uint64_t v86 = &v53;
        uint64_t v46 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v59, &v53, (long long **)&v86)+ 9);
        uint64_t v86 = &v53;
        uint64_t v47 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v59, &v53, (long long **)&v86)+ 10);
        uint64_t v86 = &v53;
        uint64_t v48 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v59, &v53, (long long **)&v86)+ 7);
        uint64_t v86 = &v53;
        uint64_t v49 = *((void *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v59, &v53, (long long **)&v86)+ 8);
        *(_DWORD *)vImage_Buffer buf = 136316162;
        *(void *)&buf[4] = v45;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v46;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v88 = v47;
        __int16 v89 = 2048;
        uint64_t v90 = v48;
        __int16 v91 = 2048;
        uint64_t v92 = v49;
        _os_log_impl(&dword_1920CB000, v44, OS_LOG_TYPE_INFO, "maxreldiff_stat: blob=%s mean=%.2e stddev=%.2e min=%.2e max=%.2e", buf, 0x34u);
      }

      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
    }
  }
  *(void *)(v52 + 16) = 0;
  *(void *)(v52 + 8) = 0;
  *(void *)uint64_t v52 = v52 + 8;
  *(void *)(v52 + 24) = 0;
  *(void *)(v52 + 56) = 0;
  *(void *)(v52 + 32) = 0;
  *(void *)(v52 + 40) = 0;
  *(void *)(v52 + 48) = v52 + 56;
  *(void *)(v52 + 64) = 0;
  *(void *)(v52 + 72) = 0;
  *(void *)(v52 + 104) = 0;
  *(void *)(v52 + 80) = 0;
  *(void *)(v52 + 88) = 0;
  *(void *)(v52 + 96) = v52 + 104;
  *(void *)(v52 + 112) = 0;
  *(void *)(v52 + 120) = 0;
  *(void *)(v52 + 128) = 0;
  *(void *)(v52 + 136) = 0;
  uint64_t v50 = v65;
  if ((void ***)v52 != v65)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)(v52 + 48), (long long *)v65[6], (long long *)(v65 + 7));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v52 + 72, (std::string *)v50[9], (std::string *)v50[10], 0xAAAAAAAAAAAAAAABLL * (v50[10] - v50[9]));
  }
  if ((long long **)(v52 + 96) != &v59)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)(v52 + 96), v59, &v60);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v52 + 120, v61, v62, 0xAAAAAAAAAAAAAAABLL * (((char *)v62 - (char *)v61) >> 3));
  }
  unint64_t v51 = v74;
  if (v74 + 6 != (uint64_t *)v52)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)v52, (long long *)v74[6], (long long *)(v74 + 7));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v52 + 24, (std::string *)v51[9], (std::string *)v51[10], 0xAAAAAAAAAAAAAAABLL * ((v51[10] - v51[9]) >> 3));
  }
  *(void *)vImage_Buffer buf = &v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy((void *)v60);
  _Block_object_dispose(&v64, 8);
  *(void *)vImage_Buffer buf = v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v71[0]);
  _Block_object_dispose(&v73, 8);
  uint64_t v64 = (void **)v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v64);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v80[0]);
  _Block_object_dispose(&v82, 8);
}

void sub_1927B4E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::string __p = &a30;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v62 = 24;
  while (1)
  {
    uint64_t v63 = *(std::__shared_weak_count **)(v60 - 160 + v62);
    if (v63) {
      nitro::nitro_function::nitro_function(v63);
    }
    v62 -= 16;
    if (v62 == -8)
    {
      if (v59) {
        nitro::nitro_function::nitro_function(v59);
      }
      Espresso::map_with_ordered_keys<std::string,Espresso::dataset_estimator::statistics_entry_t>::~map_with_ordered_keys((uint64_t)&a35);
      _Block_object_dispose(&a41, 8);
      Espresso::map_with_ordered_keys<std::string,Espresso::dataset_estimator::statistics_entry_t>::~map_with_ordered_keys((uint64_t)&a47);
      _Block_object_dispose(&a53, 8);
      Espresso::map_with_ordered_keys<std::string,Espresso::dataset_estimator::statistics_entry_t>::~map_with_ordered_keys((uint64_t)&a59);
      _Block_object_dispose((const void *)(v60 - 200), 8);
      _Unwind_Resume(a1);
    }
  }
}

__n128 __Block_byref_object_copy__4041(void *a1, uint64_t a2)
{
  a1[6] = *(void *)(a2 + 48);
  uint64_t v2 = (void *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 56);
  a1[7] = v3;
  uint64_t v4 = a1 + 7;
  uint64_t v5 = *(void *)(a2 + 64);
  a1[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 48) = v2;
    void *v2 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v4;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 9) = result;
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  return result;
}

void __Block_byref_object_dispose__4042(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)(a1 + 56);

  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v2);
}

void ___ZN8Espresso9quantizer20evaluate_discrepancyENSt3__110shared_ptrINS_3netEEES4_NS2_INS_20abstract_data_sourceEEE_block_invoke(void *a1, void **a2)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t)*a2;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)v106, *a2);
  memset(v107, 0, sizeof(v107));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v107, *(void *)(v4 + 24), *(void *)(v4 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3));
  uint64_t v5 = (uint64_t)*a2;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)v102, *a2 + 6);
  std::string v103 = 0;
  std::string v104 = 0;
  uint64_t v105 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v103, *(void *)(v5 + 72), *(void *)(v5 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 80) - *(void *)(v5 + 72)) >> 3));
  uint64_t v6 = (std::string **)(*(void *)(a1[4] + 8) + 72);
  if (v6 != &v103) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v6, v103, v104, 0xAAAAAAAAAAAAAAABLL * (((char *)v104 - (char *)v103) >> 3));
  }
  int v7 = (std::string **)(*(void *)(a1[5] + 8) + 72);
  if (v7 != &v103) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v7, v103, v104, 0xAAAAAAAAAAAAAAABLL * (((char *)v104 - (char *)v103) >> 3));
  }
  unint64_t v8 = v103;
  char v96 = v104;
  if (v103 != v104)
  {
    float v95 = a1;
    do
    {
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v101, v8->__r_.__value_.__l.__data_, v8->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v9;
      }
      *(void *)vImage_Buffer buf = &v101;
      uint64_t v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v102, &v101, (long long **)buf);
      uint64_t v11 = v10[7];
      int v12 = (std::__shared_weak_count *)v10[8];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)vImage_Buffer buf = &v101;
      char v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v106, &v101, (long long **)buf);
      uint64_t v14 = v13[7];
      uint64_t v15 = (std::__shared_weak_count *)v13[8];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v14)
      {
        unint64_t v16 = 0;
        float v100 = 0.0;
        unint64_t v17 = *(int *)(v14 + 8);
        uint64_t v18 = v14 + 12;
        uint64_t v19 = v11 + 12;
        float v20 = 0.0;
        double v21 = 0.0;
        unint64_t v22 = *(int *)(v11 + 8);
        while (1)
        {
          uint64_t v23 = 0;
          unint64_t v24 = *(int *)(v14 + 8);
          do
          {
            v24 *= *(int *)(v18 + v23);
            v23 += 4;
          }
          while (v23 != 12);
          uint64_t v25 = 0;
          unint64_t v26 = *(int *)(v11 + 8);
          do
          {
            v26 *= *(int *)(v19 + v25);
            v25 += 4;
          }
          while (v25 != 12);
          if (v26 < v24) {
            unint64_t v24 = v26;
          }
          if (v24 <= v16) {
            break;
          }
          float v27 = *(float *)(*(void *)(v11 + 24) + 4 * v16);
          float v28 = *(float *)(*(void *)(v14 + 24) + 4 * v16) - v27;
          double v21 = v21 + (float)(v28 * v28);
          float v29 = fabsf(v27);
          if (v16) {
            BOOL v30 = v29 <= v20;
          }
          else {
            BOOL v30 = 0;
          }
          if (!v30) {
            float v20 = v29;
          }
          ++v16;
        }
        uint64_t v31 = 0;
        unint64_t v32 = *(int *)(v14 + 8);
        do
        {
          v32 *= *(int *)(v18 + v31);
          v31 += 4;
        }
        while (v31 != 12);
        long double v33 = log10((v20 + 0.00001) / (sqrt(v21 / (double)v32) + 1.0e-10));
        uint64_t v34 = 0;
        *(float *)&long double v33 = v33 * 20.0;
        float v100 = *(float *)&v33;
        float v99 = 0.0;
        unint64_t v35 = v17;
        do
        {
          v35 *= *(int *)(v18 + v34);
          v34 += 4;
        }
        while (v34 != 12);
        uint64_t v36 = 0;
        unint64_t v37 = v22;
        do
        {
          v37 *= *(int *)(v19 + v36);
          v36 += 4;
        }
        while (v36 != 12);
        if (v37 < v35) {
          unint64_t v35 = v37;
        }
        if (v35)
        {
          long long v38 = *(float **)(v14 + 24);
          long long v39 = *(float **)(v11 + 24);
          float v40 = 0.0;
          do
          {
            float v41 = vabds_f32(*v38, *v39);
            if (v41 > v40) {
              float v40 = v41;
            }
            ++v39;
            ++v38;
            --v35;
          }
          while (v35);
        }
        else
        {
          float v40 = 0.0;
        }
        uint64_t v42 = 0;
        float v99 = v40;
        do
        {
          v17 *= *(int *)(v18 + v42);
          v42 += 4;
        }
        while (v42 != 12);
        uint64_t v43 = 0;
        unint64_t v44 = v22;
        do
        {
          v44 *= *(int *)(v19 + v43);
          v43 += 4;
        }
        while (v43 != 12);
        if (v44 >= v17) {
          unint64_t v44 = v17;
        }
        if (v44)
        {
          uint64_t v45 = *(float **)(v14 + 24);
          uint64_t v46 = *(float **)(v11 + 24);
          float v47 = 0.0;
          a1 = v95;
          do
          {
            float v48 = vabds_f32(*v45, *v46);
            if (v48 > v47) {
              float v47 = v48;
            }
            ++v46;
            ++v45;
            --v44;
          }
          while (v44);
          double v49 = v47;
        }
        else
        {
          double v49 = 0.0;
          a1 = v95;
        }
        uint64_t v50 = 0;
        unint64_t v51 = v22;
        do
        {
          v51 *= *(int *)(v19 + v50);
          v50 += 4;
        }
        while (v50 != 12);
        uint64_t v52 = *(float **)(v11 + 24);
        float v53 = *v52;
        float v54 = *v52;
        if (v51)
        {
          float v55 = *(float **)(v11 + 24);
          float v54 = *v52;
          do
          {
            float v56 = *v55++;
            float v57 = v56;
            if (v56 > v54) {
              float v54 = v57;
            }
            --v51;
          }
          while (v51);
        }
        for (uint64_t i = 0; i != 12; i += 4)
          v22 *= *(int *)(v19 + i);
        for (; v22; --v22)
        {
          float v59 = *v52++;
          float v60 = v59;
          if (v59 < v53) {
            float v53 = v60;
          }
        }
        double v61 = v54;
        double v62 = -v53;
        if (v61 >= v62) {
          double v63 = v61;
        }
        else {
          double v63 = v62;
        }
        uint64_t v64 = (uint64_t **)(*(void *)(a1[4] + 8) + 48);
        *(void *)vImage_Buffer buf = &v101;
        long long v65 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v64, &v101, (long long **)buf);
        Espresso::dataset_estimator::statistics_entry_t::compute_single((Espresso::dataset_estimator::statistics_entry_t *)&v100, (float *)1, 0, (uint64_t)buf);
        Espresso::dataset_estimator::statistics_entry_t::iterative_grow((int8x16_t *)(v65 + 56), (int8x16_t *)buf, 0.0);
        if (*(void *)&v120[6])
        {
          *(void *)&v120[14] = *(void *)&v120[6];
          operator delete(*(void **)&v120[6]);
        }
        uint64_t v66 = (uint64_t **)(*(void *)(a1[5] + 8) + 48);
        *(void *)vImage_Buffer buf = &v101;
        uint64_t v67 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v66, &v101, (long long **)buf);
        Espresso::dataset_estimator::statistics_entry_t::compute_single((Espresso::dataset_estimator::statistics_entry_t *)&v99, (float *)1, 0, (uint64_t)buf);
        Espresso::dataset_estimator::statistics_entry_t::iterative_grow((int8x16_t *)(v67 + 56), (int8x16_t *)buf, 0.0);
        long long v69 = *(Espresso **)&v120[6];
        if (*(void *)&v120[6])
        {
          *(void *)&v120[14] = *(void *)&v120[6];
          operator delete(*(void **)&v120[6]);
        }
        long long v70 = Espresso::espresso_os_log_subsystem(v69, v68);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
        {
          int v71 = *(_DWORD *)(*(void *)(a1[6] + 8) + 24);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = v101;
          }
          std::string::basic_string(&v108, &__str, 0, 0x14uLL, (std::allocator<char> *)&v109);
          int v94 = v71;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v108;
          std::string::size_type size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
          if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v108.__r_.__value_.__l.__size_;
          }
          std::string::size_type v73 = size - 20;
          if (size != 20)
          {
            do
              std::string::append(&__str, " ");
            while (!__CFADD__(v73++, 1));
          }
          uint64_t v75 = 0;
          float v76 = v49 / fabs(v63);
          std::string __p = __str;
          memset(&__str, 0, sizeof(__str));
          unint64_t v77 = *(int *)(v14 + 8);
          unint64_t v78 = v77;
          do
          {
            v78 *= *(int *)(v18 + v75);
            v75 += 4;
          }
          while (v75 != 12);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          double v80 = 0.0;
          a1 = v95;
          if (v78)
          {
            uint64_t v81 = *(float **)(v14 + 24);
            float v82 = 0.0;
            do
            {
              float v83 = *v81++;
              float v82 = v82 + v83;
              --v78;
            }
            while (v78);
            double v80 = v82;
          }
          uint64_t v84 = 0;
          double v85 = v76;
          do
          {
            v77 *= *(int *)(v18 + v84);
            v84 += 4;
          }
          while (v84 != 12);
          uint64_t v86 = 0;
          unint64_t v87 = *(int *)(v11 + 8);
          unint64_t v88 = v87;
          do
          {
            v88 *= *(int *)(v19 + v86);
            v86 += 4;
          }
          while (v86 != 12);
          double v89 = 0.0;
          if (v88)
          {
            uint64_t v90 = *(float **)(v11 + 24);
            float v91 = 0.0;
            do
            {
              float v92 = *v90++;
              float v91 = v91 + v92;
              --v88;
            }
            while (v88);
            double v89 = v91;
          }
          for (uint64_t j = 0; j != 12; j += 4)
            v87 *= *(int *)(v19 + j);
          *(_DWORD *)vImage_Buffer buf = 67110658;
          *(_DWORD *)&buf[4] = v94;
          __int16 v111 = 2080;
          long long v112 = p_p;
          __int16 v113 = 2048;
          double v114 = v100;
          __int16 v115 = 2048;
          double v116 = v99;
          __int16 v117 = 2048;
          double v118 = v85;
          __int16 v119 = 2048;
          *(double *)uint64_t v120 = v80 / (double)v77;
          *(_WORD *)&v120[8] = 2048;
          *(double *)&v120[10] = v89 / (double)v87;
          _os_log_debug_impl(&dword_1920CB000, v70, OS_LOG_TYPE_DEBUG, "sample=%d blob_name=%s psnr=%.2f maxabs=%.3e maxrel=%.3f q=%.2e ref=%.2e", buf, 0x44u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
      ++v8;
    }
    while (v8 != v96);
  }
  ++*(_DWORD *)(*(void *)(a1[6] + 8) + 24);
  *(void *)vImage_Buffer buf = &v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v102[1]);
  *(void *)vImage_Buffer buf = v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v106[1]);
}

void sub_1927B58A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42)
{
}

void Espresso::quantizer::evaluate_discrepancy_result_t::~evaluate_discrepancy_result_t(Espresso::quantizer::evaluate_discrepancy_result_t *this)
{
  uint64_t v2 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*((void **)this + 13));
  uint64_t v2 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*((void **)this + 7));
  uint64_t v2 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*((void **)this + 1));
}

uint64_t Espresso::map_with_ordered_keys<std::string,Espresso::dataset_estimator::statistics_entry_t>::~map_with_ordered_keys(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*(void **)(a1 + 8));
  return a1;
}

void Espresso::ane_style_post_scale_bias(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned int *)(*(void *)a1 + 8);
  int v9 = *(_DWORD *)(*(void *)a1 + 8);
  if (*a2) {
    int v9 = *(_DWORD *)(*a2 + 8);
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(__A, v8, 1, 1, 1);
  uint64_t v34 = __A[0];
  *(_OWORD *)a3 = *(_OWORD *)__A;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(__A, v9, 1, 1, 1);
  long double v33 = __A[0];
  *(_OWORD *)(a3 + 16) = *(_OWORD *)__A;
  uint64_t v10 = *(const float **)(*(void *)a1 + 16);
  float __C = 0.0;
  vDSP_minv(v10, 1, &__C, (int)v8);
  unsigned int v11 = vcvtms_s32_f32(log2f(__C));
  unsigned int v12 = -v11 & ~((signed int)-v11 >> 31);
  if (v12 >= 0x1F) {
    int v13 = 31;
  }
  else {
    int v13 = v12;
  }
  int v14 = v8 - 1;
  if ((int)v8 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 4 * v8;
    do
    {
      float v17 = *(float *)(*(void *)(*(void *)a1 + 16) + v15);
      float v18 = ldexp(1.0, v13) * v17;
      *(float *)(*((void *)v34 + 2) + v15) = v18;
      v15 += 4;
    }
    while (v16 != v15);
  }
  std::vector<float>::vector(__A, v9);
  uint64_t v19 = __A[0];
  if (v9 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(*(void *)a1 + 16);
    do
    {
      if (v14 >= (int)v20) {
        int v22 = v20;
      }
      else {
        int v22 = v14;
      }
      v19[v20++] = a4 / *(float *)(v21 + 4 * v22);
    }
    while (v9 != v20);
  }
  float v35 = 0.0;
  vDSP_maxv(v19, 1, &v35, v9);
  int v25 = vcvtms_s32_f32(log2f(v35));
  if (v25 < 16)
  {
    if (v25 > -17) {
      goto LABEL_24;
    }
    unint64_t v26 = Espresso::espresso_os_log_subsystem(v23, v24);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)vImage_Buffer buf = 67109120;
      int v39 = v25;
      _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "low bias shift %d", buf, 8u);
    }
    int v25 = -16;
  }
  else
  {
    unint64_t v26 = Espresso::espresso_os_log_subsystem(v23, v24);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)vImage_Buffer buf = 67109120;
      int v39 = v25;
      _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "high bias shift %d", buf, 8u);
    }
    int v25 = 15;
  }

LABEL_24:
  *(_DWORD *)(a3 + 32) = v13;
  uint64_t v27 = *a2;
  if (v27)
  {
    if (v9 >= 1)
    {
      unint64_t v28 = 0;
      uint64_t v29 = 4 * v9;
      do
      {
        BOOL v30 = &__A[0][v28 / 4];
        float v31 = __A[0][v28 / 4];
        float v32 = v31 / ldexp(1.0, v25);
        *BOOL v30 = v32;
        *(float *)(*((void *)v33 + 2) + v28) = *(float *)(*(void *)(v27 + 16) + v28) * v32;
        v28 += 4;
      }
      while (v29 != v28);
    }
    *(_DWORD *)(a3 + 36) = v25;
  }
  if (__A[0])
  {
    __A[1] = __A[0];
    operator delete(__A[0]);
  }
}

void sub_1927B5D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t(v15);
  _Unwind_Resume(a1);
}

void Espresso::classic_hx_engine_backwards_compatibility(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*(void *)(*a1 + 40) != *(void *)(*a1 + 32))
  {
    for (unint64_t i = 0; i < (uint64_t)(*(void *)(*a1 + 40) - *(void *)(*a1 + 32)) >> 4; ++i)
    {
      v82.__r_.__value_.__r.__words[0] = i;
      uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v1 + 96, i, &v82);
      if (v4[4] == v4[3]) {
        goto LABEL_114;
      }
      uint64_t v5 = *a1 + 56;
      v82.__r_.__value_.__r.__words[0] = i;
      uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5, i, &v82);
      if (v6[4] == v6[3]) {
        goto LABEL_114;
      }
      uint64_t v7 = *a1;
      uint64_t v8 = *(void *)(*(void *)(*a1 + 32) + 16 * i);
      uint64_t v10 = *(uint64_t ***)(v8 + 64);
      int v9 = *(std::__shared_weak_count **)(v8 + 72);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v7 = *a1;
      }
      v81.__r_.__value_.__r.__words[0] = i;
      unsigned int v11 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7 + 96, i, &v81)[3];
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v12 = *v11;
        v82.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v13 = *a1 + 56;
      std::string __p = (void *)i;
      int v14 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, i, &__p)[3];
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v14, *((void *)v14 + 1));
      }
      else
      {
        long long v15 = *v14;
        v81.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v15;
      }
      uint64_t v16 = (uint64_t **)(*a1 + 352);
      std::string __p = &v82;
      float v17 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, &v82, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 14);
      float v18 = (uint64_t **)(*a1 + 352);
      std::string __p = &v81;
      std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, &v81, (uint64_t)&std::piecewise_construct, (long long **)&__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
      uint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v10[20], &__p);
      uint64_t v20 = v19;
      if (v80 < 0)
      {
        operator delete(__p);
        if (!v20) {
          goto LABEL_109;
        }
      }
      else if (!v19)
      {
        goto LABEL_109;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
      p_p = &__p;
      uint64_t v21 = *(const float **)(*((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 19, &__p, (_OWORD **)&p_p)+ 7)+ 16);
      if (v80 < 0) {
        operator delete(__p);
      }
      uint64_t v23 = v22;
      unint64_t v24 = 0;
      if (v9 && v22)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v24 = v9;
      }
      {
        if (v9)
        {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v23 = (uint64_t **)v9;
        }
        else
        {
          uint64_t v23 = 0;
        }
      }
      else if (v23)
      {
        uint64_t v25 = *(unsigned int *)(((uint64_t (*)(uint64_t **))(*v23)[48])(v23) + 40);
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(&p_p, v25, 1, 1, 1);
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v74, v25, 1, 1, 1);
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v72, v25, 1, 1, 1);
        ((void (*)(void **__return_ptr, uint64_t **))(*v23)[57])(&__p, v23);
        uint64_t v26 = 0;
        int v27 = *((_DWORD *)__p + 2);
        do
        {
          v27 *= *(_DWORD *)((char *)__p + v26 + 12);
          v26 += 4;
        }
        while (v26 != 12);
        std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(&v70, v27, 1, 1, 1);
        if (v79) {
          nitro::nitro_function::nitro_function(v79);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v68, 1, 1, 1, 1);
        ((void (*)(_DWORD **__return_ptr, uint64_t **))(*v23)[57])(&v66, v23);
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        uint64_t v64 = &__p;
        uint64_t v28 = *(void *)(*((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v23 + 19, &__p, (_OWORD **)&v64)+ 7)+ 16);
        if (v80 < 0) {
          operator delete(__p);
        }
        if ((int)v25 >= 1)
        {
          int v29 = 0;
          int v30 = 0;
          float v31 = v66;
          int v32 = v66[2];
          int v33 = v66[3];
          int v34 = v66[4];
          int v35 = v33 * v32 * v34;
          uint64_t v36 = v70;
          int v37 = v33 * v34 * v32;
          do
          {
            if ((int)v31[4] >= 1)
            {
              int v38 = 0;
              do
              {
                if ((int)v31[3] >= 1)
                {
                  int v39 = 0;
                  do
                  {
                    int v40 = v31[2];
                    if (v40 >= 1)
                    {
                      for (int j = 0; j < v40; ++j)
                      {
                        *(unsigned char *)(*(void *)(v36 + 16) + v38 + v35 * v30 + (j + v39 * v40) * v31[4]) = *(unsigned char *)(v28 + v29 + j + v40 * (v39 + v38 * v31[3]));
                        float v31 = v66;
                        int v40 = v66[2];
                      }
                    }
                    ++v39;
                  }
                  while (v39 < v31[3]);
                }
                ++v38;
              }
              while (v38 < v31[4]);
            }
            ++v30;
            v29 += v37;
          }
          while (v30 != v25);
        }
        ((void (*)(void ***__return_ptr, uint64_t **))(*v23)[56])(&v64, v23);
        float __C = 0.0;
        vDSP_maxv(v21, 1, &__C, (int)v25);
        int v42 = vcvtmd_s64_f64(log2(4096.0 / __C));
        if (v42 >= 20) {
          int v42 = 20;
        }
        if (v42 <= 8) {
          int v43 = 8;
        }
        else {
          int v43 = v42;
        }
        double v44 = ldexp(1.0, v43);
        if ((int)v25 >= 1)
        {
          uint64_t v45 = (int *)p_p[2];
          uint64_t v46 = *(_DWORD **)(v74 + 16);
          float v47 = (float *)v64[2];
          float v48 = *(_DWORD **)(v72 + 16);
          do
          {
            float v49 = *v21++;
            *v45++ = v43;
            *v46++ = vcvtpd_s64_f64(v44 * v49);
            float v50 = *v47++;
            float v51 = v44 * 0.5 + v50 * (v44 * v17);
            *v48++ = llroundf(v51);
            --v25;
          }
          while (v25);
        }
        uint64_t v52 = v68;
        **(float **)(v68 + 16) = v17;
        uint64_t v61 = 0;
        double v62 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_bias");
        ((void (*)(uint64_t **, uint64_t *, void **, void, uint64_t, void))(*v10)[21])(v10, &v61, &__p, *(void *)(v72 + 16), 4 * *(int *)(v72 + 8), 0);
        if (v80 < 0) {
          operator delete(__p);
        }
        if (v62) {
          nitro::nitro_function::nitro_function(v62);
        }
        uint64_t v61 = 0;
        double v62 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_scaleout");
        ((void (*)(uint64_t **, uint64_t *, void **, void, uint64_t, void))(*v10)[21])(v10, &v61, &__p, *(void *)(v74 + 16), 4 * *(int *)(v74 + 8), 0);
        if (v80 < 0) {
          operator delete(__p);
        }
        if (v62) {
          nitro::nitro_function::nitro_function(v62);
        }
        uint64_t v61 = 0;
        double v62 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_shiftout");
        ((void (*)(uint64_t **, uint64_t *, void **, void *, uint64_t, void))(*v10)[21])(v10, &v61, &__p, p_p[2], 4 * *((int *)p_p + 2), 0);
        if (v80 < 0) {
          operator delete(__p);
        }
        if (v62) {
          nitro::nitro_function::nitro_function(v62);
        }
        uint64_t v61 = 0;
        double v62 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_extra_f");
        ((void (*)(uint64_t **, uint64_t *, void **, void, uint64_t, void))(*v10)[21])(v10, &v61, &__p, *(void *)(v52 + 16), 4 * *(int *)(v52 + 8), 0);
        if (v80 < 0) {
          operator delete(__p);
        }
        if (v62) {
          nitro::nitro_function::nitro_function(v62);
        }
        uint64_t v61 = 0;
        double v62 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_kernel");
        ((void (*)(uint64_t **, uint64_t *, void **, void, void, void))(*v10)[21])(v10, &v61, &__p, *(void *)(v70 + 16), *(int *)(v70 + 8), 0);
        if (v80 < 0) {
          operator delete(__p);
        }
        if (v62) {
          nitro::nitro_function::nitro_function(v62);
        }
        if (v65) {
          nitro::nitro_function::nitro_function(v65);
        }
        if (v67) {
          nitro::nitro_function::nitro_function(v67);
        }
        if (v69) {
          nitro::nitro_function::nitro_function(v69);
        }
        if (v71) {
          nitro::nitro_function::nitro_function(v71);
        }
        if (v73) {
          nitro::nitro_function::nitro_function(v73);
        }
        if (v75) {
          nitro::nitro_function::nitro_function(v75);
        }
        float v53 = v77;
        if (!v77) {
          goto LABEL_107;
        }
        goto LABEL_106;
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&p_p, 1, 1, 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v74, 2, 1, 1, 1);
      double v54 = *v21;
      int v55 = vcvtmd_s64_f64(log2(4096.0 / v54));
      if (v55 >= 20) {
        int v55 = 20;
      }
      if (v55 <= 8) {
        int v56 = 8;
      }
      else {
        int v56 = v55;
      }
      long double v57 = ldexp(1.0, v56);
      char v58 = p_p;
      *(float *)p_p[2] = v17;
      uint64_t v59 = v74;
      float v60 = *(_DWORD **)(v74 + 16);
      *float v60 = vcvtpd_s64_f64(v57 * v54);
      v60[1] = v56;
      uint64_t v72 = 0;
      std::string::size_type v73 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "hx_extra_f");
      ((void (*)(uint64_t **, uint64_t *, void **, void *, uint64_t, void))(*v10)[21])(v10, &v72, &__p, v58[2], 4 * *((int *)v58 + 2), 0);
      if (v80 < 0) {
        operator delete(__p);
      }
      if (v73) {
        nitro::nitro_function::nitro_function(v73);
      }
      uint64_t v72 = 0;
      std::string::size_type v73 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "hx_scale_shift");
      ((void (*)(uint64_t **, uint64_t *, void **, void, uint64_t, void))(*v10)[21])(v10, &v72, &__p, *(void *)(v59 + 16), 4 * *(int *)(v59 + 8), 0);
      if (v80 < 0) {
        operator delete(__p);
      }
      if (v73) {
        nitro::nitro_function::nitro_function(v73);
      }
      if (v75) {
        nitro::nitro_function::nitro_function(v75);
      }
      if (v77) {
        nitro::nitro_function::nitro_function(v77);
      }
      if (!v23) {
        goto LABEL_107;
      }
      float v53 = (std::__shared_weak_count *)v23;
LABEL_106:
      nitro::nitro_function::nitro_function(v53);
LABEL_107:
      if (v24) {
        nitro::nitro_function::nitro_function(v24);
      }
LABEL_109:
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v82.__r_.__value_.__l.__data_);
        if (!v9) {
          goto LABEL_114;
        }
LABEL_113:
        nitro::nitro_function::nitro_function(v9);
        goto LABEL_114;
      }
      if (v9) {
        goto LABEL_113;
      }
LABEL_114:
      uint64_t v1 = *a1;
    }
  }
}

void sub_1927B68CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v39 - 121) < 0) {
    operator delete(*(void **)(v39 - 144));
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  _Unwind_Resume(exception_object);
}

void sub_1927B6AB0()
{
  if (!v0) {
    JUMPOUT(0x1927B6AA8);
  }
  JUMPOUT(0x1927B6AA0);
}

void Espresso::convert_hx_engine_weights_to_peace_format(uint64_t ***a1, char a2)
{
  uint64_t v3 = *a1;
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = (uint64_t **)v3[44];
    if (v4 != v3 + 45)
    {
      do
      {
        if (*((_DWORD *)v4 + 15)) {
          int v5 = 2;
        }
        else {
          int v5 = 4;
        }
        *((_DWORD *)v4 + 16) = v5;
        uint64_t v6 = v4[1];
        if (v6)
        {
          do
          {
            uint64_t v7 = (uint64_t **)v6;
            uint64_t v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (uint64_t **)v4[2];
            BOOL v17 = *v7 == (uint64_t *)v4;
            uint64_t v4 = v7;
          }
          while (!v17);
        }
        uint64_t v4 = v7;
      }
      while (v7 != v3 + 45);
    }
  }
  v140[0] = 0;
  uint64_t v8 = v3[4];
  if (v3[5] != v8)
  {
    int v9 = 0;
    unint64_t v10 = 0;
    do
    {
      unsigned int v11 = &v8[2 * v10];
      uint64_t v12 = *v11;
      uint64_t v13 = (std::__shared_weak_count *)v11[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(void *)(v12 + 64);
      int v14 = *(std::__shared_weak_count **)(v12 + 72);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15)
      {
        if (v14) {
          BOOL v17 = v16 == 0;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          float v18 = 0;
        }
        else
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          float v18 = v14;
        }
      }
      else
      {
        float v18 = 0;
        uint64_t v16 = 0;
      }
      BOOL v19 = v16 != 0;
      uint64_t v20 = (uint64_t)(*a1 + 12);
      long long v134 = v140;
      uint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v20, v140, (uint64_t)&std::piecewise_construct, (uint64_t **)&v134);
      if (v21[3] == v21[4])
      {
        float v24 = 1.0;
      }
      else
      {
        int v22 = *a1;
        uint64_t v23 = (uint64_t)(*a1 + 12);
        long long v134 = v140;
        long long v134 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v23, v140, (uint64_t)&std::piecewise_construct, (uint64_t **)&v134)[3];
        float v24 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22 + 44, v134, (uint64_t)&std::piecewise_construct, (long long **)&v134)+ 14);
      }
      uint64_t v25 = (uint64_t)(*a1 + 7);
      long long v134 = v140;
      uint64_t v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v25, v140, (uint64_t)&std::piecewise_construct, (uint64_t **)&v134);
      if (v26[3] == v26[4])
      {
        float v29 = 1.0;
      }
      else
      {
        int v27 = *a1;
        uint64_t v28 = (uint64_t)(*a1 + 7);
        long long v134 = v140;
        long long v134 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v28, v140, (uint64_t)&std::piecewise_construct, (uint64_t **)&v134)[3];
        float v29 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27 + 44, v134, (uint64_t)&std::piecewise_construct, (long long **)&v134)+ 14);
      }
      int v30 = v19 | v9;
      if ((v30 & 1) != 0 && (a2 & 1) == 0)
      {
        int v31 = v30;
        uint64_t v32 = (uint64_t)(*a1 + 12);
        long long v134 = v140;
        int v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v32, v140, (uint64_t)&std::piecewise_construct, (uint64_t **)&v134);
        int v35 = (uint64_t *)v33[3];
        int v34 = (uint64_t *)v33[4];
        while (v35 != v34)
        {
          uint64_t v36 = *a1 + 44;
          long long v134 = (unint64_t *)v35;
          *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v36, v35, (uint64_t)&std::piecewise_construct, (long long **)&v134)+ 16) = 1;
          v35 += 3;
        }
        uint64_t v93 = *(void **)(v15 + 160);
        float v92 = (void *)(v15 + 160);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v93);
        *(v92 - 1) = v92;
        *float v92 = 0;
        v92[1] = 0;
        int v9 = v31;
        goto LABEL_129;
      }
      int v116 = v30;
      if (!v15
      {
        std::string::basic_string[abi:ne180100]<0>(&v134, "hx_scale_shift");
        uint64_t v94 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v15 + 160), &v134);
        uint64_t v95 = v94;
        if (v137 < 0)
        {
          operator delete(v134);
          if (!v95)
          {
LABEL_153:
            std::string v104 = (const char *)(v12 + 16);
            if (*(char *)(v12 + 39) < 0) {
              std::string v104 = *(const char **)v104;
            }
            int v9 = v116;
            uint64_t v105 = (const char *)(v12 + 40);
            if (*(char *)(v12 + 63) < 0) {
              uint64_t v105 = *(const char **)v105;
            }
            printf("No hx_scale_shift for %s (type %s)\n", v104, v105);
            if (!v18) {
              goto LABEL_131;
            }
LABEL_130:
            nitro::nitro_function::nitro_function(v18);
            goto LABEL_131;
          }
        }
        else if (!v94)
        {
          goto LABEL_153;
        }
        std::string::basic_string[abi:ne180100]<0>(&v134, "hx_scale_shift");
        std::string __p = &v134;
        char v96 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v15 + 152), &v134, (_OWORD **)&__p);
        uint64_t v97 = *((void *)v96 + 7);
        uint64_t v90 = (std::__shared_weak_count *)*((void *)v96 + 8);
        if (v90) {
          atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v98 = v18;
        if (v137 < 0) {
          operator delete(v134);
        }
        float v99 = *(int **)(v97 + 16);
        int v100 = *v99;
        int v101 = v99[1];
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, 1, 1, 1, 1);
        float v102 = (double)v100 / ldexp(1.0, v101);
        std::string v103 = (int *)__p;
        **((float **)__p + 2) = v102;
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(v15 + 160));
        *(void *)(v15 + 160) = 0;
        *(void *)(v15 + 168) = 0;
        *(void *)(v15 + 152) = v15 + 160;
        float v18 = v98;
        if ((a2 & 1) == 0)
        {
          uint64_t v132 = 0;
          long long v133 = 0;
          std::string::basic_string[abi:ne180100]<0>(&v134, "post_scale");
          (*(void (**)(uint64_t, uint64_t *, unint64_t **, void, uint64_t, void))(*(void *)v15 + 168))(v15, &v132, &v134, *((void *)v103 + 2), 4 * v103[2], 0);
          if (v137 < 0) {
            operator delete(v134);
          }
          if (v133) {
            nitro::nitro_function::nitro_function(v133);
          }
        }
        if (v122) {
          nitro::nitro_function::nitro_function(v122);
        }
        if (!v90) {
          goto LABEL_120;
        }
LABEL_119:
        nitro::nitro_function::nitro_function(v90);
        goto LABEL_120;
      }
      int v38 = v37;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      __int16 v115 = v18;
      uint64_t v110 = *(unsigned int *)(((uint64_t (*)(uint64_t **))(*v37)[48])(v37) + 40);
      std::string::basic_string[abi:ne180100]<0>(&v134, "hx_kernel");
      std::string __p = &v134;
      uint64_t v39 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 19, &v134, (_OWORD **)&__p);
      uint64_t v41 = *((void *)v39 + 7);
      int v40 = (std::__shared_weak_count *)*((void *)v39 + 8);
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v137 < 0) {
        operator delete(v134);
      }
      std::string::basic_string[abi:ne180100]<0>(&v134, "hx_bias");
      __int16 v113 = v40;
      std::string __p = &v134;
      int v42 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 19, &v134, (_OWORD **)&__p);
      uint64_t v43 = *((void *)v42 + 7);
      double v44 = (std::__shared_weak_count *)*((void *)v42 + 8);
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v137 < 0) {
        operator delete(v134);
      }
      std::string::basic_string[abi:ne180100]<0>(&v134, "hx_scaleout");
      std::string __p = &v134;
      double v114 = v44;
      uint64_t v45 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 19, &v134, (_OWORD **)&__p);
      uint64_t v46 = *((void *)v45 + 7);
      float v47 = (std::__shared_weak_count *)*((void *)v45 + 8);
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v137 < 0) {
        operator delete(v134);
      }
      long long v112 = v14;
      std::string::basic_string[abi:ne180100]<0>(&v134, "hx_shiftout");
      std::string __p = &v134;
      __int16 v111 = v47;
      float v48 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v38 + 19, &v134, (_OWORD **)&__p);
      uint64_t v50 = *((void *)v48 + 7);
      float v49 = (std::__shared_weak_count *)*((void *)v48 + 8);
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v109 = v49;
      if (v137 < 0) {
        operator delete(v134);
      }
      uint64_t v51 = *(void *)(v43 + 16);
      uint64_t v52 = *(void *)(v46 + 16);
      uint64_t v53 = *(void *)(v50 + 16);
      uint64_t v54 = *(void *)(v41 + 16);
      ((void (*)(unint64_t **__return_ptr, uint64_t **))(*v38)[58])(&v134, v38);
      std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int &,int &,int &,int &,void>(&v132, (int)v134, SHIDWORD(v134), v135, v136);
      int v55 = v136;
      if (v136 >= 1)
      {
        int v56 = 0;
        uint64_t v57 = 0;
        int v58 = v135;
        uint64_t v59 = v132;
        do
        {
          if (v58 >= 1)
          {
            int v60 = 0;
            int v61 = HIDWORD(v134);
            do
            {
              if (v61 >= 1)
              {
                int v62 = 0;
                int v63 = (int)v134;
                do
                {
                  if (v63 >= 1)
                  {
                    uint64_t v64 = 0;
                    do
                    {
                      *(unsigned char *)(*(void *)(v59 + 24) + v57 + v64) = *(unsigned char *)(v54
                                                                               + v60
                                                                               + ((int)v64
                                                                                + v63 * (v62 + v56 * HIDWORD(v134)))
                                                                               * v135);
                      int v63 = (int)v134;
                      ++v64;
                    }
                    while ((int)v64 < (int)v134);
                    v57 += v64;
                    int v61 = HIDWORD(v134);
                  }
                  ++v62;
                }
                while (v62 < v61);
                int v58 = v135;
              }
              ++v60;
            }
            while (v60 < v58);
            int v55 = v136;
          }
          ++v56;
        }
        while (v56 < v55);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v130, v110, 1, 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v128, v110, 1, 1, 1);
      uint64_t v66 = v128;
      if ((int)v110 >= 1)
      {
        uint64_t v67 = 0;
        uint64_t v68 = v130;
        do
        {
          double v69 = (double)*(int *)(v52 + v67);
          LODWORD(v65) = *(_DWORD *)(v53 + v67);
          float v70 = v69 / exp2((double)*(unint64_t *)&v65);
          *(float *)(*(void *)(v68 + 16) + v67) = v70;
          ((void (*)(void **__return_ptr, uint64_t **))(*v38)[56])(&__p, v38);
          LODWORD(v71) = *(_DWORD *)(v53 + v67);
          long double v72 = exp2((double)v71);
          double v65 = ((double)*(int *)(v51 + v67) + v72 * -0.5) / (v72 * v24);
          *(float *)&double v65 = v65;
          *(_DWORD *)(*(void *)(v66 + 16) + v67) = LODWORD(v65);
          if (v122) {
            nitro::nitro_function::nitro_function(v122);
          }
          v67 += 4;
        }
        while (4 * v110 != v67);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v38[20]);
      v38[19] = (uint64_t *)(v38 + 20);
      v38[20] = 0;
      v38[21] = 0;
      std::string::size_type v73 = v129;
      uint64_t v126 = v66;
      uint64_t v127 = v129;
      if (v129) {
        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v18 = v115;
      int v14 = v112;
      ((void (*)(uint64_t **, uint64_t *))(*v38)[49])(v38, &v126);
      if (v127) {
        nitro::nitro_function::nitro_function(v127);
      }
      if (a2)
      {
        ((void (*)(void **__return_ptr, uint64_t **))(*v38)[57])(&__p, v38);
        ((void (*)(uint64_t *__return_ptr, uint64_t **))(*v38)[59])(&v124, v38);
        uint64_t v74 = v136;
        if (v136 >= 1)
        {
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v77 = *(void *)(v130 + 16);
          int v79 = HIDWORD(v134);
          int v78 = v135;
          uint64_t v80 = v132;
          do
          {
            if (v78 >= 1)
            {
              int v81 = 0;
              float v82 = (float)(v29 * *(float *)(v77 + 4 * v75)) / v24;
              int v83 = (int)v134;
              do
              {
                if (v79 >= 1)
                {
                  int v84 = 0;
                  uint64_t v85 = v124;
                  do
                  {
                    if (v83 >= 1)
                    {
                      uint64_t v86 = *(void *)(v80 + 24);
                      uint64_t v87 = *(void *)(v85 + 24);
                      int v88 = v83;
                      do
                      {
                        *(float *)(v87 + 4 * v76) = v82 * (float)*(char *)(v86 + v76);
                        ++v76;
                        --v88;
                      }
                      while (v88);
                    }
                    ++v84;
                  }
                  while (v84 != v79);
                }
                ++v81;
              }
              while (v81 != v78);
            }
            ++v75;
          }
          while (v75 != v74);
        }
        uint64_t v119 = v124;
        uint64_t v120 = v125;
        if (v125) {
          atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        ((void (*)(uint64_t **, uint64_t *))(*v38)[50])(v38, &v119);
        if (v120) {
          nitro::nitro_function::nitro_function(v120);
        }
        if (v125) {
          nitro::nitro_function::nitro_function(v125);
        }
        double v89 = v122;
        if (v122) {
          goto LABEL_101;
        }
      }
      else
      {
        uint64_t v124 = 0;
        int v125 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        uint64_t v106 = 0;
        uint64_t v107 = *(int *)(v132 + 8);
        do
        {
          v107 *= *(int *)(v132 + 12 + v106);
          v106 += 4;
        }
        while (v106 != 12);
        ((void (*)(uint64_t **, uint64_t *, void **, void, uint64_t, void))(*v38)[21])(v38, &v124, &__p, *(void *)(v132 + 24), v107, 0);
        if (v123 < 0) {
          operator delete(__p);
        }
        if (v125) {
          nitro::nitro_function::nitro_function(v125);
        }
        uint64_t v124 = 0;
        int v125 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
        ((void (*)(uint64_t **, uint64_t *, void **, void, uint64_t, void))(*v38)[21])(v38, &v124, &__p, *(void *)(v130 + 16), 4 * *(int *)(v130 + 8), 0);
        if (v123 < 0) {
          operator delete(__p);
        }
        double v89 = v125;
        if (v125) {
LABEL_101:
        }
          nitro::nitro_function::nitro_function(v89);
      }
      if (v73) {
        nitro::nitro_function::nitro_function(v73);
      }
      if (v131) {
        nitro::nitro_function::nitro_function(v131);
      }
      if (v133) {
        nitro::nitro_function::nitro_function(v133);
      }
      if (v138)
      {
        uint64_t v139 = v138;
        operator delete(v138);
      }
      if (v109) {
        nitro::nitro_function::nitro_function(v109);
      }
      if (v111) {
        nitro::nitro_function::nitro_function(v111);
      }
      if (v114) {
        nitro::nitro_function::nitro_function(v114);
      }
      if (v113) {
        nitro::nitro_function::nitro_function(v113);
      }
      uint64_t v90 = v112;
      if (v112) {
        goto LABEL_119;
      }
LABEL_120:
      int v9 = v116;
      if ((a2 & 1) == 0)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, 1, 1, 1, 1);
        float v91 = (int *)__p;
        **((float **)__p + 2) = v24;
        uint64_t v132 = 0;
        long long v133 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v134, "hx_extra_f");
        (*(void (**)(uint64_t, uint64_t *, unint64_t **, void, uint64_t, void))(*(void *)v15 + 168))(v15, &v132, &v134, *((void *)v91 + 2), 4 * v91[2], 0);
        if (v137 < 0) {
          operator delete(v134);
        }
        if (v133) {
          nitro::nitro_function::nitro_function(v133);
        }
        if (v122)
        {
          nitro::nitro_function::nitro_function(v122);
          if (!v18) {
            goto LABEL_131;
          }
          goto LABEL_130;
        }
      }
LABEL_129:
      if (v18) {
        goto LABEL_130;
      }
LABEL_131:
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      unint64_t v10 = v140[0] + 1;
      v140[0] = v10;
      uint64_t v3 = *a1;
      uint64_t v8 = (*a1)[4];
    }
    while (v10 < ((char *)(*a1)[5] - (char *)v8) >> 4);
  }
  if (a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v3[45]);
    v3[45] = 0;
    v3[46] = 0;
    v3[44] = (uint64_t *)(v3 + 45);
    uint64_t v3 = *a1;
  }
  std::string v108 = (std::__shared_weak_count *)a1[1];
  v118[0] = v3;
  v118[1] = v108;
  if (v108) {
    atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::convert_weights_to_fp16((uint64_t)v118);
  if (v108) {
    nitro::nitro_function::nitro_function(v108);
  }
}

void sub_1927B7854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantizer::_fold_transform_params(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(atomic_ullong **)(a1 + 8);
  v3[0] = *(const Espresso::net **)a1;
  v3[1] = (const Espresso::net *)v2;
  if (v2) {
    atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
  }
  Espresso::fold_transform_params(v3, 0, a2);
  if (v2)
  {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
  }
}

void sub_1927B7BB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_set_mil_const_values(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v87);
  uint64_t v68 = a3;
  double v69 = a2;
  if ((void)v87) {
    operator new();
  }
  *(_OWORD *)int v78 = 0u;
  long long v79 = 0u;
  float v80 = 1.0;
  if (a4)
  {
    uint64_t v10 = 0;
    do
    {
      unsigned int v11 = *(int32x4_t **)(a6 + 8 * v10);
      v83.__r_.__value_.__r.__words[0] = 0;
      if (espresso_buffer_unpack_tensor_shape(v11, &v83, &v87)) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to unpack espresso_buffer_t");
      }
      memset(&v91, 0, sizeof(v91));
      if (v83.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v12 = 0;
        unint64_t v13 = 1;
        do
        {
          uint64_t v14 = MIL::IRConstantDimension::Make(0, *((MIL::MILContext **)&v87 + v12));
          uint64_t v15 = v14;
          std::string::size_type size = v91.__r_.__value_.__l.__size_;
          if (v91.__r_.__value_.__l.__size_ >= v91.__r_.__value_.__r.__words[2])
          {
            uint64_t v17 = (uint64_t)(v91.__r_.__value_.__l.__size_ - v91.__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v17 + 1) >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v18 = (uint64_t)(v91.__r_.__value_.__r.__words[2] - v91.__r_.__value_.__r.__words[0]) >> 2;
            if (v18 <= v17 + 1) {
              unint64_t v18 = v17 + 1;
            }
            if (v91.__r_.__value_.__r.__words[2] - v91.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19) {
              unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v19);
            }
            else {
              uint64_t v20 = 0;
            }
            uint64_t v21 = (uint64_t *)(v19 + 8 * v17);
            uint64_t *v21 = v15;
            std::string::size_type v6 = (std::string::size_type)(v21 + 1);
            int v22 = (char *)v91.__r_.__value_.__l.__size_;
            std::string::size_type v23 = v91.__r_.__value_.__r.__words[0];
            if (v91.__r_.__value_.__l.__size_ != v91.__r_.__value_.__r.__words[0])
            {
              do
              {
                uint64_t v24 = *((void *)v22 - 1);
                v22 -= 8;
                *--uint64_t v21 = v24;
              }
              while (v22 != (char *)v23);
              int v22 = (char *)v91.__r_.__value_.__r.__words[0];
            }
            v91.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
            v91.__r_.__value_.__l.__size_ = v6;
            v91.__r_.__value_.__r.__words[2] = v19 + 8 * v20;
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *(void *)v91.__r_.__value_.__l.__size_ = v14;
            std::string::size_type v6 = size + 8;
          }
          v91.__r_.__value_.__l.__size_ = v6;
          v13 *= *((void *)&v87 + v12++);
        }
        while (v12 < v83.__r_.__value_.__r.__words[0]);
      }
      else
      {
        unint64_t v13 = 1;
      }
      int v25 = v11[10].i32[0];
      uint64_t v73 = v10;
      if (v25 > 131103)
      {
        if (v25 == 131104)
        {
          MIL::IRTensorValueType::MakeWithShape();
          uint64_t v39 = (const void *)v11->i64[0];
          uint64_t v40 = v11->i64[0] + 4 * v13;
          memset(&__p, 0, sizeof(__p));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v39, v40, v13);
          MIL::IRTensorValueType::MakeInt32Value();
          std::string::size_type v28 = v90.__r_.__value_.__r.__words[0];
          if (v90.__r_.__value_.__r.__words[0]) {
            operator new();
          }
        }
        else
        {
          if (v25 != 262152) {
LABEL_129:
          }
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("Only storage type float32/float16/uint8/int32");
          MIL::IRTensorValueType::MakeWithShape();
          float v29 = (const void *)v11->i64[0];
          uint64_t v30 = v11->i64[0] + v13;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v29, v30, v13);
          MIL::IRTensorValueType::MakeUInt8Value();
          std::string::size_type v28 = v90.__r_.__value_.__r.__words[0];
          if (v90.__r_.__value_.__r.__words[0]) {
            operator new();
          }
        }
      }
      else if (v25 == 65552)
      {
        MIL::IRTensorValueType::MakeWithShape();
        int v31 = (MIL::Fp16 *)std::vector<MIL::Fp16>::vector(&__p, v13);
        if (v13)
        {
          uint64_t v32 = 0;
          std::string::size_type v6 = v11->i64[0];
          do
          {
            _H0 = *(_WORD *)(v6 + 2 * v32);
            __asm { FCVT            S0, H0; float }
            int v31 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v31, _S0);
            *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 2 * v32++) = (_WORD)v31;
          }
          while (v13 != v32);
        }
        MIL::IRTensorValueType::MakeFloat16Value();
        std::string::size_type v28 = v90.__r_.__value_.__r.__words[0];
        if (v90.__r_.__value_.__r.__words[0]) {
          operator new();
        }
      }
      else
      {
        if (v25 != 65568) {
          goto LABEL_129;
        }
        MIL::IRTensorValueType::MakeWithShape();
        uint64_t v26 = (const void *)v11->i64[0];
        uint64_t v27 = v11->i64[0] + 4 * v13;
        memset(&__p, 0, sizeof(__p));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v26, v27, v13);
        MIL::IRTensorValueType::MakeFloat32Value();
        std::string::size_type v28 = v90.__r_.__value_.__r.__words[0];
        if (v90.__r_.__value_.__r.__words[0]) {
          operator new();
        }
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v91.__r_.__value_.__r.__words[0])
      {
        v91.__r_.__value_.__l.__size_ = v91.__r_.__value_.__r.__words[0];
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      uint64_t v41 = std::string::basic_string[abi:ne180100]<0>(&v91, *(char **)(a5 + 8 * v73));
      unint64_t v42 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v41);
      std::string::size_type v43 = v42;
      unint64_t v44 = (unint64_t)v78[1];
      if (v78[1])
      {
        uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v78[1]);
        v45.i16[0] = vaddlv_u8(v45);
        unint64_t v46 = v45.u32[0];
        if (v45.u32[0] > 1uLL)
        {
          std::string::size_type v6 = v42;
          if ((void *)v42 >= v78[1]) {
            std::string::size_type v6 = v42 % (unint64_t)v78[1];
          }
        }
        else
        {
          std::string::size_type v6 = ((unint64_t)v78[1] - 1) & v42;
        }
        float v47 = (void **)*((void *)v78[0] + v6);
        if (v47)
        {
          for (unint64_t i = *v47; i; unint64_t i = *(void **)i)
          {
            unint64_t v49 = *((void *)i + 1);
            if (v49 == v43)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)&v91))
              {
                goto LABEL_85;
              }
            }
            else
            {
              if (v46 > 1)
              {
                if (v49 >= v44) {
                  v49 %= v44;
                }
              }
              else
              {
                v49 &= v44 - 1;
              }
              if (v49 != v6) {
                break;
              }
            }
          }
        }
      }
      unint64_t i = operator new(0x38uLL);
      *(void *)&long long v87 = i;
      *((void *)&v87 + 1) = &v79;
      *(void *)unint64_t i = 0;
      *((void *)i + 1) = v43;
      *((_OWORD *)i + 1) = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
      std::string::size_type v50 = v91.__r_.__value_.__r.__words[2];
      memset(&v91, 0, sizeof(v91));
      *((void *)i + 5) = 0;
      *((void *)i + 6) = 0;
      *((void *)i + 4) = v50;
      LOBYTE(v88) = 1;
      float v51 = (float)(unint64_t)(*((void *)&v79 + 1) + 1);
      if (!v44 || (float)(v80 * (float)v44) < v51)
      {
        BOOL v52 = (v44 & (v44 - 1)) != 0;
        if (v44 < 3) {
          BOOL v52 = 1;
        }
        unint64_t v53 = v52 | (2 * v44);
        unint64_t v54 = vcvtps_u32_f32(v51 / v80);
        if (v53 <= v54) {
          size_t v55 = v54;
        }
        else {
          size_t v55 = v53;
        }
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v78, v55);
        unint64_t v44 = (unint64_t)v78[1];
        if (((unint64_t)v78[1] & ((unint64_t)v78[1] - 1)) != 0)
        {
          if ((void *)v43 >= v78[1]) {
            std::string::size_type v6 = v43 % (std::string::size_type)v78[1];
          }
          else {
            std::string::size_type v6 = v43;
          }
        }
        else
        {
          std::string::size_type v6 = ((std::string::size_type)v78[1] - 1) & v43;
        }
      }
      int v56 = v78[0];
      uint64_t v57 = (void *)*((void *)v78[0] + v6);
      if (v57)
      {
        *(void *)unint64_t i = *v57;
      }
      else
      {
        *(void *)unint64_t i = v79;
        *(void *)&long long v79 = i;
        v56[v6] = &v79;
        if (!*(void *)i) {
          goto LABEL_84;
        }
        unint64_t v58 = *(void *)(*(void *)i + 8);
        if ((v44 & (v44 - 1)) != 0)
        {
          if (v58 >= v44) {
            v58 %= v44;
          }
        }
        else
        {
          v58 &= v44 - 1;
        }
        uint64_t v57 = (char *)v78[0] + 8 * v58;
      }
      *uint64_t v57 = i;
LABEL_84:
      *(void *)&long long v87 = 0;
      ++*((void *)&v79 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v87);
LABEL_85:
      uint64_t v59 = (std::__shared_weak_count *)*((void *)i + 6);
      *((void *)i + 5) = v28;
      *((void *)i + 6) = 0;
      if (v59) {
        nitro::nitro_function::nitro_function(v59);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      uint64_t v10 = v73 + 1;
    }
    while (v73 + 1 != a4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v77, a1);
  std::string::basic_string[abi:ne180100]<0>(&v76, v69);
  std::string::basic_string[abi:ne180100]<0>(v74, v68);
  int v60 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)&v87, &v76);
  std::__fs::filesystem::__status(v60, 0);
  unsigned __int8 v61 = v91.__r_.__value_.__s.__data_[0];
  if (SBYTE7(v88) < 0) {
    operator delete((void *)v87);
  }
  if (v61 && v61 != 255)
  {
    uint64_t v67 = &v76;
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v67 = (std::string *)v76.__r_.__value_.__r.__words[0];
    }
    *(void *)&long long v87 = v67;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Trying to write to existing MIL file: %s", &v87);
  }
  long long v85 = 0uLL;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v77;
  }
  Espresso::MILUtil::LoadProgram((MIL::ParserOptions *)&v86, &v85, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v85 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v85 + 1));
  }
  long long v87 = 0u;
  long long v88 = 0u;
  int v89 = 1065353216;
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE379B48;
  v91.__r_.__value_.__l.__size_ = (std::string::size_type)&v87;
  float v92 = &v91;
  MIL::Util::Walk();
  std::__function::__value_func<BOOL ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](&v91);
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v86 + 72))(v86) + 24) != 1) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Only programs with a single function are supported");
  }
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE37D928;
  v91.__r_.__value_.__l.__size_ = (std::string::size_type)v78;
  float v92 = &v91;
  MIL::Util::Rewrite();
  std::__function::__value_func<BOOL ()(MIL::IROperation &)>::~__value_func[abi:ne180100](&v91);
  Espresso::MILES::SerializeWeights(v86, (std::string::size_type)v74, (uint64_t)&v87);
  uint64_t v62 = v86;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v91, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    std::string v91 = v76;
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v82.__pn_, &v76);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v90, &v82);
  int v63 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v83, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  }
  else {
    std::string v83 = v90;
  }
  memset(v81, 0, sizeof(v81));
  Espresso::MILUtil::SerializeProgram(v62, (uint64_t)&v91, (uint64_t)&v83, (uint64_t)v81, 0, 0);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v83.__r_.__value_.__l.__data_);
    if ((v63 & 0x80000000) == 0) {
      goto LABEL_110;
    }
  }
  else if ((v63 & 0x80000000) == 0)
  {
    goto LABEL_110;
  }
  operator delete(v90.__r_.__value_.__l.__data_);
LABEL_110:
  if (SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&v87);
  uint64_t v64 = v86;
  uint64_t v86 = 0;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  if (v75 < 0) {
    operator delete(v74[0]);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((void *)v79);
  double v65 = v78[0];
  v78[0] = 0;
  if (v65) {
    operator delete(v65);
  }
  return 0;
}

void sub_1927B8618(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  operator delete(*(void **)(v71 - 176));
  if (a50 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v71 - 121) < 0) {
    operator delete(*(void **)(v71 - 144));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v71 - 256);
  uint64_t v74 = a60;
  a60 = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a2 == 1)
  {
    char v75 = (Espresso *)__cxa_begin_catch(a1);
    std::string v77 = Espresso::espresso_os_log_subsystem(v75, v76);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v78 = (*(uint64_t (**)(Espresso *))(*(void *)v75 + 16))(v75);
      *(_DWORD *)(v71 - 176) = 136315138;
      *(void *)((char *)&a71 + 4) = v78;
      _os_log_debug_impl(&dword_1920CB000, v77, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)(v71 - 176), 0xCu);
    }
    (*(void (**)(Espresso *))(*(void *)v75 + 24))(v75);
    __cxa_end_catch();
    JUMPOUT(0x1927B8534);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)&a36);
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

void *std::vector<MIL::Fp16>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1927B8A64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    std::string::size_type v6 = result;
    __n128 result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1927B8AE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

char *std::vector<MIL::Fp16>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void espresso_generate_training_program(char *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v9[1] = a2;
  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v10);
  if (v10.__pn_.__r_.__value_.__r.__words[0]) {
    operator new();
  }
  long long v8 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, a1);
  Espresso::MILUtil::LoadProgram((MIL::ParserOptions *)v9, &v8, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v8 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v8 + 1));
  }
  std::string::size_type v3 = v9[0];
  v9[0] = 0;
  std::string::size_type v4 = v3;
  Espresso::MILES::GenerateTrainingProgram((uint64_t)&v5, &v4);
}

void sub_1927B8E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  operator delete(__p);
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  if (a29) {
    (*(void (**)(uint64_t))(*(void *)a29 + 8))(a29);
  }
  uint64_t v40 = *(void *)(v37 - 96);
  *(void *)(v37 - 96) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (a2 == 1)
  {
    uint64_t v41 = (Espresso *)__cxa_begin_catch(a1);
    std::string::size_type v43 = Espresso::espresso_os_log_subsystem(v41, v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v44 = (*(uint64_t (**)(Espresso *))(*(void *)v41 + 16))(v41);
      *(_DWORD *)(v37 - 80) = 136315138;
      *(void *)(v37 - 76) = v44;
      _os_log_debug_impl(&dword_1920CB000, v43, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)(v37 - 80), 0xCu);
    }
    (*(void (**)(Espresso *))(*(void *)v41 + 24))(v41);
    __cxa_end_catch();
    JUMPOUT(0x1927B8DB8);
  }
  _Unwind_Resume(a1);
}

void sub_1927B9040()
{
}

uint64_t Espresso::abstract_blob_container::__copy_from()
{
  return 0;
}

uint64_t Espresso::abstract_blob_container::unsafe_opaque_raw_pointer(Espresso::abstract_blob_container *this)
{
  return 0;
}

uint64_t Espresso::MPSGraphCompilerEngine::blob_container::compute_path(Espresso::MPSGraphCompilerEngine::blob_container *this)
{
  return *((unsigned int *)this + 40);
}

uint64_t Espresso::MPSGraphCompilerEngine::blob_container::platform(Espresso::MPSGraphCompilerEngine::blob_container *this)
{
  return (***(uint64_t (****)(void))(*((void *)this + 9) + 8))(*(void *)(*((void *)this + 9) + 8));
}

void Espresso::MPSGraphCompilerEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t a3)
{
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  std::string::size_type v6 = *(_DWORD **)a3;
  if (*(void *)a3 && *((unsigned char *)v6 + 8)) {
    *(_DWORD *)(a1 + 160) = v6[3];
  }
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = v7;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (!*(void *)a3)
  {
    std::__fs::filesystem::path v10 = 0;
    goto LABEL_13;
  }
  std::__fs::filesystem::path v10 = v9;
  if (!v9)
  {
LABEL_13:
    std::string::size_type v12 = 0;
    BOOL v11 = 0;
    goto LABEL_14;
  }
  BOOL v11 = *((unsigned char *)v9 + 88) != 0;
  std::string::size_type v12 = v9[14];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_14:
  *(void *)(a1 + 184) = 16;
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  int v14 = *(_DWORD *)(a1 + 8);
  int v13 = *(_DWORD *)(a1 + 12);
  int v15 = *(_DWORD *)(a1 + 16);
  int v16 = *(_DWORD *)(a1 + 20);
  int v17 = *(_DWORD *)(a1 + 24);
  Espresso::abstract_blob_container::shape(v27, a1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v30, (const Espresso::layer_shape *)v27, 0);
  if (v17 <= 1) {
    int v17 = 1;
  }
  if (__p)
  {
    float v29 = __p;
    operator delete(__p);
  }
  if (v31 == 3)
  {
    int v14 = *(_DWORD *)(a1 + 8);
    int v13 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
    int v18 = *(_DWORD *)(a1 + 24);
    if (v18 <= 1) {
      int v18 = 1;
    }
    int v19 = v18 * *(_DWORD *)(a1 + 20);
  }
  else
  {
    int v19 = v16 * v15 * v17;
  }
  unsigned int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) - 1;
  if (v20 > 0xC) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = qword_192DF6AD8[v20];
  }
  unint64_t v22 = *(void *)(a1 + 184);
  unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) - 1;
  if (v23 > 0xC) {
    unint64_t v24 = 4;
  }
  else {
    unint64_t v24 = qword_192DF6AD8[v23];
  }
  unint64_t v25 = v22 + v22 * ((v21 * v14 - 1) / v22);
  *(_DWORD *)(a1 + 176) = v25 / v24;
  if (v11)
  {
    uint64_t v26 = v25 * v13 * v19;
    if (!(*(_DWORD *)(a1 + 16)
         * *(_DWORD *)(a1 + 20)
         * *(_DWORD *)(a1 + 12)
         * *(_DWORD *)(a1 + 8)
         * *(_DWORD *)(a1 + 24)))
      uint64_t v26 = 0;
    v10[12] = (std::__shared_weak_count *)v26;
  }
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_1927B9354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphCompilerEngine::blob_container::~blob_container(id *this)
{
  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)this);
}

void Espresso::MPSGraphCompilerEngine::blob_container_options::~blob_container_options(Espresso::MPSGraphCompilerEngine::blob_container_options *this)
{
  Espresso::abstract_blob_container_options_aliasing::~abstract_blob_container_options_aliasing(this);

  JUMPOUT(0x192FF16B0);
}

id espresso_plan_finish_profiling(Espresso::profiler_t **a1, const char *a2)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)vImage_Buffer buf = 0;
    _os_log_debug_impl(&dword_1920CB000, v2, OS_LOG_TYPE_DEBUG, "EspressoProfiler: espresso_plan_finish_profiling: Start", buf, 2u);
  }

  std::string::size_type v3 = a1[131];
  if (v3)
  {
    Espresso::profiler_t::get_result(v3, &v140);
    id v133 = (id)objc_opt_new();
    id v4 = objc_alloc(MEMORY[0x1E4F1CA48]);
    uint64_t v5 = (void *)[v4 initWithCapacity:0x86BCA1AF286BCA1BLL * ((v141 - v140) >> 3)];
    [v133 setLayers:v5];

    long long v8 = Espresso::espresso_os_log_subsystem(v6, v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_debug_impl(&dword_1920CB000, v8, OS_LOG_TYPE_DEBUG, "EspressoProfiler: format_result] Start Postprocessing profiling data", buf, 2u);
    }

    v146[0] = 0;
    v146[1] = 0;
    long long v145 = v146;
    uint64_t v138 = [v133 layers];
    int v9 = operator new(0x14uLL);
    std::__fs::filesystem::path v10 = 0;
    uint64_t v11 = 0;
    char v137 = a1 + 131;
    v9[4] = 50008;
    long long v134 = v9;
    *(_OWORD *)int v9 = xmmword_192DD32F8;
    id v143 = 0;
    uint64_t v144 = 0;
    uint64_t v142 = &v143;
    std::string::size_type v12 = &v143;
    while (1)
    {
      int v13 = (int *)((char *)&unk_192DD330C + 8 * v11);
      int v14 = &v143;
      if (v12 == &v143) {
        goto LABEL_13;
      }
      int v15 = v10;
      int v16 = &v143;
      if (v10)
      {
        do
        {
          int v14 = (uint64_t **)v15;
          int v15 = (uint64_t *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          int v14 = (uint64_t **)v16[2];
          BOOL v17 = *v14 == (uint64_t *)v16;
          int v16 = v14;
        }
        while (v17);
      }
      int v18 = *v13;
      if (*((_DWORD *)v14 + 7) < *v13)
      {
LABEL_13:
        int v19 = v10 ? v14 : &v143;
        unsigned int v20 = v10 ? v14 + 1 : &v143;
      }
      else
      {
        int v19 = &v143;
        unsigned int v20 = &v143;
        if (v10)
        {
          unsigned int v20 = &v143;
          while (1)
          {
            while (1)
            {
              int v19 = (uint64_t **)v10;
              int v22 = *((_DWORD *)v10 + 7);
              if (v18 >= v22) {
                break;
              }
              std::__fs::filesystem::path v10 = *v19;
              unsigned int v20 = v19;
              if (!*v19) {
                goto LABEL_20;
              }
            }
            if (v22 >= v18) {
              break;
            }
            unsigned int v20 = v19 + 1;
            std::__fs::filesystem::path v10 = v19[1];
            if (!v10) {
              goto LABEL_20;
            }
          }
        }
      }
      if (!*v20)
      {
LABEL_20:
        uint64_t v21 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v21 + 28) = *(void *)v13;
        uint64_t *v21 = 0;
        v21[1] = 0;
        v21[2] = (uint64_t)v19;
        *unsigned int v20 = v21;
        if (*v142)
        {
          uint64_t v142 = (uint64_t **)*v142;
          uint64_t v21 = *v20;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v143, v21);
        ++v144;
      }
      if (++v11 == 5) {
        break;
      }
      std::string::size_type v12 = v142;
      std::__fs::filesystem::path v10 = v143;
    }
    id v23 = objc_alloc(MEMORY[0x1E4F1CA60]);
    uint64_t v139 = (void *)[v23 initWithCapacity:0x86BCA1AF286BCA1BLL * ((v141 - v140) >> 3)];
    unint64_t v24 = v140;
    uint64_t v132 = v141;
    if (v140 == v141)
    {
      os_log_t log = 0;
    }
    else
    {
      os_log_t log = 0;
      do
      {
        Espresso::profiler_t::entry_t::entry_t((Espresso::profiler_t::entry_t *)buf, v24);
        unint64_t v25 = objc_opt_new();
        if (v153 >= 0) {
          uint64_t v26 = &buf[8];
        }
        else {
          uint64_t v26 = *(unsigned char **)&buf[8];
        }
        uint64_t v27 = [NSString stringWithUTF8String:v26];
        [v25 setName:v27];

        objc_msgSend(v25, "setAverage_runtime:", v156);
        objc_msgSend(v25, "setSelected_runtime_engine:", v157);
        if (v166 >= 0) {
          std::string::size_type v28 = &v165;
        }
        else {
          std::string::size_type v28 = v165;
        }
        float v29 = [NSString stringWithUTF8String:v28];
        objc_msgSend(v25, "setDebug_name:", v29);

        uint64_t v30 = objc_opt_new();
        int v31 = objc_opt_new();
        [v31 setSupported:v162];
        [v31 setExists:v163];
        objc_msgSend(v31, "setInternal_layer:", v164);
        if (v155 >= 0) {
          uint64_t v32 = &v154;
        }
        else {
          uint64_t v32 = v154;
        }
        int v33 = [NSString stringWithUTF8String:v32];
        [v31 setType:v33];

        objc_msgSend(v31, "setHas_perf_warning:", v160 == v161);
        int v34 = objc_opt_new();
        int v35 = v160;
        uint64_t v36 = v161;
        while (v35 != v36)
        {
          uint64_t v37 = v35;
          if (*((char *)v35 + 23) < 0) {
            uint64_t v37 = (uint64_t *)*v35;
          }
          int v38 = [NSString stringWithUTF8String:v37];
          [v34 addObject:v38];

          v35 += 14;
        }
        objc_msgSend(v31, "setError_public:", v34);
        objc_msgSend(v31, "setError_private:", v34);
        objc_msgSend(v25, "setMain_engine_support:", v31);
        uint64_t v39 = (double *)v158;
        uint64_t v40 = v159;
        while (v39 != v40)
        {
          double v42 = *v39;
          double v41 = v39[1];
          std::string::size_type v43 = objc_opt_new();
          objc_msgSend(v43, "setStart_t:", v42);
          objc_msgSend(v43, "setEnd_t:", v41);
          [v30 addObject:v43];

          v39 += 2;
        }
        [v25 setRuntimes:v30];
        id v44 = [v25 name];
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v44 UTF8String]);

        uint64_t v147 = (long long *)__p;
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v145, __p, &v147)[7] = log;
        uint8x8_t v45 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:5];
        if (v153 >= 0) {
          unint64_t v46 = &buf[8];
        }
        else {
          unint64_t v46 = *(unsigned char **)&buf[8];
        }
        float v47 = [NSString stringWithUTF8String:v46];
        [v139 setObject:v45 forKeyedSubscript:v47];

        float v48 = [v133 layers];
        [v48 addObject:v25];

        if (v151 < 0) {
          operator delete(*(void **)__p);
        }

        if (v166 < 0) {
          operator delete(v165);
        }
        *(void *)std::string __p = &v160;
        std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v158)
        {
          uint64_t v159 = (double *)v158;
          operator delete(v158);
        }
        if (v155 < 0) {
          operator delete(v154);
        }
        if (v153 < 0) {
          operator delete(*(void **)&buf[8]);
        }
        os_log_t log = (os_log_t)((char *)log + 1);
        unint64_t v24 = (const Espresso::profiler_t::entry_t *)((char *)v24 + 152);
      }
      while (v24 != v132);
    }
    for (uint64_t i = 0; i != 5; ++i)
    {
      std::string::size_type v50 = [NSNumber numberWithInt:Espresso::keys_translation::c_api_engine_from_cpp_platform((Espresso::keys_translation *)v134[i])];
      float v51 = [v50 stringValue];

      BOOL v52 = v143;
      if (!v143) {
LABEL_154:
      }
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
      int v53 = v134[i];
      while (1)
      {
        while (1)
        {
          int v54 = *((_DWORD *)v52 + 7);
          if (v53 >= v54) {
            break;
          }
          BOOL v52 = (uint64_t *)*v52;
          if (!v52) {
            goto LABEL_154;
          }
        }
        if (v54 >= v53) {
          break;
        }
        BOOL v52 = (uint64_t *)v52[1];
        if (!v52) {
          goto LABEL_154;
        }
      }
      Espresso::profiler_t::results_for_platform_and_compute_path(*v137, v53, *((_DWORD *)v52 + 8), buf);
      uint64_t v56 = *(void *)buf;
      uint64_t v55 = *(void *)&buf[8];
      while (v56 != v55)
      {
        uint64_t v57 = (void *)(v56 + 8);
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v146[0], (void *)(v56 + 8)))
        {
          uint64_t v59 = objc_msgSend(v138, "objectAtIndex:", *(void *)std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)&v145, (void *)(v56 + 8)));
          int v60 = (void *)(v56 + 8);
          if (*(char *)(v56 + 31) < 0) {
            int v60 = (void *)*v57;
          }
          unsigned __int8 v61 = [NSString stringWithUTF8String:v60];
          uint64_t v62 = [v139 objectForKey:v61];

          if (!v62)
          {
            uint64_t v62 = (Espresso *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:5];
            uint64_t v64 = Espresso::espresso_os_log_subsystem(v62, v63);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(v56 + 31) < 0) {
                uint64_t v57 = (void *)*v57;
              }
              *(_DWORD *)std::string __p = 136315138;
              *(void *)&__p[4] = v57;
              _os_log_debug_impl(&dword_1920CB000, v64, OS_LOG_TYPE_DEBUG, "No entry found for %s; creating dictionary.",
                __p,
                0xCu);
            }
          }
          double v65 = objc_opt_new();
          [v65 setExists:*(unsigned __int8 *)(v56 + 121)];
          [v65 setSupported:*(unsigned __int8 *)(v56 + 120)];
          uint64_t v66 = (void *)(v56 + 32);
          if (*(char *)(v56 + 55) < 0) {
            uint64_t v66 = (void *)*v66;
          }
          uint64_t v67 = objc_msgSend(NSString, "stringWithCString:encoding:", v66, objc_msgSend(NSString, "defaultCStringEncoding"));
          [v65 setType:v67];

          objc_msgSend(v65, "setInternal_layer:", 0);
          [(Espresso *)v62 setObject:v65 forKey:v51];
          [v59 setPer_platform_support:v62];
        }
        else
        {
          uint64_t v59 = Espresso::espresso_os_log_subsystem(0, v58);
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(v56 + 31) < 0) {
              uint64_t v57 = (void *)*v57;
            }
            int v68 = v134[i];
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = v57;
            __int16 v149 = 1024;
            int v150 = v68;
            _os_log_debug_impl(&dword_1920CB000, v59, OS_LOG_TYPE_DEBUG, "Failed to find layer name %s for platform %d", __p, 0x12u);
          }
        }

        v56 += 152;
      }
      *(void *)std::string __p = buf;
      std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    if (log)
    {
      for (int j = 0; j != log; int j = ((char *)j + 1))
      {
        long double v72 = [v133 layers];
        uint64_t v73 = [v72 objectAtIndex:j];

        uint64_t v74 = [v73 name];
        char v75 = [v139 objectForKey:v74];
        std::string v76 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithDictionary:v75];
        objc_msgSend(v73, "setPer_platform_support:", v76);
      }
    }
    std::string v77 = *v137;
    if (*((void *)*v137 + 2) != *((void *)*v137 + 1))
    {
      uint64_t v78 = objc_alloc_init(EspressoProfilingNetworkANEInfo);
      objc_msgSend(v133, "setAne_performance_info:", v78);

      long long v79 = objc_msgSend(v133, "ane_performance_info");
      objc_msgSend(v79, "setTotal_ane_time_ns:", 0);

      if (*((void *)*v137 + 2) != *((void *)*v137 + 1))
      {
        unint64_t v80 = 0;
        do
        {
          int v81 = objc_msgSend(v133, "ane_performance_info");
          objc_msgSend(v81, "setTotal_ane_time_ns:", *(void *)(*((void *)*v137 + 1) + 8 * v80) + objc_msgSend(v81, "total_ane_time_ns"));

          ++v80;
        }
        while (v80 < (uint64_t)(*((void *)*v137 + 2) - *((void *)*v137 + 1)) >> 3);
      }
      std::__fs::filesystem::path v82 = objc_msgSend(v133, "ane_performance_info");
      unint64_t v83 = objc_msgSend(v82, "total_ane_time_ns");
      uint64_t v85 = *((void *)*v137 + 1);
      uint64_t v84 = *((void *)*v137 + 2);
      uint64_t v86 = objc_msgSend(v133, "ane_performance_info");
      objc_msgSend(v86, "setAne_time_per_eval_ns:", v83 / ((v84 - v85) >> 3));

      std::string v77 = *v137;
    }
    if (*((void *)v77 + 5) == *((void *)v77 + 4))
    {
      loga = Espresso::espresso_os_log_subsystem(v69, v70);
      if (os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_debug_impl(&dword_1920CB000, loga, OS_LOG_TYPE_DEBUG, "[EspressoProfiling::format_result] No compiler analytics found", buf, 2u);
      }
    }
    else
    {
      long long v87 = objc_alloc_init(EspressoProfilingANEcompilerAnalytics);
      objc_msgSend(v133, "setAne_compiler_analytics:", v87);

      long long v88 = (Espresso *)[MEMORY[0x1E4F1CBF0] mutableCopy];
      loga = v88;
      if (*((void *)*v137 + 5) != *((void *)*v137 + 4))
      {
        unint64_t v90 = 0;
        uint64_t v91 = 47;
        while (1)
        {
          float v92 = Espresso::espresso_os_log_subsystem(v88, v89);
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
          {
            __int16 v117 = (char *)(*((void *)*v137 + 4) + v91);
            double v118 = v117 - 47;
            if (*(v117 - 24) < 0) {
              double v118 = *(char **)v118;
            }
            int v120 = *v117;
            uint64_t v119 = v117 - 23;
            if (v120 < 0) {
              uint64_t v119 = *(char **)v119;
            }
            *(_DWORD *)vImage_Buffer buf = 136315394;
            *(void *)&uint8_t buf[4] = v118;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v119;
            _os_log_debug_impl(&dword_1920CB000, v92, OS_LOG_TYPE_DEBUG, "[EspressoProfiling::format_result] Compiler analytics: Segment: \"%s\" saved to: %s", buf, 0x16u);
          }

          uint64_t v93 = (char *)(*((void *)*v137 + 4) + v91);
          int v95 = *v93;
          uint64_t v94 = v93 - 23;
          if (v95 < 0) {
            uint64_t v94 = *(char **)v94;
          }
          char v96 = [NSString stringWithUTF8String:v94];
          [loga addObject:v96];

          uint64_t v97 = *v137;
          uint64_t v98 = *((void *)*v137 + 4);
          float v99 = (char *)(v98 + v91);
          int v100 = (uint64_t *)(v98 + v91 - 23);
          if ((*(char *)(v98 + v91) & 0x80000000) == 0) {
            break;
          }
          if (*(void *)(v99 - 15))
          {
            uint64_t v101 = *v100;
            goto LABEL_117;
          }
LABEL_130:
          ++v90;
          v91 += 48;
          if (v90 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)v97 + 5) - v98) >> 4)) {
            goto LABEL_141;
          }
        }
        uint64_t v101 = v98 + v91 - 23;
        if (!*(unsigned char *)(v98 + v91)) {
          goto LABEL_130;
        }
LABEL_117:
        float v102 = (void *)MEMORY[0x1E4F1C9B8];
        std::string v103 = [NSString stringWithUTF8String:v101];
        std::string v104 = [v102 dataWithContentsOfFile:v103];

        uint64_t v105 = +[_ANECompilerAnalytics objectWithBuffer:v104];
        uint64_t v107 = v105;
        if (v105)
        {
          if (![v105 populateAnalytics])
          {
LABEL_129:

            uint64_t v97 = *v137;
            uint64_t v98 = *((void *)*v137 + 4);
            goto LABEL_130;
          }
          if (*v99 >= 0) {
            std::string v108 = v100;
          }
          else {
            std::string v108 = *(uint64_t **)(v99 - 23);
          }
          char v109 = objc_msgSend(NSString, "stringWithFormat:", @"%s.json", v108);
          uint64_t v110 = [MEMORY[0x1E4F1CAA8] outputStreamToFileAtPath:v109 append:0];
          [v110 open];
          __int16 v111 = (void *)MEMORY[0x1E4F28D90];
          long long v112 = [v107 serialize];
          *(void *)std::string __p = 0;
          [v111 writeJSONObject:v112 toStream:v110 options:9 error:__p];
          id v113 = *(id *)__p;

          if (v113)
          {
            int v116 = Espresso::espresso_os_log_subsystem(v114, v115);
            if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)vImage_Buffer buf = 138412290;
              *(void *)&uint8_t buf[4] = v109;
              _os_log_debug_impl(&dword_1920CB000, v116, OS_LOG_TYPE_DEBUG, "disassemble_analytics_buffer: Could not write compiler analytics to %@", buf, 0xCu);
            }
          }
          [v110 close];
        }
        else
        {
          char v109 = Espresso::espresso_os_log_subsystem(0, v106);
          if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
          {
            if (*v99 >= 0) {
              uint64_t v121 = v100;
            }
            else {
              uint64_t v121 = *(uint64_t **)(v99 - 23);
            }
            *(_DWORD *)vImage_Buffer buf = 136315138;
            *(void *)&uint8_t buf[4] = v121;
            _os_log_debug_impl(&dword_1920CB000, v109, OS_LOG_TYPE_DEBUG, "disassemble_analytics_buffer: Could not correctly parse compiler analytic buffer at %s", buf, 0xCu);
          }
        }

        goto LABEL_129;
      }
LABEL_141:
      long long v122 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:loga];
      char v123 = objc_msgSend(v133, "ane_compiler_analytics");
      objc_msgSend(v123, "setCompiler_analytics_file_names:", v122);
    }
    uint64_t v126 = Espresso::espresso_os_log_subsystem(v124, v125);
    if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_debug_impl(&dword_1920CB000, v126, OS_LOG_TYPE_DEBUG, "EspressoProfiler: format_result] Exit format_result ", buf, 2u);
    }

    std::__tree<int>::destroy(v143);
    operator delete(v134);

    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)v146[0]);
    uint64_t v128 = (std::__shared_weak_count *)a1[132];
    void *v137 = 0;
    a1[132] = 0;
    if (v128) {
      nitro::nitro_function::nitro_function(v128);
    }
    long long v129 = Espresso::espresso_os_log_subsystem((Espresso *)v128, v127);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_debug_impl(&dword_1920CB000, v129, OS_LOG_TYPE_DEBUG, "EspressoProfiler: espresso_plan_finish_profiling: Exit", buf, 2u);
    }

    *(void *)vImage_Buffer buf = &v140;
    std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    id v133 = 0;
  }

  return v133;
}

void sub_1927BA70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *__p,void *a21,uint64_t a22,void *a23,void *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,char *a31,char *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  std::__tree<int>::destroy(a29);
  operator delete(__p);

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a32);
  a31 = &a25;
  std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

id espresso_plan_static_profiling_info(Espresso::profiler_t **a1)
{
  if (espresso_plan_start_profiling_with_options((uint64_t)a1, 0))
  {
    std::string::size_type v3 = 0;
  }
  else
  {
    std::string::size_type v3 = espresso_plan_finish_profiling(a1, v2);
  }

  return v3;
}

id espresso_plan_auto_profile(EspressoLight::espresso_plan *a1)
{
  if (espresso_plan_start_profiling_with_options((uint64_t)a1, 0))
  {
    std::string::size_type v3 = 0;
  }
  else
  {
    int v6 = 0;
    espresso_plan_perfbench(a1, v2, 0, (float *)&v6);
    std::string::size_type v3 = espresso_plan_finish_profiling((Espresso::profiler_t **)a1, v4);
  }

  return v3;
}

uint64_t Espresso::MPSGraphEngine::Kernels::cast_kernel::is_valid_for_engine(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 284) | 2) == 7) {
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 280);
  BOOL v3 = v2 > 0xE;
  unsigned int v4 = (0x400Bu >> v2) & 1;
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

void Espresso::MPSGraphEngine::Kernels::cast_kernel::~cast_kernel(Espresso::MPSGraphEngine::Kernels::cast_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::pass_multi_head_prune_undeclared::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389418;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36A058;
  if (!(***(unsigned int (****)(void))(*((void *)a1 + 2) + 8))()
    || (***(unsigned int (****)(void))(*((void *)a1 + 2) + 8))(*(void *)(*((void *)a1 + 2) + 8)) == 40000)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = v5 + 1;
    *(void *)(a2 + 16) = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v5);
    goto LABEL_104;
  }
  uint64_t v64 = v5;
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)__p);
  uint64_t v62 = v5 + 1;
  uint64_t v63 = a2;
  float v70 = 0;
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  unint64_t v69 = 0;
  uint64_t v6 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v6)
  {
    unint64_t v66 = 0;
    unint64_t v67 = 0;
    uint64_t v7 = 0;
    long long v8 = 0;
    unint64_t v9 = 0;
    std::__fs::filesystem::path v10 = (char *)a1 + 56;
    while (1)
    {
      uint64_t v11 = *(void *)(v6 + 16 * v9);
      std::string::size_type v12 = *(const void **)(v11 + 64);
      if (!v12
      {
        unint64_t v24 = (unint64_t *)v8;
        goto LABEL_34;
      }
      int v13 = *(std::__shared_weak_count **)(v11 + 72);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)vImage_Buffer buf = &v69;
      int v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v10, &v69, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      if (v14[3] == v14[4])
      {
        unint64_t v24 = (unint64_t *)v8;
        if (!v13) {
          goto LABEL_34;
        }
LABEL_33:
        nitro::nitro_function::nitro_function(v13);
        goto LABEL_34;
      }
      *(void *)vImage_Buffer buf = &v69;
      *(void *)vImage_Buffer buf = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v10, &v69, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[3];
      uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, *(uint64_t *)buf, (uint64_t)&std::piecewise_construct, (long long **)buf)[5];
      uint64_t v16 = *(void *)(*((void *)a1 + 4) + 16 * v15);
      BOOL v17 = *(const void **)(v16 + 64);
      if (!v17)
      {
        unint64_t v24 = (unint64_t *)v8;
        goto LABEL_32;
      }
      if (!v18)
      {
        unint64_t v24 = (unint64_t *)v8;
        goto LABEL_32;
      }
      int v19 = v18;
      unsigned int v20 = *(std::__shared_weak_count **)(v16 + 72);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v68 = v20;
      uint64_t v21 = (*(uint64_t (**)(void *))(*v18 + 320))(v18);
      int v23 = *(char *)(v21 + 23);
      if (v23 < 0)
      {
        if (*(void *)(v21 + 8) != 12) {
          goto LABEL_29;
        }
        uint64_t v21 = *(void *)v21;
      }
      else if (v23 != 12)
      {
        goto LABEL_29;
      }
      if (*(void *)v21 == 0x756F5F646E756F62 && *(_DWORD *)(v21 + 8) == 1953853556)
      {
        double v65 = v10;
        std::string::size_type v28 = (uint64_t *)v19[54];
        uint64_t v27 = (uint64_t *)v19[55];
        if (v28 == v27) {
          goto LABEL_49;
        }
        char v29 = 0;
        do
        {
          uint64_t v30 = (Espresso *)*((void *)a1 + 155);
          if (v30)
          {
            uint64_t v30 = (Espresso *)(*(uint64_t (**)(Espresso *, void, uint64_t *))(*(void *)v30 + 152))(v30, *((unsigned int *)a1 + 312), v28);
            char v31 = (char)v30;
          }
          else
          {
            char v31 = 1;
          }
          uint64_t v32 = Espresso::espresso_os_log_subsystem(v30, v22);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            int v33 = v28;
            if (*((char *)v28 + 23) < 0) {
              int v33 = (uint64_t *)*v28;
            }
            *(_DWORD *)vImage_Buffer buf = 136315394;
            *(void *)&uint8_t buf[4] = v33;
            __int16 v75 = 1024;
            int v76 = v29 & 1;
            _os_log_debug_impl(&dword_1920CB000, v32, OS_LOG_TYPE_DEBUG, "pass_multi_head_prune_undeclared output=%s declared=%d", buf, 0x12u);
          }

          v29 |= v31;
          v28 += 3;
        }
        while (v28 != v27);
        if ((v29 & 1) == 0)
        {
LABEL_49:
          if ((unint64_t)v8 >= v66)
          {
            uint64_t v34 = ((char *)v8 - (char *)v7) >> 3;
            unint64_t v35 = v34 + 1;
            std::__fs::filesystem::path v10 = v65;
            if ((unint64_t)(v34 + 1) >> 61) {
LABEL_108:
            }
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v66 - (void)v7) >> 2 > v35) {
              unint64_t v35 = (uint64_t)(v66 - (void)v7) >> 2;
            }
            if (v66 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v35;
            }
            if (v36) {
              unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36);
            }
            else {
              uint64_t v37 = 0;
            }
            int v38 = (uint64_t *)(v36 + 8 * v34);
            uint64_t *v38 = v15;
            unint64_t v24 = (unint64_t *)(v38 + 1);
            while (v8 != (uint64_t *)v7)
            {
              uint64_t v39 = *--v8;
              *--int v38 = v39;
            }
            unint64_t v26 = v36 + 8 * v37;
            float v70 = (unint64_t *)v38;
            uint64_t v71 = v24;
            unint64_t v72 = v26;
            if (v7) {
              operator delete(v7);
            }
            uint64_t v7 = (unint64_t *)v38;
            unint64_t v66 = v26;
          }
          else
          {
            uint64_t *v8 = v15;
            unint64_t v24 = (unint64_t *)(v8 + 1);
            std::__fs::filesystem::path v10 = v65;
            unint64_t v26 = v67;
          }
          uint64_t v71 = v24;
          unint64_t v40 = v69;
          BOOL v41 = v69 >= (uint64_t)(*((void *)a1 + 5) - *((void *)a1 + 4)) >> 4;
          while (1)
          {
            unsigned int v20 = v68;
            if (v41) {
              break;
            }
            if ((unint64_t)v24 >= v26)
            {
              uint64_t v42 = v24 - v7;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61) {
                goto LABEL_108;
              }
              if ((uint64_t)(v26 - (void)v7) >> 2 > v43) {
                unint64_t v43 = (uint64_t)(v26 - (void)v7) >> 2;
              }
              if (v26 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v44 = v43;
              }
              if (v44)
              {
                unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v44);
                unint64_t v40 = v69;
              }
              else
              {
                uint64_t v45 = 0;
              }
              unint64_t v46 = (unint64_t *)(v44 + 8 * v42);
              *unint64_t v46 = v40;
              float v47 = v46 + 1;
              while (v24 != v7)
              {
                unint64_t v48 = *--v24;
                *--unint64_t v46 = v48;
              }
              unint64_t v26 = v44 + 8 * v45;
              float v70 = v46;
              uint64_t v71 = v47;
              unint64_t v72 = v26;
              if (v7) {
                operator delete(v7);
              }
              uint64_t v7 = v46;
              unint64_t v24 = v47;
            }
            else
            {
              *v24++ = v40;
            }
            uint64_t v71 = v24;
            unint64_t v49 = v69;
            uint64_t v50 = *((void *)a1 + 4);
            uint64_t v51 = *(void *)(v50 + 16 * v69);
            BOOL v52 = *(const void **)(v51 + 64);
            if (v52
            {
              int v53 = *(std::__shared_weak_count **)(v51 + 72);
              if (v53)
              {
                atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
                nitro::nitro_function::nitro_function(v53);
              }
              unint64_t v66 = v26;
              std::__fs::filesystem::path v10 = v65;
              unsigned int v20 = v68;
              goto LABEL_30;
            }
            unint64_t v40 = v49 + 1;
            unint64_t v69 = v49 + 1;
            BOOL v41 = v49 + 1 >= (*((void *)a1 + 5) - v50) >> 4;
            unint64_t v66 = v26;
            std::__fs::filesystem::path v10 = v65;
          }
        }
        else
        {
          unint64_t v24 = (unint64_t *)v8;
          std::__fs::filesystem::path v10 = v65;
          unint64_t v26 = v67;
          unsigned int v20 = v68;
        }
        goto LABEL_30;
      }
LABEL_29:
      unint64_t v24 = (unint64_t *)v8;
      unint64_t v26 = v67;
LABEL_30:
      unint64_t v67 = v26;
      if (v20) {
        nitro::nitro_function::nitro_function(v20);
      }
LABEL_32:
      if (v13) {
        goto LABEL_33;
      }
LABEL_34:
      unint64_t v9 = v69 + 1;
      unint64_t v69 = v9;
      uint64_t v6 = *((void *)a1 + 4);
      long long v8 = (uint64_t *)v24;
      if (v9 >= (*((void *)a1 + 5) - v6) >> 4) {
        goto LABEL_92;
      }
    }
  }
  unint64_t v24 = 0;
LABEL_92:
  uint64_t v5 = v64;
  if ((***(unsigned int (****)(void))(*((void *)a1 + 2) + 8))(*(void *)(*((void *)a1 + 2) + 8)) == 10007
    || (***(unsigned int (****)(void))(*((void *)a1 + 2) + 8))(*(void *)(*((void *)a1 + 2) + 8)) == 10006)
  {
    int v54 = v70;
    if (v24 != v70)
    {
      uint64_t v55 = *((void *)a1 + 4);
      uint64_t v56 = v24 - v70 - 1;
      do
        *(unsigned char *)(*(void *)(v55 + 16 * v54[v56--]) + 152) = 1;
      while (v56 != -1);
      unint64_t v24 = v54;
    }
  }
  else
  {
    int v57 = (***(uint64_t (****)(void))(*((void *)a1 + 2) + 8))(*(void *)(*((void *)a1 + 2) + 8));
    unint64_t v58 = v70;
    if (v57 != 10008)
    {
      for (uint64_t i = v24 - v70; i; uint64_t i = v61)
      {
        uint64_t v61 = i - 1;
        Espresso::net::remove_layer(a1, v58[i - 1]);
      }
    }
    unint64_t v24 = v58;
  }
  atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  *(unsigned char *)uint64_t v63 = 1;
  *(void *)(v63 + 8) = v62;
  *(void *)(v63 + 16) = v64;
  atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  nitro::nitro_function::nitro_function(v64);
  if (v24)
  {
    uint64_t v71 = v24;
    operator delete(v24);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__p[2]);
  uint64_t v59 = __p[0];
  __p[0] = 0;
  if (v59) {
    operator delete(v59);
  }
LABEL_104:
  nitro::nitro_function::nitro_function(v5);
}

void sub_1927BB3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a23);
  nitro::nitro_function::nitro_function(a14);
  _Unwind_Resume(a1);
}

void Espresso::analysis_multi_head_prune_undeclared::serialize(void *a1@<X8>)
{
  BOOL v3 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a1, (uint64_t)v3, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1927BB4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::analysis_multi_head_prune_undeclared::deserialize()
{
  return 1;
}

void Espresso::analysis_multi_head_prune_undeclared::~analysis_multi_head_prune_undeclared(Espresso::analysis_multi_head_prune_undeclared *this)
{
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_multi_head_prune_undeclared>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::analysis_multi_head_prune_undeclared>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389418;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_multi_head_prune_undeclared>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_multi_head_prune_undeclared::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_multi_head_prune_undeclared::~pass_multi_head_prune_undeclared(Espresso::pass_multi_head_prune_undeclared *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void ___Z23get_pyespresso_contextsv_block_invoke()
{
}

uint64_t **std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        char v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      char v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    unint64_t *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    std::__fs::filesystem::path v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t espresso_wrap_blob(void *a1)
{
  if (*a1) {
    operator new();
  }
  return 0;
}

void sub_1927BBC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__set_option(const char *a1, uint64_t a2)
{
  if (get_pyespresso_contexts(void)::onceToken != -1) {
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_4260);
  }
  uint64_t v4 = get_pyespresso_contexts(void)::pyespresso_contexts_ptr + 8;
  char v5 = *(void **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr;
  if (*(void *)get_pyespresso_contexts(void)::pyespresso_contexts_ptr != get_pyespresso_contexts(void)::pyespresso_contexts_ptr
                                                                          + 8)
  {
    do
    {
      Espresso::get_internal_context((uint64_t **)v5[5], &v10);
      uint64_t v6 = v10;
      Espresso::abstract_context::set_generic_option(v10, a1, a2);
      (*(void (**)(Espresso::abstract_context *, const char *, uint64_t))(*(void *)v6 + 144))(v6, a1, a2);
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          char v5 = v8;
        }
        while (!v9);
      }
      char v5 = v8;
    }
    while (v8 != (void *)v4);
  }
}

void sub_1927BBD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__setup_training()
{
  if (get_pyespresso_contexts(void)::onceToken != -1) {
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_4260);
  }
  uint64_t v0 = get_pyespresso_contexts(void)::pyespresso_contexts_ptr + 8;
  uint64_t v1 = *(void **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr;
  if (*(void *)get_pyespresso_contexts(void)::pyespresso_contexts_ptr != get_pyespresso_contexts(void)::pyespresso_contexts_ptr
                                                                          + 8)
  {
    do
    {
      Espresso::get_internal_context((uint64_t **)v1[5], &v5);
      (*(void (**)(uint64_t))(*(void *)v5 + 96))(v5);
      if (v6) {
        nitro::nitro_function::nitro_function(v6);
      }
      unsigned int v2 = (void *)v1[1];
      if (v2)
      {
        do
        {
          BOOL v3 = v2;
          unsigned int v2 = (void *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          BOOL v3 = (void *)v1[2];
          BOOL v4 = *v3 == (void)v1;
          uint64_t v1 = v3;
        }
        while (!v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != (void *)v0);
  }
}

void sub_1927BBE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *EspressoWrap__Net__get_bottom_names(uint64_t a1, int a2)
{
  memset(&v18, 0, sizeof(v18));
  uint64_t v2 = *(void *)(a1 + 144) + 56;
  __p[0] = (void *)a2;
  BOOL v3 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v2, a2, __p);
  BOOL v4 = (const void **)v3[3];
  uint64_t v5 = (const void **)v3[4];
  if (v4 == v5) {
    goto LABEL_23;
  }
  do
  {
    if (*((char *)v4 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)v4 + 23);
    }
    else {
      size_t v6 = (size_t)v4[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
    if ((v17 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (v6)
    {
      if (*((char *)v4 + 23) >= 0) {
        int v8 = v4;
      }
      else {
        int v8 = *v4;
      }
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)v7 + v6) = 59;
    if ((v17 & 0x80u) == 0) {
      BOOL v9 = __p;
    }
    else {
      BOOL v9 = (void **)__p[0];
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v10 = v17;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    std::string::append(&v18, (const std::string::value_type *)v9, v10);
    if ((char)v17 < 0) {
      operator delete(__p[0]);
    }
    v4 += 3;
  }
  while (v4 != v5);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
LABEL_23:
  }
    std::string v15 = v18;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v12 = (void *)v15.__r_.__value_.__r.__words[0];
    if (SLODWORD(v15.__r_.__value_.__r.__words[1]) >= 0x1FFF) {
      size_t v13 = 0x1FFFLL;
    }
    else {
      size_t v13 = SLODWORD(v15.__r_.__value_.__r.__words[1]);
    }
    memcpy(return_str(std::string)::buff, v15.__r_.__value_.__l.__data_, v13);
    return_str(std::string)::buff[v13] = 0;
    operator delete(v12);
  }
  else
  {
    uint64_t v11 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    memcpy(return_str(std::string)::buff, &v15, HIBYTE(v15.__r_.__value_.__r.__words[2]));
    return_str(std::string)::buff[v11] = 0;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return return_str(std::string)::buff;
}

void sub_1927BBFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *EspressoWrap__Net__get_top_names(uint64_t a1, int a2)
{
  memset(&v18, 0, sizeof(v18));
  uint64_t v2 = *(void *)(a1 + 144) + 96;
  __p[0] = (void *)a2;
  BOOL v3 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v2, a2, __p);
  BOOL v4 = (const void **)v3[3];
  uint64_t v5 = (const void **)v3[4];
  if (v4 == v5) {
    goto LABEL_23;
  }
  do
  {
    if (*((char *)v4 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)v4 + 23);
    }
    else {
      size_t v6 = (size_t)v4[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
    if ((v17 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (v6)
    {
      if (*((char *)v4 + 23) >= 0) {
        int v8 = v4;
      }
      else {
        int v8 = *v4;
      }
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)v7 + v6) = 59;
    if ((v17 & 0x80u) == 0) {
      BOOL v9 = __p;
    }
    else {
      BOOL v9 = (void **)__p[0];
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v10 = v17;
    }
    else {
      std::string::size_type v10 = (std::string::size_type)__p[1];
    }
    std::string::append(&v18, (const std::string::value_type *)v9, v10);
    if ((char)v17 < 0) {
      operator delete(__p[0]);
    }
    v4 += 3;
  }
  while (v4 != v5);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v15, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
LABEL_23:
  }
    std::string v15 = v18;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v12 = (void *)v15.__r_.__value_.__r.__words[0];
    if (SLODWORD(v15.__r_.__value_.__r.__words[1]) >= 0x1FFF) {
      size_t v13 = 0x1FFFLL;
    }
    else {
      size_t v13 = SLODWORD(v15.__r_.__value_.__r.__words[1]);
    }
    memcpy(return_str(std::string)::buff, v15.__r_.__value_.__l.__data_, v13);
    return_str(std::string)::buff[v13] = 0;
    operator delete(v12);
  }
  else
  {
    uint64_t v11 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    memcpy(return_str(std::string)::buff, &v15, HIBYTE(v15.__r_.__value_.__r.__words[2]));
    return_str(std::string)::buff[v11] = 0;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  return return_str(std::string)::buff;
}

void sub_1927BC1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__default_layer_parameters()
{
  if (EspressoWrap__default_layer_parameters::onceToken != -1) {
    dispatch_once(&EspressoWrap__default_layer_parameters::onceToken, &__block_literal_global_28_4263);
  }
  return EspressoWrap__default_layer_parameters::default_layer_parameters_str;
}

void sub_1927BC2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__get_blob_names(uint64_t a1)
{
  uint64_t result = a1 + 24;
  if (*(char *)(a1 + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t EspressoWrap__Net__get_variable_names(uint64_t a1)
{
  uint64_t result = a1 + 48;
  if (*(char *)(a1 + 71) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t EspressoWrap__Net__get_grad_blob_names(uint64_t a1)
{
  uint64_t result = a1 + 72;
  if (*(char *)(a1 + 95) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t EspressoWrap__MemoryMap__pointer(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    uint64_t v2 = v1 + 32;
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16) + 24;
  }
  return *(void *)v2;
}

uint64_t EspressoWrap__MemoryMap__raw_pointer(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16);
}

uint64_t EspressoWrap__MemoryMap__dims(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v2 + 8);
    uint64_t v3 = a1 + 96;
    *(void *)&long long v4 = 0x100000001;
    *((void *)&v4 + 1) = 0x100000001;
    *(_OWORD *)(a1 + 100) = v4;
  }
  else
  {
    if (*(void *)a1)
    {
      Espresso::abstract_blob_container::shape(v11, *(void *)a1);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)__src, (const Espresso::layer_shape *)v11, 0);
      int v5 = v13;
      if (v12 == 1) {
        int v6 = 4;
      }
      else {
        int v6 = 5;
      }
      if (v13 == -1) {
        int v5 = v6;
      }
      *(_DWORD *)(a1 + 96) = v5;
      if (v5 >= 1) {
        memcpy((void *)(a1 + 100), __src, 4 * v5);
      }
      if (__p)
      {
        std::string v15 = __p;
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v7 = *(_DWORD **)(a1 + 16);
      if (v7)
      {
        *(_DWORD *)(a1 + 96) = 4;
        *(_DWORD *)(a1 + 100) = v7[5];
        *(_DWORD *)(a1 + 104) = v7[4];
        *(_DWORD *)(a1 + 108) = v7[3];
        *(_DWORD *)(a1 + 112) = v7[2];
        *(_DWORD *)(a1 + 116) = 1;
      }
      else
      {
        int v8 = *(_DWORD **)(a1 + 32);
        if (v8)
        {
          *(_DWORD *)(a1 + 96) = 5;
          *(_DWORD *)(a1 + 100) = v8[6];
          *(_DWORD *)(a1 + 104) = v8[5];
          *(_DWORD *)(a1 + 108) = v8[4];
          *(_DWORD *)(a1 + 112) = v8[3];
          *(_DWORD *)(a1 + 116) = v8[2];
        }
      }
    }
    return a1 + 96;
  }
  return v3;
}

void sub_1927BC48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double EspressoWrap__Net__get_gflop(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(Espresso::net **)(a1 + 144);
  if ((int)a3 <= 0) {
    a3 = (*((void *)v3 + 5) - *((void *)v3 + 4)) >> 4;
  }
  return Espresso::net::get_estimated_compute_resources(v3, a2, (int)a3);
}

void EspressoWrap__build_net_from_json(char *a1, int a2, unsigned int a3)
{
  if (get_pyespresso_contexts(void)::onceToken != -1) {
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_4260);
  }
  LODWORD(v31[0]) = a2;
  if (std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr, a2, v31)[5])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, a1);
    std::istringstream::basic_istringstream[abi:ne180100](v31, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, "");
    if (get_pyespresso_contexts(void)::onceToken != -1) {
      dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_4260);
    }
    int v26 = a2;
    int v6 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr, a2, &v26);
    Espresso::get_internal_context((uint64_t **)v6[5], &v27);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    v25[0] = 0;
    v25[1] = 0;
    unint64_t v24 = v25;
    std::string::basic_string[abi:ne180100]<0>(v21, "json");
    Espresso::load_network_layers((uint64_t)v31, &v29, &v27, (uint64_t)&__p, a3, v21, &v30);
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v24, v25[0]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = v30;
    *(unsigned char *)(v30 + 500) = 0;
    int v8 = *(uint64_t **)(v7 + 32);
    for (uint64_t i = *(uint64_t **)(v7 + 40); v8 != i; v8 += 2)
    {
      uint64_t v11 = *v8;
      std::string::size_type v10 = (std::__shared_weak_count *)v8[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v12 = *(const void **)(v11 + 64);
      if (v12)
      {
        if (!v13) {
          goto LABEL_33;
        }
        int v14 = v13;
        (*(void (**)(std::string *__return_ptr))(*(void *)v13 + 472))(&__p);
        long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(void *, long long *))(*(void *)v14 + 400))(v14, &v20);
        if (*((void *)&v20 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v20 + 1));
        }
        if (*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v14 + 384))(v14) + 32))
        {
          (*(void (**)(std::string *__return_ptr, void *))(*(void *)v14 + 488))(&v29, v14);
          long long v19 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
          if (v29.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void *, long long *))(*(void *)v14 + 392))(v14, &v19);
          if (*((void *)&v19 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v19 + 1));
          }
          if (v29.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v29.__r_.__value_.__l.__size_);
          }
        }
        if (__p.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        int v12 = *(const void **)(v11 + 64);
        if (v12)
        {
LABEL_33:
          if (v15)
          {
            uint64_t v16 = v15;
            (*(void (**)(std::string *__return_ptr))(*(void *)v15 + 424))(&__p);
            long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            if (__p.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, long long *))(*(void *)v16 + 400))(v16, &v18);
            if (*((void *)&v18 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v18 + 1));
            }
            if (*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v16 + 384))(v16) + 8))
            {
              (*(void (**)(std::string *__return_ptr, void *))(*(void *)v16 + 432))(&v29, v16);
              long long v17 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
              if (v29.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v29.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(void *, long long *))(*(void *)v16 + 392))(v16, &v17);
              if (*((void *)&v17 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v17 + 1));
              }
              if (v29.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v29.__r_.__value_.__l.__size_);
              }
            }
            if (__p.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
          }
        }
      }
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
    }
    operator new();
  }
  Espresso::throw_exception_selector<Espresso::invalid_context_error>("Possibly no valid devices found");
}

void sub_1927BCB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  Espresso::network_shape::~network_shape((char **)&a23);
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  std::istringstream::~istringstream((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_context_error>(const char *a1)
{
}

void EspressoWrap__Net::set_cpp_net(void *a1, void *a2)
{
  if (get_pyespresso_contexts(void)::onceToken != -1) {
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_4260);
  }
  long long v4 = (uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr;
  int v5 = *(uint64_t (****)(void))(*(void *)(*a2 + 16) + 8);
  int v14 = (**v5)(v5);
  int v6 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(v4, v14, &v14)[5];
  espresso_plan_destroy(a1[20]);
  plauint64_t n = (void *)espresso_create_plan(v6, 0);
  a1[20] = plan;
  int v8 = (std::__shared_weak_count *)a2[1];
  *(void *)&long long v13 = *a2;
  *((void *)&v13 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[21] = espresso_plan_add_cpp_net(plan, &v13);
  a1[22] = v9;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  int v12 = (std::__shared_weak_count *)a1[19];
  a1[18] = v11;
  a1[19] = v10;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_1927BCDD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Net__touch(uint64_t a1)
{
  void v36[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v3 = *(uint64_t **)(v2 + 32);
  long long v4 = *(uint64_t **)(v2 + 40);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v6 = *v3;
      int v5 = (std::__shared_weak_count *)v3[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, v32, (void *)(v6 + 16));
      int v8 = *v7;
      if (!*v7) {
        break;
      }
      if (v5) {
        goto LABEL_6;
      }
LABEL_7:
      uint64_t v9 = (std::__shared_weak_count *)v8[8];
      v8[7] = v6;
      v8[8] = (uint64_t)v5;
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      if (v5) {
        nitro::nitro_function::nitro_function(v5);
      }
      v3 += 2;
      if (v3 == v4) {
        goto LABEL_18;
      }
    }
    uint64_t v10 = v7;
    int v8 = (uint64_t *)operator new(0x48uLL);
    int v33 = (char **)v8;
    uint64_t v34 = (char *)(a1 + 8);
    LOBYTE(v35) = 0;
    uint64_t v11 = (std::string *)(v8 + 4);
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v6 + 16), *(void *)(v6 + 24));
    }
    else
    {
      long long v12 = *(_OWORD *)(v6 + 16);
      v8[6] = *(void *)(v6 + 32);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    }
    v8[7] = 0;
    v8[8] = 0;
    LOBYTE(v35) = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v32[0], v10, v8);
    int v33 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v33);
    if (!v5) {
      goto LABEL_7;
    }
LABEL_6:
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
LABEL_18:
  MEMORY[0x192FF0F50](a1 + 24, "");
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v33 = &v34;
  v31.__r_.__value_.__r.__words[0] = 0;
  long long v13 = *(void **)(a1 + 144);
  if (v13[5] != v13[4])
  {
    do
    {
      v32[0] = (long long *)&v31;
      int v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v13 + 7), (unint64_t *)&v31, (uint64_t)&std::piecewise_construct, (uint64_t **)v32);
      uint64_t v15 = v14[3];
      uint64_t v16 = v14[4];
      while (v15 != v16)
      {
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v34, (void *)v15))
        {
          int v17 = *(char *)(v15 + 23);
          if (v17 >= 0) {
            long long v18 = (const std::string::value_type *)v15;
          }
          else {
            long long v18 = *(const std::string::value_type **)v15;
          }
          if (v17 >= 0) {
            std::string::size_type v19 = *(unsigned __int8 *)(v15 + 23);
          }
          else {
            std::string::size_type v19 = *(void *)(v15 + 8);
          }
          std::string::append((std::string *)(a1 + 24), v18, v19);
          v32[0] = (long long *)v15;
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v33, (void *)v15, v32)+ 14) = 1;
          std::string::append((std::string *)(a1 + 24), ";");
        }
        v15 += 24;
      }
      ++v31.__r_.__value_.__r.__words[0];
      long long v13 = *(void **)(a1 + 144);
      uint64_t v21 = v13[4];
      uint64_t v20 = v13[5];
    }
    while (v31.__r_.__value_.__r.__words[0] < (v20 - v21) >> 4);
    v31.__r_.__value_.__r.__words[0] = 0;
    if (v20 != v21)
    {
      do
      {
        v32[0] = (long long *)&v31;
        char v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v13 + 12), (unint64_t *)&v31, (uint64_t)&std::piecewise_construct, (uint64_t **)v32);
        uint64_t v23 = v22[3];
        uint64_t v24 = v22[4];
        while (v23 != v24)
        {
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v34, (void *)v23))
          {
            int v25 = *(char *)(v23 + 23);
            if (v25 >= 0) {
              int v26 = (const std::string::value_type *)v23;
            }
            else {
              int v26 = *(const std::string::value_type **)v23;
            }
            if (v25 >= 0) {
              std::string::size_type v27 = *(unsigned __int8 *)(v23 + 23);
            }
            else {
              std::string::size_type v27 = *(void *)(v23 + 8);
            }
            std::string::append((std::string *)(a1 + 24), v26, v27);
            v32[0] = (long long *)v23;
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v33, (void *)v23, v32)+ 14) = 1;
            std::string::append((std::string *)(a1 + 24), ";");
          }
          v23 += 24;
        }
        ++v31.__r_.__value_.__r.__words[0];
        long long v13 = *(void **)(a1 + 144);
      }
      while (v31.__r_.__value_.__r.__words[0] < (uint64_t)(v13[5] - v13[4]) >> 4);
    }
  }
  memset(v32, 0, sizeof(v32));
  v36[0] = &unk_1EE379990;
  v36[1] = v32;
  void v36[3] = v36;
  Espresso::net::apply_to_all_globals(v13, v36);
  std::__function::__value_func<void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__value_func[abi:ne180100](v36);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  Espresso::string_join(&v31, v32, (uint64_t)__p);
  std::string::size_type v28 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v28);
  }
  *(_OWORD *)std::string::size_type v28 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
  *(void *)(a1 + 112) = *((void *)&v31.__r_.__value_.__l + 2);
  *((unsigned char *)&v31.__r_.__value_.__s + 23) = 0;
  v31.__r_.__value_.__s.__data_[0] = 0;
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  std::__tree<std::string>::destroy((uint64_t)&v33, v34);
}

void sub_1927BD1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,char *a23,uint64_t a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__tree<std::string>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void *std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target_type()
{
}

uint64_t std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZL24EspressoWrap__Net__touchP17EspressoWrap__NetE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

std::string *std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::operator()(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(std::string **)(v2 + 8);
  if ((unint64_t)v3 >= *(void *)(v2 + 16))
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v2, (uint64_t)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v2, a2);
    uint64_t result = v3 + 1;
  }
  *(void *)(v2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379990;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE379990;
  result[1] = v3;
  return result;
}

void std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__func()
{
}

void EspressoWrap__Net__reshape_from_data_sizes(uint64_t a1, char *__s)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  v85[0] = 0;
  v85[1] = 0;
  uint64_t v84 = v85;
  uint64_t v2 = (void *)MEMORY[0x1E4F28D90];
  uint64_t v3 = [MEMORY[0x1E4F1C9B8] dataWithBytes:__s length:strlen(__s)];
  id v83 = 0;
  long long v4 = [v2 JSONObjectWithData:v3 options:0 error:&v83];
  id v53 = v83;

  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  id obj = v4;
  uint64_t v5 = [obj countByEnumeratingWithState:&v79 objects:v88 count:16];
  if (v5)
  {
    uint64_t v56 = *(void *)v80;
    do
    {
      uint64_t v59 = 0;
      uint64_t v60 = v5;
      do
      {
        if (*(void *)v80 != v56) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v79 + 1) + 8 * v59);
        long long v78 = 0uLL;
        id v58 = v6;
        uint64_t v7 = [obj objectForKey:v53];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          long long v87 = v7;
          uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v87 count:1];

          uint64_t v7 = (void *)v8;
        }
        int v9 = [v7 count];
        if ([v7 count] == 4)
        {
          uint64_t v10 = [v7 objectAtIndex:3];
          int v11 = [v10 intValue];

          long long v12 = [v7 objectAtIndex:2];
          int v13 = [v12 intValue];

          int v14 = [v7 objectAtIndex:1];
          int v15 = [v14 intValue];

          uint64_t v16 = [v7 objectAtIndex:0];
          int v17 = [v16 intValue];

          long long v18 = 0;
          uint64_t v19 = 0;
          int v20 = 1;
        }
        else if ([v7 count] == 5)
        {
          uint64_t v21 = [v7 objectAtIndex:4];
          int v11 = [v21 intValue];

          char v22 = [v7 objectAtIndex:3];
          int v13 = [v22 intValue];

          uint64_t v23 = [v7 objectAtIndex:2];
          int v15 = [v23 intValue];

          uint64_t v24 = [v7 objectAtIndex:1];
          int v17 = [v24 intValue];

          int v25 = [v7 objectAtIndex:0];
          int v20 = [v25 intValue];

          long long v18 = 0;
          uint64_t v19 = 0;
        }
        else
        {
          if ((unint64_t)[v7 count] > 5)
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Invalid shape length cannot be > 5!");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          [v7 count];
          p_p = 0;
          int v76 = 0;
          unint64_t v77 = 0;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          id v26 = v7;
          std::string::size_type v27 = (void **)[v26 countByEnumeratingWithState:&v71 objects:v86 count:16];
          if (v27)
          {
            uint64_t v55 = v7;
            std::string::size_type v28 = 0;
            unint64_t v29 = 0;
            char v30 = 0;
            uint64_t v31 = *(void *)v72;
            do
            {
              for (uint64_t i = 0; i != v27; uint64_t i = (void **)((char *)i + 1))
              {
                if (*(void *)v72 != v31) {
                  objc_enumerationMutation(v26);
                }
                int v33 = [*(id *)(*((void *)&v71 + 1) + 8 * i) intValue];
                int v34 = v33;
                if ((unint64_t)v30 >= v29)
                {
                  uint64_t v35 = (v30 - v28) >> 2;
                  unint64_t v36 = v35 + 1;
                  if ((unint64_t)(v35 + 1) >> 62) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v29 - (void)v28) >> 1 > v36) {
                    unint64_t v36 = (uint64_t)(v29 - (void)v28) >> 1;
                  }
                  if (v29 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v37 = v36;
                  }
                  if (v37) {
                    unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v37);
                  }
                  else {
                    uint64_t v38 = 0;
                  }
                  uint64_t v39 = (_OWORD *)(v37 + 4 * v35);
                  *(_DWORD *)uint64_t v39 = v34;
                  unint64_t v40 = (char *)v39 + 4;
                  while (v30 != v28)
                  {
                    int v41 = *((_DWORD *)v30 - 1);
                    v30 -= 4;
                    *((_DWORD *)v39 - 1) = v41;
                    uint64_t v39 = (_OWORD *)((char *)v39 - 4);
                  }
                  unint64_t v29 = v37 + 4 * v38;
                  p_p = (void **)v39;
                  int v76 = v40;
                  unint64_t v77 = v29;
                  if (v28) {
                    operator delete(v28);
                  }
                  std::string::size_type v28 = (char *)v39;
                  char v30 = v40;
                  uint64_t v5 = v60;
                }
                else
                {
                  *(_DWORD *)char v30 = v33;
                  v30 += 4;
                }
                int v76 = v30;
              }
              std::string::size_type v27 = (void **)[v26 countByEnumeratingWithState:&v71 objects:v86 count:16];
            }
            while (v27);
            std::string::size_type v27 = p_p;
            uint64_t v7 = v55;
          }
          else
          {
            char v30 = 0;
          }

          v62[0] = 0;
          v62[1] = 0;
          uint64_t v63 = 0;
          uint64_t v42 = v30 - (char *)v27;
          if (v30 != (char *)v27)
          {
            uint64_t v43 = v42 >> 2;
            if ((unint64_t)(v42 >> 2) <= 1) {
              uint64_t v43 = 1;
            }
            unint64_t v44 = v62;
            uint64_t v45 = v27;
            do
            {
              int v46 = *(_DWORD *)v45;
              uint64_t v45 = (void **)((char *)v45 + 4);
              *v44++ = v46;
              --v43;
            }
            while (v43);
          }
          HIDWORD(v63) = (unint64_t)v42 >> 2;
          Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v62, 0, (uint64_t)&__p);
          int v11 = (int)__p;
          int v13 = HIDWORD(__p);
          int v15 = (int)v65;
          int v17 = HIDWORD(v65);
          int v20 = v66;
          int v9 = v67;
          long long v78 = v68;
          float v47 = v27;
          long long v18 = v69;
          uint64_t v19 = v70;
          if (v47) {
            operator delete(v47);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v58 UTF8String]);
        p_p = &__p;
        unint64_t v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v84, &__p, (_OWORD **)&p_p);
        *((_DWORD *)v48 + 14) = v11;
        *((_DWORD *)v48 + 15) = v13;
        *((_DWORD *)v48 + 16) = v15;
        *((_DWORD *)v48 + 17) = v17;
        *((_DWORD *)v48 + 18) = v20;
        *((_DWORD *)v48 + 19) = v9;
        v48[5] = v78;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v48 + 96, v18, v19, (v19 - (uint64_t)v18) >> 2);
        if (SHIBYTE(v67) < 0) {
          operator delete(__p);
        }

        if (v18) {
          operator delete(v18);
        }
        ++v59;
      }
      while (v59 != v5);
      uint64_t v5 = [obj countByEnumeratingWithState:&v79 objects:v88 count:16];
    }
    while (v5);
  }

  unint64_t v49 = *(std::__shared_weak_count **)(a1 + 152);
  v61[0] = *(void *)(a1 + 144);
  v61[1] = (uint64_t)v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::compute_network_shape_starting_from_data_shapes(v61, (uint64_t)&v84, (uint64_t)&__p);
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  uint64_t v50 = *(Espresso **)(a1 + 144);
  uint64_t v51 = *(std::__shared_weak_count **)(a1 + 152);
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::shape_network_recursive(v50, (Espresso::net *)&__p, 0, 0);
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  rebuild_compiler((void *)(a1 + 144));
  EspressoWrap__Net__touch(a1);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v68, *((char **)&v68 + 1));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, v65);

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v84, v85[0]);
}

void sub_1927BDA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,char *a58)
{
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  Espresso::network_shape::~network_shape((char **)&__p);

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a57, a58);
  _Unwind_Resume(a1);
}

void rebuild_compiler(void *a1)
{
  void (***v13)(uint64_t *__return_ptr, void);
  uint64_t (***v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void v23[5];
  uint64_t v24;
  std::__shared_weak_count *v25;

  uint64_t v1 = *(void *)(*a1 + 16);
  if (!*(unsigned char *)(v1 + 124)) {
    return;
  }
  unsigned int v3 = (***(uint64_t (****)(void))(v1 + 8))(*(void *)(v1 + 8));
  uint64_t v4 = *a1;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(*a1 + 528), v3);
  if (!v5)
  {
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  uint64_t v7 = v5[3];
  uint64_t v6 = (std::__shared_weak_count *)v5[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v7)
  {
    uint64_t v4 = *a1;
LABEL_9:
    uint64_t v9 = *(void *)(v4 + 16);
    uint64_t v10 = (std::__shared_weak_count *)a1[1];
    uint64_t v24 = v4;
    int v25 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 88))(v9, &v24);
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    int v11 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(*a1 + 528), v3);
    if (v11)
    {
      uint64_t v7 = v11[3];
      uint64_t v8 = (std::__shared_weak_count *)v11[4];
      if (v8)
      {
        char v12 = 0;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!v6) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    char v12 = 1;
    if (!v6)
    {
LABEL_20:
      if ((v12 & 1) == 0) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (!v7)
      {
        int v14 = *(uint64_t (****)(void))(*(void *)(*a1 + 16) + 8);
        int v15 = (**v14)(v14);
        Espresso::throw_exception_selector<Espresso::invalid_context_error,Espresso::platform>(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      goto LABEL_23;
    }
LABEL_19:
    nitro::nitro_function::nitro_function(v6);
    goto LABEL_20;
  }
  uint64_t v8 = v6;
LABEL_23:
  if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7) & 1) == 0)
  {
    int v13 = *(void (****)(uint64_t *__return_ptr, void))(*a1 + 16);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    v23[2] = ___ZL16rebuild_compilerRKNSt3__110shared_ptrIN8Espresso3netEEE_block_invoke;
    v23[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v23[4] = a1;
    Espresso::abstract_context::compute_batch_sync(v13, v23);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1927BDDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_context_error,Espresso::platform>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ___ZL16rebuild_compilerRKNSt3__110shared_ptrIN8Espresso3netEEE_block_invoke(uint64_t a1, uint64_t a2)
{
}

uint64_t EspressoWrap__Layer__num_params_blobs(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v3 = *(const void **)(v1 + 64);
  if (!v3) {
    goto LABEL_11;
  }
  {
    uint64_t v4 = 2;
    goto LABEL_12;
  }
  {
    uint64_t v4 = 1;
  }
  else
  {
LABEL_11:
    uint64_t v4 = 0;
  }
LABEL_12:
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  return v4;
}

const void *EspressoWrap__Layer__create_blob_by_index(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(const void **)(v3 + 64);
  if (v5)
  {
    if (v6)
    {
      if (a2 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 488))(&v14);
        operator new();
      }
      if (!a2)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 472))(&v14);
        operator new();
      }
LABEL_20:
      uint64_t v5 = 0;
      goto LABEL_26;
    }
    if (v7)
    {
      if (a2 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 440))(&v14);
        operator new();
      }
      if (!a2)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 456))(&v14);
        operator new();
      }
      goto LABEL_20;
    }
    if (v8)
    {
      if (a2 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 432))(&v14);
        operator new();
      }
      if (!a2)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 424))(&v14);
        operator new();
      }
      goto LABEL_20;
    }
    if (v9)
    {
      if (!a2)
      {
        char v12 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v9 + 384))(v9);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v14, 4 * *v12, 1, 1, 1);
        operator new();
      }
      goto LABEL_20;
    }
    uint64_t v5 = 0;
    if (!a2 && v10)
    {
      int v11 = (int *)(*(uint64_t (**)(void *))(*(void *)v10 + 384))(v10);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v14, *v11, v11[1], v11[2], v11[4] * v11[3]);
      operator new();
    }
  }
LABEL_26:
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  return v5;
}

void sub_1927BE5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Layer__set_blob_by_index(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(const void **)(v6 + 64);
  if (!v7) {
    goto LABEL_40;
  }
  if (!v8) {
    goto LABEL_16;
  }
  uint64_t v9 = v8;
  if (a2 != 1)
  {
    if (a2) {
      goto LABEL_16;
    }
    if (a3)
    {
      (*(void (**)(void ***__return_ptr, void *))(*(void *)v8 + 472))(&v85, v8);
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a3 + 16);
      char v12 = *(const void **)(v11 + 24);
      uint64_t v13 = *(int *)(v11 + 8);
      uint64_t v14 = v11 + 12;
      do
      {
        v13 *= *(int *)(v14 + v10);
        v10 += 4;
      }
      while (v10 != 12);
      memcpy(v85[3], v12, 4 * v13);
      id v83 = v85;
      uint64_t v84 = v86;
      if (v86) {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, void ***))(*(void *)v9 + 400))(v9, &v83);
      int v15 = v84;
      if (v84) {
LABEL_13:
      }
        nitro::nitro_function::nitro_function(v15);
LABEL_14:
      uint64_t v16 = v86;
      if (!v86) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    uint64_t v87 = 0;
    long long v88 = 0;
    (*(void (**)(void *, uint64_t *))(*(void *)v8 + 400))(v8, &v87);
    uint64_t v16 = v88;
    if (!v88) {
      goto LABEL_16;
    }
LABEL_15:
    nitro::nitro_function::nitro_function(v16);
    goto LABEL_16;
  }
  if (a3)
  {
    (*(void (**)(void ***__return_ptr, void *))(*(void *)v8 + 488))(&v85, v8);
    uint64_t v47 = 0;
    uint64_t v48 = *(void *)(a3 + 16);
    unint64_t v49 = *(const void **)(v48 + 24);
    uint64_t v50 = *(int *)(v48 + 8);
    uint64_t v51 = v48 + 12;
    do
    {
      v50 *= *(int *)(v51 + v47);
      v47 += 4;
    }
    while (v47 != 12);
    memcpy(v85[2], v49, 4 * v50);
    long long v79 = v85;
    long long v80 = v86;
    if (v86) {
      atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, void ***))(*(void *)v9 + 392))(v9, &v79);
    int v15 = v80;
    if (v80) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  uint64_t v81 = 0;
  long long v82 = 0;
  (*(void (**)(void *, uint64_t *))(*(void *)v8 + 392))(v8, &v81);
  uint64_t v16 = v82;
  if (v82) {
    goto LABEL_15;
  }
LABEL_16:
  if (!v17) {
    goto LABEL_28;
  }
  long long v18 = v17;
  if (a2 != 1)
  {
    if (a2) {
      goto LABEL_28;
    }
    if (a3)
    {
      (*(void (**)(void ***__return_ptr, void *))(*(void *)v17 + 424))(&v85, v17);
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(a3 + 16);
      uint64_t v21 = *(const void **)(v20 + 24);
      uint64_t v22 = *(int *)(v20 + 8);
      uint64_t v23 = v20 + 12;
      do
      {
        v22 *= *(int *)(v23 + v19);
        v19 += 4;
      }
      while (v19 != 12);
      memcpy(v85[2], v21, 4 * v22);
      id v83 = v85;
      uint64_t v84 = v86;
      if (v86) {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, void ***))(*(void *)v18 + 400))(v18, &v83);
      uint64_t v24 = v84;
      if (v84) {
LABEL_25:
      }
        nitro::nitro_function::nitro_function(v24);
LABEL_26:
      int v25 = v86;
      if (!v86) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    uint64_t v87 = 0;
    long long v88 = 0;
    (*(void (**)(void *, uint64_t *))(*(void *)v17 + 400))(v17, &v87);
    int v25 = v88;
    if (!v88) {
      goto LABEL_28;
    }
LABEL_27:
    nitro::nitro_function::nitro_function(v25);
    goto LABEL_28;
  }
  if (a3)
  {
    (*(void (**)(void ***__return_ptr, void *))(*(void *)v17 + 432))(&v85, v17);
    uint64_t v52 = 0;
    uint64_t v53 = *(void *)(a3 + 16);
    int v54 = *(const void **)(v53 + 24);
    uint64_t v55 = *(int *)(v53 + 8);
    uint64_t v56 = v53 + 12;
    do
    {
      v55 *= *(int *)(v56 + v52);
      v52 += 4;
    }
    while (v52 != 12);
    memcpy(v85[2], v54, 4 * v55);
    long long v79 = v85;
    long long v80 = v86;
    if (v86) {
      atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, void ***))(*(void *)v18 + 392))(v18, &v79);
    uint64_t v24 = v80;
    if (v80) {
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  uint64_t v81 = 0;
  long long v82 = 0;
  (*(void (**)(void *, uint64_t *))(*(void *)v17 + 392))(v17, &v81);
  int v25 = v82;
  if (v82) {
    goto LABEL_27;
  }
LABEL_28:
  if (!v26) {
    goto LABEL_40;
  }
  std::string::size_type v27 = v26;
  if (a2 != 1)
  {
    if (a2) {
      goto LABEL_40;
    }
    if (a3)
    {
      (*(void (**)(void ***__return_ptr, void *))(*(void *)v26 + 456))(&v85, v26);
      uint64_t v28 = 0;
      uint64_t v29 = *(void *)(a3 + 32);
      char v30 = *(const void **)(v29 + 32);
      uint64_t v31 = *(int *)(v29 + 8);
      uint64_t v32 = v29 + 12;
      do
      {
        v31 *= *(int *)(v32 + v28);
        v28 += 4;
      }
      while (v28 != 16);
      memcpy(v85[4], v30, 4 * v31);
      id v83 = v85;
      uint64_t v84 = v86;
      if (v86) {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, void ***))(*(void *)v27 + 400))(v27, &v83);
      int v33 = v84;
      if (v84) {
LABEL_37:
      }
        nitro::nitro_function::nitro_function(v33);
LABEL_38:
      int v34 = v86;
      if (!v86) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    uint64_t v87 = 0;
    long long v88 = 0;
    (*(void (**)(void *, uint64_t *))(*(void *)v26 + 400))(v26, &v87);
    int v34 = v88;
    if (!v88) {
      goto LABEL_40;
    }
LABEL_39:
    nitro::nitro_function::nitro_function(v34);
    goto LABEL_40;
  }
  if (a3)
  {
    (*(void (**)(void ***__return_ptr, void *))(*(void *)v26 + 440))(&v85, v26);
    uint64_t v57 = 0;
    uint64_t v58 = *(void *)(a3 + 16);
    uint64_t v59 = *(const void **)(v58 + 24);
    uint64_t v60 = *(int *)(v58 + 8);
    uint64_t v61 = v58 + 12;
    do
    {
      v60 *= *(int *)(v61 + v57);
      v57 += 4;
    }
    while (v57 != 12);
    memcpy(v85[2], v59, 4 * v60);
    long long v79 = v85;
    long long v80 = v86;
    if (v86) {
      atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, void ***))(*(void *)v27 + 392))(v27, &v79);
    int v33 = v80;
    if (v80) {
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  uint64_t v81 = 0;
  long long v82 = 0;
  (*(void (**)(void *, uint64_t *))(*(void *)v26 + 392))(v26, &v81);
  int v34 = v82;
  if (v82) {
    goto LABEL_39;
  }
LABEL_40:
  uint64_t v35 = *(const void **)(v6 + 64);
  if (!v35) {
    goto LABEL_86;
  }
  if (!a2)
  {
    unint64_t v37 = v36;
    if (v36)
    {
      if (a3)
      {
        uint64_t v38 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v36 + 384))(v36);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v87, 4 * *v38, 1, 1, 1);
        uint64_t v39 = 0;
        uint64_t v40 = v87;
        uint64_t v41 = *(void *)(a3 + 16);
        uint64_t v42 = *(const void **)(v41 + 24);
        uint64_t v43 = *(int *)(v41 + 8);
        uint64_t v44 = v41 + 12;
        do
        {
          v43 *= *(int *)(v44 + v39);
          v39 += 4;
        }
        while (v39 != 12);
        memcpy(*(void **)(v87 + 16), v42, 4 * v43);
        uint64_t v45 = v88;
        uint64_t v77 = v40;
        long long v78 = v88;
        if (v88) {
          atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(void *, uint64_t *))(*(void *)v37 + 392))(v37, &v77);
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        if (!v45) {
          goto LABEL_75;
        }
        int v46 = v45;
        goto LABEL_74;
      }
      uint64_t v75 = 0;
      int v76 = 0;
      (*(void (**)(void *, uint64_t *))(*(void *)v36 + 392))(v36, &v75);
      int v46 = v76;
      if (v76) {
LABEL_74:
      }
        nitro::nitro_function::nitro_function(v46);
    }
  }
LABEL_75:
  uint64_t v62 = *(const void **)(v6 + 64);
  if (v62)
  {
    if (!a2)
    {
      uint64_t v64 = v63;
      if (v63)
      {
        if (a3)
        {
          double v65 = (int *)(*(uint64_t (**)(_DWORD *))(*(void *)v63 + 384))(v63);
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v87, *v65, v65[1], v65[2], v65[4] * v65[3]);
          uint64_t v66 = 0;
          uint64_t v67 = v87;
          uint64_t v68 = *(void *)(a3 + 16);
          unint64_t v69 = *(const void **)(v68 + 24);
          uint64_t v70 = *(int *)(v68 + 8);
          uint64_t v71 = v68 + 12;
          do
          {
            v70 *= *(int *)(v71 + v66);
            v66 += 4;
          }
          while (v66 != 12);
          memcpy(*(void **)(v87 + 24), v69, 4 * v70);
          long long v72 = v88;
          v74[0] = v67;
          v74[1] = v88;
          if (v88) {
            atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::generic_load_constant_kernel::set_constant_blob(v64, (uint64_t)v74);
          if (v72)
          {
            nitro::nitro_function::nitro_function(v72);
            nitro::nitro_function::nitro_function(v72);
          }
        }
        else
        {
          v73[0] = 0;
          v73[1] = 0;
          Espresso::generic_load_constant_kernel::set_constant_blob(v63, (uint64_t)v73);
        }
      }
    }
  }
LABEL_86:
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_1927BF0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Layer__readonly_blob_by_index(uint64_t *a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(const void **)(v3 + 64);
  if (v5)
  {
    if (v6)
    {
      if (a2 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 448))(&v12);
        if (v12) {
          operator new();
        }
      }
      else
      {
        if (a2) {
          goto LABEL_33;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 456))(&v12);
        if (v12) {
          operator new();
        }
      }
    }
    else
    {
      if (v7)
      {
        if (a2 == 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 408))(&v12);
          if (v12) {
            operator new();
          }
        }
        else
        {
          if (a2) {
            goto LABEL_33;
          }
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 416))(&v12);
          if (v12) {
            operator new();
          }
        }
      }
      else
      {
        if (v8)
        {
          if (a2 == 1)
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 408))(&v12);
            if (v12) {
              operator new();
            }
          }
          else
          {
            if (a2) {
              goto LABEL_33;
            }
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 416))(&v12);
            if (v12) {
              operator new();
            }
          }
        }
        else
        {
          if (v9)
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 408))(&v12);
            if (v12) {
              operator new();
            }
          }
          else
          {
            if (!v10) {
              goto LABEL_33;
            }
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v12, v10 + 43);
            if (v12) {
              operator new();
            }
          }
        }
      }
    }
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
LABEL_33:
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  return 0;
}

void sub_1927BF838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::make_shared[abi:ne180100]<Espresso::blob<float,4>,float *&,int (&)[4],void>(void *a1, unint64_t a2, __n128 *a3)
{
  uint64_t v6 = (__n128 *)operator new(0x60uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE3899C8;
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE36BF10;
  v6[4] = 0u;
  void v6[5] = 0u;
  __n128 result = *a3;
  v6[2] = *a3;
  v6[3].n128_u64[0] = a2;
  v6[3].n128_u8[8] = 0;
  *a1 = (char *)v6 + 24;
  a1[1] = v6;
  return result;
}

void **EspressoWrap__Layer__create_blob_by_name(uint64_t *a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(const void **)(v4 + 64);
  if (v5)
  {
    if (!v6) {
      goto LABEL_12;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(&v10, v6, (uint64_t)&__p, *(unsigned int *)(v4 + 12));
    if (v9 < 0) {
      operator delete(__p);
    }
    if (v10)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 56))(&__p, v10);
      operator new();
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return v6;
}

void sub_1927BFAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2 + 35;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[36], (void *)a3))
  {
    goto LABEL_8;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  ((void (*)(void **, std::string *, uint64_t))(*a2)[45])(a2, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t result = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[36], (void *)a3);
  if (result)
  {
LABEL_8:
    uint64_t v12 = (long long *)a3;
    uint64_t result = (uint64_t)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void *)a3, &v12);
    uint64_t v10 = *(void *)(result + 64);
    *a1 = *(void *)(result + 56);
    a1[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_1927BFC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Layer__set_blob_by_name(void *a1, char *a2, uint64_t a3)
{
  void (***v11)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v12;
  uint64_t v13;
  void v15[5];
  std::__shared_weak_count *v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  uint64_t v7 = *a1;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(const void **)(v7 + 64);
  if (!v8
  {
    uint64_t v13 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(&v20, v10, (uint64_t)__p, *(unsigned int *)(v7 + 12));
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (!v20)
  {
    uint64_t v13 = 0;
    uint64_t v12 = v21;
    if (!v21) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v11 = *(void (****)(uint64_t *__return_ptr, void))(*(void *)(*a1 + 64) + 8);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3321888768;
  v15[2] = __EspressoWrap__Layer__set_blob_by_name_block_invoke;
  _OWORD v15[3] = &__block_descriptor_56_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE_e10_v16__0r_v8l;
  uint64_t v12 = v21;
  v15[4] = v20;
  uint64_t v16 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = a3;
  Espresso::abstract_context::compute_batch_sync(v11, v15);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  uint64_t v13 = 1;
  if (v12) {
LABEL_16:
  }
    nitro::nitro_function::nitro_function(v12);
LABEL_17:
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return v13;
}

void sub_1927BFDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t EspressoWrap__Layer__set_blob_by_name_raw(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (***v8)(uint64_t *__return_ptr, void);
  void v10[8];

  uint64_t v4 = *a1;
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v6 = *a1;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a1;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(void (****)(uint64_t *__return_ptr, void))(*(void *)(v6 + 64) + 8);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __EspressoWrap__Layer__set_blob_by_name_raw_block_invoke;
  v10[3] = &__block_descriptor_64_e10_v16__0r_v8l;
  v10[4] = v7;
  v10[5] = a2;
  v10[6] = a3;
  v10[7] = a4;
  Espresso::abstract_context::compute_batch_sync(v8, v10);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return 1;
}

void sub_1927BFF54(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1927BFFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__global_by_name(uint64_t a1, char *a2)
{
  char v9 = a2;
  uint64_t v2 = *(void *)(a1 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::net::get_global(&v7, v2, (unsigned __int8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (!v7) {
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("No global with name %s", &v9);
  }
  uint64_t v3 = espresso_wrap_blob(&v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v3;
}

void sub_1927C009C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__loaded_global_name(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void **)(a1 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v3 = Espresso::net::loaded_global_name(v2, (uint64_t)__p);
  int v4 = *(char *)(v3 + 23);
  uint64_t v5 = *(void *)v3;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v4 >= 0) {
    return v3;
  }
  else {
    return v5;
  }
}

void sub_1927C0134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__get_global_names(uint64_t a1)
{
  uint64_t result = a1 + 96;
  if (*(char *)(a1 + 119) < 0) {
    return *(void *)result;
  }
  return result;
}

void EspressoWrap__Net__add_global(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  int v4 = a2;
  uint64_t v5 = a1;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  if (a4 <= 0)
  {
    uint64_t v19 = 0;
    LODWORD(v20) = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    LODWORD(v39) = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    char v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = a4;
    do
    {
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v12 = (v9 - v7) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v8 - (void)v7) >> 1 > v13) {
          unint64_t v13 = (uint64_t)(v8 - (void)v7) >> 1;
        }
        if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (char *)(v14 + 4 * v12);
        *(_DWORD *)uint64_t v16 = *(_DWORD *)(a3 + 4 * v10);
        int v17 = v16 + 4;
        while (v9 != v7)
        {
          int v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v16 - 1) = v18;
          v16 -= 4;
        }
        unint64_t v8 = v14 + 4 * v15;
        uint64_t v40 = v16;
        unint64_t v42 = v8;
        if (v7) {
          operator delete(v7);
        }
        uint64_t v7 = v16;
        char v9 = v17;
      }
      else
      {
        *(_DWORD *)char v9 = *(_DWORD *)(a3 + 4 * v10);
        v9 += 4;
      }
      uint64_t v41 = v9;
      ++v10;
    }
    while (v10 != v11);
    uint64_t v19 = v40;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    unint64_t v20 = (v9 - v40) >> 2;
    if (v9 == v40)
    {
      uint64_t v19 = v9;
      uint64_t v5 = a1;
      int v4 = a2;
    }
    else
    {
      uint64_t v21 = 0;
      if (v20 <= 1) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = (v9 - v40) >> 2;
      }
      uint64_t v5 = a1;
      int v4 = a2;
      do
      {
        *((_DWORD *)&v37 + v21) = *(_DWORD *)&v19[4 * v21];
        ++v21;
      }
      while (v22 != v21);
    }
  }
  HIDWORD(v39) = v20;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v37, 0, (uint64_t)v34);
  uint64_t v23 = *(void *)(v5 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  Espresso::net::get_global(&v32, v23, (unsigned __int8 *)__p);
  uint64_t v24 = v32;
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  if (v24) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*&>(v4);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(*(void *)(v5 + 144) + 16) + 8) + 24))(&v32);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v32 + 16))(v32, v34, &v28);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  uint64_t v25 = *(void *)(v5 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  Espresso::net::set_global(v25, (long long *)__p, &v32);
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (v35)
  {
    unint64_t v36 = v35;
    operator delete(v35);
  }
  if (v19)
  {
    uint64_t v41 = v19;
    operator delete(v19);
  }
}

void sub_1927C0430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a26) {
    operator delete(a26);
  }
  uint64_t v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(void *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*&>(const char *a1)
{
}

void Espresso::net::set_global(uint64_t a1, long long *a2, uint64_t *a3)
{
  char v6 = *(std::__shared_weak_count **)(a1 + 1096);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 1088);
      if (v8)
      {
        Espresso::net::set_global(v8, a2, a3);
LABEL_11:
        nitro::nitro_function::nitro_function(v7);
        return;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v13 = a2;
  char v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1440, (unsigned __int8 *)a2, &v13);
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 + 6);
  *((void *)v9 + 5) = v11;
  *((void *)v9 + 6) = v10;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v7) {
    goto LABEL_11;
  }
}

void sub_1927C05BC(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

unint64_t EspressoWrap__Layer__blob_names_raw(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(v4 + 64);
  if (v5)
  {
    if (a2)
    {
      char v6 = *(void **)(v5 + 152);
      uint64_t v7 = (void *)(v5 + 160);
      if (v6 == v7 || a3 < 1)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = 0;
        do
        {
          uint64_t v10 = v6 + 4;
          if (*((char *)v6 + 55) < 0) {
            uint64_t v10 = (void *)*v10;
          }
          *(void *)(a2 + 8 * v9) = v10;
          uint64_t v11 = (void *)v6[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v6[2];
              BOOL v13 = *v12 == (void)v6;
              char v6 = v12;
            }
            while (!v13);
          }
          ++v9;
          if (v12 == v7) {
            break;
          }
          char v6 = v12;
        }
        while (v9 < a3);
      }
    }
    else
    {
      unint64_t v9 = *(unsigned int *)(v5 + 168);
    }
  }
  else
  {
    unint64_t v9 = 0xFFFFFFFFLL;
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return v9;
}

uint64_t EspressoWrap__Layer__get_blob_by_name_raw(uint64_t *a1, char *__s)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(v3 + 64);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v5 + 160), __p);
  uint64_t v7 = v6;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (!v7) {
      goto LABEL_12;
    }
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    uint64_t v12 = __p;
    uint64_t v8 = *((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v5 + 152), __p, (_OWORD **)&v12)+ 8);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    operator new();
  }
  if (v6) {
    goto LABEL_7;
  }
LABEL_12:
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  return v7;
}

void sub_1927C07E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

void **EspressoWrap__Layer__readonly_blob_by_name(uint64_t *a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(const void **)(v4 + 64);
  if (v5)
  {
    if (!v6) {
      goto LABEL_12;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(&v14, v6, (uint64_t)__p, *(unsigned int *)(v4 + 12));
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
    if (v14)
    {
      __p[0] = 0;
      __p[1] = __p;
      uint64_t v9 = 0x4012000000;
      uint64_t v10 = __Block_byref_object_copy__4277;
      char v11 = __Block_byref_object_dispose__4278;
      uint64_t v12 = "";
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v14 + 56))(&v13, v14);
      operator new();
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  uint64_t v6 = 0;
LABEL_12:
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return v6;
}

void sub_1927C0AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Block_object_dispose(&__p, 8);
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  char v30 = *(std::__shared_weak_count **)(v28 - 56);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4277(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__4278(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t EspressoWrap__Layer__finalize_weights(uint64_t *a1)
{
  void (***v5)(uint64_t *__return_ptr, void);
  void v7[5];

  uint64_t v1 = *a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v3 = *a1;
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *a1;
  }
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void (****)(uint64_t *__return_ptr, void))(*(void *)(v3 + 64) + 8);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __EspressoWrap__Layer__finalize_weights_block_invoke;
  _OWORD v7[3] = &__block_descriptor_40_e10_v16__0r_v8l;
  v7[4] = v4;
  Espresso::abstract_context::compute_batch_sync(v5, v7);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  return 1;
}

void sub_1927C0C30(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Layer__type(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = *a1 + 40;
  if (*(char *)(v1 + 63) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t EspressoWrap__Layer__name(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = *a1 + 16;
  if (*(char *)(v1 + 39) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t EspressoWrap__Layer__platform(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 8);
}

uint64_t EspressoWrap__Layer__path(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 12);
}

void EspressoWrap__Net::set_c_net(uint64_t a1, uint64_t a2, uint64_t a3)
{
  espresso_plan_destroy(*(void *)(a1 + 160));
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 168) = a2;
  *(void *)(a1 + 176) = a3;
  Espresso::get_internal_network(a2, a3, (uint64_t)&v7);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = v7;
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
  }
}

uint64_t EspressoWrap__Net__load(uint64_t a1, char *a2, uint64_t a3, int a4, Espresso::keys_translation *a5)
{
  if (get_pyespresso_contexts(void)::onceToken != -1) {
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_4260);
  }
  LODWORD(v14) = a4;
  uint64_t v9 = (uint64_t **)std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr, a4, &v14)[5];
  Espresso::get_internal_context(v9, &v14);
  if (!v14) {
    Espresso::throw_exception_selector<Espresso::invalid_context_error>("Possibly no valid devices found");
  }
  *(unsigned char *)(v14 + 115) = 1;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  plauint64_t n = (unsigned char *)espresso_create_plan(v9, 0);
  uint64_t v11 = Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path(a5);
  uint64_t v12 = espresso_plan_add_network(plan, a2, v11, (uint64_t)&v14);
  if (!v12)
  {
    EspressoWrap__Net::set_c_net(a1, v14, (uint64_t)v15);
    *(unsigned char *)(*(void *)(a1 + 144) + 500) = 0;
    rebuild_compiler((void *)(a1 + 144));
    EspressoWrap__Net__touch(a1);
  }
  return v12;
}

void sub_1927C0E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    uint64_t v10 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v10, v11);
    __cxa_end_catch();
    JUMPOUT(0x1927C0E20);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Net__transform_for_training(uint64_t a1, char *a2, char *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  char v27 = 1;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 152);
  v25[0] = *(void *)(a1 + 144);
  v25[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::gradient_builder::gradient_builder((uint64_t)&v26, v25, &v27);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::gradient_builder::preprocess_network(&v26, &v23);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v21 = 0u;
  int v22 = 1065353216;
  if (a2)
  {
    memset(v28, 0, sizeof(v28));
    int v29 = 1065353216;
    Espresso::string_split((Espresso *)&v17, a2);
    uint64_t v6 = v17;
    for (uint64_t i = *(void *)v18; v6 != (char *)i; v6 += 24)
    {
      if (v6[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *(_OWORD *)v6;
        v30.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v8;
      }
      v16[0] = (long long *)&v30;
      std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v28, (unsigned __int8 *)&v30, v16)[40] = 1;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }
    Espresso::gradient_builder::net_training_transform((const Espresso::net **)&v26, v28, (uint64_t)&v30);
    int v22 = v32;
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *> *>>(__p, (uint64_t *)v30.__r_.__value_.__r.__words[2]);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node((void *)v30.__r_.__value_.__r.__words[2]);
    uint64_t v9 = (void *)v30.__r_.__value_.__r.__words[0];
    v30.__r_.__value_.__r.__words[0] = 0;
    if (v9) {
      operator delete(v9);
    }
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)v28);
  }
  else
  {
    Espresso::gradient_builder::net_training_transform((const Espresso::net **)&v26, (uint64_t)v28);
    int v22 = v29;
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *> *>>(__p, (uint64_t *)v28[2]);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node((void *)v28[2]);
    uint64_t v10 = (void *)v28[0];
    v28[0] = 0;
    if (v10) {
      operator delete(v10);
    }
  }
  int v17 = 0;
  *(void *)int v18 = 0;
  uint64_t v19 = 0;
  for (int j = (uint64_t **)v21; j; int j = (uint64_t **)*j)
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v17, *(uint64_t *)v18, (std::string *)j[5], (std::string *)j[6], 0xAAAAAAAAAAAAAAABLL * (j[6] - j[5]));
  if (a3)
  {
    Espresso::string_split((Espresso *)v16, a3);
    uint64_t v12 = v26;
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)v26);
    uint64_t v13 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v12);
    memset(v15, 0, sizeof(v15));
    memset(v28, 0, sizeof(v28));
    int v29 = 1065353216;
    char v31 = 0;
    uint64_t v14 = operator new(0x28uLL);
    void *v14 = &unk_1EE37CAB8;
    v14[1] = v16;
    v14[2] = v13;
    v14[3] = v15;
    v14[4] = v28;
    char v31 = v14;
    Espresso::transform_network_inplace((uint64_t)v12);
  }
  operator new();
}

void sub_1927C12F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table(v29 - 160);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table((uint64_t)&a19);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&a29);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__build_gradient(uint64_t a1, char *a2, char *a3)
{
  char v25 = 1;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 152);
  v23[0] = *(void *)(a1 + 144);
  v23[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::gradient_builder::gradient_builder((uint64_t)v24, v23, &v25);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, a2);
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 144) + 256);
    if (*(char *)(v7 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v7 + 32), *(void *)(v7 + 40));
    }
    else {
      std::string v22 = *(std::string *)(v7 + 32);
    }
  }
  Espresso::string_split((Espresso *)&v20, a3);
  memset(v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v17, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::gradient_builder::build_gradient((uint64_t)v24, (long long *)&v22, v17, &v18);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  memset(&__p, 0, sizeof(__p));
  uint64_t v8 = v18;
  if (v19 != v18)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = v8 + v9;
      int v12 = *(char *)(v11 + 23);
      if (v12 >= 0) {
        uint64_t v13 = (const std::string::value_type *)v11;
      }
      else {
        uint64_t v13 = *(const std::string::value_type **)v11;
      }
      if (v12 >= 0) {
        std::string::size_type v14 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        std::string::size_type v14 = *(void *)(v11 + 8);
      }
      std::string::append(&__p, v13, v14);
      uint64_t v8 = v18;
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3);
      if (v15 - 1 > v10)
      {
        std::string::append(&__p, ",");
        uint64_t v8 = v18;
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3);
      }
      ++v10;
      v9 += 24;
    }
    while (v15 > v10);
  }
  operator new();
}

void sub_1927C16CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void EspressoWrap__Net__build_gradient_given_output_grads(uint64_t a1, char *a2, char *a3, char *a4)
{
  char v41 = 1;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  v38[0] = *(void *)(a1 + 144);
  v38[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::gradient_builder::gradient_builder((uint64_t)&v39, v38, &v41);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::string_split((Espresso *)&v36, a2);
  Espresso::string_split((Espresso *)v35, a3);
  memset(v33, 0, sizeof(v33));
  int v34 = 1065353216;
  uint64_t v8 = v36;
  if (v37 != v36)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = v35[0];
      v32[0] = (long long *)(v8 + v9);
      int v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v33, v8 + v9, (uint64_t)&std::piecewise_construct, v32);
      std::string::operator=((std::string *)(v12 + 5), (const std::string *)(v11 + v9));
      ++v10;
      uint64_t v8 = v36;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 3));
  }
  Espresso::string_split((Espresso *)v32, a4);
  uint64_t v13 = v39;
  std::string::size_type v14 = (std::__shared_weak_count *)v40;
  v30[0] = v39;
  v30[1] = v40;
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  v29[0] = *(void *)(v13 + 16);
  v29[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v16 = *(_DWORD *)(**(void **)(v13 + 32) + 12);
  v28[0] = 0;
  v28[1] = 0;
  Espresso::sequential_builder::sequential_builder((Espresso::sequential_builder *)&v31, v30, v29, v16, v28);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  Espresso::gradient_builder::build_gradient((unsigned __int8 *)&v39, (uint64_t)v33, (std::string::size_type *)v32, (uint64_t)&v31, &v26);
  memset(&__p, 0, sizeof(__p));
  uint64_t v17 = v26;
  if (v27 != v26)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = v17 + v18;
      int v21 = *(char *)(v20 + 23);
      if (v21 >= 0) {
        std::string v22 = (const std::string::value_type *)v20;
      }
      else {
        std::string v22 = *(const std::string::value_type **)v20;
      }
      if (v21 >= 0) {
        std::string::size_type v23 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        std::string::size_type v23 = *(void *)(v20 + 8);
      }
      std::string::append(&__p, v22, v23);
      uint64_t v17 = v26;
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3);
      if (v24 - 1 > v19)
      {
        std::string::append(&__p, ",");
        uint64_t v17 = v26;
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3);
      }
      ++v19;
      v18 += 24;
    }
    while (v24 > v19);
  }
  operator new();
}

void sub_1927C1B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a24);
  a24 = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a52);
  a24 = (char *)(v52 - 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = (char *)(v52 - 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)(v52 - 176));
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__weight_decay(uint64_t result, float a2)
{
  void (**v37)(void **__return_ptr, void **, unint64_t);
  uint64_t v38[27];
  uint64_t *v39;
  void v40[3];
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string v46;
  void *v47[2];
  char v48;
  std::string v49;
  std::string __str;

  uint64_t v3 = result;
  if (a2 >= 0.000001)
  {
    uint64_t v4 = (char *)(result + 48);
    if (*(char *)(result + 71) < 0) {
      uint64_t v4 = *(char **)(result + 48);
    }
    Espresso::string_split((Espresso *)&v44, v4);
    uint64_t v5 = (char *)(v3 + 72);
    if (*(char *)(v3 + 95) < 0) {
      uint64_t v5 = *(char **)v5;
    }
    Espresso::string_split((Espresso *)&v42, v5);
    if (v45 - v44 == v43 - v42)
    {
      uint64_t v6 = (float *)operator new(4uLL);
      uint64_t v7 = (std::string::size_type *)(v3 + 144);
      *uint64_t v6 = a2;
      uint64_t v37 = (void (**)(void **__return_ptr, void **, unint64_t))&unk_1EE350110;
      std::string::size_type v8 = *(void *)(v3 + 144);
      uint64_t v9 = *(std::__shared_weak_count **)(v3 + 152);
      __str.__r_.__value_.__r.__words[0] = v8;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        std::string::size_type v8 = *v7;
      }
      unint64_t v10 = *(std::__shared_weak_count **)(v8 + 24);
      v49.__r_.__value_.__r.__words[0] = *(void *)(v8 + 16);
      v49.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        std::string::size_type v8 = *v7;
      }
      int v11 = *(_DWORD *)(**(void **)(v8 + 32) + 12);
      v47[0] = 0;
      v47[1] = 0;
      Espresso::sequential_builder::sequential_builder((Espresso::sequential_builder *)v38, (uint64_t *)&__str, (uint64_t *)&v49, v11, (uint64_t *)v47);
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      uint64_t v12 = *(void *)(v3 + 144);
      uint64_t v13 = *(void *)(v3 + 152);
      v38[25] = v12;
      v38[26] = v13;
      if (v13)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        uint64_t v12 = *v7;
      }
      uint64_t v39 = &v44;
      if ((***(unsigned int (****)(void))(*(void *)(v12 + 16) + 8))(*(void *)(*(void *)(v12 + 16)
                                                                                                + 8)) == 80000)
      {
        memset(v40, 0, sizeof(v40));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v40, v6, (uint64_t)(v6 + 1), 1uLL);
        char v41 = v45 - v44 != 24;
        uint64_t v37 = (void (**)(void **__return_ptr, void **, unint64_t))&unk_1EE3597E8;
        operator delete(v6);
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        int v34 = 0;
        if (v39[1] == *v39)
        {
          char v25 = 0;
          unint64_t v24 = 0;
        }
        else
        {
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          do
          {
            int v16 = (const void **)(v42 + v14);
            if (*(char *)(v42 + v14 + 23) >= 0) {
              size_t v17 = *((unsigned __int8 *)v16 + 23);
            }
            else {
              size_t v17 = (size_t)v16[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&__str, v17 + 12);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_str = &__str;
            }
            else {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if (v17)
            {
              if (*((char *)v16 + 23) >= 0) {
                unint64_t v19 = v16;
              }
              else {
                unint64_t v19 = *v16;
              }
              memmove(p_str, v19, v17);
            }
            strcpy((char *)p_str + v17, "/regularized");
            uint64_t v20 = v42;
            v37[3](v47, (void **)&v37, v15);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v46, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else {
              int v46 = __str;
            }
            Espresso::sequential_builder::elementwise_op(0, v38, v20 + v14, (uint64_t)v47, (uint64_t)&v46, (uint64_t)&v49);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::string __str = v49;
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v46.__r_.__value_.__l.__data_);
            }
            if (v48 < 0) {
              operator delete(v47[0]);
            }
            int v21 = v35;
            if ((unint64_t)v35 >= v36)
            {
              std::string::size_type v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v34, (uint64_t)&__str);
            }
            else
            {
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v35, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v22 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                v35->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
              }
              std::string::size_type v23 = v21 + 1;
            }
            uint64_t v35 = v23;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            ++v15;
            v14 += 24;
          }
          while (v15 < 0xAAAAAAAAAAAAAAABLL * ((v39[1] - *v39) >> 3));
          unint64_t v24 = v34;
          char v25 = v35;
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v42, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        memset(&__str, 0, sizeof(__str));
        uint64_t v26 = v42;
        if (v43 != v42)
        {
          uint64_t v27 = 0;
          unint64_t v28 = 0;
          do
          {
            uint64_t v29 = v26 + v27;
            int v30 = *(char *)(v29 + 23);
            if (v30 >= 0) {
              uint64_t v31 = (const std::string::value_type *)v29;
            }
            else {
              uint64_t v31 = *(const std::string::value_type **)v29;
            }
            if (v30 >= 0) {
              std::string::size_type v32 = *(unsigned __int8 *)(v29 + 23);
            }
            else {
              std::string::size_type v32 = *(void *)(v29 + 8);
            }
            std::string::append(&__str, v31, v32);
            uint64_t v26 = v42;
            unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3);
            if (v33 - 1 > v28)
            {
              std::string::append(&__str, ",");
              uint64_t v26 = v42;
              unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3);
            }
            ++v28;
            v27 += 24;
          }
          while (v33 > v28);
        }
        operator new();
      }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("regularizer_builder can be created only for networks on IR platform");
    }
    Espresso::throw_exception_selector<Espresso::generic_error>("variables and gradients don't match");
  }
  return result;
}

void sub_1927C21C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  *(void *)(v44 - 128) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 128));
  Espresso::regularizer_with_factors_builder::~regularizer_with_factors_builder((Espresso::regularizer_with_factors_builder *)&a14);
  a14 = v44 - 256;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = v44 - 232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__build_sgd(uint64_t a1, char *a2, char *a3, char *a4, float a5, float a6)
{
  Espresso::string_split((Espresso *)v17, a2);
  Espresso::string_split((Espresso *)v16, a3);
  uint64_t v12 = *(void *)(a1 + 144);
  int v11 = *(std::__shared_weak_count **)(a1 + 152);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a4);
  Espresso::sgd_optimizer_builder::sgd_optimizer_builder((uint64_t)v14, v12, v11, (uint64_t)v17, (uint64_t)v16, &__p, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  Espresso::sgd_optimizer_builder::build_single_layer_optimizer((Espresso::sgd_optimizer_builder *)v14);
  EspressoWrap__Net__touch(a1);
  v14[0] = &unk_1EE357088;
  if (v15 < 0) {
    operator delete(v14[36]);
  }
  Espresso::optimizer_builder::~optimizer_builder(v14);
  v14[0] = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
  v14[0] = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
}

void sub_1927C2464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  a16 = v17 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = v17 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__build_adam(uint64_t a1, char *a2, char *a3, char *a4, float a5, float a6, float a7, float a8)
{
  Espresso::string_split((Espresso *)v29, a2);
  Espresso::string_split((Espresso *)v28, a3);
  uint64_t v16 = *(void *)(a1 + 144);
  char v15 = *(std::__shared_weak_count **)(a1 + 152);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a4);
  Espresso::adam_optimizer_builder::adam_optimizer_builder((uint64_t)v18, v16, v15, (uint64_t)v29, (uint64_t)v28, &__p, a5, a6, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  Espresso::adam_optimizer_builder::build_single_layer_optimizer((Espresso::adam_optimizer_builder *)v18);
  EspressoWrap__Net__touch(a1);
  v18[0] = &unk_1EE3576F0;
  if (v27 < 0) {
    operator delete(v26);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18[37]);
  }
  Espresso::optimizer_builder::~optimizer_builder(v18);
  v18[0] = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  v18[0] = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
}

void sub_1927C2650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  a16 = v17 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = v17 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__auto_optimize(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v54 = 0x4220000000000000;
  DWORD2(v54) = 0;
  *(_DWORD *)((char *)&v54 + 11) = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  char v57 = 0;
  long long v58 = 0u;
  memset(v59, 0, sizeof(v59));
  int v60 = 4096;
  __int16 v61 = 0;
  if (a2)
  {
    uint64_t v2 = [NSString stringWithUTF8String:a2];
    uint64_t v3 = [v2 dataUsingEncoding:4 allowLossyConversion:1];

    id v53 = 0;
    uint64_t v4 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v3 options:0 error:&v53];
    id v35 = v53;
    uint64_t v37 = v4;
    uint64_t v5 = [v4 objectForKeyedSubscript:@"verbose"];
    DWORD2(v54) = v5 != 0;

    uint64_t v6 = [v4 objectForKeyedSubscript:@"no_opt"];
    uint64_t v38 = v3;
    if ([v6 BOOLValue])
    {
      BYTE12(v54) = 1;
    }
    else
    {
      uint64_t v7 = [v4 objectForKeyedSubscript:@"no_optimization"];
      BYTE12(v54) = [v7 BOOLValue];
    }
    std::string::size_type v8 = [v4 objectForKeyedSubscript:@"convert_weights_to_fp16"];
    LOBYTE(v54) = [v8 BOOLValue];

    uint64_t v9 = [v4 objectForKeyedSubscript:@"quantize_conv_weights_u8"];
    BYTE2(v54) = [v9 BOOLValue];

    unint64_t v10 = [v4 objectForKeyedSubscript:@"quantize_fc_weights_u8"];
    BYTE3(v54) = [v10 BOOLValue];

    int v11 = [v4 objectForKeyedSubscript:@"quantize_min_psnr"];
    BOOL v12 = v11 == 0;

    if (!v12)
    {
      uint64_t v13 = [v37 objectForKeyedSubscript:@"quantize_min_psnr"];
      [v13 floatValue];
      DWORD1(v54) = v14;
    }
    char v15 = [v37 objectForKeyedSubscript:@"conv_groups"];
    BYTE13(v54) = [v15 BOOLValue];

    uint64_t v16 = [v37 objectForKeyedSubscript:@"explicit_padding"];
    BYTE14(v54) = [v16 BOOLValue];

    uint64_t v17 = [v37 objectForKeyedSubscript:@"quantize_u8_allow_asymmetric"];
    char v57 = [v17 BOOLValue];

    uint64_t v18 = [v37 objectForKeyedSubscript:@"min_num_params_for_quant"];
    int v60 = [v18 unsignedIntValue];

    char v19 = [v37 objectForKeyedSubscript:@"custom_optimizations"];
    BOOL v20 = v19 == 0;

    if (!v20)
    {
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      char v21 = [v37 objectForKeyedSubscript:@"custom_optimizations"];
      uint64_t v22 = [v21 countByEnumeratingWithState:&v49 objects:v63 count:16];
      if (v22)
      {
        uint64_t v23 = *(void *)v50;
        do
        {
          for (uint64_t i = 0; i != v22; ++i)
          {
            if (*(void *)v50 != v23) {
              objc_enumerationMutation(v21);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[*(id *)(*((void *)&v49 + 1) + 8 * i) UTF8String]);
            char v25 = (_OWORD *)*((void *)&v58 + 1);
            if (*((void *)&v58 + 1) >= v59[0])
            {
              unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v58 + 1) - v58) >> 3);
              unint64_t v28 = v27 + 1;
              if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v59[0] - v58) >> 3) > v28) {
                unint64_t v28 = 0x5555555555555556 * ((uint64_t)(v59[0] - v58) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59[0] - v58) >> 3) >= 0x555555555555555) {
                unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v29 = v28;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)v59;
              if (v29) {
                unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v29);
              }
              else {
                uint64_t v30 = 0;
              }
              uint64_t v31 = (std::string *)(v29 + 24 * v27);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v29;
              __v.__begin_ = v31;
              __v.__end_cap_.__value_ = (std::string *)(v29 + 24 * v30);
              long long v32 = __p;
              v31->__r_.__value_.__r.__words[2] = v48;
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
              std::string::size_type v48 = 0;
              long long __p = 0uLL;
              __v.__end_ = v31 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v58, &__v);
              uint64_t v33 = *((void *)&v58 + 1);
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              *((void *)&v58 + 1) = v33;
              uint64_t v3 = v38;
              if (SHIBYTE(v48) < 0) {
                operator delete((void *)__p);
              }
            }
            else
            {
              long long v26 = __p;
              *(void *)(*((void *)&v58 + 1) + 16) = v48;
              _OWORD *v25 = v26;
              *((void *)&v58 + 1) = (char *)v25 + 24;
            }
          }
          uint64_t v22 = [v21 countByEnumeratingWithState:&v49 objects:v63 count:16];
        }
        while (v22);
      }
    }
  }
  int v34 = *(std::__shared_weak_count **)(a1 + 152);
  uint64_t v45 = *(void *)(a1 + 144);
  int v46 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v39[0] = v54;
  v39[1] = v55;
  v39[2] = v56;
  char v40 = v57;
  memset(v41, 0, sizeof(v41));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v41, v58, *((uint64_t *)&v58 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v58 + 1) - v58) >> 3));
  if (SHIBYTE(v59[3]) < 0) {
    std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)v59[1], v59[2]);
  }
  else {
    std::string v42 = *(std::string *)&v59[1];
  }
  int v43 = v60;
  __int16 v44 = v61;
  Espresso::auto_optimize((uint64_t)&v45, (uint64_t)v39, &__v);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  *(void *)&long long __p = v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  operator new();
}

void sub_1927C2CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  Espresso::auto_optimize_options::~auto_optimize_options(&a48);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__cpu_context_transfer_algo()
{
  return 0;
}

void EspressoWrap__Net__dump(uint64_t a1, char *a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  v8[0] = *(void *)(a1 + 144);
  v8[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::dump_network(v8, &__str, (uint64_t)v5, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void sub_1927C2F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Net__dump_binserializer(uint64_t a1, char *a2, char *a3)
{
  char v4 = *(std::__shared_weak_count **)(a1 + 152);
  v9[0] = *(void *)(a1 + 144);
  v9[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  Espresso::dump_network_binserializer(v9, (const char *)v7, (const void **)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_1927C2FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___Z44setup_memoryMap_with_abstract_blob_containerNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), a2, *(void *)(a1 + 48) + 16);
}

void EspressoWrap__Blob_map(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1927C3280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a14)
  {
    nitro::nitro_function::nitro_function(a14);
    if (!v18)
    {
LABEL_3:
      if (!v19) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v18);
  if (!v19)
  {
LABEL_4:
    if (!v18) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  nitro::nitro_function::nitro_function(v19);
  if (!v18) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  nitro::nitro_function::nitro_function(v18);
  goto LABEL_6;
}

void sub_1927C32E8()
{
  if (!v0) {
    JUMPOUT(0x1927C32A0);
  }
  JUMPOUT(0x1927C3298);
}

void EspressoWrap__Net__layer_by_name()
{
}

void sub_1927C33F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Net__set_property(uint64_t a1, char *a2, uint64_t a3)
{
  char v4 = (uint64_t **)(*(void *)(a1 + 144) + 472);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  char v8 = __p;
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v8);
  MEMORY[0x192FF0F50]((char *)v5 + 56, a3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1927C3490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *EspressoWrap__Net__get_property(uint64_t a1, char *a2)
{
  uint64_t v2 = (uint64_t **)(*(void *)(a1 + 144) + 472);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  int v11 = __p;
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v11);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)v3 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)v3 + 7), *((void *)v3 + 8));
  }
  else {
    std::string v8 = *(std::string *)((char *)v3 + 56);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v5 = (void *)v8.__r_.__value_.__r.__words[0];
    if (SLODWORD(v8.__r_.__value_.__r.__words[1]) >= 0x1FFF) {
      size_t v6 = 0x1FFFLL;
    }
    else {
      size_t v6 = SLODWORD(v8.__r_.__value_.__r.__words[1]);
    }
    memcpy(return_str(std::string)::buff, v8.__r_.__value_.__l.__data_, v6);
    return_str(std::string)::buff[v6] = 0;
    operator delete(v5);
  }
  else
  {
    uint64_t v4 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    memcpy(return_str(std::string)::buff, &v8, HIBYTE(v8.__r_.__value_.__r.__words[2]));
    return_str(std::string)::buff[v4] = 0;
  }
  return return_str(std::string)::buff;
}

void sub_1927C35B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Net__set_metadata_for_key(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v5 = a5;
  uint64_t v6 = a3;
  char v7 = a2;
  uint64_t v8 = a1;
  uint64_t v47 = 0;
  std::string::size_type v48 = 0;
  unint64_t v49 = 0;
  if (a5)
  {
    char v10 = 0;
    unint64_t v11 = 0;
    BOOL v12 = 0;
    uint64_t v13 = 0;
    do
    {
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = (v12 - v10) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v11 - (void)v10) >> 1 > v15) {
          unint64_t v15 = (uint64_t)(v11 - (void)v10) >> 1;
        }
        if (v11 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = (char *)(v16 + 4 * v14);
        *(_DWORD *)uint64_t v18 = *(_DWORD *)(a4 + 4 * (void)v13);
        char v19 = v18 + 4;
        while (v12 != v10)
        {
          int v20 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v18 - 1) = v20;
          v18 -= 4;
        }
        unint64_t v11 = v16 + 4 * v17;
        uint64_t v47 = v18;
        unint64_t v49 = v11;
        if (v10) {
          operator delete(v10);
        }
        char v10 = v18;
        BOOL v12 = v19;
      }
      else
      {
        *(_DWORD *)BOOL v12 = *(_DWORD *)(a4 + 4 * (void)v13);
        v12 += 4;
      }
      std::string::size_type v48 = v12;
      ++v13;
    }
    while (v13 != v5);
    uint64_t v5 = v47;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    unint64_t v21 = (v12 - v47) >> 2;
    if (v12 == v47)
    {
      uint64_t v5 = v12;
      uint64_t v8 = a1;
      char v7 = a2;
      uint64_t v6 = a3;
    }
    else
    {
      uint64_t v22 = 0;
      if (v21 <= 1) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = (v12 - v47) >> 2;
      }
      uint64_t v8 = a1;
      char v7 = a2;
      uint64_t v6 = a3;
      do
      {
        *((_DWORD *)&v44 + v22) = *(_DWORD *)&v5[4 * v22];
        ++v22;
      }
      while (v23 != v22);
    }
  }
  else
  {
    LODWORD(v21) = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    LODWORD(v46) = 0;
  }
  HIDWORD(v46) = v21;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v44, 0, (uint64_t)&v39);
  long long v30 = v39;
  int v24 = v40;
  char v25 = (char *)operator new(0x68uLL);
  *((void *)v25 + 1) = 0;
  *((void *)v25 + 2) = 0;
  *(void *)char v25 = &unk_1EE389A00;
  *((void *)v25 + 3) = &unk_1EE36BF30;
  *(_OWORD *)(v25 + 72) = 0u;
  *(_OWORD *)(v25 + 88) = 0u;
  *((_OWORD *)v25 + 2) = v30;
  *((_DWORD *)v25 + 12) = v24;
  *((void *)v25 + 7) = v6;
  v25[64] = 0;
  uint64_t v26 = *(void *)(v8 + 144);
  std::string::basic_string[abi:ne180100]<0>(v37, v7);
  v32[0] = v39;
  v32[1] = v40;
  uint64_t v33 = v41;
  long long __p = 0;
  id v35 = 0;
  uint64_t v36 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v42, (uint64_t)v43, (v43 - (unsigned char *)v42) >> 2);
  v31[0] = v25 + 24;
  v31[1] = v25;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v25 + 1, 1uLL, memory_order_relaxed);
  Espresso::net::set_metadata_for_key(v26, (uint64_t)v37, v32, v31);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v25);
  if (__p)
  {
    id v35 = __p;
    operator delete(__p);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v25);
  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }
  if (v5)
  {
    std::string::size_type v48 = v5;
    operator delete(v5);
  }
}

void sub_1927C38A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  nitro::nitro_function::nitro_function(v36);
  if (__p) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  nitro::nitro_function::nitro_function(v36);
  if (a35) {
    operator delete(a35);
  }
  long long v39 = *(void **)(v37 - 112);
  if (v39)
  {
    *(void *)(v37 - 104) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void Espresso::blob<float,5>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF30;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<float,5>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF30;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,5>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<float,5>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389A00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<float,5>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389A00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unsigned __int8 *EspressoWrap__Net__get_metadata_for_key(uint64_t a1, char *a2)
{
  uint64_t v2 = (void *)(*(void *)(a1 + 144) + 1304);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  uint64_t v4 = v3;
  if ((v7 & 0x80000000) == 0)
  {
    if (!v3) {
      return v4;
    }
LABEL_5:
    std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::pair[abi:ne180100]((uint64_t)__p, (long long *)(v4 + 40));
    operator new();
  }
  operator delete(__p[0]);
  if (v4) {
    goto LABEL_5;
  }
  return v4;
}

void sub_1927C3C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::~pair(&a19);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__layer_count(uint64_t a1)
{
  return (*(void *)(*(void *)(a1 + 144) + 40) - *(void *)(*(void *)(a1 + 144) + 32)) >> 4;
}

void EspressoWrap__Net__layer_by_index()
{
}

uint64_t EspressoWrap__Net__blob_by_name(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(a1 + 144) + 136;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  char v10 = __p;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (unsigned __int8 *)__p, (long long **)&v10);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v3 + 6);
  v9[0] = *((void *)v3 + 5);
  v9[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = espresso_wrap_blob(v9);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  return v5;
}

void sub_1927C3DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

BOOL EspressoWrap__Net__has_transform_params(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 144) + 328;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v3, __p);
  uint64_t v5 = *(void *)(a1 + 144);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v5 + 336 != (void)v4;
}

BOOL EspressoWrap__Net__is_blob_dynamic(uint64_t a1, char *a2)
{
  return Espresso::net::is_blob_dynamic(*(Espresso::net **)(a1 + 144), a2);
}

void EspressoWrap__Net__get_transform_params(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 144) + 328;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v5, __p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if ((void *)(*(void *)(a1 + 144) + 336) == v6)
  {
    int v8 = 0;
    int v9 = 0;
    long long v10 = 0uLL;
    float v7 = 1.0;
  }
  else
  {
    float v7 = *((float *)v6 + 14);
    int v8 = *((_DWORD *)v6 + 15);
    int v9 = *((_DWORD *)v6 + 17);
    long long v10 = *(_OWORD *)(v6 + 9);
  }
  *(float *)a3 = v7;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_OWORD *)(a3 + 12) = v10;
}

void EspressoWrap__Net__set_transform_params(uint64_t a1, char *a2, int *a3)
{
  int v3 = *a3;
  int v5 = a3[1];
  int v4 = a3[2];
  long long v13 = *(_OWORD *)(a3 + 3);
  uint64_t v6 = (uint64_t **)(*(void *)(a1 + 144) + 328);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  unint64_t v16 = __p;
  float v7 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, __p, (_OWORD **)&v16);
  *((_DWORD *)v7 + 14) = v3;
  *((_DWORD *)v7 + 15) = v5;
  *((_DWORD *)v7 + 16) = 1;
  *((_DWORD *)v7 + 17) = v4;
  *(_OWORD *)(v7 + 72) = v13;
  *((void *)v7 + 11) = 0;
  *((void *)v7 + 12) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)v7 + 13) = _D0;
  *((void *)v7 + 14) = 0;
  *((void *)v7 + 15) = 0;
  *((_DWORD *)v7 + 32) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1927C3FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net_copy_from_image(uint64_t a1, char *__s, void *a3, int a4, int a5, size_t a6, int a7)
{
  void (***v30)(uint64_t *__return_ptr, void);
  uint64_t v32;
  void v33[5];
  vImage_Buffer v34;
  float v35;
  int v36;
  int v37;
  long long v38;
  int v39;
  long long v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  int v46;
  uint8_t permuteMap[8];
  char v48;
  long long v49;
  long long v50;
  int v51;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint8_t *v54;

  int v7 = a7;
  src.int data = a3;
  src.height = a5;
  src.width = a4;
  src.rowBytes = a6;
  dest.int data = 0;
  if (a7 != 1)
  {
    if (a7 == 4)
    {
      MEMORY[0x192FF2B50](&dest);
      *(_DWORD *)permuteMap = 50331906;
      vImagePermuteChannels_ARGB8888(&src, &dest, permuteMap, 0);
      src = dest;
    }
    else
    {
      if (a7 != 3) {
        return 0xFFFFFFFFLL;
      }
      MEMORY[0x192FF2B50](&dest);
      vImageConvert_RGB888toBGRA8888(&src, 0, 0, &dest, 0, 0);
      src = dest;
      int v7 = 4;
    }
  }
  long long v50 = 0uLL;
  long long v51 = 0;
  unint64_t v49 = 0uLL;
  uint64_t v10 = *(void *)(a1 + 144) + 328;
  std::string::basic_string[abi:ne180100]<0>(permuteMap, __s);
  unint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v10, permuteMap);
  if (v48 < 0) {
    operator delete(*(void **)permuteMap);
  }
  uint64_t v12 = *(void *)(a1 + 144);
  if ((void *)(v12 + 336) == v11)
  {
    int v14 = 0;
    int v17 = 0;
    long long v32 = 0;
    uint64_t v15 = 0;
    __asm { FMOV            V9.2S, #1.0 }
    float v13 = 1.0;
  }
  else
  {
    float v13 = *((float *)v11 + 14);
    int v14 = *((_DWORD *)v11 + 15);
    long long v50 = *(_OWORD *)((char *)v11 + 68);
    long long v51 = *((_DWORD *)v11 + 21);
    unint64_t v49 = *(_OWORD *)(v11 + 11);
    _D9 = v11[13];
    uint64_t v15 = v11[14];
    long long v32 = v11[15];
    int v17 = *((_DWORD *)v11 + 32);
  }
  uint64_t v22 = (void *)(v12 + 136);
  std::string::basic_string[abi:ne180100]<0>(permuteMap, __s);
  uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v22, permuteMap);
  int v24 = v23;
  if (v48 < 0)
  {
    operator delete(*(void **)permuteMap);
    if (!v24) {
      return 0xFFFFFFFFLL;
    }
  }
  else if (!v23)
  {
    return 0xFFFFFFFFLL;
  }
  uint64_t v25 = *(void *)(a1 + 144) + 136;
  std::string::basic_string[abi:ne180100]<0>(permuteMap, __s);
  long long v54 = permuteMap;
  uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25, permuteMap, (long long **)&v54);
  uint64_t v28 = *((void *)v26 + 5);
  unint64_t v27 = (std::__shared_weak_count *)*((void *)v26 + 6);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v48 < 0) {
    operator delete(*(void **)permuteMap);
  }
  int v29 = *(_DWORD *)(v28 + 20);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v29 < 2)
  {
    long long v30 = *(void (****)(uint64_t *__return_ptr, void))(*(void *)(a1 + 144) + 16);
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    int v34 = src;
    _OWORD v33[2] = __EspressoWrap__Net_copy_from_image_block_invoke;
    v33[3] = &__block_descriptor_164_e10_v16__0r_v8l;
    v33[4] = a1;
    uint64_t v46 = v7;
    id v35 = v13;
    uint64_t v36 = v14;
    uint64_t v37 = 1;
    long long v39 = v51;
    char v38 = v50;
    long long v40 = v49;
    uint64_t v41 = _D9;
    std::string v42 = v15;
    int v43 = v32;
    uint64_t v44 = v17;
    uint64_t v45 = __s;
    Espresso::abstract_context::compute_batch_sync(v30, v33);
    free(dest.data);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

void sub_1927C42FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1927C43BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap_EnableMontreal(int a1)
{
  return 0;
}

uint64_t EspressoWrap__Blob_get_shape(uint64_t a1)
{
  return a1 + 16;
}

void EspressoWrap__Blob_debug_write(void *a1, const char *a2)
{
  uint64_t v7 = 0;
  int v8 = 0;
  int v3 = (std::__shared_weak_count *)a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::sync_copy_to_host(v6, (uint64_t)&v7);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = v8;
  v5[0] = v7;
  v5[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::debug::write_blob<std::shared_ptr<Espresso::blob<float,4>>>(a2, (uint64_t)v5);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1927C44AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sync_copy_to_host(void *a1, uint64_t a2)
{
  void (***v5)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v6;
  long long v7;
  std::__shared_weak_count *v8;
  void v9[5];
  std::__shared_weak_count *v10;
  uint64_t v11;
  long long v12;

  if (!*(void *)a2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 56))(&v12);
    uint64_t v7 = v12;
    uint64_t v12 = 0uLL;
    int v8 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v7;
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      if (*((void *)&v12 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v12 + 1));
      }
    }
  }
  uint64_t v4 = *a1;
  int v5 = *(void (****)(uint64_t *__return_ptr, void))(*a1 + 72);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3321888768;
  void v9[2] = ___ZN8Espresso17sync_copy_to_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEERNS1_INS_4blobIfLi4EEEEE_block_invoke;
  void v9[3] = &__block_descriptor_56_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE_e10_v16__0r_v8l;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  v9[4] = v4;
  uint64_t v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = a2;
  Espresso::abstract_context::compute_batch_sync(v5, v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927C45D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::debug::write_blob<std::shared_ptr<Espresso::blob<float,4>>>(const char *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v3 = fopen(a1, "wb");
  if (!v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null file pointer");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = v3;
  uint64_t v5 = 0;
  long long v11 = xmmword_192DCA970;
  uint64_t v6 = *(void *)a2 + 8;
  do
  {
    *(_DWORD *)((char *)&v11 + v5) = *(_DWORD *)(v6 + v5);
    v5 += 4;
  }
  while (v5 != 16);
  fwrite(&v11, 4uLL, 4uLL, v3);
  uint64_t v7 = 0;
  uint64_t v8 = *(int *)(*(void *)a2 + 8);
  do
  {
    v8 *= *(int *)(*(void *)a2 + 12 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  fwrite(*(const void **)(*(void *)a2 + 24), 1uLL, 4 * v8, v4);
  return fclose(v4);
}

void sub_1927C4714(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso17sync_copy_to_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEERNS1_INS_4blobIfLi4EEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), a2, *(void *)(a1 + 48));
}

uint64_t EspressoWrap__Net__forward(uint64_t a1, int a2, int a3)
{
  void (***v7)(uint64_t *__return_ptr, void);
  void v8[5];
  int v9;
  int v10;
  uint64_t vars8;

  uint64_t v4 = *(void **)(a1 + 160);
  if (!v4)
  {
    uint64_t v7 = *(void (****)(uint64_t *__return_ptr, void))(*(void *)(a1 + 144) + 16);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    uint64_t v8[2] = __EspressoWrap__Net__forward_block_invoke;
    v8[3] = &__block_descriptor_48_e10_v16__0r_v8l;
    v8[4] = a1;
    int v9 = a2;
    uint64_t v10 = a3;
    Espresso::abstract_context::compute_batch_sync(v7, v8);
    return 0;
  }
  if (espresso_plan_get_phase(v4) != 1) {
    espresso_plan_build(*(uint64_t **)(a1 + 160));
  }
  if (espresso_plan_get_phase(*(void **)(a1 + 160)) != 1) {
    return 0;
  }
  uint64_t v5 = *(uint64_t **)(a1 + 160);

  return espresso_plan_execute_sync(v5);
}

uint64_t EspressoWrap__Net__get_network_t(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

float EspressoWrap__Net__forward_n_times(uint64_t a1, int a2, int a3, int a4, double a5)
{
  void (***v9)(uint64_t *__return_ptr, void);
  float v10;
  void v12[5];
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v18;
  char v19;

  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v16, "EspressoWrap__Net__forward_n_times", a5);
  int v9 = *(void (****)(uint64_t *__return_ptr, void))(*(void *)(a1 + 144) + 16);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  uint64_t v12[2] = __EspressoWrap__Net__forward_n_times_block_invoke;
  v12[3] = &__block_descriptor_52_e10_v16__0r_v8l;
  v12[4] = a1;
  float v13 = a2;
  int v14 = a3;
  uint64_t v15 = a4;
  Espresso::abstract_context::compute_batch_sync(v9, v12);
  char v19 = 1;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v18 = (double)(rep - v16) * 0.000001;
  uint64_t v10 = v18;
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v16);
  return v10;
}

void sub_1927C4984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)va);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__forward_partial(uint64_t a1, int a2, int a3)
{
  void (***v3)(uint64_t *__return_ptr, void);
  void v4[5];
  int v5;
  int v6;

  int v3 = *(void (****)(uint64_t *__return_ptr, void))(*(void *)(a1 + 144) + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __EspressoWrap__Net__forward_partial_block_invoke;
  v4[3] = &__block_descriptor_48_e10_v16__0r_v8l;
  v4[4] = a1;
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  Espresso::abstract_context::compute_batch_sync(v3, v4);
}

void EspressoWrap__Net__delete(uint64_t a1)
{
  espresso_plan_destroy(*(void *)(a1 + 160));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 8));

  JUMPOUT(0x192FF16B0);
}

uint64_t EspressoWrap__Layer__delete(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      nitro::nitro_function::nitro_function(v1);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t EspressoWrap__MemoryMap__delete(void *a1)
{
  void (***v2)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  void v17[5];
  uint64_t vars8;

  if (!*a1)
  {
    long long v11 = (std::__shared_weak_count *)a1[11];
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)a1[9];
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    float v13 = (std::__shared_weak_count *)a1[7];
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    int v14 = (std::__shared_weak_count *)a1[5];
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    uint64_t v15 = (std::__shared_weak_count *)a1[3];
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    unint64_t v16 = (std::__shared_weak_count *)a1[1];
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    JUMPOUT(0x192FF16B0);
  }
  uint64_t v2 = (void (***)(uint64_t *__return_ptr, void))a1[10];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  _OWORD v17[2] = __EspressoWrap__MemoryMap__delete_block_invoke;
  std::string::size_type v17[3] = &__block_descriptor_40_e10_v16__0r_v8l;
  v17[4] = a1;
  Espresso::abstract_context::compute_batch_sync(v2, v17);
  int v3 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[11];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[9];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[7];
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[5];
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[3];
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  int v9 = (std::__shared_weak_count *)a1[1];
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  return MEMORY[0x192FF16B0](a1, 0x10A0C400EBFD68ALL);
}

uint64_t EspressoWrap__Blob__delete(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      nitro::nitro_function::nitro_function(v1);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void EspressoWrap__Net__new()
{
  if (get_pyespresso_contexts(void)::onceToken != -1) {
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_4260);
  }
  operator new();
}

void EspressoWrap__Layer__new()
{
}

void EspressoWrap__MemoryMap__new()
{
}

void EspressoWrap__Blob__new()
{
}

uint64_t EspressoWrap__StatsQuantizer_new(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 144)) {
    operator new();
  }
  return 0;
}

void sub_1927C5A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  Espresso::quantizer::options_t::~options_t((Espresso::quantizer::options_t *)&a66);
  _Unwind_Resume(a1);
}

void Espresso::quantizer::options_t::~options_t(Espresso::quantizer::options_t *this)
{
}

void std::__shared_ptr_emplace<Espresso::dataset_estimator>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(*(void **)(a1 + 96));
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*(void **)(a1 + 72));
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*(void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::dataset_estimator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3862E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::dataset_estimator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3862E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::quantizer>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*(void **)(a1 + 256));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 208);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 168);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(a1 + 120);
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*(void **)(a1 + 72));
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*(void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::quantizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D3C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::quantizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D3C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t EspressoWrap__StatsQuantizer_load_stats(uint64_t a1, char *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v3 = *(Espresso::quantizer **)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::quantizer::load_stats(v3, (uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 != v4)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)(v5 + 16), *(long long **)(v4 + 16), (long long *)(v4 + 24));
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *> *,long>>((char *)(v5 + 40), *(long long **)(v4 + 40), (long long *)(v4 + 48));
  }
  return 0;
}

void sub_1927C5F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__StatsQuantizer_save_stats(uint64_t a1, char *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  Espresso::quantizer::set_stats(*(Espresso::quantizer **)(a1 + 16), (const Espresso::dataset_estimator::result_t *)(*(void *)(a1 + 32) + 16));
  uint64_t v4 = *(void *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::dataset_estimator::result_t::save((void *)(v4 + 16), (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1927C5FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__StatsQuantizer_sample(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0x100000000;
  memset(v7, 0, sizeof(v7));
  int v8 = 1065353216;
  char v5 = 1;
  uint64_t v2 = *(void *)(a1 + 16);
  int v6 = *(_DWORD *)(v2 + 136);
  if (v7 != (_OWORD *)(v2 + 144))
  {
    int v8 = *(_DWORD *)(v2 + 176);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v7, *(uint64_t **)(v2 + 160), 0);
  }
  Espresso::dataset_estimator::sample_stats_with_current_network_state(*(uint64_t ***)(a1 + 32), (uint64_t)&v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v7);
  return 0;
}

void sub_1927C6070(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__StatsQuantizer_quantize(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  Espresso::quantizer::set_stats(*(Espresso::quantizer **)(a1 + 16), (const Espresso::dataset_estimator::result_t *)(*(void *)(a1 + 32) + 16));
  Espresso::quantizer::quantize(*(Espresso::quantizer **)(a1 + 16));
  if (*(unsigned char *)(*(void *)(a1 + 16) + 89))
  {
    uint64_t v2 = *(void *)a1;
    int v3 = *(std::__shared_weak_count **)(a1 + 8);
    v5[0] = v2;
    v5[1] = (uint64_t)v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::classic_hx_engine_backwards_compatibility(v5);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
  return 0;
}

void sub_1927C610C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__StatsQuantizer_quantize_layer(void *a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(a1[2] + 184);
  for (uint64_t i = *(void **)(*a1 + 112); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = *(void *)(*(void *)(*a1 + 32) + 16 * i[2]);
    uint64_t v5 = *(unsigned __int8 *)(v4 + 39);
    size_t v6 = *(void *)(v4 + 24);
    if ((v5 & 0x80u) == 0) {
      char v7 = (void *)*(unsigned __int8 *)(v4 + 39);
    }
    else {
      char v7 = *(void **)(v4 + 24);
    }
    unint64_t v8 = v16;
    if ((v16 & 0x80u) != 0) {
      unint64_t v8 = (unint64_t)__p[1];
    }
    if (v7 != (void *)v8) {
      goto LABEL_17;
    }
    int v9 = (const void **)(v4 + 16);
    if ((v16 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v9, v10, v6)) {
        goto LABEL_17;
      }
    }
    else if (v5)
    {
      while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v10)
      {
        int v9 = (const void **)((char *)v9 + 1);
        uint64_t v10 = (void **)((char *)v10 + 1);
        if (!--v5) {
          goto LABEL_20;
        }
      }
LABEL_17:
      uint64_t v11 = i[3];
      uint64_t v12 = i[4];
      while (v11 != v12)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1[2] + 184, v11, v11);
        v11 += 24;
      }
    }
LABEL_20:
    ;
  }
  uint64_t v13 = EspressoWrap__StatsQuantizer_quantize((uint64_t)a1);
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  return v13;
}

void sub_1927C625C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = 0;
  }
}

uint64_t EspressoWrap__StatsQuantizer_delete(void *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  MEMORY[0x192FF16B0](a1, 0x20C40A759441BLL);
  return 0;
}

void **EspressoWrap__Net__get_configurations_json(uint64_t a1)
{
  uint64_t v2 = *(Espresso::net **)(a1 + 144);
  int v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::net::save_additional_configurations(v2, &v11);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 288))(v11, v8);
  std::stringbuf::str();
  uint64_t v4 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = v6;
  *(void *)(a1 + 136) = v7;
  if (*(char *)(a1 + 143) < 0) {
    uint64_t v4 = (void **)*v4;
  }
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 2std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&v10);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return v4;
}

void sub_1927C6510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 - 56);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__set_configurations_json(uint64_t a1, char *a2)
{
  v18[20] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v12, (uint64_t)v4, __p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)__p, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = v12;
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 280))(v12, __p);
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = (std::__shared_weak_count *)v13;
  v10[0] = v5;
  v10[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::net::restore_additional_configurations(v6, v10);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  __p[0] = *(void **)MEMORY[0x1E4FBA410];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA410] + 24);
  uint64_t v15 = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete(v16);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x192FF15B0](v18);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return 1;
}

void sub_1927C6788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, long long buf,int a21,__int16 a22,char a23,char a24)
{
  unint64_t v27 = v24;
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  std::istringstream::~istringstream((uint64_t)&buf);
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a2 == 1)
  {
    int v29 = (Espresso *)__cxa_begin_catch(a1);
    uint64_t v31 = Espresso::espresso_os_log_subsystem(v29, v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = (*(uint64_t (**)(Espresso *))(*(void *)v29 + 16))(v29);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v32;
      _os_log_error_impl(&dword_1920CB000, v31, OS_LOG_TYPE_ERROR, "Error: %s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1927C6754);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__select_configuration(uint64_t a1, char *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 160);
  if (!v2) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("invalid plan");
  }
  int v3 = *(void **)(a1 + 168);
  if (!v3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("invalid net");
  }
  uint64_t v5 = *(void *)(a1 + 176);
  uint64_t v6 = espresso_plan_build_clean(*(uint64_t **)(a1 + 160));
  if (!v6)
  {
    uint64_t v6 = espresso_network_select_configuration(v3, v5, a2);
    if (!v6) {
      return espresso_plan_build(v2);
    }
  }
  return v6;
}

void sub_1927C6998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    char v9 = (Espresso *)__cxa_begin_catch(exception_object);
    std::string v11 = Espresso::espresso_os_log_subsystem(v9, v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (*(uint64_t (**)(Espresso *))(*(void *)v9 + 16))(v9);
      LODWORD(a9) = 136315138;
      *(void *)((char *)&a9 + 4) = v13;
      _os_log_error_impl(&dword_1920CB000, v11, OS_LOG_TYPE_ERROR, "Error: %s", (uint8_t *)&a9, 0xCu);
    }

    EspressoLight::handle_ex_(v9, v12);
    __cxa_end_catch();
    JUMPOUT(0x1927C6940);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__set_script_json(uint64_t a1, char *a2)
{
  v16[20] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v10, (uint64_t)v4, __p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, a2);
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)__p, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 280))(v10, __p);
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 152);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[0] = 0;
  v8[1] = 0;
  Espresso::net::setup_script(v6, v8, 0);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::shape_network_recursive((Espresso *)v6, (Espresso::net *)(v6 + 184), 0, 0);
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
    nitro::nitro_function::nitro_function(v5);
  }
  __p[0] = *(void **)MEMORY[0x1E4FBA410];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA410] + 24);
  uint64_t v13 = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete(v14);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x192FF15B0](v16);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  return 1;
}

void sub_1927C6CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, long long buf,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v26 = v24;
  uint64_t v32 = v26;
  if (v26)
  {
    nitro::nitro_function::nitro_function(v26);
    nitro::nitro_function::nitro_function(v32);
  }
  std::istringstream::~istringstream((uint64_t)&buf);
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a2 == 1)
  {
    uint64_t v28 = (Espresso *)__cxa_begin_catch(a1);
    long long v30 = Espresso::espresso_os_log_subsystem(v28, v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = (*(uint64_t (**)(Espresso *))(*(void *)v28 + 16))(v28);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v31;
      _os_log_error_impl(&dword_1920CB000, v30, OS_LOG_TYPE_ERROR, "EspressoWrap__Net__set_script_json error: %s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1927C6C80);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__set_subnetwork(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 144);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v13 = __p;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5 + 984, (unsigned __int8 *)__p, (long long **)&v13);
  uint64_t v8 = *(void *)(a3 + 144);
  uint64_t v7 = *(void *)(a3 + 152);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v9 = (std::__shared_weak_count *)*((void *)v6 + 6);
  *((void *)v6 + 5) = v8;
  *((void *)v6 + 6) = v7;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *(void *)(a3 + 144);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v10 + 1088) = v5;
  std::string v11 = *(std::__shared_weak_count **)(v10 + 1096);
  *(void *)(v10 + 1096) = v4;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  return 1;
}

void sub_1927C6F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long __p, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete((void *)__p);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (a2 == 1)
  {
    uint64_t v18 = (Espresso *)__cxa_begin_catch(exception_object);
    int v20 = Espresso::espresso_os_log_subsystem(v18, v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = (*(uint64_t (**)(Espresso *))(*(void *)v18 + 16))(v18);
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v21;
      _os_log_error_impl(&dword_1920CB000, v20, OS_LOG_TYPE_ERROR, "EspressoWrap__Net__set_script_json error: %s", (uint8_t *)&__p, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1927C6ED8);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Net__get_subnetwork(uint64_t a1, char *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 144);
  uint64_t v2 = *(void *)(a1 + 152);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(v3 + 984), (unsigned __int8 *)__p);
  if (v4)
  {
    uint64_t v5 = *((void *)v4 + 6);
    uint64_t v6 = *((void *)v4 + 5);
    uint64_t v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    operator new();
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_1927C7128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long __p, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete((void *)__p);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (a2 == 1)
  {
    uint64_t v18 = (Espresso *)__cxa_begin_catch(exception_object);
    int v20 = Espresso::espresso_os_log_subsystem(v18, v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = (*(uint64_t (**)(Espresso *))(*(void *)v18 + 16))(v18);
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v21;
      _os_log_error_impl(&dword_1920CB000, v20, OS_LOG_TYPE_ERROR, "EspressoWrap__Net__set_script_json error: %s", (uint8_t *)&__p, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1927C70E4);
  }
  _Unwind_Resume(exception_object);
}

char *EspressoWrap__Net__get_subnetwork_names(uint64_t a1)
{
  memset(&v13, 0, sizeof(v13));
  uint64_t v1 = *(long long **)(*(void *)(a1 + 144) + 1000);
  if (!v1) {
    goto LABEL_27;
  }
  do
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&v11, v1 + 1);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v11.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
    if ((v10 & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    if (size)
    {
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v4 = &v11;
      }
      else {
        uint64_t v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
      }
      memmove(v3, v4, size);
    }
    *(_WORD *)((char *)v3 + size) = 44;
    if ((v10 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      std::string::size_type v6 = v10;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(&v13, (const std::string::value_type *)v5, v6);
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    uint64_t v1 = *(long long **)v1;
  }
  while (v1);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v7 = (void *)v13.__r_.__value_.__r.__words[0];
    strcpy(EspressoWrap__Net__get_subnetwork_names::ret, v13.__r_.__value_.__l.__data_);
    operator delete(v7);
  }
  else
  {
LABEL_27:
    strcpy(EspressoWrap__Net__get_subnetwork_names::ret, (const char *)&v13);
  }
  return EspressoWrap__Net__get_subnetwork_names::ret;
}

void sub_1927C7360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::pair<std::string const,std::shared_ptr<Espresso::net>>::~pair((uint64_t)&a16);
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__append_net(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[18];
  uint64_t v3 = (std::__shared_weak_count *)a1[19];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 144);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 152);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v26[0] = v4;
  v26[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 24);
  v25[0] = *(void *)(v4 + 16);
  v25[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = *(_DWORD *)(**(void **)(v4 + 32) + 12);
  v24[0] = 0;
  v24[1] = 0;
  Espresso::sequential_builder::sequential_builder((Espresso::sequential_builder *)v27, v26, v25, v8, v24);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  memset(v23, 0, sizeof(v23));
  v22[0] = v6;
  v22[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::sequential_builder::add_network((uint64_t)v27, v22, v23);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v20, (long long **)(v6 + 184));
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v21, (long long **)(v6 + 208));
  char v9 = *(long long **)(v4 + 184);
  unsigned __int8 v10 = (long long *)(v4 + 192);
  if (v9 != v10)
  {
    do
    {
      uint64_t v18 = v9 + 2;
      std::string v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, (void *)v9 + 4, &v18);
      long long v12 = *(long long *)((char *)v9 + 56);
      long long v13 = *(long long *)((char *)v9 + 72);
      *((void *)v11 + 11) = *((void *)v9 + 11);
      *(_OWORD *)(v11 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v13;
      *(_OWORD *)(v11 + 56) = v12;
      if (v9 != (long long *)v11) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11 + 96, *((char **)v9 + 12), *((void *)v9 + 13), (uint64_t)(*((void *)v9 + 13) - *((void *)v9 + 12)) >> 2);
      }
      int v14 = (long long *)*((void *)v9 + 1);
      if (v14)
      {
        do
        {
          char v15 = v14;
          int v14 = *(long long **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          char v15 = (long long *)*((void *)v9 + 2);
          BOOL v16 = *(void *)v15 == (void)v9;
          char v9 = v15;
        }
        while (!v16);
      }
      char v9 = v15;
    }
    while (v15 != v10);
  }
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)v27, (const Espresso::network_shape *)v20, &v18);
  EspressoWrap__Net::set_cpp_net(a1, &v18);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  EspressoWrap__Net__touch((uint64_t)a1);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v21, v21[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v20, (char *)v20[1]);
  v20[0] = (uint64_t *)v23;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v34);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v30 < 0) {
    operator delete(v29[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v29, v29[1]);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return 1;
}

void sub_1927C762C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  Espresso::network_shape::~network_shape(&a11);
  a11 = &a19;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a28);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1927C7610);
  }
  _Unwind_Resume(a1);
}

void *EspressoWrap__Net__insert_net(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = (void *)a1[18];
  uint64_t v5 = (std::__shared_weak_count *)a1[19];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a2 + 144);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v6[4];
  uint64_t v9 = v6[5];
  std::string v11 = (std::__shared_weak_count *)v6[3];
  v45[0] = v6[2];
  v45[1] = (uint64_t)v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = v6[4];
  }
  else
  {
    uint64_t v12 = v10;
  }
  int v13 = *(_DWORD *)(*(void *)v12 + 12);
  v44[0] = 0;
  v44[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)v46, v45, v13, v44);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  Espresso::sequential_builder::init_net_shape((Espresso::sequential_builder *)v46);
  int v14 = (void *)v6[29];
  if (v14 != v6 + 30)
  {
    do
    {
      v34[0] = v14 + 4;
      char v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v6 + 17), (unsigned __int8 *)v14 + 32, (long long **)v34);
      Espresso::abstract_blob_container::shape(v39, *((void *)v15 + 5));
      if (*((char *)v14 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v38, (const std::string::value_type *)v14[4], v14[5]);
      }
      else {
        std::string v38 = *(std::string *)(v14 + 4);
      }
      Espresso::sequential_builder::placeholder((Espresso::sequential_builder *)v46, v39, (std::string::size_type)&v38, (uint64_t)&__p);
      if (v43 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (v40)
      {
        uint64_t v41 = v40;
        operator delete(v40);
      }
      BOOL v16 = (void *)v14[1];
      if (v16)
      {
        do
        {
          char v17 = v16;
          BOOL v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          char v17 = (void *)v14[2];
          BOOL v18 = *v17 == (void)v14;
          int v14 = v17;
        }
        while (!v18);
      }
      int v14 = v17;
    }
    while (v17 != v6 + 30);
  }
  memset(v37, 0, sizeof(v37));
  if (a3 >= 1)
  {
    unint64_t v19 = 0;
    do
    {
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::sequential_builder::copy_layer_from_network((uint64_t)v46, v6, v19, v37);
      if (v5) {
        nitro::nitro_function::nitro_function(v5);
      }
      ++v19;
    }
    while (a3 != v19);
  }
  v36[0] = v8;
  v36[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::sequential_builder::add_network((uint64_t)v46, v36, v37);
  unint64_t v20 = (v9 - v10) >> 4;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v20 > a3)
  {
    uint64_t v21 = a3;
    uint64_t v22 = (uint64_t)a3 << 32;
    uint64_t v23 = v20 - v21;
    do
    {
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::sequential_builder::copy_layer_from_network((uint64_t)v46, v6, v22 >> 32, v37);
      if (v5) {
        nitro::nitro_function::nitro_function(v5);
      }
      v22 += 0x100000000;
      --v23;
    }
    while (v23);
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v34, (long long **)(v8 + 184));
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v35, (long long **)(v8 + 208));
  int v24 = (long long *)v6[23];
  uint64_t v25 = (long long *)(v6 + 24);
  if (v24 != v25)
  {
    do
    {
      uint64_t v32 = v24 + 2;
      uint64_t v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (void *)v24 + 4, &v32);
      long long v27 = *(long long *)((char *)v24 + 56);
      long long v28 = *(long long *)((char *)v24 + 72);
      *((void *)v26 + 11) = *((void *)v24 + 11);
      *(_OWORD *)(v26 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v28;
      *(_OWORD *)(v26 + 56) = v27;
      if (v24 != (long long *)v26) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v26 + 96, *((char **)v24 + 12), *((void *)v24 + 13), (uint64_t)(*((void *)v24 + 13) - *((void *)v24 + 12)) >> 2);
      }
      int v29 = (long long *)*((void *)v24 + 1);
      if (v29)
      {
        do
        {
          char v30 = v29;
          int v29 = *(long long **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          char v30 = (long long *)*((void *)v24 + 2);
          BOOL v18 = *(void *)v30 == (void)v24;
          int v24 = v30;
        }
        while (!v18);
      }
      int v24 = v30;
    }
    while (v30 != v25);
  }
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)v46, (const Espresso::network_shape *)v34, &v32);
  EspressoWrap__Net::set_cpp_net(a1, &v32);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  EspressoWrap__Net__touch((uint64_t)a1);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v35, v35[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v34, (char *)v34[1]);
  v34[0] = (uint64_t *)v37;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v53);
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  if (v49 < 0) {
    operator delete(v48[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v48, v48[1]);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

void sub_1927C7B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  Espresso::network_shape::~network_shape(&a14);
  a14 = &a22;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a46);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1927C7AFCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__rewire_layer_input(uint64_t a1, char *a2, char *a3, char *a4)
{
  uint64_t v8 = *(void *)(a1 + 144);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, a2);
  std::string::basic_string[abi:ne180100]<0>(v12, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, a4);
  Espresso::net::rewire_layer_input(v8, (unsigned __int8 *)v14, (uint64_t)v12, (uint64_t *)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  EspressoWrap__Net__touch(a1);
  return 1;
}

void sub_1927C7D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1927C7D0CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__remove_layer(uint64_t a1, int a2)
{
  uint64_t v3 = *(Espresso::net **)(a1 + 144);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::net::remove_layer(v3, a2);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  EspressoWrap__Net__touch(a1);
  return 1;
}

void sub_1927C7E08(_Unwind_Exception *exception_object, int a2)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1927C7DF8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__quantization_mode(uint64_t a1, int a2, char *a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 152);
  v16[0] = *(void *)(a1 + 144);
  v16[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = Espresso::net_number_of_bits((uint64_t)v16);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (a2)
  {
    Espresso::string_split((Espresso *)v15, a3);
    std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v14, v15[0], v15[1]);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
    v13[0] = *(void *)(a1 + 144);
    v13[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::transform_dequantize((uint64_t)v13, (uint64_t)v14);
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    uint64_t v9 = *(Espresso **)(a1 + 144);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 152);
    char v11 = v9;
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      char v11 = *(Espresso **)(a1 + 144);
    }
    Espresso::shape_network_recursive(v9, (Espresso *)((char *)v11 + 184), 0, 0);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    EspressoWrap__Net__touch(a1);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v14);
    v14[0] = (void **)v15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v14);
  }
  return v7;
}

void sub_1927C7F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void sub_1927C7F98()
{
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  JUMPOUT(0x1927C7F90);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1927C8014(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned char *EspressoWrap__Layer__json_params(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v25, (uint64_t)v3, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  uint64_t v4 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v23, (uint64_t)v4, (void *)(v2 + 40));
  if (!v23)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    char v13 = std::string::append(&v22, "'");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, __p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = v25;
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v23 + 24))(v23, v25, *(void *)(v2 + 64));
  uint64_t v6 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v22, (uint64_t)v6, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  for (uint64_t i = (void *)(*(void *)(v2 + 64) + 256);
        ;
        (*(void (**)(std::string::size_type, void *, void *))(*(void *)v22.__r_.__value_.__l.__data_
                                                                           + 160))(v22.__r_.__value_.__r.__words[0], i + 2, i + 5))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "attributes");
  (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)v5 + 240))(v5, __p, &v22);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 288))(v5, __p);
  std::stringbuf::str();
  if ((char)v17 < 0)
  {
    uint64_t v9 = __src;
    if ((int)v16 >= 0x1FFF) {
      size_t v10 = 0x1FFFLL;
    }
    else {
      size_t v10 = (int)v16;
    }
    memcpy(return_str(std::string)::buff, __src, v10);
    return_str(std::string)::buff[v10] = 0;
    operator delete(v9);
  }
  else
  {
    uint64_t v8 = v17;
    memcpy(return_str(std::string)::buff, &__src, v17);
    return_str(std::string)::buff[v8] = 0;
  }
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 2std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418]
                                                                                                 + 24);
  __p[0].__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete(v19);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&v21);
  if (v22.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v22.__r_.__value_.__l.__size_);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  return return_str(std::string)::buff;
}

void sub_1927C8408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 81) < 0)
  {
    operator delete(*(void **)(v21 - 104));
    if ((v20 & 1) == 0)
    {
LABEL_8:
      uint64_t v23 = *(std::__shared_weak_count **)(v21 - 72);
      if (v23) {
        nitro::nitro_function::nitro_function(v23);
      }
      int v24 = *(std::__shared_weak_count **)(v21 - 56);
      if (v24) {
        nitro::nitro_function::nitro_function(v24);
      }
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v19);
  goto LABEL_8;
}

void EspressoWrap__Net__build_variables_loader()
{
}

void sub_1927C861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__build_initializer(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)long long __p = 0u;
  long long v46 = 0u;
  float v47 = 1.0;
  if (a2 < 1) {
LABEL_94:
  }
    operator new();
  uint64_t v7 = 0;
  *(void *)uint64_t v41 = a2;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, *(char **)(a3 + 24 * v7));
    Espresso::net::get_global(&__str, *(void *)(a1 + 144), (unsigned __int8 *)&__s);
    uint64_t v8 = a3 + 24 * v7;
    uint64_t v9 = *(void *)(v8 + 12);
    int v43 = *(_DWORD *)(v8 + 8);
    long long v44 = *(_OWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
    int v10 = *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 24);
    unint64_t v11 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__s);
    unint64_t v12 = v11;
    int8x8_t v13 = (int8x8_t)__p[1];
    if (__p[1])
    {
      uint64_t v14 = a3;
      uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v15.i16[0] = vaddlv_u8(v15);
      unint64_t v16 = v15.u32[0];
      if (v15.u32[0] > 1uLL)
      {
        unint64_t v4 = v11;
        if ((void *)v11 >= __p[1]) {
          unint64_t v4 = v11 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v4 = ((unint64_t)__p[1] - 1) & v11;
      }
      unsigned __int8 v17 = (void **)*((void *)__p[0] + v4);
      if (v17)
      {
        BOOL v18 = (char *)*v17;
        if (*v17)
        {
          do
          {
            unint64_t v19 = *((void *)v18 + 1);
            if (v19 == v12)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v18 + 16, (unsigned __int8 *)&__s))
              {
                a3 = v14;
                int v39 = v43;
                goto LABEL_79;
              }
            }
            else
            {
              if (v16 > 1)
              {
                if ((void *)v19 >= __p[1]) {
                  v19 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v19 &= (unint64_t)__p[1] - 1;
              }
              if (v19 != v4) {
                break;
              }
            }
            BOOL v18 = *(char **)v18;
          }
          while (v18);
        }
      }
      a3 = v14;
    }
    BOOL v18 = (char *)operator new(0x58uLL);
    *(void *)BOOL v18 = 0;
    *((void *)v18 + 1) = v12;
    int v20 = (std::string *)(v18 + 16);
    if (SHIBYTE(v50) < 0)
    {
      std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
    }
    else
    {
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = __s;
      *((void *)v18 + 4) = v50;
    }
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
    *((_DWORD *)v18 + 11) = 1065353216;
    *(_OWORD *)(v18 + 52) = xmmword_192DCA4C0;
    *(_OWORD *)(v18 + 68) = xmmword_192DC5D50;
    float v21 = (float)(unint64_t)(*((void *)&v46 + 1) + 1);
    if (!__p[1] || (float)(v47 * (float)(unint64_t)__p[1]) < v21) {
      break;
    }
LABEL_69:
    uint64_t v37 = (void *)*((void *)__p[0] + v4);
    if (v37)
    {
      *(void *)BOOL v18 = *v37;
      int v39 = v43;
    }
    else
    {
      *(void *)BOOL v18 = v46;
      *(void *)&long long v46 = v18;
      *((void *)__p[0] + v4) = &v46;
      int v39 = v43;
      if (!*(void *)v18) {
        goto LABEL_78;
      }
      unint64_t v38 = *(void *)(*(void *)v18 + 8);
      if ((*(void *)&v13 & (*(void *)&v13 - 1)) != 0)
      {
        if (v38 >= *(void *)&v13) {
          v38 %= *(void *)&v13;
        }
      }
      else
      {
        v38 &= *(void *)&v13 - 1;
      }
      uint64_t v37 = (char *)__p[0] + 8 * v38;
    }
    void *v37 = v18;
LABEL_78:
    ++*((void *)&v46 + 1);
LABEL_79:
    *((_DWORD *)v18 + 10) = v39;
    *(void *)(v18 + 44) = v9;
    *((_DWORD *)v18 + 13) = a4;
    *(_OWORD *)(v18 + 56) = v44;
    *((_DWORD *)v18 + 18) = v10;
    *(void *)(v18 + 76) = 0xFFFFFFFF00000001;
    *((_WORD *)v18 + 42) = 0;
    if (__str.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v50) < 0) {
      operator delete((void *)__s);
    }
    if (++v7 == *(void *)v41) {
      goto LABEL_94;
    }
  }
  BOOL v22 = ((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0;
  if (__p[1] < (void *)3) {
    BOOL v22 = 1;
  }
  unint64_t v23 = v22 | (2 * (uint64_t)__p[1]);
  unint64_t v24 = vcvtps_u32_f32(v21 / v47);
  if (v23 <= v24) {
    int8x8_t prime = (int8x8_t)v24;
  }
  else {
    int8x8_t prime = (int8x8_t)v23;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
  }
  int8x8_t v13 = (int8x8_t)__p[1];
  if ((void *)*(void *)&prime > __p[1]) {
    goto LABEL_35;
  }
  if ((void *)*(void *)&prime < __p[1])
  {
    unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)&v46 + 1) / v47);
    if (__p[1] < (void *)3
      || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      unint64_t v32 = std::__next_prime(v32);
    }
    else
    {
      uint64_t v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2) {
        unint64_t v32 = v34;
      }
    }
    if (*(void *)&prime <= v32) {
      int8x8_t prime = (int8x8_t)v32;
    }
    if ((void *)*(void *)&prime >= __p[1])
    {
      int8x8_t v13 = (int8x8_t)__p[1];
    }
    else
    {
      if (prime)
      {
LABEL_35:
        if (*(void *)&prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v26 = operator new(8 * *(void *)&prime);
        long long v27 = __p[0];
        __p[0] = v26;
        if (v27) {
          operator delete(v27);
        }
        uint64_t v28 = 0;
        __p[1] = (void *)prime;
        do
          *((void *)__p[0] + v28++) = 0;
        while (*(void *)&prime != v28);
        int v29 = (void **)v46;
        if ((void)v46)
        {
          unint64_t v30 = *(void *)(v46 + 8);
          uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
          v31.i16[0] = vaddlv_u8(v31);
          if (v31.u32[0] > 1uLL)
          {
            if (v30 >= *(void *)&prime) {
              v30 %= *(void *)&prime;
            }
          }
          else
          {
            v30 &= *(void *)&prime - 1;
          }
          *((void *)__p[0] + v30) = &v46;
          for (i = *v29; i; unint64_t v30 = v36)
          {
            unint64_t v36 = i[1];
            if (v31.u32[0] > 1uLL)
            {
              if (v36 >= *(void *)&prime) {
                v36 %= *(void *)&prime;
              }
            }
            else
            {
              v36 &= *(void *)&prime - 1;
            }
            if (v36 != v30)
            {
              if (!*((void *)__p[0] + v36))
              {
                *((void *)__p[0] + v36) = v29;
                goto LABEL_60;
              }
              *int v29 = (void *)*i;
              *uint64_t i = **((void **)__p[0] + v36);
              **((void **)__p[0] + v36) = i;
              uint64_t i = v29;
            }
            unint64_t v36 = v30;
LABEL_60:
            int v29 = (void **)i;
            uint64_t i = (void *)*i;
          }
        }
        int8x8_t v13 = prime;
        goto LABEL_64;
      }
      long long v40 = __p[0];
      __p[0] = 0;
      if (v40) {
        operator delete(v40);
      }
      int8x8_t v13 = 0;
      __p[1] = 0;
    }
  }
LABEL_64:
  if ((*(void *)&v13 & (*(void *)&v13 - 1)) != 0)
  {
    if (v12 >= *(void *)&v13) {
      unint64_t v4 = v12 % *(void *)&v13;
    }
    else {
      unint64_t v4 = v12;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v13 - 1) & v12;
  }
  goto LABEL_69;
}

void sub_1927C9324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a67, (char *)a68);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x238]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__batch_split(uint64_t a1, char *a2, char *a3, char *__s, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(v17, __s);
  if (v18 < 0)
  {
    if (v17[1] != 4) {
      goto LABEL_8;
    }
    uint64_t v9 = (_DWORD *)v17[0];
  }
  else
  {
    if (v18 != 4) {
      goto LABEL_8;
    }
    uint64_t v9 = v17;
  }
  if (*v9 == 1851876717)
  {
    Espresso::string_split((Espresso *)&v15, a2);
    Espresso::string_split((Espresso *)&v13, a3);
    int v10 = (char *)operator new(0x60uLL);
    *(_OWORD *)(v10 + 8) = 0u;
    *(void *)int v10 = &unk_1EE387CB0;
    *((void *)v10 + 3) = &unk_1EE35B128;
    *((_DWORD *)v10 + 8) = 0;
    *(_OWORD *)(v10 + 40) = v15;
    *((void *)v10 + 7) = v16;
    long long v15 = 0u;
    uint64_t v16 = 0;
    *((_OWORD *)v10 + 4) = v13;
    uint64_t v11 = v14;
    long long v13 = 0u;
    uint64_t v14 = 0;
    *((void *)v10 + 10) = v11;
    *((void *)v10 + 11) = a5;
    v12[0] = &unk_1EE33DDD8;
    v12[1] = v10 + 24;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    uint64_t v12[2] = v10;
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v10);
    Espresso::pass_batch_split::run_on_network((Espresso::pass_batch_split *)v12, *(Espresso::net **)(a1 + 144));
  }
LABEL_8:
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("only accumulation_type == mean is supported");
}

void sub_1927C9814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a12 = (void ***)&unk_1EE3719B0;
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  nitro::nitro_function::nitro_function(v19);
  a12 = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a15 = (void **)&a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_batch_split>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_params_batch_split>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_params_batch_split>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void EspressoWrap__Net__sgd_hoisting(uint64_t a1)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3880A0;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE35CD50;
  uint64_t v5 = &unk_1EE34D168;
  uint64_t v6 = v2 + 1;
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v7 = v2;
  nitro::nitro_function::nitro_function(v2);
  Espresso::pass_sgd_hoisting::run_on_network(*(Espresso::net **)(a1 + 144), (uint64_t)&v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  operator new();
}

void sub_1927C9AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  nitro::nitro_function::nitro_function(v14);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_sgd_hoisting>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_params_sgd_hoisting>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3880A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_params_sgd_hoisting>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3880A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void EspressoWrap__Net__reload_on_platform(uint64_t a1, Espresso::net *a2)
{
  int v2 = (int)a2;
  uint64_t v3 = (void *)(a1 + 144);
  Espresso::pass_constant_if_conditions::hint_fallback_constant_ifs_from_metal(*(Espresso::pass_constant_if_conditions **)(a1 + 144), a2);
  if (get_pyespresso_contexts(void)::onceToken != -1) {
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_4260);
  }
  int v5 = v2;
  unint64_t v4 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr, v2, &v5);
  Espresso::get_internal_context((uint64_t **)v4[5], &v6);
  Espresso::reload_network_on_context(v3, (uint64_t)&v6, *(_DWORD *)(**(void **)(*v3 + 32) + 12), (uint64_t)v8);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  operator new();
}

void sub_1927C9CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__pprint(uint64_t a1)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v5[3] = 0;
  Espresso::net::pprint(v1, (uint64_t)__p, (uint64_t)v5);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1927C9D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__interface_revision()
{
  return 1;
}

void EspressoWrap__Net__mark_block_start(uint64_t a1, char *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 152);
  v6[0] = *(void *)(a1 + 144);
  v6[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::mark_block_start(v6, (uint64_t)__p, 0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  EspressoWrap__Net__touch(a1);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1927C9E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Net__mark_block_end(uint64_t a1, char *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 152);
  v6[0] = *(void *)(a1 + 144);
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::mark_block_end(v6, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  EspressoWrap__Net__touch(a1);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1927C9ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Net__guard_block_with_if (uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 144);
  uint64_t v2 = *(void *)(a1 + 152);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::guard_block_with_if (v3, (uint64_t)__p);
}

void sub_1927C9F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__MILES__extract_consts(char *a1, char *a2, std::vector<std::string>::size_type a3, char **a4)
{
  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v15);
  if (v15.__begin_) {
    operator new();
  }
  v16[0] = 0;
  v16[1] = 0;
  load_mil_program((MIL::ParserOptions *)&v17, (uint64_t)v16, a1);
  std::vector<std::string>::vector(&v15, a3);
  if (a3)
  {
    uint64_t v8 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, *a4);
      uint64_t v9 = &v15.__begin_[v8];
      if (SHIBYTE(v15.__begin_[v8].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9->__r_.__value_.__l.__data_);
      }
      long long v10 = v13;
      v9->__r_.__value_.__r.__words[2] = v14;
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      ++v8;
      ++a4;
      --a3;
    }
    while (a3);
  }
  Espresso::MILES::ExtractConsts((uint64_t *)&v13, v17, (long long **)&v15);
  serialize_mil_program(v13, a2);
  uint64_t v11 = v13;
  *(void *)&long long v13 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *(void *)&long long v13 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  uint64_t v12 = v17;
  uint64_t v17 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
}

void sub_1927CA184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t load_mil_program(MIL::ParserOptions *a1, uint64_t a2, char *a3)
{
  MIL::ParserOptions::Make(&v11, a1);
  uint64_t v5 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v5 + 32))(v5, __p, 1);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 64))(v11, 1);
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Text::ParseProgramFromFile();
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1927CA38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1927CA484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void serialize_mil_program(uint64_t a1, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  while (size)
  {
    int v5 = p_str->__r_.__value_.__s.__data_[--size];
    if (v5 == 92 || v5 == 47)
    {
      std::string::size_type v6 = size;
      goto LABEL_10;
    }
  }
  std::string::size_type v6 = -1;
LABEL_10:
  std::string::basic_string(&v10, &__str, 0, v6, (std::allocator<char> *)&v12);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = __str;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v8, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string v8 = v10;
  }
  memset(v7, 0, sizeof(v7));
  Espresso::MILUtil::SerializeProgram(a1, (uint64_t)&v9, (uint64_t)&v8, (uint64_t)v7, 0, 0);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1927CA5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 - 49) < 0) {
    operator delete(*(void **)(v25 - 72));
  }
  if (*(char *)(v25 - 25) < 0) {
    operator delete(*(void **)(v25 - 48));
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__MILES__consts_as_inputs(char *a1, uint64_t a2, std::vector<std::string>::size_type a3, char **a4)
{
  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v12);
  if (v12.__begin_) {
    operator new();
  }
  v13[0] = 0;
  v13[1] = 0;
  load_mil_program((MIL::ParserOptions *)&v14, (uint64_t)v13, a1);
  std::vector<std::string>::vector(&v12, a3);
  if (a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v10, *a4);
      std::string v8 = &v12.__begin_[v7];
      if (SHIBYTE(v12.__begin_[v7].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v8->__r_.__value_.__l.__data_);
      }
      long long v9 = v10;
      v8->__r_.__value_.__r.__words[2] = v11;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      ++v7;
      ++a4;
      --a3;
    }
    while (a3);
  }
  Espresso::MILES::ConstsAsInputs();
}

void sub_1927CA808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

void EspressoWrap__MILES__grad(char *a1, uint64_t a2, uint64_t a3, std::vector<std::string>::size_type a4, char **a5)
{
  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v13);
  if (v13.__begin_) {
    operator new();
  }
  v14[0] = 0;
  v14[1] = 0;
  load_mil_program((MIL::ParserOptions *)&v15, (uint64_t)v14, a1);
  std::vector<std::string>::vector(&v13, a4);
  if (a4)
  {
    uint64_t v8 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v11, *a5);
      long long v9 = &v13.__begin_[v8];
      if (SHIBYTE(v13.__begin_[v8].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9->__r_.__value_.__l.__data_);
      }
      long long v10 = v11;
      v9->__r_.__value_.__r.__words[2] = v12;
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      ++v8;
      ++a5;
      --a4;
    }
    while (a4);
  }
  Espresso::MILES::Grad((uint64_t)&v11, v15);
}

void sub_1927CAAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::MPSGraphEngine::Kernels::general_slice_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) - *(void *)a3 == 64 && *(void *)(a3 + 32) - *(void *)(a3 + 24) == 64)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v13, *(const Espresso::layer_shape **)a3, 0);
    BOOL v5 = v14 != 0;
    if (!v14)
    {
      std::string::size_type v6 = *a2;
      uint64_t v7 = a2[1];
      v12[0] = v6;
      v12[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v10, "[Dispatch::MPSGraph::general_slice_kernel] unsupported: input has 0 rank");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v10, a3, 0);
      Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
      uint64_t v20 = (void **)v17;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v20);
      uint64_t v20 = (void **)v16;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      if (v7) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v7);
      }
    }
  }
  else
  {
    uint64_t v8 = a2[1];
    v19[0] = *a2;
    v19[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "[Dispatch::MPSGraph::general_slice_kernel] unsupported: invalid number of inputs or outputs. ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v13, a3, 0);
    Espresso::emit_kernel_validation_warning(v19, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    v10[0] = v17;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
    v10[0] = v16;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v8);
    }
    return 0;
  }
  return v5;
}

void sub_1927CAD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a24);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::general_slice_kernel::~general_slice_kernel(Espresso::MPSGraphEngine::Kernels::general_slice_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_params_batch_split::~pass_params_batch_split(Espresso::pass_params_batch_split *this)
{
  *(void *)this = &unk_1EE35B128;
  uint64_t v1 = (void **)((char *)this + 16);
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);

  JUMPOUT(0x192FF16B0);
}

{
  void **v1;
  void **v2;

  *(void *)this = &unk_1EE35B128;
  uint64_t v1 = (void **)((char *)this + 16);
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void Espresso::pass_batch_split::run_on_network(Espresso::pass_batch_split *this, Espresso::net *a2)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  if (!*((void *)a2 + 121))
  {
    v155[0] = 0;
    v155[1] = 0;
    Espresso::net::setup_script((uint64_t)a2, v155, *(unsigned int *)(**((void **)a2 + 4) + 12));
  }
  char v4 = (const void *)*((void *)this + 1);
  if (!v4
  {
    char v153 = 0;
    uint64_t v154 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("before run_on_network, set_options needs to be called to set p as pass_params_batch_splitting");
  }
  uint64_t v6 = *((void *)this + 2);
  char v153 = v5;
  uint64_t v154 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((_DWORD *)v5 + 2)) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("only accumulation_type::mean is supported.");
  }
  uint64_t v7 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
  blob_names_to_indices(&v152, v153 + 2, (uint64_t)v7);
  blob_names_to_indices(&v151, v153 + 5, (uint64_t)v7);
  int v125 = a2;
  uint64_t v8 = (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4;
  unint64_t v150 = v8;
  begiuint64_t n = v152.__begin_;
  unint64_t v10 = v8;
  if (v152.__begin_ != v152.__end_)
  {
    uint64_t v11 = v7[22];
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7[23] - v11) >> 3);
    unint64_t v10 = v8;
    do
    {
      unint64_t v13 = *begin;
      if (v12 <= v13) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      int v14 = (unint64_t **)(v11 + 24 * (int)v13);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      while (v15 != v16)
      {
        unint64_t v17 = *v15;
        if (*v15 < v10)
        {
          unint64_t v150 = *v15;
          unint64_t v10 = v17;
        }
        ++v15;
      }
      ++begin;
    }
    while (begin != v152.__end_);
  }
  unint64_t v149 = 0;
  char v18 = v151.__begin_;
  if (v151.__begin_ == v151.__end_)
  {
    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v20 = v7[19];
    unint64_t v21 = (v7[20] - v20) >> 3;
    do
    {
      unint64_t v22 = *v18;
      if (v21 <= v22) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v23 = *(void *)(v20 + 8 * v22);
      if (v23 > v19)
      {
        unint64_t v149 = v23;
        unint64_t v19 = v23;
      }
      ++v18;
    }
    while (v18 != v151.__end_);
  }
  if (v10 >= v19) {
    Espresso::throw_exception_selector<Espresso::generic_error,unsigned long &,unsigned long &>(v10, v19);
  }
  unint64_t v147 = v8;
  unint64_t v148 = v8;
  std::string __p = 0;
  long long v145 = 0;
  unint64_t v146 = 0;
  memset(&v143, 0, sizeof(v143));
  memset(&v142, 0, sizeof(v142));
  long long v129 = v7;
  if (v19 + 1 <= v10) {
    goto LABEL_105;
  }
  uint64_t v24 = 0;
  int v126 = 0;
  uint64_t v25 = 16 * v10;
  while (1)
  {
    uint64_t v26 = *(void *)(*((void *)a2 + 4) + v25);
    long long v27 = (uint64_t **)(v26 + 40);
    int v28 = *(char *)(v26 + 63);
    if (v28 < 0)
    {
      if (*(void *)(v26 + 48) == 5)
      {
        long long v27 = (uint64_t **)*v27;
LABEL_33:
        int v29 = *(_DWORD *)v27;
        int v30 = *((unsigned __int8 *)v27 + 4);
        BOOL v31 = v29 == 1767859811 && v30 == 102;
        if (v31)
        {
          unint64_t v32 = *(const void **)(v26 + 64);
          if (v32)
          {
            if (v33)
            {
              uint64_t v34 = *(std::__shared_weak_count **)(v26 + 72);
              if (v34) {
                atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              uint64_t v34 = 0;
            }
          }
          else
          {
            uint64_t v34 = 0;
            uint8x8_t v33 = 0;
          }
          id v35 = v33 + 296;
          unint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((void *)a2 + 116, (uint64_t)(v33 + 296));
          if (!v36)
          {
            if (v33[319] < 0) {
              id v35 = (void *)*v35;
            }
            *(void *)uint64_t v130 = v35;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find layer %s", v130);
          }
          if (v36[5] > v19)
          {
            if (v126 >= 1) {
              Espresso::throw_exception_selector<Espresso::not_implemented_error>("Only support single if inside the transformation region");
            }
            unint64_t v147 = v10;
            if (!v24) {
              Espresso::throw_exception_selector<Espresso::generic_error>("It's not valid to have a cond number to be split");
            }
            int v126 = 1;
          }
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          uint64_t v7 = v129;
        }
      }
    }
    else if (v28 == 5)
    {
      goto LABEL_33;
    }
    ++v10;
    --v24;
    v25 += 16;
    if (v19 + 1 == v10)
    {
      if (v147 >= v148) {
        goto LABEL_105;
      }
      std::string::operator=(&v143, (const std::string *)(*(void *)(*((void *)a2 + 4) + 16 * v147) + 16));
      unint64_t v10 = (unint64_t)a2 + 56;
      *(void *)uint64_t v130 = &v147;
      uint64_t v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v147, (uint64_t)&std::piecewise_construct, (uint64_t **)v130);
      std::string::operator=(&v142, (const std::string *)v37[3]);
      unint64_t v38 = v147 - 1;
      unint64_t v39 = v150;
      if (v150 >= v147 - 1)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::not_implemented_error::not_implemented_error(exception);
      }
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)v130, v142.__r_.__value_.__l.__data_, v142.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)uint64_t v130 = v142;
      }
      while (1)
      {
        long long v40 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)v125 + 12, v38);
        if (!v40) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        uint64_t v41 = v40[3];
        uint64_t v42 = v40[4];
        if (v41 != v42) {
          break;
        }
LABEL_98:
        if (--v38 < v39)
        {
          char v62 = 1;
          uint64_t v7 = v129;
          goto LABEL_102;
        }
      }
      if (v130[23] >= 0) {
        uint64_t v43 = v130[23];
      }
      else {
        uint64_t v43 = *(void *)&v130[8];
      }
      if (v130[23] >= 0) {
        long long v44 = v130;
      }
      else {
        long long v44 = *(unsigned char **)v130;
      }
      while (1)
      {
        uint64_t v45 = *(unsigned __int8 *)(v41 + 23);
        if ((v45 & 0x80u) == 0) {
          uint64_t v46 = *(unsigned __int8 *)(v41 + 23);
        }
        else {
          uint64_t v46 = *(void *)(v41 + 8);
        }
        if (v46 == v43)
        {
          if ((v45 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v41, v44, *(void *)(v41 + 8)))
            {
LABEL_79:
              std::string::size_type v48 = v145;
              if ((unint64_t)v145 >= v146)
              {
                uint64_t v50 = (unint64_t *)__p;
                uint64_t v51 = ((char *)v145 - (unsigned char *)__p) >> 3;
                unint64_t v52 = v51 + 1;
                if ((unint64_t)(v51 + 1) >> 61) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v53 = v146 - (void)__p;
                if ((uint64_t)(v146 - (void)__p) >> 2 > v52) {
                  unint64_t v52 = v53 >> 2;
                }
                BOOL v54 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8;
                unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
                if (!v54) {
                  unint64_t v55 = v52;
                }
                if (v55)
                {
                  unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v55);
                  uint64_t v50 = (unint64_t *)__p;
                  std::string::size_type v48 = v145;
                }
                else
                {
                  uint64_t v56 = 0;
                }
                char v57 = (unint64_t *)(v55 + 8 * v51);
                *char v57 = v38;
                char v49 = v57 + 1;
                while (v48 != v50)
                {
                  unint64_t v58 = *--v48;
                  *--char v57 = v58;
                }
                std::string __p = v57;
                long long v145 = v49;
                unint64_t v146 = v55 + 8 * v56;
                uint64_t v7 = v129;
                if (v50) {
                  operator delete(v50);
                }
              }
              else
              {
                unint64_t *v145 = v38;
                char v49 = v48 + 1;
                uint64_t v7 = v129;
              }
              long long v145 = v49;
              uint64_t v59 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)v10, v38);
              if (!v59) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              int v60 = (const std::string *)v59[3];
              __int16 v61 = (const std::string *)v59[4];
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v60) >> 3) > 1)
              {
                char v62 = 0;
              }
              else
              {
                if (v61 != v60)
                {
                  std::string::operator=((std::string *)v130, v60);
                  goto LABEL_98;
                }
                char v62 = 1;
              }
LABEL_102:
              if ((v130[23] & 0x80000000) != 0) {
                operator delete(*(void **)v130);
              }
              if ((v62 & 1) == 0) {
                Espresso::throw_exception_selector<Espresso::not_implemented_error>("Only cond number produced by single stream is supported");
              }
LABEL_105:
              *(_OWORD *)uint64_t v139 = 0u;
              long long v140 = 0u;
              int v141 = 1065353216;
              std::vector<int>::pointer v63 = v152.__begin_;
              std::vector<int>::pointer end = v152.__end_;
              if (v152.__begin_ != v152.__end_)
              {
                unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
                do
                {
                  unint64_t v64 = *v63;
                  uint64_t v65 = v7[7];
                  if (0xAAAAAAAAAAAAAAABLL * ((v7[8] - v65) >> 3) <= v64) {
                    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                  }
                  uint64_t v66 = (unsigned __int8 *)(v65 + 24 * (int)v64);
                  *(void *)uint64_t v130 = v66;
                  uint64_t v67 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, v66, (long long **)v130);
                  unint64_t v69 = v67 + 40;
                  uint64_t v68 = (void *)*((void *)v67 + 5);
                  if (v68)
                  {
                    *((void *)v67 + 6) = v68;
                    operator delete(v68);
                    *unint64_t v69 = 0;
                    v69[1] = 0;
                    _OWORD v69[2] = 0;
                  }
                  *unint64_t v69 = 0;
                  v69[1] = 0;
                  _OWORD v69[2] = 0;
                  uint64_t v70 = v7[22];
                  if (0xAAAAAAAAAAAAAAABLL * ((v7[23] - v70) >> 3) <= v64) {
                    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                  }
                  uint64_t v71 = (uint64_t **)(v70 + 24 * (int)v64);
                  long long v72 = *v71;
                  long long v73 = v71[1];
                  while (v72 != v73)
                  {
                    uint64_t v74 = *v72;
                    *(void *)uint64_t v130 = v66;
                    uint64_t v75 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, v66, (long long **)v130);
                    int v76 = v75;
                    uint64_t v77 = (char *)*((void *)v75 + 6);
                    unint64_t v78 = *((void *)v75 + 7);
                    if ((unint64_t)v77 >= v78)
                    {
                      long long v80 = (char *)*((void *)v75 + 5);
                      uint64_t v81 = (v77 - v80) >> 3;
                      if ((unint64_t)(v81 + 1) >> 61) {
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v82 = v78 - (void)v80;
                      unint64_t v83 = (uint64_t)(v78 - (void)v80) >> 2;
                      if (v83 <= v81 + 1) {
                        unint64_t v83 = v81 + 1;
                      }
                      if (v82 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v84 = v83;
                      }
                      if (v84)
                      {
                        unint64_t v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v84);
                        long long v80 = (char *)*((void *)v76 + 5);
                        uint64_t v77 = (char *)*((void *)v76 + 6);
                      }
                      else
                      {
                        uint64_t v85 = 0;
                      }
                      uint64_t v86 = (void *)(v84 + 8 * v81);
                      *uint64_t v86 = v74;
                      long long v79 = v86 + 1;
                      while (v77 != v80)
                      {
                        uint64_t v87 = *((void *)v77 - 1);
                        v77 -= 8;
                        *--uint64_t v86 = v87;
                      }
                      *((void *)v76 + 5) = v86;
                      *((void *)v76 + 6) = v79;
                      *((void *)v76 + 7) = v84 + 8 * v85;
                      if (v80) {
                        operator delete(v80);
                      }
                    }
                    else
                    {
                      *(void *)uint64_t v77 = v74;
                      long long v79 = v77 + 8;
                    }
                    *((void *)v76 + 6) = v79;
                    ++v72;
                  }
                  ++v63;
                  uint64_t v7 = v129;
                }
                while (v63 != end);
              }
              *(_OWORD *)int v136 = 0u;
              *(_OWORD *)char v137 = 0u;
              float v138 = 1.0;
              std::vector<int>::pointer v88 = v151.__begin_;
              std::vector<int>::pointer v128 = v151.__end_;
              if (v151.__begin_ == v151.__end_)
              {
LABEL_176:
                long long v112 = v135;
                v135[0] = 0;
                v135[1] = 0;
                long long v134 = v135;
                uint64_t v113 = (uint64_t)v125;
                double v114 = (void *)*((void *)v125 + 29);
                if (v114 != (void *)((char *)v125 + 240))
                {
                  do
                  {
                    double v156 = (long long *)(v114 + 4);
                    __int16 v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v125 + 136, (unsigned __int8 *)v114 + 32, &v156);
                    Espresso::abstract_blob_container::shape(v130, *((void *)v115 + 5));
                    double v156 = (long long *)(v114 + 4);
                    int v116 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v134, v114 + 4, &v156);
                    long long v117 = *(_OWORD *)&v130[16];
                    *(_OWORD *)(v116 + 56) = *(_OWORD *)v130;
                    *(_OWORD *)(v116 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v117;
                    *((void *)v116 + 11) = v131;
                    double v118 = (void *)*((void *)v116 + 12);
                    if (v118)
                    {
                      *((void *)v116 + 13) = v118;
                      operator delete(v118);
                      *((void *)v116 + 12) = 0;
                      *((void *)v116 + 13) = 0;
                      *((void *)v116 + 14) = 0;
                    }
                    *((_OWORD *)v116 + 6) = v132;
                    *((void *)v116 + 14) = v133;
                    uint64_t v119 = (void *)v114[1];
                    if (v119)
                    {
                      do
                      {
                        int v120 = v119;
                        uint64_t v119 = (void *)*v119;
                      }
                      while (v119);
                    }
                    else
                    {
                      do
                      {
                        int v120 = (void *)v114[2];
                        BOOL v31 = *v120 == (void)v114;
                        double v114 = v120;
                      }
                      while (!v31);
                    }
                    double v114 = v120;
                  }
                  while (v120 != (void *)((char *)v125 + 240));
                  long long v112 = v134;
                  uint64_t v113 = (uint64_t)v125;
                }
                unint64_t v121 = *((int *)v112 + 17);
                unint64_t v122 = v153[8];
                if (v121 / v122 * v122 == v121)
                {
                  *(void *)uint64_t v130 = v121 / v122;
                  unsigned int v157 = 0;
                  char v123 = operator new(0x60uLL);
                  *char v123 = &unk_1EE37C1C8;
                  v123[1] = v139;
                  void v123[2] = v136;
                  v123[3] = &v150;
                  v123[4] = &__p;
                  v123[5] = &v153;
                  v123[6] = v130;
                  v123[7] = &v149;
                  v123[8] = &v147;
                  v123[9] = &v148;
                  v123[10] = &v143;
                  v123[11] = &v142;
                  unsigned int v157 = v123;
                  Espresso::transform_network_inplace(v113);
                }
                Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>("num_splits %lu does not devide batch_size %lu\n", v122, v121);
              }
              while (2)
              {
                unint64_t v89 = *v88;
                uint64_t v90 = v7[7];
                if (0xAAAAAAAAAAAAAAABLL * ((v7[8] - v90) >> 3) <= v89) {
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v91 = v7[19];
                if (v89 >= (v7[20] - v91) >> 3) {
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v92 = v90 + 24 * (int)v89;
                unint64_t v93 = std::__string_hash<char>::operator()[abi:ne180100](v92);
                unint64_t v94 = v93;
                unint64_t v95 = (unint64_t)v136[1];
                if (v136[1])
                {
                  uint8x8_t v96 = (uint8x8_t)vcnt_s8((int8x8_t)v136[1]);
                  v96.i16[0] = vaddlv_u8(v96);
                  unint64_t v97 = v96.u32[0];
                  if (v96.u32[0] > 1uLL)
                  {
                    unint64_t v10 = v93;
                    if ((void *)v93 >= v136[1]) {
                      unint64_t v10 = v93 % (unint64_t)v136[1];
                    }
                  }
                  else
                  {
                    unint64_t v10 = ((unint64_t)v136[1] - 1) & v93;
                  }
                  uint64_t v98 = (unsigned __int8 **)*((void *)v136[0] + v10);
                  if (v98)
                  {
                    for (uint64_t i = *v98; i; uint64_t i = *(unsigned __int8 **)i)
                    {
                      unint64_t v100 = *((void *)i + 1);
                      if (v100 == v94)
                      {
                        if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)v92)) {
                          goto LABEL_175;
                        }
                      }
                      else
                      {
                        if (v97 > 1)
                        {
                          if (v100 >= v95) {
                            v100 %= v95;
                          }
                        }
                        else
                        {
                          v100 &= v95 - 1;
                        }
                        if (v100 != v10) {
                          break;
                        }
                      }
                    }
                  }
                }
                uint64_t v101 = operator new(0x30uLL);
                void *v101 = 0;
                v101[1] = v94;
                float v102 = (std::string *)(v101 + 2);
                if (*(char *)(v92 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v102, *(const std::string::value_type **)v92, *(void *)(v92 + 8));
                }
                else
                {
                  long long v103 = *(_OWORD *)v92;
                  v101[4] = *(void *)(v92 + 16);
                  *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
                }
                v101[5] = *(void *)(v91 + 8 * v89);
                float v104 = (float)((unint64_t)v137[1] + 1);
                if (!v95 || (float)(v138 * (float)v95) < v104)
                {
                  BOOL v105 = (v95 & (v95 - 1)) != 0;
                  if (v95 < 3) {
                    BOOL v105 = 1;
                  }
                  unint64_t v106 = v105 | (2 * v95);
                  unint64_t v107 = vcvtps_u32_f32(v104 / v138);
                  if (v106 <= v107) {
                    size_t v108 = v107;
                  }
                  else {
                    size_t v108 = v106;
                  }
                  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v136, v108);
                  unint64_t v95 = (unint64_t)v136[1];
                  if (((unint64_t)v136[1] & ((unint64_t)v136[1] - 1)) != 0)
                  {
                    if ((void *)v94 >= v136[1]) {
                      unint64_t v10 = v94 % (unint64_t)v136[1];
                    }
                    else {
                      unint64_t v10 = v94;
                    }
                  }
                  else
                  {
                    unint64_t v10 = ((unint64_t)v136[1] - 1) & v94;
                  }
                }
                char v109 = v136[0];
                uint64_t v110 = (void *)*((void *)v136[0] + v10);
                if (v110)
                {
                  void *v101 = *v110;
                  goto LABEL_173;
                }
                void *v101 = v137[0];
                v137[0] = v101;
                v109[v10] = v137;
                if (*v101)
                {
                  unint64_t v111 = *(void *)(*v101 + 8);
                  if ((v95 & (v95 - 1)) != 0)
                  {
                    if (v111 >= v95) {
                      v111 %= v95;
                    }
                  }
                  else
                  {
                    v111 &= v95 - 1;
                  }
                  uint64_t v110 = (char *)v136[0] + 8 * v111;
LABEL_173:
                  void *v110 = v101;
                }
                ++v137[1];
LABEL_175:
                ++v88;
                uint64_t v7 = v129;
                if (v88 == v128) {
                  goto LABEL_176;
                }
                continue;
              }
            }
          }
          else
          {
            if (!*(unsigned char *)(v41 + 23)) {
              goto LABEL_79;
            }
            uint64_t v47 = 0;
            while (*(unsigned __int8 *)(v41 + v47) == v44[v47])
            {
              if (v45 == ++v47) {
                goto LABEL_79;
              }
            }
          }
        }
        v41 += 24;
        if (v41 == v42) {
          goto LABEL_98;
        }
      }
    }
  }
}

void sub_1927CBD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57)
{
  __cxa_free_exception(v57);
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a56) {
    operator delete(a56);
  }
  int v60 = *(void **)(v58 - 216);
  if (v60)
  {
    *(void *)(v58 - 208) = v60;
    operator delete(v60);
  }
  __int16 v61 = *(void **)(v58 - 192);
  if (v61)
  {
    *(void *)(v58 - 184) = v61;
    operator delete(v61);
  }
  char v62 = *(std::__shared_weak_count **)(v58 - 160);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  _Unwind_Resume(a1);
}

_DWORD *blob_names_to_indices(std::vector<int> *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = std::vector<int>::vector(a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = (void *)(a3 + 16);
    do
    {
      uint64_t result = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v10, (unsigned __int8 *)(v7 + v8));
      if (!result) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      a1->__begin_[v9++] = result[10];
      uint64_t v7 = *a2;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void sub_1927CBF64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::generic_error,unsigned long &,unsigned long &>(int a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("start = %d, std::vector<int>::pointer end = %d", a1, a2);
}

void *std::__function::__value_func<void ()(Espresso::net &,Espresso::sequential_builder &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso16pass_batch_split14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(uint64_t a1, Espresso::net *a2, Espresso::sequential_builder *this)
{
  uint64_t v3 = this;
  *(void *)&long long v149 = *MEMORY[0x1E4F143B8];
  char v4 = *(const void ***)(*(void *)(a1 + 8) + 16);
  if (v4)
  {
    uint64_t v5 = (uint64_t)a2 + 56;
    do
    {
      name_split((uint64_t)&__str, v4 + 2);
      uint64_t v7 = (std::string::size_type *)v4[5];
      uint64_t v6 = (std::string::size_type *)v4[6];
      while (v7 != v6)
      {
        unint64_t v8 = 0;
        v141.__r_.__value_.__r.__words[0] = 0;
        v141.__r_.__value_.__r.__words[0] = *v7;
        while (1)
        {
          __v.__first_ = &v141;
          unint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, (unint64_t *)&v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
          if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[4] - v9[3]) >> 3)) {
            break;
          }
          __v.__first_ = &v141;
          unint64_t v10 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, (unint64_t *)&v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v)[3]+ 24 * v8);
          uint64_t v11 = v10[23];
          if ((v11 & 0x80u) == 0) {
            unint64_t v12 = (const void *)v10[23];
          }
          else {
            unint64_t v12 = (const void *)*((void *)v10 + 1);
          }
          unint64_t v13 = (const void *)*((unsigned __int8 *)v4 + 39);
          int v14 = (char)v13;
          if ((char)v13 < 0) {
            unint64_t v13 = v4[3];
          }
          if (v12 == v13)
          {
            if (v14 >= 0) {
              uint64_t v15 = (unsigned __int8 *)(v4 + 2);
            }
            else {
              uint64_t v15 = (unsigned __int8 *)v4[2];
            }
            if ((v11 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v10, v15, *((void *)v10 + 1)))
              {
LABEL_23:
                __v.__first_ = &v141;
                uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, (unint64_t *)&v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
                std::string::operator=((std::string *)(v16[3] + 24 * v8), &__str);
                break;
              }
            }
            else
            {
              if (!v10[23]) {
                goto LABEL_23;
              }
              while (*v10 == *v15)
              {
                ++v10;
                ++v15;
                if (!--v11) {
                  goto LABEL_23;
                }
              }
            }
          }
          ++v8;
        }
        ++v7;
      }
      uint64_t v3 = this;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      char v4 = (const void **)*v4;
    }
    while (v4);
  }
  unint64_t v17 = *(const void ***)(*(void *)(a1 + 16) + 16);
  if (v17)
  {
    uint64_t v18 = (uint64_t)a2 + 96;
    do
    {
      name_split((uint64_t)&__str, v17 + 2);
      unint64_t v19 = 0;
      v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v17[5];
      while (1)
      {
        __v.__first_ = &v141;
        uint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, (unint64_t *)&v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
        if (v19 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3)) {
          break;
        }
        __v.__first_ = &v141;
        unint64_t v21 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, (unint64_t *)&v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v)[3]+ 24 * v19);
        uint64_t v22 = v21[23];
        if ((v22 & 0x80u) == 0) {
          unint64_t v23 = (const void *)v21[23];
        }
        else {
          unint64_t v23 = (const void *)*((void *)v21 + 1);
        }
        uint64_t v24 = (const void *)*((unsigned __int8 *)v17 + 39);
        int v25 = (char)v24;
        if ((char)v24 < 0) {
          uint64_t v24 = v17[3];
        }
        if (v23 == v24)
        {
          if (v25 >= 0) {
            uint64_t v26 = (unsigned __int8 *)(v17 + 2);
          }
          else {
            uint64_t v26 = (unsigned __int8 *)v17[2];
          }
          if ((v22 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v21, v26, *((void *)v21 + 1)))
            {
LABEL_48:
              __v.__first_ = &v141;
              long long v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, (unint64_t *)&v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
              std::string::operator=((std::string *)(v27[3] + 24 * v19), &__str);
              break;
            }
          }
          else
          {
            if (!v21[23]) {
              goto LABEL_48;
            }
            while (*v21 == *v26)
            {
              ++v21;
              ++v26;
              if (!--v22) {
                goto LABEL_48;
              }
            }
          }
        }
        ++v19;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      unint64_t v17 = (const void **)*v17;
    }
    while (v17);
  }
  memset(v134, 0, sizeof(v134));
  int v135 = 1065353216;
  uint64_t v28 = a1;
  if (*((void *)a2 + 5) != *((void *)a2 + 4))
  {
    unint64_t v29 = 0;
    uint64_t v80 = (uint64_t)v3 + 112;
    uint64_t v79 = (uint64_t)v3 + 56;
    do
    {
      if (v29 == **(void **)(v28 + 24))
      {
        unint64_t v30 = v29;
        for (unsigned int i = ((*(void *)(*(void *)(v28 + 32) + 8) - **(void **)(v28 + 32)) >> 3) - 1;
              (i & 0x80000000) == 0;
              --i)
        {
          Espresso::sequential_builder::add_layer_from_network(v3, a2, *(void *)(**(void **)(v28 + 32) + 8 * i));
          unint64_t v32 = (unint64_t *)(**(void **)(v28 + 32) + 8 * i);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v134, v32, v32);
        }
        uint8x8_t v33 = *(uint64_t **)(v28 + 40);
        id v35 = *(const void ***)(*v33 + 40);
        uint64_t v34 = *(const void ***)(*v33 + 48);
        if (v35 != v34)
        {
          do
          {
            *(void *)&long long v36 = 0x100000001;
            *((void *)&v36 + 1) = 0x100000001;
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v36;
            __str.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
            long long v129 = 0u;
            long long v130 = 0u;
            uint64_t v131 = 0;
            name_accum((uint64_t)v126, v35);
            Espresso::sequential_builder::constant((uint64_t *)v3, (long long *)&__str, (uint64_t)v126, (uint64_t)&__p, 0.0);
            if (v133 < 0) {
              operator delete(__p);
            }
            if (v127 < 0) {
              operator delete(v126[0]);
            }
            v35 += 3;
          }
          while (v35 != v34);
          uint8x8_t v33 = *(uint64_t **)(v28 + 40);
        }
        v125[0] = 0;
        v125[1] = **(void **)(v28 + 48);
        memset(&v148, 0, sizeof(v148));
        uint64_t v37 = *v33;
        unint64_t v39 = *(const void ***)(v37 + 16);
        unint64_t v38 = *(const void ***)(v37 + 24);
        while (v39 != v38)
        {
          name_split((uint64_t)&v141, v39);
          std::vector<std::string>::pointer end = v148.__end_;
          if (v148.__end_ >= v148.__end_cap_.__value_)
          {
            unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v148.__end_ - (char *)v148.__begin_) >> 3);
            unint64_t v43 = v42 + 1;
            if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v148.__end_cap_.__value_ - (char *)v148.__begin_) >> 3) > v43) {
              unint64_t v43 = 0x5555555555555556 * (((char *)v148.__end_cap_.__value_ - (char *)v148.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v148.__end_cap_.__value_ - (char *)v148.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v44 = v43;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v148.__end_cap_;
            if (v44) {
              unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v44);
            }
            else {
              uint64_t v45 = 0;
            }
            uint64_t v46 = (std::string *)(v44 + 24 * v42);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v44;
            __v.__begin_ = v46;
            __v.__end_cap_.__value_ = (std::string *)(v44 + 24 * v45);
            long long v47 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
            v46->__r_.__value_.__r.__words[2] = v141.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
            memset(&v141, 0, sizeof(v141));
            __v.__end_ = v46 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v148, &__v);
            std::string::size_type v48 = v148.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v148.__end_ = v48;
            uint64_t v3 = this;
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v141.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v41 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
            v148.__end_->__r_.__value_.__r.__words[2] = v141.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v41;
            v148.__end_ = end + 1;
          }
          v39 += 3;
        }
        std::string::basic_string[abi:ne180100]<0>(&v146, "cf_for");
        std::string::basic_string[abi:ne180100]<0>(&v144, "for_batch_split");
        uint64_t v49 = **(void **)(v28 + 40);
        uint64_t v122 = 0;
        uint64_t v120 = 0;
        uint64_t v121 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v120, *(void *)(v49 + 16), *(void *)(v49 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v49 + 24) - *(void *)(v49 + 16)) >> 3));
        uint64_t v118 = 0;
        uint64_t v117 = 0;
        uint64_t v119 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v117, (uint64_t)v148.__begin_, (uint64_t)v148.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v148.__end_ - (char *)v148.__begin_) >> 3));
        memset(&__s, 0, sizeof(__s));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__s, v120, v121, 0xAAAAAAAAAAAAAAABLL * ((v121 - v120) >> 3));
        memset(&v136, 0, sizeof(v136));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v136, v117, v118, 0xAAAAAAAAAAAAAAABLL * ((v118 - v117) >> 3));
        uint64_t v50 = *((void *)v3 + 12);
        LODWORD(__v.__first_) = (***(uint64_t (****)(void))(*((void *)v3 + 14) + 8))(*(void *)(*((void *)v3 + 14) + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v50, v80, (uint64_t)&v146, (uint64_t)v125, (int *)&__v);
        uint64_t v51 = v124;
        float v138 = (std::string **)v123;
        uint64_t v139 = v124;
        if (v124) {
          atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        memset(&__v, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__v, (uint64_t)__s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__s.__r_.__value_.__l.__size_ - __s.__r_.__value_.__r.__words[0]) >> 3));
        memset(&v141, 0, sizeof(v141));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v141, (uint64_t)v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136.__r_.__value_.__l.__size_ - v136.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add_kernel_dbg((uint64_t)v3, &v138, (uint64_t)&v146, (uint64_t)&v144, v79, &__v.__first_, (std::string **)&v141);
        p_v = (void **)&v141;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_v);
        p_v = (void **)&__v;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_v);
        if (v51) {
          nitro::nitro_function::nitro_function(v51);
        }
        if (*(void *)v3) {
          Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)v3, (uint64_t)v123, (long long **)&__s, (uint64_t *)&v136);
        }
        __v.__first_ = &v136;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        __v.__first_ = &__s;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if (v124) {
          nitro::nitro_function::nitro_function(v124);
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v117;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v120;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v144.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v146.__r_.__value_.__l.__data_);
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v148;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        unint64_t v29 = v30;
      }
      unint64_t v52 = v29;
      if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v134, v29))Espresso::sequential_builder::add_layer_from_network(v3, a2, v52); {
      if (v52 == **(void **)(v28 + 56))
      }
      {
        unint64_t v81 = v52;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
        LOBYTE(__v.__end_cap_.__value_) = 0;
        uint64_t v116 = 0;
        __v.__first_ = 0;
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
        uint64_t v53 = **(void **)(v28 + 40);
        unint64_t v55 = *(const void ***)(v53 + 40);
        BOOL v54 = *(const void ***)(v53 + 48);
        while (v55 != v54)
        {
          name_split((uint64_t)&__s, v55);
          name_accum((uint64_t)&v136, v55);
          std::string::basic_string[abi:ne180100]<0>(&v148, "elementwise");
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v136.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v146, size + 5);
          if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v57 = &v146;
          }
          else {
            char v57 = (std::string *)v146.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v58 = &v136;
            }
            else {
              uint64_t v58 = (std::string *)v136.__r_.__value_.__r.__words[0];
            }
            memmove(v57, v58, size);
          }
          strcpy((char *)v57 + size, "/plus");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v141, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v141 = __s;
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v142, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
          }
          else {
            std::string v142 = v136;
          }
          uint64_t v110 = 0;
          unint64_t v111 = 0;
          long long v112 = 0;
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          v144.__r_.__value_.__s.__data_[8] = 0;
          uint64_t v110 = (std::string *)operator new(0x30uLL);
          unint64_t v111 = v110;
          long long v112 = v110 + 2;
          unint64_t v111 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v112, (long long *)&v141, &v143, v110);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v144, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
          }
          else {
            std::string v144 = v136;
          }
          unint64_t v107 = 0;
          size_t v108 = 0;
          char v109 = 0;
          float v138 = &v107;
          LOBYTE(v139) = 0;
          unint64_t v107 = (std::string *)operator new(0x18uLL);
          size_t v108 = v107;
          char v109 = v107 + 1;
          size_t v108 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v109, (long long *)&v144, (long long *)&v145, v107);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v113, (uint64_t *)v3, (uint64_t)&v148, (uint64_t)&v146, (uint64_t)&__v, (uint64_t)v110, (uint64_t)v111, (uint64_t *)&v107);
          if (v114) {
            nitro::nitro_function::nitro_function(v114);
          }
          float v138 = &v107;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v144.__r_.__value_.__l.__data_);
          }
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
          for (uint64_t j = 0; j != -6; j -= 3)
          {
            if (SHIBYTE(v142.__r_.__value_.__r.__words[j + 2]) < 0) {
              operator delete(*(void **)((char *)&v141 + j * 8 + 24));
            }
          }
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v146.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v148.__end_cap_.__value_) < 0) {
            operator delete(v148.__begin_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          v55 += 3;
        }
        if (**(void **)(a1 + 64) < **(void **)(a1 + 72))
        {
          std::string::basic_string[abi:ne180100]<0>(&v141, "cf_end");
          int v60 = *(const void ***)(a1 + 80);
          if (*((char *)v60 + 23) >= 0) {
            size_t v61 = *((unsigned __int8 *)v60 + 23);
          }
          else {
            size_t v61 = (size_t)v60[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__s, v61 + 12);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_s = &__s;
          }
          else {
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          if (v61)
          {
            if (*((char *)v60 + 23) >= 0) {
              std::vector<int>::pointer v63 = v60;
            }
            else {
              std::vector<int>::pointer v63 = *v60;
            }
            memmove(p_s, v63, v61);
          }
          strcpy((char *)p_s + v61, "/in_loop/end");
          memset(v104, 0, sizeof(v104));
          memset(v103, 0, sizeof(v103));
          Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v105, (uint64_t *)v3, (uint64_t)&v141, (uint64_t)&__s, (uint64_t)&v148, 0, 0, v103);
          if (v106) {
            nitro::nitro_function::nitro_function(v106);
          }
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v141.__r_.__value_.__l.__data_);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v141, "cf_end");
        std::string::basic_string[abi:ne180100]<0>(&__s, "for_batch_split_end");
        memset(v100, 0, sizeof(v100));
        memset(v99, 0, sizeof(v99));
        Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v101, (uint64_t *)v3, (uint64_t)&v141, (uint64_t)&__s, (uint64_t)&p_v, 0, 0, v99);
        if (v102) {
          nitro::nitro_function::nitro_function(v102);
        }
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
        v136.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
        *(std::string::size_type *)((char *)&v141.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
        HIDWORD(v141.__r_.__value_.__r.__words[2]) = 0;
        v142.__r_.__value_.__s.__data_[0] = 0;
        LODWORD(v143) = 0;
        HIDWORD(v142.__r_.__value_.__r.__words[2]) = 0;
        v141.__r_.__value_.__r.__words[0] = 1;
        unint64_t v64 = **(void ***)(a1 + 40);
        float v65 = 1.0 / (double)(unint64_t)v64[8];
        *(float *)&v141.__r_.__value_.__r.__words[1] = v65;
        uint64_t v67 = (long long *)v64[5];
        uint64_t v66 = (long long *)v64[6];
        while (v67 != v66)
        {
          name_accum((uint64_t)&__s, (const void **)v67);
          std::string::basic_string[abi:ne180100]<0>(&v136, "elementwise");
          if (*((char *)v67 + 23) >= 0) {
            size_t v68 = *((unsigned __int8 *)v67 + 23);
          }
          else {
            size_t v68 = *((void *)v67 + 1);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v148, v68 + 11);
          if (SHIBYTE(v148.__end_cap_.__value_) >= 0) {
            begiuint64_t n = &v148;
          }
          else {
            begiuint64_t n = v148.__begin_;
          }
          if (v68)
          {
            if (*((char *)v67 + 23) >= 0) {
              uint64_t v70 = (const std::string::value_type *)v67;
            }
            else {
              uint64_t v70 = *(const std::string::value_type **)v67;
            }
            memmove(begin, v70, v68);
          }
          strcpy((char *)begin + v68, "/aggregated");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v146, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v146 = __s;
          }
          unint64_t v94 = 0;
          unint64_t v95 = 0;
          uint8x8_t v96 = 0;
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
          v144.__r_.__value_.__s.__data_[8] = 0;
          unint64_t v94 = (std::string *)operator new(0x18uLL);
          unint64_t v95 = v94;
          uint8x8_t v96 = v94 + 1;
          unint64_t v95 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v96, (long long *)&v146, (long long *)&v147, v94);
          if (*((char *)v67 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)v67, *((void *)v67 + 1));
          }
          else
          {
            long long v71 = *v67;
            v144.__r_.__value_.__r.__words[2] = *((void *)v67 + 2);
            *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v71;
          }
          uint64_t v91 = 0;
          uint64_t v92 = 0;
          unint64_t v93 = 0;
          float v138 = &v91;
          LOBYTE(v139) = 0;
          uint64_t v91 = (std::string *)operator new(0x18uLL);
          uint64_t v92 = v91;
          unint64_t v93 = v91 + 1;
          uint64_t v92 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v93, (long long *)&v144, (long long *)&v145, v91);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v97, (uint64_t *)v3, (uint64_t)&v136, (uint64_t)&v148, (uint64_t)&v141, (uint64_t)v94, (uint64_t)v95, (uint64_t *)&v91);
          if (v98) {
            nitro::nitro_function::nitro_function(v98);
          }
          float v138 = &v91;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v144.__r_.__value_.__l.__data_);
          }
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v146.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v148.__end_cap_.__value_) < 0) {
            operator delete(v148.__begin_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          uint64_t v67 = (long long *)((char *)v67 + 24);
        }
        uint64_t v28 = a1;
        if (**(void **)(a1 + 64) < **(void **)(a1 + 72))
        {
          long long v72 = *(const void ***)(a1 + 80);
          if (*((char *)v72 + 23) >= 0) {
            size_t v73 = *((unsigned __int8 *)v72 + 23);
          }
          else {
            size_t v73 = (size_t)v72[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__s, v73 + 9);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v74 = &__s;
          }
          else {
            uint64_t v74 = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          if (v73)
          {
            if (*((char *)v72 + 23) >= 0) {
              uint64_t v75 = v72;
            }
            else {
              uint64_t v75 = *v72;
            }
            memmove(v74, v75, v73);
          }
          strcpy((char *)v74 + v73, "/out_loop");
          std::string::basic_string[abi:ne180100]<0>(&v136, "cf_if");
          int v76 = *(long long **)(a1 + 88);
          if (*((char *)v76 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v148, *(const std::string::value_type **)v76, *((void *)v76 + 1));
          }
          else
          {
            long long v77 = *v76;
            v148.__end_cap_.__value_ = (std::string *)*((void *)v76 + 2);
            *(_OWORD *)&v148.__begin_ = v77;
          }
          uint64_t v86 = 0;
          uint64_t v87 = 0;
          std::vector<int>::pointer v88 = 0;
          v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
          v146.__r_.__value_.__s.__data_[8] = 0;
          uint64_t v86 = (std::string *)operator new(0x18uLL);
          uint64_t v87 = v86;
          std::vector<int>::pointer v88 = v86 + 1;
          uint64_t v87 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v88, (long long *)&v148, &v149, v86);
          memset(v85, 0, sizeof(v85));
          Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v89, (uint64_t *)v3, (uint64_t)&v136, (uint64_t)&__s, (uint64_t)&v144, (uint64_t)v86, (uint64_t)v87, v85);
          if (v90) {
            nitro::nitro_function::nitro_function(v90);
          }
          v146.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
          v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
          if (SHIBYTE(v148.__end_cap_.__value_) < 0) {
            operator delete(v148.__begin_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
        }
        unint64_t v52 = v81;
      }
      unint64_t v29 = v52 + 1;
    }
    while (v52 + 1 < (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
  }
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v134);
}

void sub_1927CD218(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t name_accum(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v3 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v3 + 6);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v5 = (void *)result;
  }
  else {
    uint64_t v5 = *(void **)result;
  }
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "/accum");
  return result;
}

uint64_t name_split(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v3 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v3 + 6);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v5 = (void *)result;
  }
  else {
    uint64_t v5 = *(void **)result;
  }
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "/split");
  return result;
}

__n128 std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C1C8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(void *)(a2 + 88) = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

__n128 std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x60uLL);
  *(void *)long long v2 = &unk_1EE37C1C8;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = *(_OWORD *)(a1 + 72);
  *((void *)v2 + 11) = *(void *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = result;
  return result;
}

void std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
}

void Espresso::pass_batch_split::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_batch_split::~pass_batch_split(Espresso::pass_batch_split *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t Espresso::MPSEngine::blob_container::__copy_to(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)a2
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_batch_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE33E418;
  }
  uint64_t v7 = v6;
  unint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = (const void *)a1[9];
  if (!v9
  {
    uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Espresso: wrong_context_type");
    v50->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v11 = v10;
  unint64_t v12 = (std::__shared_weak_count *)a1[10];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = *(const void **)a3;
  if (*(void *)a3)
  {
    uint64_t v51 = v12;
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(std::__shared_weak_count **)(a3 + 8);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      id v17 = v11[18];
      uint64_t v18 = v15[45];
      if ((int)v18 >= 1)
      {
        for (unint64_t i = 0; i != v18; ++i)
        {
          uint64_t v20 = *((void *)v15 + 27);
          if (i >= (*((void *)v15 + 28) - v20) >> 3) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Empty blob being copied");
          }
          size_t BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)[*(id *)(v20 + 8 * i) ioSurfaceForMultiBufferFrame:*(void *)(*(void *)a2 + 80)]);
          uint64_t v22 = [*(id *)(*((void *)v15 + 27) + 8 * i) metalBufferWithDevice:v17 multiBufferFrame:*(void *)(*(void *)a2 + 80)];
          Espresso::MPSEngine::blob_container::__copy_from_or_to_metal_buffer(a1, a2, v22, 1, BytesPerRow, v15[48], i, v18, 1);
          if ((unint64_t)[*(id *)&a1[23] count] >= 2) {
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("MPS<-->ANE with array of textures not yet supported.");
          }
        }
      }

      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
      uint64_t v23 = 1;
      goto LABEL_21;
    }
    if (!v25)
    {
      uint64_t v23 = 0;
      goto LABEL_21;
    }
    uint64_t v26 = v25;
    long long v27 = *(std::__shared_weak_count **)(a3 + 8);
    if ((!v27 {
       || (atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed),
    }
           (unint64_t v13 = *(const void **)a3) != 0))
    {
      uint64_t v28 = *(std::__shared_weak_count **)(a3 + 8);
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v28);
      }
      uint64_t v23 = 0;
      if (!v27) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v29 = [v11[20] kernelForFunction:"tex2darray_to_tex2dlowmem" cacheString:0 withConstants:0];
      if (!v29) {
        Espresso::throw_exception_selector<Espresso::generic_error>("Cannot find shader tex2darray_to_tex2dlowmem");
      }
      int v30 = a1[2].i32[0];
      __int32 v31 = a1[2].i32[1];
      int v32 = v30 - 1;
      if (v30 < 1) {
        int v32 = v30 + 2;
      }
      int v33 = (v32 >> 2) + 1;
      __int32 v34 = a1[1].i32[0];
      __int32 v35 = a1[1].i32[1];
      v55[0] = v34;
      v55[1] = v35;
      _OWORD v55[2] = v30;
      void v55[3] = v33;
      int v36 = a1[3].i32[0];
      if (v36 <= 1) {
        int v36 = 1;
      }
      v55[4] = v36 * v31;
      v55[5] = v34;
      v55[6] = v35 * v34;
      v55[7] = v35 * v34 * v30;
      uint64_t v56 = 0;
      uint64_t v37 = [v7[18] computeCommandEncoder];
      [v37 setComputePipelineState:v29];
      [v37 setTexture:*(void *)&a1[21] atIndex:0];
      [v37 setTexture:v26[21] atIndex:1];
      [v37 setBytes:v55 length:40 atIndex:0];
      int v38 = a1[1].i32[0];
      int v39 = a1[1].i32[1];
      int v41 = v38 - 1;
      BOOL v40 = v38 < 1;
      int v42 = v38 + 6;
      if (!v40) {
        int v42 = v41;
      }
      int v43 = (v42 >> 3) + 1;
      int v44 = v39 - 1;
      BOOL v40 = v39 < 1;
      int v45 = v39 + 2;
      if (!v40) {
        int v45 = v44;
      }
      int v46 = a1[3].i32[0];
      int v47 = a1[2].i32[1] * v33;
      uint64_t v48 = (v45 >> 2) + 1;
      if (v46 <= 1) {
        int v46 = 1;
      }
      v54[0] = v43;
      v54[1] = v48;
      v54[2] = v47 * v46;
      long long v52 = xmmword_192DCA4D0;
      uint64_t v53 = 1;
      [v37 dispatchThreadgroups:v54 threadsPerThreadgroup:&v52];
      [v37 endEncoding];

      uint64_t v23 = 1;
      if (!v27)
      {
LABEL_21:
        unint64_t v12 = v51;
        if (!v51) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
    nitro::nitro_function::nitro_function(v27);
    goto LABEL_21;
  }
  uint64_t v23 = 0;
  if (v12) {
LABEL_22:
  }
    nitro::nitro_function::nitro_function(v12);
LABEL_23:
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v23;
}

void sub_1927CDE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::blob_container::__copy_from_or_to_metal_buffer(int32x2_t *a1, uint64_t a2, void *a3, int a4, unint64_t a5, int a6, int a7, int a8, char a9)
{
  id v59 = a3;
  if (!*(void *)a2
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_batch_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE33E418;
  }
  int v14 = v13;
  uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (const void *)a1[9];
  if (!v16
  {
    int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Espresso: wrong_context_type");
    v46->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  id v17 = (std::__shared_weak_count *)a1[10];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = [*(id *)&a1[30] texture];
  int v19 = [*(id *)&a1[23] count];
  if (a6 == 1)
  {
    if ([v18 pixelFormat] == 115)
    {
      uint64_t v20 = "write_tex2darray_4h_unpacked";
      unint64_t v21 = "write_tex2darray_4h_unpacked_h";
    }
    else
    {
      if ([v18 pixelFormat] != 125) {
        Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>("Unsupported texture format %d; Metal textures must be FP16 or FP32.",
      }
          [v18 pixelFormat]);
      uint64_t v20 = "write_tex2darray_4f_unpacked";
      unint64_t v21 = "write_tex2darray_4f_unpacked_h";
    }
  }
  else
  {
    if (a6 != 4)
    {
      int v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v70, a6);
      uint64_t v48 = std::string::insert(&v70, 0, "Unsupported interleave factor ");
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v47, &v65);
      __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if ([v18 pixelFormat] == 115)
    {
      uint64_t v20 = "write_tex2darray_4h_interleaved";
      unint64_t v21 = "write_tex2darray_4h_interleaved_h";
    }
    else
    {
      if ([v18 pixelFormat] != 125) {
        Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>("Unsupported texture format %d; Metal textures must be FP16 or FP32.",
      }
          [v18 pixelFormat]);
      uint64_t v20 = "write_tex2darray_4f_interleaved";
      unint64_t v21 = "write_tex2darray_4f_interleaved_h";
    }
  }
  if (a4 == 1) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = v20;
  }
  int v55 = a6;
  if (a9)
  {
    if (a6 != 1) {
      Espresso::throw_exception_selector<Espresso::context_exceeded,char const(&)[31]>();
    }
    if (objc_msgSend(v18, "pixelFormat", v22) == 115)
    {
      uint64_t v23 = "read_tex2darray_4h_unpacked";
      uint64_t v24 = "read_tex2darray_4h_unpacked_h";
    }
    else
    {
      if ([v18 pixelFormat] != 125) {
        Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>("Unsupported texture format %d; Metal textures must be FP16 or FP32.",
      }
          [v18 pixelFormat]);
      uint64_t v23 = "read_tex2darray_4f_unpacked";
      uint64_t v24 = "read_tex2darray_4f_unpacked_h";
    }
    if (a4 == 1) {
      uint64_t v22 = v24;
    }
    else {
      uint64_t v22 = v23;
    }
  }
  uint64_t v25 = [v60[20] kernelForFunction:v22 cacheString:0 withConstants:0];
  uint64_t v53 = v18;
  uint64_t v26 = [v14[18] computeCommandEncoder];
  uint64_t v51 = v17;
  long long v52 = v15;
  uint64_t v50 = (void *)v25;
  [v26 setComputePipelineState:v25];
  int v27 = a1[3].i32[0];
  if (v27 <= 1) {
    int v27 = 1;
  }
  int v28 = v27 * a1[2].i32[1];
  if (a1[29].i8[4]) {
    int v29 = a1[29].i32[0];
  }
  else {
    int v29 = 1;
  }
  if (v19 <= 1) {
    int v30 = v28;
  }
  else {
    int v30 = v29;
  }
  if (v19 >= 1)
  {
    int v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = v19;
    uint64_t v34 = a4 - 1;
    int64x2_t v54 = vdupq_n_s64(8uLL);
    do
    {
      int v35 = a1[2].i32[0];
      int v36 = v35 - 1;
      if (v35 < 1) {
        int v36 = v35 + 2;
      }
      if (v34 > 0xC) {
        unint64_t v37 = 4;
      }
      else {
        unint64_t v37 = qword_192DF6AD8[v34];
      }
      __int32 v38 = a1[1].i32[1];
      LODWORD(v65.__r_.__value_.__l.__data_) = a1[1].i32[0];
      *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 4) = __PAIR64__(v35, v38);
      HIDWORD(v65.__r_.__value_.__r.__words[1]) = (v36 >> 2) + 1;
      LODWORD(v65.__r_.__value_.__r.__words[2]) = v30;
      HIDWORD(v65.__r_.__value_.__r.__words[2]) = (int)(a5 / v37 - 1) / a6 + 1;
      int v66 = v38 * HIDWORD(v65.__r_.__value_.__r.__words[2]);
      int v67 = v38 * HIDWORD(v65.__r_.__value_.__r.__words[2]) * v35;
      int v39 = HIDWORD(v65.__r_.__value_.__r.__words[1]) * v30 / a8;
      int v68 = v31 * v35 * HIDWORD(v65.__r_.__value_.__r.__words[2]) * v38;
      int v69 = v39 * a7;
      BOOL v40 = (void *)[v60[18] newBufferWithBytes:&v65 length:40 options:0];
      int v41 = [*(id *)&a1[23] objectAtIndexedSubscript:v32];
      [v26 setTexture:v41 atIndex:0];

      [v26 setBuffer:v59 offset:0 atIndex:0];
      [v26 setBuffer:v40 offset:0 atIndex:1];
      int32x2_t v42 = vadd_s32(a1[1], (int32x2_t)-1);
      int32x2_t v43 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v42, (uint32x2_t)vcltz_s32(v42), 0x1DuLL), 3uLL);
      *(void *)&long long v44 = v43.i32[0];
      *((void *)&v44 + 1) = v43.i32[1];
      long long v63 = v44;
      uint64_t v64 = v39;
      int64x2_t v61 = v54;
      uint64_t v62 = 1;
      [v26 dispatchThreadgroups:&v63 threadsPerThreadgroup:&v61];

      ++v32;
      v31 += v30;
      a6 = v55;
    }
    while (v33 != v32);
  }
  [v26 endEncoding];

  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
}

void sub_1927CE4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v39 - 89) < 0)
  {
    operator delete(*(void **)(v39 - 112));
    if ((v34 & 1) == 0)
    {
LABEL_8:

      if (v37) {
        nitro::nitro_function::nitro_function(v37);
      }
      if (v36) {
        nitro::nitro_function::nitro_function(v36);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>(char *a1, uint64_t a2)
{
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,char const(&)[31]>()
{
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,char const(&)[31],int &>(int a1)
{
}

BOOL Espresso::MPSEngine::blob_container::__copy_from(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)a2
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_batch_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE33E418;
  }
  uint64_t v7 = v6;
  unint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v51 = v8;
  unint64_t v9 = (const void *)a1[9];
  if (!v9
  {
    uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Espresso: wrong_context_type");
    v50->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v11 = v10;
  unint64_t v12 = (std::__shared_weak_count *)a1[10];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = *(void **)a3;
  if (!*(void *)a3) {
    goto LABEL_28;
  }
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(std::__shared_weak_count **)(a3 + 8);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v17 = v11[18];
    uint64_t v18 = v15[45];
    if ((int)v18 >= 1)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        size_t BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)[*(id *)(*((void *)v15 + 27) + 8 * i) ioSurfaceForMultiBufferFrame:*(void *)(*(void *)a2 + 80)]);
        unint64_t v21 = [*(id *)(*((void *)v15 + 27) + 8 * i) metalBufferWithDevice:v17 multiBufferFrame:*(void *)(*(void *)a2 + 80)];
        Espresso::MPSEngine::blob_container::__copy_from_or_to_metal_buffer(a1, a2, v21, 1, BytesPerRow, v15[48], i, v18, 0);
        if ((unint64_t)[*(id *)&a1[23] count] >= 2) {
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("ANE<-->MPS with array of textures not yet supported.");
        }
      }
    }

    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    BOOL v22 = 1;
    goto LABEL_46;
  }
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(std::__shared_weak_count **)(a3 + 8);
    if (!v25
      || (atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed), (unint64_t v13 = *(void **)a3) != 0))
    {
      {
        uint64_t v26 = *(std::__shared_weak_count **)(a3 + 8);
        if (v26)
        {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          nitro::nitro_function::nitro_function(v26);
        }
        BOOL v22 = 0;
        if (!v25) {
          goto LABEL_46;
        }
        goto LABEL_44;
      }
    }
    int v28 = [v11[20] kernelForFunction:"tex2dlowmem_to_tex2darray" cacheString:0 withConstants:0];
    if (!v28) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Cannot find shader tex2dlowmem_to_tex2darray");
    }
    int v29 = a1[2].i32[0];
    __int32 v30 = a1[2].i32[1];
    int v31 = v29 - 1;
    if (v29 < 1) {
      int v31 = v29 + 2;
    }
    int v32 = (v31 >> 2) + 1;
    __int32 v33 = a1[1].i32[0];
    __int32 v34 = a1[1].i32[1];
    unint64_t v55 = __PAIR64__(v34, v33);
    unint64_t v56 = __PAIR64__(v32, v29);
    int v35 = a1[3].i32[0];
    if (v35 <= 1) {
      int v35 = 1;
    }
    int v57 = v35 * v30;
    __int32 v58 = v33;
    int v59 = v34 * v33;
    int v60 = v34 * v33 * v29;
    uint64_t v61 = 0;
    int v36 = [v7[18] computeCommandEncoder];
    [v36 setComputePipelineState:v28];
    [v36 setTexture:v24[21] atIndex:0];
    [v36 setTexture:*(void *)&a1[21] atIndex:1];
    [v36 setBytes:&v55 length:40 atIndex:0];
    int v37 = a1[1].i32[0];
    int v38 = a1[1].i32[1];
    int v40 = v37 - 1;
    BOOL v39 = v37 < 1;
    int v41 = v37 + 6;
    if (!v39) {
      int v41 = v40;
    }
    int v42 = (v41 >> 3) + 1;
    int v43 = v38 - 1;
    BOOL v39 = v38 < 1;
    int v44 = v38 + 2;
    if (!v39) {
      int v44 = v43;
    }
    int v45 = a1[3].i32[0];
    int v46 = a1[2].i32[1] * v32;
    uint64_t v47 = (v44 >> 2) + 1;
    if (v45 <= 1) {
      int v45 = 1;
    }
    v54[0] = v42;
    v54[1] = v47;
    v54[2] = v46 * v45;
    long long v52 = xmmword_192DCA4D0;
    uint64_t v53 = 1;
    [v36 dispatchThreadgroups:v54 threadsPerThreadgroup:&v52];
    [v36 endEncoding];

    BOOL v22 = 1;
    if (v25)
    {
LABEL_44:
      int v27 = v25;
LABEL_45:
      nitro::nitro_function::nitro_function(v27);
    }
  }
  else
  {
LABEL_28:
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v55, v13, *(std::__shared_weak_count **)(a3 + 8));
    BOOL v22 = v55 != 0;
    if (v55) {
      (*(void (**)(int32x2_t *, uint64_t, unint64_t *))(*(void *)a1 + 48))(a1, a2, &v55);
    }
    int v27 = (std::__shared_weak_count *)v56;
    if (v56) {
      goto LABEL_45;
    }
  }
LABEL_46:
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  return v22;
}

void sub_1927CEBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::blob_container::unsafe_opaque_raw_pointer(Espresso::MPSEngine::blob_container *this)
{
  return *((void *)this + 21);
}

void Espresso::MPSEngine::blob_container::__copy_from_host(int32x2_t *a1, uint64_t a2, uint64_t *a3)
{
  long long v4 = (const void *)a1[9];
  if (!v4
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  unint64_t v8 = v7;
  unint64_t v9 = (std::__shared_weak_count *)a1[10];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(void *)a2
  {
    int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Espresso: wrong_batch_type");
    v14->__vftable = (std::runtime_error_vtbl *)&unk_1EE33E418;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*a3)
  {
    uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Unexpected null pointer");
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v16 = v8;
  id v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>> const>((uint64_t)&v16, v10, a3);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  Espresso::MPSEngine::blob_container::__copy_from_or_to_metal_buffer(a1, a2, v12, 0, 4 * a1[1].i32[0], 1, 0, 1, 0);

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1927CEF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_free_exception(v14);
  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
    if (!v12) {
      goto LABEL_6;
    }
  }
  else if (!v12)
  {
LABEL_6:
    _Unwind_Resume(a1);
  }
  nitro::nitro_function::nitro_function(v12);
  goto LABEL_6;
}

id Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>> const>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (a2)
  {
    uint64_t v7 = a3[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = a2[22];
    unint64_t v9 = (void *)a2[21];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = a2[20];
      uint64_t v12 = ((uint64_t)v9 - v11) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v8 - v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      v23[4] = a2 + 22;
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v15);
      id v17 = &v16[16 * v12];
      v23[0] = v16;
      v23[1] = v17;
      v23[3] = &v16[16 * v18];
      *(void *)id v17 = v4;
      *((void *)v17 + 1) = v7;
      uint64_t v23[2] = v17 + 16;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2 + 20, v23);
      unint64_t v10 = (void *)a2[21];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v23);
    }
    else
    {
      void *v9 = v4;
      v9[1] = v7;
      unint64_t v10 = v9 + 2;
      a2[21] = v9 + 2;
    }
    a2[21] = v10;
    uint64_t v4 = *a3;
  }
  uint64_t v19 = 0;
  uint64_t v20 = *(int *)(v4 + 8);
  do
  {
    v20 *= *(int *)(v4 + 12 + v19);
    v19 += 4;
  }
  while (v19 != 12);
  unint64_t v21 = (void *)[*(id *)(*(void *)a1 + 144) newBufferWithBytesNoCopy:*(void *)(v4 + 24) length:(4 * v20 + 4095) & 0xFFFFFFFFFFFFF000 options:0 deallocator:0];

  return v21;
}

void sub_1927CF170(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::blob_container::__copy_to_host(int32x2_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (const void *)a1[9];
  if (!v4
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[10];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(void *)a2
  {
    uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Espresso: wrong_batch_type");
    v50->__vftable = (std::runtime_error_vtbl *)&unk_1EE33E418;
  }
  unint64_t v9 = v8;
  unint64_t v10 = *(std::__shared_weak_count **)(a2 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *a3;
  if (!*a3)
  {
    (*(void (**)(long long *__return_ptr, int32x2_t *))(*(void *)a1 + 56))(&v66, a1);
    long long v12 = v66;
    long long v66 = 0uLL;
    unint64_t v13 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v12;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      if (*((void *)&v66 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v66 + 1));
      }
    }
    uint64_t v11 = *a3;
  }
  uint64_t v14 = a3[1];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = *((void *)v9 + 22);
  uint64_t v16 = (uint64_t *)*((void *)v9 + 21);
  if ((unint64_t)v16 >= v15)
  {
    uint64_t v18 = *((void *)v9 + 20);
    uint64_t v19 = ((uint64_t)v16 - v18) >> 4;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v15 - v18;
    if (v21 >> 3 > v20) {
      unint64_t v20 = v21 >> 3;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    unint64_t v69 = (unint64_t)(v9 + 176);
    uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
    uint64_t v24 = (uint64_t *)&v23[16 * v19];
    *(void *)&long long v66 = v23;
    *((void *)&v66 + 1) = v24;
    int v68 = &v23[16 * v25];
    uint64_t *v24 = v11;
    v24[1] = v14;
    unint64_t v67 = (unint64_t)(v24 + 2);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer((void *)v9 + 20, &v66);
    id v17 = (void *)*((void *)v9 + 21);
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v66);
  }
  else
  {
    uint64_t *v16 = v11;
    v16[1] = v14;
    id v17 = v16 + 2;
    *((void *)v9 + 21) = v16 + 2;
  }
  *((void *)v9 + 21) = v17;
  *(void *)&long long v66 = v59;
  *((void *)&v66 + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v57 = Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t)&v66, v9, a3);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (*((void *)&v66 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v66 + 1));
  }
  int v26 = [*(id *)&a1[23] count];
  int v27 = [*(id *)&a1[30] texture];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v65 = 0;
  if ([v27 pixelFormat] == 115)
  {
    int v28 = "read_tex2darray_4h_unpacked";
  }
  else
  {
    if ([v27 pixelFormat] != 125) {
      Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>("Unsupported texture format %d; Metal textures must be fp16 or fp32.",
    }
        [v27 pixelFormat]);
    int v28 = "read_tex2darray_4f_unpacked";
  }
  MEMORY[0x192FF0F50](__p, v28);
  if (v65 >= 0) {
    int v29 = __p;
  }
  else {
    int v29 = (void **)__p[0];
  }
  __int32 v58 = [v59[20] kernelForFunction:v29 cacheString:0 withConstants:0];
  int64x2_t v54 = v10;
  __int32 v30 = [*((id *)v9 + 18) computeCommandEncoder];
  long long v52 = v27;
  uint64_t v53 = v7;
  if (!v58)
  {
    uint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Kernel not found");
    __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v31 = a1[2].i32[0];
  int v33 = v31 - 1;
  BOOL v32 = v31 < 1;
  int v34 = v31 + 2;
  if (!v32) {
    int v34 = v33;
  }
  int v35 = a1[3].i32[0];
  if (v35 <= 1) {
    int v35 = 1;
  }
  int v36 = v35 * a1[2].i32[1];
  if (a1[29].i8[4]) {
    int v37 = a1[29].i32[0];
  }
  else {
    int v37 = 1;
  }
  if (v26 <= 1) {
    int v38 = v36;
  }
  else {
    int v38 = v37;
  }
  if (v26 >= 1)
  {
    int v39 = 0;
    uint64_t v40 = 0;
    __int32 v41 = a1[1].i32[0];
    int v56 = (v34 >> 2) + 1;
    uint64_t v42 = v26;
    int64x2_t v55 = vdupq_n_s64(8uLL);
    do
    {
      __int32 v43 = a1[1].i32[1];
      LODWORD(v66) = a1[1].i32[0];
      DWORD1(v66) = v43;
      DWORD2(v66) = a1[2].i32[0];
      HIDWORD(v66) = v56;
      unint64_t v67 = __PAIR64__(v41, v38);
      LODWORD(v68) = v43 * v41;
      HIDWORD(v68) = DWORD2(v66) * v43 * v41;
      unint64_t v69 = (v39 * v43 * DWORD2(v66));
      [v30 setComputePipelineState:v58];
      int v44 = (void *)[v59[18] newBufferWithBytes:&v66 length:40 options:0];
      int v45 = [*(id *)&a1[23] objectAtIndexedSubscript:v40];
      [v30 setTexture:v45 atIndex:0];

      [v30 setBuffer:v57 offset:0 atIndex:0];
      [v30 setBuffer:v44 offset:0 atIndex:1];
      int32x2_t v46 = vadd_s32(a1[1], (int32x2_t)-1);
      int32x2_t v47 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v46, (uint32x2_t)vcltz_s32(v46), 0x1DuLL), 3uLL);
      *(void *)&long long v48 = v47.i32[0];
      *((void *)&v48 + 1) = v47.i32[1];
      long long v62 = v48;
      uint64_t v63 = v38 * v56;
      int64x2_t v60 = v55;
      uint64_t v61 = 1;
      [v30 dispatchThreadgroups:&v62 threadsPerThreadgroup:&v60];

      ++v40;
      v39 += v38 * v41;
    }
    while (v42 != v40);
  }
  [v30 endEncoding];

  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }

  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
}

void sub_1927CF78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (v34)
  {
    nitro::nitro_function::nitro_function(v34);
    if (!v33) {
      goto LABEL_6;
    }
  }
  else if (!v33)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  nitro::nitro_function::nitro_function(v33);
  goto LABEL_6;
}

id Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>>>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  if (a2)
  {
    uint64_t v7 = a3[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = a2[22];
    unint64_t v9 = (void *)a2[21];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = a2[20];
      uint64_t v12 = ((uint64_t)v9 - v11) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v8 - v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      v23[4] = a2 + 22;
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v15);
      id v17 = &v16[16 * v12];
      v23[0] = v16;
      v23[1] = v17;
      v23[3] = &v16[16 * v18];
      *(void *)id v17 = v4;
      *((void *)v17 + 1) = v7;
      uint64_t v23[2] = v17 + 16;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2 + 20, v23);
      unint64_t v10 = (void *)a2[21];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v23);
    }
    else
    {
      void *v9 = v4;
      v9[1] = v7;
      unint64_t v10 = v9 + 2;
      a2[21] = v9 + 2;
    }
    a2[21] = v10;
    uint64_t v4 = *a3;
  }
  uint64_t v19 = 0;
  uint64_t v20 = *(int *)(v4 + 8);
  do
  {
    v20 *= *(int *)(v4 + 12 + v19);
    v19 += 4;
  }
  while (v19 != 12);
  uint64_t v21 = (void *)[*(id *)(*(void *)a1 + 144) newBufferWithBytesNoCopy:*(void *)(v4 + 24) length:(4 * v20 + 4095) & 0xFFFFFFFFFFFFF000 options:0 deallocator:0];

  return v21;
}

void sub_1927CFA30(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSEngine::blob_container::compute_path(Espresso::MPSEngine::blob_container *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t Espresso::MPSEngine::blob_container::platform(Espresso::MPSEngine::blob_container *this)
{
  return (***(uint64_t (****)(void))(*((void *)this + 9) + 8))(*(void *)(*((void *)this + 9) + 8));
}

void Espresso::MPSEngine::blob_container::resize(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a3;
  uint64_t v6 = (atomic_ullong *)a3[1];
  if (v6) {
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unint64_t v9 = *a3;
  if (*a3)
  {
    if (v11)
    {
      uint64_t v12 = (std::__shared_weak_count *)a3[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v10) {
        goto LABEL_12;
      }
LABEL_14:
      BOOL v115 = *((unsigned char *)v10 + 88) != 0;
      unint64_t v13 = (const void *)*((void *)v10 + 13);
      uint64_t v14 = *((void *)v10 + 14);
      if (v14)
      {
        uint64_t v113 = (std::__shared_weak_count *)*((void *)v10 + 14);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v113 = 0;
      }
      goto LABEL_17;
    }
    uint64_t v12 = 0;
    if (v10) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v10 = 0;
  }
LABEL_12:
  uint64_t v113 = 0;
  unint64_t v13 = 0;
  BOOL v115 = 0;
LABEL_17:
  unint64_t v15 = *(const void **)(a1 + 72);
  long long v112 = v12;
  if (!v15
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  id v17 = v16;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v114 = v18;
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, (const Espresso::layer_shape *)a2);
  uint64_t v19 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = 0;

  uint64_t v20 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0;

  uint64_t v21 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = 0;

  unint64_t v22 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = 0;

  uint64_t v23 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = 0;

  uint64_t v25 = (id *)(a1 + 192);
  uint64_t v24 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = 0;

  int v26 = *(std::__shared_weak_count **)(a1 + 272);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 2std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0;
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  uint64_t v117 = objc_opt_new();
  uint64_t v116 = objc_opt_new();
  int v27 = v114;
  if (!(*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24)))
  {
    if (v115) {
      *((void *)v10 + 12) = 0;
    }
    goto LABEL_101;
  }
  if (v11 && *((unsigned char *)v11 + 121))
  {
    if (v13)
    {
      if (v28)
      {
        int v29 = v113;
        if (v113) {
          atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_47;
      }
    }
    else
    {
      int v28 = 0;
    }
    int v29 = 0;
LABEL_47:
    uint64_t v42 = [v28[23] objectAtIndexedSubscript:v11[16]];
    __int32 v43 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = v42;

    uint64_t v44 = [MEMORY[0x1E4F1C978] arrayWithObject:*(void *)(a1 + 168)];
    int v45 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = v44;

    uint64_t v46 = [v28[32] objectAtIndexedSubscript:v11[16]];
    int32x2_t v47 = *(void **)(a1 + 240);
    *(void *)(a1 + 240) = v46;

    uint64_t v48 = [MEMORY[0x1E4F1C978] arrayWithObject:*(void *)(a1 + 240)];
    long long v49 = *(void **)(a1 + 256);
    *(void *)(a1 + 256) = v48;

    long long v50 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)long long v130 = *(_OWORD *)a2;
    *(_OWORD *)&v130[16] = v50;
    uint64_t v51 = *(const void **)(a2 + 40);
    uint64_t v131 = *(void *)(a2 + 32);
    std::string __p = 0;
    char v133 = 0;
    uint64_t v134 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v51, *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - (void)v51) >> 2);
    *(_DWORD *)&v130[12] = 1;
    if (*(unsigned char *)(a1 + 236)) {
      *(_DWORD *)&v130[12] = *(_DWORD *)(a1 + 232);
    }
    *(_DWORD *)&v130[16] = 1;
    Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, (const Espresso::layer_shape *)v130);
    if (__p)
    {
      char v133 = __p;
      operator delete(__p);
    }
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
    goto LABEL_101;
  }
  id v118 = v17[18];
  int v31 = *(_DWORD *)(a1 + 16);
  int v30 = *(_DWORD *)(a1 + 20);
  int v33 = v31 - 1;
  BOOL v32 = v31 < 1;
  int v34 = v31 + 2;
  if (!v32) {
    int v34 = v33;
  }
  int v35 = (v34 >> 2) + 1;
  int v36 = *(_DWORD *)(a1 + 24);
  if (v36 <= 1) {
    int v36 = 1;
  }
  if (*((unsigned char *)v17 + 113))
  {
    int v37 = v36 * v30;
    if (*(unsigned char *)(a1 + 236))
    {
      int v38 = *(_DWORD *)(a1 + 232);
      v35 *= v38;
      v37 /= v38;
    }
  }
  else
  {
    v35 *= v30 * v36;
    int v37 = 1;
  }
  if (v35 >= 2049) {
    Espresso::throw_exception_selector<Espresso::context_exceeded,int &,int &,int &>(*(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), v35);
  }
  if (objc_opt_respondsToSelector())
  {
    int v39 = v10;
    uint64_t v40 = objc_opt_new();
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) != 1)
      {
        unint64_t v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        int v108 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        std::to_string(&v129, v108);
        char v109 = std::string::insert(&v129, 0, "Compute path not supported");
        long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
        *(void *)&v130[16] = *((void *)&v109->__r_.__value_.__l + 2);
        *(_OWORD *)long long v130 = v110;
        v109->__r_.__value_.__l.__size_ = 0;
        v109->__r_.__value_.__r.__words[2] = 0;
        v109->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v107, (const std::string *)v130);
        __cxa_throw(v107, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v41 = 115;
    }
    else
    {
      uint64_t v41 = 125;
    }
    [v40 setPixelFormat:v41];
    [v40 setWidth:*(int *)(a1 + 8)];
    [v40 setHeight:*(int *)(a1 + 12)];
    [v40 setArrayLength:v35];
    [v40 setUsage:3];
    [v40 setTextureType:3];
    [v40 setStorageMode:2];
    uint64_t v52 = [v118 heapTextureSizeAndAlignWithDescriptor:v40];
    uint64_t v53 = v52;
    if (v115)
    {
      v39[12] = v52;
      goto LABEL_99;
    }
    id v54 = *v25;
    id *v25 = 0;

    if (v13)
    {
      int v56 = 0;
      if (v113 && v55)
      {
        int v56 = v113;
        atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      objc_storeStrong((id *)(a1 + 192), v55[24]);
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
    }
    if (!*v25)
    {
      Espresso::on_alloc((Espresso *)a1, (void *)v53);
      int v57 = objc_opt_new();
      [v57 setCpuCacheMode:0];
      [v57 setStorageMode:2];
      if (*((unsigned char *)v17 + 113)) {
        uint64_t v58 = v37;
      }
      else {
        uint64_t v58 = 1;
      }
      [v57 setSize:v58 * v53];
      [v57 setHazardTrackingMode:2];
      uint64_t v59 = [v118 newHeapWithDescriptor:v57];
      id v60 = *v25;
      id *v25 = (id)v59;

      if (!*v25) {
        Espresso::throw_exception_selector<Espresso::context_exceeded,unsigned long>([v57 size]);
      }
    }
    unint64_t v10 = v39;
  }
  if (v37 < 1)
  {
    uint64_t v61 = 0;
LABEL_85:
    std::string v70 = *(void **)(a1 + 240);
    if (v70)
    {
      long long v71 = [v70 texture];

      if (v71)
      {
        if (!v61)
        {
          unint64_t v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v106, "Cannot create MPS image");
          __cxa_throw(v106, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v72 = [*(id *)(a1 + 240) texture];
        size_t v73 = *(void **)(a1 + 168);
        *(void *)(a1 + 168) = v72;

        uint64_t v74 = [MEMORY[0x1E4F1C978] arrayWithArray:v117];
        uint64_t v75 = *(void **)(a1 + 184);
        *(void *)(a1 + 184) = v74;

        long long v121 = 0u;
        long long v122 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        id v76 = *(id *)(a1 + 184);
        uint64_t v77 = [v76 countByEnumeratingWithState:&v119 objects:v135 count:16];
        if (v77)
        {
          uint64_t v78 = *(void *)v120;
          do
          {
            for (uint64_t i = 0; i != v77; ++i)
            {
              if (*(void *)v120 != v78) {
                objc_enumerationMutation(v76);
              }
              uint64_t v80 = *(void **)(*((void *)&v119 + 1) + 8 * i);
              unint64_t v81 = [v80 heap];
              BOOL v82 = v81 == 0;

              if (!v82) {
                [v80 makeAliasable];
              }
            }
            uint64_t v77 = [v76 countByEnumeratingWithState:&v119 objects:v135 count:16];
          }
          while (v77);
        }

        uint64_t v83 = [MEMORY[0x1E4F1C978] arrayWithArray:v116];
        unint64_t v84 = *(void **)(a1 + 256);
        *(void *)(a1 + 256) = v83;

        goto LABEL_100;
      }
      uint64_t v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v105, "Cannot create texture");
    }
    else
    {
      uint64_t v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v105, "Cannot create MPS image");
    }
    __cxa_throw(v105, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v111 = v10;
  uint64_t v61 = 0;
  while (1)
  {
    uint64_t v40 = objc_opt_new();
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) != 1)
      {
        unint64_t v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        int v101 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
        std::to_string(&v129, v101);
        float v102 = std::string::insert(&v129, 0, "Compute path not supported");
        long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        *(void *)&v130[16] = *((void *)&v102->__r_.__value_.__l + 2);
        *(_OWORD *)long long v130 = v103;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v100, (const std::string *)v130);
        __cxa_throw(v100, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v62 = 115;
    }
    else
    {
      uint64_t v62 = 125;
    }
    objc_msgSend(v40, "setPixelFormat:", v62, v111);
    [v40 setWidth:*(int *)(a1 + 8)];
    [v40 setHeight:*(int *)(a1 + 12)];
    [v40 setArrayLength:v35];
    [v40 setUsage:3];
    [v40 setTextureType:3];
    [v40 setStorageMode:2];

    if (objc_opt_respondsToSelector())
    {
      uint64_t v61 = (void *)[*v25 newTextureWithDescriptor:v40];
      if (v61) {
        goto LABEL_79;
      }
    }
    if (v115) {
      break;
    }
    uint64_t v61 = (void *)[v118 newTextureWithDescriptor:v40];
    if (!v61)
    {
      uint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v125, [v40 width]);
      uint64_t v86 = std::string::insert(&v125, 0, "Cannot create texture: ");
      long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v126.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      std::vector<int>::pointer v88 = std::string::append(&v126, "x");
      long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      v127.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v124, [v40 height]);
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v90 = &v124;
      }
      else {
        uint64_t v90 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v124.__r_.__value_.__l.__size_;
      }
      uint64_t v92 = std::string::append(&v127, (const std::string::value_type *)v90, size);
      long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v128.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      unint64_t v94 = std::string::append(&v128, "x");
      long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v123, [v40 arrayLength]);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint8x8_t v96 = &v123;
      }
      else {
        uint8x8_t v96 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v97 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v97 = v123.__r_.__value_.__l.__size_;
      }
      uint64_t v98 = std::string::append(&v129, (const std::string::value_type *)v96, v97);
      long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      *(void *)&v130[16] = *((void *)&v98->__r_.__value_.__l + 2);
      *(_OWORD *)long long v130 = v99;
      v98->__r_.__value_.__l.__size_ = 0;
      v98->__r_.__value_.__r.__words[2] = 0;
      v98->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v85, (const std::string *)v130);
      __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_79:
    id v63 = objc_alloc(MEMORY[0x1E4F35530]);
    int v64 = *(_DWORD *)(a1 + 16);
    if (v64 <= 4) {
      uint64_t v65 = 4;
    }
    else {
      uint64_t v65 = v64;
    }
    uint64_t v66 = [v63 initWithTexture:v61 featureChannels:v65 featureChannelsLayout:1];
    unint64_t v67 = *(void **)(a1 + 240);
    *(void *)(a1 + 240) = v66;

    uint64_t v68 = [*(id *)(a1 + 240) texture];
    unint64_t v69 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = v68;

    [v116 addObject:*(void *)(a1 + 240)];
    [v117 addObject:*(void *)(a1 + 168)];

    if (!--v37) {
      goto LABEL_85;
    }
  }
  v111[12] = -1;
LABEL_99:

LABEL_100:
  int v27 = v114;
LABEL_101:

  if (v27) {
    nitro::nitro_function::nitro_function(v114);
  }
  if (v113) {
    nitro::nitro_function::nitro_function(v113);
  }
  if (v112) {
    nitro::nitro_function::nitro_function(v112);
  }
}

void sub_1927D07F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a43 < 0)
  {
    operator delete(a38);
    if ((v74 & 1) == 0)
    {
LABEL_20:

      if (a12) {
        nitro::nitro_function::nitro_function(a12);
      }
      if (a11) {
        nitro::nitro_function::nitro_function(a11);
      }
      if (a10) {
        nitro::nitro_function::nitro_function(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v73);
  goto LABEL_20;
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,int &,int &,int &>(int a1, int a2, int a3)
{
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,unsigned long>(uint64_t a1)
{
}

void Espresso::MPSEngine::blob_container::~blob_container(Espresso::MPSEngine::blob_container *this)
{
  Espresso::MPSEngine::blob_container::~blob_container(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE372E40;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::MetalLowmemEngine::blob_container::~blob_container((id *)this, v3);
}

void Espresso::MPSEngine::blob_container_options::~blob_container_options(Espresso::MPSEngine::blob_container_options *this)
{
  Espresso::abstract_blob_container_options_aliasing::~abstract_blob_container_options_aliasing(this);

  JUMPOUT(0x192FF16B0);
}

float Espresso::MPSGraphEngine::context::begin_batch@<S0>(id *this@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  if (a2)
  {
    uint64_t v6 = operator new(0x120uLL);
    v6[1] = 0;
    void v6[2] = 0;
    *uint64_t v6 = &unk_1EE38D238;
    *(void *)&long long v7 = Espresso::MPSEngine::batch::batch((uint64_t)(v6 + 3), (uint64_t)this, a2);
    *((void *)&v7 + 1) = v6;
    long long v10 = v7;

    long long v8 = v10;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSGraphEngine::context *,void>((Espresso::MPSEngine::batch **)&v11, this);
    long long v8 = v11;
  }
  *(unsigned char *)(v8 + 216) = *((unsigned char *)this + 172);
  *(void *)(v8 + 2std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = this[22];
  float result = *((float *)this + 42);
  *(float *)(v8 + 212) = result;
  *(unsigned char *)(v8 + 232) = *((unsigned char *)this + 184);
  *a3 = v8;
  return result;
}

void sub_1927D0CF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);

  _Unwind_Resume(a1);
}

Espresso::MPSEngine::batch *std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSGraphEngine::context *,void>(Espresso::MPSEngine::batch **a1, id *a2)
{
  uint64_t v4 = operator new(0x120uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE38D238;
  float result = Espresso::MPSEngine::batch::batch((Espresso::MPSEngine::batch *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Espresso::MPSEngine::batch *)v4;
  return result;
}

void sub_1927D0D78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D238;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSGraphEngine::context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2)
{
  return (*a2 < 0xFu) & (0x50Bu >> *a2);
}

uint64_t Espresso::MPSBuffersEngine::context::enable_training(Espresso::MPSBuffersEngine::context *this)
{
  uint64_t result = Espresso::MPSEngine::context::enable_training(this);
  *((unsigned char *)this + 241) = 1;
  return result;
}

void Espresso::MPSGraphEngine::context::create_compiler_for_network(uint64_t a1, void *a2)
{
  unsigned int v19 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  size_t v3 = operator new(0x100uLL);
  uint64_t v4 = v3;
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_1EE382D48;
  long long v5 = (char *)(v3 + 3);
  long long v7 = (void *)*a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v3[4] = 0;
  v3[5] = 0;
  *((unsigned char *)v3 + 48) = 0;
  v3[7] = 0;
  v3[8] = 0;
  v3[9] = 0;
  v3[11] = 0;
  v3[10] = v3 + 11;
  v3[12] = 0;
  v3[13] = 0;
  v3[14] = 0;
  v3[15] = 0;
  v3[3] = &unk_1EE331988;
  v3[19] = 0;
  v3[22] = 0;
  v3[21] = 0;
  *((unsigned char *)v3 + 144) = 0;
  v3[16] = 0;
  v3[17] = 0;
  v3[24] = 0;
  v3[20] = v3 + 21;
  v3[23] = v3 + 24;
  v3[28] = 0;
  v3[27] = 0;
  v3[25] = 0;
  v3[26] = v3 + 27;
  v3[30] = 0;
  v3[31] = 0;
  v3[29] = 0;
  if ((***(unsigned int (****)(void))(v7[2] + 8))(*(void *)(v7[2] + 8)) != 50005)
  {
    long long v8 = (void *)v7[157];
    if (v8)
    {
      if (v8)
      {
        uint64_t v9 = v7[158];
        if (!v9) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }
    }
LABEL_12:
    uint64_t v9 = 0;
    goto LABEL_13;
  }
  long long v8 = (void *)v7[2];
  if (!v8) {
    goto LABEL_12;
  }
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = v7[3];
  if (v9) {
LABEL_11:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
LABEL_13:
  long long v10 = (std::__shared_weak_count *)v4[17];
  v4[16] = v8;
  v4[17] = v9;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = (std::__shared_weak_count *)v4[5];
  v4[4] = v7;
  v4[5] = v6;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = objc_opt_new();
  unint64_t v13 = (void *)v4[19];
  v4[19] = v12;

  if (!v4[16])
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v14 = *a2 + 528;
  uint64_t v20 = &v19;
  unint64_t v15 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v14, &v19, (uint64_t)&std::piecewise_construct, &v20);
  *(void *)&long long v16 = v5;
  *((void *)&v16 + 1) = v4;
  id v17 = (std::__shared_weak_count *)v15[4];
  *(_OWORD *)(v15 + 3) = v16;
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_1927D11AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v14);
  uint64_t v18 = *(std::__shared_weak_count **)(v10 + 248);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](v13, 0);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(v10 + 216));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(void **)(v10 + 192));
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*(char **)(v10 + 168));

  unsigned int v19 = *(std::__shared_weak_count **)(v10 + 136);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  void *v15 = &unk_1EE35F3A0;
  uint64_t v20 = *v16;
  if (*v16)
  {
    *(void *)(v10 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112) = v20;
    operator delete(v20);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v12, *(void **)(v10 + 88));
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  *(void *)(v10 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = &unk_1EE32A8C8;
  uint64_t v21 = *(std::__shared_weak_count **)(v10 + 40);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v10);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382D48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::MPSGraphEngine::context::~context(Espresso::MPSGraphEngine::context *this)
{
  *(void *)this = &unk_1EE3774A0;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::context_metal::~context_metal((id *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE3774A0;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::context_metal::~context_metal((id *)this);
}

void Espresso::context_metal::get_device_model_name(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [this[18] name];
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v3 UTF8String]);
}

void sub_1927D1470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

float Espresso::MPSGraphEngine::context::begin_batch@<S0>(id *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSGraphEngine::context *,void>((Espresso::MPSEngine::batch **)&v8, this);
  char v4 = *((unsigned char *)this + 184);
  float result = *((float *)this + 42);
  long long v6 = v8;
  uint64_t v7 = v8;
  *(unsigned char *)(v8 + 216) = *((unsigned char *)this + 172);
  *(float *)(v7 + 212) = result;
  *(unsigned char *)(v7 + 232) = v4;
  *a2 = v6;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::upsample_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::upsample_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::transpose_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::topk_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::topk_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::topk_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tile_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tile_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tile_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<D0>(uint64_t *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tensor_zero_pad_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::stack_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::squeeze_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<D0>(uint64_t *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_nd_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::space_to_depth_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::scatter_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_like_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reduce_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reduce_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool3d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::one_hot_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::one_hot_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::lrn_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::lrn_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::load_random_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::load_random_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_random_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::l2_norm_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::inner_product_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::inner_product_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_padding_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::gather_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::flatten_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::flatten_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::flatten_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::fill_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::fill_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::fill_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::elementwise_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(uint64_t *a1@<X1>, const std::string *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::einsum_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::einsum_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::einsum_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::dev_op_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dev_op_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_and_resize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::copy_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::copy_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::conv3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::conv3d_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::convolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::concat_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::cast_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::cast_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cast_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batch_matmul_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::activation_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void Espresso::MPSGraphEngine::engine::~engine(Espresso::MPSGraphEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::MPSGraphEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x110uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *long long v6 = &unk_1EE382D10;
  uint64_t v7 = Espresso::MPSEngine::context::context<int>((uint64_t)(v6 + 3), a1, a2);
  *((_WORD *)v6 + 132) = 1;
  v6[3] = &unk_1EE3318C8;
  *((unsigned char *)v6 + 96) = 1;
  *((unsigned char *)v6 + 68) = 0;
  *((unsigned char *)v6 + 80) = 1;
  *((unsigned char *)v6 + 148) = 1;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927D20C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::MPSGraphEngine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x118uLL);
  unint64_t v7 = (unint64_t)v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE382258;
  long long v8 = v6 + 24;
  uint64_t v9 = *a1;
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 3) = &unk_1EE359E28;
  *((_DWORD *)v6 + 13) = -1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
  *((void *)v6 + 11) = 0;
  *((void *)v6 + 12) = v9;
  *((void *)v6 + 13) = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 14) = 0;
  *((void *)v6 + 15) = 0;
  *((_DWORD *)v6 + 32) = 0;
  *((_DWORD *)v6 + 34) = 1065353216;
  *(void *)(v6 + 140) = 0xFFFFFFFF00000000;
  *((_DWORD *)v6 + 37) = 1;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0;
  *((_DWORD *)v6 + 12) = 0;
  *(_OWORD *)(v6 + 152) = 0uLL;
  *(_OWORD *)(v6 + 168) = 0uLL;
  *((void *)v6 + 3) = &unk_1EE33BD88;
  *((void *)v6 + 34) = 0;
  *((void *)v6 + 25) = 0;
  *((void *)v6 + 26) = 0;
  *((void *)v6 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = 0;
  *((void *)v6 + 32) = 0;
  *((_OWORD *)v6 + 14) = 0uLL;
  *((_OWORD *)v6 + 15) = 0uLL;
  *((_DWORD *)v6 + 46) = a2;
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
    void *v8 = &unk_1EE32D490;
    nitro::nitro_function::nitro_function(v10);
  }
  else
  {
    void *v8 = &unk_1EE32D490;
  }
  result.n128_u64[0] = (unint64_t)v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382258;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

_DWORD *Espresso::abstract_engine::available_compute_paths@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  id v3 = operator new(4uLL);
  *a1 = v3;
  _DWORD *v3 = 0;
  __n128 result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void Espresso::trainer::initialize_weights(uint64_t a1)
{
  v31[0] = 0;
  v31[1] = v31;
  void v31[2] = 0x3812000000;
  v31[3] = __Block_byref_object_copy__4734;
  v31[4] = __Block_byref_object_dispose__4735;
  v31[5] = "";
  int v32 = 1993;
  v30[0] = 0;
  v30[1] = v30;
  uint64_t v30[2] = 0x3812000000;
  v30[3] = __Block_byref_object_copy__25;
  v30[4] = __Block_byref_object_dispose__26;
  v30[5] = "";
  v30[6] = 0x3F80000000000000;
  uint64_t v1 = *(uint64_t **)(*(void *)a1 + 32);
  for (uint64_t i = *(uint64_t **)(*(void *)a1 + 40); v1 != i; v1 += 2)
  {
    uint64_t v3 = *v1;
    long long v2 = (std::__shared_weak_count *)v1[1];
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = v2;
    char v4 = *(const void **)(v3 + 64);
    if (v4)
    {
      if (v5)
      {
        long long v6 = v5;
        unint64_t v7 = *(std::__shared_weak_count **)(v3 + 72);
        uint64_t v21 = v7;
        if (v7
          && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
              (char v4 = *(const void **)(v3 + 64)) == 0))
        {
          float v12 = 1.0;
        }
        else
        {
          if (v8)
          {
            uint64_t v9 = v8;
            uint64_t v10 = *(std::__shared_weak_count **)(v3 + 72);
            if (v10) {
              atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v20 = v10;
            int v19 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v8 + 384))(v8) + 48);
            int v11 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v9 + 384))(v9) + 52);
            float v12 = (float)(v11 * v19 * *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v9 + 384))(v9) + 44));
            if (v20) {
              nitro::nitro_function::nitro_function(v20);
            }
          }
          else
          {
            float v12 = 1.0;
          }
          unint64_t v13 = *(const void **)(v3 + 64);
          if (v13)
          {
            if (v14)
            {
              unint64_t v15 = *(std::__shared_weak_count **)(v3 + 72);
              if (v15) {
                atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              float v12 = (float)*(unsigned int *)((*(uint64_t (**)(void *))(*(void *)v14 + 384))(v14) + 4);
              if (v15) {
                nitro::nitro_function::nitro_function(v15);
              }
            }
          }
        }
        uint64_t v16 = 0;
        float v17 = sqrtf(3.0 / v12);
        while ((int)v16 < (*(int (**)(void *))(*(void *)v6 + 328))(v6))
        {
          (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*(void *)v6 + 320))(&v28, v6, v16);
          uint64_t v18 = v29;
          v27[0] = v28;
          v27[1] = v29;
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v24[0] = MEMORY[0x1E4F143A8];
          v24[1] = 3221225472;
          uint64_t v24[2] = ___ZN8Espresso7trainer18initialize_weightsENSt3__110shared_ptrINS_3netEEE_block_invoke;
          v24[3] = &unk_1E5747108;
          int v25 = v16;
          v24[4] = v30;
          v24[5] = v31;
          float v26 = v17;
          Espresso::sync_copy_from_host(v27, v24);
          if (v18) {
            nitro::nitro_function::nitro_function(v18);
          }
          if (v29) {
            nitro::nitro_function::nitro_function(v29);
          }
          uint64_t v16 = (v16 + 1);
        }
        if (v21) {
          nitro::nitro_function::nitro_function(v21);
        }
      }
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
  }
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v31, 8);
}

void sub_1927D27EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4734(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  return result;
}

uint64_t ___ZN8Espresso7trainer18initialize_weightsENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t result, uint64_t *a2)
{
  int v2 = *(_DWORD *)(result + 48);
  if (v2)
  {
    if (v2 == 1)
    {
      unint64_t v3 = 0;
      uint64_t v4 = *a2;
      unint64_t v5 = *(int *)(*a2 + 8);
      uint64_t v6 = *a2 + 12;
      while (1)
      {
        uint64_t v7 = 0;
        unint64_t v8 = v5;
        do
        {
          v8 *= *(int *)(v6 + v7);
          v7 += 4;
        }
        while (v7 != 12);
        if (v8 <= v3) {
          break;
        }
        *(_DWORD *)(*(void *)(v4 + 24) + 4 * v3++) = 0;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = *a2;
    uint64_t v11 = *a2 + 12;
    while (1)
    {
      uint64_t v12 = 0;
      unint64_t v13 = *(int *)(v10 + 8);
      do
      {
        v13 *= *(int *)(v11 + v12);
        v12 += 4;
      }
      while (v12 != 12);
      if (v13 <= v9) {
        break;
      }
      uint64_t v14 = *(void *)(*(void *)(result + 32) + 8);
      uint64_t v15 = *(void *)(*(void *)(result + 40) + 8);
      float v16 = *(float *)(v14 + 48);
      float v17 = *(float *)(v14 + 52) - v16;
      LODWORD(v14) = *(_DWORD *)(v15 + 48);
      unsigned int v18 = v14 / 0xADC8;
      LODWORD(v14) = 48271 * (v14 % 0xADC8);
      v18 *= 3399;
      BOOL v19 = v14 >= v18;
      int v20 = v14 - v18;
      if (v19) {
        int v21 = 0;
      }
      else {
        int v21 = 0x7FFFFFFF;
      }
      int v22 = v21 + v20;
      *(_DWORD *)(v15 + 48) = v22;
      double v23 = (float)(v16 + (float)(v17 * (float)((float)(v22 - 1) * 4.6566e-10))) + -0.5;
      *(float *)&double v23 = v23 * *(float *)(result + 52) + v23 * *(float *)(result + 52);
      *(_DWORD *)(*(void *)(v10 + 24) + 4 * v9++) = LODWORD(v23);
    }
  }
  return result;
}

std::string *Espresso::trainer::trainer(std::string *this, const Espresso::trainer::options *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  }
  long long v7 = *((_OWORD *)a2 + 4);
  long long v8 = *((_OWORD *)a2 + 6);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = *((_OWORD *)a2 + 5);
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v7;
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 7);
    this[5].__r_.__value_.__l.__size_ = *((void *)a2 + 16);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = v9;
  }
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 136);
    this[6].__r_.__value_.__l.__size_ = *((void *)a2 + 19);
    *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = v10;
  }
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 160), *((const std::string::value_type **)a2 + 20), *((void *)a2 + 21));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 10);
    this[7].__r_.__value_.__l.__size_ = *((void *)a2 + 22);
    *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = v11;
  }
  this[7].__r_.__value_.__r.__words[2] = *((void *)a2 + 23);
  std::string::size_type v12 = *((void *)a2 + 24);
  this[8].__r_.__value_.__r.__words[0] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  this[8].__r_.__value_.__l.__size_ = *((void *)a2 + 25);
  std::string::size_type v13 = *((void *)a2 + 26);
  this[8].__r_.__value_.__r.__words[2] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a2 + 239) < 0)
  {
    std::string::__init_copy_ctor_external(this + 9, *((const std::string::value_type **)a2 + 27), *((void *)a2 + 28));
  }
  else
  {
    long long v14 = *(_OWORD *)((char *)a2 + 216);
    this[9].__r_.__value_.__r.__words[2] = *((void *)a2 + 29);
    *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = v14;
  }
  long long v15 = *((_OWORD *)a2 + 15);
  LODWORD(this[10].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 64);
  *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = v15;
  float v16 = this + 11;
  this[11].__r_.__value_.__l.__size_ = 0;
  this[11].__r_.__value_.__r.__words[2] = 0;
  this[11].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>(this[11].__r_.__value_.__r.__words, *((void **)a2 + 33), *((void **)a2 + 34), (uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 4);
  std::string::size_type v17 = *((void *)a2 + 36);
  LODWORD(this[12].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 74);
  this[12].__r_.__value_.__r.__words[0] = v17;
  if (*((char *)a2 + 327) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 304), *((const std::string::value_type **)a2 + 38), *((void *)a2 + 39));
  }
  else
  {
    long long v18 = *((_OWORD *)a2 + 19);
    this[13].__r_.__value_.__l.__size_ = *((void *)a2 + 40);
    *(_OWORD *)&this[12].__r_.__value_.__r.__words[2] = v18;
  }
  if (*((char *)a2 + 351) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 328), *((const std::string::value_type **)a2 + 41), *((void *)a2 + 42));
  }
  else
  {
    long long v19 = *(_OWORD *)((char *)a2 + 328);
    this[14].__r_.__value_.__l.__size_ = *((void *)a2 + 43);
    *(_OWORD *)&this[13].__r_.__value_.__r.__words[2] = v19;
  }
  int v20 = (std::string *)((char *)this + 352);
  if (*((char *)a2 + 375) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *((const std::string::value_type **)a2 + 44), *((void *)a2 + 45));
  }
  else
  {
    long long v21 = *((_OWORD *)a2 + 22);
    this[15].__r_.__value_.__l.__size_ = *((void *)a2 + 46);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  *(_OWORD *)&this[21].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[22].__r_.__value_.__r.__words[1] = 0u;
  int v108 = this + 19;
  *(_OWORD *)&this[20].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[21].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[19].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[19].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[17].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[18].__r_.__value_.__r.__words[1] = 0u;
  long long v22 = *(_OWORD *)&this[3].__r_.__value_.__r.__words[1];
  *(_OWORD *)&this[15].__r_.__value_.__r.__words[2] = *(_OWORD *)&this[2].__r_.__value_.__r.__words[2];
  *(_OWORD *)&this[16].__r_.__value_.__r.__words[1] = v22;
  *(_OWORD *)&this[17].__r_.__value_.__l.__data_ = *(_OWORD *)&this[4].__r_.__value_.__l.__data_;
  long long v146 = 0x100uLL;
  int v147 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v148, "data");
  std::string::basic_string[abi:ne180100]<0>(&v150, "labels");
  std::string::size_type v24 = this[7].__r_.__value_.__r.__words[2];
  std::string::pointer data = this[8].__r_.__value_.__l.__data_;
  if (data) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)data + 1, 1uLL, memory_order_relaxed);
  }
  int v25 = (std::__shared_weak_count *)this[21].__r_.__value_.__l.__data_;
  this[20].__r_.__value_.__r.__words[2] = v24;
  this[21].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  std::string::size_type size = this[8].__r_.__value_.__l.__size_;
  std::string::size_type v26 = this[8].__r_.__value_.__r.__words[2];
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  this[21].__r_.__value_.__l.__size_ = size;
  uint64_t v28 = (std::__shared_weak_count *)this[21].__r_.__value_.__r.__words[2];
  this[21].__r_.__value_.__r.__words[2] = v26;
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  *(_DWORD *)id v118 = HIDWORD(this[10].__r_.__value_.__r.__words[0]);
  Espresso::create_context((int *)v118, &v144);
  if (!this[10].__r_.__value_.__s.__data_[12]) {
    *(unsigned char *)(v144 + 44) = 0;
  }
  std::string::pointer v29 = this[1].__r_.__value_.__l.__data_;
  int v30 = (std::__shared_weak_count *)this[1].__r_.__value_.__l.__size_;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v31 = *((char *)a2 + 23);
  int v32 = *(const char **)a2;
  if (!v29)
  {
    if (v31 >= 0) {
      int v32 = (const char *)a2;
    }
    printf("Loading network '%s'\n", v32);
    Espresso::load_network((uint64_t)a2, &v144, this[10].__r_.__value_.__r.__words[1], 0, (uint64_t *)v118);
    int v33 = *(std::__shared_weak_count **)&v118[8];
    std::string::pointer v29 = *(std::string::pointer *)v118;
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
    LOBYTE(v31) = *((unsigned char *)a2 + 23);
    int v32 = *(const char **)a2;
    int v30 = v33;
  }
  if ((v31 & 0x80u) == 0) {
    int v32 = (const char *)a2;
  }
  NSLog(&cfstr_TrainerTrainer.isa, v32, HIDWORD(this[10].__r_.__value_.__r.__words[0]), LODWORD(this[10].__r_.__value_.__r.__words[1]));
  char v109 = v30;
  if (this[12].__r_.__value_.__s.__data_[0] && !this[10].__r_.__value_.__s.__data_[12])
  {
    v143[0] = v29;
    v143[1] = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::trainer::initialize_weights((uint64_t)v143);
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
  }
  if (!v29)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v105 = (const char *)a2;
    }
    else {
      uint64_t v105 = *(const char **)a2;
    }
    printf("Can't load network: %s\n", v105);
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)v118);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (SHIDWORD(this[16].__r_.__value_.__r.__words[1]) <= 0) {
    HIDWORD(this[16].__r_.__value_.__r.__words[1]) = *(_DWORD *)(**(void **)(**((void **)v29 + 4) + 80) + 20);
  }
  std::string::pointer v35 = this[11].__r_.__value_.__l.__data_;
  int v34 = (char *)this[11].__r_.__value_.__l.__size_;
  unint64_t v36 = (v34 - v35) >> 4;
  uint64_t v37 = this[19].__r_.__value_.__r.__words[2];
  std::string::pointer v38 = this[19].__r_.__value_.__l.__data_;
  if (v36 > (v37 - (uint64_t)v38) >> 4)
  {
    if (v38)
    {
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)v108);
      operator delete(v108->__r_.__value_.__l.__data_);
      uint64_t v37 = 0;
      v108->__r_.__value_.__r.__words[0] = 0;
      this[19].__r_.__value_.__l.__size_ = 0;
      this[19].__r_.__value_.__r.__words[2] = 0;
    }
    if (v34 - v35 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v39 = v37 >> 3;
    if (v37 >> 3 <= v36) {
      uint64_t v39 = (v34 - v35) >> 4;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v40 = v39;
    }
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](v108, v40);
    uint64_t v41 = (void *)this[19].__r_.__value_.__l.__size_;
    uint64_t v42 = &this[19].__r_.__value_.__s.__data_[16];
    __int32 v43 = v35;
    goto LABEL_75;
  }
  unint64_t v44 = (uint64_t)(this[19].__r_.__value_.__l.__size_ - (void)v38) >> 4;
  if (v44 < v36)
  {
    int v45 = (uint64_t *)&v35[16 * v44];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>((uint64_t *)this[11].__r_.__value_.__l.__data_, v45, v38);
    uint64_t v41 = (void *)this[19].__r_.__value_.__l.__size_;
    uint64_t v42 = &this[19].__r_.__value_.__s.__data_[16];
    __int32 v43 = v45;
LABEL_75:
    this[19].__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)v42, v43, v34, v41);
    goto LABEL_81;
  }
  uint64_t v46 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>((uint64_t *)this[11].__r_.__value_.__l.__data_, (uint64_t *)this[11].__r_.__value_.__l.__size_, v38);
  for (std::string::size_type i = this[19].__r_.__value_.__l.__size_; (void *)i != v46; i -= 16)
  {
    uint64_t v48 = *(std::__shared_weak_count **)(i - 8);
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
  }
  this[19].__r_.__value_.__l.__size_ = (std::string::size_type)v46;
LABEL_81:
  if (this[2].__r_.__value_.__s.__data_[15] < 0)
  {
    if (!this[2].__r_.__value_.__r.__words[0]) {
      goto LABEL_100;
    }
  }
  else if (!this[2].__r_.__value_.__s.__data_[15])
  {
    goto LABEL_100;
  }
  Espresso::load_network((uint64_t)&this[1].__r_.__value_.__r.__words[2], &v144, this[10].__r_.__value_.__r.__words[1], 0, (uint64_t *)&v138);
  long long v49 = (void *)this[11].__r_.__value_.__l.__size_;
  unint64_t v50 = this[11].__r_.__value_.__r.__words[2];
  if ((unint64_t)v49 >= v50)
  {
    uint64_t v53 = (uint64_t)((uint64_t)v49 - v16->__r_.__value_.__r.__words[0]) >> 4;
    unint64_t v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v55 = v50 - v16->__r_.__value_.__r.__words[0];
    if (v55 >> 3 > v54) {
      unint64_t v54 = v55 >> 3;
    }
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v54;
    }
    long long v119 = (std::__shared_weak_count *)&this[11].__r_.__value_.__r.__words[2];
    int v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v56);
    uint64_t v58 = &v57[16 * v53];
    *(void *)id v118 = v57;
    *(void *)&v118[8] = v58;
    *(void *)&v118[24] = &v57[16 * v59];
    std::string::size_type v60 = v138.__r_.__value_.__l.__size_;
    *(_OWORD *)uint64_t v58 = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
    uint64_t v51 = (std::__shared_weak_count *)v60;
    if (v60)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
      uint64_t v51 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
    }
    *(void *)&v118[16] = v58 + 16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(this[11].__r_.__value_.__r.__words, v118);
    std::string::size_type v52 = this[11].__r_.__value_.__l.__size_;
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v118);
  }
  else
  {
    void *v49 = v138.__r_.__value_.__r.__words[0];
    uint64_t v51 = (std::__shared_weak_count *)v138.__r_.__value_.__l.__size_;
    v49[1] = v138.__r_.__value_.__l.__size_;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v52 = (std::string::size_type)(v49 + 2);
    this[11].__r_.__value_.__l.__size_ = (std::string::size_type)(v49 + 2);
  }
  this[11].__r_.__value_.__l.__size_ = v52;
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
LABEL_100:
  if (!this[10].__r_.__value_.__s.__data_[12] && !this[20].__r_.__value_.__r.__words[2])
  {
    std::allocate_shared[abi:ne180100]<Espresso::multikey_data_source,std::allocator<Espresso::multikey_data_source>,Espresso::async_data_source::options &,std::string &,void>(v118, &v146, (uint64_t)&this[4].__r_.__value_.__r.__words[2]);
    uint64_t v61 = (std::__shared_weak_count *)this[21].__r_.__value_.__l.__data_;
    *(_OWORD *)&this[20].__r_.__value_.__r.__words[2] = *(_OWORD *)v118;
    if (v61) {
      nitro::nitro_function::nitro_function(v61);
    }
  }
  if (!this[21].__r_.__value_.__l.__size_)
  {
    std::allocate_shared[abi:ne180100]<Espresso::multikey_data_source,std::allocator<Espresso::multikey_data_source>,Espresso::async_data_source::options &,std::string &,void>(v118, &v146, (uint64_t)&this[5].__r_.__value_.__r.__words[2]);
    uint64_t v62 = (std::__shared_weak_count *)this[21].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[21].__r_.__value_.__r.__words[1] = *(_OWORD *)v118;
    if (v62) {
      nitro::nitro_function::nitro_function(v62);
    }
  }
  if (HIDWORD(this[16].__r_.__value_.__r.__words[1]) != *(_DWORD *)(**(void **)(**((void **)v29 + 4) + 80) + 20))
  {
    v142[0] = 0;
    v142[1] = 0;
    std::string v141 = v142;
    id v63 = (void *)*((void *)v29 + 29);
    if (v63 != (void *)(v29 + 240))
    {
      do
      {
        if (*((char *)v63 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v138, (const std::string::value_type *)v63[4], v63[5]);
        }
        else {
          std::string v138 = *(std::string *)(v63 + 4);
        }
        v139[0] = *((unsigned char *)v63 + 56);
        char v133 = &v138;
        int v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v29 + 136), (unsigned __int8 *)&v138, (long long **)&v133);
        Espresso::abstract_blob_container::shape(v118, *((void *)v64 + 5));
        if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v65 = &v138;
        }
        else {
          uint64_t v65 = (std::string *)v138.__r_.__value_.__r.__words[0];
        }
        NSLog(&cfstr_TrainerTrainer_0.isa, v65, *(unsigned int *)v118, *(unsigned int *)&v118[4], *(unsigned int *)&v118[8], *(unsigned int *)&v118[12], HIDWORD(this[16].__r_.__value_.__r.__words[1]));
        *(_DWORD *)&v118[12] = HIDWORD(this[16].__r_.__value_.__r.__words[1]);
        char v133 = &v138;
        uint64_t v66 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v141, &v138, (long long **)&v133);
        long long v67 = *(_OWORD *)&v118[16];
        *(_OWORD *)(v66 + 56) = *(_OWORD *)v118;
        *(_OWORD *)(v66 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v67;
        *((void *)v66 + 11) = v119;
        if (v66 + 56 != v118) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v66 + 96, (char *)__p, (uint64_t)v121, (v121 - (unsigned char *)__p) >> 2);
        }
        if (__p)
        {
          long long v121 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v138.__r_.__value_.__l.__data_);
        }
        uint64_t v68 = (void *)v63[1];
        if (v68)
        {
          do
          {
            unint64_t v69 = v68;
            uint64_t v68 = (void *)*v68;
          }
          while (v68);
        }
        else
        {
          do
          {
            unint64_t v69 = (void *)v63[2];
            BOOL v70 = *v69 == (void)v63;
            id v63 = v69;
          }
          while (!v70);
        }
        id v63 = v69;
      }
      while (v69 != (void *)(v29 + 240));
    }
    v137[0] = (uint64_t)v29;
    v137[1] = (uint64_t)v109;
    if (v109) {
      atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::compute_network_shape_starting_from_data_shapes(v137, (uint64_t)&v141, (uint64_t)&v138);
    if (v109)
    {
      nitro::nitro_function::nitro_function(v109);
      atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::shape_network_recursive((Espresso *)v29, (Espresso::net *)&v138, 0, 0);
    if (v109) {
      nitro::nitro_function::nitro_function(v109);
    }
    std::string::pointer v71 = this[19].__r_.__value_.__l.__data_;
    for (std::string::size_type j = this[19].__r_.__value_.__l.__size_; v71 != (std::string::pointer)j; v71 += 16)
    {
      size_t v73 = *(Espresso **)v71;
      int v74 = (std::__shared_weak_count *)*((void *)v71 + 1);
      if (v74) {
        atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::abstract_blob_container::shape(v118, **(void **)(**((void **)v73 + 4) + 80));
      *(_DWORD *)&v118[12] = HIDWORD(this[16].__r_.__value_.__r.__words[1]);
      v132[0] = (uint64_t)v73;
      v132[1] = (uint64_t)v74;
      if (v74) {
        atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::compute_network_shape_starting_from_data_shape(v132, (long long *)v118, (uint64_t)&v133);
      if (v74)
      {
        nitro::nitro_function::nitro_function(v74);
        atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::shape_network_recursive(v73, (Espresso::net *)&v133, 0, 0);
      if (v74) {
        nitro::nitro_function::nitro_function(v74);
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v136, v136[1]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v133, (char *)v134);
      if (__p)
      {
        long long v121 = __p;
        operator delete(__p);
      }
      if (v74) {
        nitro::nitro_function::nitro_function(v74);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v139, v140);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v138, (char *)v138.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v141, v142[0]);
  }
  int v75 = HIDWORD(this[12].__r_.__value_.__r.__words[0]);
  if (!v75)
  {
    uint64_t v80 = v109;
    if (this[10].__r_.__value_.__s.__data_[12]) {
      goto LABEL_214;
    }
LABEL_169:
    LOBYTE(v133) = 1;
    std::string::pointer v116 = v29;
    uint64_t v117 = v80;
    if (v80) {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::gradient_builder::gradient_builder((uint64_t)v118, (uint64_t *)&v116, (char *)&v133);
    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
    Espresso::gradient_builder::build_gradient((Espresso::gradient_builder *)v118, (Espresso::net **)&v138);
    unint64_t v81 = (std::__shared_weak_count *)this[18].__r_.__value_.__l.__data_;
    *(_OWORD *)&this[17].__r_.__value_.__r.__words[2] = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
    if (v81) {
      nitro::nitro_function::nitro_function(v81);
    }
    long long v82 = *(_OWORD *)v118;
    if (*(void *)&v118[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v118[8] + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v83 = (std::__shared_weak_count *)this[18].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[18].__r_.__value_.__r.__words[1] = v82;
    if (v83) {
      nitro::nitro_function::nitro_function(v83);
    }
    if (LODWORD(this[10].__r_.__value_.__r.__words[1]) || HIDWORD(this[10].__r_.__value_.__r.__words[0]))
    {
      NSLog(&cfstr_DisabledDumpin.isa, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoTrain/EspressoTrain/EspressoTrain.mm", 207);
    }
    else
    {
      int v101 = (std::__shared_weak_count *)this[18].__r_.__value_.__l.__data_;
      v115[0] = this[17].__r_.__value_.__r.__words[2];
      v115[1] = (uint64_t)v101;
      if (v101) {
        atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((char *)a2 + 239) >= 0) {
        size_t v102 = *((unsigned __int8 *)a2 + 239);
      }
      else {
        size_t v102 = *((void *)a2 + 28);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v102 + 16);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v102)
      {
        if (*((char *)a2 + 239) >= 0) {
          float v104 = (char *)a2 + 216;
        }
        else {
          float v104 = (char *)*((void *)a2 + 27);
        }
        memmove(p_str, v104, v102);
      }
      strcpy((char *)p_str + v102, "bwd.espresso.net");
      std::string::basic_string[abi:ne180100]<0>(v112, "");
      std::string::basic_string[abi:ne180100]<0>(v110, "");
      Espresso::dump_network(v115, &__str, (uint64_t)v112, (uint64_t)v110);
      if (v111 < 0) {
        operator delete(v110[0]);
      }
      if (v113 < 0) {
        operator delete(v112[0]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v101) {
        nitro::nitro_function::nitro_function(v101);
      }
    }
    unint64_t v84 = (std::__shared_weak_count *)this[18].__r_.__value_.__l.__data_;
    if (v84)
    {
      atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v84);
    }
    uint64_t v85 = (char *)operator new(0xB0uLL);
    *((void *)v85 + 1) = 0;
    *((void *)v85 + 2) = 0;
    *(void *)uint64_t v85 = &unk_1EE3814C8;
    std::string::size_type v86 = this[17].__r_.__value_.__r.__words[2];
    long long v87 = (std::__shared_weak_count *)this[18].__r_.__value_.__l.__data_;
    if (v87) {
      atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v89 = this[20].__r_.__value_.__r.__words[2];
    std::vector<int>::pointer v88 = (std::__shared_weak_count *)this[21].__r_.__value_.__l.__data_;
    if (v88)
    {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)v85 + 3) = 0;
      *((void *)v85 + 4) = v89;
      *((void *)v85 + 5) = v88;
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *((void *)v85 + 3) = 0;
      *((void *)v85 + 4) = v89;
      *((void *)v85 + 5) = 0;
    }
    *((void *)v85 + 6) = v86;
    *((void *)v85 + 7) = v87;
    if (v87) {
      atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v98 = *(_OWORD *)&this[16].__r_.__value_.__r.__words[2];
    *((void *)v85 + 20) = 0;
    *((_OWORD *)v85 + 4) = v98;
    *((void *)v85 + 10) = this[17].__r_.__value_.__l.__size_;
    *((void *)v85 + 21) = 0;
    *(_OWORD *)(v85 + 88) = 0u;
    *(_OWORD *)(v85 + 104) = 0u;
    *(_OWORD *)(v85 + 120) = 0u;
    *(_OWORD *)(v85 + 136) = 0u;
    *((void *)v85 + 19) = v85 + 160;
    if (v88) {
      nitro::nitro_function::nitro_function(v88);
    }
    if (v87) {
      nitro::nitro_function::nitro_function(v87);
    }
    *(void *)&long long v99 = v85 + 24;
    *((void *)&v99 + 1) = v85;
    unint64_t v100 = (std::__shared_weak_count *)this[20].__r_.__value_.__l.__size_;
    *(_OWORD *)&this[20].__r_.__value_.__l.__data_ = v99;
    if (v100) {
      nitro::nitro_function::nitro_function(v100);
    }
    if (v84) {
      nitro::nitro_function::nitro_function(v84);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v122);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, (uint64_t)v121);
    if (v119) {
      nitro::nitro_function::nitro_function(v119);
    }
    uint8x8_t v96 = *(std::__shared_weak_count **)&v118[8];
    if (*(void *)&v118[8]) {
      goto LABEL_221;
    }
    goto LABEL_222;
  }
  if (!this[10].__r_.__value_.__s.__data_[12])
  {
    unint64_t v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v107, "Invalid option");
    __cxa_throw(v107, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  char v135 = 0;
  HIDWORD(v133) = v75;
  LODWORD(v133) = this[12].__r_.__value_.__r.__words[1];
  uint64_t v134 = 0x2000007C9;
  std::string::pointer v76 = this[19].__r_.__value_.__l.__data_;
  for (std::string::size_type k = this[19].__r_.__value_.__l.__size_; v76 != (std::string::pointer)k; v76 += 16)
  {
    uint64_t v78 = *(Espresso **)v76;
    uint64_t v79 = (std::__shared_weak_count *)*((void *)v76 + 1);
    if (v79) {
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::abstract_blob_container::shape(v118, **(void **)(**((void **)v78 + 4) + 80));
    *(_DWORD *)&v118[12] = HIDWORD(v133) * HIDWORD(this[16].__r_.__value_.__r.__words[1]);
    v131[0] = (uint64_t)v78;
    v131[1] = (uint64_t)v79;
    if (v79) {
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::compute_network_shape_starting_from_data_shape(v131, (long long *)v118, (uint64_t)&v138);
    if (v79)
    {
      nitro::nitro_function::nitro_function(v79);
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::shape_network_recursive(v78, (Espresso::net *)&v138, 0, 0);
    if (v79) {
      nitro::nitro_function::nitro_function(v79);
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v139, v140);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v138, (char *)v138.__r_.__value_.__l.__size_);
    if (__p)
    {
      long long v121 = __p;
      operator delete(__p);
    }
    if (v79) {
      nitro::nitro_function::nitro_function(v79);
    }
  }
  v130[0] = v29;
  v130[1] = v109;
  if (v109) {
    atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (this[13].__r_.__value_.__s.__data_[15] < 0) {
    std::string::__init_copy_ctor_external(&v129, (const std::string::value_type *)this[12].__r_.__value_.__r.__words[2], this[13].__r_.__value_.__r.__words[0]);
  }
  else {
    std::string v129 = *(std::string *)((char *)this + 304);
  }
  Espresso::add_dropout_augment_layer(v130, (uint64_t)&v133, (uint64_t)&v129, v118);
  uint64_t v80 = *(std::__shared_weak_count **)&v118[8];
  std::string::pointer v29 = *(std::string::pointer *)v118;
  if (v109) {
    nitro::nitro_function::nitro_function(v109);
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (v109) {
    nitro::nitro_function::nitro_function(v109);
  }
  std::string::size_type v90 = this[19].__r_.__value_.__l.__size_;
  if (v90 == this[19].__r_.__value_.__r.__words[0])
  {
    v128[0] = v29;
    v128[1] = v80;
    if (v80) {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v126, "");
    Espresso::add_dropout_augment_join_layer(v128, (uint64_t)&v133, (uint64_t)v126, v118);
    unint64_t v94 = *(std::__shared_weak_count **)&v118[8];
    std::string::pointer v29 = *(std::string::pointer *)v118;
    if (v80) {
      nitro::nitro_function::nitro_function(v80);
    }
    if (v127 < 0) {
      operator delete(v126[0]);
    }
    if (v80) {
      nitro::nitro_function::nitro_function(v80);
    }
    uint64_t v80 = v94;
  }
  else
  {
    long long v91 = *(_OWORD *)(v90 - 16);
    long long v125 = v91;
    if (*((void *)&v91 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v91 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v123, "");
    Espresso::add_dropout_augment_join_layer(&v125, (uint64_t)&v133, (uint64_t)v123, v118);
    std::string::size_type v92 = this[19].__r_.__value_.__l.__size_;
    long long v93 = *(std::__shared_weak_count **)(v92 - 8);
    *(_OWORD *)(v92 - 16) = *(_OWORD *)v118;
    if (v93) {
      nitro::nitro_function::nitro_function(v93);
    }
    if (v124 < 0) {
      operator delete(v123[0]);
    }
    if (*((void *)&v125 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v125 + 1));
    }
  }
  if (!this[10].__r_.__value_.__s.__data_[12]) {
    goto LABEL_169;
  }
LABEL_214:
  if (v80) {
    atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v95 = (std::__shared_weak_count *)this[18].__r_.__value_.__l.__data_;
  this[17].__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
  this[18].__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
  if (v95) {
    nitro::nitro_function::nitro_function(v95);
  }
  if (v80) {
    atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint8x8_t v96 = (std::__shared_weak_count *)this[18].__r_.__value_.__r.__words[2];
  this[18].__r_.__value_.__l.__size_ = (std::string::size_type)v29;
  this[18].__r_.__value_.__r.__words[2] = (std::string::size_type)v80;
  if (v96) {
LABEL_221:
  }
    nitro::nitro_function::nitro_function(v96);
LABEL_222:
  if (v80) {
    nitro::nitro_function::nitro_function(v80);
  }
  if (v145) {
    nitro::nitro_function::nitro_function(v145);
  }
  if (v151 < 0) {
    operator delete(v150);
  }
  if (v149 < 0) {
    operator delete(v148);
  }
  return this;
}

void sub_1927D3A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&a46);
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  uint64_t v51 = *(std::__shared_weak_count **)(v49 - 176);
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  Espresso::async_data_source::options::~options((void **)(v49 - 168));
  if (*(char *)(v46 + 551) < 0) {
    operator delete(*(void **)(v46 + 528));
  }
  std::string::size_type v52 = *(std::__shared_weak_count **)(v46 + 520);
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  uint64_t v53 = *(std::__shared_weak_count **)(v46 + 504);
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  unint64_t v54 = *(std::__shared_weak_count **)(v46 + 488);
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  *(void *)(v49 - 168) = a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v49 - 168));
  uint64_t v55 = *(std::__shared_weak_count **)(v46 + 448);
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  unint64_t v56 = *(std::__shared_weak_count **)(v46 + 432);
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  Espresso::trainer::options::~options((void **)v46);
  _Unwind_Resume(a1);
}

void sub_1927D3B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a36) {
    nitro::nitro_function::nitro_function(a36);
  }
  JUMPOUT(0x1927D3ED8);
}

void sub_1927D3BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::runtime_error a37)
{
  std::runtime_error::~runtime_error(&a37);
  __cxa_end_catch();
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  uint64_t v41 = *(std::__shared_weak_count **)(v39 - 176);
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  Espresso::async_data_source::options::~options((void **)(v39 - 168));
  if (*(char *)(v37 + 551) < 0) {
    operator delete(*(void **)(v37 + 528));
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v37 + 520);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  __int32 v43 = *(std::__shared_weak_count **)(v37 + 504);
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  unint64_t v44 = *(std::__shared_weak_count **)(v37 + 488);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  *(void *)(v39 - 168) = a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 168));
  int v45 = *(std::__shared_weak_count **)(v37 + 448);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  uint64_t v46 = *(std::__shared_weak_count **)(v37 + 432);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  Espresso::trainer::options::~options((void **)v37);
  _Unwind_Resume(a1);
}

void sub_1927D3BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37)
{
  if (*(char *)(v37 + 351) < 0) {
    operator delete(*v40);
  }
  if (*(char *)(v37 + 327) < 0) {
    operator delete(*v41);
  }
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a37);
  if (*(char *)(v37 + 239) < 0) {
    operator delete(*v39);
  }
  unint64_t v44 = *(std::__shared_weak_count **)(v37 + 208);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  int v45 = *(std::__shared_weak_count **)(v37 + 192);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  if (*(char *)(v37 + 183) < 0) {
    operator delete(*v38);
  }
  if (*(char *)(v37 + 159) < 0) {
    operator delete(*v43);
  }
  if (*(char *)(v37 + 135) < 0) {
    operator delete(*v42);
  }
  if (*(char *)(v37 + 63) < 0) {
    operator delete(*a21);
  }
  uint64_t v46 = *(std::__shared_weak_count **)(v37 + 32);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (*(char *)(v37 + 23) < 0) {
    operator delete(*(void **)v37);
  }
  JUMPOUT(0x1927D3F5CLL);
}

void sub_1927D3C18()
{
}

void sub_1927D3C20()
{
}

void sub_1927D3C28()
{
}

void sub_1927D3C30()
{
}

void sub_1927D3C38()
{
}

void sub_1927D3C40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a57) {
    JUMPOUT(0x1927D3C64);
  }
  JUMPOUT(0x1927D3C68);
}

void sub_1927D3C70()
{
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  Espresso::network_shape::~network_shape((char **)&STACK[0x230]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v1 - 224, *(char **)(v1 - 216));
  JUMPOUT(0x1927D3ED4);
}

void sub_1927D3C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (v23) {
    nitro::nitro_function::nitro_function(a23);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v24 - 224, *(char **)(v24 - 216));
  JUMPOUT(0x1927D3ED4);
}

void sub_1927D3C94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0) {
LABEL_5:
    }
      JUMPOUT(0x1927D3ED8);
  }
  else if (!v42)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x1927D3CBCLL);
}

void sub_1927D3CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (a66 < 0) {
    operator delete(__p);
  }
  if (a23) {
    JUMPOUT(0x1927D3E94);
  }
  JUMPOUT(0x1927D3ED4);
}

void sub_1927D3CEC()
{
  if (STACK[0x238]) {
    nitro::nitro_function::nitro_function();
  }
  JUMPOUT(0x1927D3ED8);
}

void sub_1927D3CFC()
{
}

void sub_1927D3D04()
{
}

void sub_1927D3D0C()
{
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  JUMPOUT(0x1927D3EF8);
}

void sub_1927D3D24()
{
}

void sub_1927D3DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  std::string::size_type v26 = *(std::__shared_weak_count **)(v24 - 176);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  Espresso::async_data_source::options::~options((void **)(v24 - 168));
  if (*(char *)(v22 + 551) < 0) {
    operator delete(*(void **)(v22 + 528));
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v22 + 520);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v22 + 504);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  std::string::pointer v29 = *(std::__shared_weak_count **)(v22 + 488);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  *(void *)(v24 - 168) = a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 168));
  int v30 = *(std::__shared_weak_count **)(v22 + 448);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  int v31 = *(std::__shared_weak_count **)(v22 + 432);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  Espresso::trainer::options::~options((void **)v22);
  _Unwind_Resume(a1);
}

void sub_1927D3DC4()
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v0 - 224, *(void *)(v0 - 216));
  JUMPOUT(0x1927D3ED4);
}

void sub_1927D3DCC()
{
  if (v0) {
    nitro::nitro_function::nitro_function();
  }
  Espresso::network_shape::~network_shape((Espresso::network_shape *)&STACK[0x230]);
  JUMPOUT(0x1927D3EC8);
}

void sub_1927D3DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p)
{
  if (v42)
  {
    nitro::nitro_function::nitro_function(v42);
    char v43 = 0;
  }
  else
  {
    char v43 = 1;
  }
  if (__p) {
    operator delete(__p);
  }
  if ((v43 & 1) == 0) {
    JUMPOUT(0x1927D3E24);
  }
  JUMPOUT(0x1927D3E2CLL);
}

void sub_1927D3E38()
{
  if (v0) {
    JUMPOUT(0x1927D3E94);
  }
  JUMPOUT(0x1927D3ED8);
}

void sub_1927D3E9C()
{
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v0 - 224, *(char **)(v0 - 216));
  JUMPOUT(0x1927D3ED4);
}

void std::allocate_shared[abi:ne180100]<Espresso::multikey_data_source,std::allocator<Espresso::multikey_data_source>,Espresso::async_data_source::options &,std::string &,void>(void *a1, long long *a2, uint64_t a3)
{
  long long v6 = operator new(0x40uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *long long v6 = &unk_1EE386EE8;
  long long v8 = *a2;
  int v9 = *((_DWORD *)a2 + 4);
  if (*((char *)a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else {
    std::string v10 = *(std::string *)((unsigned char *)a2 + 1);
  }
  if (*((char *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else {
    std::string v11 = *(std::string *)((unsigned char *)a2 + 2);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  Espresso::multikey_data_source::multikey_data_source((uint64_t)(v6 + 3), (uint64_t)&v8, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1927D40A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  Espresso::async_data_source::options::~options(&a16);
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v26);
  _Unwind_Resume(a1);
}

void Espresso::async_data_source::options::~options(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

void Espresso::trainer::options::~options(void **this)
{
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  std::string::size_type v5 = this + 33;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  int v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)this[24];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  long long v4 = (std::__shared_weak_count *)this[4];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void std::__shared_ptr_emplace<Espresso::solver_sgd>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 160));
  long long v4 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  long long v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void std::__shared_ptr_emplace<Espresso::solver_sgd>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3814C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::solver_sgd>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3814C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::multikey_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<Espresso::multikey_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386EE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::multikey_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386EE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::trainer::train(Espresso::trainer *this)
{
  if (*((unsigned char *)this + 252))
  {
    Espresso::trainer::validation(this, (uint64_t)v44);
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v45);
  }
  else
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 62) + 32))(*((void *)this + 62));
    unint64_t v3 = (v2 - 1) / (unint64_t)*((int *)this + 99) + 1;
    unint64_t v30 = *((unsigned int *)this + 94);
    if ((v30 & 0x80000000) != 0) {
      unint64_t v30 = v3 * *((int *)this + 95);
    }
    unint64_t v4 = *((unsigned int *)this + 97);
    if ((v4 & 0x80000000) != 0) {
      unint64_t v4 = -(uint64_t)(*((int *)this + 98) * v3);
    }
    unint64_t v5 = *((int *)this + 96);
    std::allocate_shared[abi:ne180100]<Espresso::scoped_timer,std::allocator<Espresso::scoped_timer>,char const(&)[9],void>((Espresso::scoped_timer **)&v43);
    NSLog(&cfstr_TrainingOverZu.isa, v2, *((unsigned int *)this + 95), v30);
    if (v30)
    {
      unint64_t v6 = v30;
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      std::string v10 = "";
      do
      {
        Espresso::trainer::step((Espresso::solver_sgd **)this);
        unint64_t v11 = v7 + 1;
        if (!((v7 + 1) % v3))
        {
          uint64_t v12 = *((void *)this + 60);
          float v13 = *(float *)(v12 + 44) * *(float *)(v12 + 40);
          *(float *)(v12 + 40) = v13;
          printf("Epoch:%zu. LR decay lr=%f\n", v8++, v13);
        }
        if (!(v7 % v5)) {
          printf("Loss: %.4e (%.4e) (%zu/%zu/%zu)\n", *(float *)(*((void *)this + 60) + 68), *(float *)(*((void *)this + 60) + 64), v7, v6, v3);
        }
        if (!(v7 % v4))
        {
          long long v14 = (char *)v10;
          uint64_t v15 = v43;
          *(unsigned char *)(v43 + 56) = 1;
          v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::steady_clock::time_point *)(v15 + 8) = v16;
          double v17 = (double)(v16.__d_.__rep_ - *(void *)v15) * 0.000001;
          *(double *)(v15 + 16) = v17;
          *(float *)&double v17 = v17 * 0.00100000005;
          printf("dt=%.2f (%.2f/s)\n", *(float *)&v17, (float)((float)((v7 - v9) * *((_DWORD *)this + 99)) / *(float *)&v17));
          Espresso::trainer::validation(this, (uint64_t)v41);
          std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v42);
          std::string v10 = v14;
          if (!*((_DWORD *)this + 62) && !*((_DWORD *)this + 61))
          {
            if (*((char *)this + 239) >= 0) {
              size_t v18 = *((unsigned __int8 *)this + 239);
            }
            else {
              size_t v18 = *((void *)this + 28);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v38, v18 + 4);
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v19 = &v38;
            }
            else {
              long long v19 = (std::string *)v38.__r_.__value_.__r.__words[0];
            }
            if (v18)
            {
              if (*((char *)this + 239) >= 0) {
                int v20 = (char *)this + 216;
              }
              else {
                int v20 = (char *)*((void *)this + 27);
              }
              memmove(v19, v20, v18);
            }
            strcpy((char *)v19 + v18, "fwd_");
            std::to_string(&v37, v7);
            if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v21 = &v37;
            }
            else {
              long long v21 = (std::string *)v37.__r_.__value_.__r.__words[0];
            }
            if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v37.__r_.__value_.__l.__size_;
            }
            uint64_t v23 = std::string::append(&v38, (const std::string::value_type *)v21, size);
            std::string v10 = v14;
            long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v39.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            int v25 = std::string::append(&v39, ".espresso.net");
            long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            v40.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v39.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v38.__r_.__value_.__l.__data_);
            }
            uint64_t v27 = &v40;
            if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v27 = (std::string *)v40.__r_.__value_.__r.__words[0];
            }
            printf("Dumping to: %s\n", (const char *)v27);
            uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 56);
            v36[0] = *((void *)this + 55);
            v36[1] = (uint64_t)v28;
            if (v28) {
              atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v40;
            }
            std::string::basic_string[abi:ne180100]<0>(v33, v14);
            std::string::basic_string[abi:ne180100]<0>(__p, v14);
            Espresso::dump_network(v36, &__str, (uint64_t)v33, (uint64_t)__p);
            if (v32 < 0) {
              operator delete(__p[0]);
            }
            if (v34 < 0) {
              operator delete(v33[0]);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (v28) {
              nitro::nitro_function::nitro_function(v28);
            }
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
          }
          std::allocate_shared[abi:ne180100]<Espresso::scoped_timer,std::allocator<Espresso::scoped_timer>,char const(&)[9],void>((Espresso::scoped_timer **)&v40);
          std::string::pointer v29 = (std::__shared_weak_count *)*((void *)&v43 + 1);
          long long v43 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
          unint64_t v6 = v30;
          if (v29) {
            nitro::nitro_function::nitro_function(v29);
          }
          unint64_t v9 = v7;
        }
        ++v7;
      }
      while (v6 != v11);
    }
    if (*((void *)&v43 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v43 + 1));
    }
  }
}

void sub_1927D4834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  if (*(char *)(v56 - 169) < 0) {
    operator delete(*(void **)(v56 - 192));
  }
  uint64_t v58 = *(std::__shared_weak_count **)(v56 - 136);
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::trainer::validation(Espresso::trainer *this@<X0>, uint64_t a2@<X8>)
{
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  int v4 = *((unsigned __int8 *)this + 252);
  v21[0] = *((_DWORD *)this + 60);
  v21[1] = v4;
  int v5 = *((_DWORD *)this + 64);
  v21[2] = *((_DWORD *)this + 99);
  v21[3] = v5;
  long long v22 = 0u;
  long long v23 = 0u;
  std::string::operator=((std::string *)&v22, (const std::string *)this + 22);
  std::string::operator=((std::string *)((char *)&v23 + 8), (const std::string *)((char *)this + 160));
  std::string::operator=((std::string *)&v25, (const std::string *)((char *)this + 328));
  std::string::operator=((std::string *)((char *)&v26 + 8), (const std::string *)((char *)this + 352));
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 54);
  v20[0] = *((void *)this + 53);
  v20[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 65);
  v19[0] = *((void *)this + 64);
  v19[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::validation_options::validation_options((uint64_t)v10, (uint64_t)v21);
  memset(v9, 0, sizeof(v9));
  std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>(v9, *((void **)this + 57), *((void **)this + 58), (uint64_t)(*((void *)this + 58) - *((void *)this + 57)) >> 4);
  Espresso::run_validation(v20, (uint64_t)v19, v10, v9, a2, v8);
  uint64_t v28 = (void **)v9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (v18 < 0) {
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(*((void **)&v26 + 1));
  }
  if (SBYTE7(v26) < 0) {
    operator delete((void *)v25);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(*((void **)&v23 + 1));
  }
  if (SBYTE7(v23) < 0) {
    operator delete((void *)v22);
  }
}

void sub_1927D4AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  *(void *)(v33 - 56) = v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 56));
  Espresso::validation_options::~validation_options(&a12);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  Espresso::validation_options::~validation_options(&a30);
  _Unwind_Resume(a1);
}

Espresso::scoped_timer *std::allocate_shared[abi:ne180100]<Espresso::scoped_timer,std::allocator<Espresso::scoped_timer>,char const(&)[9],void>(Espresso::scoped_timer **a1)
{
  uint64_t v2 = operator new(0x58uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1EE381B20;
  __n128 result = Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)(v2 + 3), "backprop", v3);
  *a1 = result;
  a1[1] = (Espresso::scoped_timer *)v2;
  return result;
}

void sub_1927D4B78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::trainer::step(Espresso::solver_sgd **this)
{
  uint64_t v2 = (void *)MEMORY[0x192FF2020]();
  Espresso::solver_sgd::step(this[60]);
}

void std::__shared_ptr_emplace<Espresso::scoped_timer>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::scoped_timer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381B20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::scoped_timer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::validation_options::validation_options(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  unint64_t v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1927D4D54(_Unwind_Exception *exception_object)
{
  if (v1[87] < 0) {
    operator delete(*v4);
  }
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[39] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::validation_options::~validation_options(void **this)
{
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void __assign_helper_atomic_property__2(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void *__copy_helper_atomic_property__1(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *__n128 result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __assign_helper_atomic_property__4788(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,void *> *>>((void *)a1, *(uint64_t **)(a2 + 16));
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    long long v6 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      long long v8 = v6;
    }
    else
    {
      do
      {
        char v12 = v6 + 2;
        float v13 = v6 + 5;
        std::pair<std::string &,std::shared_ptr<Espresso::blob<float,4>> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<Espresso::blob<float,4>>,(void *)0>((uint64_t)&v12, (const std::string *)(v2 + 2));
        long long v8 = (void *)*v6;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
        uint64_t v2 = (uint64_t *)*v2;
        if (v8) {
          BOOL v9 = v2 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        long long v6 = v8;
      }
      while (!v9);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    std::string v10 = (char *)operator new(0x38uLL);
    char v12 = v10;
    float v13 = a1 + 2;
    char v14 = 0;
    *(void *)std::string v10 = 0;
    *((void *)v10 + 1) = 0;
    unint64_t v11 = std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v10 + 16), (long long *)v2 + 1);
    char v14 = 1;
    *((void *)v10 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v11);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v10);
    char v12 = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v12);
  }
}

void sub_1927D5040(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v1);
  __cxa_rethrow();
}

void sub_1927D5058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::shared_ptr<Espresso::blob<float,4>> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<Espresso::blob<float,4>>,(void *)0>(uint64_t a1, const std::string *a2)
{
  std::string::operator=(*(std::string **)a1, a2);
  uint64_t v4 = *(std::string::pointer **)(a1 + 8);
  std::string::pointer data = a2[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a2[1].__r_.__value_.__l.__size_;
  if (size) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = data;
  v4[1] = (std::string::pointer)size;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return a1;
}

void sub_1927D51E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::CVAEngine::batch::sync_point(Espresso::CVAEngine::batch *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

void Espresso::CVAEngine::batch::~batch(Espresso::CVAEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::abstract_context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2, int *a3)
{
  int v3 = *a3;
  BOOL v5 = *a2 == 2 && v3 == 4;
  return *a2 == v3 || v5;
}

void Espresso::CVAEngine::context::create_compiler_for_network(uint64_t a1, uint64_t *a2)
{
  unsigned int v13 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v3 = *a2;
  uint64_t v4 = (char *)operator new(0x118uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_1EE38C5F8;
  *((_OWORD *)v4 + 2) = 0u;
  v4[48] = 0;
  *((void *)v4 + 3) = &unk_1EE3719E0;
  *((void *)v4 + 7) = 0;
  *((_OWORD *)v4 + 4) = 0u;
  *((_DWORD *)v4 + 20) = 0;
  *(void *)(v4 + 84) = 1;
  *((_DWORD *)v4 + 23) = -1;
  *(_OWORD *)(v4 + 200) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((void *)v4 + 14) = 0;
  *((_DWORD *)v4 + 30) = 0;
  *((_OWORD *)v4 + 6) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((void *)v4 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v4 + 200;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *((void *)v4 + 9) = v3;
  BOOL v5 = *(void **)(v3 + 16);
  if (v5
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    BOOL v7 = (std::__shared_weak_count *)*((void *)v4 + 8);
    *((void *)v4 + 7) = v5;
    *((void *)v4 + 8) = v6;
    if (!v7) {
      goto LABEL_8;
    }
    nitro::nitro_function::nitro_function(v7);
    BOOL v5 = (void *)*((void *)v4 + 7);
  }
  else
  {
    *((void *)v4 + 7) = v5;
    *((void *)v4 + 8) = 0;
  }
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_8:
  uint64_t v8 = *a2 + 528;
  char v14 = &v13;
  BOOL v9 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v8, &v13, (uint64_t)&std::piecewise_construct, &v14);
  *(void *)&long long v10 = v4 + 24;
  *((void *)&v10 + 1) = v4;
  unint64_t v11 = (std::__shared_weak_count *)v9[4];
  *(_OWORD *)(v9 + 3) = v10;
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_1927D54A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  char v12 = *(std::__shared_weak_count **)(v10 + 264);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  unsigned int v13 = *(std::__shared_weak_count **)(v10 + 248);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(*(void **)(v10 + 200));
  a10 = (void **)(v10 + 168);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a10);
  char v14 = *(std::__shared_weak_count **)(v10 + 64);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  *(void *)(v10 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = &unk_1EE32A8C8;
  uint64_t v15 = *(std::__shared_weak_count **)(v10 + 40);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v10);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::CVAEngine::context::~context(Espresso::CVAEngine::context *this)
{
  Espresso::CVAEngine::context::~context(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso *v2;
  const char *v3;
  int v4;
  NSObject *v5;
  _DWORD v6[2];
  uint64_t v7;

  BOOL v7 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE372290;
  uint64_t v2 = (Espresso *)((uint64_t (*)(uint64_t))softLinkCVANetPipeShutdown[0])(*((void *)this + 21));
  uint64_t v4 = (int)v2;
  if (v2)
  {
    BOOL v5 = Espresso::espresso_os_log_subsystem(v2, v3);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = v4;
      _os_log_error_impl(&dword_1920CB000, v5, OS_LOG_TYPE_ERROR, "CVA pipe failed to shut down cleanly, return value: %d", (uint8_t *)v6, 8u);
    }
  }
  CFRelease(*((CFTypeRef *)this + 21));
  CFRelease(*((CFTypeRef *)this + 22));
  Espresso::HXEngine::context::~context(this);
}

void sub_1927D5728(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t initCVANetPipeShutdown(uint64_t a1)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_17_4817);
  }
  uint64_t v2 = (uint64_t (*)())dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeShutdown");
  softLinkCVANetPipeShutdown[0] = v2;

  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void *___ZL15AppleCVALibraryv_block_invoke_4822()
{
  __n128 result = dlopen("/System/Library/PrivateFrameworks/AppleCVA.framework/AppleCVA", 2);
  AppleCVALibrary(void)::sLib = (uint64_t)result;
  return result;
}

double Espresso::CVAEngine::context::begin_batch@<D0>(Espresso::CVAEngine::context *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0xA0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE38C7B8;
  double result = 0.0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[64] = 1;
  *(_OWORD *)(v4 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_WORD *)v4 + 60) = 256;
  *((void *)v4 + 16) = 0;
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 3) = &unk_1EE3721E0;
  *((void *)v4 + 18) = this;
  *((void *)v4 + 19) = 0;
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C7B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C7B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso9CVAEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C780;
  long long v9 = *a2;
  long long v10 = a2[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE372088;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927D59CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::context_transfer_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C780;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso9CVAEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v4 = operator new(0x190uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE38C668;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  *((unsigned char *)v4 + 364) = 0;
  *((_WORD *)v4 + 1std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0;
  *((_DWORD *)v4 + 76) = 0;
  *((_DWORD *)v4 + 84) = 0;
  v4[3] = &unk_1EE371BD0;
  *((_OWORD *)v4 + 23) = 0u;
  *((_OWORD *)v4 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = 0u;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1927D5B20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C668;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso9CVAEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x230uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C630;
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 55) = 0;
  *((void *)v6 + 56) = 0;
  *((void *)v6 + 3) = &unk_1EE371A38;
  *((_OWORD *)v6 + 31) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_DWORD *)v6 + 122) = 0;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 4std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 4std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v15;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 360) = v11;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927D5CD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::pool_kernel>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[69];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[67];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[65];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[63];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[60];
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[58];
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)(a1 + 3));
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C630;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso9CVAEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x2E0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C748;
  long long v17 = a2[8];
  *(_OWORD *)char v18 = a2[9];
  *(void *)&v18[16] = *((void *)a2 + 20);
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v16 = a2[7];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v7 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v6 + 3, a1);
  *((void *)v6 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((void *)v6 + 3) = &unk_1EE371E08;
  *((_OWORD *)v6 + 42) = 0u;
  *((_OWORD *)v6 + 43) = 0u;
  *((_OWORD *)v6 + 44) = 0u;
  *((_OWORD *)v6 + 45) = 0u;
  *((_DWORD *)v6 + 166) = 0;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(void *)(v6 + 485) = *(void *)&v18[13];
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 4std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = *(_OWORD *)v18;
  *(_OWORD *)(v6 + 4std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927D5F00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C748;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::CVAEngine::engine::~engine(Espresso::CVAEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::CVAEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v4 = operator new(0xD0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE38C828;
  result.n128_u64[0] = Espresso::CVAEngine::context::context((uint64_t)(v4 + 3), a1, 0, 0);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1927D60E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::CVAEngine::context::context(uint64_t a1, uint64_t *a2, const void *a3, const void *a4)
{
  uint64_t v6 = (void *)Espresso::HXEngine::context::context(a1, a2, a3, a4);
  v6[21] = 0;
  uint64_t v7 = v6 + 21;
  *uint64_t v6 = &unk_1EE372290;
  v6[22] = 0;
  uint64_t v8 = v6 + 22;
  if (softLinkCVANetPipeCreate(a4, v6 + 21))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAEngine.mm");
    long long v13 = std::string::insert(&v40, 0, "CVA EXPECT_EQ failed ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    long long v15 = std::string::append(&v41, ":");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, 49);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v17 = &v39;
    }
    else {
      long long v17 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v39.__r_.__value_.__l.__size_;
    }
    long long v19 = std::string::append(&v42, (const std::string::value_type *)v17, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v43);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!softLinkCVANetPipeGetTypeID())
  {
    long long v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAEngine.mm");
    long long v22 = std::string::insert(&v40, 0, "CVA EXPECT_EQ failed ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v41, ":");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, 51);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v26 = &v39;
    }
    else {
      long long v26 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v39.__r_.__value_.__l.__size_;
    }
    uint64_t v28 = std::string::append(&v42, (const std::string::value_type *)v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v21, &v43);
    __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = *v7;
  uint64_t v10 = getkCVANetPipeProperty_HardwareCapabilities();
  if (softLinkCVANetPipeCopyProperty(v9, v10, v8))
  {
    unint64_t v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAEngine.mm");
    int v31 = std::string::insert(&v40, 0, "CVA EXPECT_EQ failed ");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    uint64_t v33 = std::string::append(&v41, ":");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, 55);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::pointer v35 = &v39;
    }
    else {
      std::string::pointer v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
    }
    std::string v37 = std::string::append(&v42, (const std::string::value_type *)v35, v36);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v30, &v43);
    __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(unsigned char *)(a1 + 158) = 0;
  return a1;
}

void sub_1927D6488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 41) < 0) {
    operator delete(*(void **)(v36 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      Espresso::HXEngine::context::~context(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

uint64_t initCVANetPipeCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_17_4817);
  }
  uint64_t v6 = dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeCopyProperty");
  softLinkCVANetPipeCopyProperty = (uint64_t (*)(void, void, void))v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t initValkCVANetPipeProperty_HardwareCapabilities(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_17_4817);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetPipeProperty_HardwareCapabilities");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetPipeProperty_HardwareCapabilities = result;
  }
  else
  {
    uint64_t result = constantValkCVANetPipeProperty_HardwareCapabilities;
  }
  getkCVANetPipeProperty_HardwareCapabilities = kCVANetPipeProperty_HardwareCapabilitiesFunction;
  return result;
}

uint64_t kCVANetPipeProperty_HardwareCapabilitiesFunction(void)
{
  return constantValkCVANetPipeProperty_HardwareCapabilities;
}

uint64_t initCVANetPipeGetTypeID(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_17_4817);
  }
  uint64_t v0 = (uint64_t (*)(void))dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeGetTypeID");
  softLinkCVANetPipeGetTypeID = v0;

  return v0();
}

uint64_t initCVANetPipeCreate(uint64_t a1, uint64_t a2)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_17_4817);
  }
  uint64_t v4 = dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeCreate");
  softLinkCVANetPipeCreate = (uint64_t (*)(void, void))v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

__n128 Espresso::CVAEngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0xE8uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = &unk_1EE38C710;
  uint64_t v7 = Espresso::HXEngine::blob_container::blob_container((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE371D28;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927D6818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C710;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::parallel_softmax_chunk(Espresso *this, unint64_t a2)
{
  uint64_t v3 = *((int *)this + 5);
  unint64_t v2 = *((int *)this + 6);
  signed int v4 = (a2 % v2) << 8;
  signed int v5 = v4 + 256;
  if (v4 + 256 >= (int)v3) {
    signed int v5 = *((_DWORD *)this + 5);
  }
  if (v4 < v5)
  {
    int v6 = *((_DWORD *)this + 4);
    int v7 = v3 * ((int)a2 / (int)v2) * v6;
    uint64_t v8 = *((void *)this + 1) + 4 * v7;
    uint64_t v20 = *(void *)this + 4 * v7;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    do
    {
      long long v11 = (float *)(v8 + 4 * v9);
      float v12 = *v11;
      int v13 = v6 - 1;
      long long v14 = v11;
      if (v6 > 1)
      {
        do
        {
          v14 += v3;
          if (*v14 > v12) {
            float v12 = *v14;
          }
          --v13;
        }
        while (v13);
      }
      if (v6 >= 1)
      {
        long long v15 = (float *)(v20 + 4 * v9);
        float v16 = 0.0;
        int v17 = v6;
        char v18 = (float *)(v8 + 4 * v9);
        do
        {
          float v16 = v16 + expf(*v18 - v12);
          v18 += v3;
          --v17;
        }
        while (v17);
        int v19 = v6;
        do
        {
          float *v15 = expf(*v11 - v12) / v16;
          v15 += v3;
          v11 += v3;
          --v19;
        }
        while (v19);
      }
      ++v9;
    }
    while (v9 != v10);
  }
}

void Espresso::parallel_log_softmax_chunk(Espresso *this, unint64_t a2)
{
  uint64_t v3 = *((int *)this + 5);
  unint64_t v2 = *((int *)this + 6);
  signed int v4 = (a2 % v2) << 8;
  signed int v5 = v4 + 256;
  if (v4 + 256 >= (int)v3) {
    signed int v5 = *((_DWORD *)this + 5);
  }
  if (v4 < v5)
  {
    int v6 = *((_DWORD *)this + 4);
    int v7 = v3 * ((int)a2 / (int)v2) * v6;
    uint64_t v8 = *((void *)this + 1) + 4 * v7;
    uint64_t v21 = *(void *)this + 4 * v7;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    do
    {
      long long v11 = (float *)(v8 + 4 * v9);
      float v12 = *v11;
      int v13 = v6 - 1;
      long long v14 = v11;
      if (v6 > 1)
      {
        do
        {
          v14 += v3;
          if (*v14 > v12) {
            float v12 = *v14;
          }
          --v13;
        }
        while (v13);
      }
      if (v6 >= 1)
      {
        long long v15 = (float *)(v21 + 4 * v9);
        float v16 = 0.0;
        int v17 = v6;
        char v18 = (float *)(v8 + 4 * v9);
        do
        {
          float v16 = v16 + expf(*v18 - v12);
          v18 += v3;
          --v17;
        }
        while (v17);
        float v19 = logf(v16);
        int v20 = v6;
        do
        {
          float *v15 = (float)(*v11 - v12) - v19;
          v15 += v3;
          v11 += v3;
          --v20;
        }
        while (v20);
      }
      ++v9;
    }
    while (v9 != v10);
  }
}

void Espresso::parallel_softmax_2channels_chunk(Espresso *this, unint64_t a2)
{
  uint64_t v3 = *((int *)this + 5);
  unint64_t v2 = *((int *)this + 6);
  signed int v4 = (a2 % v2) << 8;
  signed int v5 = v4 + 256;
  if (v4 + 256 >= (int)v3) {
    signed int v5 = *((_DWORD *)this + 5);
  }
  if (v4 < v5)
  {
    int v6 = 2 * (int)a2 / (int)v2 * v3;
    uint64_t v7 = *((void *)this + 1) + 4 * v6;
    uint64_t v8 = *(void *)this + 4 * v6;
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    do
    {
      long long v11 = (float *)(v7 + 4 * v9);
      float v12 = (float *)(v8 + 4 * v9);
      float v13 = v11[v3];
      if (*v11 >= v13) {
        float v14 = *v11;
      }
      else {
        float v14 = v11[v3];
      }
      float v15 = v13 - v14;
      float v16 = expf(*v11 - v14);
      float v17 = v16 / (float)(v16 + expf(v15));
      *float v12 = v17;
      v12[v3] = 1.0 - v17;
      ++v9;
    }
    while (v9 != v10);
  }
}

void Espresso::compute_softmax_cpu(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v4 = 0;
  LODWORD(v5) = *(_DWORD *)(a1 + 8);
  do
  {
    uint64_t v5 = (*(_DWORD *)(a1 + 12 + v4) * v5);
    v4 += 4;
  }
  while (v4 != 12);
  if (a4)
  {
LABEL_4:
    int v6 = *(_DWORD *)(a2 + 16);
    int v7 = *(_DWORD *)(a2 + 20);
    int v8 = *(_DWORD *)(a2 + 8) * *(_DWORD *)(a2 + 12);
    uint64_t v9 = *(void *)(a2 + 24);
    int v10 = v8 - 1;
    if (v8 < 1) {
      int v10 = v8 + 254;
    }
    uint64_t v11 = ((uint64_t)v10 >> 8) + 1;
    if (a4 || v6 != 2)
    {
      uint64_t v20 = *(void *)(a1 + 24);
      uint64_t v21 = v9;
      int v22 = v6;
      int v23 = v8;
      int v24 = v11;
      if (a4) {
        float v12 = (void (__cdecl *)(void *, size_t))Espresso::parallel_log_softmax_chunk;
      }
      else {
        float v12 = (void (__cdecl *)(void *, size_t))Espresso::parallel_softmax_chunk;
      }
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 24);
      uint64_t v21 = v9;
      int v22 = 2;
      int v23 = v8;
      int v24 = v11;
      float v12 = (void (__cdecl *)(void *, size_t))Espresso::parallel_softmax_2channels_chunk;
    }
    dispatch_apply_f((int)v11 * (uint64_t)v7, 0, &v20, v12);
    return;
  }
  if (a3 != 1)
  {
    if (a3 == 2 && (int)v5 >= 1)
    {
      float v13 = *(float **)(a2 + 24);
      float v14 = *(float **)(a1 + 24);
      do
      {
        float v15 = *v13 * 0.2 + 0.5;
        float *v14 = v15;
        float v16 = 0.0;
        if (v15 < 0.0 || (float v16 = 1.0, v15 > 1.0)) {
          float *v14 = v16;
        }
        ++v14;
        ++v13;
        --v5;
      }
      while (v5);
    }
    goto LABEL_4;
  }
  if ((int)v5 >= 1)
  {
    float v17 = *(float **)(a2 + 24);
    char v18 = *(float **)(a1 + 24);
    do
    {
      float v19 = *v17++;
      *v18++ = 1.0 / (float)(expf(-v19) + 1.0);
      --v5;
    }
    while (v5);
  }
}

uint64_t Espresso::MPSGraphEngine::Kernels::concat_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 32) - *(void *)(a3 + 24);
  if (v4 != 64)
  {
    uint64_t v5 = a2[1];
    v17[0] = *a2;
    v17[1] = v5;
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v4 = *(void *)(a3 + 32) - *(void *)(a3 + 24);
    }
    std::to_string(&v11, v4 >> 6);
    int v6 = std::string::insert(&v11, 0, "[Dispatch::MPSGraph::concat_kernel] unsupported: number of outputs must be 1, received ");
    std::string v12 = *v6;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v12, a3, 0);
    Espresso::emit_kernel_validation_warning(v17, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    char v18 = (void **)v15;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v18);
    char v18 = (void **)v14;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    int v7 = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_26;
  }
  if (*(_DWORD *)(a1 + 280))
  {
    uint64_t v5 = a2[1];
    v10[0] = *a2;
    v10[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "[Dispatch::MPSGraph::concat_kernel] unsupported: fused_relu");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v12, a3, 0);
    Espresso::emit_kernel_validation_warning(v10, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 340)) {
      return 1;
    }
    uint64_t v5 = a2[1];
    v9[0] = *a2;
    v9[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "[Dispatch::MPSGraph::concat_kernel] unsupported: nd_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v12, a3, 0);
    Espresso::emit_kernel_validation_warning(v9, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    int v7 = (void *)v12.__r_.__value_.__r.__words[0];
LABEL_26:
    operator delete(v7);
  }
LABEL_27:
  if (v5) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
  }
  return 0;
}

void sub_1927D6FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a26);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::concat_kernel::~concat_kernel(Espresso::MPSGraphEngine::Kernels::concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t is_espresso_network(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(unsigned char **)a1;
    uint64_t v3 = *(void *)(a1 + 8);
    if (!v3) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v2 = (unsigned char *)a1;
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
    if (!*(unsigned char *)(a1 + 23)) {
      goto LABEL_18;
    }
  }
  uint64_t v4 = &v2[v3];
  uint64_t v5 = v2;
  int v6 = v4;
  do
  {
    if (*v5 == 46)
    {
      uint64_t v7 = 1u;
      while (v7 != 13)
      {
        if (&v5[v7] == v4) {
          goto LABEL_15;
        }
        int v8 = v5[v7];
        int v9 = aEspressoNet[v7++];
        if (v8 != v9) {
          goto LABEL_7;
        }
      }
      int v6 = v5;
    }
LABEL_7:
    ++v5;
  }
  while (v5 != v4);
LABEL_15:
  if (v6 != v4 && v6 - v2 != -1) {
    return 1;
  }
LABEL_18:
  if ((v1 & 0x80) != 0)
  {
    uint64_t v11 = a1;
    a1 = *(void *)a1;
    uint64_t v1 = *(void *)(v11 + 8);
  }
  std::string v12 = (unsigned char *)(a1 + v1);
  if (v1)
  {
    float v13 = (unsigned char *)a1;
    float v14 = (unsigned char *)(a1 + v1);
    do
    {
      if (*v13 == 46)
      {
        uint64_t v15 = 1u;
        while (v15 != 13)
        {
          if (&v13[v15] == v12) {
            return v14 != v12 && &v14[-a1 + 1] != 0;
          }
          int v16 = v13[v15];
          int v17 = aEspressoBin[v15++];
          if (v16 != v17) {
            goto LABEL_23;
          }
        }
        float v14 = v13;
      }
LABEL_23:
      ++v13;
    }
    while (v13 != v12);
  }
  else
  {
    float v14 = (unsigned char *)a1;
  }
  return v14 != v12 && &v14[-a1 + 1] != 0;
}

id get_dump_filename(const std::string *a1)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  std::string::size_type v2 = std::string::rfind(a1, 47, 0xFFFFFFFFFFFFFFFFLL);
  std::string::basic_string(&__str, a1, v2 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  std::string::size_type v5 = __str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v7 = (std::string *)((char *)p_str + size);
    int v8 = p_str;
    int v9 = v7;
    do
    {
      if (v8->__r_.__value_.__s.__data_[0] == 46)
      {
        uint64_t v10 = 1u;
        while (v10 != 13)
        {
          if ((std::string *)((char *)v8 + v10) == v7) {
            goto LABEL_17;
          }
          int v11 = v8->__r_.__value_.__s.__data_[v10];
          int v12 = aEspressoBin[v10++];
          if (v11 != v12) {
            goto LABEL_9;
          }
        }
        int v9 = v8;
      }
LABEL_9:
      int v8 = (std::string *)((char *)v8 + 1);
    }
    while (v8 != v7);
LABEL_17:
    if (v9 != v7 && (char *)v9 - (char *)p_str != -1)
    {
      std::string::size_type v13 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
      std::string::basic_string(&__p, &__str, 0, v13, (std::allocator<char> *)&v20);
      float v14 = std::string::append(&__p, ".net");
      std::string::size_type v5 = v14->__r_.__value_.__r.__words[0];
      v21[0] = v14->__r_.__value_.__l.__size_;
      *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      char v4 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = v5;
      __str.__r_.__value_.__l.__size_ = v21[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v21 + 7);
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v4;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        char v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        std::string::size_type v5 = __str.__r_.__value_.__r.__words[0];
      }
    }
  }
  if (v4 >= 0) {
    uint64_t v15 = &__str;
  }
  else {
    uint64_t v15 = (std::string *)v5;
  }
  int v16 = [NSString stringWithUTF8String:v15];
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

  return v16;
}

void sub_1927D73C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::tracer::tracer(uint64_t a1, uint64_t *a2, std::string *a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 80) = objc_opt_new();
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v13 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v11;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (a4 > 19999)
  {
    if (a4 > 59999)
    {
      if (a4 > 89999)
      {
        if (a4 == 90000) {
          a4 = 209;
        }
      }
      else if (a4 == 60000)
      {
        a4 = 3;
      }
    }
    else
    {
      switch(a4)
      {
        case 50000:
          a4 = 5;
          break;
        case 50001:
        case 50002:
        case 50003:
        case 50004:
        case 50005:
        case 50006:
        case 50007:
        case 50008:
          break;
        default:
          if (a4 == 20000) {
            a4 = 2;
          }
          break;
      }
    }
  }
  else
  {
    switch(a4)
    {
      case 10006:
      case 10007:
      case 10008:
      case 10009:
      case 10010:
      case 10011:
        break;
      default:
        switch(a4)
        {
          case 0:
            a4 = 1;
            break;
          case 1:
          case 2:
          case 3:
          case 4:
            goto LABEL_26;
          case 5:
            a4 = 7;
            break;
          case 6:
            a4 = 8;
            break;
          case 7:
            a4 = 9;
            break;
          default:
            if (a4 == 100) {
              a4 = 0;
            }
            break;
        }
        break;
    }
  }
LABEL_26:
  *(_DWORD *)(a1 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = a4;
  std::string::basic_string[abi:ne180100]<0>(&v176, "test_data");
  memset(&__p, 0, sizeof(__p));
  unsigned __int8 v14 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((char)v14 < 0)
  {
    if (!a3->__r_.__value_.__l.__size_) {
      goto LABEL_99;
    }
  }
  else if (!*((unsigned char *)&a3->__r_.__value_.__s + 23))
  {
    goto LABEL_99;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = (unsigned __int8 *)a3;
  }
  else {
    uint64_t v15 = (unsigned __int8 *)a3->__r_.__value_.__r.__words[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  int v17 = &v15[size];
  if (size)
  {
    char v18 = v15;
    float v19 = &v15[size];
    do
    {
      char v20 = v18;
      uint64_t v21 = v18;
      while (1)
      {
        int v22 = *v21++;
        if (v22 == 47) {
          break;
        }
        char v20 = v21;
        if (v21 == v17)
        {
          char v20 = v19;
          goto LABEL_45;
        }
      }
      char v18 = v20 + 1;
      float v19 = v20;
    }
    while (v21 != v17);
  }
  else
  {
    char v20 = v15;
  }
LABEL_45:
  int v23 = (unsigned __int8 *)(v20 - v15);
  if (v20 == v17) {
    std::string::size_type v24 = 0;
  }
  else {
    std::string::size_type v24 = (std::string::size_type)(v23 + 1);
  }
  std::string::basic_string(&v200, a3, v24, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v201);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v200;
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v200, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  }
  else {
    std::string v200 = *a3;
  }
  int v25 = is_espresso_network((uint64_t)&v200);
  int v26 = v25;
  if ((SHIBYTE(v200.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v25) {
      goto LABEL_78;
    }
LABEL_57:
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    long long v29 = (std::string *)((char *)p_p + v28);
    if (v28)
    {
      unint64_t v30 = p_p;
      int v31 = (std::string *)((char *)p_p + v28);
      do
      {
        if (v30->__r_.__value_.__s.__data_[0] == 46)
        {
          uint64_t v32 = 1u;
          while (v32 != 10)
          {
            if ((std::string *)((char *)v30 + v32) == v29) {
              goto LABEL_72;
            }
            int v33 = v30->__r_.__value_.__s.__data_[v32];
            int v34 = aEspresso_0[v32++];
            if (v33 != v34) {
              goto LABEL_63;
            }
          }
          int v31 = v30;
        }
LABEL_63:
        unint64_t v30 = (std::string *)((char *)v30 + 1);
      }
      while (v30 != v29);
    }
    else
    {
      int v31 = p_p;
    }
LABEL_72:
    std::string::size_type v35 = (char *)v31 - (char *)p_p;
    if (v31 == v29) {
      std::string::size_type v36 = -1;
    }
    else {
      std::string::size_type v36 = v35;
    }
    std::string::basic_string((std::string *)v201, &__p, 0, v36, (std::allocator<char> *)&v193);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = *(std::string *)v201;
    goto LABEL_78;
  }
  operator delete(v200.__r_.__value_.__l.__data_);
  if (v26) {
    goto LABEL_57;
  }
LABEL_78:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v37 = __p.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v200, v37 + 1);
  if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v38 = &v200;
  }
  else {
    long long v38 = (std::string *)v200.__r_.__value_.__r.__words[0];
  }
  if (v37)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v39 = &__p;
    }
    else {
      std::string v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(v38, v39, v37);
  }
  *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v37) = 95;
  if ((v178 & 0x80u) == 0) {
    std::string v40 = (const std::string::value_type *)&v176;
  }
  else {
    std::string v40 = (const std::string::value_type *)v176;
  }
  if ((v178 & 0x80u) == 0) {
    std::string::size_type v41 = v178;
  }
  else {
    std::string::size_type v41 = *(void *)v177;
  }
  std::string v42 = std::string::append(&v200, v40, v41);
  std::string v43 = (void *)v42->__r_.__value_.__r.__words[0];
  *(void *)int64_t v201 = v42->__r_.__value_.__l.__size_;
  *(void *)&v201[7] = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if ((char)v178 < 0) {
    operator delete(v176);
  }
  unint64_t v176 = v43;
  *(void *)unint64_t v177 = *(void *)v201;
  *(void *)&v177[7] = *(void *)&v201[7];
  unsigned __int8 v178 = v44;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v200.__r_.__value_.__l.__data_);
  }
LABEL_99:
  int v45 = *((char *)a6 + 23);
  if (v45 < 0)
  {
    if (a6[1]) {
      goto LABEL_104;
    }
  }
  else if (*((unsigned char *)a6 + 23))
  {
    goto LABEL_104;
  }
  uint64_t v46 = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
  id v47 = [v46 objectAtIndex:0];
  MEMORY[0x192FF0F50](a6, [v47 UTF8String]);

  LOBYTE(v45) = *((unsigned char *)a6 + 23);
LABEL_104:
  if ((v45 & 0x80) != 0) {
    a6 = (uint64_t *)*a6;
  }
  uint64_t v48 = [NSString stringWithUTF8String:a6];
  if ((v178 & 0x80u) == 0) {
    uint64_t v49 = &v176;
  }
  else {
    uint64_t v49 = v176;
  }
  unint64_t v50 = [NSString stringWithUTF8String:v49];
  uint64_t v51 = [v48 stringByAppendingPathComponent:v50];
  std::string::size_type v52 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v51;

  uint64_t v53 = [MEMORY[0x1E4F28CB8] defaultManager];
  [v53 removeItemAtPath:*(void *)(a1 + 32) error:0];

  unint64_t v54 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v55 = *(void *)(a1 + 32);
  id v174 = 0;
  [v54 createDirectoryAtPath:v55 withIntermediateDirectories:1 attributes:0 error:&v174];
  id v56 = v174;

  if (v56)
  {
    uint64_t v59 = Espresso::espresso_os_log_subsystem(v57, v58);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      id v154 = [v56 localizedDescription];
      std::string::size_type v155 = [v154 UTF8String];
      LODWORD(v200.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v200.__r_.__value_.__r.__words + 4) = v155;
      _os_log_error_impl(&dword_1920CB000, v59, OS_LOG_TYPE_ERROR, "Error creating directory: %s", (uint8_t *)&v200, 0xCu);
    }
  }
  uint64_t v60 = [*(id *)(a1 + 32) stringByAppendingPathComponent:@"test_data.json.bin"];
  uint64_t v61 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v60;

  uint64_t v62 = [*(id *)(a1 + 32) stringByAppendingPathComponent:@"test_data.json"];
  id v63 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v62;

  uint64_t v64 = [*(id *)(a1 + 32) stringByAppendingPathComponent:@"regression_conf.json"];
  uint64_t v65 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v64;

  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v173, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  }
  else {
    std::string v173 = *a3;
  }
  if (is_espresso_network((uint64_t)&v173))
  {
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v172, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
    }
    else {
      std::string v172 = *a3;
    }
    uint64_t v74 = get_dump_filename(&v172);
    int v75 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v74;

    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
    {
      size_t v73 = (void *)v172.__r_.__value_.__r.__words[0];
      goto LABEL_138;
    }
  }
  else
  {
    uint64_t v66 = NSString;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v67 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v67 = __p.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v200, v67 + 13);
    if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v68 = &v200;
    }
    else {
      uint64_t v68 = (std::string *)v200.__r_.__value_.__r.__words[0];
    }
    if (v67)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v69 = &__p;
      }
      else {
        unint64_t v69 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v68, v69, v67);
    }
    strcpy((char *)v68 + v67, "/code.nitroir");
    if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v70 = &v200;
    }
    else {
      BOOL v70 = (std::string *)v200.__r_.__value_.__r.__words[0];
    }
    uint64_t v71 = [v66 stringWithUTF8String:v70];
    uint64_t v72 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v71;

    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    {
      size_t v73 = (void *)v200.__r_.__value_.__r.__words[0];
LABEL_138:
      operator delete(v73);
    }
  }
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  std::string::pointer v76 = fopen((const char *)[*(id *)(a1 + 40) UTF8String], "wb");
  *(void *)(a1 + 16) = v76;
  if (!v76)
  {
    v200.__r_.__value_.__r.__words[0] = [*(id *)(a1 + 40) UTF8String];
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot create file: %s", &v200);
  }
  unsigned __int8 v164 = objc_opt_new();
  std::string::size_type v165 = objc_opt_new();
  v198[0] = @"platform";
  uint64_t v77 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  v199[0] = v77;
  v198[1] = @"compute_path";
  uint64_t v78 = [NSNumber numberWithInt:a5];
  v199[1] = v78;
  v199[2] = &unk_1EE3AEE60;
  v198[2] = @"tolerance";
  v198[3] = @"tol_relerr";
  v199[3] = &unk_1EE3AF278;
  v199[4] = &unk_1EE3AF288;
  v198[4] = @"tol_aerr";
  v198[5] = @"tol_psnr";
  v199[5] = &unk_1EE3AF298;
  uint64_t v79 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v199 forKeys:v198 count:6];
  [v165 addObject:v79];

  char v166 = objc_opt_new();
  v196[0] = @"name";
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v80 = &__p;
  }
  else {
    uint64_t v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v81 = [NSString stringWithUTF8String:v80];
  uint64_t v82 = *(void *)(a1 + 64);
  v197[0] = v81;
  v197[1] = v82;
  v196[1] = @"network";
  v196[2] = @"data_frames_file";
  v197[2] = @"test_data.json";
  v197[3] = &unk_1EE3AEE78;
  v196[3] = @"n_runs";
  v196[4] = @"config";
  v194 = @"default";
  int v195 = v165;
  uint64_t v83 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v195 forKeys:&v194 count:1];
  v197[4] = v83;
  unint64_t v84 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v197 forKeys:v196 count:5];
  [v166 addObject:v84];

  [v164 setObject:v166 forKeyedSubscript:@"tests"];
  id v171 = v56;
  unsigned __int8 v163 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v164 options:1 error:&v171];
  id v162 = v171;

  uint64_t v85 = a1;
  std::string::size_type v86 = (Espresso *)[v163 writeToFile:*(void *)(a1 + 56) atomically:1];
  if ((v86 & 1) == 0)
  {
    std::vector<int>::pointer v88 = Espresso::espresso_os_log_subsystem(v86, v87);
    if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v156 = [*(id *)(a1 + 56) UTF8String];
      LODWORD(v200.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v200.__r_.__value_.__r.__words + 4) = v156;
      _os_log_error_impl(&dword_1920CB000, v88, OS_LOG_TYPE_ERROR, "Tracer cannot write file: %s", (uint8_t *)&v200, 0xCu);
    }

    uint64_t v85 = a1;
  }
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = *a3;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__str.__r_.__value_.__l.__size_) {
      goto LABEL_162;
    }
    std::string::__init_copy_ctor_external(&v193, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
      goto LABEL_162;
    }
    std::string v193 = __str;
  }
  int v89 = is_espresso_network((uint64_t)&v193);
  char v90 = v89;
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v193.__r_.__value_.__l.__data_);
    if (v90) {
      goto LABEL_159;
    }
LABEL_162:
    long long v91 = *(void **)(v85 + 32);
    std::string::size_type v92 = NSString;
    std::string::size_type v93 = std::string::rfind(&__str, 47, 0xFFFFFFFFFFFFFFFFLL);
    std::string::basic_string(&v200, &__str, v93 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v201);
    if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v94 = &v200;
    }
    else {
      unint64_t v94 = (std::string *)v200.__r_.__value_.__r.__words[0];
    }
    long long v95 = [v92 stringWithUTF8String:v94];
    uint8x8_t v96 = [v91 stringByAppendingPathComponent:v95];

    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v200.__r_.__value_.__l.__data_);
    }
    std::string::size_type v97 = [MEMORY[0x1E4F28CB8] defaultManager];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    long long v99 = [NSString stringWithUTF8String:p_str];
    [v97 copyItemAtPath:v99 toPath:v96 error:0];

    uint64_t v102 = a1;
    goto LABEL_274;
  }
  if (!v89) {
    goto LABEL_162;
  }
LABEL_159:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v192, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v192 = __str;
  }
  long long v103 = &v192;
  if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    std::string::size_type v104 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
  }
  else
  {
    std::string::size_type v104 = v192.__r_.__value_.__l.__size_;
    long long v103 = (std::string *)v192.__r_.__value_.__r.__words[0];
  }
  uint64_t v105 = (std::string *)((char *)v103 + v104);
  if (v104)
  {
    unint64_t v106 = v103;
    unint64_t v107 = (std::string *)((char *)v103 + v104);
    do
    {
      if (v106->__r_.__value_.__s.__data_[0] == 46)
      {
        uint64_t v108 = 1u;
        while (v108 != 13)
        {
          if ((std::string *)((char *)v106 + v108) == v105) {
            goto LABEL_187;
          }
          int v109 = v106->__r_.__value_.__s.__data_[v108];
          int v110 = aEspressoBin[v108++];
          if (v109 != v110) {
            goto LABEL_178;
          }
        }
        unint64_t v107 = v106;
      }
LABEL_178:
      unint64_t v106 = (std::string *)((char *)v106 + 1);
    }
    while (v106 != v105);
  }
  else
  {
    unint64_t v107 = v103;
  }
LABEL_187:
  int64_t v111 = (char *)v107 - (char *)v103;
  BOOL v113 = v107 == v105 || v111 == -1;
  BOOL v159 = v113;
  std::string::size_type v114 = std::string::rfind(&v192, 46, 0xFFFFFFFFFFFFFFFFLL);
  std::string::basic_string(&v200, &v192, 0, v114, (std::allocator<char> *)v201);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  std::string v192 = v200;
  std::string::size_type v115 = std::string::rfind(&v192, 47, 0xFFFFFFFFFFFFFFFFLL);
  std::string::basic_string(&v191, &v192, 0, v115 + 1, (std::allocator<char> *)&v200);
  std::string::pointer v116 = [MEMORY[0x1E4F28CB8] defaultManager];
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v117 = &v191;
  }
  else {
    uint64_t v117 = (std::string *)v191.__r_.__value_.__r.__words[0];
  }
  id v118 = [NSString stringWithUTF8String:v117];
  id v190 = 0;
  uint64_t v160 = [v116 contentsOfDirectoryAtPath:v118 error:&v190];
  id v161 = v190;

  if (v161)
  {
    long long v121 = Espresso::espresso_os_log_subsystem(v119, v120);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      id v157 = [v161 localizedDescription];
      std::string::size_type v158 = [v157 UTF8String];
      LODWORD(v200.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v200.__r_.__value_.__r.__words + 4) = v158;
      _os_log_error_impl(&dword_1920CB000, v121, OS_LOG_TYPE_ERROR, "Error reading source directory: %s", (uint8_t *)&v200, 0xCu);
    }
  }
  long long v202 = 0u;
  long long v203 = 0u;
  memset(v201, 0, sizeof(v201));
  id obj = v160;
  uint64_t v122 = [obj countByEnumeratingWithState:v201 objects:&v200 count:16];
  if (v122)
  {
    uint64_t v168 = **(void **)&v201[16];
    do
    {
      for (uint64_t i = 0; i != v122; ++i)
      {
        if (**(void **)&v201[16] != v168) {
          objc_enumerationMutation(obj);
        }
        id v124 = *(id *)(*(void *)&v201[8] + 8 * i);
        long long v125 = (const char *)[v124 UTF8String];
        std::string v126 = v125;
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v127 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v127 = v191.__r_.__value_.__l.__size_;
        }
        size_t v128 = strlen(v125);
        std::string::basic_string[abi:ne180100]((uint64_t)&v189, v127 + v128);
        if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v129 = &v189;
        }
        else {
          std::string v129 = (std::string *)v189.__r_.__value_.__r.__words[0];
        }
        if (v127)
        {
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v130 = &v191;
          }
          else {
            long long v130 = (std::string *)v191.__r_.__value_.__r.__words[0];
          }
          memmove(v129, v130, v127);
        }
        uint64_t v131 = (char *)v129 + v127;
        if (v128) {
          memmove(v131, v126, v128);
        }
        v131[v128] = 0;
        long long v132 = [*(id *)(a1 + 32) stringByAppendingPathComponent:v124];
        int64_t v133 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
        if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v134 = &v189;
        }
        else {
          uint64_t v134 = (std::string *)v189.__r_.__value_.__r.__words[0];
        }
        if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v135 = &v192;
        }
        else {
          char v135 = (std::string *)v192.__r_.__value_.__r.__words[0];
        }
        if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v136 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t v136 = v192.__r_.__value_.__l.__size_;
        }
        if (v136)
        {
          if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int64_t v133 = v189.__r_.__value_.__l.__size_;
          }
          if (v133 >= v136)
          {
            char v137 = (char *)v134 + v133;
            int v138 = v135->__r_.__value_.__s.__data_[0];
            uint64_t v139 = v134;
            do
            {
              int64_t v140 = v133 - v136;
              if (v140 == -1) {
                break;
              }
              std::string v141 = (char *)memchr(v139, v138, v140 + 1);
              if (!v141) {
                break;
              }
              std::string v142 = v141;
              if (!memcmp(v141, v135, v136))
              {
                if (v142 == v137 || v142 - (char *)v134 == -1) {
                  break;
                }
                goto LABEL_241;
              }
              uint64_t v139 = (std::string *)(v142 + 1);
              int64_t v133 = v137 - (v142 + 1);
            }
            while (v133 >= v136);
          }
        }
        else
        {
LABEL_241:
          long long v143 = [MEMORY[0x1E4F28CB8] defaultManager];
          if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v144 = &v189;
          }
          else {
            uint64_t v144 = (std::string *)v189.__r_.__value_.__r.__words[0];
          }
          uint64_t v145 = [NSString stringWithUTF8String:v144];
          [v143 copyItemAtPath:v145 toPath:v132 error:0];
        }
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v189.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v122 = [obj countByEnumeratingWithState:v201 objects:&v200 count:16];
    }
    while (v122);
  }

  if (!v159)
  {
    LODWORD(v189.__r_.__value_.__l.__data_) = 0;
    Espresso::create_context((int *)&v189, &v187);
    *(unsigned char *)(v187 + 53) = 1;
    if (*(void *)a1) {
      long long v146 = (std::string *)(*(void *)a1 + 592);
    }
    else {
      long long v146 = &__str;
    }
    Espresso::load_network((uint64_t)v146, &v187, 0, 0, &v185);
    int v147 = (std::__shared_weak_count *)v186;
    v184[0] = v185;
    v184[1] = v186;
    if (v186) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v186 + 8), 1uLL, memory_order_relaxed);
    }
    std::vector<std::string> v148 = *(void **)(a1 + 32);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v183, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string v183 = __str;
    }
    char v149 = get_dump_filename(&v183);
    id v150 = [v148 stringByAppendingPathComponent:v149];
    std::string::basic_string[abi:ne180100]<0>(&v189, (char *)[v150 UTF8String]);
    std::string::basic_string[abi:ne180100]<0>(v181, "");
    std::string::basic_string[abi:ne180100]<0>(v179, "");
    Espresso::dump_network(v184, &v189, (uint64_t)v181, (uint64_t)v179);
    if (v180 < 0) {
      operator delete(v179[0]);
    }
    if (v182 < 0) {
      operator delete(v181[0]);
    }
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v189.__r_.__value_.__l.__data_);
    }

    if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v183.__r_.__value_.__l.__data_);
    }
    if (v147)
    {
      nitro::nitro_function::nitro_function(v147);
      nitro::nitro_function::nitro_function(v147);
    }
    if (v188) {
      nitro::nitro_function::nitro_function(v188);
    }
  }

  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v191.__r_.__value_.__l.__data_);
  }
  uint64_t v102 = a1;
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
LABEL_274:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  char v151 = Espresso::espresso_os_log_subsystem(v100, v101);
  if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v152 = [*(id *)(v102 + 32) UTF8String];
    LODWORD(v200.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v200.__r_.__value_.__r.__words + 4) = v152;
    _os_log_impl(&dword_1920CB000, v151, OS_LOG_TYPE_INFO, "Test data written to: %s", (uint8_t *)&v200, 0xCu);
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v178 < 0) {
    operator delete(v176);
  }
  return a1;
}

void sub_1927D87B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62,void *a63)
{
  if (v74)
  {
    nitro::nitro_function::nitro_function(v74);
    nitro::nitro_function::nitro_function(v74);
  }
  if (a62) {
    nitro::nitro_function::nitro_function(a62);
  }

  if (a72 < 0) {
    operator delete(__p);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a26 < 0) {
    operator delete(a21);
  }

  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }

  std::string::pointer v76 = *(std::__shared_weak_count **)(a20 + 8);
  if (v76) {
    nitro::nitro_function::nitro_function(v76);
  }
  _Unwind_Resume(a1);
}

void Espresso::tracer::save_frames(Espresso::tracer *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  std::string::size_type v2 = objc_opt_new();
  [v2 setObject:*((void *)this + 10) forKeyedSubscript:@"frames"];
  id v9 = 0;
  uint64_t v3 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v2 options:1 error:&v9];
  id v4 = v9;
  std::string::size_type v5 = (Espresso *)[v3 writeToFile:*((void *)this + 6) atomically:1];
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = Espresso::espresso_os_log_subsystem(v5, v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = [*((id *)this + 6) UTF8String];
      *(_DWORD *)vImage_Buffer buf = 136315138;
      uint64_t v11 = v8;
      _os_log_error_impl(&dword_1920CB000, v7, OS_LOG_TYPE_ERROR, "Tracer cannot write file: %s", buf, 0xCu);
    }
  }
  fflush(*((FILE **)this + 2));
}

void sub_1927D8D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::tracer::trace_blob(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = 0;
  id v9 = *(void **)(*(void *)a4 + 24);
  uint64_t v10 = *(int *)(*(void *)a4 + 8);
  do
  {
    v10 *= *(int *)(*(void *)a4 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v18, (const Espresso::layer_shape *)(a4 + 16), 0);
  int v11 = *(char *)(a3 + 23);
  uint64_t v12 = *(void *)a3;
  Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v18);
  if (v11 >= 0) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = v12;
  }
  unsigned __int8 v14 = Espresso::tracer::trace_blob_data(a1, v13, v9, 4 * v10, (uint64_t *)&__p, 0);
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v15 = a3;
  }
  else {
    uint64_t v15 = *(void *)a3;
  }
  int v16 = [NSString stringWithUTF8String:v15];
  [v7 setObject:v14 forKeyedSubscript:v16];

  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1927D8EC4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, long long buf)
{
  if (__p) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    char v18 = (Espresso *)__cxa_begin_catch(a1);
    char v20 = Espresso::espresso_os_log_subsystem(v18, v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = (*(uint64_t (**)(Espresso *))(*(void *)v18 + 16))(v18);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v21;
      _os_log_error_impl(&dword_1920CB000, v20, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1927D8E88);
  }

  _Unwind_Resume(a1);
}

id Espresso::tracer::trace_blob_data(uint64_t a1, uint64_t a2, void *a3, size_t a4, uint64_t *a5, uint64_t a6)
{
  __ptr = a3;
  v28[7] = *MEMORY[0x1E4F143B8];
  int v11 = objc_opt_new();
  uint64_t v12 = objc_opt_new();
  uint64_t v13 = *a5;
  if (a5[1] != *a5)
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = objc_msgSend(NSNumber, "numberWithInt:", *(unsigned int *)(v13 + 4 * v14), __ptr);
      [v12 addObject:v15];

      ++v14;
      uint64_t v13 = *a5;
    }
    while (v14 < (a5[1] - *a5) >> 2);
  }
  if (a6)
  {
    v27[0] = @"name";
    int v16 = [NSString stringWithUTF8String:a2];
    v28[0] = v16;
    v28[1] = @"image";
    v27[1] = @"kind";
    void v27[2] = @"file";
    uint64_t v28[2] = @"test_data.json.bin";
    int v27[3] = @"offset";
    int v17 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 24)];
    v28[3] = v17;
    v27[4] = @"size";
    char v18 = [NSNumber numberWithUnsignedLong:a4];
    void v28[4] = v18;
    v28[5] = v12;
    v27[5] = @"shape";
    v27[6] = @"row_bytes";
    uint64_t v19 = [NSNumber numberWithUnsignedLong:a6];
    v28[6] = v19;
    uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:7];

    uint64_t v21 = (void *)v20;
  }
  else
  {
    v25[0] = @"name";
    int v16 = [NSString stringWithUTF8String:a2];
    v26[0] = v16;
    v26[1] = @"tensor";
    v25[1] = @"kind";
    uint64_t v25[2] = @"file";
    uint64_t v26[2] = @"test_data.json.bin";
    v25[3] = @"offset";
    int v17 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 24)];
    _OWORD v26[3] = v17;
    v25[4] = @"size";
    char v18 = [NSNumber numberWithUnsignedLong:a4];
    v25[5] = @"shape";
    v26[4] = v18;
    void v26[5] = v12;
    [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v25 count:6];
    v21 = uint64_t v19 = v11;
  }

  if (fwrite(__ptr, a4, 1uLL, *(FILE **)(a1 + 16)) != 1)
  {
    uint64_t v24 = [*(id *)(a1 + 40) UTF8String];
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot write file: %s", &v24);
  }
  *(void *)(a1 + 24) += a4;

  return v21;
}

void sub_1927D92D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::tracer::~tracer(Espresso::tracer *this)
{
  Espresso::tracer::save_frames(this);
  fclose(*((FILE **)this + 2));

  std::string::size_type v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

__n128 __Block_byref_object_copy__5012(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__5013(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t ___ZN8Espresso6tracer11trace_blobsIbEEP19NSMutableDictionaryRKNSt3__13mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEET_NS4_4lessISB_EENS9_INS4_4pairIKSB_SC_EEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = **(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, a2, *(void *)(v2 + 8) + 48);
}

double std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>(uint64_t *a1, void *a2)
{
  id v4 = (char *)operator new(0x118uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)id v4 = &unk_1EE38C588;
  uint64_t v5 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v4 + 24), a2);
  *((void *)v4 + 3) = &unk_1EE3718A0;
  *((void *)v4 + 34) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *((_DWORD *)v4 + 66) = 0;
  *a1 = v5;
  a1[1] = (uint64_t)v4;
  return result;
}

uint64_t std::pair<std::string const,EspressoLight::input_image_buffers>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<vImage_Buffer>::__init_with_size[abi:ne180100]<vImage_Buffer*,vImage_Buffer*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    double result = std::vector<vImage_Buffer>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1927D9570(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<vImage_Buffer>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 136);
  std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::tracer::add_frame<espresso_buffer_t>(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  size_t v8 = objc_opt_new();
  if (*((char *)a4 + 23) < 0)
  {
    if (!a4[1]) {
      goto LABEL_7;
    }
    a4 = (uint64_t *)*a4;
    goto LABEL_6;
  }
  if (*((unsigned char *)a4 + 23))
  {
LABEL_6:
    id v9 = [NSString stringWithUTF8String:a4];
    [v8 setObject:v9 forKeyedSubscript:@"function_name"];
  }
LABEL_7:
  [*(id *)(a1 + 80) addObject:v8];

  std::string::basic_string[abi:ne180100]<0>(__p, "inputs");
  Espresso::tracer::set_attachment<espresso_buffer_t>(a1, (uint64_t *)__p, a2);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "outputs");
  Espresso::tracer::set_attachment<espresso_buffer_t>(a1, (uint64_t *)v14, a3);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "ground_truths");
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = v11;
  Espresso::tracer::set_attachment<espresso_buffer_t>(a1, (uint64_t *)v12, &v10);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v11[0]);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_1927D9770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void Espresso::tracer::set_attachment<espresso_buffer_t>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v37 = [*(id *)(a1 + 80) lastObject];
  if (!v37)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid state: No frames exists in the trace");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v6 = a2;
  if (*((char *)a2 + 23) < 0) {
    int v6 = (uint64_t *)*a2;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  size_t v8 = [v37 objectForKeyedSubscript:v7];

  if (!v8)
  {
    uint64_t v9 = objc_opt_new();
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    uint64_t v10 = [NSString stringWithUTF8String:a2];
    [v37 setObject:v9 forKeyedSubscript:v10];

    size_t v8 = (void *)v9;
  }
  int v11 = objc_opt_new();
  unint64_t v14 = (void *)*a3;
  uint64_t v12 = a3 + 1;
  char v13 = v14;
  if (v14 != v12)
  {
    do
    {
      if (*((char *)v13 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)v13[4], v13[5]);
      }
      else {
        std::string v40 = *(std::string *)(v13 + 4);
      }
      int32x4_t v15 = *(int32x4_t *)(v13 + 13);
      int32x4_t v16 = *(int32x4_t *)(v13 + 15);
      long long v17 = *(_OWORD *)(v13 + 19);
      long long v42 = *(_OWORD *)(v13 + 17);
      long long v43 = v17;
      void v41[3] = v15;
      v41[4] = v16;
      long long v18 = *(_OWORD *)(v13 + 21);
      long long v19 = *(_OWORD *)(v13 + 23);
      uint64_t v47 = v13[27];
      long long v20 = *(_OWORD *)(v13 + 25);
      long long v45 = v19;
      long long v46 = v20;
      long long v44 = v18;
      int32x4_t v21 = *(int32x4_t *)(v13 + 9);
      v41[0] = *(int32x4_t *)(v13 + 7);
      v41[1] = v21;
      int v41[2] = *(int32x4_t *)(v13 + 11);
      int v22 = (void *)v41[0].i64[0];
      uint64_t v23 = *((void *)&v20 + 1);
      __uint64_t n = 0;
      uint64_t v53 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      *(void *)vImage_Buffer buf = 1;
      espresso_buffer_unpack_tensor_shape(v41, &__n, buf);
      std::vector<int>::vector(&v38, __n);
      std::vector<int>::size_type v24 = __n;
      if (__n)
      {
        int v25 = buf;
        begiuint64_t n = v38.__begin_;
        do
        {
          uint64_t v27 = *(void *)v25;
          v25 += 8;
          *begin++ = v27;
          --v24;
        }
        while (v24);
      }
      if ((void)v42) {
        size_t v28 = 4 * v23;
      }
      else {
        size_t v28 = 4;
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v29 = &v40;
      }
      else {
        long long v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      unint64_t v30 = Espresso::tracer::trace_blob_data(a1, (uint64_t)v29, v22, v28, (uint64_t *)&v38, 0);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v31 = &v40;
      }
      else {
        int v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      uint64_t v32 = [NSString stringWithUTF8String:v31];
      [v11 setObject:v30 forKeyedSubscript:v32];

      if (v38.__begin_)
      {
        v38.__end_ = v38.__begin_;
        operator delete(v38.__begin_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      int v33 = (void *)v13[1];
      if (v33)
      {
        do
        {
          int v34 = v33;
          int v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          int v34 = (void *)v13[2];
          BOOL v35 = *v34 == (void)v13;
          char v13 = v34;
        }
        while (!v35);
      }
      char v13 = v34;
    }
    while (v34 != v12);
  }
  [v8 addEntriesFromDictionary:v11];
}

void sub_1927D9C2C()
{
  JUMPOUT(0x1927D9C78);
}

void sub_1927D9C50()
{
}

void sub_1927D9C60()
{
}

void Espresso::tracer::set_attachment<std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>(uint64_t a1, uint64_t *a2, void *a3)
{
  id v22 = [*(id *)(a1 + 80) lastObject];
  if (!v22)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid state: No frames exists in the trace");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v6 = a2;
  if (*((char *)a2 + 23) < 0) {
    int v6 = (uint64_t *)*a2;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  size_t v8 = [v22 objectForKeyedSubscript:v7];

  if (!v8)
  {
    uint64_t v9 = objc_opt_new();
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    uint64_t v10 = [NSString stringWithUTF8String:a2];
    [v22 setObject:v9 forKeyedSubscript:v10];

    size_t v8 = (void *)v9;
  }
  int v11 = objc_opt_new();
  unint64_t v14 = (void *)*a3;
  uint64_t v12 = a3 + 1;
  char v13 = v14;
  if (v14 != v12)
  {
    do
    {
      if (*((char *)v13 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v23, (const std::string::value_type *)v13[4], v13[5]);
      }
      else {
        std::string v23 = *(std::string *)(v13 + 4);
      }
      int32x4_t v15 = (std::__shared_weak_count *)v13[8];
      uint64_t v24 = v13[7];
      int v25 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v13 + 11);
      long long v26 = *(_OWORD *)(v13 + 9);
      long long v27 = v16;
      long long v17 = (const void *)v13[14];
      uint64_t v28 = v13[13];
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      std::vector<int> __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v17, v13[15], (uint64_t)(v13[15] - (void)v17) >> 2);
      Espresso::tracer::trace_blob(a1, v11, (uint64_t)&v23, (uint64_t)&v24);
      if (__p)
      {
        unint64_t v30 = __p;
        operator delete(__p);
      }
      if (v25) {
        nitro::nitro_function::nitro_function(v25);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      long long v18 = (void *)v13[1];
      if (v18)
      {
        do
        {
          long long v19 = v18;
          long long v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          long long v19 = (void *)v13[2];
          BOOL v20 = *v19 == (void)v13;
          char v13 = v19;
        }
        while (!v20);
      }
      char v13 = v19;
    }
    while (v19 != v12);
  }
  [v8 addEntriesFromDictionary:v11];
}

void sub_1927D9EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(a1);
}

void Espresso::fill_network_with_image_batch_safe_v2(void **a1, uint64_t *a2, _OWORD *a3, uint64_t a4, uint64_t a5, __n128 *a6)
{
  uint64_t v12 = operator new(0x20uLL);
  int32x4_t v15 = v12 + 2;
  long long v16 = v12 + 2;
  long long v13 = a3[1];
  *uint64_t v12 = *a3;
  v12[1] = v13;
  std::vector<int> __p = v12;
  Espresso::fill_network_with_images_batch_safe_v2(a1, a2, (const char ***)&__p, a4, a5, a6);
  if (__p)
  {
    int32x4_t v15 = __p;
    operator delete(__p);
  }
}

void sub_1927DA024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fill_network_with_images_batch_safe_v2(void **a1, uint64_t *a2, const char ***a3, uint64_t a4, uint64_t a5, __n128 *a6)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::fill_network_with_images_batch_safe_v2(a1, a2, a3, a4, v11, a6, (std::string::size_type)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1927DA0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fill_network_with_images_batch_safe_v2(void **a1, uint64_t *a2, const char ***a3, uint64_t a4, uint64_t a5, __n128 *a6, std::string::size_type a7)
{
  uint64_t v7 = *a2;
  if (*(void *)(*a2 + 40) == *(void *)(*a2 + 32))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[Espresso] uninitialized network");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if ((*(char *)(a7 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a7 + 23)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (!*(void *)(a7 + 8))
  {
LABEL_4:
    v27.__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7 + 56, 0, &v27);
    std::string::operator=((std::string *)a7, (const std::string *)v14[3]);
    uint64_t v7 = *a2;
  }
LABEL_5:
  v27.__r_.__value_.__r.__words[0] = a7;
  int32x4_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a7, (long long **)&v27);
  long long v18 = (int *)*((void *)v15 + 5);
  long long v17 = (std::__shared_weak_count *)*((void *)v15 + 6);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v18)
  {
    int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v25, &v27);
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v19 = *a1;
  if (*a1
  {
    BOOL v20 = (std::__shared_weak_count *)a1[1];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    BOOL v20 = 0;
  }
  int v21 = *(_DWORD *)(**(void **)(*a2 + 32) + 8);
  if ((v21 == 20000 || v21 == 1) && v19 == 0)
  {
    long long v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Espresso: wrong_batch_type");
    v26->__vftable = (std::runtime_error_vtbl *)&unk_1EE33E418;
  }
  Espresso::fill_blob_with_images_batch_safe_v2((uint64_t)a1, v18, a3, a4, v16, a6);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_1927DA350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v16);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(a1);
}

void Espresso::fill_blob_with_images_batch_safe_v2(uint64_t a1, int *a2, const char ***a3, uint64_t a4, uint64_t a5, __n128 *a6)
{
  if ((*(uint64_t (**)(int *, uint64_t, const char ***, uint64_t, __n128 *))(*(void *)a2 + 136))(a2, a1, a3, a4, a6))return; {
  long long v257 = a6;
  }
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[4];
  int v13 = a2[6];
  if (v13 <= 1) {
    int v13 = 1;
  }
  int v14 = v13 * a2[5];
  unint64_t v15 = (char *)a3[1] - (char *)*a3;
  unint64_t v252 = v15 >> 5;
  uint64_t v256 = a2[3];
  if (*(void *)a1)
  {
    if (v16)
    {
      long long v17 = *(std::__shared_weak_count **)(a1 + 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      long long v17 = 0;
    }
  }
  else
  {
    long long v17 = 0;
    uint64_t v16 = 0;
  }
  if (v14 < (int)v252)
  {
    exceptiounsigned int n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[Espresso] wrong number of images in image batch");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  long long v18 = *a3;
  long long v19 = a3[1];
  if (*a3 != v19)
  {
    while (v18[2] == (const char *)(int)v11 && v18[1] == (const char *)(int)v256)
    {
      if (!*v18)
      {
        long long v227 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v227, "[Espresso] emtpy image");
        goto LABEL_247;
      }
      v18 += 4;
      if (v18 == v19) {
        goto LABEL_16;
      }
    }
    long long v227 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v227, "[Espresso] wrong image size");
LABEL_247:
    v227->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v227, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
LABEL_16:
  uint64_t v239 = v17;
  int v246 = v257->n128_i32[3];
  int v244 = v257->n128_i32[2];
  if ((***(unsigned int (****)(void))(*((void *)a2 + 9) + 8))(*(void *)(*((void *)a2 + 9) + 8)) == 50000
    && v257->n128_u32[1] == 0)
  {
    long long v43 = (const void *)*((void *)a2 + 9);
    if (v43
    {
      long long v44 = (std::__shared_weak_count *)*((void *)a2 + 10);
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      v262 = 0;
      long long v44 = 0;
    }
    unint64_t v237 = v44;
    if (v258)
    {
      if (!v16)
      {
        uint64_t v229 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v229, "Espresso: wrong_batch_type");
        int v230 = Espresso::wrong_batch_type::~wrong_batch_type;
        int v232 = (std::runtime_error_vtbl *)&unk_1EE33E418;
        goto LABEL_252;
      }
      if (v262)
      {
        uint64_t v243 = objc_opt_new();
        uint64_t v48 = objc_opt_new();
        v271.n128_u16[0] = 0;
        id v240 = v48;
        objc_msgSend(v48, "appendFormat:", @"%d:%d_", 0, 0);
        [v243 setConstantValue:&v271 type:41 atIndex:0];
        v271.n128_u16[0] = 0;
        objc_msgSend(v240, "appendFormat:", @"%d:%d_", 1, 0);
        [v243 setConstantValue:&v271 type:41 atIndex:1];
        v271.n128_u16[0] = a4;
        objc_msgSend(v240, "appendFormat:", @"%d:%d_", 2, a4);
        [v243 setConstantValue:&v271 type:41 atIndex:2];
        id v49 = v240;
        long long v50 = objc_msgSend(v262[20], "kernelForFunction:cacheString:withConstants:", "TARR_vimage2espresso", objc_msgSend(v49, "UTF8String"), v243);
        uint64_t v236 = v49;
        long long v260 = v50;
        if (!v50)
        {
          long long v51 = std::runtime_error::runtime_error(&v276, "Error creating vimage2espresso: Unsupported number of channels");
          std::runtime_error::~runtime_error(v51);
        }
        long long v52 = *a3;
        int v254 = a3[1];
        if (*a3 != v254)
        {
          uint64_t v53 = 0;
          int v54 = v11 - 1;
          int v55 = v256 - 1;
          int v56 = v256 + 6;
          if ((int)v11 < 1) {
            int v54 = v11 + 2;
          }
          if (v55 >= 0) {
            int v56 = v256 - 1;
          }
          uint64_t v253 = (v56 >> 3) + 1;
          uint64_t v57 = (v54 >> 2) + 1;
          int v58 = v256 + 2;
          if (v55 >= 0) {
            int v58 = v256 - 1;
          }
          uint64_t v248 = (v58 >> 2) + 1;
          uint64_t v251 = v57;
          int64x2_t v245 = vdupq_n_s64(8uLL);
          int64x2_t v247 = vdupq_n_s64(4uLL);
          do
          {
            uint64_t v59 = (void *)[v262[18] newBufferWithBytes:*v52 length:(void)v52[3] * (void)v52[1] options:0];
            __n128 v60 = v257[2];
            __n128 v61 = v257[3];
            __n128 v62 = *v257;
            __n128 v272 = v257[1];
            __n128 v273 = v60;
            __n128 v63 = v257[4];
            __n128 v274 = v61;
            __n128 v275 = v63;
            __n128 v271 = v62;
            v273.n128_u32[2] = v256;
            v273.n128_u32[3] = v52[3];
            v273.n128_u64[0] = __PAIR64__(v11, v53);
            uint64_t v64 = v16;
            Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v270, (uint64_t)v16);
            id v65 = (id)v270;
            id v66 = v258[21];
            if (v67)
            {
              uint64_t v68 = v67;
              if ((unint64_t)[v67[32] count] >= 2)
              {
                unint64_t v69 = [v68[32] objectAtIndexedSubscript:v53];
                uint64_t v70 = [v69 texture];

                v273.n128_u32[0] = 0;
                id v66 = (id)v70;
              }
            }
            long long v50 = v260;
            [v65 setComputePipelineState:v260];
            [v65 setTexture:v66 atIndex:0];
            [v65 setBuffer:v59 offset:0 atIndex:0];
            [v65 setBytes:&v271 length:80 atIndex:1];
            if ((int)v11 > 7)
            {
              v267[0] = ((v11 - 1) >> 3) + 1;
              v267[1] = v253;
              v267[2] = 1;
              uint64_t v71 = &v266;
              uint64_t v72 = v267;
              int64x2_t v266 = v245;
            }
            else
            {
              v269[0] = v251;
              v269[1] = v248;
              v269[2] = 1;
              uint64_t v71 = &v268;
              uint64_t v72 = v269;
              int64x2_t v268 = v247;
            }
            v71[1].i64[0] = 1;
            objc_msgSend(v65, "dispatchThreadgroups:threadsPerThreadgroup:", v72);
            ++v53;

            Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)&v270);
            v52 += 4;
            uint64_t v16 = v64;
          }
          while (v52 != v254);
        }

        size_t v73 = v237;
        uint64_t v74 = v239;
        if (v237) {
          goto LABEL_232;
        }
        goto LABEL_233;
      }
    }
    uint64_t v229 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v229, "Espresso: wrong_context_type");
    int v230 = Espresso::wrong_context_type::~wrong_context_type;
    int v232 = (std::runtime_error_vtbl *)&unk_1EE34EF90;
LABEL_252:
    v229->__vftable = v232;
    __cxa_throw(v229, v231, (void (*)(void *))v230);
  }
  unint64_t v235 = v15;
  float __B = v257->n128_f32[0];
  if (((***(uint64_t (****)(void))(*((void *)a2 + 9) + 8))(*(void *)(*((void *)a2 + 9) + 8)) & 0xFFFFFFFD) != 5
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32((float32x4_t)v257[1])))) & 1) != 0)
  {
    goto LABEL_54;
  }
  if (fabsf(__B + -1.0) > 0.00001 || v257->n128_u32[1] != 0) {
    goto LABEL_54;
  }
  if (!v22)
  {
    int v233 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v233, "Unexpected tensor type for backend.");
    __cxa_throw(v233, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string v23 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 32
    || (uint64_t v24 = v22, v23[2] != (const char *)(int)v22[2])
    || v23[1] != (const char *)(int)v22[3]
    || v22[4] > (int)a4
    || (*(unsigned int (**)(_DWORD *))(*(void *)v22 + 32))(v22) != 4
    || v24[29]
    || (float v25 = *((float *)v24 + 28), (float)(v25 * ldexpf(1.0, v24[41])) != 1.0)
    || v24[40] - (v24[29] != 0) != 8
    || a4 != 4
    || v24[4] != 3)
  {
LABEL_54:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v271, a4, *((_DWORD *)*a3 + 4), *((_DWORD *)*a3 + 2), v252);
    __n128 v250 = v271;
    int v242 = (std::__shared_weak_count *)v271.n128_u64[1];
    if (v16)
    {
      if (v271.n128_u64[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v45 = v16[22];
      long long v46 = (__n128 *)v16[21];
      if ((unint64_t)v46 >= v45)
      {
        uint64_t v75 = v16[20];
        uint64_t v76 = ((uint64_t)v46 - v75) >> 4;
        if ((unint64_t)(v76 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v77 = v45 - v75;
        uint64_t v78 = v77 >> 3;
        if (v77 >> 3 <= (unint64_t)(v76 + 1)) {
          uint64_t v78 = v76 + 1;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v79 = v78;
        }
        v273.n128_u64[0] = (unint64_t)(v16 + 22);
        uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v79);
        unint64_t v81 = (__n128 *)&v80[16 * v76];
        v271.n128_u64[0] = (unint64_t)v80;
        v271.n128_u64[1] = (unint64_t)v81;
        v272.n128_u64[1] = (unint64_t)&v80[16 * v82];
        *unint64_t v81 = v250;
        v272.n128_u64[0] = (unint64_t)v81[1].n128_u64;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v16 + 20, &v271);
        uint64_t v47 = (__n128 *)v16[21];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *long long v46 = v250;
        uint64_t v47 = v46 + 1;
        void v16[21] = v47;
      }
      void v16[21] = v47;
    }
    v249 = v16;
    uint64_t v238 = a1;
    uint64_t v241 = a2;
    uint64_t v83 = *a3;
    unsigned int v255 = a3[1];
    if (*a3 != v255)
    {
      uint64_t v263 = 0;
      uint64_t v259 = 4 * (int)a4;
      do
      {
        v261 = v83;
        unint64_t v84 = v83[1];
        if (v84)
        {
          uint64_t v85 = (const unsigned __int8 *)*v83;
          std::string::size_type v86 = v83[2];
          long long v87 = v83[3];
          vDSP_Length v88 = (void)v86 * (int)a4;
          uint64_t v89 = (void)v84 * (void)v86 * v263;
          uint64_t v90 = v259 * (void)v86;
          do
          {
            vDSP_vfltu8(v85, 1, (float *)(*(void *)(v250.n128_u64[0] + 24) + v89), 1, v88);
            v89 += v90;
            uint64_t v85 = (const unsigned __int8 *)&v87[(void)v85];
            --v84;
          }
          while (v84);
        }
        uint64_t v83 = v261 + 4;
        v263 += v259;
      }
      while (v261 + 4 != v255);
    }
    long long v91 = v257;
    int v92 = v256 * v11;
    int v93 = v256 * v11 * v12;
    if (v257->n128_u32[1]) {
      BOOL v94 = (int)v252 < 1;
    }
    else {
      BOOL v94 = 1;
    }
    long long v95 = v241;
    uint64_t v96 = v238;
    if (!v94)
    {
      uint64_t v97 = 0;
      uint64_t v98 = *(void *)(v250.n128_u64[0] + 24);
      int v99 = v11 * a4;
      do
      {
        if ((int)v256 >= 1)
        {
          int v100 = 0;
          int v101 = 0;
          uint64_t v102 = v98 + 4 * (int)v11 * (int)a4 * (int)v256 * (int)v97;
          float v103 = 0.0;
          do
          {
            if ((int)v11 >= 1)
            {
              int v104 = 0;
              int v105 = v100;
              do
              {
                int v106 = v105;
                uint64_t v107 = v12;
                if ((int)v12 >= 1)
                {
                  do
                  {
                    float v103 = v103 + *(float *)(v102 + 4 * v106++);
                    --v107;
                  }
                  while (v107);
                }
                ++v104;
                v105 += a4;
              }
              while (v104 != v11);
            }
            ++v101;
            v100 += v99;
          }
          while (v101 != v256);
          int v108 = 0;
          int v109 = 0;
          float v110 = v103 / (float)v93;
          do
          {
            if ((int)v11 >= 1)
            {
              int v111 = 0;
              int v112 = v108;
              do
              {
                int v113 = v112;
                uint64_t v114 = v12;
                if ((int)v12 >= 1)
                {
                  do
                  {
                    *(float *)(v102 + 4 * v113) = *(float *)(v102 + 4 * v113) - v110;
                    ++v113;
                    --v114;
                  }
                  while (v114);
                }
                ++v111;
                v112 += a4;
              }
              while (v111 != v11);
            }
            ++v109;
            v108 += v99;
          }
          while (v109 != v256);
        }
        ++v97;
      }
      while (v97 != (v235 >> 5));
    }
    if (fabsf(__B + -1.0) > 0.00001)
    {
      uint64_t v115 = 0;
      vDSP_Length v116 = *(int *)(v250.n128_u64[0] + 8);
      do
      {
        v116 *= *(int *)(v250.n128_u64[0] + 12 + v115);
        v115 += 4;
      }
      while (v115 != 12);
      vDSP_vsmul(*(const float **)(v250.n128_u64[0] + 24), 1, &__B, *(float **)(v250.n128_u64[0] + 24), 1, v116);
    }
    (*(void (**)(long long *__return_ptr, int *))(*(void *)v241 + 56))(&v270, v241);
    if (v249)
    {
      long long v122 = v270;
      if (*((void *)&v270 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v270 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v123 = v249[22];
      id v124 = (_OWORD *)v249[21];
      if ((unint64_t)v124 >= v123)
      {
        long long v264 = v122;
        uint64_t v127 = v249[20];
        uint64_t v128 = ((uint64_t)v124 - v127) >> 4;
        if ((unint64_t)(v128 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v129 = v123 - v127;
        uint64_t v130 = v129 >> 3;
        if (v129 >> 3 <= (unint64_t)(v128 + 1)) {
          uint64_t v130 = v128 + 1;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v131 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v131 = v130;
        }
        v273.n128_u64[0] = (unint64_t)(v249 + 22);
        long long v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v131);
        int64_t v133 = &v132[16 * v128];
        v271.n128_u64[0] = (unint64_t)v132;
        v271.n128_u64[1] = (unint64_t)v133;
        v272.n128_u64[1] = (unint64_t)&v132[16 * v134];
        *(_OWORD *)int64_t v133 = v264;
        v272.n128_u64[0] = (unint64_t)(v133 + 16);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v249 + 20, &v271);
        std::string v126 = v249;
        long long v125 = (_OWORD *)v249[21];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v271);
        long long v91 = v257;
        uint64_t v96 = v238;
      }
      else
      {
        *id v124 = v122;
        long long v125 = v124 + 1;
        v249[21] = v125;
        std::string v126 = v249;
      }
      v126[21] = v125;
      long long v95 = v241;
    }
    __n128 v135 = v250;
    int64_t v136 = *(_OWORD **)(v250.n128_u64[0] + 24);
    if (a4 == 1)
    {
      v117.i32[0] = v91[1].n128_i32[0];
      if (*(float *)v117.i32 == 0.0)
      {
        int v182 = v252;
        if (v252)
        {
          std::string v183 = *(char **)(v270 + 24);
          uint64_t v184 = 4 * *(_DWORD *)(v270 + 12) * *(_DWORD *)(v270 + 8) * *(_DWORD *)(v270 + 16);
          do
          {
            --v182;
            memcpy(v183, v136, 4 * v92);
            v183 += v184;
            int64_t v136 = (_OWORD *)((char *)v136 + 4 * v92);
          }
          while (v182);
        }
      }
      else
      {
        int v189 = v92 + 7;
        if (v92 >= 0) {
          int v189 = v256 * v11;
        }
        int v190 = v252;
        if (v252)
        {
          int v191 = v189 >> 3;
          unsigned int v192 = v92 - (v189 & 0xFFFFFFF8);
          float32x4_t v193 = (float32x4_t)vdupq_lane_s32(v117, 0);
          v194 = *(float **)(v270 + 24);
          int v195 = v191 - 1;
          do
          {
            if (v92 < 8)
            {
              f32 = v194;
            }
            else
            {
              __n128 v135 = *(__n128 *)v136;
              float32x4_t v196 = *((float32x4_t *)v136 + 1);
              v136 += 2;
              std::string::size_type v197 = (float32x4_t *)v194;
              for (int i = v195; i; --i)
              {
                float32x4_t v199 = vaddq_f32(v193, (float32x4_t)v135);
                float32x4_t v200 = vaddq_f32(v193, v196);
                __n128 v135 = *(__n128 *)v136;
                float32x4_t v196 = *((float32x4_t *)v136 + 1);
                v136 += 2;
                float32x4_t *v197 = v199;
                v197[1] = v200;
                v197 += 2;
              }
              float32x4_t *v197 = vaddq_f32(v193, (float32x4_t)v135);
              v197[1] = vaddq_f32(v193, v196);
              f32 = v197[2].f32;
            }
            for (unsigned int j = v192; j; --j)
            {
              float v203 = *(float *)v136;
              int64_t v136 = (_OWORD *)((char *)v136 + 4);
              v135.n128_f32[0] = *(float *)v117.i32 + v203;
              *f32++ = *(float *)v117.i32 + v203;
            }
            v194 += v93;
            --v190;
          }
          while (v190);
        }
      }
    }
    else if (a4 == 3)
    {
      if ((int)v12 <= 2)
      {
        v234 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v234, "[Espresso] wrong number of input channels in image");
        v234->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v234, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      int v166 = 2 * v92;
      float v167 = v91[1].n128_f32[0];
      if (v246 == v244) {
        int v168 = 0;
      }
      else {
        int v168 = 2 * v92;
      }
      if (v246 != v244) {
        int v166 = 0;
      }
      int v169 = v91->n128_i32[3];
      if (v169) {
        v135.n128_u32[0] = v91[1].n128_u32[2];
      }
      else {
        v135.n128_u32[0] = v91[1].n128_u32[0];
      }
      if (!v169) {
        float v167 = v91[1].n128_f32[2];
      }
      if ((int)v252 >= 1)
      {
        int v170 = 0;
        do
        {
          if ((int)v256 >= 1)
          {
            uint64_t v171 = 0;
            uint64_t v172 = v270;
            int v173 = v168;
            int v174 = v92;
            int v175 = v166;
            do
            {
              if ((int)v11 >= 1)
              {
                uint64_t v176 = *(void *)(v172 + 24);
                unint64_t v177 = (float *)(v176 + 4 * v175);
                unsigned __int8 v178 = (float *)(v176 + 4 * v174);
                uint64_t v179 = (float *)(v176 + 4 * v173);
                uint64_t v180 = v11;
                do
                {
                  *v179++ = v135.n128_f32[0] + *(float *)v136;
                  *v178++ = *((float *)v136 + 1) + v91[1].n128_f32[1];
                  int v181 = (_OWORD *)((char *)v136 + 12);
                  *v177++ = v167 + *((float *)v136 + 2);
                  int64_t v136 = (_OWORD *)((char *)v136 + 12);
                  --v180;
                }
                while (v180);
                int64_t v136 = v181;
              }
              ++v171;
              v175 += v11;
              v174 += v11;
              v173 += v11;
            }
            while (v171 != v256);
          }
          ++v170;
          v166 += v93;
          v92 += v93;
          v168 += v93;
        }
        while (v170 != v252);
      }
    }
    else
    {
      int v137 = v252;
      if (a4 == 4)
      {
        if ((int)v12 <= 1) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("[Espresso] wrong number of input channels while binding XYZA image: it should be at least 2");
        }
        BOOL v138 = v246 != v244;
        v118.i32[0] = v91[1].n128_i32[1];
        v135.n128_u32[0] = v91[1].n128_u32[2];
        BOOL v139 = v12 != 2;
        if (v138 && v139) {
          int v140 = 2 * v92;
        }
        else {
          int v140 = 0;
        }
        if (v138 && v139) {
          int v141 = 0;
        }
        else {
          int v141 = 2 * v92;
        }
        int v142 = v91->n128_i32[3];
        if (v142) {
          v119.i32[0] = v91[1].n128_i32[2];
        }
        else {
          v119.i32[0] = v91[1].n128_i32[0];
        }
        if (v142) {
          v120.i32[0] = v91[1].n128_i32[0];
        }
        else {
          v120.i32[0] = v91[1].n128_i32[2];
        }
        uint64_t v143 = *(void *)(v270 + 24);
        if (v12 < 4)
        {
          if (v12 == 2)
          {
            if (v252)
            {
              uint64_t v185 = 4 * v140;
              do
              {
                uint64_t v186 = v185;
                uint64_t v187 = 4 * v92;
                int v188 = v256 * v11;
                if (v246 == v244)
                {
                  if (v92)
                  {
                    do
                    {
                      *(float *)(v143 + v186) = *(float *)v119.i32 + *(float *)v136;
                      v135.n128_f32[0] = *(float *)v118.i32 + *((float *)v136 + 1);
                      *(_DWORD *)(v143 + v187) = v135.n128_u32[0];
                      ++v136;
                      v187 += 4;
                      v186 += 4;
                      --v188;
                    }
                    while (v188);
                  }
                }
                else if (v92)
                {
                  do
                  {
                    *(float *)(v143 + v187) = *(float *)v118.i32 + *((float *)v136 + 1);
                    v135.n128_f32[0] = *(float *)v120.i32 + *((float *)v136 + 2);
                    *(_DWORD *)(v143 + v186) = v135.n128_u32[0];
                    ++v136;
                    v187 += 4;
                    v186 += 4;
                    --v188;
                  }
                  while (v188);
                }
                v143 += 4 * v93;
                --v137;
              }
              while (v137);
            }
          }
          else
          {
            if (v92 <= 0) {
              int v204 = -(-v92 & 7);
            }
            else {
              int v204 = v92 & 7;
            }
            if (v252)
            {
              float32x4_t v205 = (float32x4_t)vdupq_lane_s32(v119, 0);
              float32x4_t v206 = (float32x4_t)vdupq_lane_s32(v118, 0);
              float32x4_t v207 = (float32x4_t)vdupq_lane_s32(v120, 0);
              do
              {
                id v208 = (float32x4_t *)(v143 + 4 * v140);
                std::string::size_type v209 = (float32x4_t *)(v143 + 4 * v92);
                v210 = (float32x4_t *)(v143 + 4 * v141);
                if (v92 >= 8)
                {
                  int v211 = v92 / 8 - 1;
                  *(float32x4x4_t *)v135.n128_u64 = vld4q_f32((const float *)v136);
                  v212 = (const float *)(v136 + 4);
                  float32x4x4_t v283 = vld4q_f32(v212);
                  int64_t v136 = v212 + 16;
                  if (v92 / 8 != 1)
                  {
                    do
                    {
                      float32x4_t v213 = vaddq_f32(v205, (float32x4_t)v135);
                      float32x4_t v214 = vaddq_f32(v206, v279.val[1]);
                      float32x4_t v215 = vaddq_f32(v207, v279.val[2]);
                      *(float32x4x4_t *)v135.n128_u64 = vld4q_f32((const float *)v136);
                      uint64_t v216 = (const float *)(v136 + 4);
                      float32x4_t v217 = vaddq_f32(v205, v283.val[0]);
                      float32x4_t v218 = vaddq_f32(v206, v283.val[1]);
                      float32x4_t v219 = vaddq_f32(v207, v283.val[2]);
                      float32x4x4_t v283 = vld4q_f32(v216);
                      int64_t v136 = v216 + 16;
                      *id v208 = v213;
                      v208[1] = v217;
                      v208 += 2;
                      float32x4_t *v209 = v214;
                      v209[1] = v218;
                      v209 += 2;
                      float32x4_t *v210 = v215;
                      v210[1] = v219;
                      v210 += 2;
                      --v211;
                    }
                    while (v211);
                  }
                  *id v208 = vaddq_f32(v205, (float32x4_t)v135);
                  v208[1] = vaddq_f32(v205, v283.val[0]);
                  v208 += 2;
                  float32x4_t *v209 = vaddq_f32(v206, v279.val[1]);
                  v209[1] = vaddq_f32(v206, v283.val[1]);
                  v209 += 2;
                  float32x4_t *v210 = vaddq_f32(v207, v279.val[2]);
                  v210[1] = vaddq_f32(v207, v283.val[2]);
                  v210 += 2;
                }
                for (int k = v204; k; --k)
                {
                  v208->f32[0] = *(float *)v119.i32 + *(float *)v136;
                  id v208 = (float32x4_t *)((char *)v208 + 4);
                  v209->f32[0] = *(float *)v118.i32 + *((float *)v136 + 1);
                  std::string::size_type v209 = (float32x4_t *)((char *)v209 + 4);
                  v135.n128_f32[0] = *(float *)v120.i32 + *((float *)v136 + 2);
                  v210->i32[0] = v135.n128_u32[0];
                  v210 = (float32x4_t *)((char *)v210 + 4);
                  ++v136;
                }
                v143 += 4 * v93;
                --v137;
              }
              while (v137);
            }
          }
        }
        else
        {
          if (v92 <= 0) {
            int v144 = -(-v92 & 7);
          }
          else {
            int v144 = v92 & 7;
          }
          if (v252)
          {
            float32x4_t v145 = (float32x4_t)vdupq_lane_s32(v119, 0);
            v121.i32[0] = v91[1].n128_i32[3];
            float32x4_t v146 = (float32x4_t)vdupq_lane_s32(v118, 0);
            float32x4_t v147 = (float32x4_t)vdupq_lane_s32(v120, 0);
            float32x4_t v148 = (float32x4_t)vdupq_lane_s32(v121, 0);
            do
            {
              char v149 = (float32x4_t *)(v143 + 4 * v140);
              id v150 = (float32x4_t *)(v143 + 4 * v92);
              char v151 = (float32x4_t *)(v143 + 4 * v141);
              std::string::size_type v152 = (float32x4_t *)(v143 + 12 * v92);
              if (v92 >= 8)
              {
                int v153 = v92 / 8 - 1;
                *(float32x4x4_t *)v135.n128_u64 = vld4q_f32((const float *)v136);
                id v154 = (const float *)(v136 + 4);
                float32x4x4_t v282 = vld4q_f32(v154);
                int64_t v136 = v154 + 16;
                if (v92 / 8 != 1)
                {
                  do
                  {
                    float32x4_t v155 = vaddq_f32(v145, (float32x4_t)v135);
                    float32x4_t v156 = vaddq_f32(v146, v278.val[1]);
                    float32x4_t v157 = vaddq_f32(v147, v278.val[2]);
                    float32x4_t v158 = vaddq_f32(v148, v278.val[3]);
                    *(float32x4x4_t *)v135.n128_u64 = vld4q_f32((const float *)v136);
                    BOOL v159 = (const float *)(v136 + 4);
                    float32x4_t v160 = vaddq_f32(v145, v282.val[0]);
                    float32x4_t v161 = vaddq_f32(v146, v282.val[1]);
                    float32x4_t v162 = vaddq_f32(v147, v282.val[2]);
                    float32x4_t v163 = vaddq_f32(v148, v282.val[3]);
                    float32x4x4_t v282 = vld4q_f32(v159);
                    int64_t v136 = v159 + 16;
                    *char v149 = v155;
                    v149[1] = v160;
                    v149 += 2;
                    *id v150 = v156;
                    v150[1] = v161;
                    v150 += 2;
                    *char v151 = v157;
                    v151[1] = v162;
                    v151 += 2;
                    float32x4_t *v152 = v158;
                    v152[1] = v163;
                    v152 += 2;
                    --v153;
                  }
                  while (v153);
                }
                *char v149 = vaddq_f32(v145, (float32x4_t)v135);
                v149[1] = vaddq_f32(v145, v282.val[0]);
                v149 += 2;
                *id v150 = vaddq_f32(v146, v278.val[1]);
                v150[1] = vaddq_f32(v146, v282.val[1]);
                v150 += 2;
                *char v151 = vaddq_f32(v147, v278.val[2]);
                v151[1] = vaddq_f32(v147, v282.val[2]);
                v151 += 2;
                float32x4_t *v152 = vaddq_f32(v148, v278.val[3]);
                v152[1] = vaddq_f32(v148, v282.val[3]);
                v152 += 2;
              }
              int v164 = v144;
              if (v144)
              {
                do
                {
                  v149->f32[0] = *(float *)v119.i32 + *(float *)v136;
                  char v149 = (float32x4_t *)((char *)v149 + 4);
                  v150->f32[0] = *(float *)v118.i32 + *((float *)v136 + 1);
                  id v150 = (float32x4_t *)((char *)v150 + 4);
                  v151->f32[0] = *(float *)v120.i32 + *((float *)v136 + 2);
                  char v151 = (float32x4_t *)((char *)v151 + 4);
                  std::string::size_type v165 = v136 + 1;
                  v135.n128_f32[0] = *(float *)v121.i32 + *((float *)v136 + 3);
                  v152->i32[0] = v135.n128_u32[0];
                  std::string::size_type v152 = (float32x4_t *)((char *)v152 + 4);
                  ++v136;
                  --v164;
                }
                while (v164);
                int64_t v136 = v165;
              }
              v143 += 4 * v93;
              --v137;
            }
            while (v137);
          }
        }
      }
    }
    uint64_t v74 = v239;
    (*(void (**)(int *, uint64_t, long long *, __n128))(*(void *)v95 + 48))(v95, v96, &v270, v135);
    if (*((void *)&v270 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v270 + 1));
    }
    if (v242)
    {
      size_t v73 = v242;
LABEL_232:
      nitro::nitro_function::nitro_function(v73);
    }
LABEL_233:
    if (!v74) {
      return;
    }
    goto LABEL_234;
  }
  long long v26 = (char *)Espresso::HXEngine::blob_container::util_lock_pixel_buffer((Espresso::HXEngine::blob_container *)v24, *((CVPixelBufferRef *)v24 + 21), 0);
  int v27 = v24[3];
  int v28 = v24[2];
  uint64_t v30 = v29 - (int)v24[4] * (uint64_t)v28;
  uint64_t v31 = (uint64_t)&v23[3][-4 * (void)v23[2]];
  if (v28 >= 0) {
    int v32 = v24[2];
  }
  else {
    int v32 = v28 + 31;
  }
  int v33 = v32 >> 5;
  unsigned int v34 = v28 - (v32 & 0xFFFFFFE0);
  BOOL v35 = *v23;
  if (v246 == v244)
  {
    if (v27)
    {
      unsigned int v221 = v28 + 31;
      do
      {
        int v222 = v33;
        if (v221 >= 0x3F)
        {
          do
          {
            int8x16x4_t v280 = vld4q_s8(v35);
            long long v223 = v35 + 64;
            int8x16x4_t v284 = vld4q_s8(v223);
            BOOL v35 = v223 + 64;
            vst3q_s8(v26, *(int8x16x3_t *)v280.val[0].i8);
            v224 = v26 + 48;
            vst3q_s8(v224, *(int8x16x3_t *)v284.val[0].i8);
            long long v26 = v224 + 48;
            --v222;
          }
          while (v222);
        }
        for (unsigned int m = v34; m; --m)
        {
          char v226 = v35[2];
          *(_WORD *)long long v26 = *(_WORD *)v35;
          uint64_t v26[2] = v226;
          v26 += 3;
          v35 += 4;
        }
        v35 += v31;
        v26 += v30;
        --v27;
      }
      while (v27);
    }
  }
  else if (v27)
  {
    unsigned int v36 = v28 + 31;
    do
    {
      int v37 = v33;
      if (v36 >= 0x3F)
      {
        do
        {
          int8x16x4_t v277 = vld4q_s8(v35);
          std::vector<int> v38 = v35 + 64;
          int8x16x4_t v281 = vld4q_s8(v38);
          BOOL v35 = v38 + 64;
          v277.val[3] = v277.val[0];
          v277.val[0] = v277.val[2];
          v277.val[2] = v277.val[3];
          v281.val[3] = v281.val[0];
          v281.val[0] = v281.val[2];
          v281.val[2] = v281.val[3];
          vst3q_s8(v26, *(int8x16x3_t *)v277.val[0].i8);
          std::string v39 = v26 + 48;
          vst3q_s8(v39, *(int8x16x3_t *)v281.val[0].i8);
          long long v26 = v39 + 48;
          --v37;
        }
        while (v37);
      }
      for (unsigned int n = v34; n; --n)
      {
        char v41 = *v35;
        char v42 = v35[1];
        char *v26 = v35[2];
        v26[1] = v42;
        uint64_t v26[2] = v41;
        v26 += 3;
        v35 += 4;
      }
      v35 += v31;
      v26 += v30;
      --v27;
    }
    while (v27);
  }
  Espresso::HXEngine::blob_container::util_unlock_pixel_buffer(*((Espresso::HXEngine::blob_container **)v24 + 21), 0);
  uint64_t v74 = v17;
  if (v17) {
LABEL_234:
  }
    nitro::nitro_function::nitro_function(v74);
}

void sub_1927DB958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  __cxa_free_exception(v32);
  BOOL v35 = *(std::__shared_weak_count **)(v33 - 216);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::prepare_blob_for_network(uint64_t a1, uint64_t *a2, std::string::size_type a3, uint64_t a4, int a5)
{
  uint64_t v5 = *a2;
  if (!*(void *)(*a2 + 80))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    uint64_t v5 = *a2;
  }
  else
  {
    std::string v94 = *(std::string *)a3;
  }
  uint64_t v10 = (float *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v5 + 328, &v94);
  if ((float *)(v5 + 336) == v10)
  {
    int v87 = 0;
    float v11 = 1.0;
    float v15 = 0.0;
    int v14 = 0;
    int v12 = 0;
    float v13 = 0.0;
  }
  else
  {
    float v11 = v10[14];
    int v87 = *((_DWORD *)v10 + 17);
    float v13 = v10[18];
    int v12 = *((_DWORD *)v10 + 19);
    float v15 = v10[20];
    int v14 = *((_DWORD *)v10 + 21);
  }
  float __B = v11;
  if (fabsf(v11 + -1.0) > 0.00001)
  {
    uint64_t v16 = 0;
    vDSP_Length v17 = *(int *)(*(void *)a4 + 8);
    do
    {
      v17 *= *(int *)(*(void *)a4 + 12 + v16);
      v16 += 4;
    }
    while (v16 != 12);
    vDSP_vsmul(*(const float **)(*(void *)a4 + 24), 1, &__B, *(float **)(*(void *)a4 + 24), 1, v17);
    uint64_t v5 = *a2;
  }
  if (!v5)
  {
    unsigned int v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v36, "[Espresso] unexpected null");
    v36->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v36, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  int v19 = *(_DWORD *)(*(void *)a4 + 8);
  int v18 = *(_DWORD *)(*(void *)a4 + 12);
  uint64_t v20 = *(unsigned int *)(*(void *)a4 + 16);
  uint64_t v21 = *(unsigned int *)(*(void *)a4 + 20);
  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v5 + 136), (unsigned __int8 *)a3))
  {
    int v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(v37, &v92);
    v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v37, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v22 = *a2 + 136;
  v92.__r_.__value_.__r.__words[0] = a3;
  if (v19 != *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)a3, (long long **)&v92)+ 5)+ 8))
  {
    std::vector<int> v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v89, v19);
    std::string v39 = std::string::insert(&v89, 0, "[Espresso] wrong image size");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    char v41 = std::string::append(&v90, "/");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    uint64_t v43 = *a2 + 136;
    v88.__r_.__value_.__r.__words[0] = a3;
    long long v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, (unsigned __int8 *)a3, (long long **)&v88);
    std::to_string(&v88, *(_DWORD *)(*((void *)v44 + 5) + 8));
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v45 = &v88;
    }
    else {
      unint64_t v45 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    uint64_t v47 = std::string::append(&v91, (const std::string::value_type *)v45, size);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v38, &v92);
    v38->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v38, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v23 = *a2 + 136;
  v92.__r_.__value_.__r.__words[0] = a3;
  if (v18 != *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (unsigned __int8 *)a3, (long long **)&v92)+ 5)+ 12))
  {
    id v49 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v89, v18);
    long long v50 = std::string::insert(&v89, 0, "[Espresso] wrong image size");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    long long v52 = std::string::append(&v90, "/");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    uint64_t v54 = *a2 + 136;
    v88.__r_.__value_.__r.__words[0] = a3;
    int v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, (unsigned __int8 *)a3, (long long **)&v88);
    std::to_string(&v88, *(_DWORD *)(*((void *)v55 + 5) + 12));
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v56 = &v88;
    }
    else {
      int v56 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v57 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v57 = v88.__r_.__value_.__l.__size_;
    }
    int v58 = std::string::append(&v91, (const std::string::value_type *)v56, v57);
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v49, &v92);
    v49->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v49, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v24 = *a2 + 136;
  v92.__r_.__value_.__r.__words[0] = a3;
  if (v20 != *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)a3, (long long **)&v92)+ 5)+ 16))
  {
    __n128 v60 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v89, v20);
    __n128 v61 = std::string::insert(&v89, 0, "[Espresso] wrong image size");
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    __n128 v63 = std::string::append(&v90, "/");
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    uint64_t v65 = *a2 + 136;
    v88.__r_.__value_.__r.__words[0] = a3;
    id v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v65, (unsigned __int8 *)a3, (long long **)&v88);
    std::to_string(&v88, *(_DWORD *)(*((void *)v66 + 5) + 16));
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v67 = &v88;
    }
    else {
      size_t v67 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v88.__r_.__value_.__l.__size_;
    }
    unint64_t v69 = std::string::append(&v91, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v60, &v92);
    v60->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v60, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v25 = *a2 + 136;
  v92.__r_.__value_.__r.__words[0] = a3;
  int v26 = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (unsigned __int8 *)a3, (long long **)&v92)+ 5)+ 20);
  uint64_t v27 = *a2 + 136;
  v92.__r_.__value_.__r.__words[0] = a3;
  if (v21 != *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (unsigned __int8 *)a3, (long long **)&v92)+ 5)+ 24)* v26)
  {
    uint64_t v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v89, v21);
    uint64_t v72 = std::string::insert(&v89, 0, "[Espresso] wrong image size ");
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    uint64_t v74 = std::string::append(&v90, "/");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    uint64_t v76 = *a2 + 136;
    v88.__r_.__value_.__r.__words[0] = a3;
    int v77 = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v76, (unsigned __int8 *)a3, (long long **)&v88)+ 5)+ 20);
    uint64_t v78 = *a2 + 136;
    v88.__r_.__value_.__r.__words[0] = a3;
    unint64_t v79 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v78, (unsigned __int8 *)a3, (long long **)&v88);
    std::to_string(&v88, *(_DWORD *)(*((void *)v79 + 5) + 24) * v77);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v80 = &v88;
    }
    else {
      uint64_t v80 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v81 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v81 = v88.__r_.__value_.__l.__size_;
    }
    uint64_t v82 = std::string::append(&v91, (const std::string::value_type *)v80, v81);
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v71, &v92);
    v71->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v71, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (v87) {
    float v28 = v15;
  }
  else {
    float v28 = v13;
  }
  if (v87) {
    float v15 = v13;
  }
  if ((int)v20 >= 1)
  {
    int v86 = a5;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    vDSP_Length v31 = v18 * v19;
    uint64_t v84 = v18 * v19 * (int)v20;
    int v85 = v18 * v19;
    while (2)
    {
      switch((int)v30)
      {
        case 0:
          *(float *)&v92.__r_.__value_.__l.__data_ = v28;
          goto LABEL_30;
        case 1:
          LODWORD(v92.__r_.__value_.__l.__data_) = v12;
          goto LABEL_30;
        case 2:
          *(float *)&v92.__r_.__value_.__l.__data_ = v15;
          goto LABEL_30;
        case 3:
          LODWORD(v92.__r_.__value_.__l.__data_) = v14;
LABEL_30:
          if ((int)v21 >= 1)
          {
            uint64_t v32 = v29;
            uint64_t v33 = v21;
            do
            {
              vDSP_vsadd((const float *)(*(void *)(*(void *)a4 + 24) + v32), 1, (const float *)&v92, (float *)(*(void *)(*(void *)a4 + 24) + v32), 1, v31);
              v32 += 4 * v84;
              --v33;
            }
            while (v33);
          }
          ++v30;
          v29 += 4 * v31;
          if (v30 == v20) {
            goto LABEL_34;
          }
          continue;
        default:
LABEL_34:
          if (v87 != v86 && (int)v20 >= 3 && (int)v21 >= 1)
          {
            uint64_t v34 = 0;
            do
            {
              vDSP_vswap((float *)(*(void *)(*(void *)a4 + 24) + v34), 1, (float *)(*(void *)(*(void *)a4 + 24) + v34 + 8 * v85), 1, v31);
              v34 += 4 * v84;
              --v21;
            }
            while (v21);
          }
          break;
      }
      break;
    }
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
}

void sub_1927DC434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v44 & 1) == 0)
    {
LABEL_14:
      if (*(char *)(v46 - 137) < 0) {
        operator delete(*(void **)(v46 - 160));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v45);
  goto LABEL_14;
}

vImage_Error Espresso::crop_image_to_square_8888(Espresso *this, vImage_Buffer *dest, vImage_Buffer *a3)
{
  unint64_t v6 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  if (!dest->data) {
    MEMORY[0x192FF2B50](dest, (int)a3, (int)a3, 32, 0);
  }
  if (v5 >= v6) {
    int v7 = v6;
  }
  else {
    int v7 = v5;
  }
  size_t v9 = *((void *)this + 3);
  int v8 = v6 - v5;
  v11.std::string::pointer data = (void *)(*(void *)this
                    + v9 * ((v8 / 2) & ~((v8 + (v8 < 0)) >> 31))
                    + 4 * ((v8 / -2) & ~((v8 / -2) >> 31)));
  v11.height = v7;
  v11.width = v7;
  v11.rowBytes = v9;
  return vImageScale_ARGB8888(&v11, dest, 0, 0);
}

vImage_Error Espresso::crop_image_to_square_Planar8(Espresso *this, vImage_Buffer *dest, vImage_Buffer *a3)
{
  unint64_t v6 = *((void *)this + 1);
  unint64_t v5 = *((void *)this + 2);
  if (!dest->data) {
    MEMORY[0x192FF2B50](dest, (int)a3, (int)a3, 8, 0);
  }
  if (v5 >= v6) {
    int v7 = v6;
  }
  else {
    int v7 = v5;
  }
  size_t v8 = *((void *)this + 3);
  v10.std::string::pointer data = (void *)(*(void *)this
                    + v8 * ((((int)v6 - (int)v5) / 2) & ~((int)(v6 - v5 + ((int)v6 - (int)v5 < 0)) >> 31))
                    + ((((int)v6 - (int)v5) / -2) & ~((((int)v6 - (int)v5) / -2) >> 31)));
  v10.height = v7;
  v10.width = v7;
  v10.rowBytes = v8;
  return vImageScale_Planar8(&v10, dest, 0, 0);
}

id Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::transformkname(Espresso::MetalLowmemEngine::convolution_grad_kernel_metal *this, NSString *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = [(NSString *)v3 stringByReplacingOccurrencesOfString:@"morechan_" withString:&stru_1EE39BDB0];
  unint64_t v5 = [v4 stringByReplacingOccurrencesOfString:@"convolution_" withString:@"grad_convolution_"];

  if (*((int *)this + 90) >= 2)
  {
    uint64_t v6 = [v5 stringByAppendingString:@"_backwardstride"];

    unint64_t v5 = (void *)v6;
  }

  return v5;
}

void sub_1927DC7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::get_params(Espresso::MetalLowmemEngine::convolution_grad_kernel_metal *this)
{
  return (uint64_t)this + 784;
}

uint64_t Espresso::abstract_kernel_with_weights_grad_::outputs_gradient(Espresso::abstract_kernel_with_weights_grad_ *this)
{
  return 0;
}

const char *Espresso::generic_convolution_grad_kernel::kernel_type_str(Espresso::generic_convolution_grad_kernel *this)
{
  return "convolution_grad";
}

void Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::clear_weights(Espresso::MetalLowmemEngine::convolution_grad_kernel_metal *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100](v2);
  uint64_t v3 = (void *)*((void *)this + 96);
  *((void *)this + 96) = 0;
}

void Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::__launch(uint64_t a1, id **a2, _DWORD ***a3, const void ***a4)
{
  uint64_t v5 = *(void *)(a1 + 280);
  if (!*(void *)v5
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "convolution_grad_kernel not configured");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  vImage_Buffer v10 = v9;
  vImage_Buffer v11 = *(std::__shared_weak_count **)(v5 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a1 + 8);
  id v13 = (*a2)[19];
  id v14 = v10[20];
  float v15 = v14;
  int v16 = *(_DWORD *)(a1 + 344);
  int v18 = v16 - 1;
  BOOL v17 = v16 < 1;
  int v19 = v16 + 2;
  if (!v17) {
    int v19 = v18;
  }
  int v20 = *(_DWORD *)(a1 + 348);
  int v21 = v20 - 1;
  BOOL v17 = v20 < 1;
  int v22 = v20 + 2;
  if (!v17) {
    int v22 = v21;
  }
  signed int v23 = ((4 * v19) & 0xFFFFFFF0) + 16 + (((4 * v19) & 0xFFFFFFF0) + 16) * (v22 >> 2);
  if (*(int *)(a1 + 420) <= 1) {
    int v24 = 1;
  }
  else {
    int v24 = *(_DWORD *)(a1 + 420);
  }
  uint64_t v25 = *(int *)(a1 + 352) * (uint64_t)(v23 / v24) * *(int *)(a1 + 356);
  if (!*(void *)(a1 + 768))
  {
    int v26 = *(_DWORD *)(a1 + 472);
    id v60 = v14;
    if (v26)
    {
      if (v26 != 1)
      {
        std::string::size_type v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v65, *(_DWORD *)(a1 + 472));
        int v58 = std::string::insert(&v65, 0, "Compute path no supported ");
        long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v57, &v66);
        __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v27 = 2;
    }
    else
    {
      uint64_t v27 = 4;
    }
    float v28 = *(const void **)(a1 + 8);
    if (!v28
    {
      int v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v55, "Espresso: wrong_context_type");
      v55->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    uint64_t v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    vDSP_Length v31 = (void *)v29[18];
    if ((unint64_t)(v27 * v25) <= 0x10) {
      uint64_t v32 = 16;
    }
    else {
      uint64_t v32 = v27 * v25;
    }
    uint64_t v33 = [v31 newBufferWithLength:v32 options:0];
    uint64_t v34 = *(void **)(a1 + 768);
    *(void *)(a1 + 768) = v33;

    float v15 = v60;
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
  }
  if (!*(void *)(a1 + 776))
  {
    int v35 = *(_DWORD *)(a1 + 344);
    int v36 = v35 - 1;
    BOOL v17 = v35 < 1;
    int v37 = v35 + 2;
    if (!v17) {
      int v37 = v36;
    }
    int v38 = *(_DWORD *)(a1 + 348);
    int v39 = v38 - 1;
    BOOL v17 = v38 < 1;
    int v40 = v38 + 2;
    if (!v17) {
      int v40 = v39;
    }
    int v41 = (v40 >> 2) + 1;
    int v42 = *(_DWORD *)(a1 + 420);
    if (v42 <= 1) {
      int v42 = 1;
    }
    LODWORD(v66.__r_.__value_.__l.__data_) = (v37 >> 2) + 1;
    HIDWORD(v66.__r_.__value_.__r.__words[0]) = v41 / v42;
    v66.__r_.__value_.__l.__size_ = *(void *)(a1 + 352);
    LODWORD(v66.__r_.__value_.__r.__words[2]) = v25;
    uint64_t v43 = *(const void **)(a1 + 8);
    if (!v43
    {
      int v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v56, "Espresso: wrong_context_type");
      v56->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    unint64_t v45 = *(std::__shared_weak_count **)(a1 + 16);
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v46 = [v44[18] newBufferWithBytes:&v66 length:20 options:0];
    uint64_t v47 = *(void **)(a1 + 776);
    *(void *)(a1 + 776) = v46;

    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
  }
  int v48 = *(_DWORD *)(a1 + 472);
  if (v48)
  {
    id v49 = 0;
  }
  else
  {
    uint64_t v50 = [*(id *)(v12 + 160) kernelForFunction:"transpose_conv_weights_f32" cacheString:0 withConstants:0];
    int v48 = *(_DWORD *)(a1 + 472);
    id v49 = (void *)v50;
  }
  if (v48 == 1)
  {
    uint64_t v51 = [*(id *)(v12 + 160) kernelForFunction:"transpose_conv_weights_f16" cacheString:0 withConstants:0];

    id v49 = (void *)v51;
  }
  if (!v49)
  {
    uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Kernel not found");
    __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v13 setComputePipelineState:v49];
  [v13 setBuffer:*(void *)(a1 + 768) offset:0 atIndex:0];
  [v13 setBuffer:v15 offset:0 atIndex:1];
  [v13 setBuffer:*(void *)(a1 + 776) offset:0 atIndex:2];
  int v52 = v25 - 1;
  if ((int)v25 < 1) {
    int v52 = v25 + 62;
  }
  uint64_t v63 = (v52 >> 6) + 1;
  int64x2_t v64 = vdupq_n_s64(1uLL);
  long long v61 = xmmword_192DCA430;
  uint64_t v62 = 1;
  [v13 dispatchThreadgroups:&v63 threadsPerThreadgroup:&v61];
  objc_storeStrong((id *)(a1 + 504), *(id *)(a1 + 768));
  objc_storeStrong((id *)(a1 + 488), *(id *)(a1 + 768));
  objc_storeStrong((id *)(a1 + 496), *(id *)(a1 + 768));
  objc_storeStrong((id *)(a1 + 520), *(id *)(a1 + 768));
  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::__launch(a1, a2, a3, a4);

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_1927DCE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v32 & 1) == 0)
    {
LABEL_8:

      if (v29) {
        nitro::nitro_function::nitro_function(v29);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

void Espresso::MetalLowmemEngine::convolution_grad_kernel_metal::~convolution_grad_kernel_metal(id *this)
{
  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::~convolution_kernel_metal_base((uint64_t)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::~convolution_kernel_metal_base((uint64_t)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::convolution_uniforms,Espresso::abstract_kernel_with_weights_grad_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t Espresso::generic_convolution_weights_grad_kernel::outputs_gradient(Espresso::generic_convolution_weights_grad_kernel *this)
{
  return 1;
}

const char *Espresso::generic_convolution_weights_grad_kernel::kernel_type_str(Espresso::generic_convolution_weights_grad_kernel *this)
{
  return "convolution_weights_grad";
}

void Espresso::MetalLowmemEngine::convolution_weights_grad_kernel_metal::blob_options(char a1@<W1>, void *a2@<X8>)
{
  if (a1)
  {
    uint64_t v4 = operator new(0x78uLL);
    v4[1] = 0;
    v4[2] = 0;
    *uint64_t v4 = &unk_1EE385C88;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    v4[13] = 0;
    v4[14] = 0;
    *((_DWORD *)v4 + 12) = 1065353216;
    v4[7] = 0x1FFFFFFFFLL;
    v4[12] = 0;
    v4[8] = 0;
    v4[9] = 0;
    *((unsigned char *)v4 + 88) = 0;
    v4[10] = 0;
    v4[3] = &unk_1EE349D58;
    *a2 = v4 + 3;
    a2[1] = v4;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void Espresso::MetalLowmemEngine::convolution_weights_grad_kernel_metal::__launch(int32x2_t *a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  int32x2_t v7 = a1[1];
  id v8 = *(id *)(*(void *)a2 + 152);
  size_t v9 = *a4;
  vImage_Buffer v10 = **a4;
  if (!v10)
  {
    vImage_Buffer v11 = 0;
    goto LABEL_6;
  }
  if (!v11)
  {
LABEL_6:
    uint64_t v12 = 0;
    goto LABEL_7;
  }
  uint64_t v12 = (std::__shared_weak_count *)v9[1];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v9 = *a4;
  }
LABEL_7:
  id v13 = v9[2];
  if (!v13)
  {
    id v14 = 0;
    goto LABEL_12;
  }
  if (!v14)
  {
LABEL_12:
    float v15 = 0;
    goto LABEL_13;
  }
  float v15 = (std::__shared_weak_count *)v9[3];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v16 = *a3;
  if (!*(void *)v16)
  {
    BOOL v17 = 0;
    goto LABEL_18;
  }
  if (!v17)
  {
LABEL_18:
    int v18 = 0;
    goto LABEL_19;
  }
  int v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  int v19 = a1[49].i16[3];
  v39[0] = a1[49].i16[2];
  v39[1] = v19;
  int v20 = a1[44].i32[0];
  if ((a1[47].i16[0] & 0xFFFE) == 2)
  {
    int v21 = 0;
    int v22 = 0;
    int v23 = a1[44].i32[1];
  }
  else
  {
    if (v20 >= 0) {
      int v24 = a1[44].i32[0];
    }
    else {
      int v24 = v20 + 1;
    }
    int v21 = v24 >> 1;
    int v23 = a1[44].i32[1];
    if (v23 >= 0) {
      int v25 = a1[44].i32[1];
    }
    else {
      int v25 = v23 + 1;
    }
    int v22 = v25 >> 1;
  }
  v39[2] = v21;
  _OWORD v39[3] = v22;
  int32x2_t v26 = vadd_s32(a1[43], (int32x2_t)-1);
  int32x2_t v40 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v26, (uint32x2_t)vcltz_s32(v26), 0x1EuLL), 2uLL);
  int v41 = v11[5];
  int32x2_t v42 = (int32x2_t)__PAIR64__(v23, v20);
  *(void *)&long long v27 = *((void *)v11 + 1);
  *((void *)&v27 + 1) = v14[1];
  long long v43 = v27;
  if (!*(void *)&a1[59])
  {
    uint64_t v28 = [*(id *)(*(void *)&v7 + 144) newBufferWithBytes:v39 length:52 options:0];
    uint64_t v29 = (void *)a1[59];
    a1[59] = (int32x2_t)v28;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v11 + 32))(v11))
  {
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = [*(id *)(*(void *)&v7 + 160) kernelForFunction:"conv_weights_grad_f32" cacheString:0 withConstants:0];
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v11 + 32))(v11) == 1)
  {
    uint64_t v31 = [*(id *)(*(void *)&v7 + 160) kernelForFunction:"conv_weights_grad_f16" cacheString:0 withConstants:0];

    uint64_t v30 = (void *)v31;
  }
  if (!v30)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v8 setComputePipelineState:v30];
  [v8 setBuffer:*(void *)&a1[59] offset:0 atIndex:0];
  [v8 setBuffer:v17[20] offset:0 atIndex:1];
  [v8 setTexture:*((void *)v11 + 21) atIndex:0];
  [v8 setTexture:v14[21] atIndex:1];
  int32x2_t v32 = vmul_s32(v42, vrev64_s32(v40));
  int8x8_t v33 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x400000004, v32), (int8x8_t)0x200000002, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x1000000010, v32), (int8x8_t)0x400000004, (int8x8_t)0x800000008));
  *(void *)&long long v34 = v33.u32[0];
  *((void *)&v34 + 1) = v33.u32[1];
  v38[0] = (v32.i32[0] - 1) / v33.i32[0] + 1;
  v38[1] = (v32.i32[1] - 1) / v33.i32[1] + 1;
  uint64_t v38[2] = 1;
  long long v36 = v34;
  uint64_t v37 = 1;
  [v8 dispatchThreadgroups:v38 threadsPerThreadgroup:&v36];

  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_1927DD4C8(_Unwind_Exception *a1)
{
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    if (!v3)
    {
LABEL_3:
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v3);
  if (!v2)
  {
LABEL_5:

    _Unwind_Resume(a1);
  }
LABEL_4:
  nitro::nitro_function::nitro_function(v2);
  goto LABEL_5;
}

void Espresso::MetalLowmemEngine::convolution_weights_grad_kernel_metal::~convolution_weights_grad_kernel_metal(id *this)
{
  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::bias_params,Espresso::abstract_kernel_with_weights_grad_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t Espresso::generic_bias_grad_kernel::outputs_gradient(Espresso::generic_bias_grad_kernel *this)
{
  return 1;
}

const char *Espresso::generic_bias_grad_kernel::kernel_type_str(Espresso::generic_bias_grad_kernel *this)
{
  return "bias_grad";
}

char *Espresso::MetalLowmemEngine::bias_grad_kernel_metal::blob_options@<X0>(char *this@<X0>, char a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    uint64_t v4 = this;
    this = (char *)operator new(0x78uLL);
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *(void *)this = &unk_1EE385C88;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((void *)this + 13) = 0;
    *((void *)this + 14) = 0;
    *((_DWORD *)this + 12) = 1065353216;
    *((void *)this + 7) = 0x1FFFFFFFFLL;
    *((void *)this + 12) = 0;
    *((void *)this + 8) = 0;
    *((void *)this + 9) = 0;
    this[88] = 0;
    *((void *)this + 10) = 0;
    *((void *)this + 3) = &unk_1EE349D58;
    if (v4[320]) {
      this[32] = 1;
    }
    *a3 = this + 24;
    a3[1] = this;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

void Espresso::MetalLowmemEngine::bias_grad_kernel_metal::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  id v8 = *(id *)(*(void *)a2 + 152);
  uint64_t v9 = *a4;
  if (!*(void *)v9)
  {
    vImage_Buffer v10 = 0;
    goto LABEL_6;
  }
  if (!v10)
  {
LABEL_6:
    vImage_Buffer v11 = 0;
    goto LABEL_7;
  }
  vImage_Buffer v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v12 = *a3;
  if (!*(void *)v12)
  {
    id v13 = 0;
    goto LABEL_12;
  }
  if (!v13)
  {
LABEL_12:
    id v14 = 0;
    goto LABEL_13;
  }
  id v14 = *(std::__shared_weak_count **)(v12 + 8);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  int v15 = v10[4];
  int v16 = v10[5];
  int v18 = v15 - 1;
  BOOL v17 = v15 < 1;
  int v19 = v15 + 2;
  if (!v17) {
    int v19 = v18;
  }
  v29[0] = (v19 >> 2) + 1;
  v29[1] = v16;
  uint64_t v30 = *((void *)v10 + 1);
  uint64_t v31 = 0x100000001;
  if (!*(void *)(a1 + 312))
  {
    uint64_t v20 = [*(id *)(v7 + 144) newBufferWithBytes:v29 length:24 options:0];
    int v21 = *(void **)(a1 + 312);
    *(void *)(a1 + 312) = v20;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v10 + 32))(v10))
  {
    int v22 = 0;
  }
  else
  {
    int v22 = [*(id *)(v7 + 160) kernelForFunction:"bias_grad_f32_11" cacheString:0 withConstants:0];
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v10 + 32))(v10) == 1)
  {
    uint64_t v23 = [*(id *)(v7 + 160) kernelForFunction:"bias_grad_f16_11" cacheString:0 withConstants:0];

    int v22 = (void *)v23;
  }
  if (!v22)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v8 setComputePipelineState:v22];
  [v8 setBuffer:*(void *)(a1 + 312) offset:0 atIndex:0];
  [v8 setBuffer:v13[20] offset:0 atIndex:1];
  [v8 setTexture:*((void *)v10 + 21) atIndex:0];
  uint64_t v27 = v29[0];
  int64x2_t v28 = vdupq_n_s64(1uLL);
  int64x2_t v25 = v28;
  uint64_t v26 = 1;
  [v8 dispatchThreadgroups:&v27 threadsPerThreadgroup:&v25];

  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_1927DDA20(_Unwind_Exception *a1)
{
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::bias_grad_kernel_metal::~bias_grad_kernel_metal(id *this)
{
  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::pool_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_pool_grad_kernel::kernel_type_str(Espresso::generic_pool_grad_kernel *this)
{
  return "pool_grad";
}

void Espresso::MetalLowmemEngine::pool_grad_kernel_metal::__launch(uint64_t a1, uint64_t a2, const void ***a3, int32x2_t ***a4)
{
  long long v61 = a4;
  uint64_t v7 = *a4;
  id v8 = **a4;
  __int32 v9 = v8[1].i32[0];
  __int32 v10 = v8[1].i32[1];
  __int32 v11 = v8[2].i32[1];
  if (*(_WORD *)(a1 + 348)) {
    int v12 = *(unsigned __int16 *)(a1 + 348);
  }
  else {
    int v12 = v8[2].i32[0];
  }
  if (v13 && (id v14 = (std::__shared_weak_count *)v7[1]) != 0)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    id v62 = v13[21];
    nitro::nitro_function::nitro_function(v14);
  }
  else
  {
    id v62 = v13[21];
  }
  int v15 = *a3;
  BOOL v17 = (std::__shared_weak_count *)v15[1];
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    id v18 = v16[21];
    nitro::nitro_function::nitro_function(v17);
  }
  else
  {
    id v18 = v16[21];
  }
  int v19 = (int *)(a1 + 280);
  uint64_t v20 = *(id **)(a1 + 8);
  id v21 = *(id *)(*(void *)a2 + 152);
  int32x2_t v22 = *(int32x2_t *)((char *)**a3 + 8);
  int32x2_t v63 = v22;
  if (*(_DWORD *)(a1 + 364) == v11
    && *(_DWORD *)(a1 + 376) == v9
    && *(_DWORD *)(a1 + 380) == v10
    && *(_DWORD *)(a1 + 384) == v12
    && *(void *)(a1 + 392)
    && *(void *)(a1 + 356) == *(void *)&v22)
  {
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 376) = v9;
  *(_DWORD *)(a1 + 380) = v10;
  *(_DWORD *)(a1 + 384) = v12;
  int v23 = *(__int16 *)(a1 + 316);
  if (v23 == 4) {
    goto LABEL_20;
  }
  if (v23 == 2)
  {
    int32x2_t v27 = 0;
LABEL_23:
    int32x2_t v24 = v63;
    goto LABEL_24;
  }
  if (v23 != 1)
  {
    v22.i16[0] = *(_WORD *)(a1 + 324);
    v22.i16[2] = *(_WORD *)(a1 + 328);
    int32x2_t v27 = vshr_n_s32(vshl_n_s32(v22, 0x10uLL), 0x10uLL);
    goto LABEL_23;
  }
LABEL_20:
  int32x2_t v24 = v22;
  int32x2_t v25 = vmax_s32(vmla_s32(vsub_s32(*(int32x2_t *)(a1 + 284), v22), vadd_s32((**v61)[1], (int32x2_t)-1), *(int32x2_t *)(a1 + 296)), 0);
  int32x2_t v26 = (int32x2_t)vshr_n_u32((uint32x2_t)v25, 1uLL);
  int32x2_t v27 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 316) == 1), 0x1FuLL)), (int8x8_t)v26, (int8x8_t)vsub_s32(v25, v26));
LABEL_24:
  *(int32x2_t *)(a1 + 368) = v27;
  *(int32x2_t *)(a1 + 356) = v24;
  int v28 = v12 - 1;
  if (v12 < 1) {
    int v28 = v12 + 2;
  }
  *(_DWORD *)(a1 + 388) = (v28 >> 2) + 1;
  *(_DWORD *)(a1 + 364) = v11;
  uint64_t v29 = objc_msgSend(v20[18], "newBufferWithBytes:length:options:", a1 + 280, 112, 0, v61);
  uint64_t v30 = *(void **)(a1 + 392);
  *(void *)(a1 + 392) = v29;

LABEL_27:
  int v31 = *v19;
  if (!*v19)
  {
    if ([v18 pixelFormat] != 115)
    {
      if ([v18 pixelFormat] == 125)
      {
        int8x8_t v33 = "grad_avg_pool_f32_pack";
LABEL_37:
        uint64_t v34 = objc_msgSend(v20[20], "kernelForFunction:cacheString:withConstants:", v33, 0, 0, v61);
        goto LABEL_41;
      }
      if ([v18 pixelFormat] != 72) {
        goto LABEL_79;
      }
    }
    int8x8_t v33 = "grad_avg_pool_f16_pack";
    goto LABEL_37;
  }
  if (v31 != 1)
  {
    if (v31 == 2)
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "not implemented");
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if ([v18 pixelFormat] == 115)
  {
LABEL_39:
    int32x2_t v32 = @"grad_max_pool_f16_pack";
    goto LABEL_40;
  }
  if ([v18 pixelFormat] != 125)
  {
    if ([v18 pixelFormat] == 72) {
      goto LABEL_39;
    }
LABEL_79:
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_80:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int32x2_t v32 = @"grad_max_pool_f32_pack";
LABEL_40:
  uint64_t v34 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v20, &v32->isa);
LABEL_41:
  int v35 = (void *)v34;
  if (!v34) {
    goto LABEL_79;
  }
  [v21 setComputePipelineState:v34];
  [v21 setTexture:v18 atIndex:0];
  [v21 setTexture:v62 atIndex:1];
  if (*v19 == 1)
  {
    long long v36 = *v61;
    int v38 = (std::__shared_weak_count *)v36[3];
    if (v38)
    {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      id v39 = v37[21];
      nitro::nitro_function::nitro_function(v38);
    }
    else
    {
      id v39 = v37[21];
    }
    objc_msgSend(v21, "setTexture:atIndex:", v39, 2, v61);
    if ([v39 pixelFormat] != 124)
    {
      id v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v60, "Invalid texture");
      __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  objc_msgSend(v21, "setBuffer:offset:atIndex:", *(void *)(a1 + 392), 0, 0, v61);
  if (v63.i32[0] > 3 || v63.i32[1] > 3)
  {
    int v48 = v63.i32[1] - 1;
    if (v63.i32[0] > 11 || v63.i32[1] > 11)
    {
      __int32 v56 = v63.i32[0] - 1;
      int v57 = v12 - 1;
      if (v12 < 1) {
        int v57 = v12 + 2;
      }
      uint64_t v58 = v11 + v11 * (v57 >> 2);
      if (v63.i32[0] > 31 || v63.i32[1] > 31)
      {
        if (v48 < 0) {
          int v48 = v63.i32[1] + 14;
        }
        v65[0] = v56 / 16 + 1;
        v65[1] = (v48 >> 4) + 1;
        std::string v65[2] = v58;
        uint64_t v64 = 16;
        int64x2_t v45 = (int64x2_t)xmmword_192DCA1C0;
        uint64_t v46 = (int64x2_t *)v65;
        uint64_t v47 = &v64;
      }
      else
      {
        if (v48 < 0) {
          int v48 = v63.i32[1] + 6;
        }
        v67[0] = v56 / 8 + 1;
        v67[1] = (v48 >> 3) + 1;
        v67[2] = v58;
        uint64_t v66 = 8;
        int64x2_t v45 = (int64x2_t)xmmword_192DCA1D0;
        uint64_t v46 = (int64x2_t *)v67;
        uint64_t v47 = &v66;
      }
    }
    else
    {
      int v49 = v63.i32[0] - 1;
      if (v63.i32[0] < 1) {
        int v49 = v63.i32[0] + 2;
      }
      uint64_t v50 = (v49 >> 2) + 1;
      if (v48 < 0) {
        int v48 = v63.i32[1] + 2;
      }
      uint64_t v51 = (v48 >> 2) + 1;
      int v52 = v12 - 1;
      if (v12 < 1) {
        int v52 = v12 + 2;
      }
      int v53 = v11 + v11 * (v52 >> 2);
      int v54 = v53 - 1;
      BOOL v42 = v53 < 1;
      int v55 = v53 + 2;
      if (!v42) {
        int v55 = v54;
      }
      v69[0] = v50;
      v69[1] = v51;
      _OWORD v69[2] = (v55 >> 2) + 1;
      uint64_t v68 = 4;
      int64x2_t v45 = vdupq_n_s64(4uLL);
      uint64_t v46 = (int64x2_t *)v69;
      uint64_t v47 = &v68;
    }
  }
  else
  {
    int v40 = v12 - 1;
    if (v12 < 1) {
      int v40 = v12 + 2;
    }
    int v41 = v11 + v11 * (v40 >> 2);
    int v43 = v41 - 1;
    BOOL v42 = v41 < 1;
    int v44 = v41 + 14;
    if (!v42) {
      int v44 = v43;
    }
    int64x2_t v71 = vdupq_n_s64(1uLL);
    uint64_t v72 = (v44 >> 4) + 1;
    uint64_t v70 = v63.i32[0];
    int64x2_t v45 = vdupq_n_s64(0x10uLL);
    v45.i64[0] = v63.i32[1];
    uint64_t v46 = &v71;
    uint64_t v47 = &v70;
  }
  *(int64x2_t *)(v47 + 1) = v45;
  objc_msgSend(v21, "dispatchThreadgroups:threadsPerThreadgroup:", v46);
}

void sub_1927DE2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  __cxa_free_exception(v14);

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::pool_grad_kernel_metal::~pool_grad_kernel_metal(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_grad_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

const char *Espresso::generic_batchnorm_grad_kernel::kernel_type_str(Espresso::generic_batchnorm_grad_kernel *this)
{
  return "batchnorm_grad";
}

void Espresso::MetalLowmemEngine::batchnorm_grad_kernel_metal::__launch()
{
  exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1927DE408(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::batchnorm_grad_kernel_metal::~batchnorm_grad_kernel_metal(id *this)
{
  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::MetalLowmemEngine::nonlinearity_kernel_metal::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  id v8 = *a4;
  __int32 v10 = (std::__shared_weak_count *)v8[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    id v39 = v9[21];
    nitro::nitro_function::nitro_function(v10);
  }
  else
  {
    id v39 = v9[21];
  }
  __int32 v11 = *a3;
  id v13 = (std::__shared_weak_count *)v11[1];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    id v14 = v12[21];
    nitro::nitro_function::nitro_function(v13);
  }
  else
  {
    id v14 = v12[21];
  }
  int v15 = *(id **)(a1 + 8);
  id v16 = *(id *)(*(void *)a2 + 152);
  BOOL v17 = **a3;
  int v18 = v17[4];
  int v19 = v17[5];
  int v20 = v18 - 1;
  BOOL v34 = v18 < 1;
  int v21 = v18 + 2;
  if (!v34) {
    int v21 = v20;
  }
  int v22 = (v21 >> 2) + 1;
  int v23 = v17[2];
  int v24 = v17[3];
  int32x2_t v25 = (_DWORD *)(a1 + 304);
  if (*(_DWORD *)(a1 + 336) != v19
    || *(_DWORD *)(a1 + 328) != v24
    || v23 != *(_DWORD *)(a1 + 324)
    || !*(void *)(a1 + 392))
  {
    *(_DWORD *)(a1 + 328) = v24;
    *(_DWORD *)(a1 + 3std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v23;
    *(_DWORD *)(a1 + 332) = v22;
    *(_DWORD *)(a1 + 336) = v19;
    uint64_t v26 = [v15[18] newBufferWithBytes:a1 + 304 length:36 options:0];
    int32x2_t v27 = *(void **)(a1 + 392);
    *(void *)(a1 + 392) = v26;
  }
  int v28 = &stru_1EE39BDB0;
  if (*v25 == 1) {
    int v28 = @"tanh_";
  }
  if (*v25) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = @"relu_";
  }
  if ((*(unsigned int (**)(const void *))(*(void *)**a4 + 32))(**a4) == 1) {
    uint64_t v30 = @"f16";
  }
  else {
    uint64_t v30 = @"f32";
  }
  int v31 = [(__CFString *)v29 stringByAppendingString:v30];
  int32x2_t v32 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v15, v31);
  if (!v32)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v16 setComputePipelineState:v32];
  [v16 setTexture:v14 atIndex:0];
  [v16 setTexture:v39 atIndex:1];
  [v16 setBuffer:*(void *)(a1 + 392) offset:0 atIndex:0];
  int v33 = v19 * v24;
  BOOL v34 = v22 * v23 < 16 || v33 < 16;
  if (v34) {
    uint64_t v35 = 4;
  }
  else {
    uint64_t v35 = 8;
  }
  int v36 = v33 - 1;
  BOOL v34 = v33 < 1;
  int v37 = v33 + 6;
  if (!v34) {
    int v37 = v36;
  }
  v42[0] = (v22 * v23 - 1) / (int)v35 + 1;
  v42[1] = (v37 >> 3) + 1;
  v42[2] = 1;
  uint64_t v40 = v35;
  long long v41 = xmmword_192DCA1D0;
  [v16 dispatchThreadgroups:v42 threadsPerThreadgroup:&v40];
}

void sub_1927DE8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  __cxa_free_exception(v14);

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::nonlinearity_kernel_metal::~nonlinearity_kernel_metal(id *this)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::activation_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_activation_grad_kernel::kernel_type_str(Espresso::generic_activation_grad_kernel *this)
{
  return "activation_grad";
}

void Espresso::MetalLowmemEngine::nonlinearity_grad_metal::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  id v8 = *a4;
  __int32 v10 = (std::__shared_weak_count *)v8[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    id v44 = v9[21];
    nitro::nitro_function::nitro_function(v10);
  }
  else
  {
    id v44 = v9[21];
  }
  __int32 v11 = *a4;
  id v13 = (std::__shared_weak_count *)v11[3];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    id v42 = v12[21];
    nitro::nitro_function::nitro_function(v13);
  }
  else
  {
    id v42 = v12[21];
  }
  id v14 = *a3;
  id v16 = (std::__shared_weak_count *)v14[1];
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    id v17 = v15[21];
    nitro::nitro_function::nitro_function(v16);
  }
  else
  {
    id v17 = v15[21];
  }
  int v18 = *(id **)(a1 + 8);
  id v19 = *(id *)(*(void *)a2 + 152);
  int v20 = **a3;
  int v21 = v20[4];
  int v22 = v20[5];
  int v23 = v21 - 1;
  BOOL v37 = v21 < 1;
  int v24 = v21 + 2;
  if (!v37) {
    int v24 = v23;
  }
  int v25 = (v24 >> 2) + 1;
  int v27 = v20[2];
  int v26 = v20[3];
  int v28 = (_DWORD *)(a1 + 280);
  if (*(_DWORD *)(a1 + 312) != v22
    || *(_DWORD *)(a1 + 304) != v26
    || v27 != *(_DWORD *)(a1 + 300)
    || !*(void *)(a1 + 320))
  {
    *(_DWORD *)(a1 + 304) = v26;
    *(_DWORD *)(a1 + 300) = v27;
    *(_DWORD *)(a1 + 308) = v25;
    *(_DWORD *)(a1 + 312) = v22;
    uint64_t v29 = objc_msgSend(v18[18], "newBufferWithBytes:length:options:", a1 + 280, 36, 0, v42);
    uint64_t v30 = *(void **)(a1 + 320);
    *(void *)(a1 + 320) = v29;
  }
  int v31 = &stru_1EE39BDB0;
  if (*v28 == 1) {
    int v31 = @"tanh_grad_";
  }
  if (*v28) {
    int32x2_t v32 = v31;
  }
  else {
    int32x2_t v32 = @"relu_grad_";
  }
  if ((*(unsigned int (**)(const void *))(*(void *)**a4 + 32))(**a4) == 1) {
    int v33 = @"f16";
  }
  else {
    int v33 = @"f32";
  }
  -[__CFString stringByAppendingString:](v32, "stringByAppendingString:", v33, v42);
  BOOL v34 = (NSString *)objc_claimAutoreleasedReturnValue();
  uint64_t v35 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v18, v34);
  if (!v35)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v19 setComputePipelineState:v35];
  [v19 setTexture:v17 atIndex:0];
  [v19 setTexture:v44 atIndex:1];
  [v19 setTexture:v43 atIndex:2];
  [v19 setBuffer:*(void *)(a1 + 320) offset:0 atIndex:0];
  int v36 = v22 * v26;
  BOOL v37 = v25 * v27 < 16 || v36 < 16;
  if (v37) {
    uint64_t v38 = 4;
  }
  else {
    uint64_t v38 = 8;
  }
  int v39 = v36 - 1;
  BOOL v37 = v36 < 1;
  int v40 = v36 + 6;
  if (!v37) {
    int v40 = v39;
  }
  v47[0] = (v25 * v27 - 1) / (int)v38 + 1;
  v47[1] = (v40 >> 3) + 1;
  _OWORD v47[2] = 1;
  uint64_t v45 = v38;
  long long v46 = xmmword_192DCA1D0;
  [v19 dispatchThreadgroups:v47 threadsPerThreadgroup:&v45];
}

void sub_1927DEDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10)
{
  __cxa_free_exception(v14);

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::nonlinearity_grad_metal::~nonlinearity_grad_metal(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

const char *Espresso::generic_concat_grad_kernel::kernel_type_str(Espresso::generic_concat_grad_kernel *this)
{
  return "concat_grad";
}

void Espresso::MetalLowmemEngine::concat_grad_kernel_metal::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = *(Espresso::context_metal **)(a1 + 8);
  id v7 = *(id *)(*(void *)a2 + 152);
  uint64_t v8 = *a4;
  if (*(void *)v8)
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 8);
      if (v10)
      {
        int v57 = *(std::__shared_weak_count **)(v8 + 8);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_7;
      }
    }
  }
  else
  {
    __int32 v9 = 0;
  }
  int v57 = 0;
LABEL_7:
  if ((*(unsigned int (**)(int *))(*(void *)v9 + 32))(v9) == 1) {
    __int32 v11 = @"f16";
  }
  else {
    __int32 v11 = @"f32";
  }
  int v12 = [@"copy_" stringByAppendingString:v11];
  uint64_t v58 = v12;
  if (!*(void *)(a1 + 344))
  {
    long long v59 = (id *)v6;
    std::vector<Espresso::axpby_params>::vector(&__p, (a3[1] - *a3) >> 4);
    uint64_t v13 = *a3;
    if (a3[1] != *a3)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      int v16 = 0;
      uint64_t v17 = 44;
      do
      {
        int v18 = *(int32x2_t **)(v13 + v14);
        int v20 = *(std::__shared_weak_count **)(v13 + v14 + 8);
        if (v20)
        {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v13 = *a3;
          int v18 = *(int32x2_t **)(*a3 + v14);
        }
        int v21 = (char *)__p + v17;
        int v22 = v18[2].i32[0];
        int v23 = v22 - 1;
        BOOL v50 = v22 < 1;
        int v24 = v22 + 2;
        if (!v50) {
          int v24 = v23;
        }
        int v25 = (v24 >> 2) + 1;
        *(void *)((char *)v21 - 44) = 1065353216;
        v26.i32[0] = v25;
        v26.i32[1] = v18[2].i32[1];
        *(v21 - 4) = vmul_s32(v26, v18[1]);
        *(void *)((char *)v21 - 20) = 0;
        *((_DWORD *)v21 - 6) = v16;
        int v27 = v9[4];
        int v28 = v27 - 1;
        BOOL v50 = v27 < 1;
        int v29 = v27 + 2;
        if (!v50) {
          int v29 = v28;
        }
        *(void *)((char *)v21 - 12) = ((v29 >> 2) + 1);
        *((_DWORD *)v21 - 1) = v25;
        void *v21 = *((void *)v19 + 1);
        int v30 = *((_DWORD *)v19 + 4);
        int v31 = v30 - 1;
        BOOL v50 = v30 < 1;
        int v32 = v30 + 2;
        if (v50) {
          int v33 = v32;
        }
        else {
          int v33 = v31;
        }
        if (v20)
        {
          nitro::nitro_function::nitro_function(v20);
          uint64_t v13 = *a3;
        }
        v16 += (v33 >> 2) + 1;
        ++v15;
        v17 += 56;
        v14 += 16;
      }
      while (v15 < (a3[1] - v13) >> 4);
    }
    uint64_t v6 = (Espresso::context_metal *)v59;
    uint64_t v34 = [v59[18] newBufferWithBytes:__p length:v65 - (unsigned char *)__p options:0];
    uint64_t v35 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v34;

    int v12 = v58;
    if (__p)
    {
      std::string v65 = __p;
      operator delete(__p);
    }
  }
  uint64_t v36 = Espresso::context_metal::kernel_for_function(v6, v12);
  __int32 v56 = (void *)v36;
  if (!v36)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v7 setComputePipelineState:v36];
  uint64_t v37 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    do
    {
      uint64_t v41 = v37 + v39;
      int v43 = *(std::__shared_weak_count **)(v41 + 8);
      if (v43) {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v7 setTexture:v42[21] atIndex:0];
      [v7 setTexture:*((void *)v9 + 21) atIndex:1];
      [v7 setBuffer:*(void *)(a1 + 344) offset:v38 atIndex:0];
      id v44 = *(_DWORD **)(*a3 + v39);
      int v45 = v44[4];
      int v46 = v45 - 1;
      BOOL v50 = v45 < 1;
      int v47 = v45 + 2;
      if (!v50) {
        int v47 = v46;
      }
      int v48 = v44[2] + v44[2] * (v47 >> 2);
      int v49 = v44[5] * v44[3];
      BOOL v50 = v48 < 16 || v49 < 16;
      if (v50) {
        uint64_t v51 = 4;
      }
      else {
        uint64_t v51 = 8;
      }
      uint64_t v52 = (v48 - 1) / (int)v51 + 1;
      int v53 = v49 - 1;
      BOOL v50 = v49 < 1;
      int v54 = v49 + 6;
      if (!v50) {
        int v54 = v53;
      }
      v63[0] = v52;
      v63[1] = (v54 >> 3) + 1;
      v63[2] = 1;
      uint64_t v61 = v51;
      long long v62 = xmmword_192DCA1D0;
      [v7 dispatchThreadgroups:v63 threadsPerThreadgroup:&v61];
      if (v43) {
        nitro::nitro_function::nitro_function(v43);
      }
      ++v40;
      uint64_t v37 = *a3;
      v39 += 16;
      v38 += 56;
    }
    while (v40 < (a3[1] - *a3) >> 4);
  }

  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
}

void sub_1927DF368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }

  _Unwind_Resume(a1);
}

void *std::vector<Espresso::axpby_params>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::axpby_params>>(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[56 * v5];
    uint64_t v6 = 56 * a2;
    id v7 = &v4[56 * a2];
    __asm { FMOV            V0.2S, #1.0 }
    do
    {
      *((_DWORD *)v4 + 13) = 0;
      *(void *)uint64_t v4 = _D0;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = 0uLL;
      *(_OWORD *)(v4 + 36) = 0uLL;
      v4 += 56;
      v6 -= 56;
    }
    while (v6);
    a1[1] = v7;
  }
  return a1;
}

void sub_1927DF498(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::axpby_params>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

void Espresso::MetalLowmemEngine::concat_grad_kernel_metal::~concat_grad_kernel_metal(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

const char *Espresso::generic_elementwise_grad_kernel::kernel_type_str(Espresso::generic_elementwise_grad_kernel *this)
{
  return "elementwise_grad";
}

void Espresso::MetalLowmemEngine::elementwise_grad_kernel_metal::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (*(_DWORD *)(a1 + 280))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not supported");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = a1;
  id v7 = *(Espresso::context_metal **)(a1 + 8);
  id v8 = *(id *)(*(void *)a2 + 152);
  uint64_t v9 = *a4;
  if (*(void *)v9)
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(v9 + 8);
      if (v11)
      {
        int v55 = *(std::__shared_weak_count **)(v9 + 8);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  int v55 = 0;
LABEL_8:
  if ((*(unsigned int (**)(int *))(*(void *)v10 + 32))(v10) == 1) {
    int v12 = @"f16";
  }
  else {
    int v12 = @"f32";
  }
  uint64_t v13 = [@"copy_" stringByAppendingString:v12];
  __int32 v56 = v13;
  if (!*(void *)(v6 + 336))
  {
    int v57 = (id *)v7;
    uint64_t v53 = v6;
    std::vector<Espresso::axpby_params>::vector(&__p, (a3[1] - *a3) >> 4);
    uint64_t v14 = *a3;
    if (a3[1] != *a3)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      uint64_t v17 = 44;
      do
      {
        int v18 = *(int32x2_t **)(v14 + v15);
        int v20 = *(std::__shared_weak_count **)(v14 + v15 + 8);
        if (v20)
        {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v14 = *a3;
          int v18 = *(int32x2_t **)(*a3 + v15);
        }
        int v21 = (char *)__p + v17;
        int v22 = v18[2].i32[0];
        int v23 = v22 - 1;
        BOOL v46 = v22 < 1;
        int v24 = v22 + 2;
        if (!v46) {
          int v24 = v23;
        }
        int v25 = (v24 >> 2) + 1;
        *(void *)((char *)v21 - 44) = 1065353216;
        v26.i32[0] = v25;
        v26.i32[1] = v18[2].i32[1];
        *(v21 - 4) = vmul_s32(v26, v18[1]);
        *(v21 - 3) = 0;
        *((_DWORD *)v21 - 4) = 0;
        int v27 = v10[4];
        int v28 = v27 - 1;
        BOOL v46 = v27 < 1;
        int v29 = v27 + 2;
        if (!v46) {
          int v29 = v28;
        }
        *(void *)((char *)v21 - 12) = ((v29 >> 2) + 1);
        *((_DWORD *)v21 - 1) = v25;
        void *v21 = v19[1];
        if (v20)
        {
          nitro::nitro_function::nitro_function(v20);
          uint64_t v14 = *a3;
        }
        ++v16;
        v17 += 56;
        v15 += 16;
      }
      while (v16 < (a3[1] - v14) >> 4);
    }
    id v7 = (Espresso::context_metal *)v57;
    uint64_t v30 = [v57[18] newBufferWithBytes:__p length:v62 - (unsigned char *)__p options:0];
    uint64_t v6 = v53;
    int v31 = *(void **)(v53 + 336);
    *(void *)(v53 + 336) = v30;

    if (__p)
    {
      long long v62 = __p;
      operator delete(__p);
    }
    uint64_t v13 = v56;
  }
  uint64_t v32 = Espresso::context_metal::kernel_for_function(v7, v13);
  int v54 = (void *)v32;
  if (!v32)
  {
    uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Kernel not found");
    __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v8 setComputePipelineState:v32];
  uint64_t v33 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    do
    {
      uint64_t v37 = v33 + v35;
      uint64_t v39 = *(std::__shared_weak_count **)(v37 + 8);
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v8 setTexture:v38[21] atIndex:0];
      [v8 setTexture:*((void *)v10 + 21) atIndex:1];
      [v8 setBuffer:*(void *)(v6 + 336) offset:v34 atIndex:0];
      unint64_t v40 = *(_DWORD **)(*a3 + v35);
      int v41 = v40[4];
      int v42 = v41 - 1;
      BOOL v46 = v41 < 1;
      int v43 = v41 + 2;
      if (!v46) {
        int v43 = v42;
      }
      int v44 = v40[2] + v40[2] * (v43 >> 2);
      int v45 = v40[5] * v40[3];
      BOOL v46 = v44 < 16 || v45 < 16;
      if (v46) {
        uint64_t v47 = 4;
      }
      else {
        uint64_t v47 = 8;
      }
      uint64_t v48 = (v44 - 1) / (int)v47 + 1;
      int v49 = v45 - 1;
      BOOL v46 = v45 < 1;
      int v50 = v45 + 6;
      if (!v46) {
        int v50 = v49;
      }
      v60[0] = v48;
      v60[1] = (v50 >> 3) + 1;
      v60[2] = 1;
      uint64_t v58 = v47;
      long long v59 = xmmword_192DCA1D0;
      [v8 dispatchThreadgroups:v60 threadsPerThreadgroup:&v58];
      if (v39) {
        nitro::nitro_function::nitro_function(v39);
      }
      ++v36;
      uint64_t v33 = *a3;
      v35 += 16;
      v34 += 56;
    }
    while (v36 < (a3[1] - *a3) >> 4);
  }

  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
}

void sub_1927DFA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::elementwise_grad_kernel_metal::~elementwise_grad_kernel_metal(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::MetalLowmemEngine::axpby_kernel_metal::set_alpha_beta(Espresso::MetalLowmemEngine::axpby_kernel_metal *this, float a2, float a3, int a4)
{
  if (*((float *)this + 70) != a2 || *((float *)this + 71) != a3 || *((_DWORD *)this + 72) != a4)
  {
    *((float *)this + 70) = a2;
    *((float *)this + 71) = a3;
    *((_DWORD *)this + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = a4;
    id v8 = (void *)*((void *)this + 42);
    *((void *)this + 42) = 0;
  }
  *((float *)this + 70) = a2;
  *((float *)this + 71) = a3;
  *((_DWORD *)this + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = a4;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::axpby_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_axpby_kernel::kernel_type_str(Espresso::generic_axpby_kernel *this)
{
  return "axpby";
}

void Espresso::MetalLowmemEngine::axpby_kernel_metal::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  id v7 = *(id **)(a1 + 8);
  id v8 = *(id *)(*(void *)a2 + 152);
  uint64_t v9 = *a4;
  uint64_t v10 = **a4;
  if (v10)
  {
    if (v11)
    {
      int v12 = (atomic_ullong *)v9[1];
      if (v12)
      {
        std::string v89 = (std::__shared_weak_count *)v9[1];
        atomic_fetch_add_explicit(v12 + 1, 1uLL, memory_order_relaxed);
        uint64_t v9 = *a4;
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::string v89 = 0;
LABEL_7:
  uint64_t v13 = v9[2];
  if (v13)
  {
    if (v14)
    {
      uint64_t v15 = (atomic_ullong *)v9[3];
      if (v15)
      {
        std::string v88 = (std::__shared_weak_count *)v9[3];
        atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::string v88 = 0;
LABEL_13:
  unint64_t v16 = *a3;
  uint64_t v17 = **a3;
  if (!v17)
  {
    int v18 = 0;
LABEL_18:
    int v87 = 0;
    goto LABEL_19;
  }
  if (!v18) {
    goto LABEL_18;
  }
  id v19 = (atomic_ullong *)v16[1];
  if (!v19) {
    goto LABEL_18;
  }
  int v87 = (std::__shared_weak_count *)v16[1];
  atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
LABEL_19:
  int v20 = (void *)*((void *)v11 + 20);
  if (v20 && *((void *)v14 + 20) && *((void *)v18 + 20))
  {
    uint64_t v21 = [v20 length];
    unsigned int v22 = (*(uint64_t (**)(void *))(*(void *)v11 + 32))(v11) - 1;
    if (v22 > 0xC) {
      unint64_t v23 = 16;
    }
    else {
      unint64_t v23 = *(void *)&asc_192DD4098[8 * v22];
    }
    uint64_t v48 = [*((id *)v14 + 20) length];
    int v86 = v7;
    unsigned int v49 = (*(uint64_t (**)(void *))(*(void *)v14 + 32))(v14) - 1;
    if (v49 > 0xC) {
      unint64_t v50 = 16;
    }
    else {
      unint64_t v50 = *(void *)&asc_192DD4098[8 * v49];
    }
    uint64_t v51 = [*((id *)v18 + 20) length];
    int v52 = (*(uint64_t (**)(void *))(*(void *)v18 + 32))(v18);
    unint64_t v53 = (v21 - 1) / v23 + 1;
    unint64_t v54 = (v48 - 1) / v50 + 1;
    if ((v52 - 1) > 0xC) {
      unint64_t v55 = 16;
    }
    else {
      unint64_t v55 = *(void *)&asc_192DD4098[8 * (v52 - 1)];
    }
    unint64_t v56 = (v51 - 1) / v55;
    if (v54 >= v56 + 1) {
      unint64_t v54 = v56 + 1;
    }
    if (v53 >= v54) {
      unint64_t v53 = v54;
    }
    int v57 = (Espresso::context_metal *)v86;
    if (!*(void *)(a1 + 336) || v53 != *(_DWORD *)(a1 + 332))
    {
      *(_DWORD *)(a1 + 332) = v53;
      uint64_t v58 = [v86[18] newBufferWithBytes:a1 + 280 length:56 options:0];
      long long v59 = *(void **)(a1 + 336);
      *(void *)(a1 + 336) = v58;

      int v57 = (Espresso::context_metal *)v86;
    }
    id v60 = NSString;
    unsigned int v61 = (*(uint64_t (**)(void *))(*(void *)v18 + 32))(v18) - 1;
    if (v61 > 0xC) {
      uint64_t v62 = 32;
    }
    else {
      uint64_t v62 = dword_192DD4100[v61];
    }
    unsigned int v63 = (*(uint64_t (**)(void *))(*(void *)v11 + 32))(v11) - 1;
    if (v63 > 0xC) {
      uint64_t v64 = 32;
    }
    else {
      uint64_t v64 = dword_192DD4100[v63];
    }
    unsigned int v65 = (*(uint64_t (**)(void *))(*(void *)v14 + 32))(v14) - 1;
    if (v65 > 0xC) {
      uint64_t v66 = 32;
    }
    else {
      uint64_t v66 = dword_192DD4100[v65];
    }
    objc_msgSend(v60, "stringWithFormat:", @"axpby_C%d_A%d_B%d", v62, v64, v66);
    int32x2_t v26 = (NSString *)objc_claimAutoreleasedReturnValue();
    int v44 = Espresso::context_metal::kernel_for_function(v57, v26);
    if (!v44)
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v8 setComputePipelineState:v44];
    [v8 setBuffer:*(void *)(a1 + 336) offset:0 atIndex:0];
    [v8 setBuffer:*((void *)v18 + 20) offset:0 atIndex:1];
    [v8 setBuffer:*((void *)v11 + 20) offset:0 atIndex:2];
    [v8 setBuffer:*((void *)v14 + 20) offset:0 atIndex:3];
    unint64_t v67 = *(unsigned int *)(a1 + 332);
    uint64_t v68 = 128;
    if (v67 < 0x100) {
      uint64_t v68 = 64;
    }
    if (v67 < 0x80) {
      uint64_t v68 = 32;
    }
    unint64_t v69 = v67 - 1;
    char v70 = 6;
    if (v67 >= 0x100) {
      char v70 = 7;
    }
    BOOL v71 = v67 >= 0x80;
    char v72 = 5;
    if (v71) {
      char v72 = v70;
    }
    uint64_t v100 = (v69 >> v72) + 1;
    int64x2_t v101 = vdupq_n_s64(1uLL);
    uint64_t v98 = v68;
    int64x2_t v99 = v101;
    [v8 dispatchThreadgroups:&v100 threadsPerThreadgroup:&v98];
  }
  else
  {
    int v24 = (*(uint64_t (**)(const void *))(*(void *)**a3 + 32))(**a3);
    if (v24 != (*(unsigned int (**)(const void *))(*(void *)**a4 + 32))(**a4))
    {
      long long v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      int v74 = (*(uint64_t (**)(const void *))(*(void *)**a4 + 32))(**a4);
      std::to_string(&v94, v74);
      long long v75 = std::string::insert(&v94, 0, "Incompatible operands CP x=");
      long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v95.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      int v77 = std::string::append(&v95, "/y=");
      long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v96.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      int v79 = (*(uint64_t (**)(const void *))(*(void *)**a3 + 32))(**a3);
      std::to_string(&v93, v79);
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v80 = &v93;
      }
      else {
        uint64_t v80 = (std::string *)v93.__r_.__value_.__r.__words[0];
      }
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v93.__r_.__value_.__l.__size_;
      }
      uint64_t v82 = std::string::append(&v96, (const std::string::value_type *)v80, size);
      long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v97.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v73, &v97);
      __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if ((*(unsigned int (**)(void *))(*(void *)v18 + 32))(v18) == 1) {
      int v25 = @"f16";
    }
    else {
      int v25 = @"f32";
    }
    int32x2_t v26 = [@"axpby_" stringByAppendingString:v25];
    int v27 = **a3;
    int v28 = v27[4];
    int v29 = v28 - 1;
    BOOL v45 = v28 < 1;
    int v30 = v28 + 2;
    if (!v45) {
      int v30 = v29;
    }
    int v31 = v27[2] + v27[2] * (v30 >> 2);
    int v32 = v27[5] * v27[3];
    *(_DWORD *)(a1 + 296) = v32;
    *(_DWORD *)(a1 + 292) = v31;
    *(_DWORD *)(a1 + 300) = 0;
    *(void *)(a1 + 304) = 0;
    int v33 = *((_DWORD *)v11 + 4);
    int v34 = v33 - 1;
    BOOL v45 = v33 < 1;
    int v35 = v33 + 2;
    if (!v45) {
      int v35 = v34;
    }
    *(_DWORD *)(a1 + 312) = (v35 >> 2) + 1;
    int v36 = *((_DWORD *)v14 + 4);
    int v37 = v36 - 1;
    BOOL v45 = v36 < 1;
    int v38 = v36 + 2;
    if (!v45) {
      int v38 = v37;
    }
    *(_DWORD *)(a1 + 316) = (v38 >> 2) + 1;
    int v39 = *((_DWORD *)v18 + 4);
    int v40 = v39 - 1;
    BOOL v45 = v39 < 1;
    int v41 = v39 + 2;
    if (!v45) {
      int v41 = v40;
    }
    *(_DWORD *)(a1 + 320) = (v41 >> 2) + 1;
    *(void *)(a1 + 3std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = *((void *)v18 + 1);
    uint64_t v42 = objc_msgSend(v7[18], "newBufferWithBytes:length:options:");
    int v43 = *(void **)(a1 + 336);
    *(void *)(a1 + 336) = v42;

    int v44 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v7, v26);
    if (!v44)
    {
      uint64_t v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Kernel not found");
      __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v8 setComputePipelineState:v44];
    [v8 setTexture:*((void *)v18 + 21) atIndex:0];
    [v8 setTexture:*((void *)v11 + 21) atIndex:1];
    [v8 setTexture:*((void *)v14 + 21) atIndex:2];
    [v8 setBuffer:*(void *)(a1 + 336) offset:0 atIndex:0];
    BOOL v45 = v31 < 16 || v32 < 16;
    if (v45) {
      uint64_t v46 = 4;
    }
    else {
      uint64_t v46 = 8;
    }
    int v47 = v32 - 1;
    if (v32 < 1) {
      int v47 = v32 + 6;
    }
    v92[0] = (v31 - 1) / (int)v46 + 1;
    v92[1] = (v47 >> 3) + 1;
    v92[2] = 1;
    uint64_t v90 = v46;
    long long v91 = xmmword_192DCA1D0;
    [v8 dispatchThreadgroups:v92 threadsPerThreadgroup:&v90];
  }

  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  if (v88) {
    nitro::nitro_function::nitro_function(v88);
  }
  if (v89) {
    nitro::nitro_function::nitro_function(v89);
  }
}

void sub_1927E0598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v50 - 153) < 0) {
    operator delete(*(void **)(v50 - 176));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v48 & 1) == 0)
    {
LABEL_14:
      if (a14) {
        nitro::nitro_function::nitro_function(a14);
      }
      if (a15) {
        nitro::nitro_function::nitro_function(a15);
      }
      if (a16) {
        nitro::nitro_function::nitro_function(a16);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v48)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v49);
  goto LABEL_14;
}

void Espresso::MetalLowmemEngine::axpby_kernel_metal::~axpby_kernel_metal(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

const char *Espresso::generic_inner_product_grad_kernel::kernel_type_str(Espresso::generic_inner_product_grad_kernel *this)
{
  return "inner_product_grad";
}

void Espresso::generic_inner_product_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)a1;
  long long v4 = *(_OWORD *)(*(void *)a1 + 144);
  v7[0] = *(_OWORD *)(*(void *)a1 + 128);
  v7[1] = v4;
  uint64_t v5 = (const void *)v3[21];
  uint64_t v8 = v3[20];
  std::vector<int> __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v5, v3[22], (uint64_t)(v3[22] - (void)v5) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_1927E0860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::inner_product_grad_kernel_metal::__launch(uint64_t a1, id **a2, uint64_t *a3, const void ***a4)
{
  id v7 = *a2;
  uint64_t v8 = *a4;
  uint64_t v9 = **a4;
  if (v9)
  {
    if (v10)
    {
      uint64_t v11 = (std::__shared_weak_count *)v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v12 = *a3;
  if (!*(void *)v12)
  {
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  if (!v13)
  {
LABEL_12:
    uint64_t v14 = 0;
    goto LABEL_13;
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 8);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  if (*((_DWORD *)v13 + 2) == 1 && *((_DWORD *)v13 + 3) == 1)
  {
    uint64_t v15 = *(void *)(a1 + 280);
    if (*(void *)v15)
    {
      if (v16)
      {
        uint64_t v17 = *(void *)(v15 + 8);
        if (v17)
        {
          int v41 = *(std::__shared_weak_count **)(v15 + 8);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
          goto LABEL_32;
        }
      }
    }
    else
    {
      unint64_t v16 = 0;
    }
    int v41 = 0;
LABEL_32:
    int v20 = v10[5];
    uint64_t v21 = *(id **)(a1 + 8);
    id v22 = v7[19];
    unint64_t v23 = @"tex2d_MatrixMultiplyT_f32";
    if (v20 > 1 && (v20 & 1) == 0) {
      unint64_t v23 = @"tex2d_MatrixMultiplyT_f32_2x1batch";
    }
    if (v20 > 3 && (v20 & 3) == 0) {
      int v24 = @"tex2d_MatrixMultiplyT_f32_4x1batch";
    }
    else {
      int v24 = v23;
    }
    if ((*(unsigned int (**)(_DWORD *))(*(void *)v10 + 32))(v10) == 1
      || (*(unsigned int (**)(_DWORD *))(*(void *)v10 + 32))(v10) == 2)
    {
      int v24 = [(__CFString *)v24 stringByReplacingOccurrencesOfString:@"_f32" withString:@"_f16"];
    }
    int v40 = v24;
    int v25 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v21, &v24->isa);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!*(void *)(a1 + 440)
      || *(_DWORD *)(a1 + 368) != v10[5]
      || *(_DWORD *)(a1 + 376) != *(_DWORD *)(a1 + 308)
      || *(_DWORD *)(a1 + 372) != *(_DWORD *)(a1 + 304))
    {
      *(_DWORD *)(a1 + 368) = v20;
      int32x2_t v26 = *(int32x2_t *)(a1 + 304);
      *(int32x2_t *)(a1 + 3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = vrev64_s32(v26);
      *(int32x2_t *)(a1 + 388) = vrev64_s32((int32x2_t)vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v26, (int32x2_t)-1), 2uLL));
      uint64_t v27 = [v21[18] newBufferWithBytes:a1 + 304 length:132 options:0];
      int v28 = *(void **)(a1 + 440);
      *(void *)(a1 + 440) = v27;
    }
    if (!v25)
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v22 setComputePipelineState:v25];
    [v22 setBuffer:v16[20] offset:0 atIndex:0];
    [v22 setTexture:*((void *)v10 + 21) atIndex:0];
    [v22 setTexture:v13[21] atIndex:1];
    [v22 setBuffer:*(void *)(a1 + 440) offset:0 atIndex:1];
    unsigned int v29 = *(_DWORD *)(a1 + 372) - 1;
    unsigned int v30 = v29 >> 2;
    uint64_t v31 = 128;
    if (v29 >= 0x400)
    {
      char v32 = 7;
    }
    else
    {
      uint64_t v31 = 64;
      char v32 = 6;
    }
    if (v29 < 0x200)
    {
      uint64_t v31 = 32;
      char v32 = 5;
    }
    BOOL v33 = v29 >= 0x100;
    uint64_t v34 = 16;
    if (v33) {
      uint64_t v34 = v31;
    }
    if (v33) {
      char v35 = v32;
    }
    else {
      char v35 = 4;
    }
    uint64_t v36 = (v30 >> v35) + 1;
    unsigned int v37 = *(_DWORD *)(a1 + 368) - 1;
    char v38 = v20 > 1 && (v20 & 1) == 0;
    if (v20 > 3 && (v20 & 3) == 0) {
      char v38 = 2;
    }
    v44[0] = v36;
    v44[1] = (int)((v37 >> v38) + 1);
    uint64_t v44[2] = 1;
    uint64_t v42 = v34;
    int64x2_t v43 = vdupq_n_s64(1uLL);
    [v22 dispatchThreadgroups:v44 threadsPerThreadgroup:&v42];
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }

    uint64_t v19 = v41;
    if (!v41) {
      goto LABEL_25;
    }
LABEL_24:
    nitro::nitro_function::nitro_function(v19);
    goto LABEL_25;
  }
  (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 280) + 56))(&v49);
  (*(void (**)(void, id **, uint64_t *))(***(void ***)(a1 + 280) + 40))(**(void **)(a1 + 280), a2, &v49);
  (*(void (**)(uint64_t *__return_ptr, void *))(*v13 + 56))(&v47, v13);
  (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(void *)v10 + 56))(&v45, v10);
  int v18 = *(_DWORD *)(v47 + 20);
  (*(void (**)(_DWORD *, id **, uint64_t *))(*(void *)v10 + 40))(v10, a2, &v45);
  (*((void (**)(id *))*v7 + 5))(v7);
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v18, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1.0, *(const float **)(v45 + 24), *(_DWORD *)(a1 + 304), *(const float **)(v49 + 24), *(_DWORD *)(a1 + 308), 0.0, *(float **)(v47 + 24), *(_DWORD *)(a1 + 308));
  (*(void (**)(void *, id **, uint64_t *))(*v13 + 48))(v13, a2, &v47);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  uint64_t v19 = v50;
  if (v50) {
    goto LABEL_24;
  }
LABEL_25:
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_1927E0F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  __cxa_free_exception(v27);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }

  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::inner_product_grad_kernel_metal::~inner_product_grad_kernel_metal(id *this)
{
  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::generic_inner_product_weights_grad_kernel::outputs_gradient(Espresso::generic_inner_product_weights_grad_kernel *this)
{
  return 1;
}

const char *Espresso::generic_inner_product_weights_grad_kernel::kernel_type_str(Espresso::generic_inner_product_weights_grad_kernel *this)
{
  return "inner_product_weights_grad";
}

void Espresso::MetalLowmemEngine::inner_product_weights_grad_kernel_metal::blob_options(char a1@<W1>, void *a2@<X8>)
{
  if (a1)
  {
    long long v4 = operator new(0x78uLL);
    v4[1] = 0;
    v4[2] = 0;
    *long long v4 = &unk_1EE385C88;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    v4[13] = 0;
    v4[14] = 0;
    *((_DWORD *)v4 + 12) = 1065353216;
    v4[7] = 0x1FFFFFFFFLL;
    v4[12] = 0;
    v4[8] = 0;
    v4[9] = 0;
    *((unsigned char *)v4 + 88) = 0;
    v4[10] = 0;
    v4[3] = &unk_1EE349D58;
    *a2 = v4 + 3;
    a2[1] = v4;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void Espresso::MetalLowmemEngine::inner_product_weights_grad_kernel_metal::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  id v7 = *a4;
  uint64_t v8 = **a4;
  if (!v8)
  {
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  if (!v10)
  {
LABEL_6:
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  uint64_t v11 = (std::__shared_weak_count *)v7[1];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    id v7 = *a4;
  }
LABEL_7:
  uint64_t v12 = v7[2];
  if (!v12)
  {
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  if (!v13)
  {
LABEL_12:
    uint64_t v14 = 0;
    goto LABEL_13;
  }
  uint64_t v14 = (std::__shared_weak_count *)v7[3];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v15 = *a3;
  unint64_t v16 = **a3;
  char v35 = v11;
  if (!v16)
  {
    uint64_t v17 = 0;
    goto LABEL_18;
  }
  if (!v17)
  {
LABEL_18:
    int v18 = 0;
    goto LABEL_19;
  }
  int v18 = (std::__shared_weak_count *)v15[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  uint64_t v19 = *a2;
  int v20 = *(id **)(a1 + 8);
  id v21 = *(id *)(*a2 + 152);
  if (*((_DWORD *)v13 + 2) == 1 && *((_DWORD *)v13 + 3) == 1)
  {
    if ((*(unsigned int (**)(_DWORD *))(*(void *)v10 + 32))(v10) == 1) {
      id v22 = @"f16";
    }
    else {
      id v22 = @"f32";
    }
    unint64_t v23 = [@"innerprod_weights_grad_" stringByAppendingString:v22];
    int v24 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v20, v23);
    if (*(void *)(a1 + 440))
    {
      int v25 = v10[5];
      if (*(_DWORD *)(a1 + 368) == v25)
      {
        if (*(_DWORD *)(a1 + 376) == *(_DWORD *)(a1 + 308))
        {
          int v25 = *(_DWORD *)(a1 + 368);
          if (*(_DWORD *)(a1 + 372) == *(_DWORD *)(a1 + 304)) {
            goto LABEL_38;
          }
        }
        else
        {
          int v25 = *(_DWORD *)(a1 + 368);
        }
      }
    }
    else
    {
      int v25 = v10[5];
    }
    *(_DWORD *)(a1 + 368) = v25;
    int32x2_t v28 = *(int32x2_t *)(a1 + 304);
    *(int32x2_t *)(a1 + 3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v28;
    *(uint32x2_t *)(a1 + 388) = vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v28, (int32x2_t)-1), 2uLL);
    uint64_t v29 = [v20[18] newBufferWithBytes:a1 + 304 length:132 options:0];
    unsigned int v30 = *(void **)(a1 + 440);
    *(void *)(a1 + 440) = v29;

LABEL_38:
    if (!v24)
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v21 setComputePipelineState:v24];
    [v21 setTexture:v13[21] atIndex:0];
    [v21 setTexture:*((void *)v10 + 21) atIndex:1];
    [v21 setBuffer:*(void *)(a1 + 440) offset:0 atIndex:0];
    [v21 setBuffer:v17[20] offset:0 atIndex:1];
    uint32x2_t v31 = vshr_n_u32((uint32x2_t)vadd_s32(*(int32x2_t *)(a1 + 304), (int32x2_t)-1), 2uLL);
    int32x2_t v32 = vadd_s32((int32x2_t)vmin_u32(v31, (uint32x2_t)0x700000007), (int32x2_t)0x100000001);
    v33.i64[0] = v32.u32[0];
    v33.i64[1] = v32.u32[1];
    uint64_t v37 = 1;
    v38[0] = v31.i32[1] / (unsigned __int32)v32.i32[1] + 1;
    v38[1] = v31.i32[0] / (unsigned __int32)v32.i32[0] + 1;
    uint64_t v38[2] = 1;
    int8x16_t v36 = vextq_s8(v33, v33, 8uLL);
    [v21 dispatchThreadgroups:v38 threadsPerThreadgroup:&v36];

    uint64_t v27 = v35;
    goto LABEL_40;
  }
  (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(void *)v10 + 56))(&v43, v10);
  (*(void (**)(uint64_t *__return_ptr, void *))(*v13 + 56))(&v41, v13);
  (*(void (**)(uint64_t *__return_ptr, void *))(*v17 + 56))(&v39, v17);
  int v26 = *(_DWORD *)(v43 + 20);
  (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(void *)v10 + 40))(v10, a2, &v43);
  (*(void (**)(void *, uint64_t *, uint64_t *))(*v13 + 40))(v13, a2, &v41);
  (*(void (**)(uint64_t))(*(void *)v19 + 40))(v19);
  cblas_sgemm(CblasRowMajor, CblasTrans, CblasNoTrans, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), v26, 1.0, *(const float **)(v43 + 24), *(_DWORD *)(a1 + 304), *(const float **)(v41 + 24), *(_DWORD *)(a1 + 308), 0.0, *(float **)(v39 + 24), *(_DWORD *)(a1 + 308));
  (*(void (**)(void *, uint64_t *, uint64_t *))(*v17 + 48))(v17, a2, &v39);
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  uint64_t v27 = v35;
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
LABEL_40:

  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_1927E177C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  __cxa_free_exception(v28);

  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::inner_product_weights_grad_kernel_metal::~inner_product_weights_grad_kernel_metal(id *this)
{
  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1EE368A88;
  uint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::abstract_kernel_with_weights_grad_::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)(a1 + 280);
  if (*(void *)(a1 + 288) != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      id v7 = (uint64_t *)(v3 + v5);
      uint64_t v8 = *v7;
      uint64_t v9 = (std::__shared_weak_count *)v7[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = 0;
      *(_OWORD *)&v18[8] = 0u;
      long long v19 = 0u;
      long long v17 = xmmword_192DC3600;
      *(void *)int v18 = 0xFFFFFFFF00000001;
      if (v8)
      {
        Espresso::abstract_blob_container::shape((char *)v13, v8);
        long long v17 = v13[0];
        *(_OWORD *)int v18 = v13[1];
        *(void *)&v18[16] = v14;
        long long v19 = v15;
        uint64_t v20 = v16;
        uint64_t v10 = (void *)v15;
      }
      else
      {
        uint64_t v10 = 0;
      }
      unint64_t v11 = a2[1];
      if (v11 >= a2[2])
      {
        uint64_t v12 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, &v17);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a2, &v17);
        uint64_t v12 = v11 + 64;
      }
      a2[1] = v12;
      if (v10) {
        operator delete(v10);
      }
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      ++v6;
      uint64_t v3 = *(void *)(a1 + 280);
      v5 += 16;
    }
    while (v6 < (*(void *)(a1 + 288) - v3) >> 4);
  }
}

void sub_1927E1A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v2 + 280) = 0;
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 296) = 0;
  *(void *)(v2 + 304) = 0;
  *(void *)uint64_t v2 = &unk_1EE355BE0;
  *(void *)(v2 + 312) = 0x3727C5AC00000000;
  *(_DWORD *)(v2 + 320) = 1063675494;
  *(_WORD *)(v2 + 3std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(void *)(v2 + 360) = 1065353216;
  *(void *)(v2 + 368) = 0;
  *(_DWORD *)(v2 + 376) = 2;
  return result;
}

double Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v2 + 280) = 0;
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 296) = 0;
  *(void *)uint64_t v2 = &unk_1EE3566E8;
  *(unsigned char *)(v2 + 344) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v2 + 352) = 0xFFFFFFFF00000000;
  *(void *)(v2 + 360) = _D1;
  *(void *)(v2 + 428) = 0;
  *(void *)&double result = 0x100000001;
  *(_OWORD *)(v2 + 304) = xmmword_192DCA240;
  *(void *)(v2 + 320) = 0x3F80000000000000;
  *(void *)(v2 + 328) = 1065353216;
  *(void *)(v2 + 388) = 0;
  *(_DWORD *)(v2 + 348) = 0;
  *(void *)(v2 + 336) = 0;
  *(void *)(v2 + 404) = 0;
  *(void *)(v2 + 420) = 0;
  *(void *)(v2 + 412) = 0;
  return result;
}

void Espresso::HXSimEngine::batch::~batch(Espresso::HXSimEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::HXSimEngine::context::~context(id *this)
{
  Espresso::abstract_context::~abstract_context(this);

  JUMPOUT(0x192FF16B0);
}

void *Espresso::HXSimEngine::context::get_device_model_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HX_Sim");
}

double Espresso::HXSimEngine::context::begin_batch@<D0>(void *a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x90uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1EE3816F8;
  double result = 0.0;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  v3[64] = 1;
  *(_OWORD *)(v3 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *((_WORD *)v3 + 60) = 256;
  *((void *)v3 + 16) = 0;
  *((void *)v3 + 17) = 0;
  *((void *)v3 + 3) = &unk_1EE32A268;
  *a1 = v3 + 24;
  a1[1] = v3;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3816F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3816F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x198uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1EE381650;
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v13 = *((void *)a2 + 8);
  long long v9 = *a2;
  long long v10 = a2[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = v12;
  *((void *)v6 + 46) = v13;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((void *)v6 + 3) = &unk_1EE329E08;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927E1E58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 14) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 14)
  {
    return result;
  }
  if (*a3 == 0x656C6163735F7868 && *(uint64_t *)((char *)a3 + 6) == 0x74666968735F656CLL)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v29, 2, 1, 1, 1);
    std::string::size_type v10 = v29.__r_.__value_.__r.__words[0];
    long long v11 = (std::__shared_weak_count *)*((void *)v7 + 45);
    *((_OWORD *)v7 + 22) = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 44);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      uint64_t v16 = exception;
      std::to_string(&v26, v15);
      long long v17 = std::string::insert(&v26, 0, "Unexpected size ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      long long v19 = std::string::append(&v27, "/");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v25, 4 * *(int *)(*((void *)v7 + 44) + 8));
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v21 = &v25;
      }
      else {
        id v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v25.__r_.__value_.__l.__size_;
      }
      unint64_t v23 = std::string::append(&v28, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v29);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1927E206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>::clear_weights(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 160));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(0);
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v2 = (std::__shared_weak_count *)v1[25];
  v1[24] = 0;
  v1[25] = 0;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  void (***v18)(uint64_t *__return_ptr, void);
  long long v19;
  std::__shared_weak_count *v20;
  uint64_t v21[2];
  _OWORD v22[2];
  long long v23;
  void v24[3];
  uint64_t v25;
  std::__shared_weak_count *v26;
  void v27[2];
  uint64_t v28;
  std::__shared_weak_count *v29;
  long long v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  unint64_t v6 = *a4;
  uint64_t v7 = **a4;
  if (v7)
  {
    if (v8)
    {
      long long v9 = (std::__shared_weak_count *)v6[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      long long v9 = 0;
    }
  }
  else
  {
    long long v9 = 0;
    int v8 = 0;
  }
  uint64_t v10 = *a3;
  if (*(void *)v10)
  {
    if (v11)
    {
      std::string::size_type v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      std::string::size_type v12 = 0;
    }
  }
  else
  {
    std::string::size_type v12 = 0;
    long long v11 = 0;
  }
  if (!*(void *)(a1 + 368))
  {
    LODWORD(v24[0]) = 0;
    Espresso::create_context((int *)v24, &v30);
    long long v19 = v30;
    unsigned int v30 = 0uLL;
    long long v20 = *(std::__shared_weak_count **)(a1 + 376);
    *(_OWORD *)(a1 + 368) = v19;
    if (v20)
    {
      nitro::nitro_function::nitro_function(v20);
      if (*((void *)&v30 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v30 + 1));
      }
    }
  }
  v27[0] = v8;
  v27[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::sync_copy_to_host(&v28, v27);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*v11 + 56))(&v25, v11);
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(v22, (void *)(a1 + 368), &v28);
  unsigned int v30 = v22[0];
  unint64_t v23 = 0uLL;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
  Espresso::layer_data::layer_data(v24, &v30, (uint64_t *)&v23);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v23, (void *)(a1 + 368), &v25);
  unsigned int v30 = v23;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  Espresso::layer_data::layer_data(v22, &v30, v21);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  Espresso::upsample_kernel_cpu::__launch(a1, v15, (uint64_t)v22, (uint64_t)v24);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = v25;
  long long v17 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = (void (***)(uint64_t *__return_ptr, void))v11[9];
  *(void *)&unsigned int v30 = MEMORY[0x1E4F143A8];
  *((void *)&v30 + 1) = 3321888768;
  uint32x2_t v31 = ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_5325;
  int32x2_t v32 = &__block_descriptor_64_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE_e10_v16__0r_v8l;
  int8x16_t v33 = v11;
  int v34 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v16;
  int8x16_t v36 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_context::compute_batch_sync(v18, &v30);
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  *(void *)&unsigned int v30 = v22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  *(void *)&unsigned int v30 = v24;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1927E2504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_1927E25EC()
{
  if (!v0) {
    JUMPOUT(0x1927E25CCLL);
  }
  JUMPOUT(0x1927E25C8);
}

void *Espresso::layer_data::layer_data(void *a1, long long *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v6 = a1 + 2;
  std::string v27 = a1 + 2;
  uint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(1uLL);
  unint64_t v23 = (char *)v7;
  long long v24 = (char *)v7;
  std::string v26 = (char *)&v7[v8];
  long long v9 = *a2;
  _OWORD *v7 = *a2;
  if (*((void *)&v9 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::string v25 = v7 + 1;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a1, &v23);
  uint64_t v10 = (void *)a1[1];
  std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v23);
  uint64_t v11 = *a3;
  a1[1] = v10;
  if (v11)
  {
    if ((unint64_t)v10 >= *v6)
    {
      uint64_t v14 = ((uint64_t)v10 - *a1) >> 4;
      if ((unint64_t)(v14 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = *v6 - *a1;
      uint64_t v16 = v15 >> 3;
      if (v15 >> 3 <= (unint64_t)(v14 + 1)) {
        uint64_t v16 = v14 + 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      std::string v27 = v6;
      long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v17);
      long long v19 = &v18[16 * v14];
      unint64_t v23 = v18;
      long long v24 = v19;
      std::string v26 = &v18[16 * v20];
      long long v21 = *(_OWORD *)a3;
      *(_OWORD *)long long v19 = *(_OWORD *)a3;
      if (*((void *)&v21 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::string v25 = v19 + 16;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a1, &v23);
      uint64_t v13 = (void *)a1[1];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v23);
    }
    else
    {
      *uint64_t v10 = v11;
      uint64_t v12 = a3[1];
      v10[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = v10 + 2;
      a1[1] = v10 + 2;
    }
    a1[1] = v13;
  }
  return a1;
}

void sub_1927E2770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_5325(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a2, a1 + 48);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>::~hxsim_cpu_kernel_wrapper(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE329E08;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE329E08;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381650;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::upsample_kernel_cpu,Espresso::generic_upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x1D8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1EE381688;
  long long v11 = a2[2];
  *(_OWORD *)uint64_t v12 = a2[3];
  *(_OWORD *)&v12[12] = *(long long *)((char *)a2 + 60);
  long long v9 = *a2;
  long long v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 51) = 0;
  *((void *)v6 + 52) = 0;
  *((void *)v6 + 53) = 0;
  *((void *)v6 + 54) = 0;
  *((void *)v6 + 3) = &unk_1EE329F60;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927E2A14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::batchnorm_kernel_cpu::get_batchnorm_params@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 408);
  *a2 = *(void *)(this + 400);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::batchnorm_kernel_cpu::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 408);
  *(void *)(a1 + 400) = v3;
  *(void *)(a1 + 408) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v9 = *(char *)(a3 + 23);
  if (v9 < 0)
  {
    if (*(void *)(a3 + 8) != 14)
    {
LABEL_10:
      Espresso::generic_batchnorm_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
      return;
    }
    long long v10 = *(uint64_t **)a3;
  }
  else
  {
    long long v10 = (uint64_t *)a3;
    if (v9 != 14) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *v10;
  uint64_t v12 = *(uint64_t *)((char *)v10 + 6);
  if (v11 != 0x656C6163735F7868 || v12 != 0x74666968735F656CLL) {
    goto LABEL_10;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v33, 2, 1, 1, 1);
  std::string::size_type v14 = v33.__r_.__value_.__r.__words[0];
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 424);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  if (v15)
  {
    nitro::nitro_function::nitro_function(v15);
    std::string::size_type v16 = *(void *)(a1 + 416);
  }
  else
  {
    std::string::size_type v16 = v14;
  }
  if (a5 != 4 * *(int *)(v16 + 8))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v19 = a5;
    uint64_t v20 = exception;
    std::to_string(&v30, v19);
    long long v21 = std::string::insert(&v30, 0, "Unexpected size ");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    unint64_t v23 = std::string::append(&v31, "/");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v29, 4 * *(int *)(*(void *)(a1 + 416) + 8));
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v25 = &v29;
    }
    else {
      std::string v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    std::string v27 = std::string::append(&v32, (const std::string::value_type *)v25, size);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v20, &v33);
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v17 = *(void **)(v16 + 16);

  memcpy(v17, a4, a5);
}

void sub_1927E2C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>::clear_weights(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[51];
  a1[50] = 0;
  a1[51] = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[53];
  a1[52] = 0;
  a1[53] = 0;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  void (***v18)(uint64_t *__return_ptr, void);
  long long v19;
  std::__shared_weak_count *v20;
  uint64_t v21[2];
  _OWORD v22[2];
  long long v23;
  void v24[3];
  uint64_t v25;
  std::__shared_weak_count *v26;
  void v27[2];
  uint64_t v28;
  std::__shared_weak_count *v29;
  long long v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  unint64_t v6 = *a4;
  unint64_t v7 = **a4;
  if (v7)
  {
    if (v8)
    {
      int v9 = (std::__shared_weak_count *)v6[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v9 = 0;
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *a3;
  if (*(void *)v10)
  {
    if (v11)
    {
      uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = 0;
  }
  if (!*(void *)(a1 + 432))
  {
    LODWORD(v24[0]) = 0;
    Espresso::create_context((int *)v24, &v30);
    unint64_t v19 = v30;
    std::string v30 = 0uLL;
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 440);
    *(_OWORD *)(a1 + 432) = v19;
    if (v20)
    {
      nitro::nitro_function::nitro_function(v20);
      if (*((void *)&v30 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v30 + 1));
      }
    }
  }
  v27[0] = v8;
  v27[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::sync_copy_to_host(&v28, v27);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*v11 + 56))(&v25, v11);
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(v22, (void *)(a1 + 432), &v28);
  std::string v30 = v22[0];
  unint64_t v23 = 0uLL;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
  Espresso::layer_data::layer_data(v24, &v30, (uint64_t *)&v23);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v23, (void *)(a1 + 432), &v25);
  std::string v30 = v23;
  v21[0] = 0;
  v21[1] = 0;
  std::string::size_type v14 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  Espresso::layer_data::layer_data(v22, &v30, v21);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  Espresso::batchnorm_kernel_cpu::__launch(a1, v15, (uint64_t)v22, (uint64_t)v24);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = v25;
  unint64_t v17 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = (void (***)(uint64_t *__return_ptr, void))v11[9];
  *(void *)&std::string v30 = MEMORY[0x1E4F143A8];
  *((void *)&v30 + 1) = 3321888768;
  std::string v31 = ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_5325;
  std::string v32 = &__block_descriptor_64_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE_e10_v16__0r_v8l;
  std::string v33 = v11;
  int v34 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v16;
  int8x16_t v36 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_context::compute_batch_sync(v18, &v30);
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  *(void *)&std::string v30 = v22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  *(void *)&std::string v30 = v24;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1927E3118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_1927E3200()
{
  if (!v0) {
    JUMPOUT(0x1927E31E0);
  }
  JUMPOUT(0x1927E31DCLL);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>::~hxsim_cpu_kernel_wrapper(Espresso::generic_batchnorm_kernel *this)
{
  *(void *)this = &unk_1EE329F60;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3507D8;
  long long v4 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE329F60;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3507D8;
  long long v4 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::batchnorm_kernel_cpu,Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6 = operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1EE3815E0;
  long long v12 = *a2;
  long long v13 = a2[1];
  long long v14 = a2[2];
  int v15 = *((_DWORD *)a2 + 12);
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 3) = &unk_1EE329B58;
  *((void *)v6 + 45) = 0;
  *((void *)v6 + 46) = 0;
  *((_OWORD *)v6 + 19) = v12;
  *((_OWORD *)v6 + 20) = v13;
  *((_OWORD *)v6 + 21) = v14;
  *((_DWORD *)v6 + 88) = v15;
  unsigned int v7 = *((_DWORD *)v6 + 76);
  if (v7 >= 2 && v7 != 3)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, *((_DWORD *)v6 + 76));
    uint64_t v10 = std::string::insert(&v16, 0, "Elwise op not supported ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927E354C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      shared_owners = (std::__shared_weak_count *)v27[15].__shared_owners_;
      if (shared_owners) {
        nitro::nitro_function::nitro_function(shared_owners);
      }
      Espresso::base_kernel::~base_kernel(v28);
      std::__shared_weak_count::~__shared_weak_count(v27);
      operator delete(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 368);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3815E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3815E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x1A0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1EE3816C0;
  long long v11 = a2[2];
  *(_OWORD *)long long v12 = a2[3];
  *(_OWORD *)&v12[12] = *(long long *)((char *)a2 + 60);
  long long v9 = *a2;
  long long v10 = a2[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = *(_OWORD *)v12;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)&v12[12];
  *((void *)v6 + 3) = &unk_1EE32A110;
  *((_OWORD *)v6 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927E375C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

char *Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 14) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 14)
  {
    return result;
  }
  if (*a3 == 0x656C6163735F7868 && *(uint64_t *)((char *)a3 + 6) == 0x74666968735F656CLL)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v28, 2, 1, 1, 1);
    long long v10 = (std::string::size_type *)(v7 + 360);
    std::string::size_type v11 = v28.__r_.__value_.__r.__words[0];
    long long v12 = (std::__shared_weak_count *)*((void *)v7 + 46);
    *(_OWORD *)(v7 + 360) = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v25, a5);
      std::string v16 = std::string::insert(&v25, 0, "Unexpected size ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      long long v18 = std::string::append(&v26, "/");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v24, 4 * *(int *)(*v10 + 8));
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v24;
      }
      else {
        uint64_t v20 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v24.__r_.__value_.__l.__size_;
      }
      long long v22 = std::string::append(&v27, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v28);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1927E3970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>::clear_weights(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 160));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(0);
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v2 = (std::__shared_weak_count *)v1[26];
  v1[25] = 0;
  v1[26] = 0;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  void (***v18)(uint64_t *__return_ptr, void);
  long long v19;
  std::__shared_weak_count *v20;
  uint64_t v21[2];
  _OWORD v22[2];
  long long v23;
  void v24[3];
  uint64_t v25;
  std::__shared_weak_count *v26;
  void v27[2];
  uint64_t v28;
  std::__shared_weak_count *v29;
  long long v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  unint64_t v6 = *a4;
  uint64_t v7 = **a4;
  if (v7)
  {
    if (v8)
    {
      long long v9 = (std::__shared_weak_count *)v6[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      long long v9 = 0;
    }
  }
  else
  {
    long long v9 = 0;
    int v8 = 0;
  }
  uint64_t v10 = *a3;
  if (*(void *)v10)
  {
    if (v11)
    {
      long long v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      long long v12 = 0;
    }
  }
  else
  {
    long long v12 = 0;
    std::string::size_type v11 = 0;
  }
  if (!*(void *)(a1 + 376))
  {
    LODWORD(v24[0]) = 0;
    Espresso::create_context((int *)v24, &v30);
    long long v19 = v30;
    int v30 = 0uLL;
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 384);
    *(_OWORD *)(a1 + 376) = v19;
    if (v20)
    {
      nitro::nitro_function::nitro_function(v20);
      if (*((void *)&v30 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v30 + 1));
      }
    }
  }
  v27[0] = v8;
  v27[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::sync_copy_to_host(&v28, v27);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*v11 + 56))(&v25, v11);
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(v22, (void *)(a1 + 376), &v28);
  int v30 = v22[0];
  long long v23 = 0uLL;
  std::string::size_type v13 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
  Espresso::layer_data::layer_data(v24, &v30, (uint64_t *)&v23);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v23, (void *)(a1 + 376), &v25);
  int v30 = v23;
  v21[0] = 0;
  v21[1] = 0;
  long long v14 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  Espresso::layer_data::layer_data(v22, &v30, v21);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  Espresso::general_padding_kernel_cpu::__launch(a1, v15, (uint64_t)v22, (uint64_t)v24);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = v25;
  long long v17 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v18 = (void (***)(uint64_t *__return_ptr, void))v11[9];
  *(void *)&int v30 = MEMORY[0x1E4F143A8];
  *((void *)&v30 + 1) = 3321888768;
  std::string v31 = ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_5325;
  std::string v32 = &__block_descriptor_64_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE_e10_v16__0r_v8l;
  std::string v33 = v11;
  int v34 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v16;
  int8x16_t v36 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_context::compute_batch_sync(v18, &v30);
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  *(void *)&int v30 = v22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  *(void *)&int v30 = v24;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1927E3E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_1927E3EF0()
{
  if (!v0) {
    JUMPOUT(0x1927E3ED0);
  }
  JUMPOUT(0x1927E3ECCLL);
}

void Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>::~hxsim_cpu_kernel_wrapper(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE32A110;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE32A110;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3816C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::hxsim_cpu_kernel_wrapper<Espresso::general_padding_kernel_cpu,Espresso::generic_general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3816C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1EE381618;
  long long v9 = *a2;
  long long v10 = a2[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((void *)v6 + 3) = &unk_1EE329CB0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927E4134(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::context_transfer_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381618;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  long long v4 = operator new(0x170uLL);
  v4[1] = 0;
  v4[2] = 0;
  *long long v4 = &unk_1EE381538;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  *((unsigned char *)v4 + 364) = 0;
  *((_WORD *)v4 + 1std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0;
  *((_DWORD *)v4 + 76) = 0;
  *((_DWORD *)v4 + 84) = 0;
  v4[3] = &unk_1EE3296A0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1927E4280(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381538;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x228uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1EE381500;
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 55) = 0;
  *((void *)v6 + 56) = 0;
  *((void *)v6 + 3) = &unk_1EE329508;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 4std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 4std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v15;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 360) = v11;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927E442C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381500;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso11HXSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x2D8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1EE3815A8;
  long long v17 = a2[8];
  *(_OWORD *)long long v18 = a2[9];
  *(void *)&v18[16] = *((void *)a2 + 20);
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v16 = a2[7];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v7 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v6 + 3, a1);
  *((void *)v6 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((void *)v6 + 3) = &unk_1EE3298D8;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 696) = 0u;
  *(_OWORD *)(v6 + 712) = 0u;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(void *)(v6 + 485) = *(void *)&v18[13];
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 4std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = *(_OWORD *)v18;
  *(_OWORD *)(v6 + 4std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927E4600(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
}

void Espresso::HXSimEngine::convolution_kernel::~convolution_kernel(Espresso::HXSimEngine::convolution_kernel *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 85);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  uint64_t vars8;

  Espresso::HXSimEngine::convolution_kernel::~convolution_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3815A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3815A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::HXSimEngine::engine::~engine(Espresso::HXSimEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::HXSimEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  long long v4 = operator new(0xA8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *long long v4 = &unk_1EE381768;
  uint64_t v5 = Espresso::abstract_context::abstract_context((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_1EE32A318;
  *((unsigned char *)v4 + 68) = 0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1927E487C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381768;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 Espresso::HXSimEngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  unint64_t v6 = operator new(0xE8uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *unint64_t v6 = &unk_1EE381570;
  uint64_t v7 = Espresso::HXEngine::blob_container::blob_container((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE3297F8;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1927E49C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXSimEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381570;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXSimEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::wg_transform_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_wg_transform_4_in_kernel_::kernel_type_str(Espresso::generic_wg_transform_4_in_kernel_ *this)
{
  return "wg_tx_in";
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _OWORD **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v44 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  *(_OWORD *)unint64_t __val = **a2;
  long long v34 = v7;
  uint64_t v35 = v6;
  int8x16_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v36, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  if (*(unsigned char *)(a1 + 504))
  {
    int v9 = __val[0];
    int v8 = __val[1];
    int v10 = *(__int16 *)(a1 + 428);
    int v11 = *(__int16 *)(a1 + 430);
    int v12 = *(_DWORD *)(a1 + 280);
    switch(*(_WORD *)(a1 + 408))
    {
      case 0xFFFF:
      case 0:
        int v9 = (__val[0] - v12 + *(__int16 *)(a1 + 416) + *(__int16 *)(a1 + 418)) / v10 + 1;
        int v13 = __val[1] - v12 + *(__int16 *)(a1 + 420) + *(__int16 *)(a1 + 422);
        goto LABEL_25;
      case 1:
      case 4:
        int v9 = (__val[0] - 1) / v10 + 1;
        int v13 = __val[1] - 1;
        goto LABEL_25;
      case 2:
        int v9 = (__val[0] - v12) / v10 + 1;
        int v13 = __val[1] - v12;
LABEL_25:
        int v8 = v13 / v11 + 1;
        break;
      case 3:
        int v16 = v12 + (v12 < 0);
        int v17 = ~(v16 & ~(v16 >> 31));
        if (v10 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = *(__int16 *)(a1 + 428);
        }
        if (v11 <= 1) {
          int v19 = 1;
        }
        else {
          int v19 = *(__int16 *)(a1 + 430);
        }
        BOOL v20 = v10 < 0;
        if (v10 < 0) {
          int v21 = 1;
        }
        else {
          int v21 = v18;
        }
        int v22 = v17 | 1;
        int v23 = (__val[0] + v22) / v21;
        if (v20) {
          int v9 = ~v23;
        }
        else {
          int v9 = v23 + 1;
        }
        BOOL v24 = v11 < 0;
        if (v11 < 0) {
          int v25 = 1;
        }
        else {
          int v25 = v19;
        }
        int v26 = (__val[1] + v22) / v25;
        if (v24) {
          int v8 = ~v26;
        }
        else {
          int v8 = v26 + 1;
        }
        break;
      default:
        break;
    }
    int v14 = v9 & ~(v9 >> 31);
    int v15 = v8 & ~(v8 >> 31);
    *(_DWORD *)(a1 + 296) = v14;
    *(_DWORD *)(a1 + 300) = v15;
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 296);
    int v15 = *(_DWORD *)(a1 + 300);
  }
  int v27 = *(_DWORD *)(a1 + 284);
  __val[0] = (v14 - 1) / v27 + 1;
  __val[1] = (v15 - 1) / v27 + 1;
  if (__val[3] != 1)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v32, __val[3]);
    int v30 = std::string::insert(&v32, 0, "Invalid shape: ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    *(void *)&v39[16] = *((void *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v39 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v39);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __val[3] = (v27 + 2) * (v27 + 2);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)__val;
  *(_OWORD *)&v39[16] = v34;
  uint64_t v40 = v35;
  std::vector<int> __p = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v36, (uint64_t)v37, (v37 - (unsigned char *)v36) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v32.__r_.__value_.__s.__data_[8] = 0;
  std::string v28 = (char *)operator new(0x40uLL);
  *a3 = v28;
  a3[1] = v28;
  a3[2] = v28 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v39, &v44, (uint64_t)v28);
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
}

void sub_1927E4D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a21) {
        operator delete(a21);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  long long v7 = *a4;
  int v8 = **a4;
  if (!v8)
  {
    int v9 = 0;
    goto LABEL_6;
  }
  if (!v9)
  {
LABEL_6:
    int v10 = 0;
    goto LABEL_7;
  }
  int v10 = (std::__shared_weak_count *)v7[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v11 = *a3;
  if (!*(void *)v11)
  {
    int v12 = 0;
    goto LABEL_12;
  }
  if (!v12)
  {
LABEL_12:
    int v13 = 0;
    goto LABEL_13;
  }
  int v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  if (!*(void *)a2)
  {
    int v14 = 0;
    goto LABEL_18;
  }
  if (!v14)
  {
LABEL_18:
    int v15 = 0;
    goto LABEL_19;
  }
  int v15 = *(std::__shared_weak_count **)(a2 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  int v16 = *(const void **)(a1 + 8);
  if (!v16)
  {
    int v17 = 0;
    goto LABEL_24;
  }
  if (!v17)
  {
LABEL_24:
    int v18 = 0;
    goto LABEL_25;
  }
  int v18 = *(std::__shared_weak_count **)(a1 + 16);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_25:
  id v19 = v14[19];
  __int16 v60 = 0;
  memset(v59, 0, sizeof(v59));
  *(_OWORD *)unint64_t __val = 0u;
  long long v61 = xmmword_192DCA4E0;
  __val[3] = v9[4];
  int v20 = *((_DWORD *)v12 + 2);
  __val[2] = (int)v12[3];
  __val[0] = v20;
  __val[1] = __val[2] * v20;
  *(void *)((char *)v59 + 12) = *((void *)v9 + 1);
  int v21 = *(__int16 *)(a1 + 314);
  DWORD1(v59[0]) = *(__int16 *)(a1 + 310);
  DWORD2(v59[0]) = v21;
  DWORD2(v59[1]) = 0;
  if (*(void *)(a1 + 328)) {
    goto LABEL_44;
  }
  uint64_t v46 = v17;
  uint64_t v47 = v18;
  int v48 = v15;
  uint64_t v49 = v13;
  uint64_t v50 = v10;
  int v22 = (MTLFunctionConstantValues *)objc_opt_new();
  int v23 = v22;
  __int16 v57 = __val[3];
  unsigned int v24 = __val[3] + 2;
  if (__val[3] >= 1) {
    unsigned int v24 = __val[3] - 1;
  }
  __int16 v56 = (v24 >> 2) + 1;
  __int16 v55 = 0;
  [(MTLFunctionConstantValues *)v22 setConstantValue:&v57 type:41 atIndex:0];
  [(MTLFunctionConstantValues *)v23 setConstantValue:&v56 type:41 atIndex:1];
  [(MTLFunctionConstantValues *)v23 setConstantValue:&v55 type:41 atIndex:2];
  int v25 = objc_msgSend(NSString, "stringWithFormat:", @"k%dx%d_w%dx%d", *(unsigned int *)(a1 + 280), *(unsigned int *)(a1 + 280), *(unsigned int *)(a1 + 284), *(unsigned int *)(a1 + 284));
  int v26 = *(const void **)(a1 + 8);
  if (v26)
  {
    if (v27)
    {
      std::string v28 = *(std::__shared_weak_count **)(a1 + 16);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_34;
    }
  }
  else
  {
    int v27 = 0;
  }
  std::string v28 = 0;
LABEL_34:
  if (*((_DWORD *)v27 + 55) == 1)
  {
    uint64_t v29 = [v25 stringByAppendingString:@"_array"];

    int v25 = (void *)v29;
  }
  int v30 = [NSString stringWithFormat:@"wg_transform4_in_%@", v25];
  std::to_string(&v54, __val[3]);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v31 = &v54;
  }
  else {
    long long v31 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  std::string v32 = [NSString stringWithUTF8String:v31];
  uint64_t v33 = Espresso::context_metal::kernel_for_function(v27, v30, v32, v23);
  int v34 = *(void **)(a1 + 328);
  *(void *)(a1 + 328) = v33;

  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }

  int v10 = v50;
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }

  int v15 = v48;
  int v13 = v49;
  int v17 = v46;
  int v18 = v47;
LABEL_44:
  if (*(void *)(a1 + 320)) {
    goto LABEL_55;
  }
  if ((*(unsigned int (**)(float *))(*(void *)v12 + 32))(v12) == 2
    || (*(unsigned int (**)(float *))(*(void *)v12 + 32))(v12) == 4)
  {
    float v35 = v12[28] / *((float *)v9 + 28);
    *(float *)&long long v61 = v35;
    int v36 = v9[29];
    if (v36 != 1)
    {
      if (v36) {
        goto LABEL_54;
      }
      float v37 = 2.0;
      if (*((_DWORD *)v12 + 29) != 1) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    if (!*((_DWORD *)v12 + 29))
    {
      float v37 = 0.5;
LABEL_53:
      *(float *)&long long v61 = v35 * v37;
    }
  }
LABEL_54:
  uint64_t v38 = [v17[18] newBufferWithBytes:__val length:68 options:0];
  uint64_t v39 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = v38;

LABEL_55:
  if (!*(void *)(a1 + 328))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  objc_msgSend(v19, "setComputePipelineState:");
  [v19 setTexture:*((void *)v9 + 21) atIndex:0];
  [v19 setTexture:*((void *)v12 + 21) atIndex:1];
  [v19 setBuffer:*(void *)(a1 + 320) offset:0 atIndex:0];
  int v40 = __val[0] + 2;
  if (__val[0] >= 1) {
    int v40 = __val[0] - 1;
  }
  uint64_t v41 = (v40 >> 2) + 1;
  int v42 = __val[2] + 2;
  if (__val[2] >= 1) {
    int v42 = __val[2] - 1;
  }
  uint64_t v43 = (v42 >> 2) + 1;
  int v44 = __val[3] + 6;
  if (__val[3] >= 1) {
    int v44 = __val[3] - 1;
  }
  v53[0] = v41;
  v53[1] = v43;
  v53[2] = (v44 >> 3) + 1;
  int64x2_t v51 = vdupq_n_s64(4uLL);
  uint64_t v52 = 2;
  [v19 dispatchThreadgroups:v53 threadsPerThreadgroup:&v51];

  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927E54BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }

  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::~generic_wg_transform_4_in_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::wg_transform_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

const char *Espresso::generic_wg_transform_4_out_kernel_::kernel_type_str(Espresso::generic_wg_transform_4_out_kernel_ *this)
{
  return "wg_tx_out";
}

BOOL Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::supports_weight_key(uint64_t a1, int **a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v3 = a2[1];
    if (v3 != (int *)4)
    {
      if (v3 == (int *)9) {
        return *(void *)*a2 == 0x6C6163735F74756FLL && *((unsigned char *)*a2 + 8) == 101;
      }
      if (v3 != (int *)12) {
        return 0;
      }
      a2 = (int **)*a2;
      goto LABEL_10;
    }
    int v8 = **a2;
  }
  else
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 4)
    {
      if (v2 == 9)
      {
        int v4 = *((unsigned __int8 *)a2 + 8);
        BOOL v5 = *a2 == (int *)0x6C6163735F74756FLL;
        int v6 = 101;
        return v5 && v4 == v6;
      }
      if (v2 != 12) {
        return 0;
      }
LABEL_10:
      int v4 = *((_DWORD *)a2 + 2);
      BOOL v5 = *a2 == (int *)0x63735F6E695F7868;
      int v6 = 1936026721;
      return v5 && v4 == v6;
    }
    int v8 = *(_DWORD *)a2;
  }
  return v8 == 1935763810;
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, int **a3, uint64_t a4, uint64_t a5)
{
  if (*((char *)a3 + 23) < 0)
  {
    int v9 = a3[1];
    if (v9 != (int *)4)
    {
      if (v9 != (int *)9)
      {
        if (v9 != (int *)12) {
          return;
        }
        a3 = (int **)*a3;
        goto LABEL_10;
      }
      if (*(void *)*a3 != 0x6C6163735F74756FLL || *((unsigned char *)*a3 + 8) != 101) {
        return;
      }
      goto LABEL_32;
    }
    int v17 = **a3;
LABEL_38:
    if (v17 != 1935763810) {
      return;
    }
    int v22 = (const void *)a1[1];
    if (!v22
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    int v13 = (std::__shared_weak_count *)a1[2];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = [v23[18] newBufferWithBytes:a4 length:a5 options:0];
    int v15 = (void *)a1[47];
    a1[47] = v24;
    goto LABEL_44;
  }
  int v8 = *((unsigned __int8 *)a3 + 23);
  if (v8 == 4)
  {
    int v17 = *(_DWORD *)a3;
    goto LABEL_38;
  }
  if (v8 != 9)
  {
    if (v8 != 12) {
      return;
    }
LABEL_10:
    if (*a3 != (int *)0x63735F6E695F7868 || *((_DWORD *)a3 + 2) != 1936026721) {
      return;
    }
    uint64_t v11 = (const void *)a1[1];
    if (!v11
    {
      int v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Espresso: wrong_context_type");
      v27->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    int v13 = (std::__shared_weak_count *)a1[2];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = [v12[18] newBufferWithBytes:a4 length:a5 options:0];
    int v15 = (void *)a1[49];
    a1[49] = v14;
    goto LABEL_44;
  }
  if (*a3 != (int *)0x6C6163735F74756FLL || *((unsigned char *)a3 + 8) != 101) {
    return;
  }
LABEL_32:
  id v19 = (const void *)a1[1];
  if (!v19
  {
    int v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Espresso: wrong_context_type");
    v26->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  int v13 = (std::__shared_weak_count *)a1[2];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = [v20[18] newBufferWithBytes:a4 length:a5 options:0];
  int v15 = (void *)a1[48];
  a1[48] = v21;
LABEL_44:

  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
  }
}

void sub_1927E5AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  __cxa_begin_catch(exception_object);
  __cxa_end_catch();
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v22 + 1) = *MEMORY[0x1E4F143B8];
  BOOL v5 = *a2;
  long long v9 = **a2;
  long long v10 = (*a2)[1];
  uint64_t v11 = *((void *)*a2 + 4);
  int v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v12, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  uint64_t v6 = *(void *)(a1 + 400);
  if (v6)
  {
    LODWORD(v9) = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 320))(v6) + 16);
    long long v7 = (_DWORD *)((*(uint64_t (**)(void))(**(void **)(a1 + 400) + 320))(*(void *)(a1 + 400)) + 20);
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(a1 + 320);
    long long v7 = (_DWORD *)(a1 + 324);
  }
  DWORD1(v9) = *v7;
  HIDWORD(v9) = 1;
  v17[0] = v9;
  v17[1] = v10;
  uint64_t v18 = v11;
  std::vector<int> __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v12, (uint64_t)v13, (v13 - (unsigned char *)v12) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v15 = a3;
  char v16 = 0;
  int v8 = (char *)operator new(0x40uLL);
  *a3 = v8;
  a3[1] = v8;
  a3[2] = v8 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v17, &v22, (uint64_t)v8);
  if (__p)
  {
    int v20 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    int v13 = v12;
    operator delete(v12);
  }
}

void sub_1927E5D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v27 = v26;
  *(void *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::clear_weights(Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel *this)
{
  int v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = v2;
  uint64_t v3 = (void *)*((void *)this + 47);
  *((void *)this + 47) = 0;
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  long long v7 = *a4;
  int v8 = **a4;
  if (!v8)
  {
    long long v9 = 0;
    goto LABEL_6;
  }
  if (!v9)
  {
LABEL_6:
    long long v10 = 0;
    goto LABEL_7;
  }
  long long v10 = (std::__shared_weak_count *)v7[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v11 = *a3;
  if (!*(void *)v11)
  {
    int v12 = 0;
    goto LABEL_12;
  }
  if (!v12)
  {
LABEL_12:
    int v13 = 0;
    goto LABEL_13;
  }
  int v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  if (!*(void *)a2)
  {
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  if (!v14)
  {
LABEL_18:
    int v15 = 0;
    goto LABEL_19;
  }
  int v15 = *(std::__shared_weak_count **)(a2 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  char v16 = *(const void **)(a1 + 8);
  if (!v16)
  {
    uint64_t v17 = 0;
    goto LABEL_24;
  }
  if (!v17)
  {
LABEL_24:
    uint64_t v18 = 0;
    goto LABEL_25;
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 16);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_25:
  id v19 = v14[19];
  __int16 v68 = 0;
  *(_OWORD *)unint64_t __val = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  long long v69 = xmmword_192DCA4E0;
  __val[0] = *((_DWORD *)v12 + 4);
  __int16 v68 = *(_WORD *)(a1 + 332);
  int v20 = v9[2];
  DWORD2(v65) = v9[3];
  LODWORD(v65) = v20;
  DWORD1(v65) = DWORD2(v65) * v20;
  *(void *)((char *)&v67 + 4) = *((void *)v12 + 1);
  if (*(void *)(a1 + 368)) {
    goto LABEL_47;
  }
  unint64_t v53 = v17;
  std::string v54 = v18;
  __int16 v55 = v15;
  __int16 v56 = v13;
  __int16 v57 = v10;
  uint64_t v21 = (MTLFunctionConstantValues *)objc_opt_new();
  long long v22 = v21;
  __int16 v64 = __val[0];
  unsigned int v23 = __val[0] + 2;
  if (__val[0] >= 1) {
    unsigned int v23 = __val[0] - 1;
  }
  __int16 v63 = (v23 >> 2) + 1;
  __int16 v62 = 0;
  [(MTLFunctionConstantValues *)v21 setConstantValue:&v64 type:41 atIndex:0];
  [(MTLFunctionConstantValues *)v22 setConstantValue:&v63 type:41 atIndex:1];
  [(MTLFunctionConstantValues *)v22 setConstantValue:&v62 type:41 atIndex:2];
  uint64_t v24 = objc_msgSend(NSString, "stringWithFormat:", @"k%dx%d_w%dx%d", *(unsigned int *)(a1 + 304), *(unsigned int *)(a1 + 304), *(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 308));
  if ((*(unsigned int (**)(void *))(*(void *)v12 + 32))(v12) == 2
    || (*(unsigned int (**)(void *))(*(void *)v12 + 32))(v12) == 4)
  {
    uint64_t v25 = [v24 stringByAppendingString:@"_u8"];

    uint64_t v24 = (void *)v25;
  }
  uint64_t v26 = *(const void **)(a1 + 8);
  if (v26)
  {
    if (v27)
    {
      std::string v28 = *(std::__shared_weak_count **)(a1 + 16);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  std::string v28 = 0;
LABEL_37:
  if (*((_DWORD *)v27 + 55) == 1)
  {
    uint64_t v29 = [v24 stringByAppendingString:@"_array"];

    uint64_t v24 = (void *)v29;
  }
  int v30 = [NSString stringWithFormat:@"wg_transform4_out_%@", v24];
  std::to_string(&v61, __val[0]);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v31 = &v61;
  }
  else {
    long long v31 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  std::string v32 = [NSString stringWithUTF8String:v31];
  uint64_t v33 = Espresso::context_metal::kernel_for_function(v27, v30, v32, v22);
  int v34 = *(void **)(a1 + 368);
  *(void *)(a1 + 368) = v33;

  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }

  long long v10 = v57;
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }

  int v15 = v55;
  int v13 = v56;
  uint64_t v17 = v53;
  uint64_t v18 = v54;
LABEL_47:
  if (*(void *)(a1 + 360)) {
    goto LABEL_59;
  }
  if ((*(unsigned int (**)(void *))(*(void *)v12 + 32))(v12) != 2
    && (*(unsigned int (**)(void *))(*(void *)v12 + 32))(v12) != 4)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&long long v69 = _D0;
    goto LABEL_58;
  }
  float v35 = *((float *)v12 + 28);
  *(void *)&long long v69 = LODWORD(v35) | 0x3F80000000000000;
  int v36 = v9[29];
  if (v36 != 1)
  {
    if (v36 || *((_DWORD *)v12 + 29) != 1) {
      goto LABEL_58;
    }
    float v37 = v35 + v35;
    goto LABEL_56;
  }
  if (!*((_DWORD *)v12 + 29))
  {
    float v37 = v35 * 0.5;
LABEL_56:
    *(float *)&long long v69 = v37;
  }
LABEL_58:
  uint64_t v43 = [v17[18] newBufferWithBytes:&v65 length:68 options:0];
  int v44 = *(void **)(a1 + 360);
  *(void *)(a1 + 360) = v43;

LABEL_59:
  uint64_t v45 = *(void **)(a1 + 376);
  if (!v45)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bias buffer not set");
    goto LABEL_83;
  }
  unint64_t v46 = [v45 length];
  if (v46 < 4 * __val[0])
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bias buffer too small");
    goto LABEL_83;
  }
  if (!*(void *)(a1 + 368))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_83:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  objc_msgSend(v19, "setComputePipelineState:");
  [v19 setTexture:*((void *)v9 + 21) atIndex:0];
  [v19 setTexture:*((void *)v12 + 21) atIndex:1];
  [v19 setBuffer:*(void *)(a1 + 360) offset:0 atIndex:0];
  [v19 setBuffer:*(void *)(a1 + 376) offset:0 atIndex:1];
  if ((*(unsigned int (**)(void *))(*(void *)v12 + 32))(v12) == 2
    || (*(unsigned int (**)(void *))(*(void *)v12 + 32))(v12) == 4)
  {
    [v19 setBuffer:*(void *)(a1 + 392) offset:0 atIndex:2];
  }
  int v47 = v65 + 2;
  if ((int)v65 >= 1) {
    int v47 = v65 - 1;
  }
  uint64_t v48 = (v47 >> 2) + 1;
  int v49 = DWORD2(v65) + 2;
  if (SDWORD2(v65) >= 1) {
    int v49 = DWORD2(v65) - 1;
  }
  uint64_t v50 = (v49 >> 2) + 1;
  int v51 = __val[0] + 2;
  if (__val[0] >= 1) {
    int v51 = __val[0] - 1;
  }
  v60[0] = v48;
  v60[1] = v50;
  v60[2] = (v51 >> 2) + 1;
  int64x2_t v58 = vdupq_n_s64(4uLL);
  uint64_t v59 = 1;
  [v19 dispatchThreadgroups:v60 threadsPerThreadgroup:&v58];

  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927E65B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }

  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel::~generic_wg_transform_4_out_kernel(Espresso::MetalLowmemEngine::generic_wg_transform_4_out_kernel *this)
{
  *(void *)this = &unk_1EE34B980;
  int v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_wg_transform_4_out_kernel_::~generic_wg_transform_4_out_kernel_(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE34B980;
  int v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_wg_transform_4_out_kernel_::~generic_wg_transform_4_out_kernel_(this);
}

const char *Espresso::generic_wg_transform_weights_3x3_kernel_::kernel_type_str(Espresso::generic_wg_transform_weights_3x3_kernel_ *this)
{
  return "wg_tx_transform_weights";
}

uint64_t Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::generic_wg_transform_4_in_kernel(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 280) = xmmword_192DCA4F0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 304) = 0;
  *(void *)(v5 + 312) = 0;
  *(void *)uint64_t v5 = &unk_1EE3687A0;
  long long v6 = *a3;
  long long v7 = a3[1];
  *(void *)(v5 + 312) = *((void *)a3 + 4);
  *(_OWORD *)(v5 + 280) = v6;
  *(_OWORD *)(v5 + 296) = v7;
  *(void *)uint64_t v5 = &unk_1EE34B828;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v5 + 336));
  return a1;
}

void Espresso::MetalLowmemEngine::wg_transform_weights_cpu(uint64_t *a1, void *a2, uint64_t a3, std::__shared_weak_count *a4, _DWORD *a5, uint64_t a6)
{
  if (a5[12] != 3 || a5[13] != 3)
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v78, a5[12]);
    long long v67 = std::string::insert(&v78, 0, "Kernel size not supported ");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    long long v69 = std::string::append(&v79, "/");
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v77, a5[13]);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v71 = &v77;
    }
    else {
      BOOL v71 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v77.__r_.__value_.__l.__size_;
    }
    long long v73 = std::string::append(&v80, (const std::string::value_type *)v71, size);
    long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v81);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v12 = *(_DWORD *)(a6 + 4);
  switch(v12)
  {
    case 6:
      if (a4) {
        atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = *(unsigned int *)(a3 + 16);
      uint64_t v36 = *(unsigned int *)(a3 + 20);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v81, 8, 8, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20));
      std::string::size_type v17 = v81.__r_.__value_.__r.__words[0];
      if ((int)v36 >= 1)
      {
        int v37 = 0;
        uint64_t v38 = 0;
        v15.n128_u32[0] = -2.0;
        v16.n128_u32[0] = 9.0;
        do
        {
          if ((int)v35 >= 1)
          {
            uint64_t v39 = 0;
            uint64_t v40 = *(void *)(a3 + 24) + 36 * (int)v35 * (int)v38;
            uint64_t v41 = *(void *)(v17 + 24) + 4 * v37 + 128;
            uint64_t v42 = v35;
            do
            {
              uint64_t v43 = v40 + (v39 >> 30);
              *(_DWORD *)(v41 - 128) = *(_DWORD *)v43;
              *(float *)(v41 - 1std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = (float)((float)((float)(*(float *)v43 * -2.0) / 9.0)
                                            - (float)((float)(*(float *)(v43 + 4) + *(float *)(v43 + 4)) / 9.0))
                                    - (float)((float)(*(float *)(v43 + 8) + *(float *)(v43 + 8)) / 9.0);
              *(float *)(v41 - 120) = (float)((float)((float)(*(float *)(v43 + 4) + *(float *)(v43 + 4)) / 9.0)
                                            - (float)((float)(*(float *)v43 + *(float *)v43) / 9.0))
                                    - (float)((float)(*(float *)(v43 + 8) + *(float *)(v43 + 8)) / 9.0);
              *(float *)(v41 - 116) = (float)((float)(*(float *)v43 / 90.0) + (float)(*(float *)(v43 + 4) / 45.0))
                                    + (float)((float)(*(float *)(v43 + 8) + *(float *)(v43 + 8)) / 45.0);
              *(float *)(v41 - std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112) = (float)((float)(*(float *)v43 / 90.0) - (float)(*(float *)(v43 + 4) / 45.0))
                                    + (float)((float)(*(float *)(v43 + 8) + *(float *)(v43 + 8)) / 45.0);
              *(float *)(v41 - 108) = (float)((float)((float)(*(float *)v43 * 32.0) / 45.0)
                                            + (float)((float)(*(float *)(v43 + 4) * 16.0) / 45.0))
                                    + (float)((float)(*(float *)(v43 + 8) * 8.0) / 45.0);
              *(float *)(v41 - 104) = (float)((float)((float)(*(float *)v43 * 32.0) / 45.0)
                                            - (float)((float)(*(float *)(v43 + 4) * 16.0) / 45.0))
                                    + (float)((float)(*(float *)(v43 + 8) * 8.0) / 45.0);
              *(_DWORD *)(v41 - 100) = *(_DWORD *)(v43 + 8);
              *(float *)(v41 - 96) = (float)((float)((float)(*(float *)v43 * -2.0) / 9.0)
                                           - (float)((float)(*(float *)(v43 + 12) + *(float *)(v43 + 12)) / 9.0))
                                   - (float)((float)(*(float *)(v43 + 24) + *(float *)(v43 + 24)) / 9.0);
              *(float *)(v41 - 92) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 4.0) / 81.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * 4.0) / 81.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / 81.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 4.0)
                                                                                   / 81.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 4.0) / 81.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 4.0) / 81.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / 81.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 4.0) / 81.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / 81.0);
              *(float *)(v41 - 88) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 4.0) / 81.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * 4.0) / 81.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / 81.0))
                                                                           - (float)((float)(*(float *)(v43 + 4) * 4.0)
                                                                                   / 81.0))
                                                                   - (float)((float)(*(float *)(v43 + 16) * 4.0) / 81.0))
                                                           - (float)((float)(*(float *)(v43 + 28) * 4.0) / 81.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / 81.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 4.0) / 81.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / 81.0);
              *(float *)(v41 - 84) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 / -405.0)
                                                                                           + (float)(*(float *)(v43 + 12) / -405.0))
                                                                                   + (float)(*(float *)(v43 + 24)
                                                                                           / -405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4)
                                                                                           + *(float *)(v43 + 4))
                                                                                   / -405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16)
                                                                                   + *(float *)(v43 + 16))
                                                                           / -405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28))
                                                                   / -405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 4.0) / -405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / -405.0);
              *(float *)(v41 - 80) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 / -405.0)
                                                                                           + (float)(*(float *)(v43 + 12) / -405.0))
                                                                                   + (float)(*(float *)(v43 + 24)
                                                                                           / -405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4)
                                                                                           + *(float *)(v43 + 4))
                                                                                   / 405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16)
                                                                                   + *(float *)(v43 + 16))
                                                                           / 405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28))
                                                                   / 405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 4.0) / -405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / -405.0);
              *(float *)(v41 - 76) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * -64.0) / 405.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * -64.0) / 405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * -64.0)
                                                                                           / 405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 32.0)
                                                                                   / -405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 32.0)
                                                                           / -405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 32.0) / -405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 16.0) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 16.0) / -405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / -405.0);
              *(float *)(v41 - std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * -64.0) / 405.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * -64.0) / 405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * -64.0)
                                                                                           / 405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 32.0)
                                                                                   / 405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 32.0) / 405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 32.0) / 405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 16.0) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 16.0) / -405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / -405.0);
              *(float *)(v41 - 68) = (float)((float)((float)(*(float *)(v43 + 8) * -2.0) / 9.0)
                                           - (float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / 9.0))
                                   - (float)((float)(*(float *)(v43 + 32) + *(float *)(v43 + 32)) / 9.0);
              *(float *)(v41 - 64) = (float)((float)((float)(*(float *)(v43 + 12) + *(float *)(v43 + 12)) / 9.0)
                                           - (float)((float)(*(float *)v43 + *(float *)v43) / 9.0))
                                   - (float)((float)(*(float *)(v43 + 24) + *(float *)(v43 + 24)) / 9.0);
              *(float *)(v41 - 60) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 4.0) / 81.0)
                                                                                           - (float)((float)(*(float *)(v43 + 12) * 4.0) / 81.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / 81.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 4.0)
                                                                                   / 81.0))
                                                                   - (float)((float)(*(float *)(v43 + 16) * 4.0) / 81.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 4.0) / 81.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / 81.0))
                                           - (float)((float)(*(float *)(v43 + 20) * 4.0) / 81.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / 81.0);
              *(float *)(v41 - 56) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 4.0) / 81.0)
                                                                                           - (float)((float)(*(float *)(v43 + 12) * 4.0) / 81.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / 81.0))
                                                                           - (float)((float)(*(float *)(v43 + 4) * 4.0)
                                                                                   / 81.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 4.0) / 81.0))
                                                           - (float)((float)(*(float *)(v43 + 28) * 4.0) / 81.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / 81.0))
                                           - (float)((float)(*(float *)(v43 + 20) * 4.0) / 81.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / 81.0);
              *(float *)(v41 - 52) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v43 + 12) / 405.0)
                                                                                           + (float)(*(float *)v43 / -405.0))
                                                                                   + (float)(*(float *)(v43 + 24)
                                                                                           / -405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4)
                                                                                           + *(float *)(v43 + 4))
                                                                                   / -405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16)
                                                                                   + *(float *)(v43 + 16))
                                                                           / 405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28))
                                                                   / -405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 4.0) / 405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / -405.0);
              *(float *)(v41 - 48) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v43 + 12) / 405.0)
                                                                                           + (float)(*(float *)v43 / -405.0))
                                                                                   + (float)(*(float *)(v43 + 24)
                                                                                           / -405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4)
                                                                                           + *(float *)(v43 + 4))
                                                                                   / 405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16)
                                                                                   + *(float *)(v43 + 16))
                                                                           / -405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28))
                                                                   / 405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 4.0) / 405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / -405.0);
              *(float *)(v41 - 44) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v43 + 12) * 64.0) / 405.0)
                                                                                           + (float)((float)(*(float *)v43 * -64.0) / 405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * -64.0)
                                                                                           / 405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 32.0)
                                                                                   / -405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 32.0) / 405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 32.0) / -405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 16.0) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 16.0) / 405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / -405.0);
              *(float *)(v41 - 40) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v43 + 12) * 64.0) / 405.0)
                                                                                           + (float)((float)(*(float *)v43 * -64.0) / 405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * -64.0)
                                                                                           / 405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 32.0)
                                                                                   / 405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 32.0)
                                                                           / -405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 32.0) / 405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 16.0) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 16.0) / 405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / -405.0);
              *(float *)(v41 - 36) = (float)((float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / 9.0)
                                           - (float)((float)(*(float *)(v43 + 8) + *(float *)(v43 + 8)) / 9.0))
                                   - (float)((float)(*(float *)(v43 + 32) + *(float *)(v43 + 32)) / 9.0);
              *(float *)(v41 - 32) = (float)((float)(*(float *)v43 / 90.0) + (float)(*(float *)(v43 + 12) / 45.0))
                                   + (float)((float)(*(float *)(v43 + 24) + *(float *)(v43 + 24)) / 45.0);
              *(float *)(v41 - 28) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 / -405.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) + *(float *)(v43 + 12)) / -405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / -405.0))
                                                                           + (float)(*(float *)(v43 + 4) / -405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16)
                                                                                   + *(float *)(v43 + 16))
                                                                           / -405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 4.0) / -405.0))
                                                   + (float)(*(float *)(v43 + 8) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / -405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / -405.0);
              *(float *)(v41 - std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = (float)((float)((float)((float)((float)((float)(*(float *)(v43 + 4) / 405.0)
                                                                           + (float)((float)((float)(*(float *)v43 / -405.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) + *(float *)(v43 + 12)) / -405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / -405.0)))
                                                                   + (float)((float)(*(float *)(v43 + 16)
                                                                                   + *(float *)(v43 + 16))
                                                                           / 405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 4.0) / 405.0))
                                                   + (float)(*(float *)(v43 + 8) / -405.0))
                                           + (float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / -405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / -405.0);
              *(float *)(v41 - 20) = (float)((float)((float)(*(float *)(v43 + 8) / 2025.0)
                                                   + (float)((float)((float)((float)((float)((float)(*(float *)v43 / 8100.0)
                                                                                           + (float)(*(float *)(v43 + 12) / 4050.0))
                                                                                   + (float)(*(float *)(v43 + 24)
                                                                                           / 2025.0))
                                                                           + (float)(*(float *)(v43 + 4) / 4050.0))
                                                                   + (float)(*(float *)(v43 + 16) / 2025.0))
                                                           + (float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28))
                                                                   / 2025.0)))
                                           + (float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / 2025.0);
              *(float *)(v41 - 16) = (float)((float)((float)(*(float *)(v43 + 8) / 2025.0)
                                                   + (float)((float)((float)((float)((float)((float)(*(float *)v43 / 8100.0)
                                                                                           + (float)(*(float *)(v43 + 12) / 4050.0))
                                                                                   + (float)(*(float *)(v43 + 24)
                                                                                           / 2025.0))
                                                                           - (float)(*(float *)(v43 + 4) / 4050.0))
                                                                   - (float)(*(float *)(v43 + 16) / 2025.0))
                                                           - (float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28))
                                                                   / 2025.0)))
                                           + (float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / 2025.0);
              *(float *)(v41 - 12) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 16.0) / 2025.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * 32.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 64.0)
                                                                                           / 2025.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 8.0)
                                                                                   / 2025.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 16.0)
                                                                           / 2025.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 32.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / 2025.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 8.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / 2025.0);
              *(float *)(v41 - 8) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 16.0)
                                                                                                  / 2025.0)
                                                                                          + (float)((float)(*(float *)(v43 + 12) * 32.0)
                                                                                                  / 2025.0))
                                                                                  + (float)((float)(*(float *)(v43 + 24)
                                                                                                  * 64.0)
                                                                                          / 2025.0))
                                                                          - (float)((float)(*(float *)(v43 + 4) * 8.0)
                                                                                  / 2025.0))
                                                                  - (float)((float)(*(float *)(v43 + 16) * 16.0) / 2025.0))
                                                          - (float)((float)(*(float *)(v43 + 28) * 32.0) / 2025.0))
                                                  + (float)((float)(*(float *)(v43 + 8) * 4.0) / 2025.0))
                                          + (float)((float)(*(float *)(v43 + 20) * 8.0) / 2025.0))
                                  + (float)((float)(*(float *)(v43 + 32) * 16.0) / 2025.0);
              *(float *)(v41 - 4) = (float)((float)(*(float *)(v43 + 8) / 90.0) + (float)(*(float *)(v43 + 20) / 45.0))
                                  + (float)((float)(*(float *)(v43 + 32) + *(float *)(v43 + 32)) / 45.0);
              *(float *)uint64_t v41 = (float)((float)(*(float *)v43 / 90.0) - (float)(*(float *)(v43 + 12) / 45.0))
                            + (float)((float)(*(float *)(v43 + 24) + *(float *)(v43 + 24)) / 45.0);
              *(float *)(v41 + 4) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v43 + 12) + *(float *)(v43 + 12))
                                                                                                  / 405.0)
                                                                                          + (float)(*(float *)v43
                                                                                                  / -405.0))
                                                                                  + (float)((float)(*(float *)(v43 + 24)
                                                                                                  * 4.0)
                                                                                          / -405.0))
                                                                          + (float)(*(float *)(v43 + 4) / -405.0))
                                                                  + (float)((float)(*(float *)(v43 + 16)
                                                                                  + *(float *)(v43 + 16))
                                                                          / 405.0))
                                                          + (float)((float)(*(float *)(v43 + 28) * 4.0) / -405.0))
                                                  + (float)(*(float *)(v43 + 8) / -405.0))
                                          + (float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / 405.0))
                                  + (float)((float)(*(float *)(v43 + 32) * 4.0) / -405.0);
              *(float *)(v41 + 8) = (float)((float)((float)((float)((float)((float)(*(float *)(v43 + 4) / 405.0)
                                                                          + (float)((float)((float)((float)(*(float *)(v43 + 12) + *(float *)(v43 + 12))
                                                                                                  / 405.0)
                                                                                          + (float)(*(float *)v43
                                                                                                  / -405.0))
                                                                                  + (float)((float)(*(float *)(v43 + 24)
                                                                                                  * 4.0)
                                                                                          / -405.0)))
                                                                  + (float)((float)(*(float *)(v43 + 16)
                                                                                  + *(float *)(v43 + 16))
                                                                          / -405.0))
                                                          + (float)((float)(*(float *)(v43 + 28) * 4.0) / 405.0))
                                                  + (float)(*(float *)(v43 + 8) / -405.0))
                                          + (float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / 405.0))
                                  + (float)((float)(*(float *)(v43 + 32) * 4.0) / -405.0);
              *(float *)(v41 + 12) = (float)((float)((float)(*(float *)(v43 + 8) / 2025.0)
                                                   + (float)((float)((float)((float)((float)((float)(*(float *)v43 / 8100.0)
                                                                                           - (float)(*(float *)(v43 + 12) / 4050.0))
                                                                                   + (float)(*(float *)(v43 + 24)
                                                                                           / 2025.0))
                                                                           + (float)(*(float *)(v43 + 4) / 4050.0))
                                                                   - (float)(*(float *)(v43 + 16) / 2025.0))
                                                           + (float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28))
                                                                   / 2025.0)))
                                           - (float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / 2025.0);
              *(float *)(v41 + 16) = (float)((float)((float)(*(float *)(v43 + 8) / 2025.0)
                                                   + (float)((float)((float)((float)((float)((float)(*(float *)v43 / 8100.0)
                                                                                           - (float)(*(float *)(v43 + 12) / 4050.0))
                                                                                   + (float)(*(float *)(v43 + 24)
                                                                                           / 2025.0))
                                                                           - (float)(*(float *)(v43 + 4) / 4050.0))
                                                                   + (float)(*(float *)(v43 + 16) / 2025.0))
                                                           - (float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28))
                                                                   / 2025.0)))
                                           - (float)((float)(*(float *)(v43 + 20) + *(float *)(v43 + 20)) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 4.0) / 2025.0);
              *(float *)(v41 + 20) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 16.0) / 2025.0)
                                                                                           - (float)((float)(*(float *)(v43 + 12) * 32.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 64.0)
                                                                                           / 2025.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 8.0)
                                                                                   / 2025.0))
                                                                   - (float)((float)(*(float *)(v43 + 16) * 16.0)
                                                                           / 2025.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 32.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / 2025.0))
                                           - (float)((float)(*(float *)(v43 + 20) * 8.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / 2025.0);
              *(float *)(v41 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 16.0) / 2025.0)
                                                                                           - (float)((float)(*(float *)(v43 + 12) * 32.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 64.0)
                                                                                           / 2025.0))
                                                                           - (float)((float)(*(float *)(v43 + 4) * 8.0)
                                                                                   / 2025.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 16.0)
                                                                           / 2025.0))
                                                           - (float)((float)(*(float *)(v43 + 28) * 32.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 4.0) / 2025.0))
                                           - (float)((float)(*(float *)(v43 + 20) * 8.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / 2025.0);
              *(float *)(v41 + 28) = (float)((float)(*(float *)(v43 + 8) / 90.0) - (float)(*(float *)(v43 + 20) / 45.0))
                                   + (float)((float)(*(float *)(v43 + 32) + *(float *)(v43 + 32)) / 45.0);
              *(float *)(v41 + 32) = (float)((float)((float)(*(float *)v43 * 32.0) / 45.0)
                                           + (float)((float)(*(float *)(v43 + 12) * 16.0) / 45.0))
                                   + (float)((float)(*(float *)(v43 + 24) * 8.0) / 45.0);
              *(float *)(v41 + 36) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * -64.0) / 405.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * 32.0) / -405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 16.0)
                                                                                           / -405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * -64.0)
                                                                                   / 405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 32.0)
                                                                           / -405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 16.0) / -405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * -64.0) / 405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 32.0) / -405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / -405.0);
              *(float *)(v41 + 40) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * -64.0) / 405.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * 32.0) / -405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 16.0)
                                                                                           / -405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 64.0)
                                                                                   / 405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 32.0) / 405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 16.0) / 405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * -64.0) / 405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 32.0) / -405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / -405.0);
              *(float *)(v41 + 44) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 16.0) / 2025.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * 8.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / 2025.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 32.0)
                                                                                   / 2025.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 16.0)
                                                                           / 2025.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 8.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 64.0) / 2025.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 32.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / 2025.0);
              *(float *)(v41 + 48) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 16.0) / 2025.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * 8.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / 2025.0))
                                                                           - (float)((float)(*(float *)(v43 + 4) * 32.0)
                                                                                   / 2025.0))
                                                                   - (float)((float)(*(float *)(v43 + 16) * 16.0)
                                                                           / 2025.0))
                                                           - (float)((float)(*(float *)(v43 + 28) * 8.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 64.0) / 2025.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 32.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / 2025.0);
              *(float *)(v41 + 52) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 1024.0) / 2025.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * 512.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 256.0)
                                                                                           / 2025.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 512.0)
                                                                                   / 2025.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 256.0)
                                                                           / 2025.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 128.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 256.0) / 2025.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 128.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 64.0) / 2025.0);
              *(float *)(v41 + 56) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 1024.0) / 2025.0)
                                                                                           + (float)((float)(*(float *)(v43 + 12) * 512.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 256.0)
                                                                                           / 2025.0))
                                                                           - (float)((float)(*(float *)(v43 + 4) * 512.0)
                                                                                   / 2025.0))
                                                                   - (float)((float)(*(float *)(v43 + 16) * 256.0)
                                                                           / 2025.0))
                                                           - (float)((float)(*(float *)(v43 + 28) * 128.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 256.0) / 2025.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 128.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 64.0) / 2025.0);
              *(float *)(v41 + 60) = (float)((float)((float)(*(float *)(v43 + 8) * 32.0) / 45.0)
                                           + (float)((float)(*(float *)(v43 + 20) * 16.0) / 45.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 8.0) / 45.0);
              *(float *)(v41 + 64) = (float)((float)((float)(*(float *)v43 * 32.0) / 45.0)
                                           - (float)((float)(*(float *)(v43 + 12) * 16.0) / 45.0))
                                   + (float)((float)(*(float *)(v43 + 24) * 8.0) / 45.0);
              *(float *)(v41 + 68) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v43 + 12) * 32.0) / 405.0)
                                                                                           + (float)((float)(*(float *)v43 * -64.0) / 405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 16.0)
                                                                                           / -405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * -64.0)
                                                                                   / 405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 32.0) / 405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 16.0) / -405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * -64.0) / 405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 32.0) / 405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / -405.0);
              *(float *)(v41 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)(v43 + 12) * 32.0) / 405.0)
                                                                                           + (float)((float)(*(float *)v43 * -64.0) / 405.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 16.0)
                                                                                           / -405.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 64.0)
                                                                                   / 405.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 32.0)
                                                                           / -405.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 16.0) / 405.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * -64.0) / 405.0))
                                           + (float)((float)(*(float *)(v43 + 20) * 32.0) / 405.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / -405.0);
              *(float *)(v41 + 76) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 16.0) / 2025.0)
                                                                                           - (float)((float)(*(float *)(v43 + 12) * 8.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / 2025.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 32.0)
                                                                                   / 2025.0))
                                                                   - (float)((float)(*(float *)(v43 + 16) * 16.0)
                                                                           / 2025.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 8.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 64.0) / 2025.0))
                                           - (float)((float)(*(float *)(v43 + 20) * 32.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / 2025.0);
              *(float *)(v41 + 80) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 16.0) / 2025.0)
                                                                                           - (float)((float)(*(float *)(v43 + 12) * 8.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 4.0)
                                                                                           / 2025.0))
                                                                           - (float)((float)(*(float *)(v43 + 4) * 32.0)
                                                                                   / 2025.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 16.0)
                                                                           / 2025.0))
                                                           - (float)((float)(*(float *)(v43 + 28) * 8.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 64.0) / 2025.0))
                                           - (float)((float)(*(float *)(v43 + 20) * 32.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 16.0) / 2025.0);
              *(float *)(v41 + 84) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 1024.0) / 2025.0)
                                                                                           - (float)((float)(*(float *)(v43 + 12) * 512.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 256.0)
                                                                                           / 2025.0))
                                                                           + (float)((float)(*(float *)(v43 + 4) * 512.0)
                                                                                   / 2025.0))
                                                                   - (float)((float)(*(float *)(v43 + 16) * 256.0)
                                                                           / 2025.0))
                                                           + (float)((float)(*(float *)(v43 + 28) * 128.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 256.0) / 2025.0))
                                           - (float)((float)(*(float *)(v43 + 20) * 128.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 64.0) / 2025.0);
              *(float *)(v41 + 88) = (float)((float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v43 * 1024.0) / 2025.0)
                                                                                           - (float)((float)(*(float *)(v43 + 12) * 512.0) / 2025.0))
                                                                                   + (float)((float)(*(float *)(v43 + 24) * 256.0)
                                                                                           / 2025.0))
                                                                           - (float)((float)(*(float *)(v43 + 4) * 512.0)
                                                                                   / 2025.0))
                                                                   + (float)((float)(*(float *)(v43 + 16) * 256.0)
                                                                           / 2025.0))
                                                           - (float)((float)(*(float *)(v43 + 28) * 128.0) / 2025.0))
                                                   + (float)((float)(*(float *)(v43 + 8) * 256.0) / 2025.0))
                                           - (float)((float)(*(float *)(v43 + 20) * 128.0) / 2025.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 64.0) / 2025.0);
              *(float *)(v41 + 92) = (float)((float)((float)(*(float *)(v43 + 8) * 32.0) / 45.0)
                                           - (float)((float)(*(float *)(v43 + 20) * 16.0) / 45.0))
                                   + (float)((float)(*(float *)(v43 + 32) * 8.0) / 45.0);
              *(_DWORD *)(v41 + 96) = *(_DWORD *)(v43 + 24);
              *(float *)(v41 + 100) = (float)((float)((float)(*(float *)(v43 + 24) * -2.0) / 9.0)
                                            - (float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28)) / 9.0))
                                    - (float)((float)(*(float *)(v43 + 32) + *(float *)(v43 + 32)) / 9.0);
              *(float *)(v41 + 104) = (float)((float)((float)(*(float *)(v43 + 28) + *(float *)(v43 + 28)) / 9.0)
                                            - (float)((float)(*(float *)(v43 + 24) + *(float *)(v43 + 24)) / 9.0))
                                    - (float)((float)(*(float *)(v43 + 32) + *(float *)(v43 + 32)) / 9.0);
              *(float *)(v41 + 108) = (float)((float)(*(float *)(v43 + 24) / 90.0) + (float)(*(float *)(v43 + 28) / 45.0))
                                    + (float)((float)(*(float *)(v43 + 32) + *(float *)(v43 + 32)) / 45.0);
              *(float *)(v41 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112) = (float)((float)(*(float *)(v43 + 24) / 90.0) - (float)(*(float *)(v43 + 28) / 45.0))
                                    + (float)((float)(*(float *)(v43 + 32) + *(float *)(v43 + 32)) / 45.0);
              *(float *)(v41 + 116) = (float)((float)((float)(*(float *)(v43 + 24) * 32.0) / 45.0)
                                            + (float)((float)(*(float *)(v43 + 28) * 16.0) / 45.0))
                                    + (float)((float)(*(float *)(v43 + 32) * 8.0) / 45.0);
              *(float *)(v41 + 120) = (float)((float)((float)(*(float *)(v43 + 24) * 32.0) / 45.0)
                                            - (float)((float)(*(float *)(v43 + 28) * 16.0) / 45.0))
                                    + (float)((float)(*(float *)(v43 + 32) * 8.0) / 45.0);
              *(_DWORD *)(v41 + 1std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = *(_DWORD *)(v43 + 32);
              v39 += 0x900000000;
              v41 += 256;
              --v42;
            }
            while (v42);
          }
          ++v38;
          v37 += v35 << 6;
        }
        while (v38 != v36);
        goto LABEL_32;
      }
      break;
    case 4:
      if (a4) {
        atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = *(unsigned int *)(a3 + 16);
      uint64_t v26 = *(unsigned int *)(a3 + 20);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v81, 6, 6, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20));
      std::string::size_type v17 = v81.__r_.__value_.__r.__words[0];
      if ((int)v26 >= 1)
      {
        uint64_t v27 = 0;
        v15.n128_u32[0] = -24.0;
        v16.n128_u32[0] = 24.0;
        do
        {
          if ((int)v25 >= 1)
          {
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            uint64_t v30 = *(void *)(a3 + 24) + 36 * (int)v25 * (int)v27;
            uint64_t v31 = *(void *)(v17 + 24) + 144 * (int)v25 * (int)v27;
            uint64_t v32 = v25;
            do
            {
              uint64_t v33 = (float *)(v30 + (v28 >> 30));
              int v34 = (float *)(v31 + (v29 >> 30));
              float *v34 = *v33 * 0.0625;
              v34[1] = (float)((float)(*v33 / -24.0) + (float)(v33[1] / -24.0)) + (float)(v33[2] / -24.0);
              _OWORD v34[2] = (float)((float)(v33[1] / 24.0) + (float)(*v33 / -24.0)) + (float)(v33[2] / -24.0);
              v34[3] = (float)((float)(*v33 / 96.0) + (float)(v33[1] / 48.0)) + (float)(v33[2] / 24.0);
              v34[4] = (float)((float)(*v33 / 96.0) - (float)(v33[1] / 48.0)) + (float)(v33[2] / 24.0);
              v34[5] = v33[2] * 0.25;
              v34[6] = (float)((float)(*v33 / -24.0) + (float)(v33[3] / -24.0)) + (float)(v33[6] / -24.0);
              v34[7] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / 36.0)
                                                                             + (float)(v33[3] / 36.0))
                                                                     + (float)(v33[6] / 36.0))
                                                             + (float)(v33[1] / 36.0))
                                                     + (float)(v33[4] / 36.0))
                                             + (float)(v33[7] / 36.0))
                                     + (float)(v33[2] / 36.0))
                             + (float)(v33[5] / 36.0))
                     + (float)(v33[8] / 36.0);
              v34[8] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / 36.0)
                                                                             + (float)(v33[3] / 36.0))
                                                                     + (float)(v33[6] / 36.0))
                                                             - (float)(v33[1] / 36.0))
                                                     - (float)(v33[4] / 36.0))
                                             - (float)(v33[7] / 36.0))
                                     + (float)(v33[2] / 36.0))
                             + (float)(v33[5] / 36.0))
                     + (float)(v33[8] / 36.0);
              v34[9] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / -144.0)
                                                                             + (float)(v33[3] / -144.0))
                                                                     + (float)(v33[6] / -144.0))
                                                             - (float)(v33[1] / 72.0))
                                                     - (float)(v33[4] / 72.0))
                                             - (float)(v33[7] / 72.0))
                                     - (float)(v33[2] / 36.0))
                             - (float)(v33[5] / 36.0))
                     - (float)(v33[8] / 36.0);
              v34[10] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / -144.0)
                                                                              + (float)(v33[3] / -144.0))
                                                                      + (float)(v33[6] / -144.0))
                                                              + (float)(v33[1] / 72.0))
                                                      + (float)(v33[4] / 72.0))
                                              + (float)(v33[7] / 72.0))
                                      - (float)(v33[2] / 36.0))
                              - (float)(v33[5] / 36.0))
                      - (float)(v33[8] / 36.0);
              v34[11] = (float)((float)(v33[2] / -6.0) + (float)(v33[5] / -6.0)) + (float)(v33[8] / -6.0);
              v34[12] = (float)((float)(v33[3] / 24.0) + (float)(*v33 / -24.0)) + (float)(v33[6] / -24.0);
              v34[13] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / 36.0)
                                                                              - (float)(v33[3] / 36.0))
                                                                      + (float)(v33[6] / 36.0))
                                                              + (float)(v33[1] / 36.0))
                                                      - (float)(v33[4] / 36.0))
                                              + (float)(v33[7] / 36.0))
                                      + (float)(v33[2] / 36.0))
                              - (float)(v33[5] / 36.0))
                      + (float)(v33[8] / 36.0);
              v34[14] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / 36.0)
                                                                              - (float)(v33[3] / 36.0))
                                                                      + (float)(v33[6] / 36.0))
                                                              - (float)(v33[1] / 36.0))
                                                      + (float)(v33[4] / 36.0))
                                              - (float)(v33[7] / 36.0))
                                      + (float)(v33[2] / 36.0))
                              - (float)(v33[5] / 36.0))
                      + (float)(v33[8] / 36.0);
              v34[15] = (float)((float)((float)((float)((float)((float)((float)((float)(v33[3] / 144.0)
                                                                              + (float)(*v33 / -144.0))
                                                                      + (float)(v33[6] / -144.0))
                                                              - (float)(v33[1] / 72.0))
                                                      + (float)(v33[4] / 72.0))
                                              - (float)(v33[7] / 72.0))
                                      - (float)(v33[2] / 36.0))
                              + (float)(v33[5] / 36.0))
                      - (float)(v33[8] / 36.0);
              v34[16] = (float)((float)((float)((float)((float)((float)((float)((float)(v33[3] / 144.0)
                                                                              + (float)(*v33 / -144.0))
                                                                      + (float)(v33[6] / -144.0))
                                                              + (float)(v33[1] / 72.0))
                                                      - (float)(v33[4] / 72.0))
                                              + (float)(v33[7] / 72.0))
                                      - (float)(v33[2] / 36.0))
                              + (float)(v33[5] / 36.0))
                      - (float)(v33[8] / 36.0);
              v34[17] = (float)((float)(v33[5] / 6.0) + (float)(v33[2] / -6.0)) + (float)(v33[8] / -6.0);
              v34[18] = (float)((float)(*v33 / 96.0) + (float)(v33[3] / 48.0)) + (float)(v33[6] / 24.0);
              v34[19] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / -144.0)
                                                                              - (float)(v33[3] / 72.0))
                                                                      - (float)(v33[6] / 36.0))
                                                              + (float)(v33[1] / -144.0))
                                                      - (float)(v33[4] / 72.0))
                                              - (float)(v33[7] / 36.0))
                                      + (float)(v33[2] / -144.0))
                              - (float)(v33[5] / 72.0))
                      - (float)(v33[8] / 36.0);
              v34[20] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / -144.0)
                                                                              - (float)(v33[3] / 72.0))
                                                                      - (float)(v33[6] / 36.0))
                                                              + (float)(v33[1] / 144.0))
                                                      + (float)(v33[4] / 72.0))
                                              + (float)(v33[7] / 36.0))
                                      + (float)(v33[2] / -144.0))
                              - (float)(v33[5] / 72.0))
                      - (float)(v33[8] / 36.0);
              v34[21] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / 576.0)
                                                                              + (float)(v33[3] / 288.0))
                                                                      + (float)(v33[6] / 144.0))
                                                              + (float)(v33[1] / 288.0))
                                                      + (float)(v33[4] / 144.0))
                                              + (float)(v33[7] / 72.0))
                                      + (float)(v33[2] / 144.0))
                              + (float)(v33[5] / 72.0))
                      + (float)(v33[8] / 36.0);
              v34[22] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / 576.0)
                                                                              + (float)(v33[3] / 288.0))
                                                                      + (float)(v33[6] / 144.0))
                                                              - (float)(v33[1] / 288.0))
                                                      + (float)(v33[4] / -144.0))
                                              - (float)(v33[7] / 72.0))
                                      + (float)(v33[2] / 144.0))
                              + (float)(v33[5] / 72.0))
                      + (float)(v33[8] / 36.0);
              v34[23] = (float)((float)(v33[2] / 24.0) + (float)(v33[5] / 12.0)) + (float)(v33[8] / 6.0);
              v34[24] = (float)((float)(*v33 / 96.0) - (float)(v33[3] / 48.0)) + (float)(v33[6] / 24.0);
              v34[25] = (float)((float)((float)((float)((float)((float)((float)((float)(v33[3] / 72.0)
                                                                              + (float)(*v33 / -144.0))
                                                                      - (float)(v33[6] / 36.0))
                                                              + (float)(v33[1] / -144.0))
                                                      + (float)(v33[4] / 72.0))
                                              - (float)(v33[7] / 36.0))
                                      + (float)(v33[2] / -144.0))
                              + (float)(v33[5] / 72.0))
                      - (float)(v33[8] / 36.0);
              v34[26] = (float)((float)((float)((float)((float)((float)((float)((float)(v33[3] / 72.0)
                                                                              + (float)(*v33 / -144.0))
                                                                      - (float)(v33[6] / 36.0))
                                                              + (float)(v33[1] / 144.0))
                                                      - (float)(v33[4] / 72.0))
                                              + (float)(v33[7] / 36.0))
                                      + (float)(v33[2] / -144.0))
                              + (float)(v33[5] / 72.0))
                      - (float)(v33[8] / 36.0);
              v34[27] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / 576.0)
                                                                              - (float)(v33[3] / 288.0))
                                                                      + (float)(v33[6] / 144.0))
                                                              + (float)(v33[1] / 288.0))
                                                      + (float)(v33[4] / -144.0))
                                              + (float)(v33[7] / 72.0))
                                      + (float)(v33[2] / 144.0))
                              - (float)(v33[5] / 72.0))
                      + (float)(v33[8] / 36.0);
              v34[28] = (float)((float)((float)((float)((float)((float)((float)((float)(*v33 / 576.0)
                                                                              - (float)(v33[3] / 288.0))
                                                                      + (float)(v33[6] / 144.0))
                                                              - (float)(v33[1] / 288.0))
                                                      + (float)(v33[4] / 144.0))
                                              - (float)(v33[7] / 72.0))
                                      + (float)(v33[2] / 144.0))
                              - (float)(v33[5] / 72.0))
                      + (float)(v33[8] / 36.0);
              v34[29] = (float)((float)(v33[2] / 24.0) - (float)(v33[5] / 12.0)) + (float)(v33[8] / 6.0);
              v34[30] = v33[6] * 0.25;
              v34[31] = (float)((float)(v33[6] / -6.0) + (float)(v33[7] / -6.0)) + (float)(v33[8] / -6.0);
              unsigned char v34[32] = (float)((float)(v33[7] / 6.0) + (float)(v33[6] / -6.0)) + (float)(v33[8] / -6.0);
              v34[33] = (float)((float)(v33[6] / 24.0) + (float)(v33[7] / 12.0)) + (float)(v33[8] / 6.0);
              v34[34] = (float)((float)(v33[6] / 24.0) - (float)(v33[7] / 12.0)) + (float)(v33[8] / 6.0);
              v34[35] = v33[8];
              v29 += 0x2400000000;
              v28 += 0x900000000;
              --v32;
            }
            while (v32);
          }
          ++v27;
        }
        while (v27 != v26);
        goto LABEL_32;
      }
      break;
    case 2:
      if (a4) {
        atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(unsigned int *)(a3 + 16);
      uint64_t v14 = *(unsigned int *)(a3 + 20);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v81, 4, 4, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20));
      std::string::size_type v17 = v81.__r_.__value_.__r.__words[0];
      if ((int)v14 >= 1)
      {
        int v18 = 0;
        uint64_t v19 = 0;
        v15.n128_u32[0] = 0.5;
        v16.n128_u32[0] = 0.25;
        do
        {
          if ((int)v13 >= 1)
          {
            uint64_t v20 = 0;
            uint64_t v21 = *(void *)(a3 + 24) + 36 * (int)v13 * (int)v19;
            uint64_t v22 = *(void *)(v17 + 24) + 4 * v18 + 32;
            uint64_t v23 = v13;
            do
            {
              uint64_t v24 = v21 + (v20 >> 30);
              *(_DWORD *)(v22 - 32) = *(_DWORD *)v24;
              *(float *)(v22 - 28) = (float)((float)(*(float *)v24 * 0.5) + (float)(*(float *)(v24 + 4) * 0.5))
                                   + (float)(*(float *)(v24 + 8) * 0.5);
              *(float *)(v22 - std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = (float)((float)(*(float *)v24 * 0.5) - (float)(*(float *)(v24 + 4) * 0.5))
                                   + (float)(*(float *)(v24 + 8) * 0.5);
              *(_DWORD *)(v22 - 20) = *(_DWORD *)(v24 + 8);
              *(float *)(v22 - 16) = (float)((float)(*(float *)v24 * 0.5) + (float)(*(float *)(v24 + 12) * 0.5))
                                   + (float)(*(float *)(v24 + 24) * 0.5);
              *(float *)(v22 - 12) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v24 * 0.25)
                                                                                           + (float)(*(float *)(v24 + 12) * 0.25))
                                                                                   + (float)(*(float *)(v24 + 24) * 0.25))
                                                                           + (float)(*(float *)(v24 + 4) * 0.25))
                                                                   + (float)(*(float *)(v24 + 16) * 0.25))
                                                           + (float)(*(float *)(v24 + 28) * 0.25))
                                                   + (float)(*(float *)(v24 + 8) * 0.25))
                                           + (float)(*(float *)(v24 + 20) * 0.25))
                                   + (float)(*(float *)(v24 + 32) * 0.25);
              *(float *)(v22 - 8) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v24 * 0.25)
                                                                                          + (float)(*(float *)(v24 + 12)
                                                                                                  * 0.25))
                                                                                  + (float)(*(float *)(v24 + 24) * 0.25))
                                                                          - (float)(*(float *)(v24 + 4) * 0.25))
                                                                  - (float)(*(float *)(v24 + 16) * 0.25))
                                                          - (float)(*(float *)(v24 + 28) * 0.25))
                                                  + (float)(*(float *)(v24 + 8) * 0.25))
                                          + (float)(*(float *)(v24 + 20) * 0.25))
                                  + (float)(*(float *)(v24 + 32) * 0.25);
              *(float *)(v22 - 4) = (float)((float)(*(float *)(v24 + 8) * 0.5) + (float)(*(float *)(v24 + 20) * 0.5))
                                  + (float)(*(float *)(v24 + 32) * 0.5);
              *(float *)uint64_t v22 = (float)((float)(*(float *)v24 * 0.5) - (float)(*(float *)(v24 + 12) * 0.5))
                            + (float)(*(float *)(v24 + 24) * 0.5);
              *(float *)(v22 + 4) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v24 * 0.25)
                                                                                          - (float)(*(float *)(v24 + 12)
                                                                                                  * 0.25))
                                                                                  + (float)(*(float *)(v24 + 24) * 0.25))
                                                                          + (float)(*(float *)(v24 + 4) * 0.25))
                                                                  - (float)(*(float *)(v24 + 16) * 0.25))
                                                          + (float)(*(float *)(v24 + 28) * 0.25))
                                                  + (float)(*(float *)(v24 + 8) * 0.25))
                                          - (float)(*(float *)(v24 + 20) * 0.25))
                                  + (float)(*(float *)(v24 + 32) * 0.25);
              *(float *)(v22 + 8) = (float)((float)((float)((float)((float)((float)((float)((float)(*(float *)v24 * 0.25)
                                                                                          - (float)(*(float *)(v24 + 12)
                                                                                                  * 0.25))
                                                                                  + (float)(*(float *)(v24 + 24) * 0.25))
                                                                          - (float)(*(float *)(v24 + 4) * 0.25))
                                                                  + (float)(*(float *)(v24 + 16) * 0.25))
                                                          - (float)(*(float *)(v24 + 28) * 0.25))
                                                  + (float)(*(float *)(v24 + 8) * 0.25))
                                          - (float)(*(float *)(v24 + 20) * 0.25))
                                  + (float)(*(float *)(v24 + 32) * 0.25);
              *(float *)(v22 + 12) = (float)((float)(*(float *)(v24 + 8) * 0.5) - (float)(*(float *)(v24 + 20) * 0.5))
                                   + (float)(*(float *)(v24 + 32) * 0.5);
              *(_DWORD *)(v22 + 16) = *(_DWORD *)(v24 + 24);
              *(float *)(v22 + 20) = (float)((float)(*(float *)(v24 + 24) * 0.5) + (float)(*(float *)(v24 + 28) * 0.5))
                                   + (float)(*(float *)(v24 + 32) * 0.5);
              *(float *)(v22 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = (float)((float)(*(float *)(v24 + 24) * 0.5) - (float)(*(float *)(v24 + 28) * 0.5))
                                   + (float)(*(float *)(v24 + 32) * 0.5);
              *(_DWORD *)(v22 + 28) = *(_DWORD *)(v24 + 32);
              v20 += 0x900000000;
              v22 += 64;
              --v23;
            }
            while (v23);
          }
          ++v19;
          v18 += 16 * v13;
        }
        while (v19 != v14);
LABEL_32:
        std::string::size_type v17 = v81.__r_.__value_.__r.__words[0];
      }
      break;
    default:
      long long v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v76, "Outputs window not supported");
      __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v44 = (std::__shared_weak_count *)v81.__r_.__value_.__l.__size_;
  if (a4) {
    nitro::nitro_function::nitro_function(a4);
  }
  int v45 = *(_DWORD *)(a6 + 4);
  (*(void (**)(void, __n128, __n128))(*(void *)*a2 + 472))(*a2, v15, v16);
  uint64_t v46 = 0;
  unsigned int v47 = (v45 + 2) * (v45 + 2);
  uint64_t v48 = *a1;
  uint64_t v49 = *(int *)(*a1 + 8);
  do
  {
    v49 *= *(int *)(*a1 + 12 + v46);
    v46 += 4;
  }
  while (v46 != 12);
  uint64_t v50 = 0;
  uint64_t v51 = *(int *)(v17 + 8);
  do
  {
    v51 *= *(int *)(v17 + 12 + v50);
    v50 += 4;
  }
  while (v50 != 12);
  if (v49 != v51)
  {
    long long v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v75, "Shape mismatch");
    __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v45 != -2)
  {
    int v52 = 0;
    int v53 = 0;
    int v55 = a5[10];
    uint64_t v54 = a5[11];
    if (v47 <= 1) {
      unsigned int v47 = 1;
    }
    int v56 = *(_DWORD *)(v17 + 12) * *(_DWORD *)(v17 + 8);
    int v57 = v56 * *(_DWORD *)(v17 + 16);
    do
    {
      if (v55 >= 1)
      {
        int v58 = 0;
        int v59 = v53;
        int v60 = v52;
        do
        {
          if ((int)v54 >= 1)
          {
            uint64_t v61 = *(void *)(v17 + 24);
            uint64_t v62 = *(void *)(v48 + 24);
            int v63 = v59;
            int v64 = v60;
            uint64_t v65 = v54;
            do
            {
              *(_DWORD *)(v62 + 4 * v64++) = *(_DWORD *)(v61 + 4 * v63);
              v63 += v56;
              --v65;
            }
            while (v65);
          }
          ++v58;
          v60 += v54;
          v59 += v57;
        }
        while (v58 != v55);
      }
      ++v53;
      v52 += v55 * v54;
    }
    while (v53 != v47);
  }
  if (v44)
  {
    nitro::nitro_function::nitro_function(v44);
  }
}

void sub_1927E8E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v40);
  goto LABEL_14;
}

uint64_t Espresso::MPSGraphEngine::Kernels::transpose_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSGraphEngine::Kernels::transpose_kernel::~transpose_kernel(Espresso::MPSGraphEngine::Kernels::transpose_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL anonymous namespace'::match_and_capture_gather_subgraph_in_tf_resample(Espresso::net_info_ir_t const&,unsigned long)::$_1::operator()(uint64_t **a1, uint64_t a2, int a3, float a4)
{
  long long v7 = a1[1];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v8 = *v7;
  long long v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v8 + 24, &__p);
  if ((void *)(v8 + 32) == v9) {
    int v10 = -1;
  }
  else {
    int v10 = *((_DWORD *)v9 + 14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 == -1) {
    return 0;
  }
  uint64_t v11 = **a1;
  uint64_t v12 = v11 + 224 * v10;
  uint64_t v13 = (void *)(v12 + 48);
  int v14 = *(char *)(v12 + 71);
  if (v14 < 0)
  {
    if (v13[1] != 11) {
      return 0;
    }
    uint64_t v13 = (void *)*v13;
  }
  else if (v14 != 11)
  {
    return 0;
  }
  __n128 v15 = (void *)*v13;
  uint64_t v16 = *(void *)((char *)v13 + 3);
  if (v15 != (void *)0x77746E656D656C65 || v16 != 0x65736977746E656DLL) {
    return 0;
  }
  uint64_t v19 = *(void **)(v11 + 224 * v10 + 88);
  if (v19
  {
    uint64_t v20 = *(std::__shared_weak_count **)(v11 + 224 * v10 + 96);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v19 + 320))(v19);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  return *(float *)(v21 + 8) == a4 && *(_DWORD *)v21 == a3;
}

void sub_1927E91D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  long long v6 = *a5;
  memset(v40, 0, sizeof(v40));
  int v41 = 1065353216;
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  if (v7 == *v6)
  {
    std::vector<int>::size_type v13 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *v6) >> 5);
  }
  else
  {
    std::vector<int>::size_type v9 = 0;
    do
    {
      std::vector<int>::size_type v10 = v8 + 224 * v9;
      uint64_t v11 = *(void *)(v10 + 112);
      uint64_t v12 = *(void *)(v10 + 120);
      if (v11 != v12)
      {
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v40, v11, v11);
          v11 += 24;
        }
        while (v11 != v12);
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
      }
      ++v9;
      std::vector<int>::size_type v13 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v8) >> 5);
    }
    while (v9 < v13);
  }
  int v14 = *(std::vector<int> **)(a1 + 56);
  begiunsigned int n = v14[1].__begin_;
  __n128 v15 = v14 + 1;
  v15->__end_ = begin;
  std::vector<int>::reserve(v15, v13);
  memset(v38, 0, sizeof(v38));
  int v39 = 1065353216;
  memset(v36, 0, sizeof(v36));
  int v37 = 1065353216;
  uint64_t v18 = *v6;
  uint64_t v17 = v6[1];
  if (v17 != *v6)
  {
    int v19 = *(unsigned char *)(v18 + 105) != 0;
    do
    {
      uint64_t v20 = *(void *)(v18 + 136);
      uint64_t v21 = *(void *)(v18 + 144);
      while (v20 != v21)
      {
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v40, v20))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v36, v20, v20); {
        v20 += 24;
        }
      }
      v18 += 224;
    }
    while (v18 != v17);
    uint64_t v22 = *v6;
    uint64_t v23 = v6[1];
    v35[0] = v38;
    v35[1] = v6;
    void v35[2] = v36;
    void v35[3] = v15;
    if (v23 != v22)
    {
      unint64_t v24 = 0;
      int v25 = 1;
      do
      {
        unint64_t v26 = v25;
        if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v38, v24))
        {
          int v27 = v19 & 1;
          if (*(unsigned __int8 *)(v22 + 224 * v24 + 105) != v27)
          {
            int v34 = v19;
            if (0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 5) > v24 + 1)
            {
              for (unint64_t i = v26; 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 5) > i; ++i)
              {
                if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v38, i)
                  && *(unsigned __int8 *)(v22 + 224 * v24 + 105) == v27)
                {
                  uint64_t v29 = v22 + 224 * v24;
                  uint64_t v30 = *(void *)(v29 + 136);
                  uint64_t v31 = *(void *)(v29 + 144);
                  if (v30 != v31)
                  {
                    char v32 = 1;
                    do
                    {
                      v32 &= std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v36, v30) != 0;
                      v30 += 24;
                    }
                    while (v30 != v31);
                    if ((v32 & 1) == 0) {
                      break;
                    }
                  }
                  Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path,std::shared_ptr<Espresso::net_info_ir_t>)::$_0::operator()((uint64_t)v35, i);
                  uint64_t v22 = *v6;
                  uint64_t v23 = v6[1];
                }
              }
            }
            int v19 = v34 ^ 1;
          }
          Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path,std::shared_ptr<Espresso::net_info_ir_t>)::$_0::operator()((uint64_t)v35, v24);
          uint64_t v22 = *v6;
          uint64_t v23 = v6[1];
        }
        ++v24;
        int v25 = v26 + 1;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 5) > v24);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v36);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v38);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v40);
}

void sub_1927E9494(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 - 128);
  _Unwind_Resume(a1);
}

void Espresso::cpu_context_transfer_algo_t::engine_availability_reordering(std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path,std::shared_ptr<Espresso::net_info_ir_t>)::$_0::operator()(uint64_t a1, int a2)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(*(void *)a1, a2, a2);
  uint64_t v4 = **(void **)(a1 + 8) + 224 * a2;
  uint64_t v5 = *(void *)(v4 + 112);
  uint64_t v6 = *(void *)(v4 + 120);
  while (v5 != v6)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*(void *)(a1 + 16), v5, v5);
    v5 += 24;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  std::vector<int>::size_type v9 = *(int **)(v7 + 8);
  unint64_t v8 = *(void *)(v7 + 16);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *(int **)v7;
    uint64_t v12 = ((uint64_t)v9 - *(void *)v7) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    BOOL v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v15) {
      unint64_t v16 = v13;
    }
    if (v16)
    {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
      uint64_t v11 = *(int **)v7;
      std::vector<int>::size_type v9 = *(int **)(v7 + 8);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v18 = (int *)(v16 + 4 * v12);
    unint64_t v19 = v16 + 4 * v17;
    *uint64_t v18 = a2;
    std::vector<int>::size_type v10 = v18 + 1;
    while (v9 != v11)
    {
      int v20 = *--v9;
      *--uint64_t v18 = v20;
    }
    *(void *)uint64_t v7 = v18;
    *(void *)(v7 + 8) = v10;
    *(void *)(v7 + 16) = v19;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    int *v9 = a2;
    std::vector<int>::size_type v10 = v9 + 1;
  }
  *(void *)(v7 + 8) = v10;
}

void Espresso::cpu_context_transfer_algo_options::~cpu_context_transfer_algo_options(Espresso::cpu_context_transfer_algo_options *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v4 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void Espresso::cpu_context_transfer_algo_t::assign_to_fallback_context(void *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int v41 = *a4;
  uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((v41[1] - *v41) >> 5);
  uint64_t v42 = a1[7];
  uint64_t v37 = (int)v5;
  std::vector<int>::resize((std::vector<int> *)(v42 + 48), (int)v5);
  if ((int)v5 >= 1) {
    bzero(*(void **)(v42 + 48), 4 * v5);
  }
  v45[0] = 0;
  v45[1] = 0;
  int v44 = (uint64_t *)v45;
  uint64_t v7 = (void *)a1[3];
  for (unint64_t i = (void *)a1[4]; v7 != i; v7 += 3)
  {
    *(void *)vImage_Buffer buf = v7;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v44, v7, (long long **)buf)[56] = 1;
  }
  buf[0] = 0;
  std::vector<BOOL>::vector(&__p, (int)v5, buf);
  if ((int)v5 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v36 = v5 << 32;
    uint64_t v10 = v5;
    uint64_t v40 = 224 * v5;
    do
    {
      uint64_t v11 = *v41;
      uint64_t v12 = (uint64_t *)(*v41 + v8);
      unint64_t v13 = v12 + 6;
      uint64_t v14 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v45[0], v12 + 6);
      if (*((unsigned char *)v12 + 105)) {
        BOOL v15 = v14 == 0;
      }
      else {
        BOOL v15 = 0;
      }
      int v16 = !v15;
      int v17 = (***(uint64_t (****)(void))(*(void *)a2 + 8))();
      BOOL v18 = is_metal_but_not_mps_buffers(v17);
      unint64_t v19 = (Espresso *)(***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
      BOOL v21 = v19 >> 1 == 5003;
      if (v19 == 10008 || v19 == 10011) {
        BOOL v21 = 1;
      }
      if (*(_DWORD *)(v11 + v8 + 72)) {
        BOOL v23 = v18;
      }
      else {
        BOOL v23 = 0;
      }
      if (v23) {
        goto LABEL_25;
      }
      int v24 = v21 | v16;
      if (!*(_DWORD *)(v11 + v8 + 76)) {
        int v24 = v16;
      }
      if (v24 == 1)
      {
LABEL_25:
        *(unsigned char *)(v42 + 120) = 1;
        *(void *)((char *)__p + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        int v25 = Espresso::espresso_os_log_subsystem(v19, v20);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(v11 + v8 + 23) < 0) {
            uint64_t v12 = (uint64_t *)*v12;
          }
          if (*(char *)(v11 + v8 + 71) < 0) {
            unint64_t v13 = (void *)*v13;
          }
          *(_DWORD *)vImage_Buffer buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v9;
          *(_WORD *)uint64_t v51 = 2080;
          *(void *)&void v51[2] = v12;
          *(_WORD *)&v51[10] = 2080;
          *(void *)&v51[12] = v13;
          _os_log_debug_impl(&dword_1920CB000, v25, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Needs fallback: Layer %d: %s (%s)\n", buf, 0x1Cu);
        }
      }
      ++v9;
      v8 += 224;
    }
    while (v40 != v8);
    unint64_t v26 = (uint64_t *)(v42 + 48);
    if (*(unsigned char *)(v42 + 120))
    {
      uint64_t v27 = v36 >> 30;
      unint64_t v28 = v37 - 1;
      uint64_t v29 = 0x3FFFFFFFCLL;
      do
      {
        if ((*(void *)((char *)__p + ((v28 >> 3) & 0x1FFFFFF8)) >> v28))
        {
          *(_DWORD *)(*v26 + 4 * v28) = 1;
          float v30 = estimate_cost(v26, (uint64_t)a1, a4);
          *(void *)vImage_Buffer buf = 0;
          *(void *)uint64_t v51 = 0;
          *(void *)&v51[8] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, *(const void **)(v42 + 48), *(void *)(v42 + 56), (uint64_t)(*(void *)(v42 + 56) - *(void *)(v42 + 48)) >> 2);
          if (v10 < v37) {
            memset_pattern16((void *)(*(void *)buf + v27), &xmmword_192DCA970, (v29 & 0x3FFFFFFFCLL) + 4);
          }
          float v33 = estimate_cost((uint64_t *)buf, (uint64_t)a1, a4);
          if (v30 > v33)
          {
            if (v26 != (uint64_t *)buf) {
              uint64_t v31 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v26, *(char **)buf, *(uint64_t *)v51, (uint64_t)(*(void *)v51 - *(void *)buf) >> 2);
            }
            int v34 = Espresso::espresso_os_log_subsystem((Espresso *)v31, v32);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)uint64_t v46 = 0;
              _os_log_debug_impl(&dword_1920CB000, v34, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] disabled all_next\n", v46, 2u);
            }
          }
          uint64_t v35 = Espresso::espresso_os_log_subsystem((Espresso *)v31, v32);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t v46 = 134218240;
            double v47 = v30;
            __int16 v48 = 2048;
            double v49 = v33;
            _os_log_debug_impl(&dword_1920CB000, v35, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] cost_single: %.2f > cost_all_next: %.2f\n", v46, 0x16u);
          }

          if (*(void *)buf)
          {
            *(void *)uint64_t v51 = *(void *)buf;
            operator delete(*(void **)buf);
          }
          unint64_t v26 = (uint64_t *)(v42 + 48);
        }
        --v28;
        v29 += 4;
        v27 -= 4;
        --v10;
      }
      while (v10);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy((uint64_t)&v44, (char *)v45[0]);
}

void sub_1927E9B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26,char *a27)
{
}

float estimate_cost(uint64_t *a1, uint64_t a2, void **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v4 == *a1) {
    return 0.0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = (v4 - *a1) >> 2;
  float v11 = 0.0;
  do
  {
    unint64_t v12 = v9 + 1;
    if (v10 > v9 + 1 && *(_DWORD *)(v3 + 4 * v9) != *(_DWORD *)(v3 + 4 * v9 + 4)) {
      float v11 = v11 + *(float *)(a2 + 48);
    }
    float v13 = *(float *)(a2 + 52);
    if (*a3)
    {
      BOOL v15 = (long long **)(**a3 + v8 + 160);
      uint64_t v14 = *v15;
      if ((char *)v15[1] - (char *)*v15 == 64)
      {
        long long v21 = *v14;
        long long v22 = v14[1];
        int v24 = 0;
        uint64_t v25 = 0;
        std::string __p = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v14 + 5), *((void *)v14 + 6), (uint64_t)(*((void *)v14 + 6) - *((void *)v14 + 5)) >> 2);
        if (v22 == 1 && HIDWORD(v21) == 1 && DWORD2(v21) == 1 && DWORD1(v21) == 1 && v21 == 1) {
          float v13 = 0.001;
        }
        if (__p)
        {
          int v24 = __p;
          operator delete(__p);
        }
        uint64_t v3 = *a1;
        uint64_t v4 = a1[1];
      }
    }
    float v11 = v11 + (float)((float)*(int *)(v3 + 4 * v9) * v13);
    unint64_t v10 = (v4 - v3) >> 2;
    v8 += 224;
    ++v9;
  }
  while (v10 > v12);
  return v11;
}

void str_concat<std::unordered_set<std::string>>(std::string *a1, uint64_t *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    int v2 = a2;
    do
    {
      if (*((char *)v2 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v2[2], v2[3]);
      }
      else {
        std::string v11 = *(std::string *)(v2 + 2);
      }
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v11.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      if (size)
      {
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v6 = &v11;
        }
        else {
          uint64_t v6 = (std::string *)v11.__r_.__value_.__r.__words[0];
        }
        memmove(v5, v6, size);
      }
      *(_WORD *)((char *)v5 + size) = 44;
      if ((v10 & 0x80u) == 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        std::string::size_type v8 = v10;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      if ((char)v10 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      int v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_1927E9E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void str_concat<std::vector<std::string>>(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      if (*(char *)(v4 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
      }
      else {
        std::string v13 = *(std::string *)v4;
      }
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v13.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
      if ((v12 & 0x80u) == 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      if (size)
      {
        if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v8 = &v13;
        }
        else {
          std::string::size_type v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
        }
        memmove(v7, v8, size);
      }
      *(_WORD *)((char *)v7 + size) = 44;
      if ((v12 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v12 & 0x80u) == 0) {
        std::string::size_type v10 = v12;
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v9, v10);
      if ((char)v12 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      v4 += 24;
    }
    while (v4 != a3);
  }
}

void sub_1927E9F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::cpu_context_transfer_algo_t::compute_local_costs(uint64_t *a1, uint64_t a2, uint64_t **a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v102 = (*a3)[1];
  uint64_t v99 = **a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  int v112 = 0;
  int v113 = 0;
  unint64_t v114 = 0;
  uint64_t v90 = v6;
  uint64_t v86 = v7;
  uint64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    std::string v11 = 0;
    uint64_t v12 = v7;
    do
    {
      int v13 = (***(uint64_t (****)(void))(*(void *)v12 + 8))(*(void *)(*(void *)v12 + 8));
      int v14 = v13;
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v16 = (v11 - v9) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v10 - (void)v9) >> 1 > v17) {
          unint64_t v17 = (uint64_t)(v10 - (void)v9) >> 1;
        }
        if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        int v20 = (char *)(v18 + 4 * v16);
        *(_DWORD *)int v20 = v14;
        BOOL v15 = v20 + 4;
        while (v11 != v9)
        {
          int v21 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        unint64_t v10 = v18 + 4 * v19;
        int v112 = v20;
        unint64_t v114 = v10;
        if (v9) {
          operator delete(v9);
        }
        uint64_t v9 = v20;
      }
      else
      {
        *(_DWORD *)std::string v11 = v13;
        BOOL v15 = v11 + 4;
      }
      int v113 = v15;
      v12 += 16;
      std::string v11 = v15;
    }
    while (v12 != v90);
  }
  unint64_t v89 = v8 >> 4;
  uint64_t v111 = 0x4004000000000000;
  std::vector<double>::vector(buf, ((0x100000000 - 0x4924924900000000 * ((v102 - v99) >> 5)) >> 32) * (v8 >> 4), &v111);
  uint64_t v22 = a5;
  BOOL v23 = *(void **)a5;
  if (*(void *)a5)
  {
    *(void *)(a5 + 8) = v23;
    operator delete(v23);
    uint64_t v22 = a5;
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)buf;
  *(void *)(v22 + 16) = *(void *)&buf[16];
  LOBYTE(v111) = 1;
  std::vector<BOOL>::vector(buf, ((0x100000000 - 0x4924924900000000 * ((v102 - v99) >> 5)) >> 32) * (v8 >> 4), (unsigned __int8 *)&v111);
  if (*(void *)a6)
  {
    operator delete(*(void **)a6);
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
  }
  *(void *)a6 = *(void *)buf;
  *(_OWORD *)(a6 + 8) = *(_OWORD *)&buf[8];
  if (0xB6DB6DB700000000 * ((v102 - v99) >> 5))
  {
    uint64_t v24 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    unint64_t v25 = (int)(-1227133513 * ((v102 - v99) >> 5));
    uint64_t v26 = v8 >> 4;
    if (v89 <= 1) {
      uint64_t v26 = 1;
    }
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    unint64_t v87 = v25;
    unint64_t v91 = 0;
    uint64_t v92 = -v26;
    while (1)
    {
      uint64_t v27 = **a3;
      uint64_t v100 = v24;
      long long v28 = *(_OWORD *)(*a4 + 16 * v24);
      uint64_t v29 = *(std::__shared_weak_count **)(*a4 + 16 * v24 + 8);
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v30 = v27 + 224 * v24;
      char v32 = *(const void **)(v30 + 88);
      uint64_t v31 = *(std::__shared_weak_count **)(v30 + 96);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v98 = v29;
      if (v32) {
        goto LABEL_59;
      }
      uint64_t v33 = v27 + 224 * v24;
      char v32 = *(const void **)(v33 + 208);
      int v34 = *(std::__shared_weak_count **)(v33 + 216);
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v31)
      {
        long long v103 = v28;
        nitro::nitro_function::nitro_function(v31);
        long long v28 = v103;
      }
      if (v32) {
        break;
      }
      if (!v85)
      {
        long long v104 = v28;
        LODWORD(v111) = 0;
        Espresso::create_context((int *)&v111, buf);
        uint64_t v35 = *(std::__shared_weak_count **)&buf[8];
        uint64_t v85 = *(void *)buf;
        *(void *)vImage_Buffer buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        if (v84)
        {
          nitro::nitro_function::nitro_function(v84);
          if (*(void *)&buf[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
          }
        }
        uint64_t v84 = v35;
        long long v28 = v104;
      }
      long long v110 = v28;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v108 = v85;
      int v109 = v84;
      if (v84) {
        atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::create_kernel_for_engine(buf, v27 + 224 * v100, (uint64_t *)&v110, &v108, 0);
      char v32 = *(const void **)buf;
      uint64_t v31 = *(std::__shared_weak_count **)&buf[8];
      *(void *)vImage_Buffer buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      if (v34)
      {
        nitro::nitro_function::nitro_function(v34);
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      if (v109) {
        nitro::nitro_function::nitro_function(v109);
      }
      uint64_t v37 = (Espresso *)*((void *)&v110 + 1);
      if (*((void *)&v110 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v110 + 1));
      }
      if (v32) {
        goto LABEL_59;
      }
      std::string v81 = Espresso::espresso_os_log_subsystem(v37, v36);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        uint64_t v82 = v27 + 224 * v100;
        long long v83 = (void *)(v82 + 48);
        if (*(char *)(v82 + 71) < 0) {
          long long v83 = (void *)*v83;
        }
        *(_DWORD *)vImage_Buffer buf = 134218242;
        *(void *)&uint8_t buf[4] = v100;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v83;
        _os_log_error_impl(&dword_1920CB000, v81, OS_LOG_TYPE_ERROR, "Cannot find any kernel for layer %zu (%s)", buf, 0x16u);
      }

LABEL_124:
      if (v31) {
        nitro::nitro_function::nitro_function(v31);
      }
      if (v29) {
        nitro::nitro_function::nitro_function(v29);
      }
      uint64_t v24 = v100 + 1;
      v91 += v89;
      if (v100 + 1 == v87)
      {
        if (v84) {
          nitro::nitro_function::nitro_function(v84);
        }
        goto LABEL_137;
      }
    }
    uint64_t v31 = v34;
LABEL_59:
    if (v86 == v90) {
      goto LABEL_124;
    }
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = v27 + 224 * v100;
    uint64_t v42 = (void *)(v41 + 184);
    std::string v95 = (unsigned __int8 *)(v41 + 105);
    std::string v96 = (void *)(v41 + 192);
    std::string v94 = (unsigned __int8 *)(v41 + 106);
    unint64_t v43 = v91;
    int v105 = v31;
    while (1)
    {
      int v44 = v112;
      int v45 = *(_DWORD *)&v112[v38];
      *(_DWORD *)vImage_Buffer buf = v45;
      unsigned int v46 = v45 - 10006;
      if (v45 - 10006) < 6 && ((0x2Fu >> v46))
      {
        *(_DWORD *)vImage_Buffer buf = v45;
        float v47 = 800.0;
      }
      else
      {
        if ((v45 & 0xFFFFFFFD) == 5)
        {
          float v47 = 300.0;
        }
        else if (is_gpu((int *)buf))
        {
          float v47 = 120.0;
        }
        else
        {
          float v47 = 20.0;
        }
        *(_DWORD *)vImage_Buffer buf = v45;
        if (v46 >= 6) {
          goto LABEL_72;
        }
      }
      if ((0x2Fu >> v46))
      {
        float v48 = 50.0;
        goto LABEL_78;
      }
LABEL_72:
      if ((v45 & 0xFFFFFFFD) == 5)
      {
        float v48 = 40.0;
      }
      else if (is_gpu((int *)buf))
      {
        float v48 = 40.0;
      }
      else
      {
        float v48 = 10.0;
      }
LABEL_78:
      float v49 = 0.0;
      if (*v42 == *v96)
      {
        float v54 = 0.0;
        float v52 = 0.0;
        float v50 = 0.0;
      }
      else
      {
        float v50 = (*(float (**)(const void *, void *, uint64_t))(*(void *)v32 + 128))(v32, v42, 1);
        float v52 = v51;
        float v54 = v53;
        float v49 = v55;
      }
      int v56 = (int *)&v44[v38];
      if (is_gpu(v56))
      {
        if (v57)
        {
          int v58 = v57;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*(__int16 *)((*(uint64_t (**)(void *))(*(void *)v57 + 384))(v57) + 92) > 4
            || *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v58 + 384))(v58) + 94) >= 5)
          {
            int v59 = *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v58 + 384))(v58) + 92);
            int v60 = *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v58 + 384))(v58) + 94) * v59;
            if (v60 <= 1) {
              int v60 = 1;
            }
            float v50 = v50 * (float)v60;
            uint64_t v31 = v105;
          }
          if (v31) {
            nitro::nitro_function::nitro_function(v31);
          }
        }
      }
      if (is_cpu(v56))
      {
        if (v61)
        {
          uint64_t v62 = v61;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v63 = *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v61 + 384))(v61) + 96);
          uint64_t v64 = (*(uint64_t (**)(void *))(*(void *)v62 + 384))(v62);
          int v65 = v63;
          if (v63 <= 1) {
            int v65 = 1;
          }
          int v66 = *(__int16 *)(v64 + 98);
          if (v66 <= 1) {
            int v66 = 1;
          }
          unsigned int v67 = v66 * v65;
          if (v67 >= 0x10) {
            int v68 = 16;
          }
          else {
            int v68 = v67;
          }
          float v69 = (float)v68;
          if (v67 <= 4) {
            float v69 = 1.0;
          }
          float v50 = v50 * v69;
          if (v105) {
            nitro::nitro_function::nitro_function(v105);
          }
        }
      }
      *(double *)(*(void *)a5 + 8 * v43) = (float)((float)((float)((float)((float)(v49 + (float)(v54 + v52))
                                                                           * 0.00097656)
                                                                   / v48)
                                                           + (float)(v50 / v47))
                                                   * 1000.0);
      long long v70 = v95;
      if (v40) {
        long long v70 = v94;
      }
      int v71 = *v70;
      char v72 = *a3;
      long long v73 = (std::__shared_weak_count *)a3[1];
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v74 = *(_OWORD *)(*a1 + v39);
      long long v107 = v74;
      long long v75 = (std::__shared_weak_count *)*((void *)&v74 + 1);
      if (*((void *)&v74 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      int v76 = Espresso::also_check_not_blacklisted(v100, v71 != 0, *v72, (const void **)&v107);
      std::string v77 = *(void **)a6;
      unint64_t v78 = v43 >> 6;
      uint64_t v79 = 1 << v43;
      if (v76) {
        uint64_t v80 = v77[v78] | v79;
      }
      else {
        uint64_t v80 = v77[v78] & ~v79;
      }
      v77[v78] = v80;
      if (v75) {
        nitro::nitro_function::nitro_function(v75);
      }
      if (v73) {
        nitro::nitro_function::nitro_function(v73);
      }
      if ((*(void *)(*(void *)a6 + 8 * v78) & v79) == 0) {
        *(void *)(*(void *)a5 + 8 * v43) = 0x41CDCD6500000000;
      }
      --v40;
      v39 += 16;
      ++v43;
      v38 += 4;
      uint64_t v31 = v105;
      if (v92 == v40)
      {
        uint64_t v29 = v98;
        goto LABEL_124;
      }
    }
  }
LABEL_137:
  if (v112) {
    operator delete(v112);
  }
}

void sub_1927EAB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14)
  {
    nitro::nitro_function::nitro_function();
    if (!v15)
    {
LABEL_3:
      if (!a14) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v15)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function();
  if (!a14)
  {
LABEL_5:
    unint64_t v18 = *(void **)(v16 - 216);
    if (v18)
    {
      *(void *)(v16 - 208) = v18;
      operator delete(v18);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  nitro::nitro_function::nitro_function();
  goto LABEL_5;
}

void sub_1927EAB2C()
{
}

void sub_1927EAB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a38) {
    nitro::nitro_function::nitro_function(a38);
  }
  if (a40) {
    nitro::nitro_function::nitro_function(a40);
  }
  if (v40)
  {
    nitro::nitro_function::nitro_function(v40);
    if (!a28)
    {
LABEL_7:
      if (!a14) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (!a28)
  {
    goto LABEL_7;
  }
  nitro::nitro_function::nitro_function(a28);
  if (!a14)
  {
LABEL_9:
    unint64_t v43 = *(void **)(v41 - 216);
    if (v43)
    {
      *(void *)(v41 - 208) = v43;
      operator delete(v43);
    }
    _Unwind_Resume(a1);
  }
LABEL_8:
  nitro::nitro_function::nitro_function(a14);
  goto LABEL_9;
}

void sub_1927EAB5C()
{
}

void sub_1927EAB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }
  JUMPOUT(0x1927EABC0);
}

void Espresso::cpu_context_transfer_algo_t::compute_graph_shortest_path(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v59 = **a4;
  uint64_t v60 = (*a4)[1];
  std::string __p = 0;
  uint64_t v51 = *(void *)a2;
  uint64_t v52 = *(void *)(a2 + 8);
  uint64_t v7 = v52 - *(void *)a2;
  if (v52 != *(void *)a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)a2;
    do
    {
      a1 = (***(uint64_t (****)(void))(*(void *)v11 + 8))(*(void *)(*(void *)v11 + 8));
      int v12 = a1;
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v14 = (v10 - v8) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v9 - (void)v8) >> 1 > v15) {
          unint64_t v15 = (uint64_t)(v9 - (void)v8) >> 1;
        }
        if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
          a1 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          a1 = v15;
        }
        if (a1) {
          a1 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1);
        }
        else {
          a2 = 0;
        }
        uint64_t v16 = (int *)(a1 + 4 * v14);
        int *v16 = v12;
        int v13 = (char *)(v16 + 1);
        while (v10 != v8)
        {
          int v17 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *--uint64_t v16 = v17;
        }
        unint64_t v9 = a1 + 4 * a2;
        std::string __p = v16;
        if (v8) {
          operator delete(v8);
        }
        uint64_t v8 = (char *)v16;
      }
      else
      {
        *(_DWORD *)unint64_t v10 = a1;
        int v13 = v10 + 4;
      }
      v11 += 16;
      unint64_t v10 = v13;
    }
    while (v11 != v52);
  }
  uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((v60 - v59) >> 5);
  uint64_t v19 = 0x100000000 - 0x4924924900000000 * ((v60 - v59) >> 5);
  unint64_t v20 = v19 >> 32;
  unint64_t v49 = v7 >> 4;
  unint64_t v21 = (v19 >> 32) * (v7 >> 4);
  if (v21)
  {
    if (v21 >= 0x1555555555555556) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    a1 = (unint64_t)operator new(12 * v21);
    uint64_t v22 = (_DWORD *)a1;
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = a1 + v23;
      *(_DWORD *)(v24 + 8) = 0;
      *(void *)uint64_t v24 = 0xFFFFFFFFLL;
      v23 += 12;
    }
    while (12 * v49 * v20 != v23);
  }
  else
  {
    uint64_t v22 = 0;
  }
  unsigned int v48 = -1227133513 * ((v60 - v59) >> 5);
  uint64_t v25 = (int)v18;
  if (v19)
  {
    uint64_t v26 = 0;
    if (v49 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = v7 >> 4;
    }
    if (v20 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v20;
    }
    uint64_t v55 = *a6;
    uint64_t v57 = *a5;
    uint64_t v50 = v28;
    uint64_t v53 = (uint64_t)&v22[-3 * v49 + 2];
    int v58 = v22;
    do
    {
      if (v51 != v52)
      {
        uint64_t v29 = 0;
        unint64_t v61 = v26 * v49;
        do
        {
          uint64_t v30 = (float *)&v22[3 * v29 + 3 * v61];
          float v31 = *(double *)(v57 + 8 * (v29 + v61));
          v30[1] = v31;
          *((unsigned char *)v30 + 8) = (*(void *)(v55 + (((v29 + v61) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v29
                                                                                                  + v61)) & 1;
          if (v26)
          {
            uint64_t v32 = 0;
            float v33 = 0.0;
            int v34 = -1;
            uint64_t v35 = (float *)v53;
            do
            {
              if (*(unsigned char *)v35)
              {
                float v36 = *(v35 - 1);
                if (v26 != (int)v18)
                {
                  float engine_switch_const_ms = get_engine_switch_const_ms(__p[v29], __p[v32]);
                  if (v29 == v32) {
                    float v38 = 0.0;
                  }
                  else {
                    float v38 = 1.0;
                  }
                  float v36 = v36 + (float)(v38 * engine_switch_const_ms);
                }
                if (v36 < v33 || v34 == -1)
                {
                  float v33 = v36;
                  int v34 = v32;
                }
              }
              ++v32;
              v35 += 3;
            }
            while (v27 != v32);
          }
          else
          {
            float v40 = get_engine_switch_const_ms(__p[v29], *__p);
            int v34 = 0;
            if (v29) {
              float v41 = 1.0;
            }
            else {
              float v41 = 0.0;
            }
            float v33 = v40 * v41;
          }
          v30[1] = v33 + v31;
          *(_DWORD *)uint64_t v30 = v34 + (v26 - 1) * v49;
          ++v29;
          uint64_t v22 = v58;
        }
        while (v29 != v27);
      }
      ++v26;
      v53 += 12 * v49;
    }
    while (v26 != v50);
  }
  int v42 = v49 * v18;
  if ((v48 & 0x80000000) == 0)
  {
    uint64_t v43 = *a7;
    uint64_t v44 = v48;
    while (1)
    {
      if (v44 < v25) {
        *(_DWORD *)(v43 + 4 * v44) = v42 % v49 != 0;
      }
      int v42 = v22[3 * v42];
      if (v44)
      {
        if (v42 < 0) {
          break;
        }
      }
      if (v44-- <= 0) {
        goto LABEL_70;
      }
    }
    unsigned int v46 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)vImage_Buffer buf = 67109376;
      int v64 = v42;
      __int16 v65 = 1024;
      int v66 = v44;
      _os_log_error_impl(&dword_1920CB000, v46, OS_LOG_TYPE_ERROR, "assign_to_fallback_context_v2: disconnected graph_position=%d ilayer=%d", buf, 0xEu);
    }
  }
LABEL_70:
  operator delete(v22);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1927EB0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
}

float get_engine_switch_const_ms(int a1, int a2)
{
  int v6 = a1;
  int v5 = a2;
  char v2 = is_gpu(&v6);
  float result = 4.0;
  if ((v2 & 1) == 0)
  {
    int v4 = is_gpu(&v5);
    float result = 2.5;
    if (v4) {
      return 4.0;
    }
  }
  return result;
}

int32x2_t Espresso::MetalLowmemEngine::inner_product_kernel::get_weights@<D0>(int32x2_t *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = [*(id *)&this[72] contents];
  int v5 = (char *)operator new(0x58uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_1EE389958;
  *((void *)v5 + 3) = &unk_1EE36BED0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
  int32x2_t result = vrev64_s32(this[38]);
  *((int32x2_t *)v5 + 4) = result;
  *((void *)v5 + 5) = v4;
  v5[48] = 0;
  *a2 = v5 + 24;
  a2[1] = v5;
  return result;
}

double Espresso::MetalLowmemEngine::inner_product_kernel::get_biases@<D0>(id *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = [this[72] contents];
  int v5 = (char *)operator new(0x58uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_1EE389920;
  int v6 = *((_DWORD *)this + 76);
  *((void *)v5 + 3) = &unk_1EE36BEB0;
  double result = 0.0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
  *((_DWORD *)v5 + 8) = v6;
  *((void *)v5 + 5) = v4;
  v5[48] = 0;
  *a2 = v5 + 24;
  a2[1] = v5;
  return result;
}

void Espresso::MetalLowmemEngine::inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = *(_DWORD *)(v4 + 8);
  int v5 = *(_DWORD *)(v4 + 12);
  if (((v6 | v5) & 3) != 0)
  {
    int v8 = v6 - 1;
    BOOL v7 = v6 < 1;
    int v9 = v6 + 2;
    if (!v7) {
      int v9 = v8;
    }
    int v10 = (v9 & 0xFFFFFFFC) + 4;
    int v11 = v5 - 1;
    BOOL v7 = v5 < 1;
    int v12 = v5 + 2;
    if (!v7) {
      int v12 = v11;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v44, v10, (v12 & 0xFFFFFFFC) + 4, 1, 1);
    if (*(int *)(v4 + 12) >= 1)
    {
      int v13 = 0;
      uint64_t v14 = *(char **)(v4 + 16);
      uint64_t v15 = v44;
      uint64_t v16 = *(char **)(v44 + 16);
      int v17 = *(_DWORD *)(v4 + 8);
      do
      {
        memcpy(v16, v14, 4 * v17);
        int v17 = *(_DWORD *)(v4 + 8);
        uint64_t v18 = *(int *)(v15 + 8);
        if (v17 < (int)v18) {
          bzero(&v16[4 * v17], 4 * (v18 + ~v17) + 4);
        }
        v16 += 4 * v18;
        v14 += 4 * v17;
        ++v13;
      }
      while (v13 < *(_DWORD *)(v4 + 12));
    }
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
  else
  {
    uint64_t v44 = v4;
    int v45 = v3;
  }
  uint64_t v19 = v44;
  uint64_t v20 = *(int *)(v44 + 12) * (uint64_t)*(int *)(v44 + 8);
  *(void *)(a1 + 560) = v20;
  unint64_t v21 = *(const void **)(a1 + 8);
  if ((*(_DWORD *)(a1 + 596) - 1) > 1)
  {
    if (!v21
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    float v36 = *(std::__shared_weak_count **)(a1 + 16);
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = (void *)v35[18];
    if ((unint64_t)(4 * v20) <= 8) {
      uint64_t v38 = 8;
    }
    else {
      uint64_t v38 = 4 * v20;
    }
    uint64_t v39 = objc_msgSend(v37, "newBufferWithLength:options:", v38, 0, v44);
    float v40 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = v39;

    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
    memcpy((void *)[*(id *)(a1 + 568) contents], *(const void **)(v19 + 16), 4 * v20);
  }
  else
  {
    if (!v21
    {
      int v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v42, "Espresso: wrong_context_type");
      v42->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    uint64_t v23 = *(std::__shared_weak_count **)(a1 + 16);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = objc_msgSend(v22[18], "newBufferWithLength:options:", 2 * v20, 0, v44);
    uint64_t v25 = *(void **)(a1 + 584);
    *(void *)(a1 + 584) = v24;

    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    uint64_t v26 = *(int **)(v19 + 16);
    for (unint64_t i = (_WORD *)[*(id *)(a1 + 584) contents]; v20; --v20)
    {
      int v28 = *v26++;
      _S0 = v28;
      __asm { FCVT            H0, S0 }
      *i++ = _S0;
    }
    int v34 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = 0;
  }
  float v41 = v45;
  if (v45)
  {
    nitro::nitro_function::nitro_function(v41);
  }
}

void sub_1927EB62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1927EB68C()
{
  if (!v0) {
    JUMPOUT(0x1927EB684);
  }
  JUMPOUT(0x1927EB67CLL);
}

void Espresso::MetalLowmemEngine::inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 312) = *a2 != 0;
  if (!v4)
  {
    int v5 = *(void **)(a1 + 576);
    *(void *)(a1 + 576) = 0;

    uint64_t v4 = *a2;
  }
  int v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = *(_DWORD *)(v4 + 8);
  if ((v7 & 3) != 0)
  {
    int v8 = v7 - 1;
    if (v7 < 1) {
      int v8 = v7 + 2;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v21, (v8 & 0xFFFFFFFC) + 4, 1, 1, 1);
    uint64_t v9 = v21;
    memcpy(*(void **)(v21 + 16), *(const void **)(v4 + 16), 4 * *(int *)(v4 + 8));
    uint64_t v10 = *(int *)(v4 + 8);
    int v7 = *(_DWORD *)(v9 + 8);
    if ((int)v10 < v7) {
      bzero((void *)(*(void *)(v9 + 16) + 4 * v10), 4 * (v7 + ~v10) + 4);
    }
    if (v6)
    {
      nitro::nitro_function::nitro_function(v6);
      int v7 = *(_DWORD *)(v9 + 8);
    }
    uint64_t v4 = v9;
  }
  else
  {
    uint64_t v22 = v6;
  }
  *(void *)(a1 + 552) = v7;
  int v11 = *(const void **)(a1 + 8);
  if (!v11
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  int v13 = *(std::__shared_weak_count **)(a1 + 16);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (void *)v12[18];
  size_t v15 = 4 * v7;
  if (v15 <= 8) {
    uint64_t v16 = 8;
  }
  else {
    uint64_t v16 = 4 * v7;
  }
  uint64_t v17 = [v14 newBufferWithLength:v16 options:0];
  uint64_t v18 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = v17;

  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  memcpy((void *)[*(id *)(a1 + 576) contents], *(const void **)(v4 + 16), v15);
  uint64_t v19 = v22;
  if (v22)
  {
    nitro::nitro_function::nitro_function(v19);
  }
}

void sub_1927EB8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MetalLowmemEngine::inner_product_kernel::num_weights_blob(Espresso::MetalLowmemEngine::inner_product_kernel *this)
{
  return 2;
}

uint64_t Espresso::MetalLowmemEngine::inner_product_kernel::get_weights_blob@<X0>(uint64_t this@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = this;
  if (a2 == 1)
  {
    this = std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::blob_container,std::allocator<Espresso::MetalLowmemEngine::blob_container>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,objc_object  {objcproto9MTLBuffer}* {__strong}&,unsigned long &,int,int,int,void>((uint64_t *)&v9, (void *)(this + 8), *(_DWORD *)(this + 596), *(void **)(this + 576), *(void *)(this + 552), 1, 1, 1);
    long long v5 = v9;
  }
  else
  {
    long long v5 = 0uLL;
    if (!a2)
    {
      if (*(void *)(this + 584)) {
        uint64_t v6 = 584;
      }
      else {
        uint64_t v6 = 568;
      }
      int v7 = ((*(_DWORD *)(this + 308) - 1) & 0xFFFFFFFC) + 4;
      int v8 = operator new(0x100uLL);
      v8[1] = 0;
      uint64_t v8[2] = 0;
      void *v8 = &unk_1EE3859E8;
      this = Espresso::MetalLowmemEngine::blob_container::blob_container((uint64_t)(v8 + 3), (void *)(v3 + 8), *(_DWORD *)(v3 + 596), *(void **)(v3 + v6), v7, *(_DWORD *)(v3 + 304), 1, 1);
      *(void *)&long long v5 = this;
      *((void *)&v5 + 1) = v8;
    }
  }
  *a3 = v5;
  return this;
}

void sub_1927EBA28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::blob_container,std::allocator<Espresso::MetalLowmemEngine::blob_container>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,objc_object  {objcproto9MTLBuffer}* {__strong}&,unsigned long &,int,int,int,void>(uint64_t *a1, void *a2, int a3, void *a4, int a5, int a6, int a7, int a8)
{
  uint64_t v16 = operator new(0x100uLL);
  v16[1] = 0;
  void v16[2] = 0;
  void *v16 = &unk_1EE3859E8;
  uint64_t result = Espresso::MetalLowmemEngine::blob_container::blob_container((uint64_t)(v16 + 3), a2, a3, a4, a5, a6, a7, a8);
  *a1 = result;
  a1[1] = (uint64_t)v16;
  return result;
}

void sub_1927EBAEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::blob_container::blob_container(uint64_t a1, void *a2, int a3, void *a4, int a5, int a6, int a7, int a8)
{
  id v15 = a4;
  Espresso::abstract_blob_container::abstract_blob_container(a1, a2);
  *(void *)a1 = &unk_1EE348BC8;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = a3;
  *(void *)(a1 + 204) = 0;
  *(void *)(a1 + 220) = 0;
  *(void *)(a1 + 212) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x78uLL);
  v16->__shared_weak_owners_ = 0;
  v16->__shared_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385C88;
  *(_OWORD *)&v16[3].__shared_owners_ = 0u;
  v16[4].std::__shared_count = 0u;
  v16[2].std::__shared_count = 0u;
  *(_OWORD *)&v16[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v16[1].__shared_owners_ = 0u;
  v16[4].__shared_owners_ = 0;
  v16[4].__shared_weak_owners_ = 0;
  LODWORD(v16[2].__vftable) = 1065353216;
  v16[2].__shared_owners_ = 0x1FFFFFFFFLL;
  v16[4].__vftable = 0;
  v16[2].__shared_weak_owners_ = 0;
  v16[3].__vftable = 0;
  LOBYTE(v16[3].__shared_weak_owners_) = 0;
  v16[3].__shared_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE349D58;
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v16 + 1;
  *(void *)(a1 + 96) = v16;
  if (v17)
  {
    nitro::nitro_function::nitro_function(v17);
    uint64_t v18 = *(void **)(a1 + 160);
  }
  else
  {
    uint64_t v18 = 0;
  }
  *(void *)(a1 + 160) = v15;

  *(_DWORD *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a6;
  *(_DWORD *)(a1 + 16) = a7;
  *(_DWORD *)(a1 + 20) = a8;
  *(_DWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = 1;
  nitro::nitro_function::nitro_function(v16);
  return a1;
}

void sub_1927EBC84(_Unwind_Exception *a1)
{
  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3859E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3859E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL Espresso::MetalLowmemEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 336)
      && !*(unsigned char *)(a1 + 344)
      && !*(_DWORD *)(a1 + 348)
      && (double)(2 * *(_DWORD *)(a1 + 308) * *(_DWORD *)(a1 + 304)) * 0.000000953674316 < 0.5;
}

void Espresso::MetalLowmemEngine::inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v6 = a3;
  if (!a6)
  {
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = *a6;
  if (!*a6)
  {
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  uint64_t v10 = (std::__shared_weak_count *)a6[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v16 = a3[1];
    if (v16 != (unsigned __int8 *)1)
    {
      if (v16 == (unsigned __int8 *)5)
      {
        if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54) {
          goto LABEL_121;
        }
      }
      else
      {
        if (v16 != (unsigned __int8 *)7) {
          goto LABEL_121;
        }
        if (*(_DWORD *)*a3 == 862347127 && *(_DWORD *)(*a3 + 3) == 1952395827) {
          goto LABEL_51;
        }
        if (*(_DWORD *)*a3 != 828792695 || *(_DWORD *)(*a3 + 3) != 1952396849) {
          goto LABEL_121;
        }
      }
LABEL_42:
      v58[0] = v9;
      v58[1] = (uint64_t)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v62, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v58, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1);
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      int v22 = *((char *)v6 + 23);
      if (v22 < 0)
      {
        if (v6[1] != (unsigned __int8 *)7) {
          goto LABEL_95;
        }
        uint64_t v6 = (unsigned __int8 **)*v6;
      }
      else if (v22 != 7)
      {
        goto LABEL_95;
      }
      if (*(_DWORD *)v6 == 828792695 && *(_DWORD *)((char *)v6 + 3) == 1952396849)
      {
        Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(&v60, (uint64_t *)&v62);
        uint64_t v29 = (std::__shared_weak_count *)*((void *)&v62 + 1);
        long long v62 = v60;
        if (v29) {
          nitro::nitro_function::nitro_function(v29);
        }
      }
LABEL_95:
      if ((*(_DWORD *)(a1 + 596) - 1) > 1)
      {
        exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "not supported");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v24 = (std::__shared_weak_count *)*((void *)&v62 + 1);
      uint64_t v30 = v62;
      if (*((void *)&v62 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      int v32 = *(_DWORD *)(v30 + 8);
      int v31 = *(_DWORD *)(v30 + 12);
      if (((v32 | v31) & 3) != 0)
      {
        int v34 = v32 - 1;
        BOOL v33 = v32 < 1;
        int v35 = v32 + 2;
        if (!v33) {
          int v35 = v34;
        }
        int v36 = (v35 & 0xFFFFFFFC) + 4;
        int v37 = v31 - 1;
        BOOL v33 = v31 < 1;
        int v38 = v31 + 2;
        if (!v33) {
          int v38 = v37;
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(&v60, v36, (v38 & 0xFFFFFFFC) + 4, 1, 1);
        if (*(int *)(v30 + 12) >= 1)
        {
          int v39 = 0;
          float v40 = *(char **)(v30 + 16);
          uint64_t v41 = v60;
          int v42 = *(char **)(v60 + 16);
          int v43 = *(_DWORD *)(v30 + 8);
          do
          {
            memcpy(v42, v40, 2 * v43);
            int v43 = *(_DWORD *)(v30 + 8);
            uint64_t v44 = *(int *)(v41 + 8);
            if (v43 < (int)v44) {
              bzero(&v42[2 * v43], 2 * (v44 + ~v43) + 2);
            }
            v42 += 2 * v44;
            v40 += 2 * v43;
            ++v39;
          }
          while (v39 < *(_DWORD *)(v30 + 12));
        }
        if (v24) {
          nitro::nitro_function::nitro_function(v24);
        }
      }
      else
      {
        *(void *)&long long v60 = v30;
        *((void *)&v60 + 1) = v24;
      }
      uint64_t v45 = v60;
      uint64_t v46 = *(int *)(v60 + 12) * (uint64_t)*(int *)(v60 + 8);
      *(void *)(a1 + 560) = v46;
      float v47 = *(const void **)(a1 + 8);
      if (!v47
      {
        float v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v54, "Espresso: wrong_context_type");
        v54->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
      }
      unint64_t v49 = *(std::__shared_weak_count **)(a1 + 16);
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v50 = 2 * v46;
      uint64_t v51 = [v48[18] newBufferWithLength:v50 options:0];
      uint64_t v52 = *(void **)(a1 + 584);
      *(void *)(a1 + 584) = v51;

      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      memcpy((void *)[*(id *)(a1 + 584) contents], *(const void **)(v45 + 16), v50);
      uint64_t v53 = *(void **)(a1 + 568);
      *(void *)(a1 + 568) = 0;

      if (*((void *)&v60 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v60 + 1));
      }
      if (v24) {
        goto LABEL_120;
      }
      goto LABEL_121;
    }
    int v20 = **a3;
  }
  else
  {
    int v11 = *((unsigned __int8 *)a3 + 23);
    if (v11 != 1)
    {
      if (v11 == 5)
      {
        int v13 = *((unsigned __int8 *)a3 + 4);
        BOOL v15 = *(_DWORD *)a3 == 828792663;
        int v14 = 54;
LABEL_30:
        if (!v15 || v13 != v14) {
          goto LABEL_121;
        }
        goto LABEL_42;
      }
      if (v11 != 7) {
        goto LABEL_121;
      }
      if (*(_DWORD *)a3 != 862347127 || *(_DWORD *)((char *)a3 + 3) != 1952395827)
      {
        int v13 = *(_DWORD *)((char *)a3 + 3);
        int v14 = 1952396849;
        BOOL v15 = *(_DWORD *)a3 == 828792695;
        goto LABEL_30;
      }
LABEL_51:
      v61[0] = v9;
      v61[1] = (uint64_t)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v62, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v61, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1);
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      int v23 = *((char *)v6 + 23);
      if (v23 < 0)
      {
        if (v6[1] != (unsigned __int8 *)7)
        {
LABEL_77:
          uint64_t v24 = (std::__shared_weak_count *)*((void *)&v62 + 1);
          long long v59 = v62;
          if (*((void *)&v62 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v25 = *(std::__shared_weak_count **)(a2 + 8);
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::generic_inner_product_kernel::set_weights(a1, (uint64_t *)&v59);
          goto LABEL_82;
        }
        uint64_t v6 = (unsigned __int8 **)*v6;
      }
      else if (v23 != 7)
      {
        goto LABEL_77;
      }
      if (*(_DWORD *)v6 == 862347127 && *(_DWORD *)((char *)v6 + 3) == 1952395827)
      {
        Espresso::transposed_blob_2d<Espresso::blob<float,2>>(&v60, (uint64_t *)&v62);
        uint64_t v27 = (std::__shared_weak_count *)*((void *)&v62 + 1);
        long long v62 = v60;
        if (v27) {
          nitro::nitro_function::nitro_function(v27);
        }
      }
      goto LABEL_77;
    }
    int v20 = *(unsigned __int8 *)a3;
  }
  if (v20 == 87) {
    goto LABEL_51;
  }
  if (v20 != 98) {
    goto LABEL_121;
  }
  v57[0] = v9;
  v57[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v62, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v57, *(_DWORD *)(a1 + 304), 1);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)&v62 + 1);
  long long v56 = v62;
  if (*((void *)&v62 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(a2 + 8);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::generic_inner_product_kernel::set_biases(a1, (uint64_t *)&v56);
LABEL_82:
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v24)
  {
    nitro::nitro_function::nitro_function(v24);
LABEL_120:
    nitro::nitro_function::nitro_function(v24);
  }
LABEL_121:
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927EC414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v23 = *(std::__shared_weak_count **)(v21 - 88);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::transposed_blob_2d<Espresso::blob<float,2>>(void *a1, uint64_t *a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(a1, *(_DWORD *)(*a2 + 12), *(_DWORD *)(*a2 + 8), 1, 1);
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 12);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *(unsigned int *)(v4 + 8);
    uint64_t v10 = *a2;
    do
    {
      if ((int)v9 >= 1)
      {
        int v11 = (_DWORD *)(*(void *)(v4 + 16) + v7);
        int v12 = (_DWORD *)(*(void *)(v10 + 16) + v6);
        uint64_t v13 = v9;
        do
        {
          *v11++ = *v12;
          v12 += v5;
          --v13;
        }
        while (v13);
      }
      ++v8;
      v7 += 4 * (int)v9;
      v6 += 4;
    }
    while (v8 != v5);
  }
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a6;
  int v11 = (std::__shared_weak_count *)a6[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(a1, a2, a4, a5, v10, (uint64_t)v11, a7, a8);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (a3)
  {
    nitro::nitro_function::nitro_function(a3);
  }
}

void sub_1927EC63C(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

char *Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(void *a1, uint64_t a2, const void *a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  *a1 = 0;
  a1[1] = 0;
  if (!*(unsigned char *)(a2 + 73)) {
    goto LABEL_5;
  }
  if (!a5 || (a8 & 1) != 0)
  {
    if (!a5) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = (char *)operator new(0x58uLL);
    *((void *)result + 1) = 0;
    *((void *)result + 2) = 0;
    *(void *)uint64_t result = &unk_1EE389920;
    *((void *)result + 3) = &unk_1EE36BEB0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
    *((_DWORD *)result + 8) = a7;
    *((void *)result + 5) = a3;
    result[48] = 0;
    *a1 = result + 24;
    a1[1] = result;
    if (a6)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a6 + 8), 1uLL, memory_order_relaxed);
      *((void *)result + 7) = a5;
      *((void *)result + 8) = a6;
    }
    else
    {
      *((void *)result + 7) = a5;
      *((void *)result + 8) = 0;
    }
    return result;
  }
  if (*(unsigned char *)(a2 + 123)) {
    goto LABEL_10;
  }
LABEL_5:
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v30, a7, 1, 1, 1);
  std::string::size_type v14 = v30.__r_.__value_.__r.__words[0];
  *(_OWORD *)a1 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
  if (a4 != 4 * *(int *)(v14 + 8))
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v27, a4);
    uint64_t v18 = std::string::insert(&v27, 0, "Unexpected size s=");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = std::string::append(&v28, "/blob=");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v26, 4 * *(int *)(v14 + 8));
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v26;
    }
    else {
      int v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    uint64_t v24 = std::string::append(&v29, (const std::string::value_type *)v22, size);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v30);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v15 = *(void **)(v14 + 16);

  return (char *)memcpy(v15, a3, a4);
}

void sub_1927EC8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v36 & 1) == 0)
    {
LABEL_14:
      if (a10) {
        nitro::nitro_function::nitro_function(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v35);
  goto LABEL_14;
}

void Espresso::MetalLowmemEngine::inner_product_kernel::share_weights(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a2
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid share_weights parameter");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  objc_storeStrong((id *)(a1 + 568), v4[71]);
  objc_storeStrong((id *)(a1 + 584), v5[73]);
  objc_storeStrong((id *)(a1 + 576), v5[72]);
  *(void *)(a1 + 552) = v5[69];
  *(void *)(a1 + 560) = v5[70];
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_1927ECA88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *Espresso::MetalLowmemEngine::inner_product_kernel::blob_options@<X0>(void *this@<X0>, void *a2@<X8>)
{
  if (*((_DWORD *)this + 88))
  {
    this = operator new(0x78uLL);
    this[1] = 0;
    this[2] = 0;
    *this = &unk_1EE385C88;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
    this[13] = 0;
    this[14] = 0;
    *((_DWORD *)this + 12) = 1065353216;
    this[7] = 0x1FFFFFFFFLL;
    this[12] = 0;
    this[8] = 0;
    this[9] = 0;
    *((unsigned char *)this + 88) = 0;
    this[10] = 0;
    this[3] = &unk_1EE349D58;
    *a2 = this + 3;
    a2[1] = this;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void Espresso::MetalLowmemEngine::inner_product_kernel::__launch(uint64_t a1, id **a2, uint64_t *a3, const void ***a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *a4;
  uint64_t v10 = **a4;
  if (!v10)
  {
    int v11 = 0;
    goto LABEL_6;
  }
  if (!v11)
  {
LABEL_6:
    int v12 = 0;
    goto LABEL_7;
  }
  int v12 = (std::__shared_weak_count *)v9[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v13 = *a3;
  if (!*(void *)v13)
  {
    std::string::size_type v14 = 0;
LABEL_12:
    std::string v88 = 0;
    goto LABEL_13;
  }
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(v13 + 8);
  if (!v15) {
    goto LABEL_12;
  }
  std::string v88 = *(std::__shared_weak_count **)(v13 + 8);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
LABEL_13:
  if (v11[2] == 1 && v11[3] == 1 && !*(_DWORD *)(a1 + 340))
  {
    uint64_t v85 = v12;
    int v39 = v11[5];
    if (!*((void *)v11 + 20)
      || !*((void *)v14 + 20)
      || !*(_DWORD *)(a1 + 352) && *((void *)v14 + 21) && *((void *)v11 + 21))
    {
      id v41 = v7[19];
      BOOL v54 = v39 > 3;
      BOOL v55 = (v39 & 3) == 0;
      long long v56 = @"tex2d_MatrixMultiply_f32";
      if (v39 > 1 && (v39 & 1) == 0) {
        long long v56 = @"tex2d_MatrixMultiply_f32_2x1batch";
      }
      uint64_t v57 = @"texarray_MatrixMultiply_f32";
      if (v39 > 1 && (v39 & 1) == 0) {
        uint64_t v57 = @"texarray_MatrixMultiply_f32_2x1batch";
      }
      BOOL v58 = v54 && v55;
      if (v54 && v55)
      {
        long long v56 = @"tex2d_MatrixMultiply_f32_4x1batch";
        uint64_t v57 = @"texarray_MatrixMultiply_f32_4x1batch";
      }
      int v84 = *(_DWORD *)(v8 + 220);
      if (v84 == 1) {
        long long v59 = v57;
      }
      else {
        long long v59 = v56;
      }
      if ((*(_DWORD *)(a1 + 596) - 1) <= 1)
      {
        long long v59 = [v59 stringByReplacingOccurrencesOfString:@"_f32" withString:@"_f16"];
      }
      unint64_t v87 = v59;
      long long v60 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v8, (NSString *)v59);
      if (!*(void *)(a1 + 544)
        || *(_DWORD *)(a1 + 368) != v11[5]
        || *(_DWORD *)(a1 + 376) != *(_DWORD *)(a1 + 308)
        || *(_DWORD *)(a1 + 372) != *(_DWORD *)(a1 + 304))
      {
        *(_DWORD *)(a1 + 368) = v39;
        int32x2_t v61 = *(int32x2_t *)(a1 + 304);
        *(int32x2_t *)(a1 + 3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v61;
        *(uint32x2_t *)(a1 + 388) = vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v61, (int32x2_t)-1), 2uLL);
        int v62 = *(_DWORD *)(a1 + 596);
        if (v62 == 1) {
          char v63 = 1;
        }
        else {
          char v63 = 2 * (v62 != 2);
        }
        *(_DWORD *)(a1 + 380) = v61.i32[1] << v63;
        *(_DWORD *)(a1 + 384) = v61.i32[0] << v63;
        uint64_t v64 = [*(id *)(v8 + 144) newBufferWithBytes:a1 + 304 length:132 options:0];
        __int16 v65 = *(void **)(a1 + 544);
        *(void *)(a1 + 544) = v64;
      }
      if (!v60)
      {
        exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Kernel not found");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      [v41 setComputePipelineState:v60];
      if ((*(_DWORD *)(a1 + 596) - 1) > 1)
      {
        [v41 setBuffer:*(void *)(a1 + 568) offset:0 atIndex:0];
        uint64_t v66 = *(void *)(a1 + 576);
        if (!v66)
        {
          uint64_t v67 = (void *)(a1 + 568);
          goto LABEL_101;
        }
      }
      else
      {
        [v41 setBuffer:*(void *)(a1 + 584) offset:0 atIndex:0];
        uint64_t v66 = *(void *)(a1 + 576);
        if (!v66)
        {
          uint64_t v67 = (void *)(a1 + 584);
LABEL_101:
          [v41 setBuffer:*v67 offset:0 atIndex:1];
          goto LABEL_102;
        }
      }
      [v41 setBuffer:v66 offset:0 atIndex:1];
LABEL_102:
      [v41 setTexture:*((void *)v11 + 21) atIndex:0];
      [v41 setTexture:*((void *)v14 + 21) atIndex:2];
      [v41 setBuffer:*(void *)(a1 + 544) offset:0 atIndex:3];
      char v68 = v39 > 1 && (v39 & 1) == 0;
      if (v58) {
        char v68 = 2;
      }
      if (v39 > 1 && (v39 & 1) == 0) {
        char v69 = 1;
      }
      else {
        char v69 = v68;
      }
      int v70 = *(_DWORD *)(a1 + 372);
      if (v58) {
        char v71 = 2;
      }
      else {
        char v71 = v69;
      }
      unsigned int v72 = v70 - 1;
      unsigned int v73 = (v70 - 1) >> 2;
      uint64_t v74 = 128;
      if (v72 >= 0x400)
      {
        char v75 = 7;
      }
      else
      {
        uint64_t v74 = 64;
        char v75 = 6;
      }
      if (v72 < 0x200)
      {
        uint64_t v74 = 32;
        char v75 = 5;
      }
      BOOL v76 = v72 >= 0x100;
      uint64_t v77 = 16;
      if (v76) {
        uint64_t v77 = v74;
      }
      if (v76) {
        char v78 = v75;
      }
      else {
        char v78 = 4;
      }
      uint64_t v79 = (v73 >> v78) + 1;
      unsigned int v80 = *(_DWORD *)(a1 + 368) - 1;
      if (v84 == 1) {
        char v68 = v71;
      }
      v91[0] = v79;
      v91[1] = (int)((v80 >> v68) + 1);
      v91[2] = 1;
      uint64_t v89 = v77;
      int64x2_t v90 = vdupq_n_s64(1uLL);
      [v41 dispatchThreadgroups:v91 threadsPerThreadgroup:&v89];

      goto LABEL_127;
    }
    float v40 = *(id **)(a1 + 8);
    id v41 = (*a2)[19];
    int v42 = v11[5];
    if (*(_DWORD *)(a1 + 336)) {
      int v43 = @"embedding_lookup_f16";
    }
    else {
      int v43 = @"buff_MatrixMultiply_f16_g1";
    }
    if ((*(_DWORD *)(a1 + 596) - 1) <= 1)
    {
      int v43 = [(__CFString *)v43 stringByReplacingOccurrencesOfString:@"_f32" withString:@"_f16"];
    }
    uint64_t v44 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v40, &v43->isa);
    if (!*(void *)(a1 + 544)
      || *(_DWORD *)(a1 + 368) != v11[5]
      || *(_DWORD *)(a1 + 376) != *(_DWORD *)(a1 + 308)
      || *(_DWORD *)(a1 + 372) != *(_DWORD *)(a1 + 304))
    {
      *(_DWORD *)(a1 + 368) = v42;
      int v45 = *(_DWORD *)(a1 + 308);
      *(_DWORD *)(a1 + 376) = v45;
      int v46 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(a1 + 3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v46;
      *(_DWORD *)(a1 + 388) = ((v46 - 1) >> 2) + 1;
      *(_DWORD *)(a1 + 392) = ((v45 - 1) >> 2) + 1;
      unsigned int v47 = ((v45 - 1) >> 3) + 1;
      *(_DWORD *)(a1 + 396) = v47;
      *(_DWORD *)(a1 + 400) = v47;
      int v48 = *(_DWORD *)(a1 + 596);
      if (v48 == 1) {
        char v49 = 1;
      }
      else {
        char v49 = 2 * (v48 != 2);
      }
      *(_DWORD *)(a1 + 380) = v45 << v49;
      *(_DWORD *)(a1 + 384) = v46 << v49;
      uint64_t v50 = [v40[18] newBufferWithBytes:a1 + 304 length:132 options:0];
      uint64_t v51 = *(void **)(a1 + 544);
      *(void *)(a1 + 544) = v50;
    }
    if (!v44)
    {
      long long v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v83, "Kernel not found");
      __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v41 setComputePipelineState:v44];
    [v41 setBuffer:*((void *)v11 + 20) offset:0 atIndex:0];
    [v41 setBuffer:*((void *)v14 + 20) offset:0 atIndex:1];
    if ((*(_DWORD *)(a1 + 596) - 1) > 1)
    {
      [v41 setBuffer:*(void *)(a1 + 568) offset:0 atIndex:2];
      uint64_t v52 = *(void *)(a1 + 576);
      if (!v52)
      {
        uint64_t v53 = (void *)(a1 + 568);
        goto LABEL_125;
      }
    }
    else
    {
      [v41 setBuffer:*(void *)(a1 + 584) offset:0 atIndex:2];
      uint64_t v52 = *(void *)(a1 + 576);
      if (!v52)
      {
        uint64_t v53 = (void *)(a1 + 584);
LABEL_125:
        [v41 setBuffer:*v53 offset:0 atIndex:3];
        goto LABEL_126;
      }
    }
    [v41 setBuffer:v52 offset:0 atIndex:3];
LABEL_126:
    [v41 setBuffer:*(void *)(a1 + 544) offset:0 atIndex:4];
    uint64_t v81 = *(int *)(a1 + 368);
    *(void *)&long long v94 = ((*(_DWORD *)(a1 + 304) - 1) >> 6) + 1;
    *((void *)&v94 + 1) = v81;
    uint64_t v95 = 1;
    long long v92 = xmmword_192DCA1C0;
    uint64_t v93 = 1;
    [v41 dispatchThreadgroups:&v94 threadsPerThreadgroup:&v92];

LABEL_127:
    int v12 = v85;
    goto LABEL_46;
  }
  uint64_t v16 = a1 + 600;
  if (!*(void *)(a1 + 600))
  {
    (*(void (**)(long long *__return_ptr, const int *))(*(void *)v11 + 56))(&v94, v11);
    long long v33 = v94;
    long long v94 = 0uLL;
    int v34 = *(std::__shared_weak_count **)(a1 + 608);
    *(_OWORD *)uint64_t v16 = v33;
    if (v34)
    {
      nitro::nitro_function::nitro_function(v34);
      if (*((void *)&v94 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v94 + 1));
      }
    }
  }
  uint64_t v17 = a1 + 616;
  if (!*(void *)(a1 + 616))
  {
    (*(void (**)(long long *__return_ptr, int *))(*(void *)v14 + 56))(&v94, v14);
    long long v35 = v94;
    long long v94 = 0uLL;
    int v36 = *(std::__shared_weak_count **)(a1 + 624);
    *(_OWORD *)uint64_t v17 = v35;
    if (v36)
    {
      nitro::nitro_function::nitro_function(v36);
      if (*((void *)&v94 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v94 + 1));
      }
    }
  }
  uint64_t v86 = a2;
  (*(void (**)(const int *, id **, uint64_t))(*(void *)v11 + 40))(v11, a2, v16);
  id v18 = *(id *)(a1 + 568);
  if ((*(unsigned int (**)(const int *))(*(void *)v11 + 32))(v11) == 1)
  {
    long long v19 = (void *)[*(id *)(v8 + 144) newBufferWithLength:4 * (*(_DWORD *)(a1 + 304) * *(_DWORD *)(a1 + 308)) options:0];

    id v18 = v19;
    Espresso::convert_float16_to_float32(v8, (uint64_t)v7, *(void **)(a1 + 584), v19, (*(_DWORD *)(a1 + 304) * *(_DWORD *)(a1 + 308)), 0, 0);
  }
  (*((void (**)(id *))*v7 + 5))(v7);
  int v20 = *(const float **)(*(void *)v16 + 24);
  float __C = *(float **)(*(void *)v17 + 24);
  id v22 = v18;
  float __B = (const float *)[v22 contents];
  uint64_t v24 = (const float *)[*(id *)(a1 + 576) contents];
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v11[5], *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), 1.0, v20, *(_DWORD *)(a1 + 308), __B, ((*(_DWORD *)(a1 + 308) - 1) & 0xFFFFFFFC) + 4, 0.0, __C, *(_DWORD *)(a1 + 304));
  LODWORD(v25) = v14[5];
  if (*(_DWORD *)(a1 + 312) && v24 && (int)v25 >= 1)
  {
    uint64_t v26 = 0;
    vDSP_Length v27 = *(int *)(a1 + 304);
    std::string v28 = __C;
    do
    {
      vDSP_vadd(v24, 1, v28, 1, v28, 1, v27);
      ++v26;
      uint64_t v25 = v14[5];
      v28 += v27;
    }
    while (v26 < v25);
  }
  uint64_t v29 = (v14[3] * v14[2] * v14[4] * v25);
  int v30 = *(_DWORD *)(a1 + 316);
  if (v30 == 1)
  {
    LODWORD(v94) = 0;
    vDSP_vthr(__C, 1, (const float *)&v94, __C, 1, (int)v29);
  }
  else if (v30 == 2)
  {
    uint64_t v31 = (*(_DWORD *)(a1 + 304) * v25);
    if (v31)
    {
      int v32 = __C;
      do
      {
        if (*v32 < 0.0) {
          *int v32 = *v32 * 0.25;
        }
        ++v32;
        --v31;
      }
      while (v31);
    }
  }
  if (*(_DWORD *)(a1 + 320)) {
    BOOL v37 = (int)v29 < 1;
  }
  else {
    BOOL v37 = 1;
  }
  if (!v37)
  {
    do
    {
      float v38 = *(float *)(a1 + 324);
      *float __C = v38 * tanhf(*(float *)(a1 + 328) * *__C);
      ++__C;
      --v29;
    }
    while (v29);
  }
  (*(void (**)(int *, id **, uint64_t))(*(void *)v14 + 48))(v14, v86, v17);

LABEL_46:
  if (v88) {
    nitro::nitro_function::nitro_function(v88);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_1927ED654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  __cxa_free_exception(v16);

  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::inner_product_kernel::~inner_product_kernel(Espresso::MetalLowmemEngine::inner_product_kernel *this)
{
  *(void *)this = &unk_1EE3499D8;
  char v2 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 76);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3499D8;
  char v2 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 76);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::einsum_kernel::~einsum_kernel(Espresso::ANECompilerEngine::einsum_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::einsum_kernel *)((char *)this - 376);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_einsum_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::einsum_kernel *)((char *)this - 376);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::einsum_kernel::compile(Espresso::ANECompilerEngine::einsum_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
}

void Espresso::ANECompilerEngine::einsum_kernel::compile(Espresso::ANECompilerEngine::einsum_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  *(void *)&long long v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v27.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0];
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v27.__r_.__value_.__l.__data_, (long long **)&v27);
  int v12 = (std::__shared_weak_count *)*((void *)v10 + 5);
  int v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)&v27)+ 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v36 = 0;
  BOOL v37 = 0;
  unint64_t v38 = 0;
  if (v12)
  {
    uint64_t v15 = v14;
    int v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      int v12 = v11;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v27.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  uint64_t v16 = v33;
  long long v33 = @"MatrixMultiplication";

  int v35 = v15[41];
  std::string::pointer data = a3[2].__r_.__value_.__l.__data_;
  if (data[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)data, *((void *)data + 1));
    std::string::pointer data = a3[2].__r_.__value_.__l.__data_;
  }
  else
  {
    long long v18 = *(_OWORD *)data;
    __str.__r_.__value_.__r.__words[2] = *((void *)data + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v18;
  }
  if (data[47] < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)data + 3), *((void *)data + 4));
  }
  else
  {
    long long v19 = *(_OWORD *)(data + 24);
    v40.__r_.__value_.__r.__words[2] = *((void *)data + 5);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v19;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v29, &__str, &v41, 2uLL);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v40.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&__str + i * 8 + 24));
    }
  }
  std::string::operator=(&v27, a3);
  long long v21 = v37;
  if ((unint64_t)v37 >= v38)
  {
    unint64_t v23 = 0x8E38E38E38E38E39 * (((uint64_t)v37 - v36) >> 4);
    if (v23 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = 0x1C71C71C71C71C72 * ((uint64_t)(v38 - v36) >> 4);
    if (v24 <= v23 + 1) {
      unint64_t v24 = v23 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v38 - v36) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v25 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v25 = v24;
    }
    v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v38;
    if (v25) {
      unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    __str.__r_.__value_.__r.__words[0] = v25;
    __str.__r_.__value_.__l.__size_ = v25 + 144 * v23;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    v40.__r_.__value_.__r.__words[0] = v25 + 144 * v26;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v27);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v36, &__str);
    id v22 = v37;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v37, (uint64_t)&v27);
    id v22 = v21 + 6;
  }
  BOOL v37 = v22;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 47) + 24))((char *)this + 376, a2, &v36);

  if (v31 < 0) {
    operator delete(__p);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_1927EDCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (*(char *)(v32 - 121) < 0) {
    operator delete(*(void **)(v32 - 144));
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a10);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  a10 = (void **)&a28;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (v30)
  {
    nitro::nitro_function::nitro_function(v30);
    if (!v29)
    {
LABEL_7:
      if (!v28) {
LABEL_12:
      }
        _Unwind_Resume(a1);
LABEL_11:
      nitro::nitro_function::nitro_function(v28);
      goto LABEL_12;
    }
  }
  else if (!v29)
  {
    goto LABEL_7;
  }
  nitro::nitro_function::nitro_function(v29);
  if (!v28) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::einsum_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_einsum_kernel::kernel_type_str(Espresso::generic_einsum_kernel *this)
{
  return "einsum";
}

BOOL Espresso::ANECompilerEngine::einsum_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6 = *((void *)a3 + 6);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *(const Espresso::net **)(v6 + 72);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = 0;
LABEL_6:
  uint64_t v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)a3;
  uint64_t v12 = *(void *)(*(void *)a3 + 32);
  long long v13 = *(_OWORD *)(*(void *)a3 + 16);
  v86[0] = *(_OWORD *)*(void *)a3;
  v86[1] = v13;
  uint64_t v87 = v12;
  std::string v88 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, *(const void **)(v11 + 40), *(void *)(v11 + 48), (uint64_t)(*(void *)(v11 + 48) - *(void *)(v11 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v91, v9, (const Espresso::layer_shape *)v86, 1);
  if (v88)
  {
    uint64_t v89 = v88;
    operator delete(v88);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v14 = *(void **)a3;
  long long v15 = *(_OWORD *)(*(void *)a3 + 80);
  v80[0] = *(_OWORD *)(*(void *)a3 + 64);
  v80[1] = v15;
  uint64_t v16 = (const void *)v14[13];
  uint64_t v81 = v14[12];
  std::string __p = 0;
  uint64_t v84 = 0;
  long long v83 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v16, v14[14], (uint64_t)(v14[14] - (void)v16) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v85, v9, (const Espresso::layer_shape *)v80, 1);
  if (__p)
  {
    long long v83 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *((void *)a3 + 3);
  uint64_t v18 = *(void *)(v17 + 32);
  long long v19 = *(_OWORD *)(v17 + 16);
  v74[0] = *(_OWORD *)v17;
  v74[1] = v19;
  uint64_t v75 = v18;
  BOOL v76 = 0;
  uint64_t v78 = 0;
  uint64_t v77 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v76, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v79, v9, (const Espresso::layer_shape *)v74, 1);
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v97 > 4 || v85[6] > 4 || v79[6] >= 5)
  {
    unint64_t v25 = *a2;
    unint64_t v24 = a2[1];
    v73[0] = v25;
    v73[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "einsum_kernel: inputs must be rank 3 or 4");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)&v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v73, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
    goto LABEL_53;
  }
  if (!v98)
  {
    uint64_t v26 = *a2;
    unint64_t v24 = a2[1];
    v72[0] = v26;
    v72[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "einsum_kernel: 'x' of NCDHW layout not supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)&v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v72, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
    goto LABEL_53;
  }
  if (!v85[7])
  {
    std::string v27 = *a2;
    unint64_t v24 = a2[1];
    v71[0] = v27;
    v71[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "einsum_kernel: 'y' of NCDHW layout not supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)&v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v71, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
    goto LABEL_53;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v91, v10))
  {
    uint64_t v28 = *a2;
    unint64_t v24 = a2[1];
    v70[0] = v28;
    v70[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "einsum_kernel: 'x' blob dimensions exceed ANE limit.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)&v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v70, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
    goto LABEL_53;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v85, v10))
  {
    std::vector<std::string> v29 = *a2;
    unint64_t v24 = a2[1];
    v69[0] = v29;
    v69[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "einsum_kernel: 'y' blob dimensions exceed ANE limit.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)&v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v69, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
    goto LABEL_53;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v79, v10))
  {
    int v30 = *a2;
    unint64_t v24 = a2[1];
    v68[0] = v30;
    v68[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "einsum_kernel: output blob dimensions exceed ANE limit.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)&v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v68, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
LABEL_53:
    if (*((void *)&v57 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v57 + 1));
    }
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    goto LABEL_57;
  }
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v10, v20) && v96 != v85[5])
  {
    long long v33 = *a2;
    unint64_t v24 = a2[1];
    v67[0] = v33;
    v67[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "einsum_kernel: broadcasting not supported on pre-h13.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)&v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v67, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
    goto LABEL_73;
  }
  unsigned int v21 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, 0);
  unsigned int v22 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, (const Espresso::net *)1);
  if (v21 >= 8 || ((0x97u >> v21) & 1) == 0)
  {
    unint64_t v23 = *a2;
    unint64_t v24 = a2[1];
    v66[0] = v23;
    v66[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "einsum_kernel: unsupported 'x' compute path for ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)&v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v66, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
LABEL_73:
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
LABEL_57:
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (v24) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v24);
    }
    BOOL v31 = 0;
    goto LABEL_62;
  }
  if (v22 >= 8 || ((0x97u >> v22) & 1) == 0)
  {
    id v34 = *a2;
    unint64_t v24 = a2[1];
    v65[0] = v34;
    v65[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "einsum_kernel: unsupported 'y' compute path for ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v53, (long long *)&v48, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v65, (Espresso::base_kernel::validate_for_engine_warning_t *)&v53);
    goto LABEL_73;
  }
  std::string::size_type v35 = *((void *)&off_1E5747150 + v21);
  uint64_t v36 = *((void *)&off_1E5747150 + v22);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v63, (NSString *)(a1 + 376), v10);
  ANECMatrixMultLayerDescInitialize();
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  ANECTensorDescInitialize();
  ANECTensorDescInitialize();
  v53.__r_.__value_.__l.__size_ = v91;
  v53.__r_.__value_.__r.__words[2] = v92;
  uint64_t v55 = v93;
  *(void *)&long long v37 = v94;
  *((void *)&v37 + 1) = v95;
  long long v54 = v37;
  v53.__r_.__value_.__r.__words[0] = v35;
  *(void *)&long long v37 = v85[3];
  *((void *)&v37 + 1) = v85[4];
  long long v58 = v37;
  v56[2] = v36;
  uint64_t v59 = v85[2];
  *(void *)&long long v37 = v85[0];
  *((void *)&v37 + 1) = v85[1];
  long long v57 = v37;
  uint64_t v62 = v92;
  int v38 = ANECValidateMatrixMultLayer();
  BOOL v31 = v38 == 0;
  if (v38)
  {
    int v39 = a2[1];
    v52[0] = *a2;
    v52[1] = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v47, v38);
    std::string v40 = std::string::insert(&v47, 0, "einsum_kernel: ANECValidateMatrixMultLayer failed with status");
    std::string v46 = *v40;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, (long long *)&v46, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v52, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (v39) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v39);
    }
    Espresso::ANECompilerEngine::violations_from_alternates<ANECMatrixMultLayerDescAlternate>((uint64_t)&v46, v61, v60);
    long long v41 = (uint64_t **)v46.__r_.__value_.__r.__words[2];
    if (v46.__r_.__value_.__r.__words[2])
    {
      do
      {
        int v42 = (std::__shared_weak_count *)a2[1];
        uint64_t v44 = *a2;
        int v45 = v42;
        if (v42) {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v43 = v41[2];
        std::string::basic_string[abi:ne180100]<0>(&v47, (char *)objc_msgSend(v43, "UTF8String", v44, v45));
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v48, (long long *)&v47, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(&v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&v48);
        if (v51) {
          nitro::nitro_function::nitro_function(v51);
        }
        v99[0] = (void **)&v50;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v99);
        v99[0] = (void **)&v49;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v99);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
        if (v42) {
          nitro::nitro_function::nitro_function(v42);
        }
        long long v41 = (uint64_t **)*v41;
      }
      while (v41);
    }
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v46);
  }
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
LABEL_62:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v31;
}

void sub_1927EE618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  if (a56) {
    nitro::nitro_function::nitro_function(a56);
  }

  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  _Unwind_Resume(a1);
}

void sub_1927EE7E8()
{
  if (!v0) {
    JUMPOUT(0x1927EE7E0);
  }
  JUMPOUT(0x1927EE7D8);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECMatrixMultLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 552 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        uint64_t v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 69;
    }
    while (v6 != a2);
  }
}

void sub_1927EE8A4(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::einsum_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::einsum_kernel::~einsum_kernel(Espresso::ANECompilerEngine::einsum_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::einsum_kernel *)((char *)this + 376));
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::einsum_kernel *)((char *)this + 376));

  Espresso::generic_einsum_kernel::~generic_einsum_kernel(this);
}

char *Espresso::ANECompilerEngine::einsum_kernel::einsum_kernel(char *a1, uint64_t *a2, const std::string *a3)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  uint64_t v7 = (const std::string *)(v6 + 280);
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  char v8 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(unsigned char *)(v6 + 432) = 0;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 4std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(unsigned char *)(v6 + 504) = 0;
  *(_DWORD *)(v6 + 544) = 1065353216;
  *(_WORD *)(v6 + 552) = 0;
  *(unsigned char *)(v6 + 554) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v6 + 556) = _D1;
  *(unsigned char *)(v6 + 564) = 0;
  *(_OWORD *)(v6 + 568) = 0u;
  *(unsigned char *)(v6 + 584) = v8;
  *(void *)uint64_t v6 = &unk_1EE33F920;
  *(void *)(v6 + 376) = &unk_1EE33FA80;
  std::string::operator=((std::string *)(v6 + 280), a3);
  if (v7 != a3)
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 304, a3[1].__r_.__value_.__l.__data_, a3[1].__r_.__value_.__l.__size_, (uint64_t)(a3[1].__r_.__value_.__l.__size_ - a3[1].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 328, a3[2].__r_.__value_.__l.__data_, a3[2].__r_.__value_.__l.__size_, (uint64_t)(a3[2].__r_.__value_.__l.__size_ - a3[2].__r_.__value_.__r.__words[0]) >> 2);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 352, a3[3].__r_.__value_.__l.__data_, a3[3].__r_.__value_.__l.__size_, (uint64_t)(a3[3].__r_.__value_.__l.__size_ - a3[3].__r_.__value_.__r.__words[0]) >> 2);
  }
  return a1;
}

void sub_1927EEA90(_Unwind_Exception *a1)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_einsum_kernel::~generic_einsum_kernel(v1);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, const Espresso::layer_shape **a3)
{
  BOOL v3 = !*(_DWORD *)(a1 + 300) && !*(unsigned char *)(a1 + 307) && !*(unsigned char *)(a1 + 306) && *(unsigned char *)(a1 + 304) == 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v5, *a3, 0);
  return v6 < 4 && v3;
}

void Espresso::MPSBuffersEngine::softmax_kernel::on_resized(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a2[1] == *a2 || a3[1] == *a3) {
    return;
  }
  unsigned int v6 = *(void **)(a1 + 312);
  *(void *)(a1 + 312) = 0;

  uint64_t v7 = *a2;
  if (*(void *)v7
  {
    char v8 = *(std::__shared_weak_count **)(v7 + 8);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    char v8 = 0;
  }
  uint64_t v9 = *a3;
  if (*(void *)v9)
  {
    if (v10)
    {
      uint64_t v11 = *(std::__shared_weak_count **)(v9 + 8);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = 0;
LABEL_14:
  uint64_t v12 = *(const void **)(a1 + 8);
  if (!v12
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  std::string::size_type v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = [objc_alloc(MEMORY[0x1E4F35678]) initWithDevice:v13[18]];
  uint64_t v16 = *(void **)(a1 + 312);
  *(void *)(a1 + 312) = v15;

  uint64_t v17 = *(void **)(a1 + 312);
  if (!v17) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Error creating mps_kernel for softmax_kernel in METAL_MPS_BUFFERS engine");
  }
  [v17 setSourceRows:v10[4] * (uint64_t)v10[3]];
  [*(id *)(a1 + 312) setSourceColumns:v10[2]];
  if (*(unsigned char *)(*(void *)(a1 + 8) + 64))
  {
    uint64_t v18 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      uint64_t v18 = (void *)*v18;
    }
    long long v19 = [NSString stringWithUTF8String:v18];
    [*(id *)(a1 + 312) setLabel:v19];
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1927EEDE4(_Unwind_Exception *a1)
{
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

uint64_t Espresso::MPSBuffersEngine::softmax_kernel::force_high_precision_output_f32(Espresso::MPSBuffersEngine::softmax_kernel *this)
{
  return 0;
}

void Espresso::MPSBuffersEngine::softmax_kernel::blob_options(Espresso::MPSBuffersEngine::softmax_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  char v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    long long v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927EEFC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::softmax_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 312)) {
    Espresso::MPSBuffersEngine::softmax_kernel::on_resized(a1, a3, a4);
  }
  uint64_t v8 = *a3;
  if (!*(void *)v8)
  {
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  if (!v9)
  {
LABEL_8:
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_9:
  uint64_t v11 = *a4;
  if (!*(void *)v11)
  {
    uint64_t v12 = 0;
    goto LABEL_14;
  }
  if (!v12)
  {
LABEL_14:
    long long v13 = 0;
    goto LABEL_15;
  }
  long long v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_15:
  std::string::size_type v14 = *(void **)a2;
  if (*(void *)a2
  {
    uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void **)(a1 + 312);
  if (!v16) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to make softmax in softmax_kernel");
  }
  uint64_t v17 = v14[18];
  id v18 = v12[25];
  id v19 = v9[25];
  [v16 encodeToCommandBuffer:v17 inputMatrix:v18 resultMatrix:v19];

  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927EF220(_Unwind_Exception *a1)
{
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void Espresso::MPSBuffersEngine::softmax_kernel::~softmax_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::set_quantization_lut_blob()
{
}

uint64_t Espresso::MPSBuffersEngine::inner_product_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t a2)
{
  int v4 = 2 * *(_DWORD *)(a1 + 304);
  uint64_t v5 = (char *)operator new(0x58uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_1EE389920;
  unsigned int v6 = v5 + 24;
  *((void *)v5 + 3) = &unk_1EE36BEB0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
  *((_DWORD *)v5 + 8) = v4;
  uint64_t v7 = (Espresso *)(4 * v4);
  uint64_t v8 = Espresso::kern_alloc_uninitialized(v7);
  bzero(v8, (size_t)v7);
  *((void *)v5 + 5) = v8;
  v5[48] = 1;
  *(void *)&long long v9 = v5 + 24;
  *((void *)&v9 + 1) = v5;
  uint64_t v10 = (char **)(a1 + 856);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 864);
  *(_OWORD *)(a1 + 856) = v9;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
    unsigned int v6 = *v10;
    if (!*v10) {
      Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
    }
  }
  uint64_t v12 = *((void *)v6 + 2);
  uint64_t v13 = *(unsigned int *)(a1 + 304);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(*(void *)a2 + 16);
    uint64_t v16 = (_DWORD *)(v12 + 4);
    do
    {
      *(v16 - 1) = *(_DWORD *)(v15 + 4 * v14);
      _DWORD *v16 = *(_DWORD *)(v15 + 4 * (v13 + v14));
      v16 += 2;
      ++v14;
    }
    while (v13 != v14);
  }
  uint64_t v17 = [*(id *)(*(void *)(a1 + 8) + 144) newBufferWithBytesNoCopy:v12 length:(4 * *((int *)v6 + 2) + 4095) & 0xFFFFFFFFFFFFF000 options:0 deallocator:0];
  uint64_t v18 = *(void *)(a1 + 904);
  *(void *)(a1 + 904) = v17;

  return MEMORY[0x1F41817F8](v17, v18);
}

void sub_1927EF474(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::inner_product_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 504);
  *(void *)(a1 + 496) = v4;
  *(void *)(a1 + 504) = v3;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unsigned int v6 = *(void **)(a1 + 560);
  *(void *)(a1 + 560) = 0;

  uint64_t v7 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = 0;

  uint64_t v8 = *(void **)(a1 + 568);
  *(void *)(a1 + 568) = 0;

  if (*(unsigned char *)(a1 + 556)) {
    uint64_t v9 = *(unsigned int *)(a1 + 304);
  }
  else {
    uint64_t v9 = *(unsigned int *)(a1 + 308);
  }
  if (*(unsigned char *)(a1 + 556)) {
    uint64_t v10 = *(unsigned int *)(a1 + 308);
  }
  else {
    uint64_t v10 = *(unsigned int *)(a1 + 304);
  }
  char v11 = 6;
  if (*(_DWORD *)(a1 + 336)) {
    char v11 = 0;
  }
  unint64_t v12 = (((unint64_t)(v9 - 1) >> v11) + 1) << v11;
  uint64_t v13 = [*(id *)(*(void *)(a1 + 8) + 144) newBufferWithLength:v12 * v10 options:0];
  uint64_t v14 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = v13;

  uint64_t result = [*(id *)(a1 + 576) contents];
  uint64_t v16 = *(void *)(a1 + 496);
  uint64_t v17 = *(unsigned char **)(v16 + 16);
  *(_DWORD *)(a1 + 888) = v12;
  if (*(unsigned char *)(a1 + 556) || *(_DWORD *)(a1 + 336))
  {
    uint64_t v18 = *(unsigned int *)(v16 + 8);
    if ((int)v18 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(unsigned int *)(v16 + 12);
      do
      {
        unsigned int v21 = v17;
        unsigned int v22 = (unsigned char *)result;
        uint64_t v23 = v20;
        if ((int)v20 >= 1)
        {
          do
          {
            *v22++ = *v21;
            v21 += v18;
            --v23;
          }
          while (v23);
        }
        ++v19;
        result += v12;
        ++v17;
      }
      while (v19 != v18);
    }
    uint64_t v24 = [MEMORY[0x1E4F35640] matrixDescriptorWithRows:v10 columns:v9 matrices:1 rowBytes:v12 matrixBytes:v12 * v10 dataType:8];
    unint64_t v25 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = v24;

    uint64_t v26 = [objc_alloc(MEMORY[0x1E4F35618]) initWithBuffer:*(void *)(a1 + 576) descriptor:*(void *)(a1 + 568)];
    uint64_t v27 = *(void *)(a1 + 560);
    *(void *)(a1 + 560) = v26;
    return MEMORY[0x1F41817F8](v26, v27);
  }
  else
  {
    uint64_t v28 = *(unsigned int *)(v16 + 12);
    if ((int)v28 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *(int *)(v16 + 8);
      do
      {
        if (v12)
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (i >= v30) {
              char v32 = 0;
            }
            else {
              char v32 = v17[i];
            }
            *(unsigned char *)(result + i) = v32;
          }
        }
        ++v29;
        v17 += v30;
        result += v12;
      }
      while (v29 != v28);
    }
  }
  return result;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::get_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::get_biases(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 6std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v4;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 632);
  *(void *)(a1 + 632) = v3;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  *(_DWORD *)(a1 + 552) = 268435488;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 656) = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 664);
  *(void *)(a1 + 664) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::MPSBuffersEngine::inner_product_kernel::supports_weight_key(uint64_t a1, void *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v4 = a2[1];
    if (v4 != 12)
    {
      if (v4 == 13)
      {
        BOOL v3 = *(void *)*a2 == 0x715F68635F726570 && *(void *)(*a2 + 5) == 0x656C616373715F68;
        return !v3;
      }
      return 1;
    }
    a2 = (void *)*a2;
LABEL_14:
    unint64_t v6 = 0x7065725F63685F71;
    unint64_t v7 = bswap64(*a2);
    if (v7 == 0x7065725F63685F71 && (unint64_t v6 = 1651073395, v7 = bswap32(*((_DWORD *)a2 + 2)), v7 == 1651073395))
    {
      int v8 = 0;
    }
    else if (v7 < v6)
    {
      int v8 = -1;
    }
    else
    {
      int v8 = 1;
    }
    BOOL v3 = v8 == 0;
    return !v3;
  }
  int v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 12) {
    goto LABEL_14;
  }
  if (v2 != 13) {
    return 1;
  }
  BOOL v3 = *a2 == 0x715F68635F726570 && *(void *)((char *)a2 + 5) == 0x656C616373715F68;
  return !v3;
}

BOOL Espresso::MPSBuffersEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a1 + 424) > 0 || *(_DWORD *)(a1 + 404)) {
    return 0;
  }
  BOOL result = 0;
  unint64_t v6 = *(const Espresso::layer_shape **)a3;
  unint64_t v7 = *(void *)(a3 + 8) - *(void *)a3;
  if (v7 && v7 <= 0x80)
  {
    if (*(_DWORD *)(a1 + 332)) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 316) == 2) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 340)) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 348)) {
      return 0;
    }
    int v8 = *(_DWORD *)(a1 + 336);
    if (!v8)
    {
      if (*(_DWORD *)(a3 + 64)) {
        return 0;
      }
    }
    if (!v8)
    {
      if (v7 != 128) {
        return 1;
      }
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v6, 0);
      BOOL result = 0;
      if (v12 <= 3)
      {
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, (const Espresso::layer_shape *)(*(void *)a3 + 64), 0);
        BOOL result = 0;
        if (v12 <= 3) {
          return 1;
        }
      }
      return result;
    }
    if (v7 != 64) {
      return 0;
    }
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v6, 0);
    int v9 = *(unsigned __int8 *)(a1 + 344);
    int v10 = Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)v11, v9);
    BOOL result = 0;
    if (v10 >= 20)
    {
      if ((unint64_t)Espresso::layer_nd_shape::matrix_cols((Espresso::layer_nd_shape *)v11, v9 != 0) <= 1
        && *(void *)(a3 + 8) - *(void *)a3 == 64)
      {
        return v12 > 1;
      }
      return 0;
    }
  }
  return result;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::__set_weights_finalize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 440);
  if (!v3) {
    return;
  }
  if (!*(void *)v3) {
    return;
  }
  uint64_t v5 = *(void *)(v3 + 32);
  if (!v5 && !*(void *)(v3 + 48) && !*(void *)(v3 + 64) && !*(void *)(v3 + 80)) {
    return;
  }
  if (!*(_DWORD *)(*(void *)(a1 + 8) + 76))
  {
    if (*(int *)(v3 + 156) <= 7)
    {
      Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
      uint64_t v3 = *(void *)(a1 + 440);
      uint64_t v5 = *(void *)(v3 + 32);
    }
    if (v5 || *(void *)(v3 + 48) || *(void *)(v3 + 64) || !*(void *)(v3 + 80))
    {
      uint64_t v17 = *(void *)(v3 + 40);
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *(void *)(a2 + 8);
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("LUT quantization not implemented for inner_product_kernel.");
    }
    Espresso::quantized_weights_helper::get_per_ch_ranges((Espresso::quantized_weights_helper *)v3, &v23);
    int v9 = v24;
    v22[0] = v23;
    v22[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v10 = *(std::__shared_weak_count **)(a2 + 8);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::MPSBuffersEngine::inner_product_kernel::set_quantization_ranges_blob(a1, (uint64_t)v22);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v9)
    {
      nitro::nitro_function::nitro_function(v9);
      nitro::nitro_function::nitro_function(v9);
    }
    int32x2_t v11 = *(int32x2_t *)(a1 + 304);
    unsigned int v12 = *(int **)(a1 + 440);
    if (v12[40] >= 1 && (uint64_t v13 = *((void *)v12 + 2)) != 0)
    {
      unint64_t v7 = (std::__shared_weak_count *)*((void *)v12 + 3);
      if (!v7)
      {
LABEL_36:
        uint64_t v14 = (char *)operator new(0x58uLL);
        *((void *)v14 + 2) = 0;
        *((void *)v14 + 1) = 0;
        *(void *)uint64_t v14 = &unk_1EE389AA8;
        uint64_t v15 = *(void *)(v13 + 16);
        *((void *)v14 + 3) = &unk_1EE36BF90;
        *(_OWORD *)(v14 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
        *(_OWORD *)(v14 + 56) = 0u;
        *((int32x2_t *)v14 + 4) = vrev64_s32(v11);
        *((void *)v14 + 5) = v15;
        v14[48] = 0;
        v21[0] = (uint64_t)(v14 + 24);
        v21[1] = (uint64_t)v14;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
        uint64_t v16 = *(std::__shared_weak_count **)(a2 + 8);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::MPSBuffersEngine::inner_product_kernel::set_quantized_weights_blob(a1, v21);
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14);
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14);
        if (v7) {
          goto LABEL_13;
        }
        return;
      }
    }
    else
    {
      uint64_t v13 = *(void *)v12;
      unint64_t v7 = (std::__shared_weak_count *)*((void *)v12 + 1);
      if (!v7) {
        goto LABEL_36;
      }
    }
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_36;
  }
  Espresso::quantized_weights_helper::dequantize_to_float32_2d((Espresso::quantized_weights_helper *)v3, &v19);
  uint64_t v6 = v19;
  unint64_t v7 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 6std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v6;
  int v8 = *(std::__shared_weak_count **)(a1 + 632);
  *(void *)(a1 + 632) = v7;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  *(_DWORD *)(a1 + 552) = 268435488;
  if (v7)
  {
LABEL_13:
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_1927EFC54(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  nitro::nitro_function::nitro_function(v3);
  nitro::nitro_function::nitro_function(v3);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (a6)
  {
    uint64_t v12 = *a6;
    if (*a6)
    {
      uint64_t v13 = (std::__shared_weak_count *)a6[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v14 = *(const void **)(a1 + 8);
  if (!v14
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    id v17 = v15[18];
    nitro::nitro_function::nitro_function(v16);
  }
  else
  {
    id v17 = v15[18];
  }
  int v22 = a3[23];
  if (((char)a3[23] & 0x80000000) == 0)
  {
    switch(a3[23])
    {
      case 1u:
        int v23 = *a3;
        if (v23 == 98) {
          goto LABEL_82;
        }
        if (v23 != 87) {
          goto LABEL_127;
        }
        goto LABEL_139;
      case 2u:
      case 3u:
      case 4u:
      case 6u:
      case 8u:
      case 9u:
      case 0xBu:
        goto LABEL_127;
      case 5u:
        if (*(_DWORD *)a3 != 828792663 || a3[4] != 54) {
          goto LABEL_127;
        }
        goto LABEL_61;
      case 7u:
        if (*(_DWORD *)a3 == 828792695 && *(_DWORD *)(a3 + 3) == 1952396849) {
          goto LABEL_133;
        }
        if (*(_DWORD *)a3 != 862347127 || *(_DWORD *)(a3 + 3) != 1952395827) {
          goto LABEL_127;
        }
        goto LABEL_160;
      case 0xAu:
        goto LABEL_44;
      case 0xCu:
        if (*(void *)a3 != 0x74735F6B636F6C62 || *((_DWORD *)a3 + 2) != 1937011297) {
          goto LABEL_127;
        }
        goto LABEL_55;
      default:
        goto LABEL_34;
    }
  }
  uint64_t v24 = *((void *)a3 + 1);
  if (v24 <= 6)
  {
    if (v24 == 1)
    {
      int v40 = **(unsigned __int8 **)a3;
      if (v40 == 87)
      {
LABEL_139:
        v73[0] = v12;
        v73[1] = (uint64_t)v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v74, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v73, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
        uint64_t v36 = (std::__shared_weak_count *)*((void *)&v74 + 1);
        uint64_t v62 = v74;
        if (*((void *)&v74 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)(a1 + 6std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v62;
        uint64_t v63 = *(std::__shared_weak_count **)(a1 + 632);
        *(void *)(a1 + 632) = v36;
        if (v63) {
          nitro::nitro_function::nitro_function(v63);
        }
        *(_DWORD *)(a1 + 552) = 268435488;
        if (v36) {
          nitro::nitro_function::nitro_function(v36);
        }
        *(_DWORD *)(a1 + 552) = 268435488;
        Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)a1);
      }
      else
      {
        if (v40 != 98) {
          goto LABEL_101;
        }
LABEL_82:
        v69[0] = v12;
        v69[1] = (uint64_t)v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v74, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v69, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
        uint64_t v36 = (std::__shared_weak_count *)*((void *)&v74 + 1);
        uint64_t v41 = v74;
        if (*((void *)&v74 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)(a1 + 656) = v41;
        int v42 = *(std::__shared_weak_count **)(a1 + 664);
        *(void *)(a1 + 664) = v36;
        if (v42) {
          nitro::nitro_function::nitro_function(v42);
        }
        if (v36) {
          nitro::nitro_function::nitro_function(v36);
        }
        Espresso::MPSBuffersEngine::inner_product_kernel::populate_bias_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)a1);
      }
    }
    else
    {
      if (v24 != 5) {
        goto LABEL_101;
      }
      if (**(_DWORD **)a3 != 828792663 || *(unsigned char *)(*(void *)a3 + 4) != 54) {
        goto LABEL_101;
      }
LABEL_61:
      v72[0] = v12;
      v72[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v74, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v72, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      uint64_t v36 = (std::__shared_weak_count *)*((void *)&v74 + 1);
      uint64_t v35 = v74;
      if (*((void *)&v74 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 640) = v35;
      long long v37 = *(std::__shared_weak_count **)(a1 + 648);
      *(void *)(a1 + 648) = v36;
      if (v37) {
        nitro::nitro_function::nitro_function(v37);
      }
      *(_DWORD *)(a1 + 552) = 268435472;
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)a1);
    }
    if (!v36) {
      goto LABEL_155;
    }
    uint64_t v61 = v36;
LABEL_152:
    nitro::nitro_function::nitro_function(v61);
    goto LABEL_155;
  }
  if (v24 == 7)
  {
    int v43 = *(int **)a3;
    if (**(_DWORD **)a3 == 828792695 && *(_DWORD *)(*(void *)a3 + 3) == 1952396849)
    {
LABEL_133:
      uint64_t v59 = *(void **)(a1 + 576);
      *(void *)(a1 + 576) = 0;

      v71[0] = v12;
      v71[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v74, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v71, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
      uint64_t v60 = *(std::__shared_weak_count **)(a1 + 536);
      *(_OWORD *)(a1 + 528) = v74;
      if (!v60) {
        goto LABEL_137;
      }
    }
    else
    {
      int v45 = *v43;
      int v46 = *(int *)((char *)v43 + 3);
      if (v45 != 862347127 || v46 != 1952395827) {
        goto LABEL_101;
      }
LABEL_160:
      __int16 v65 = *(void **)(a1 + 576);
      *(void *)(a1 + 576) = 0;

      v70[0] = v12;
      v70[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v74, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v70, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
      uint64_t v60 = *(std::__shared_weak_count **)(a1 + 520);
      *(_OWORD *)(a1 + 512) = v74;
      if (!v60)
      {
LABEL_137:
        if (!v13) {
          goto LABEL_155;
        }
        uint64_t v61 = v13;
        goto LABEL_152;
      }
    }
    nitro::nitro_function::nitro_function(v60);
    goto LABEL_137;
  }
  if (v24 == 12)
  {
    if (**(void **)a3 == 0x74735F6B636F6C62 && *(_DWORD *)(*(void *)a3 + 8) == 1937011297)
    {
LABEL_55:
      uint64_t v32 = [v17 newBufferWithBytes:a4 length:a5 options:0];
      long long v33 = *(void **)(a1 + 688);
      *(void *)(a1 + 688) = v32;
      goto LABEL_154;
    }
    if ((v22 & 0x80) == 0)
    {
      if (v22 != 10)
      {
LABEL_34:
        if (v22 != 18) {
          goto LABEL_127;
        }
        BOOL v28 = *(void *)a3 == 0x775F657372617073
           && *((void *)a3 + 1) == 0x665F737468676965
           && *((_WORD *)a3 + 8) == 12851;
        uint64_t v29 = a3;
        if (!v28) {
          goto LABEL_120;
        }
        goto LABEL_165;
      }
LABEL_44:
      if (*(void *)a3 != 0x6F635F6B636F6C62 || *((_WORD *)a3 + 4) != 29548) {
        goto LABEL_127;
      }
      goto LABEL_132;
    }
  }
LABEL_101:
  if (*((void *)a3 + 1) != 10) {
    goto LABEL_107;
  }
  if (**(void **)a3 == 0x6F635F6B636F6C62 && *(_WORD *)(*(void *)a3 + 8) == 29548)
  {
LABEL_132:
    uint64_t v58 = [v17 newBufferWithBytes:a4 length:a5 options:0];
    long long v33 = *(void **)(a1 + 696);
    *(void *)(a1 + 696) = v58;
    goto LABEL_154;
  }
  if ((v22 & 0x80) == 0) {
    goto LABEL_127;
  }
LABEL_107:
  if (*((void *)a3 + 1) != 18) {
    goto LABEL_118;
  }
  if (**(void **)a3 == 0x775F657372617073
    && *(void *)(*(void *)a3 + 8) == 0x665F737468676965
    && *(_WORD *)(*(void *)a3 + 16) == 12851)
  {
LABEL_165:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("inner_producet_kernel");
  }
  if ((v22 & 0x80) == 0)
  {
    uint64_t v29 = a3;
    if (v22 != 18) {
      goto LABEL_127;
    }
    goto LABEL_120;
  }
LABEL_118:
  if (*((void *)a3 + 1) == 18)
  {
    uint64_t v29 = *(unsigned __int8 **)a3;
LABEL_120:
    uint64_t v51 = *(void *)v29;
    uint64_t v52 = *((void *)v29 + 1);
    int v53 = *((unsigned __int16 *)v29 + 8);
    if (v51 != 0x775F657372617073 || v52 != 0x665F737468676965 || v53 != 13873) {
      goto LABEL_127;
    }
    uint64_t v64 = [v17 newBufferWithBytes:a4 length:a5 options:0];
    long long v33 = *(void **)(a1 + 680);
    *(void *)(a1 + 680) = v64;
LABEL_154:

    goto LABEL_155;
  }
LABEL_127:
  uint64_t v56 = *(void *)(a1 + 440);
  if (!v56)
  {
    int v67 = 1;
    int v68 = 1;
    std::allocate_shared[abi:ne180100]<Espresso::quantized_weights_helper,std::allocator<Espresso::quantized_weights_helper>,std::shared_ptr<Espresso::abstract_context> &,int,int,unsigned int &,unsigned int &,void>(&v74, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), &v68, &v67, (int *)(a1 + 308), (int *)(a1 + 304));
    double v19 = *(double *)&v74;
    long long v57 = *(std::__shared_weak_count **)(a1 + 448);
    *(_OWORD *)(a1 + 440) = v74;
    if (v57)
    {
      nitro::nitro_function::nitro_function(v57);
      uint64_t v56 = *(void *)(a1 + 440);
    }
    else
    {
      uint64_t v56 = *(void *)&v19;
    }
  }
  Espresso::quantized_weights_helper::__set_weight_raw_blob(v56, v19, v20, v21, v18, (uint64_t)a3, (char *)a4, a5, a6);
  Espresso::MPSBuffersEngine::inner_product_kernel::__set_weights_finalize(a1, a2);
LABEL_155:

  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
  }
}

void sub_1927F0518(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer(Espresso::MPSBuffersEngine::inner_product_kernel *this)
{
  int v2 = *((_DWORD *)this + 168);
  if (v2)
  {
    if (v2 != 1) {
      return;
    }
    uint64_t v3 = (uint64_t *)((char *)this + 640);
    if (*((void *)this + 80))
    {
      uint64_t v4 = (uint64_t *)((char *)this + 640);
LABEL_15:
      int v11 = 0;
LABEL_16:
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned short>((uint64_t)this, v4, v11);
      return;
    }
    uint64_t v7 = *((void *)this + 78);
    if (v7)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(&v35, (int *)(v7 + 8));
      uint64_t v8 = v35;
      int v9 = (std::__shared_weak_count *)*((void *)this + 81);
      *((_OWORD *)this + 40) = v35;
      if (v9)
      {
        nitro::nitro_function::nitro_function(v9);
        uint64_t v10 = *v3;
      }
      else
      {
        uint64_t v10 = v8;
      }
      uint64_t v15 = *((void *)this + 78);
      uint64_t v16 = *(int *)(v15 + 12) * (uint64_t)*(int *)(v15 + 8);
      if (v16)
      {
        id v17 = *(int **)(v15 + 16);
        uint64_t v18 = *(_WORD **)(v10 + 16);
        do
        {
          int v19 = *v17++;
          _S0 = v19;
          __asm { FCVT            H0, S0 }
          *v18++ = _S0;
          --v16;
        }
        while (v16);
      }
      unint64_t v25 = this;
      uint64_t v26 = (uint64_t *)((char *)this + 640);
      int v27 = 0;
LABEL_30:
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned short>((uint64_t)v25, v26, v27);
      BOOL v28 = (std::__shared_weak_count *)*((void *)this + 81);
      *((_OWORD *)this + 40) = 0u;
      if (v28)
      {
        nitro::nitro_function::nitro_function(v28);
      }
      return;
    }
    if (!*((void *)this + 66))
    {
      if (!*((void *)this + 64)) {
        return;
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(&v35, (int *)8);
      uint64_t v12 = v35;
      uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 81);
      *((_OWORD *)this + 40) = v35;
      if (v13)
      {
        nitro::nitro_function::nitro_function(v13);
        uint64_t v14 = *v3;
      }
      else
      {
        uint64_t v14 = v12;
      }
      uint64_t v29 = *((void *)this + 78);
      uint64_t v30 = *(int *)(v29 + 12) * (uint64_t)*(int *)(v29 + 8);
      if (v30)
      {
        BOOL v31 = *(int **)(v29 + 16);
        uint64_t v32 = *(_WORD **)(v14 + 16);
        do
        {
          int v33 = *v31++;
          _S0 = v33;
          __asm { FCVT            H0, S0 }
          *v32++ = _S0;
          --v30;
        }
        while (v30);
      }
      unint64_t v25 = this;
      uint64_t v26 = (uint64_t *)((char *)this + 640);
      int v27 = 1;
      goto LABEL_30;
    }
LABEL_24:
    uint64_t v4 = (uint64_t *)((char *)this + 528);
    int v11 = 1;
    goto LABEL_16;
  }
  if (*((void *)this + 78))
  {
    uint64_t v5 = (uint64_t *)((char *)this + 624);
    int v6 = 0;
LABEL_7:
    Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<float>((uint64_t)this, v5, v6);
    return;
  }
  if (*((void *)this + 80))
  {
    uint64_t v4 = (uint64_t *)((char *)this + 640);
    goto LABEL_15;
  }
  if (*((void *)this + 66)) {
    goto LABEL_24;
  }
  if (*((void *)this + 64))
  {
    uint64_t v5 = (uint64_t *)((char *)this + 512);
    int v6 = 1;
    goto LABEL_7;
  }
  if (!*((void *)this + 62)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Weights (weights_f32) not found in METAL_MPS_BUFFERS inner_product_kernel!");
  }
}

void Espresso::MPSBuffersEngine::inner_product_kernel::populate_bias_buffer(Espresso::MPSBuffersEngine::inner_product_kernel *this)
{
  uint64_t v2 = *((void *)this + 82);
  int v3 = *((_DWORD *)this + 78);
  if (v2)
  {
    if (v3)
    {
      if (*((_DWORD *)this + 168) == 1)
      {
        uint64_t v4 = (char *)operator new(0x58uLL);
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)uint64_t v4 = &unk_1EE389CD8;
        *((void *)v4 + 3) = &unk_1EE36C0D0;
        *(_OWORD *)(v4 + 56) = 0u;
        *(_OWORD *)(v4 + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0u;
        uint64_t v5 = *(int *)(v2 + 8);
        *((_DWORD *)v4 + 8) = v5;
        size_t v6 = 2 * v5;
        uint64_t v7 = Espresso::kern_alloc_uninitialized((Espresso *)(2 * v5));
        bzero(v7, v6);
        *((void *)v4 + 5) = v7;
        v4[48] = 1;
        uint64_t v8 = *((void *)this + 82);
        uint64_t v9 = *(int *)(v8 + 8);
        if (v9)
        {
          uint64_t v10 = *(int **)(v8 + 16);
          do
          {
            int v11 = *v10++;
            _S0 = v11;
            __asm { FCVT            H0, S0 }
            *v7++ = _S0;
            --v9;
          }
          while (v9);
        }
        id v17 = (void *)*((void *)this + 73);
        *((void *)this + 73) = 0;

        uint64_t v18 = (void *)*((void *)this + 74);
        *((void *)this + 74) = 0;

        int v19 = (void *)*((void *)this + 75);
        *((void *)this + 75) = 0;

        uint64_t v20 = [*(id *)(*((void *)this + 1) + 144) newBufferWithLength:2 * *((int *)v4 + 8) options:0];
        int32x2_t v21 = (void *)*((void *)this + 75);
        *((void *)this + 75) = v20;

        int v22 = (_WORD *)[*((id *)this + 75) contents];
        int v23 = *((_DWORD *)v4 + 8);
        if (v23)
        {
          uint64_t v24 = (__int16 *)*((void *)v4 + 5);
          uint64_t v25 = *((unsigned int *)v4 + 8);
          do
          {
            __int16 v26 = *v24++;
            *v22++ = v26;
            --v25;
          }
          while (v25);
        }
        uint64_t v27 = [MEMORY[0x1E4F35998] vectorDescriptorWithLength:v23 vectors:1 vectorBytes:2 * v23 dataType:268435472];
        BOOL v28 = (void *)*((void *)this + 74);
        *((void *)this + 74) = v27;

        uint64_t v29 = [objc_alloc(MEMORY[0x1E4F35990]) initWithBuffer:*((void *)this + 75) descriptor:*((void *)this + 74)];
        uint64_t v30 = (void *)*((void *)this + 73);
        *((void *)this + 73) = v29;

        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
      }
      else
      {
        id v34 = (void *)*((void *)this + 73);
        *((void *)this + 73) = 0;

        long long v35 = (void *)*((void *)this + 74);
        *((void *)this + 74) = 0;

        uint64_t v36 = (void *)*((void *)this + 75);
        *((void *)this + 75) = 0;

        uint64_t v37 = [*(id *)(*((void *)this + 1) + 144) newBufferWithLength:4 * *(int *)(*((void *)this + 82) + 8) options:0];
        int v38 = (void *)*((void *)this + 75);
        *((void *)this + 75) = v37;

        int v39 = (_DWORD *)[*((id *)this + 75) contents];
        uint64_t v40 = *((void *)this + 82);
        uint64_t v41 = *(unsigned int *)(v40 + 8);
        if (v41)
        {
          int v42 = *(int **)(v40 + 16);
          uint64_t v43 = v41;
          do
          {
            int v44 = *v42++;
            *v39++ = v44;
            --v43;
          }
          while (v43);
        }
        uint64_t v45 = [MEMORY[0x1E4F35998] vectorDescriptorWithLength:(int)v41 vectors:1 vectorBytes:4 * (int)v41 dataType:268435488];
        int v46 = (void *)*((void *)this + 74);
        *((void *)this + 74) = v45;

        uint64_t v47 = [objc_alloc(MEMORY[0x1E4F35990]) initWithBuffer:*((void *)this + 75) descriptor:*((void *)this + 74)];
        uint64_t v48 = *((void *)this + 73);
        *((void *)this + 73) = v47;
        MEMORY[0x1F41817F8](v47, v48);
      }
      return;
    }
  }
  else if (v3)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner product kernel p.has_biases is true, but biases were not found!");
  }
  BOOL v31 = (void *)*((void *)this + 73);
  *((void *)this + 73) = 0;

  uint64_t v32 = (void *)*((void *)this + 74);
  *((void *)this + 74) = 0;

  int v33 = (void *)*((void *)this + 75);
  *((void *)this + 75) = 0;
}

void sub_1927F0AD8(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::quantized_weights_helper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388110;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::quantized_weights_helper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::blob<unsigned short,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C0D0;
  if (*(unsigned char *)(a1 + 24))
  {
    int v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<unsigned short,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C0D0;
  if (*(unsigned char *)(a1 + 24))
  {
    int v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389CD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389CD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<unsigned short>(uint64_t a1, uint64_t *a2, int a3)
{
  size_t v6 = *(void **)(a1 + 560);
  *(void *)(a1 + 560) = 0;

  uint64_t v7 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = 0;

  uint64_t v8 = *(void **)(a1 + 568);
  *(void *)(a1 + 568) = 0;

  if (*(unsigned char *)(a1 + 556)) {
    uint64_t v9 = *(unsigned int *)(a1 + 304);
  }
  else {
    uint64_t v9 = *(unsigned int *)(a1 + 308);
  }
  if (*(unsigned char *)(a1 + 556)) {
    uint64_t v10 = *(unsigned int *)(a1 + 308);
  }
  else {
    uint64_t v10 = *(unsigned int *)(a1 + 304);
  }
  char v11 = 6;
  if (*(_DWORD *)(a1 + 336)) {
    char v11 = 1;
  }
  unint64_t v12 = (((unint64_t)(2 * v9 - 1) >> v11) + 1) << v11;
  uint64_t v13 = [*(id *)(*(void *)(a1 + 8) + 144) newBufferWithLength:v12 * v10 options:0];
  uint64_t v14 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = v13;

  uint64_t result = [*(id *)(a1 + 576) contents];
  uint64_t v16 = *a2;
  id v17 = *(__int16 **)(*a2 + 16);
  unint64_t v18 = v12 >> 1;
  *(_DWORD *)(a1 + 888) = v12 >> 1;
  if (*(unsigned char *)(a1 + 556) || *(_DWORD *)(a1 + 336))
  {
    if (a3)
    {
      uint64_t v19 = *(unsigned int *)(v16 + 12);
      if ((int)v19 >= 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(unsigned int *)(v16 + 8);
        uint64_t v22 = 2 * v18;
        do
        {
          int v23 = v17;
          uint64_t v24 = (_WORD *)result;
          uint64_t v25 = v21;
          if ((int)v21 >= 1)
          {
            do
            {
              __int16 v26 = *v23++;
              *v24++ = v26;
              --v25;
            }
            while (v25);
          }
          ++v20;
          result += v22;
          v17 += (int)v21;
        }
        while (v20 != v19);
      }
    }
    else
    {
      uint64_t v27 = *(unsigned int *)(v16 + 8);
      if ((int)v27 >= 1)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(unsigned int *)(v16 + 12);
        uint64_t v30 = 2 * v18;
        do
        {
          BOOL v31 = v17;
          uint64_t v32 = (__int16 *)result;
          uint64_t v33 = v29;
          if ((int)v29 >= 1)
          {
            do
            {
              *v32++ = *v31;
              v31 += v27;
              --v33;
            }
            while (v33);
          }
          ++v28;
          result += v30;
          ++v17;
        }
        while (v28 != v27);
      }
    }
    uint64_t v34 = [MEMORY[0x1E4F35640] matrixDescriptorWithRows:v10 columns:v9 matrices:1 rowBytes:v12 matrixBytes:v12 * v10 dataType:268435472];
    long long v35 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = v34;

    uint64_t v36 = [objc_alloc(MEMORY[0x1E4F35618]) initWithBuffer:*(void *)(a1 + 576) descriptor:*(void *)(a1 + 568)];
    uint64_t v37 = *(void *)(a1 + 560);
    *(void *)(a1 + 560) = v36;
    return MEMORY[0x1F41817F8](v36, v37);
  }
  else
  {
    if (a3)
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    uint64_t v38 = *(unsigned int *)(v16 + 12);
    if ((int)v38 >= 1)
    {
      uint64_t v39 = 0;
      uint64_t v40 = *(int *)(v16 + 8);
      if (v18 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = v12 >> 1;
      }
      uint64_t v42 = 2 * v18;
      do
      {
        if (v12)
        {
          uint64_t v43 = 0;
          do
          {
            if (v43 >= v40) {
              __int16 v44 = 0;
            }
            else {
              __int16 v44 = v17[v43];
            }
            *(_WORD *)(result + 2 * v43++) = v44;
          }
          while (v41 != v43);
        }
        ++v39;
        v17 += v40;
        result += v42;
      }
      while (v39 != v38);
    }
  }
  return result;
}

void sub_1927F0FFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer<float>(uint64_t a1, uint64_t *a2, int a3)
{
  size_t v6 = *(void **)(a1 + 560);
  *(void *)(a1 + 560) = 0;

  uint64_t v7 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = 0;

  uint64_t v8 = *(void **)(a1 + 568);
  *(void *)(a1 + 568) = 0;

  if (*(unsigned char *)(a1 + 556)) {
    uint64_t v9 = *(unsigned int *)(a1 + 304);
  }
  else {
    uint64_t v9 = *(unsigned int *)(a1 + 308);
  }
  if (*(unsigned char *)(a1 + 556)) {
    uint64_t v10 = *(unsigned int *)(a1 + 308);
  }
  else {
    uint64_t v10 = *(unsigned int *)(a1 + 304);
  }
  char v11 = 2;
  if (!*(_DWORD *)(a1 + 336)) {
    char v11 = 6;
  }
  unint64_t v12 = (((unint64_t)(4 * v9 - 1) >> v11) + 1) << v11;
  uint64_t v13 = [*(id *)(*(void *)(a1 + 8) + 144) newBufferWithLength:v12 * v10 options:0];
  uint64_t v14 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = v13;

  uint64_t result = [*(id *)(a1 + 576) contents];
  uint64_t v16 = *a2;
  id v17 = *(int **)(*a2 + 16);
  unint64_t v18 = v12 >> 2;
  *(_DWORD *)(a1 + 888) = v12 >> 2;
  if (*(unsigned char *)(a1 + 556) || *(_DWORD *)(a1 + 336))
  {
    if (a3)
    {
      uint64_t v19 = *(unsigned int *)(v16 + 12);
      if ((int)v19 >= 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(unsigned int *)(v16 + 8);
        uint64_t v22 = 4 * v18;
        do
        {
          int v23 = v17;
          uint64_t v24 = (_DWORD *)result;
          uint64_t v25 = v21;
          if ((int)v21 >= 1)
          {
            do
            {
              int v26 = *v23++;
              *v24++ = v26;
              --v25;
            }
            while (v25);
          }
          ++v20;
          result += v22;
          v17 += (int)v21;
        }
        while (v20 != v19);
      }
    }
    else
    {
      uint64_t v27 = *(unsigned int *)(v16 + 8);
      if ((int)v27 >= 1)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(unsigned int *)(v16 + 12);
        uint64_t v30 = 4 * v18;
        do
        {
          BOOL v31 = v17;
          uint64_t v32 = (int *)result;
          uint64_t v33 = v29;
          if ((int)v29 >= 1)
          {
            do
            {
              *v32++ = *v31;
              v31 += v27;
              --v33;
            }
            while (v33);
          }
          ++v28;
          result += v30;
          ++v17;
        }
        while (v28 != v27);
      }
    }
    uint64_t v34 = [MEMORY[0x1E4F35640] matrixDescriptorWithRows:v10 columns:v9 matrices:1 rowBytes:v12 matrixBytes:v12 * v10 dataType:268435488];
    long long v35 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = v34;

    uint64_t v36 = [objc_alloc(MEMORY[0x1E4F35618]) initWithBuffer:*(void *)(a1 + 576) descriptor:*(void *)(a1 + 568)];
    uint64_t v37 = *(void *)(a1 + 560);
    *(void *)(a1 + 560) = v36;
    return MEMORY[0x1F41817F8](v36, v37);
  }
  else
  {
    if (a3)
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    uint64_t v38 = *(unsigned int *)(v16 + 12);
    if ((int)v38 >= 1)
    {
      uint64_t v39 = 0;
      uint64_t v40 = *(int *)(v16 + 8);
      if (v18 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = v12 >> 2;
      }
      uint64_t v42 = 4 * v18;
      do
      {
        if (v12)
        {
          uint64_t v43 = 0;
          do
          {
            int v44 = 0;
            if (v43 < v40) {
              int v44 = v17[v43];
            }
            *(_DWORD *)(result + 4 * v43++) = v44;
          }
          while (v41 != v43);
        }
        ++v39;
        v17 += v40;
        result += v42;
      }
      while (v39 != v38);
    }
  }
  return result;
}

void sub_1927F12CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::inner_product_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  if (!*(_DWORD *)(a1 + 412) && !*(_DWORD *)(a1 + 416)) {
    return Espresso::generic_inner_product_kernel::estimated_compute_resources(a1, a2, a3);
  }
  *(float *)&double v4 = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  return objc_msgSend(*(id *)(a1 + 680), "length", v4);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::on_resized(Espresso::MPSBuffersEngine::inner_product_kernel *this, uint64_t **a2, uint64_t **a3)
{
  v138[2] = *MEMORY[0x1E4F143B8];
  size_t v6 = (void *)((char *)this + 324);
  uint64_t v7 = (void *)*((void *)this + 72);
  *((void *)this + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 0;

  uint64_t v8 = (void *)*((void *)this + 75);
  *((void *)this + 75) = 0;

  uint64_t v9 = (void *)*((void *)this + 91);
  *((void *)this + 91) = 0;

  if (!*((unsigned char *)this + 556))
  {
    if (*((int *)this + 103) > 0 || *((int *)this + 104) > 0) {
      return;
    }
    uint64_t v10 = (const void **)*a2;
    char v11 = (const void *)**a2;
    if (v11)
    {
      if (v12)
      {
        uint64_t v13 = (atomic_ullong *)v10[1];
        if (v13) {
          atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
        }
LABEL_61:
        uint64_t v51 = (const void **)*a3;
        uint64_t v52 = (const void *)**a3;
        int32x2_t v121 = (std::__shared_weak_count *)v13;
        if (v52)
        {
          if (v53)
          {
            long long v54 = (atomic_ullong *)v51[1];
            if (v54)
            {
              int32x2_t v118 = (std::__shared_weak_count *)v51[1];
              atomic_fetch_add_explicit(v54 + 1, 1uLL, memory_order_relaxed);
              goto LABEL_67;
            }
          }
        }
        else
        {
          int v53 = 0;
        }
        int32x2_t v118 = 0;
LABEL_67:
        uint64_t v55 = (void **)((char *)this + 752);
        MEMORY[0x192FF0F50]((char *)this + 752, "NULL");
        *((void *)this + 92) = 0x400000004;
        *((_DWORD *)this + 186) = 8;
        uint64_t v56 = getenv("INNER_PRODUCT_BPT");
        long long v57 = getenv("INNER_PRODUCT_RPT");
        uint64_t v58 = getenv("INNER_PRODUCT_LS");
        if (v56) {
          int v59 = atoi(v56);
        }
        else {
          int v59 = 4;
        }
        *((_DWORD *)this + 184) = v59;
        if (v57) {
          int v60 = atoi(v57);
        }
        else {
          int v60 = 4;
        }
        *((_DWORD *)this + 185) = v60;
        if (v58) {
          int v61 = atoi(v58);
        }
        else {
          int v61 = 8;
        }
        *((_DWORD *)this + 186) = v61;
        Espresso::abstract_blob_container::shape((char *)&v130, **a3);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v133, (const Espresso::layer_shape *)&v130, 0);
        if (v131)
        {
          long long v132 = v131;
          operator delete(v131);
        }
        Espresso::abstract_blob_container::shape((char *)&v130, **a2);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v128, (const Espresso::layer_shape *)&v130, 0);
        if (v131)
        {
          long long v132 = v131;
          operator delete(v131);
        }
        if (v137 > 3)
        {
          if (v137 == 5)
          {
LABEL_88:
            unint64_t v62 = v134 * (uint64_t)v133;
            goto LABEL_112;
          }
          if (v137 == 4)
          {
LABEL_87:
            unint64_t v62 = v133;
            goto LABEL_112;
          }
          unint64_t v62 = 0;
        }
        else
        {
          unint64_t v62 = (int)v137;
          if (!v137) {
            goto LABEL_112;
          }
          if (v137 != 1)
          {
            if (v137 != 2) {
              goto LABEL_88;
            }
            goto LABEL_87;
          }
          unint64_t v62 = 1;
        }
LABEL_112:
        uint64_t v73 = (int)v129;
        if (v129 > 3)
        {
          if (v129 == 5)
          {
LABEL_120:
            uint64_t v73 = v128[1] * (uint64_t)v128[0];
            goto LABEL_122;
          }
          if (v129 == 4)
          {
LABEL_119:
            uint64_t v73 = v128[0];
            goto LABEL_122;
          }
          uint64_t v73 = 0;
        }
        else if (v129 && v129 != 1)
        {
          if (v129 != 2) {
            goto LABEL_120;
          }
          goto LABEL_119;
        }
LABEL_122:
        if (v62 != v73) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("src, dst must have same nbatch for inner_product.");
        }
        if (v137 == 2)
        {
          unsigned int v74 = *((_DWORD *)this + 185);
          *((_DWORD *)this + 211) = v12[60] / v74;
          int v75 = *((_DWORD *)this + 186);
          *((_DWORD *)this + 210) = v53[60] / v75;
          *((_DWORD *)this + 212) = *((_DWORD *)this + 222) / v75;
          unsigned int v76 = *((_DWORD *)this + 76);
          *((_DWORD *)this + 198) = v76;
          *((_DWORD *)this + 199) = v62;
          v6[61] = *((void *)this + 39);
          *((_DWORD *)this + 205) = *((_DWORD *)this + 80);
          *((void *)this + 103) = *v6;
          *((_DWORD *)this + 213) = *((_DWORD *)this + 107);
          int v77 = *((_DWORD *)this + 184);
          if (v62 >= v77)
          {
            unint64_t v78 = v77;
          }
          else
          {
            *((_DWORD *)this + 184) = v62;
            unint64_t v78 = v62;
            int v77 = v62;
          }
          if (v62 != v78)
          {
            if (v62 % v78) {
              int v77 = 3;
            }
            if (v62 % v77) {
              int v77 = 2;
            }
            if (v62 % v77) {
              int v79 = 1;
            }
            else {
              int v79 = v77;
            }
            *((_DWORD *)this + 184) = v79;
          }
          if (v76 % v74) {
            unsigned int v80 = 2;
          }
          else {
            unsigned int v80 = v74;
          }
          if (v76 % v80) {
            unsigned int v80 = 1;
          }
          *((_DWORD *)this + 185) = v80;
          std::to_string(&v124, v75);
          uint64_t v81 = std::string::insert(&v124, 0, "inner_product_rank2_l");
          long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v125.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          long long v83 = std::string::append(&v125, "_r");
          long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          v126.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v123, *((_DWORD *)this + 185));
          if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v85 = &v123;
          }
          else {
            uint64_t v85 = (std::string *)v123.__r_.__value_.__r.__words[0];
          }
          if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v123.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v123.__r_.__value_.__l.__size_;
          }
          uint64_t v87 = std::string::append(&v126, (const std::string::value_type *)v85, size);
          long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v127.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v88;
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          uint64_t v89 = std::string::append(&v127, "_b");
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v130.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v122, *((_DWORD *)this + 184));
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v91 = &v122;
          }
          else {
            int v91 = (std::string *)v122.__r_.__value_.__r.__words[0];
          }
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v92 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v92 = v122.__r_.__value_.__l.__size_;
          }
          int v93 = std::string::append(&v130, (const std::string::value_type *)v91, v92);
          std::string::size_type v94 = v93->__r_.__value_.__r.__words[0];
          v138[0] = v93->__r_.__value_.__l.__size_;
          *(void *)((char *)v138 + 7) = *(std::string::size_type *)((char *)&v93->__r_.__value_.__r.__words[1] + 7);
          char v95 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
          v93->__r_.__value_.__l.__size_ = 0;
          v93->__r_.__value_.__r.__words[2] = 0;
          v93->__r_.__value_.__r.__words[0] = 0;
          if (*((char *)this + 775) < 0) {
            operator delete(*v55);
          }
          *((void *)this + 94) = v94;
          *((void *)this + 95) = v138[0];
          *(void *)((char *)this + 767) = *(void *)((char *)v138 + 7);
          *((unsigned char *)this + 775) = v95;
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v122.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v130.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v127.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v123.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v126.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v125.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          int v96 = std::string::basic_string[abi:ne180100]<0>(&v130, "None");
          if (*((void *)this + 62))
          {
            MEMORY[0x192FF0F50](v96, "Range");
            int v97 = "_wuchar";
          }
          else if (*((void *)this + 80))
          {
            int v97 = "_whalf";
          }
          else
          {
            int v97 = "_wfloat";
          }
          std::string::append((std::string *)((char *)this + 752), v97);
          int v98 = *((_DWORD *)this + 168);
          if (v98 == 1)
          {
            uint64_t v99 = "_dhalf";
          }
          else
          {
            if (v98) {
              Espresso::throw_exception_selector<Espresso::generic_error>("inner product supports FP16 and FP32, aborting.");
            }
            uint64_t v99 = "_dfloat";
          }
          std::string::append((std::string *)((char *)this + 752), v99);
          uint64_t v100 = objc_opt_new();
          int64x2_t v101 = objc_opt_new();
          *((_WORD *)this + 388) = *((_DWORD *)this + 78) != 0;
          [v100 setConstantValue:(char *)this + 776 type:37 atIndex:0];
          std::operator+<char>();
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v102 = &v127;
          }
          else {
            uint64_t v102 = (std::string *)v127.__r_.__value_.__r.__words[0];
          }
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v103 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v103 = v127.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)((char *)this + 752), (const std::string::value_type *)v102, v103);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v127.__r_.__value_.__l.__data_);
          }
          uint64_t v104 = *((void *)this + 1);
          id v105 = *(id *)(v104 + 144);
          if (*((char *)this + 775) < 0) {
            uint64_t v55 = (void **)*v55;
          }
          id v106 = v101;
          uint64_t v107 = objc_msgSend(*(id *)(v104 + 160), "kernelForFunction:cacheString:withConstants:", v55, objc_msgSend(v106, "UTF8String"), v100);
          uint64_t v108 = (void *)*((void *)this + 91);
          *((void *)this + 91) = v107;

          uint64_t v109 = [v105 newBufferWithBytes:(char *)this + 792 length:64 options:0];
          long long v110 = (void *)*((void *)this + 98);
          *((void *)this + 98) = v109;

          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v130.__r_.__value_.__l.__data_);
          }
        }
        if (v118) {
          nitro::nitro_function::nitro_function(v118);
        }
        unsigned int v72 = v121;
        if (v121)
        {
LABEL_109:
          nitro::nitro_function::nitro_function(v72);
          return;
        }
        return;
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v13 = 0;
    goto LABEL_61;
  }
  *((_OWORD *)this + 38) = 0u;
  if (*((_DWORD *)this + 79))
  {
    *((_DWORD *)this + 152) = 1;
  }
  else if (*((_DWORD *)this + 80))
  {
    *((_DWORD *)this + 152) = 5;
    *((_DWORD *)this + 153) = *((_DWORD *)this + 81);
    *((_DWORD *)this + 154) = *((_DWORD *)this + 82);
  }
  if (*((_DWORD *)this + 84))
  {
    uint64_t v14 = *a2;
    uint64_t v15 = (const void *)**a2;
    if (v15)
    {
      if (v16)
      {
        id v17 = (std::__shared_weak_count *)v14[1];
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_23:
        uint64_t v21 = *a3;
        uint64_t v22 = (const void *)**a3;
        if (!v22) {
          goto LABEL_107;
        }
        if (!v23) {
          goto LABEL_107;
        }
        uint64_t v24 = (uint64_t)v23;
        uint64_t v25 = (std::__shared_weak_count *)v21[1];
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v16)
        {
LABEL_105:
          if (v25) {
            nitro::nitro_function::nitro_function(v25);
          }
LABEL_107:
          if (!v17) {
            return;
          }
          unsigned int v72 = v17;
          goto LABEL_109;
        }
        int v26 = (const void *)*((void *)this + 1);
        int32x2_t v120 = v25;
        if (!v26
        {
          exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
          exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
        }
        uint64_t v28 = v27;
        uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 2);
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int32x2_t v117 = v29;
        int v30 = (*(uint64_t (**)(int *))(*(void *)v16 + 32))(v16);
        uint64_t v31 = v16[2];
        if ((v30 - 1) >= 0xD)
        {
          unint64_t v33 = *((void *)v16 + 31)
              + *((void *)v16 + 31) * ((unint64_t)(4 * v31 - 1) / *((void *)v16 + 31));
          unint64_t v32 = 4;
        }
        else
        {
          unint64_t v32 = qword_192DF6AD8[v30 - 1];
          unint64_t v33 = *((void *)v16 + 31) + *((void *)v16 + 31) * ((v32 * v31 - 1) / *((void *)v16 + 31));
        }
        int v39 = v16[3];
        int v38 = v16[4];
        int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 32))(v24);
        int v115 = v39;
        int v116 = v38;
        uint64_t v41 = v28;
        uint64_t v42 = *(int *)(v24 + 8);
        if ((v40 - 1) >= 0xD)
        {
          unint64_t v44 = *(void *)(v24 + 248)
              + *(void *)(v24 + 248) * ((unint64_t)(4 * v42 - 1) / *(void *)(v24 + 248));
          unint64_t v43 = 4;
        }
        else
        {
          unint64_t v43 = qword_192DF6AD8[v40 - 1];
          unint64_t v44 = *(void *)(v24 + 248) + *(void *)(v24 + 248) * ((v43 * v42 - 1) / *(void *)(v24 + 248));
        }
        int v113 = *(_DWORD *)(v24 + 16);
        int v114 = *(_DWORD *)(v24 + 12);
        Espresso::abstract_blob_container::shape((char *)&v130, v24);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v133, (const Espresso::layer_shape *)&v130, 0);
        unint64_t v45 = v33 / v32;
        unint64_t v46 = v44 / v43;
        if (v131)
        {
          long long v132 = v131;
          operator delete(v131);
        }
        *((void *)this + 104) = *((void *)this + 38);
        int v47 = *((unsigned __int8 *)this + 344);
        unsigned int v48 = v137;
        uint64_t v49 = v41;
        if (*((unsigned char *)this + 344) || v137 <= 3)
        {
          switch(v137)
          {
            case 1u:
              int v50 = 1;
              break;
            case 2u:
              goto LABEL_57;
            case 3u:
              goto LABEL_56;
            case 4u:
              int v50 = v134 * v133 * v135;
              break;
            case 5u:
              int v50 = v134 * v133 * v135 * v136;
              break;
            default:
              goto LABEL_58;
          }
        }
        else if (v137 == 5)
        {
LABEL_56:
          int v50 = v134 * v133;
        }
        else if (v137 == 4)
        {
LABEL_57:
          int v50 = v133;
        }
        else
        {
LABEL_58:
          int v50 = 0;
        }
        *((_DWORD *)this + 199) = v50;
        v6[61] = *((void *)this + 39);
        *((_DWORD *)this + 205) = *((_DWORD *)this + 80);
        *((void *)this + 103) = *v6;
        *((_DWORD *)this + 213) = *((_DWORD *)this + 107);
        *((_DWORD *)this + 201) = v45;
        *((_DWORD *)this + 200) = v46;
        *((_DWORD *)this + 202) = 1;
        if (!v47 && v48 >= 4)
        {
          *((_DWORD *)this + 202) = v115 * v45;
          *((_DWORD *)this + 201) = v115 * v45 * v116;
          *((_DWORD *)this + 200) = v113 * v114 * v46;
        }
        uint64_t v63 = [v41[18] newBufferWithBytes:(char *)this + 792 length:64 options:0];
        uint64_t v64 = (void *)*((void *)this + 98);
        *((void *)this + 98) = v63;

        uint64_t v25 = v120;
        __int16 v65 = objc_opt_new();
        uint64_t v66 = objc_opt_new();
        *((_WORD *)this + 388) = *((_DWORD *)this + 78) != 0;
        [v65 setConstantValue:(char *)this + 776 type:37 atIndex:0];
        if ((*(unsigned int (**)(int *))(*(void *)v16 + 32))(v16))
        {
          if ((*(unsigned int (**)(int *))(*(void *)v16 + 32))(v16) != 1)
          {
LABEL_102:
            if (!*((void *)this + 91)) {
              Espresso::throw_exception_selector<Espresso::generic_error>("could not find kernel for inner_product.");
            }

            if (v117) {
              nitro::nitro_function::nitro_function(v117);
            }
            goto LABEL_105;
          }
          uint64_t v67 = [v66 UTF8String];
          int v68 = "inner_product_buffers_generic_is_lookup_template_f16_src_f16_wt";
        }
        else
        {
          BOOL v69 = *((void *)this + 80) == 0;
          uint64_t v67 = [v66 UTF8String];
          if (v69) {
            int v68 = "inner_product_buffers_generic_is_lookup_template_f32_src_f32_wt";
          }
          else {
            int v68 = "inner_product_buffers_generic_is_lookup_template_f32_src_f16_wt";
          }
        }
        uint64_t v70 = [v49[20] kernelForFunction:v68 cacheString:v67 withConstants:v65];
        char v71 = (void *)*((void *)this + 91);
        *((void *)this + 91) = v70;

        goto LABEL_102;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    id v17 = 0;
    goto LABEL_23;
  }
  unint64_t v18 = (const void *)*((void *)this + 1);
  if (!v18
  {
    uint64_t v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v111, "Espresso: wrong_context_type");
    v111->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    id v119 = v19[18];
    nitro::nitro_function::nitro_function(v20);
  }
  else
  {
    id v119 = v19[18];
  }
  uint64_t v34 = [objc_alloc(MEMORY[0x1E4F35648]) initWithDevice:v119];
  long long v35 = (void *)*((void *)this + 68);
  *((void *)this + 68) = v34;

  if (!*((void *)this + 68)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Error creating mps_kernel for inner_product_kernel in METAL_MPS_BUFFERS engine");
  }
  if (*(unsigned char *)(*((void *)this + 1) + 64))
  {
    uint64_t v36 = (void *)((char *)this + 176);
    if (*((char *)this + 199) < 0) {
      uint64_t v36 = (void *)*v36;
    }
    uint64_t v37 = [NSString stringWithUTF8String:v36];
    [*((id *)this + 68) setLabel:v37];
  }
}

void sub_1927F22C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }

  if (*(char *)(v53 - 185) < 0) {
    operator delete(*(void **)(v53 - 208));
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::clear_weights(std::__shared_weak_count **this)
{
  Espresso::generic_inner_product_kernel::clear_weights((Espresso::generic_inner_product_kernel *)this);
  uint64_t v2 = this[70];
  this[70] = 0;

  int v3 = this[71];
  this[71] = 0;

  double v4 = this[72];
  this[72] = 0;

  uint64_t v5 = this[73];
  this[73] = 0;

  size_t v6 = this[74];
  this[74] = 0;

  uint64_t v7 = this[75];
  this[75] = 0;

  uint64_t v8 = this[112];
  this[112] = 0;

  uint64_t v9 = this[113];
  this[113] = 0;

  uint64_t v10 = this[79];
  long long v11 = 0uLL;
  *((_OWORD *)this + 39) = 0u;
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
    long long v11 = 0uLL;
  }
  unint64_t v12 = this[81];
  *((_OWORD *)this + 40) = v11;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v13 = this[83];
  *((_OWORD *)this + 41) = 0u;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  uint64_t v14 = this[85];
  this[85] = 0;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::blob_options(Espresso::MPSBuffersEngine::inner_product_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  double v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927F2738(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::inner_product_kernel::__launch(int32x2_t *this, uint64_t *a2, uint64_t **a3, const void ***a4)
{
  if (this[51].i32[1] > 0 || this[52].i32[0] >= 1)
  {
    int32x2_t v8 = this[1];
    uint64_t v9 = *a2;
    id v10 = *(id *)(*(void *)&v8 + 144);
    int32x2_t v90 = this[38];
    uint64_t v11 = **a3;
    uint64_t v12 = **a4;
    uint64_t v13 = [*(id *)(v9 + 144) computeCommandEncoder];
    __int32 v14 = this[51].i32[1];
    if (v14 == 16)
    {
      BOOL v17 = 0;
      BOOL v16 = this[52].i32[0] == 1;
      int32x2_t v15 = v90;
    }
    else
    {
      int32x2_t v15 = v90;
      if (v14 == 4)
      {
        BOOL v16 = 0;
        BOOL v17 = this[52].i32[0] == 4;
        if (this[52].i32[0] == 4)
        {
LABEL_10:
          unint64_t v18 = v15.u32[0] / (unint64_t)this[52].i32[0];
          if (!*(void *)&this[89])
          {
            LODWORD(v114) = v15.u32[0] / (unint64_t)this[52].i32[0];
            *(int32x2_t *)((char *)&v114 + 4) = vrev64_s32(v15);
            uint64_t v19 = [v10 newBufferWithBytes:&v114 length:12 options:0];
            uint64_t v20 = (void *)this[89];
            this[89] = (int32x2_t)v19;
          }
          int32x2_t v21 = this[90];
          if (!*(void *)&v21)
          {
            if (v17) {
              uint64_t v22 = "spmv_sparseblock4x4_h";
            }
            else {
              uint64_t v22 = "spmv_sparseblock16x1_h";
            }
            uint64_t v23 = [*(id *)(*(void *)&v8 + 160) kernelForFunction:v22 cacheString:0 withConstants:0];
            uint64_t v24 = (void *)this[90];
            this[90] = (int32x2_t)v23;

            int32x2_t v21 = this[90];
          }
          [v13 setComputePipelineState:*(void *)&v21];
          [v13 setBuffer:*(void *)&this[85] offset:0 atIndex:0];
          [v13 setBuffer:v12[21] offset:0 atIndex:1];
          [v13 setBuffer:*(void *)(v11 + 168) offset:0 atIndex:2];
          [v13 setBuffer:*(void *)&this[86] offset:0 atIndex:3];
          [v13 setBuffer:*(void *)&this[87] offset:0 atIndex:4];
          [v13 setBuffer:*(void *)&this[89] offset:0 atIndex:5];
          if (Espresso::MPSBuffersEngine::inner_product_kernel::__launch_sparse(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::onceToken != -1) {
            dispatch_once(&Espresso::MPSBuffersEngine::inner_product_kernel::__launch_sparse(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::onceToken, &__block_literal_global_5919);
          }
          int v25 = Espresso::MPSBuffersEngine::inner_product_kernel::__launch_sparse(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::force_bs;
          if (!Espresso::MPSBuffersEngine::inner_product_kernel::__launch_sparse(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::force_bs) {
            int v25 = 16;
          }
          *(void *)&long long v114 = 1;
          *((void *)&v114 + 1) = (v18 - 1) / v25 + 1;
          uint64_t v115 = 1;
          uint64_t v98 = 2;
          uint64_t v99 = v25;
          uint64_t v100 = 1;
          [v13 dispatchThreadgroups:&v114 threadsPerThreadgroup:&v98];
          [v13 endEncoding];

          return;
        }
      }
      else
      {
        BOOL v17 = 0;
        BOOL v16 = 0;
      }
    }
    if (!v16)
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    goto LABEL_10;
  }
  if (this[69].i8[4] && !this[42].i32[0])
  {
    if (!*(void *)&this[70]) {
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)this);
    }
    if (this[39].i32[0] && !*(void *)&this[73]) {
      goto LABEL_34;
    }
  }
  else
  {
    if (!*(void *)&this[72]) {
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_weight_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)this);
    }
    if (this[39].i32[0] && !*(void *)&this[75]) {
LABEL_34:
    }
      Espresso::MPSBuffersEngine::inner_product_kernel::populate_bias_buffer((Espresso::MPSBuffersEngine::inner_product_kernel *)this);
  }
  if (this[42].i32[0])
  {
    int v26 = *a3;
    uint64_t v27 = (const void *)**a3;
    if (v27)
    {
      if (v28)
      {
        uint64_t v29 = (std::__shared_weak_count *)v26[1];
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_46:
        unint64_t v33 = *a4;
        uint64_t v34 = **a4;
        if (v34)
        {
          if (v35)
          {
            uint64_t v36 = (std::__shared_weak_count *)v33[1];
            if (v36) {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            goto LABEL_52;
          }
        }
        else
        {
          long long v35 = 0;
        }
        uint64_t v36 = 0;
LABEL_52:
        Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v127, *a2);
        id v37 = v127[0];
        Espresso::abstract_blob_container::shape((char *)&v114, (uint64_t)**a4);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v122, (const Espresso::layer_shape *)&v114, 0);
        if (__p)
        {
          int32x2_t v121 = __p;
          operator delete(__p);
        }
        Espresso::abstract_blob_container::shape((char *)&v114, **a3);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v109, (const Espresso::layer_shape *)&v114, 0);
        if (__p)
        {
          int32x2_t v121 = __p;
          operator delete(__p);
        }
        if (this[43].i8[0] || v126 <= 3)
        {
          switch(v126)
          {
            case 1u:
              uint64_t v38 = 1;
              break;
            case 2u:
              goto LABEL_64;
            case 3u:
              goto LABEL_63;
            case 4u:
              uint64_t v38 = v123 * (uint64_t)v122 * v124;
              break;
            case 5u:
              uint64_t v38 = v123 * (uint64_t)v122 * v124 * v125;
              break;
            default:
              goto LABEL_65;
          }
        }
        else if (v126 == 5)
        {
LABEL_63:
          uint64_t v38 = v123 * (uint64_t)v122;
        }
        else if (v126 == 4)
        {
LABEL_64:
          uint64_t v38 = v122;
        }
        else
        {
LABEL_65:
          uint64_t v38 = 0;
        }
        if (this[43].i8[0] || v113 <= 3)
        {
          switch(v113)
          {
            case 1u:
              uint64_t v61 = 1;
              break;
            case 2u:
              goto LABEL_112;
            case 3u:
              goto LABEL_111;
            case 4u:
              uint64_t v61 = v110 * (uint64_t)v109 * v111;
              break;
            case 5u:
              uint64_t v61 = v110 * (uint64_t)v109 * v111 * v112;
              break;
            default:
              goto LABEL_113;
          }
        }
        else if (v113 == 5)
        {
LABEL_111:
          uint64_t v61 = v110 * (uint64_t)v109;
        }
        else if (v113 == 4)
        {
LABEL_112:
          uint64_t v61 = v109;
        }
        else
        {
LABEL_113:
          uint64_t v61 = 0;
        }
        if (v38 != v61) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("src, dst must have same nbatch for inner_product.");
        }
        if (!*(void *)&this[91])
        {
          Espresso::MPSBuffersEngine::inner_product_kernel::on_resized((Espresso::MPSBuffersEngine::inner_product_kernel *)this, a3, (uint64_t **)a4);
          if (!*(void *)&this[91]) {
            Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found.");
          }
        }
        int v62 = (*(uint64_t (**)(int *))(*(void *)v28 + 32))(v28);
        int v63 = v28[3];
        uint64_t v64 = v28[2];
        int v65 = v28[4];
        DWORD1(v114) = v28[2];
        DWORD2(v114) = v65 * v63;
        int v116 = v63;
        int v117 = v65;
        unint64_t v66 = *((void *)v28 + 31);
        int v119 = *((void *)v28 + 31);
        int v67 = v28[5];
        int v68 = v28[6];
        if (v67 <= 1) {
          int v69 = 1;
        }
        else {
          int v69 = v28[5];
        }
        if (v68 <= 1) {
          int v70 = 1;
        }
        else {
          int v70 = v28[6];
        }
        int v118 = v70 * v69;
        if ((v62 - 1) >= 0xD)
        {
          unint64_t v72 = v66 + v66 * ((4 * v64 - 1) / v66);
          unint64_t v71 = 4;
        }
        else
        {
          unint64_t v71 = qword_192DF6AD8[v62 - 1];
          unint64_t v72 = v66 + v66 * ((v71 * v64 - 1) / v66);
        }
        unint64_t v73 = v72 / v71;
        int v74 = v64 - 1;
        if ((int)v64 < 1) {
          int v74 = v64 + 2;
        }
        LODWORD(__p) = (v74 >> 2) + 1;
        HIDWORD(__p) = v73 >> 2;
        LODWORD(v114) = v73;
        HIDWORD(v114) = v63 * v64;
        LODWORD(v115) = v65 * v63 * v64;
        HIDWORD(v115) = v115 * v67;
        int32x2_t v121 = (void *)__PAIR64__(v68, v69);
        int v75 = (*(uint64_t (**)(int *))(*(void *)v35 + 32))(v35);
        int v76 = v35[3];
        uint64_t v77 = v35[2];
        int v78 = v35[4];
        HIDWORD(v98) = v35[2];
        LODWORD(v99) = v78 * v76;
        int v101 = v76;
        int v102 = v78;
        unint64_t v79 = *((void *)v35 + 31);
        int v104 = *((void *)v35 + 31);
        int v80 = v35[5];
        int v81 = v35[6];
        if (v80 <= 1) {
          int v82 = 1;
        }
        else {
          int v82 = v35[5];
        }
        if (v81 <= 1) {
          int v83 = 1;
        }
        else {
          int v83 = v35[6];
        }
        int v103 = v83 * v82;
        if ((v75 - 1) >= 0xD)
        {
          unint64_t v85 = v79 + v79 * ((4 * v77 - 1) / v79);
          unint64_t v84 = 4;
        }
        else
        {
          unint64_t v84 = qword_192DF6AD8[v75 - 1];
          unint64_t v85 = v79 + v79 * ((v84 * v77 - 1) / v79);
        }
        unint64_t v86 = v85 / v84;
        int v87 = v77 - 1;
        if ((int)v77 < 1) {
          int v87 = v77 + 2;
        }
        int v105 = (v87 >> 2) + 1;
        unsigned int v106 = v86 >> 2;
        LODWORD(v98) = v86;
        HIDWORD(v99) = v76 * v77;
        LODWORD(v100) = v78 * v76 * v77;
        HIDWORD(v100) = v100 * v80;
        int v107 = v82;
        int v108 = v81;
        [v37 setComputePipelineState:*(void *)&this[91]];
        [v37 setBuffer:*((void *)v28 + 21) offset:0 atIndex:0];
        [v37 setBuffer:*((void *)v35 + 21) offset:0 atIndex:1];
        [v37 setBuffer:*(void *)&this[72] offset:0 atIndex:2];
        [v37 setBuffer:*(void *)&this[98] offset:0 atIndex:3];
        [v37 setBytes:&v114 length:56 atIndex:4];
        [v37 setBytes:&v98 length:56 atIndex:5];
        [v37 setBuffer:*(void *)&this[75] offset:0 atIndex:6];
        uint64_t v95 = 1;
        unint64_t v96 = ((unint64_t)(v38 - 1) >> 2) + 1;
        int64x2_t v97 = vdupq_n_s64(1uLL);
        long long v94 = xmmword_192DCA430;
        [v37 dispatchThreadgroups:&v96 threadsPerThreadgroup:&v94];

        Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v127);
        goto LABEL_142;
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v29 = 0;
    goto LABEL_46;
  }
  int v30 = *a3;
  uint64_t v31 = (const void *)**a3;
  if (!v31)
  {
    unint64_t v32 = 0;
    goto LABEL_67;
  }
  if (!v32)
  {
LABEL_67:
    uint64_t v29 = 0;
    goto LABEL_68;
  }
  uint64_t v29 = (std::__shared_weak_count *)v30[1];
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_68:
  int v39 = (uint64_t *)*a4;
  int v40 = **a4;
  if (!v40)
  {
    uint64_t v41 = 0;
    goto LABEL_73;
  }
  if (!v41)
  {
LABEL_73:
    uint64_t v36 = 0;
    goto LABEL_74;
  }
  uint64_t v36 = (std::__shared_weak_count *)v39[1];
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_74:
  if (*a2)
  {
    if (v42)
    {
      unint64_t v43 = (std::__shared_weak_count *)a2[1];
      if (v43) {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_80;
    }
  }
  else
  {
    uint64_t v42 = 0;
  }
  unint64_t v43 = 0;
LABEL_80:
  if (this[69].i8[4])
  {
    id v44 = *(id *)&this[70];
    if ((char *)a4[1] - (char *)*a4 == 32)
    {
      std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(&v114, (void *)(*a4)[2], (uint64_t)(*a4)[3]);
      id v45 = *(id *)(v114 + 200);

      if (*((void *)&v114 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v114 + 1));
      }
      id v44 = v45;
    }
    unint64_t v46 = (void *)this[68];
    if (!v46) {
      Espresso::throw_exception_selector<Espresso::generic_error>("mps_kernel was nil in METAL_MPS_BUFFERS inner_product_kernel.");
    }
    [v46 setSourceInputFeatureChannels:this[38].u32[1]];
    [*(id *)&this[68] setSourceOutputFeatureChannels:this[38].u32[0]];
    LODWORD(v47) = this[76].i32[1];
    LODWORD(v48) = this[77].i32[0];
    LODWORD(v49) = this[77].i32[1];
    [*(id *)&this[68] setNeuronType:this[76].u32[0] parameterA:v47 parameterB:v48 parameterC:v49];
    int v50 = (void *)this[68];
    uint64_t v51 = v42[18];
    id v52 = v41[25];
    int32x2_t v53 = this[73];
    id v54 = v32[25];
    [v50 encodeToCommandBuffer:v51 inputMatrix:v52 weightMatrix:v44 biasVector:*(void *)&v53 resultMatrix:v54];

    if (!v43) {
      goto LABEL_142;
    }
  }
  else
  {
    uint64_t v55 = *a2;
    Espresso::abstract_blob_container::shape((char *)&v114, (uint64_t)**a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v98, (const Espresso::layer_shape *)&v114, 0);
    if (__p)
    {
      int32x2_t v121 = __p;
      operator delete(__p);
    }
    Espresso::abstract_blob_container::shape((char *)&v114, **a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v122, (const Espresso::layer_shape *)&v114, 0);
    if (__p)
    {
      int32x2_t v121 = __p;
      operator delete(__p);
    }
    unint64_t v56 = Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)&v98);
    if (v56 != Espresso::layer_nd_shape::matrix_rows((Espresso::layer_nd_shape *)&v122)) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("src, dst must have same nbatch for inner_product.");
    }
    if ((HIDWORD(v100) & 0xFFFFFFFE) != 2) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("inner product for rank() != 2 or 3 is not implemented in MPS_BUFFERS_ENGINE.");
    }
    if (!*(void *)&this[91])
    {
      Espresso::MPSBuffersEngine::inner_product_kernel::on_resized((Espresso::MPSBuffersEngine::inner_product_kernel *)this, a3, (uint64_t **)a4);
      if (!*(void *)&this[91]) {
        Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found.");
      }
    }
    long long v57 = [*(id *)(v55 + 144) computeCommandEncoder];
    uint64_t v58 = v57;
    if (*((_DWORD *)v41 + 60) % this[93].i32[0])
    {
      uint64_t v89 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::generic_error::generic_error(v89);
    }
    [v57 setComputePipelineState:*(void *)&this[91]];
    [v58 setBuffer:v32[21] offset:0 atIndex:0];
    [v58 setBuffer:v41[21] offset:0 atIndex:1];
    [v58 setBuffer:*(void *)&this[72] offset:0 atIndex:2];
    if (this[62])
    {
      [v58 setBuffer:*(void *)&this[113] offset:0 atIndex:3];
      [v58 setBuffer:*(void *)&this[98] offset:0 atIndex:4];
      uint64_t v59 = 5;
    }
    else
    {
      [v58 setBuffer:*(void *)&this[98] offset:0 atIndex:3];
      uint64_t v59 = 4;
    }
    [v58 setBuffer:*(void *)&this[75] offset:0 atIndex:v59];
    unint64_t v60 = v56 / this[92].i32[0];
    v93[0] = ((this[38].i32[0] / (unsigned __int32)this[92].i32[1] - 1) >> 6) + 1;
    v93[1] = v60;
    size_t v93[2] = 1;
    long long v91 = xmmword_192DCA430;
    uint64_t v92 = 1;
    [v58 dispatchThreadgroups:v93 threadsPerThreadgroup:&v91];
    [v58 endEncoding];

    if (!v43) {
      goto LABEL_142;
    }
  }
  nitro::nitro_function::nitro_function(v43);
LABEL_142:
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
}

void sub_1927F34AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  __cxa_free_exception(v42);

  if (v43)
  {
    nitro::nitro_function::nitro_function(v43);
    if (!v40)
    {
LABEL_4:
      if (v39) {
        nitro::nitro_function::nitro_function(v39);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_4;
  }
  nitro::nitro_function::nitro_function(v40);
  goto LABEL_4;
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(void *result, void *lpsrc, uint64_t a3)
{
  int v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

unint64_t Espresso::layer_nd_shape::matrix_rows(Espresso::layer_nd_shape *this)
{
  unint64_t result = *((int *)this + 5);
  if (result > 3)
  {
    if (result == 5) {
      return *((int *)this + 1) * (uint64_t)*(int *)this;
    }
    if (result != 4) {
      return 0;
    }
    return *(int *)this;
  }
  if (result < 2) {
    return result;
  }
  if (result == 2) {
    return *(int *)this;
  }
  return *((int *)this + 1) * (uint64_t)*(int *)this;
}

const char *___ZN8Espresso16MPSBuffersEngine20inner_product_kernel15__launch_sparseERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES9__block_invoke()
{
  unint64_t result = getenv("FORCE_BLOCK_SIZE");
  if (result) {
    unint64_t result = (const char *)atoi(result);
  }
  Espresso::MPSBuffersEngine::inner_product_kernel::__launch_sparse(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::force_bs = (int)result;
  return result;
}

void Espresso::MPSBuffersEngine::inner_product_kernel::~inner_product_kernel(id *this)
{
  Espresso::MPSBuffersEngine::inner_product_kernel::~inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[110];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)this[108];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  if (*((char *)this + 775) < 0) {
    operator delete(this[94]);
  }

  double v4 = (std::__shared_weak_count *)this[83];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[81];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  size_t v6 = (std::__shared_weak_count *)this[79];
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
}

uint64_t Espresso::MPSBuffersEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)*a3;
  uint64_t v6 = a3[1] - *a3;
  unsigned int v7 = *(_DWORD *)(a1 + 280);
  if (v6 == 192 && v7 == 101)
  {
    long long v8 = *((_OWORD *)v5 + 1);
    uint64_t v9 = v5[4];
    long long v58 = *(_OWORD *)v5;
    long long v59 = v8;
    uint64_t v60 = v9;
    long long v61 = 0uLL;
    uint64_t v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
    id v10 = (void *)*a3;
    long long v11 = *(_OWORD *)(*a3 + 80);
    long long v53 = *(_OWORD *)(*a3 + 64);
    long long v54 = v11;
    uint64_t v12 = (const void *)v10[13];
    uint64_t v55 = v10[12];
    v56[0] = 0;
    v56[1] = 0;
    uint64_t v57 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v56, v12, v10[14], (uint64_t)(v10[14] - (void)v12) >> 2);
    uint64_t v13 = (void *)*a3;
    long long v14 = *(_OWORD *)(*a3 + 144);
    long long v47 = *(_OWORD *)(*a3 + 128);
    long long v48 = v14;
    int32x2_t v15 = (const void *)v13[21];
    uint64_t v49 = v13[20];
    std::string __p = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v15, v13[22], (uint64_t)(v13[22] - (void)v15) >> 2);
    BOOL v16 = Espresso::layer_shape::operator==((uint64_t)&v58, (uint64_t)&v53);
    int v17 = v16 & Espresso::layer_shape::operator==((uint64_t)&v58, (uint64_t)&v47);
    if (*(_DWORD *)(a1 + 284)) {
      char v18 = 0;
    }
    else {
      char v18 = v17;
    }
    if (__p)
    {
      uint64_t v51 = __p;
      operator delete(__p);
    }
    if (v56[0])
    {
      v56[1] = v56[0];
      operator delete(v56[0]);
    }
    if ((void)v61)
    {
      *((void *)&v61 + 1) = v61;
      operator delete((void *)v61);
    }
    return v18 & 1;
  }
  if (!(v6 >> 6)) {
    goto LABEL_17;
  }
  if (v6 >> 6 != 1)
  {
    long long v20 = *((_OWORD *)v5 + 1);
    uint64_t v21 = v5[4];
    long long v58 = *(_OWORD *)v5;
    long long v59 = v20;
    uint64_t v60 = v21;
    long long v61 = 0uLL;
    uint64_t v62 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, (const void *)v5[5], v5[6], (uint64_t)(v5[6] - v5[5]) >> 2);
    uint64_t v22 = (void *)*a3;
    long long v23 = *(_OWORD *)(*a3 + 80);
    long long v53 = *(_OWORD *)(*a3 + 64);
    long long v54 = v23;
    uint64_t v24 = (const void *)v22[13];
    uint64_t v55 = v22[12];
    v56[0] = 0;
    v56[1] = 0;
    uint64_t v57 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v56, v24, v22[14], (uint64_t)(v22[14] - (void)v24) >> 2);
    if (v6 == 128 && (v7 < 0xA || v7 - 29 <= 3))
    {
      uint64_t v25 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v58);
      if (v25 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v53))
      {
        uint64_t v27 = (void *)v61;
        uint64_t v49 = v60;
        uint64_t v26 = v60;
        long long v47 = v58;
        long long v28 = v58;
        long long v48 = v59;
        uint64_t v29 = v62;
        long long v58 = v53;
        long long v59 = v54;
        uint64_t v60 = v55;
        long long v61 = *(_OWORD *)v56;
        uint64_t v62 = v57;
        long long v53 = v28;
        long long v54 = v48;
        uint64_t v55 = v26;
        v56[0] = v27;
        uint64_t v57 = v29;
      }
    }
    char v18 = 0;
    if (v7 - 25 < 2 || v7 == 119)
    {
      unsigned int v19 = v7;
      char v30 = 0;
      goto LABEL_26;
    }
    if (v7 > 1)
    {
      char v30 = 0;
      unsigned int v35 = *(_DWORD *)(a1 + 280);
      char v18 = 1;
      if ((v35 - 100 > 0xD || ((1 << (v35 - 100)) & 0x2CFD) == 0)
        && (v35 > 0x24 || ((1 << v35) & 0x1200C02000) == 0))
      {
        char v18 = 0;
        char v30 = 0;
      }
    }
    else
    {
      if (DWORD2(v53) == 1)
      {
        int v32 = v54;
        if ((int)v54 <= 1) {
          int v33 = 1;
        }
        else {
          int v33 = v54;
        }
        unsigned int v34 = v53;
        if (v33 * HIDWORD(v53) == 1 && (void)v53 == (void)v58)
        {
          if (v7)
          {
            if (*(_DWORD *)(a1 + 280) == 1) {
              unsigned int v19 = 7;
            }
            else {
              unsigned int v19 = 1;
            }
LABEL_101:
            char v30 = 1;
            goto LABEL_26;
          }
          char v30 = 1;
          unsigned int v19 = 4;
LABEL_26:
          if (v56[0])
          {
            v56[1] = v56[0];
            operator delete(v56[0]);
          }
          if ((void)v61)
          {
            *((void *)&v61 + 1) = v61;
            operator delete((void *)v61);
          }
          if ((v30 & 1) == 0) {
            return v18 & 1;
          }
          goto LABEL_31;
        }
      }
      else
      {
        unsigned int v34 = v53;
        int v32 = v54;
      }
      BOOL v36 = v34 == 1 && DWORD1(v53) == 1;
      int v37 = v36;
      if (!v36)
      {
        int v39 = HIDWORD(v53);
        int v40 = DWORD2(v58);
        if (v32 <= 1) {
          int v38 = 1;
        }
        else {
          int v38 = v32;
        }
        goto LABEL_75;
      }
      if (v32 <= 1) {
        int v38 = 1;
      }
      else {
        int v38 = v32;
      }
      int v39 = HIDWORD(v53);
      int v40 = DWORD2(v58);
      if (v38 * HIDWORD(v53) != 1 || DWORD2(v53) != DWORD2(v58))
      {
LABEL_75:
        if (v38 * v39 == 1 && __PAIR64__(DWORD1(v53), v34) == (void)v58 && DWORD2(v53) == v40)
        {
          if (!v7)
          {
            char v30 = 1;
            unsigned int v19 = 6;
            goto LABEL_26;
          }
          BOOL v42 = *(_DWORD *)(a1 + 280) == 1;
          int v43 = 9;
        }
        else
        {
          if (DWORD2(v53) == 1) {
            int v44 = v37;
          }
          else {
            int v44 = 0;
          }
          if (v44 == 1 && v39 * v32 == v59 * HIDWORD(v58))
          {
            if (!v7)
            {
              char v30 = 1;
              unsigned int v19 = 29;
              goto LABEL_26;
            }
            BOOL v42 = *(_DWORD *)(a1 + 280) == 1;
            int v43 = 30;
          }
          else
          {
            int v45 = v44 ^ 1;
            if (v39 != 1) {
              int v45 = 1;
            }
            if (v32 == 1) {
              int v46 = v45;
            }
            else {
              int v46 = 1;
            }
            if (v46) {
              unsigned int v19 = v7;
            }
            else {
              unsigned int v19 = 31;
            }
            char v30 = v46 ^ 1;
            char v18 = 1;
            if ((v46 & 1) != 0 || !v7) {
              goto LABEL_26;
            }
            BOOL v42 = *(_DWORD *)(a1 + 280) == 1;
            int v43 = 32;
          }
        }
        if (v42) {
          unsigned int v19 = v43;
        }
        else {
          unsigned int v19 = v7;
        }
        goto LABEL_101;
      }
      int v41 = *(_DWORD *)(a1 + 280);
      if (!v41)
      {
        char v30 = 1;
        unsigned int v19 = 5;
        goto LABEL_26;
      }
      char v30 = 1;
      if (v41 == 1)
      {
        unsigned int v19 = 8;
        goto LABEL_26;
      }
    }
    unsigned int v19 = v7;
    goto LABEL_26;
  }
  if (v7 < 0x27)
  {
    unsigned int v19 = *(_DWORD *)(a1 + 280);
    if ((0x6000000003uLL >> v7)) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_17:
  unsigned int v19 = *(_DWORD *)(a1 + 280);
LABEL_31:
  if (v19 < 0xE)
  {
LABEL_32:
    char v18 = 1;
    return v18 & 1;
  }
  char v18 = 1;
  if ((v19 > 0x20 || ((1 << v19) & 0x1EFC00000) == 0) && (v19 - 103 > 0x10 || ((1 << (v19 - 103)) & 0x1D801) == 0)) {
    char v18 = 0;
  }
  return v18 & 1;
}

void sub_1927F3D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v25 = *(void **)(v23 - 72);
  if (v25)
  {
    *(void *)(v23 - 64) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::elementwise_kernel::on_resized(Espresso::MPSBuffersEngine::elementwise_kernel *this, Espresso::layer_data *a2, const void ***a3)
{
  uint64_t v3 = *(void *)a2;
  if (*((void *)a2 + 1) != *(void *)a2)
  {
    uint64_t v5 = *a3;
    if (a3[1] != *a3)
    {
      if (*(void *)v3)
      {
        if (v7)
        {
          long long v8 = *(std::__shared_weak_count **)(v3 + 8);
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v5 = *a3;
          }
        }
        else
        {
          long long v8 = 0;
        }
      }
      else
      {
        long long v8 = 0;
        unsigned int v7 = 0;
      }
      if (!*v5) {
        goto LABEL_269;
      }
      if (!v9) {
        goto LABEL_269;
      }
      id v10 = v9;
      long long v11 = (std::__shared_weak_count *)v5[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v7)
      {
LABEL_267:
        if (v11) {
          nitro::nitro_function::nitro_function(v11);
        }
LABEL_269:
        if (v8) {
          nitro::nitro_function::nitro_function(v8);
        }
        return;
      }
      *((unsigned char *)this + 368) = 0;
      *((unsigned char *)this + 332) = 0;
      uint64_t v12 = (void *)*((void *)this + 43);
      *((void *)this + 43) = 0;

      uint64_t v13 = (void *)*((void *)this + 45);
      *((void *)this + 45) = 0;

      unint64_t v14 = (unint64_t)((char *)a3[1] - (char *)*a3) >> 4;
      v150[0] = v14;
      int32x2_t v15 = (void *)*((void *)this + 43);
      *((void *)this + 43) = 0;

      *((unsigned char *)this + 352) = 0;
      BOOL v16 = (const void *)*((void *)this + 1);
      if (!v16
      {
        exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
      }
      char v18 = v17;
      unsigned int v19 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v139 = (void **)((char *)this + 344);
      if ((unsigned __int16)v14 == 1)
      {
        int v142 = v19;
        int v26 = *((_DWORD *)this + 70);
        if (v26 == 1)
        {
          int v27 = 3;
        }
        else
        {
          if (v26) {
            goto LABEL_118;
          }
          int v27 = 2;
        }
        *((_DWORD *)this + 70) = v27;
LABEL_118:
        if (!*((unsigned char *)this + 332))
        {
          long long v61 = (MTLFunctionConstantValues *)objc_opt_new();
          [(MTLFunctionConstantValues *)v61 setConstantValue:v150 type:37 atIndex:0];
          int v62 = *((_DWORD *)this + 70);
          switch(v62)
          {
            case 0:
              std::to_string(&v143, v150[0]);
              int v63 = std::string::insert(&v143, 0, "ELEM_ADD-");
              long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
              int64_t v147 = v63->__r_.__value_.__r.__words[2];
              *(_OWORD *)float32x4_t v146 = v64;
              v63->__r_.__value_.__l.__size_ = 0;
              v63->__r_.__value_.__r.__words[2] = 0;
              v63->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v143.__r_.__value_.__l.__data_);
              }
              int v65 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              if (v147 >= 0) {
                unint64_t v66 = v146;
              }
              else {
                unint64_t v66 = (void **)v146[0];
              }
              if (v65) {
                int v67 = "elementwise_add_f16_buffers";
              }
              else {
                int v67 = "elementwise_add_f32_buffers";
              }
              uint64_t v68 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v18[20], v67, (const char *)v66, v61);
              int v69 = *v139;
              std::string *v139 = (void *)v68;

              if (SHIBYTE(v147) < 0) {
                operator delete(v146[0]);
              }
              goto LABEL_264;
            case 1:
              int v105 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              unsigned int v106 = (void *)v18[20];
              if (v105) {
                [v106 kernelForFunction:"elementwise_mul_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v106 kernelForFunction:"elementwise_mul_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 2:
              int v95 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              unint64_t v96 = (void *)v18[20];
              if (v95) {
                [v96 kernelForFunction:"elementwise_addc_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v96 kernelForFunction:"elementwise_addc_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 3:
              int v107 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v108 = (void *)v18[20];
              if (v107) {
                [v108 kernelForFunction:"elementwise_mulc_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v108 kernelForFunction:"elementwise_mulc_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 4:
              int v109 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v110 = (void *)v18[20];
              if (v109) {
                [v110 kernelForFunction:"elementwise_add_xy_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v110 kernelForFunction:"elementwise_add_xy_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 5:
              int v113 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              long long v114 = (void *)v18[20];
              if (v113) {
                [v114 kernelForFunction:"elementwise_add_k_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v114 kernelForFunction:"elementwise_add_k_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 6:
              int v121 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v122 = (void *)v18[20];
              if (v121) {
                [v122 kernelForFunction:"elementwise_add_xyk_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v122 kernelForFunction:"elementwise_add_xyk_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 7:
              int v91 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              uint64_t v92 = (void *)v18[20];
              if (v91) {
                [v92 kernelForFunction:"elementwise_mul_xy_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v92 kernelForFunction:"elementwise_mul_xy_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 8:
              int v99 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              uint64_t v100 = (void *)v18[20];
              if (v99) {
                [v100 kernelForFunction:"elementwise_mul_k_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v100 kernelForFunction:"elementwise_mul_k_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 9:
              int v87 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              long long v88 = (void *)v18[20];
              if (v87) {
                [v88 kernelForFunction:"elementwise_mul_xyk_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v88 kernelForFunction:"elementwise_mul_xyk_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 10:
              int v119 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int32x2_t v120 = (void *)v18[20];
              if (v119) {
                [v120 kernelForFunction:"elementwise_inverse_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v120 kernelForFunction:"elementwise_inverse_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 11:
              int v117 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v118 = (void *)v18[20];
              if (v117) {
                [v118 kernelForFunction:"elementwise_sqrt_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v118 kernelForFunction:"elementwise_sqrt_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 12:
              int v97 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              uint64_t v98 = (void *)v18[20];
              if (v97) {
                [v98 kernelForFunction:"elementwise_rsqrt_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v98 kernelForFunction:"elementwise_rsqrt_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 13:
              int v101 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v102 = (void *)v18[20];
              if (v101) {
                [v102 kernelForFunction:"elementwise_pow_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v102 kernelForFunction:"elementwise_pow_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 28:
            case 33:
            case 34:
            case 35:
            case 36:
              goto LABEL_264;
            case 22:
              int v125 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              unsigned int v126 = (void *)v18[20];
              if (v125) {
                [v126 kernelForFunction:"elementwise_min_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v126 kernelForFunction:"elementwise_min_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 23:
              int v81 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v82 = (void *)v18[20];
              if (v81) {
                [v82 kernelForFunction:"elementwise_max_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v82 kernelForFunction:"elementwise_max_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 24:
              int v111 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v112 = (void *)v18[20];
              if (v111) {
                [v112 kernelForFunction:"elementwise_abs_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v112 kernelForFunction:"elementwise_abs_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 25:
              int v83 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              unint64_t v84 = (void *)v18[20];
              if (v83) {
                [v84 kernelForFunction:"elementwise_threshold_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v84 kernelForFunction:"elementwise_threshold_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 26:
              int v79 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v80 = (void *)v18[20];
              if (v79) {
                [v80 kernelForFunction:"elementwise_log_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v80 kernelForFunction:"elementwise_log_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 27:
              int v93 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              long long v94 = (void *)v18[20];
              if (v93) {
                [v94 kernelForFunction:"elementwise_exp_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v94 kernelForFunction:"elementwise_exp_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 29:
              int v85 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              unint64_t v86 = (void *)v18[20];
              if (v85) {
                [v86 kernelForFunction:"elementwise_add_n_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v86 kernelForFunction:"elementwise_add_n_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 30:
              int v123 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v124 = (void *)v18[20];
              if (v123) {
                [v124 kernelForFunction:"elementwise_mul_n_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v124 kernelForFunction:"elementwise_mul_n_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 31:
              int v77 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v78 = (void *)v18[20];
              if (v77) {
                [v78 kernelForFunction:"elementwise_add_scalar_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v78 kernelForFunction:"elementwise_add_scalar_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 32:
              int v89 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int32x2_t v90 = (void *)v18[20];
              if (v89) {
                [v90 kernelForFunction:"elementwise_mul_scalar_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v90 kernelForFunction:"elementwise_mul_scalar_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 37:
              int v103 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v104 = (void *)v18[20];
              if (v103) {
                [v104 kernelForFunction:"elementwise_round_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v104 kernelForFunction:"elementwise_round_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            case 38:
              int v115 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
              int v116 = (void *)v18[20];
              if (v115) {
                [v116 kernelForFunction:"elementwise_sign_f16_buffers" cacheString:0 withConstants:0];
              }
              else {
                [v116 kernelForFunction:"elementwise_sign_f32_buffers" cacheString:0 withConstants:0];
              }
              goto LABEL_232;
            default:
              int v70 = v62 - 114;
              switch(v70)
              {
                case 0:
                  int v71 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
                  unint64_t v72 = (void *)v18[20];
                  if (v71) {
                    [v72 kernelForFunction:"elementwise_cos_f16_buffers" cacheString:0 withConstants:0];
                  }
                  else {
                    [v72 kernelForFunction:"elementwise_cos_f32_buffers" cacheString:0 withConstants:0];
                  }
                  break;
                case 1:
                  int v129 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
                  std::string v130 = (void *)v18[20];
                  if (v129) {
                    [v130 kernelForFunction:"elementwise_sin_f16_buffers" cacheString:0 withConstants:0];
                  }
                  else {
                    [v130 kernelForFunction:"elementwise_sin_f32_buffers" cacheString:0 withConstants:0];
                  }
                  break;
                case 2:
                  goto LABEL_264;
                case 3:
                  int v127 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
                  uint64_t v128 = (void *)v18[20];
                  if (v127) {
                    [v128 kernelForFunction:"elementwise_floor_f16_buffers" cacheString:0 withConstants:0];
                  }
                  else {
                    [v128 kernelForFunction:"elementwise_floor_f32_buffers" cacheString:0 withConstants:0];
                  }
                  break;
                case 4:
                  int v133 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
                  int v134 = (void *)v18[20];
                  if (v133) {
                    [v134 kernelForFunction:"elementwise_ceil_f16_buffers" cacheString:0 withConstants:0];
                  }
                  else {
                    [v134 kernelForFunction:"elementwise_ceil_f32_buffers" cacheString:0 withConstants:0];
                  }
                  break;
                case 5:
                  int v131 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
                  long long v132 = (void *)v18[20];
                  if (v131) {
                    [v132 kernelForFunction:"elementwise_clip_f16_buffers" cacheString:0 withConstants:0];
                  }
                  else {
                    [v132 kernelForFunction:"elementwise_clip_f32_buffers" cacheString:0 withConstants:0];
                  }
                  break;
                default:
                  if (v70 != 103) {
                    goto LABEL_264;
                  }
                  int v75 = (*(uint64_t (**)(void *))(*v10 + 32))(v10);
                  int v76 = (void *)v18[20];
                  if (v75) {
                    [v76 kernelForFunction:"elementwise_less_scalar_f16_buffers" cacheString:0 withConstants:0];
                  }
                  else {
                    [v76 kernelForFunction:"elementwise_less_scalar_f32_buffers" cacheString:0 withConstants:0];
                  }
                  break;
              }
              uint64_t v135 = LABEL_232:;
              int v136 = *v139;
              std::string *v139 = (void *)v135;

LABEL_264:
              unsigned int v19 = v142;
              break;
          }
          goto LABEL_265;
        }
        long long v48 = *a3;
        uint64_t v49 = (*a3)[2];
        if (!v49
        {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Second blob is invalid in elementwise kernel.");
        }
        uint64_t v51 = v50;
        uint64_t v52 = (std::__shared_weak_count *)v48[3];
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)v146, v10);
        long long v53 = (void *)((char *)this + 376);
        long long v54 = (void *)*((void *)this + 47);
        if (v54)
        {
          *((void *)this + 48) = v54;
          operator delete(v54);
          *long long v53 = 0;
          *((void *)this + 48) = 0;
          *((void *)this + 49) = 0;
        }
        *(_OWORD *)long long v53 = *(_OWORD *)v146;
        *((void *)this + 49) = v147;
        Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)v146, v51);
        uint64_t v55 = (void *)*((void *)this + 50);
        if (v55)
        {
          *((void *)this + 51) = v55;
          operator delete(v55);
          *((void *)this + 50) = 0;
          *((void *)this + 51) = 0;
          *((void *)this + 52) = 0;
        }
        *((_OWORD *)this + 25) = *(_OWORD *)v146;
        *((void *)this + 52) = v147;
        Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)v146, v7);
        uint64_t v57 = (void *)((char *)this + 424);
        unint64_t v56 = (void *)*((void *)this + 53);
        unsigned int v19 = v142;
        if (v56)
        {
          *((void *)this + 54) = v56;
          operator delete(v56);
          *uint64_t v57 = 0;
          *((void *)this + 54) = 0;
          *((void *)this + 55) = 0;
        }
        *(_OWORD *)uint64_t v57 = *(_OWORD *)v146;
        *((void *)this + 55) = v147;
        int v58 = *((_DWORD *)this + 70);
        if (v58 <= 32)
        {
          if (v58 <= 12)
          {
            if (v58)
            {
              if (v58 == 1)
              {
                uint64_t v60 = (Class *)0x1E4F357E0;
                goto LABEL_169;
              }
              goto LABEL_281;
            }
            uint64_t v60 = (Class *)0x1E4F356A0;
          }
          else
          {
            switch(v58)
            {
              case 13:
                uint64_t v60 = (Class *)0x1E4F35828;
                break;
              case 22:
                uint64_t v60 = (Class *)0x1E4F357D0;
                break;
              case 23:
                uint64_t v60 = (Class *)0x1E4F357C8;
                break;
              default:
                goto LABEL_281;
            }
          }
        }
        else
        {
          int v59 = v58 - 100;
          uint64_t v60 = (Class *)0x1E4F35798;
          switch(v59)
          {
            case 0:
              uint64_t v60 = (Class *)0x1E4F35730;
              break;
            case 1:
            case 8:
            case 9:
            case 12:
              goto LABEL_281;
            case 2:
              uint64_t v60 = (Class *)0x1E4F35728;
              break;
            case 3:
              break;
            case 4:
              uint64_t v60 = (Class *)0x1E4F357A0;
              break;
            case 5:
              uint64_t v60 = (Class *)0x1E4F35750;
              break;
            case 6:
              uint64_t v60 = (Class *)0x1E4F35758;
              break;
            case 7:
              uint64_t v60 = (Class *)0x1E4F357F0;
              break;
            case 10:
              uint64_t v60 = (Class *)0x1E4F35698;
              break;
            case 11:
              uint64_t v60 = (Class *)0x1E4F357F8;
              break;
            case 13:
              uint64_t v60 = (Class *)0x1E4F358F8;
              break;
            default:
              if (0xE4F35798 != 33)
              {
                if (0xE4F35798 == 36)
                {
                  uint64_t v60 = (Class *)0x1E4F357D8;
                  break;
                }
LABEL_281:
                Espresso::throw_exception_selector<Espresso::generic_error>("Elementwise op not compatible with MPSNDArray.");
              }
              uint64_t v60 = (Class *)0x1E4F358D0;
              break;
          }
        }
LABEL_169:
        uint64_t v73 = [objc_alloc(*v60) initWithDevice:v18[18]];
        int v74 = (void *)*((void *)this + 45);
        *((void *)this + 45) = v73;

        if (v52) {
          nitro::nitro_function::nitro_function(v52);
        }
        goto LABEL_265;
      }
      if ((unsigned __int16)v14 == 3 && *((_DWORD *)this + 70) == 101)
      {
        *((unsigned char *)this + 332) = 0;
        long long v20 = (void *)v17[20];
        if (*((_DWORD *)this + 84)) {
          [v20 kernelForFunction:"elementwise_if_f16_buffers" cacheString:0 withConstants:0];
        }
        else {
        uint64_t v21 = [v20 kernelForFunction:"elementwise_if_f32_buffers" cacheString:0 withConstants:0];
        }
        int v38 = *v139;
        std::string *v139 = (void *)v21;

LABEL_265:
        if (v19) {
          nitro::nitro_function::nitro_function(v19);
        }
        goto LABEL_267;
      }
      BOOL v138 = v17;
      uint64_t v22 = (char *)*a3;
      uint64_t v23 = **a3;
      if (v23)
      {
        if (v24)
        {
          uint64_t v25 = (std::__shared_weak_count *)*((void *)v22 + 1);
          if (v25)
          {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v22 = (char *)*a3;
          }
LABEL_32:
          int v140 = v11;
          int v141 = v8;
          long long v28 = (const void *)*((void *)v22 + 2);
          if (v28)
          {
            if (v29)
            {
              char v30 = (std::__shared_weak_count *)*((void *)v22 + 3);
              if (v30)
              {
                atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v22 = (char *)*a3;
              }
LABEL_38:
              int v142 = v19;
              if ((char *)a3[1] - v22 != 32) {
                goto LABEL_47;
              }
              unsigned int v31 = *((_DWORD *)this + 70);
              if (v31 >= 0xA && v31 - 29 > 3) {
                goto LABEL_47;
              }
              Espresso::abstract_blob_container::shape((char *)v146, (uint64_t)v24);
              uint64_t v32 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v146);
              Espresso::abstract_blob_container::shape((char *)&v143, (uint64_t)v29);
              uint64_t v33 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v143);
              if (__p)
              {
                float32x4_t v145 = __p;
                operator delete(__p);
              }
              if (v148)
              {
                char v149 = v148;
                operator delete(v148);
              }
              if (v32 < v33)
              {
                *((unsigned char *)this + 352) = 1;
                unsigned int v34 = v29;
                unsigned int v35 = v30;
              }
              else
              {
LABEL_47:
                unsigned int v34 = v24;
                unsigned int v35 = v25;
                uint64_t v24 = v29;
                uint64_t v25 = v30;
              }
              unsigned int v36 = *((_DWORD *)this + 70);
              unsigned int v37 = v36 - 100;
              long long v11 = v140;
              long long v8 = v141;
              if (v36 - 100 <= 0xD)
              {
                if (((1 << v37) & 0x2CF5) != 0) {
                  goto LABEL_113;
                }
                if (v36 == 103) {
                  goto LABEL_55;
                }
              }
              if (v36 > 0x24) {
                goto LABEL_114;
              }
              if (((1 << v36) & 0x1200002000) != 0) {
                goto LABEL_113;
              }
              if (((1 << v36) & 3) == 0)
              {
                if (((1 << v36) & 0xC00000) == 0) {
                  goto LABEL_114;
                }
LABEL_55:
                if ((v34[2] != v24[2] || v34[3] != v24[3] || v34[4] != v24[4] || v34[5] != v24[5] || v34[6] != v24[6])
                  && (v36 <= 0x24 && ((1 << v36) & 0x1200C00000) != 0 || v37 <= 3))
                {
                  goto LABEL_113;
                }
LABEL_114:
                if (!v25) {
                  goto LABEL_116;
                }
                goto LABEL_115;
              }
              int v39 = v34[2];
              int v40 = v24[2];
              if (v39 == v40 && v34[3] == v24[3] && v34[4] == v24[4] && v34[5] == v24[5] && v34[6] == v24[6]) {
                goto LABEL_114;
              }
              int v41 = v24[4];
              if (v41 == 1)
              {
                int v47 = v24[6];
                if (v47 <= 1) {
                  int v47 = 1;
                }
                if (v39 == v40 && v47 * v24[5] == 1 && v24[3] == v34[3])
                {
                  if (v36 == 1)
                  {
                    int v43 = 7;
                  }
                  else
                  {
                    if (v36) {
                      goto LABEL_114;
                    }
                    int v43 = 4;
                  }
                  goto LABEL_277;
                }
              }
              if (v40 == 1 && v24[3] == 1)
              {
                int v42 = v24[6];
                if (v42 <= 1) {
                  int v42 = 1;
                }
                if (v42 * v24[5] == 1 && v41 == v34[4])
                {
                  if (v36 == 1)
                  {
                    int v43 = 8;
                  }
                  else
                  {
                    if (v36) {
                      goto LABEL_114;
                    }
                    int v43 = 5;
                  }
                  goto LABEL_277;
                }
              }
              int v44 = v24[5];
              int v45 = v24[6];
              if (v45 <= 1) {
                int v46 = 1;
              }
              else {
                int v46 = v24[6];
              }
              if (v39 == v40 && v46 * v44 == 1 && v24[3] == v34[3] && v41 == v34[4])
              {
                if (v36 == 1)
                {
                  int v43 = 9;
                }
                else
                {
                  if (v36) {
                    goto LABEL_114;
                  }
                  int v43 = 6;
                }
                goto LABEL_277;
              }
              if (v40 == 1 && v24[3] == 1 && v41 == 1)
              {
                if (v44 * v45 == v34[6] * v34[5])
                {
                  if (v36 == 1)
                  {
                    int v43 = 30;
                  }
                  else
                  {
                    if (v36) {
                      goto LABEL_114;
                    }
                    int v43 = 29;
                  }
                  goto LABEL_277;
                }
                if (v45 == 1 && v44 == 1)
                {
                  if (v36 == 1)
                  {
                    int v43 = 32;
                  }
                  else
                  {
                    if (v36) {
                      goto LABEL_114;
                    }
                    int v43 = 31;
                  }
LABEL_277:
                  *((_DWORD *)this + 70) = v43;
                  if (!v25)
                  {
LABEL_116:
                    char v18 = v138;
                    if (v35) {
                      nitro::nitro_function::nitro_function(v35);
                    }
                    goto LABEL_118;
                  }
LABEL_115:
                  nitro::nitro_function::nitro_function(v25);
                  goto LABEL_116;
                }
              }
LABEL_113:
              *((unsigned char *)this + 332) = 1;
              goto LABEL_114;
            }
          }
          else
          {
            uint64_t v29 = 0;
          }
          char v30 = 0;
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = 0;
      goto LABEL_32;
    }
  }
}

void sub_1927F567C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::elementwise_kernel::blob_options(Espresso::MPSBuffersEngine::elementwise_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  double v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  long long v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    id v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)id v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927F59DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::elementwise_kernel::__launch(uint64_t a1, uint64_t *a2, Espresso::layer_data *a3, uint64_t a4)
{
  uint64_t v119 = *a2;
  int v7 = *(_DWORD *)(a4 + 8);
  long long v8 = *(const void ***)a4;
  uint64_t v9 = *(const void ***)a3;
  id v10 = **(const void ***)a3;
  if (!v10)
  {
    int v121 = 0;
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  if (!v11 || (uint64_t v12 = (atomic_ullong *)v9[1]) == 0)
  {
    int v121 = 0;
LABEL_7:
    uint64_t v13 = v8;
    goto LABEL_8;
  }
  int v121 = (std::__shared_weak_count *)v9[1];
  atomic_fetch_add_explicit(v12 + 1, 1uLL, memory_order_relaxed);
  uint64_t v13 = *(const void ***)a4;
LABEL_8:
  int v117 = (int)v8;
  if (!*v13
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: src_a_blob is nil in elementwise op");
  }
  int32x2_t v15 = v14;
  BOOL v16 = (std::__shared_weak_count *)v13[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: dst_blob is nil in elementwise op");
  }
  if (!*(void *)(a1 + 344) && !*(void *)(a1 + 360))
  {
    Espresso::MPSBuffersEngine::elementwise_kernel::on_resized((Espresso::MPSBuffersEngine::elementwise_kernel *)a1, a3, (const void ***)a4);
    if (!*(void *)(a1 + 344) && !*(void *)(a1 + 360)) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel in elementwise.");
    }
  }
  int v122 = v16;
  if (!*(unsigned char *)(a1 + 368))
  {
    if ((*(_DWORD *)(a1 + 284) || fabsf(*(float *)(a1 + 288) + -1.0) > 0.00001 || fabsf(*(float *)(a1 + 292)) > 0.00001)
      && *(unsigned char *)(a1 + 332))
    {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Broadcasted elementwise ops do not support fused relu or alpha * x + beta semantics.");
    }
    int v17 = *(const void ***)a4;
    if (*(void *)(a4 + 8) - *(void *)a4 != 32)
    {
LABEL_53:
      uint64_t v32 = *(const void ***)a4;
      if (*(void *)(a4 + 8) - *(void *)a4 < 0x21uLL)
      {
LABEL_112:
        *(unsigned char *)(a1 + 368) = 1;
        goto LABEL_113;
      }
      if (*v32)
      {
        if (v33)
        {
          unsigned int v34 = (std::__shared_weak_count *)v32[1];
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
LABEL_60:
          Espresso::abstract_blob_container::shape((char *)buf, (uint64_t)v33);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          unsigned int v35 = *(const void ***)a4;
          unsigned int v36 = *(const void **)(*(void *)a4 + 16);
          if (v36)
          {
            if (v37)
            {
              int v38 = (std::__shared_weak_count *)v35[3];
              if (v38) {
                atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
              }
LABEL_68:
              Espresso::abstract_blob_container::shape((char *)v138, (uint64_t)v37);
              if (v38) {
                nitro::nitro_function::nitro_function(v38);
              }
              int v39 = *(const void ***)a4;
              int v40 = *(const void **)(*(void *)a4 + 32);
              if (v40)
              {
                if (v41)
                {
                  int v42 = (std::__shared_weak_count *)v39[5];
                  if (v42) {
                    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
LABEL_76:
                  Espresso::abstract_blob_container::shape(v135, (uint64_t)v41);
                  if (v42) {
                    nitro::nitro_function::nitro_function(v42);
                  }
                  int v43 = *(const void ***)a4;
                  if (*(void *)(a4 + 8) - *(void *)a4 < 0x31uLL)
                  {
                    v130[0] = *(_OWORD *)buf;
                    v130[1] = v142;
                    uint64_t v131 = v143;
                    long long v132 = 0;
                    int v133 = 0;
                    uint64_t v134 = 0;
                    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v132, v144, (uint64_t)v145, (v145 - (unsigned char *)v144) >> 2);
                    goto LABEL_88;
                  }
                  int v44 = v43[6];
                  if (v44)
                  {
                    if (v45)
                    {
                      int v46 = (std::__shared_weak_count *)v43[7];
                      if (v46) {
                        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      goto LABEL_86;
                    }
                  }
                  else
                  {
                    int v45 = 0;
                  }
                  int v46 = 0;
LABEL_86:
                  Espresso::abstract_blob_container::shape((char *)v130, (uint64_t)v45);
                  if (v46) {
                    nitro::nitro_function::nitro_function(v46);
                  }
LABEL_88:
                  int v47 = *(const void ***)a4;
                  if (*(void *)(a4 + 8) - *(void *)a4 < 0x41uLL)
                  {
                    v125[0] = *(_OWORD *)buf;
                    v125[1] = v142;
                    uint64_t v126 = v143;
                    std::string __p = 0;
                    uint64_t v128 = 0;
                    uint64_t v129 = 0;
                    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v144, (uint64_t)v145, (v145 - (unsigned char *)v144) >> 2);
LABEL_98:
                    BOOL v51 = Espresso::layer_shape::operator==((uint64_t)buf, (uint64_t)v138);
                    BOOL v52 = Espresso::layer_shape::operator==((uint64_t)buf, (uint64_t)v135);
                    BOOL v53 = Espresso::layer_shape::operator==((uint64_t)buf, (uint64_t)v130);
                    BOOL v54 = Espresso::layer_shape::operator==((uint64_t)buf, (uint64_t)v125);
                    if (!v51 || !v52 || !v53 || !v54) {
                      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("Elementwise operations with 3 or more blobs require exact shape match.");
                    }
                    if (__p)
                    {
                      uint64_t v128 = __p;
                      operator delete(__p);
                    }
                    if (v132)
                    {
                      int v133 = v132;
                      operator delete(v132);
                    }
                    if (v136)
                    {
                      unsigned int v137 = v136;
                      operator delete(v136);
                    }
                    if (v139)
                    {
                      int v140 = v139;
                      operator delete(v139);
                    }
                    if (v144)
                    {
                      float32x4_t v145 = v144;
                      operator delete(v144);
                    }
                    goto LABEL_112;
                  }
                  long long v48 = v47[8];
                  if (v48)
                  {
                    if (v49)
                    {
                      int v50 = (std::__shared_weak_count *)v47[9];
                      if (v50) {
                        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      goto LABEL_96;
                    }
                  }
                  else
                  {
                    uint64_t v49 = 0;
                  }
                  int v50 = 0;
LABEL_96:
                  Espresso::abstract_blob_container::shape((char *)v125, (uint64_t)v49);
                  if (v50) {
                    nitro::nitro_function::nitro_function(v50);
                  }
                  goto LABEL_98;
                }
              }
              else
              {
                int v41 = 0;
              }
              int v42 = 0;
              goto LABEL_76;
            }
          }
          else
          {
            unsigned int v37 = 0;
          }
          int v38 = 0;
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      unsigned int v34 = 0;
      goto LABEL_60;
    }
    if (*v17)
    {
      if (v18)
      {
        unsigned int v19 = (std::__shared_weak_count *)v17[1];
        if (v19)
        {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          int v17 = *(const void ***)a4;
        }
        goto LABEL_29;
      }
    }
    else
    {
      char v18 = 0;
    }
    unsigned int v19 = 0;
LABEL_29:
    long long v20 = (unsigned int *)v17[2];
    int v112 = v7;
    if (v20
    {
      uint64_t v21 = (std::__shared_weak_count *)v17[3];
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = v18[2];
    uint64_t v23 = v18[3];
    uint64_t v24 = v20[2];
    uint64_t v25 = v20[3];
    if (v24 != 1 && v22 != 1 && v22 != v24
      || v25 != 1 && v23 != 1 && v23 != v25
      || (unsigned int v26 = v20[4], v26 != 1) && (v27 = v18[4], v27 != 1) && v27 != v26
      || (unsigned int v28 = v20[5], v28 != 1) && (v29 = v18[5], v29 != 1) && v29 != v28
      || (unsigned int v30 = v20[6], v30 != 1) && (v31 = v18[6], v31 != 1) && v31 != v30)
    {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>("Cannot broadcast [%d, %d, %d, %d, %d] and [%d, %d, %d, %d, %d]", v22, v23, v18[4], v18[5], v18[6], v24, v25, *((void *)v20 + 2), HIDWORD(*((void *)v20 + 2)), v20[6]);
    }
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    int v7 = v112;
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    goto LABEL_53;
  }
LABEL_113:
  id v123 = v15[21];
  id v124 = v11[21];
  if (*(unsigned char *)(a1 + 332))
  {
    uint64_t v55 = *(const void ***)a4;
    if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expected two source blobs.");
    }
    uint64_t v118 = a1;
    unint64_t v56 = v55[2];
    if (v56)
    {
      if (v57)
      {
        int v58 = (atomic_ullong *)v55[3];
        if (v58)
        {
          int v115 = (std::__shared_weak_count *)v55[3];
          atomic_fetch_add_explicit(v58 + 1, 1uLL, memory_order_relaxed);
          goto LABEL_134;
        }
      }
    }
    else
    {
      uint64_t v57 = 0;
    }
    int v115 = 0;
LABEL_134:
    id v78 = v15[27];
    id v79 = v57[27];
    id v80 = v11[27];
    id v81 = [v15[25] ndArrayWithCommandBuffer:*(void *)(v119 + 144) descriptor:v15[28] aliasing:1];

    id v82 = [v57[25] ndArrayWithCommandBuffer:*(void *)(v119 + 144) descriptor:v57[28] aliasing:1];

    uint64_t v83 = [v11[25] ndArrayWithCommandBuffer:*(void *)(v119 + 144) descriptor:v11[28] aliasing:1];

    BOOL v16 = v122;
    if (!v81)
    {
      unint64_t v86 = Espresso::espresso_os_log_subsystem(v84, v85);
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_debug_impl(&dword_1920CB000, v86, OS_LOG_TYPE_DEBUG, "Failed to alias src_a in elementwise.", buf, 2u);
      }

      id v81 = v15[27];
      unint64_t v84 = (Espresso *)[v81 importDataWithCommandBuffer:*(void *)(v119 + 144) fromBuffer:v15[21] sourceDataType:*((unsigned int *)v15 + 48) offset:0 rowStrides:*(void *)(v118 + 376)];
    }
    if (!v82)
    {
      int v87 = Espresso::espresso_os_log_subsystem(v84, v85);
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_debug_impl(&dword_1920CB000, v87, OS_LOG_TYPE_DEBUG, "Failed to alias src_b in elementwise.", buf, 2u);
      }

      id v82 = v57[27];
      unint64_t v84 = (Espresso *)[v82 importDataWithCommandBuffer:*(void *)(v119 + 144) fromBuffer:v57[21] sourceDataType:*((unsigned int *)v57 + 48) offset:0 rowStrides:*(void *)(v118 + 400)];
    }
    id v88 = (id)v83;
    if (!v83)
    {
      int v89 = Espresso::espresso_os_log_subsystem(v84, v85);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_debug_impl(&dword_1920CB000, v89, OS_LOG_TYPE_DEBUG, "Failed to alias dst in elementwise.", buf, 2u);
      }

      id v88 = v11[27];
      [v88 importDataWithCommandBuffer:*(void *)(v119 + 144) fromBuffer:v11[21] sourceDataType:*((unsigned int *)v11 + 48) offset:0 rowStrides:*(void *)(v118 + 424)];
    }
    unsigned int v90 = *(_DWORD *)(v118 + 280);
    if (v90 - 100 <= 0xD && ((1 << (v90 - 100)) & 0x2CFD) != 0
      || (int v91 = "Elementwise op not compatible with MPSNDArray.", v90 <= 0x24) && ((1 << v90) & 0x1200C02003) != 0)
    {
      id v92 = *(id *)(v118 + 360);
      if (v92)
      {
        int v93 = v92;
        [v92 encodeToCommandBuffer:*(void *)(v119 + 144) primarySourceArray:v81 secondarySourceArray:v82 destinationArray:v88];
        if (!v83) {
          [v88 exportDataWithCommandBuffer:*(void *)(v119 + 144) toBuffer:v11[21] destinationDataType:*((unsigned int *)v11 + 48) offset:0 rowStrides:*(void *)(v118 + 424)];
        }

        if (v115) {
          nitro::nitro_function::nitro_function(v115);
        }
        goto LABEL_182;
      }
      int v91 = "could not cast to ndarray elementwise op.";
    }
    Espresso::throw_exception_selector<Espresso::generic_error>(v91);
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v138, v119);
  id v59 = v138[0];
  uint64_t v60 = **(_DWORD ***)a3;
  unsigned int v61 = v60[2];
  int v62 = v60[3];
  int v120 = v60[4];
  int v64 = v60[5];
  int v63 = v60[6];
  if (v64 <= 1) {
    int v65 = 1;
  }
  else {
    int v65 = v64;
  }
  if (v63 <= 1) {
    int v66 = 1;
  }
  else {
    int v66 = v63;
  }
  int v67 = (*((uint64_t (**)(id *))*v11 + 4))(v11);
  int v68 = v66 * v65;
  unsigned int v69 = *((_DWORD *)v11 + 3);
  uint64_t v70 = *((int *)v11 + 2);
  unsigned int v71 = *((_DWORD *)v11 + 4);
  *(_DWORD *)&uint8_t buf[4] = *((_DWORD *)v11 + 2);
  *(_DWORD *)&uint8_t buf[8] = v71 * v69;
  *((void *)&v142 + 1) = __PAIR64__(v71, v69);
  unint64_t v72 = v11[31];
  HIDWORD(v143) = v11[31];
  int v74 = *((_DWORD *)v11 + 5);
  int v73 = *((_DWORD *)v11 + 6);
  if (v74 <= 1) {
    int v74 = 1;
  }
  if (v73 <= 1) {
    int v75 = 1;
  }
  else {
    int v75 = *((_DWORD *)v11 + 6);
  }
  LODWORD(v143) = v75 * v74;
  if ((v67 - 1) >= 0xD)
  {
    unint64_t v77 = v72 + v72 * ((4 * v70 - 1) / v72);
    unint64_t v76 = 4;
  }
  else
  {
    unint64_t v76 = qword_192DF6AD8[v67 - 1];
    unint64_t v77 = v72 + v72 * ((v76 * v70 - 1) / v72);
  }
  unint64_t v94 = v77 / v76;
  int v95 = v70 - 1;
  if ((int)v70 < 1) {
    int v95 = v70 + 2;
  }
  LODWORD(v144) = (v95 >> 2) + 1;
  HIDWORD(v144) = v94 >> 2;
  int v96 = *((_DWORD *)v11 + 5);
  if (v96 <= 1) {
    int v97 = 1;
  }
  else {
    int v97 = *((_DWORD *)v11 + 5);
  }
  *(_DWORD *)vImage_Buffer buf = v94;
  *(_DWORD *)&unsigned char buf[12] = v69 * v70;
  LODWORD(v142) = v71 * v69 * v70;
  DWORD1(v142) = v142 * v96;
  float32x4_t v145 = (unsigned char *)__PAIR64__(v73, v97);
  int v98 = v120 - 1;
  if (v120 < 1) {
    int v98 = v120 + 2;
  }
  int v99 = (v98 >> 2) + 1;
  if (v99 != *(_DWORD *)(a1 + 308)
    || *(_DWORD *)(a1 + 312) != v68
    || *(_DWORD *)(a1 + 320) != v62
    || *(_DWORD *)(a1 + 316) != v61)
  {
    *(_DWORD *)(a1 + 316) = v61;
    *(_DWORD *)(a1 + 320) = v62;
    *(_DWORD *)(a1 + 308) = v99;
    *(_DWORD *)(a1 + 312) = v68;
  }
  unsigned int v116 = v66 * v65;
  if (!*(void *)(a1 + 344)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("MPS_BUFFERS_ENGINE elementwise_kernel: Kernel not found");
  }
  objc_msgSend(v59, "setComputePipelineState:");
  [v59 setBuffer:v124 offset:0 atIndex:0];
  [v59 setBytes:a1 + 280 length:52 atIndex:1];
  [v59 setBytes:buf length:56 atIndex:2];
  int v113 = v62;
  unsigned int v114 = v61;
  if (*(unsigned char *)(a1 + 352))
  {
    uint64_t v100 = *(const void ***)a4;
    int v102 = (std::__shared_weak_count *)v100[3];
    if (v102)
    {
      atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
      id v103 = v101[21];
      nitro::nitro_function::nitro_function(v102);
    }
    else
    {
      id v103 = v101[21];
    }
    [v59 setBuffer:v123 offset:0 atIndex:4];
    [v59 setBuffer:v103 offset:0 atIndex:3];
  }
  else
  {
    [v59 setBuffer:v123 offset:0 atIndex:3];
    int v104 = (v7 - v117) << 12;
    if (v104 >= 0x20000)
    {
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      uint64_t v107 = HIWORD(v104) - 1;
      do
      {
        uint64_t v108 = *(void *)a4 + v105;
        int v110 = *(std::__shared_weak_count **)(v108 + 24);
        if (v110)
        {
          atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
          id v111 = v109[21];
          nitro::nitro_function::nitro_function(v110);
        }
        else
        {
          id v111 = v109[21];
        }
        [v59 setBuffer:v111 offset:0 atIndex:v106 + 4];

        ++v106;
        v105 += 16;
      }
      while (v107 != v106);
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v138);
LABEL_182:

  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v121) {
    nitro::nitro_function::nitro_function(v121);
  }
}

void sub_1927F691C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    operator delete(a40);
  }
  int v44 = *(void **)(v42 - 184);
  if (v44)
  {
    *(void *)(v42 - 176) = v44;
    operator delete(v44);
  }
  int v45 = *(void **)(v42 - 120);
  if (v45)
  {
    *(void *)(v42 - std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112) = v45;
    operator delete(v45);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::dispatch_auto_threadgroupsize(void *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  id v7 = a1;
  long long v8 = v7;
  uint64_t v9 = 8;
  if (a3 >= 8) {
    LODWORD(v10) = 8;
  }
  else {
    LODWORD(v10) = 4;
  }
  if (a3 < 4) {
    LODWORD(v10) = 2;
  }
  if (a3 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v10;
  }
  if (a2 >= 8)
  {
    char v11 = 3;
  }
  else
  {
    uint64_t v9 = 4;
    char v11 = 2;
  }
  if (a2 >= 4)
  {
    char v12 = v11;
  }
  else
  {
    uint64_t v9 = 2;
    char v12 = 1;
  }
  if (a2 <= 1)
  {
    uint64_t v9 = 1;
    char v12 = 0;
  }
  if v10 << v12 < 9u && (unsigned int v13 = (v10 << v12) - 1, ((0x8Bu >> v13)))
  {
    LODWORD(v14) = dword_192DD4E2C[v13];
  }
  else
  {
    if (a4 >= 8) {
      LODWORD(v14) = 16;
    }
    else {
      LODWORD(v14) = 4;
    }
    if (a4 < 4) {
      LODWORD(v14) = 2;
    }
    if (a4 <= 1) {
      LODWORD(v14) = 1;
    }
  }
  if (a3 < 8) {
    char v15 = 2;
  }
  else {
    char v15 = 3;
  }
  if (a3 < 4) {
    char v15 = 1;
  }
  if (a3 <= 1) {
    char v15 = 0;
  }
  if (v14 << (v15 + v12) <= 0x200u) {
    uint64_t v14 = v14;
  }
  else {
    uint64_t v14 = 8;
  }
  v17[0] = (int)(((a2 - 1) >> v12) + 1);
  v17[1] = (int)(((a3 - 1) >> v15) + 1);
  long long v17[2] = (int)((a4 - 1) / v14 + 1);
  v16[0] = v9;
  v16[1] = v10;
  void v16[2] = v14;
  [v7 dispatchThreadgroups:v17 threadsPerThreadgroup:v16];
}

void sub_1927F6C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::elementwise_kernel::~elementwise_kernel(Espresso::MPSBuffersEngine::elementwise_kernel *this)
{
  uint64_t v2 = (void *)*((void *)this + 53);
  if (v2)
  {
    *((void *)this + 54) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 50);
  if (v3)
  {
    *((void *)this + 51) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 47);
  if (v4)
  {
    *((void *)this + 48) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 53);
  if (v2)
  {
    *((void *)this + 54) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 50);
  if (v3)
  {
    *((void *)this + 51) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 47);
  if (v4)
  {
    *((void *)this + 48) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::MPSBuffersEngine::activation_kernel::supports_weight_key()
{
  return 1;
}

BOOL Espresso::MPSBuffersEngine::activation_kernel::is_valid_for_engine(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v5[2] = xmmword_192DD48EC;
  v5[3] = unk_192DD48FC;
  v5[4] = xmmword_192DD490C;
  v5[0] = xmmword_192DD48CC;
  v5[1] = unk_192DD48DC;
  std::unordered_set<Espresso::activation_mode>::unordered_set((uint64_t)v4, (int *)v5, 20);
  BOOL v2 = std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(v4[0], v4[1], *(_DWORD *)(a1 + 304)) != 0;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v4);
  return v2;
}

void Espresso::MPSBuffersEngine::activation_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, void *a3, const void *a4, size_t a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v10 = a3[1];
    if (v10 == 12)
    {
      if (*(void *)*a3 == 0x705F736D61726170 && *(_DWORD *)(*a3 + 8) == 1970038130) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v10 == 14)
      {
        a3 = (void *)*a3;
        goto LABEL_30;
      }
      if (v10 == 15 && *(void *)*a3 == 0x73756C7074666F73 && *(void *)(*a3 + 7) == 0x736168706C615F73) {
        goto LABEL_28;
      }
    }
LABEL_42:
    Espresso::throw_exception_selector<Espresso::generic_error>("Unknown weight name");
  }
  int v8 = *((unsigned __int8 *)a3 + 23);
  if (v8 == 12)
  {
    if (*a3 != 0x705F736D61726170 || *((_DWORD *)a3 + 2) != 1970038130) {
      goto LABEL_42;
    }
LABEL_28:
    uint64_t v14 = (void **)(a1 + 424);
    goto LABEL_36;
  }
  if (v8 != 14)
  {
    if (v8 != 15) {
      goto LABEL_42;
    }
    if (*a3 != 0x73756C7074666F73 || *(void *)((char *)a3 + 7) != 0x736168706C615F73) {
      goto LABEL_42;
    }
    goto LABEL_28;
  }
LABEL_30:
  if (*a3 != 0x73756C7074666F73 || *(void *)((char *)a3 + 6) != 0x73617465625F7375) {
    goto LABEL_42;
  }
  uint64_t v14 = (void **)(a1 + 432);
LABEL_36:
  int v16 = a5 - 1;
  if ((int)a5 < 1) {
    int v16 = a5 + 14;
  }
  size_t v17 = (int)((v16 & 0xFFFFFFF0) + 16);
  char v18 = malloc_type_calloc(v17, 1uLL, 0x99C4288uLL);
  if (!v18) {
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory for weights in activation kernel");
  }
  unsigned int v19 = v18;
  memcpy(v18, a4, a5);
  uint64_t v20 = [*(id *)(v7 + 144) newBufferWithBytes:v19 length:v17 options:0];
  uint64_t v21 = *v14;
  id *v14 = (void *)v20;

  free(v19);
}

void Espresso::MPSBuffersEngine::activation_kernel::on_resized(Espresso::MPSBuffersEngine::activation_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v3 = *(void *)a3;
  if (*((void *)a3 + 1) != *(void *)a3)
  {
    if (*(void *)v3)
    {
      if (v6)
      {
        uint64_t v7 = v6;
        int v8 = *(std::__shared_weak_count **)(v3 + 8);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)this + 50) = 0;
        *((void *)this + 51) = 0;
        *((unsigned char *)this + 440) = 1;
        unsigned int v9 = *((_DWORD *)this + 76);
        uint64_t v10 = (int *)((char *)this + 400);
        char v11 = (id *)*((void *)this + 1);
        switch(v9)
        {
          case 0u:
            int v13 = 1;
            goto LABEL_37;
          case 1u:
            int v14 = 5;
            goto LABEL_30;
          case 2u:
            int v15 = 1;
            goto LABEL_34;
          case 3u:
            int v13 = 3;
            goto LABEL_37;
          case 4u:
            if (*((_DWORD *)this + 111)) {
              char v12 = "activation_prelu_f16_buffers";
            }
            else {
              char v12 = "activation_prelu_f32_buffers";
            }
            goto LABEL_44;
          case 5u:
            int v21 = 5;
            goto LABEL_39;
          case 6u:
            int v21 = 2;
            goto LABEL_39;
          case 7u:
            int v21 = 4;
LABEL_39:
            *((_DWORD *)this + 100) = v21;
            _D0 = *(void *)((char *)this + 308);
            goto LABEL_40;
          case 8u:
            int v15 = 9;
LABEL_34:
            *((_DWORD *)this + 100) = v15;
            *((_DWORD *)this + 101) = *((_DWORD *)this + 77);
            goto LABEL_45;
          case 9u:
            if (*((_DWORD *)this + 111)) {
              char v12 = "activation_thresholded_relu_f16_buffers";
            }
            else {
              char v12 = "activation_thresholded_relu_f32_buffers";
            }
            goto LABEL_44;
          case 0xAu:
            int v14 = 7;
LABEL_30:
            *uint64_t v10 = v14;
            __asm { FMOV            V0.2S, #1.0 }
LABEL_40:
            *(void *)((char *)this + 404) = _D0;
            goto LABEL_45;
          case 0xBu:
            if (*((_DWORD *)this + 111)) {
              char v12 = "activation_parametric_softplus_f16_buffers";
            }
            else {
              char v12 = "activation_parametric_softplus_f32_buffers";
            }
            goto LABEL_44;
          case 0xCu:
            int v13 = 8;
LABEL_37:
            *uint64_t v10 = v13;
            goto LABEL_46;
          case 0xDu:
            if (*((_DWORD *)this + 111)) {
              char v12 = "activation_rectilinear_f16_buffers";
            }
            else {
              char v12 = "activation_rectilinear_f32_buffers";
            }
            goto LABEL_44;
          case 0xEu:
            if (*((_DWORD *)this + 111)) {
              char v12 = "activation_relu_clamped_f16_buffers";
            }
            else {
              char v12 = "activation_relu_clamped_f32_buffers";
            }
            goto LABEL_44;
          case 0x13u:
          case 0x15u:
          case 0x16u:
            *((unsigned char *)this + 440) = 0;
            goto LABEL_52;
          case 0x14u:
            if (*((_DWORD *)this + 111)) {
              char v12 = "activation_erf_f16_buffers";
            }
            else {
              char v12 = "activation_erf_f32_buffers";
            }
            goto LABEL_44;
          case 0x17u:
            if (*((_DWORD *)this + 111)) {
              char v12 = "activation_step_f16_buffers";
            }
            else {
              char v12 = "activation_step_f32_buffers";
            }
LABEL_44:
            uint64_t v22 = [v11[20] kernelForFunction:v12 cacheString:0 withConstants:0];
            uint64_t v23 = (void *)*((void *)this + 52);
            *((void *)this + 52) = v22;

            *((unsigned char *)this + 440) = 0;
LABEL_45:
            char v11 = (id *)*((void *)this + 1);
LABEL_46:
            if (!v11
            {
              exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
              exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
            }
            uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 2);
            if (v25)
            {
              atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
              id v26 = v24[18];
              nitro::nitro_function::nitro_function(v25);
            }
            else
            {
              id v26 = v24[18];
            }
            uint64_t v27 = [objc_alloc(MEMORY[0x1E4F35668]) initWithDevice:v26];
            unsigned int v28 = (void *)*((void *)this + 49);
            *((void *)this + 49) = v27;

            LODWORD(v29) = *((_DWORD *)this + 101);
            LODWORD(v30) = *((_DWORD *)this + 102);
            LODWORD(v31) = *((_DWORD *)this + 103);
            [*((id *)this + 49) setNeuronType:*((unsigned int *)this + 100) parameterA:v29 parameterB:v30 parameterC:v31];

            unsigned int v9 = *((_DWORD *)this + 76);
LABEL_52:
            if (v9 > 0x16 || ((1 << v9) & 0x680000) == 0) {
              goto LABEL_93;
            }
            uint64_t v32 = (const void *)*((void *)this + 1);
            if (!v32
            {
              int v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v44, "Espresso: wrong_context_type");
              v44->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
            }
            unsigned int v34 = v33;
            unsigned int v35 = (std::__shared_weak_count *)*((void *)this + 2);
            if (v35) {
              atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v8) {
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v36 = *(void *)a2;
            if (*(void *)v36
            {
              unsigned int v37 = *(std::__shared_weak_count **)(v36 + 8);
              if (v37) {
                atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              unsigned int v37 = 0;
            }
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v46 = 0;
            int v38 = *((_DWORD *)this + 76);
            switch(v38)
            {
              case 22:
                if ((*(unsigned int (**)(void *))(*(void *)v7 + 32))(v7) == 1)
                {
                  int v39 = "activation_fast_gelu2_f16_buffers";
                }
                else
                {
                  if ((*(unsigned int (**)(void *))(*(void *)v7 + 32))(v7)) {
                    goto LABEL_81;
                  }
                  int v39 = "activation_fast_gelu2_f32_buffers";
                }
                break;
              case 21:
                if ((*(unsigned int (**)(void *))(*(void *)v7 + 32))(v7) == 1)
                {
                  int v39 = "activation_fast_gelu1_f16_buffers";
                }
                else
                {
                  if ((*(unsigned int (**)(void *))(*(void *)v7 + 32))(v7)) {
                    goto LABEL_81;
                  }
                  int v39 = "activation_fast_gelu1_f32_buffers";
                }
                break;
              case 19:
                if ((*(unsigned int (**)(void *))(*(void *)v7 + 32))(v7) == 1)
                {
                  int v39 = "activation_gelu_f16_buffers";
                }
                else
                {
                  if ((*(unsigned int (**)(void *))(*(void *)v7 + 32))(v7)) {
                    goto LABEL_81;
                  }
                  int v39 = "activation_gelu_f32_buffers";
                }
                break;
              default:
                goto LABEL_81;
            }
            MEMORY[0x192FF0F50](__p, v39);
LABEL_81:
            if (v46 >= 0) {
              int v40 = __p;
            }
            else {
              int v40 = (void **)__p[0];
            }
            uint64_t v41 = [v34[20] kernelForFunction:v40 cacheString:0 withConstants:0];
            uint64_t v42 = (void *)*((void *)this + 52);
            *((void *)this + 52) = v41;

            if (!*((void *)this + 52)) {
              Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel for GeLU");
            }
            if (SHIBYTE(v46) < 0) {
              operator delete(__p[0]);
            }
            if (v37) {
              nitro::nitro_function::nitro_function(v37);
            }
            if (v8) {
              nitro::nitro_function::nitro_function(v8);
            }
            if (v35) {
              nitro::nitro_function::nitro_function(v35);
            }
LABEL_93:
            if (v8) {
              nitro::nitro_function::nitro_function(v8);
            }
            break;
          default:
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("Unimplemented activation function in MPS_BUFFERS_ENGINE");
        }
      }
    }
  }
}

void sub_1927F7754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::activation_kernel::blob_options(Espresso::MPSBuffersEngine::activation_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  double v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  int v8 = v7;
  unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927F79BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::activation_kernel::__launch(Espresso::MPSBuffersEngine::activation_kernel *this, uint64_t a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  if (!*((void *)this + 52) && !*((void *)this + 49)) {
    Espresso::MPSBuffersEngine::activation_kernel::on_resized(this, a3, a4);
  }
  unsigned int v8 = *((_DWORD *)this + 76);
  BOOL v9 = v8 > 0x16;
  int v10 = (1 << v8) & 0x680000;
  if (!v9 && v10 != 0)
  {
    if (!*((void *)this + 52)) {
      Espresso::throw_exception_selector<Espresso::generic_error>("no kernel found for activation.");
    }
    uint64_t v12 = *(void *)a3;
    if (*(void *)v12)
    {
      if (v13)
      {
        int v14 = *(std::__shared_weak_count **)(v12 + 8);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_15:
        uint64_t v15 = *(void *)a4;
        if (*(void *)v15)
        {
          if (v16)
          {
            size_t v17 = *(std::__shared_weak_count **)(v15 + 8);
            if (v17) {
              atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            goto LABEL_21;
          }
        }
        else
        {
          int v16 = 0;
        }
        size_t v17 = 0;
LABEL_21:
        if (*(void *)a2
        {
          char v18 = *(std::__shared_weak_count **)(a2 + 8);
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          char v18 = 0;
        }
        int v19 = (*(uint64_t (**)(int *))(*(void *)v13 + 32))(v13);
        int v20 = v13[3];
        uint64_t v21 = v13[2];
        int v22 = v13[4];
        int v101 = v13[2];
        int v102 = v22 * v20;
        int v106 = v20;
        int v107 = v22;
        unint64_t v23 = *((void *)v13 + 31);
        int v109 = *((void *)v13 + 31);
        int v24 = v13[5];
        int v25 = v13[6];
        if (v24 <= 1) {
          int v26 = 1;
        }
        else {
          int v26 = v13[5];
        }
        if (v25 <= 1) {
          int v27 = 1;
        }
        else {
          int v27 = v13[6];
        }
        int v108 = v27 * v26;
        if ((v19 - 1) >= 0xD)
        {
          unint64_t v29 = v23 + v23 * ((4 * v21 - 1) / v23);
          unint64_t v28 = 4;
        }
        else
        {
          unint64_t v28 = qword_192DF6AD8[v19 - 1];
          unint64_t v29 = v23 + v23 * ((v28 * v21 - 1) / v23);
        }
        unint64_t v30 = v29 / v28;
        int v31 = v21 - 1;
        if ((int)v21 < 1) {
          int v31 = v21 + 2;
        }
        int v110 = (v31 >> 2) + 1;
        unsigned int v111 = v30 >> 2;
        int v100 = v30;
        int v103 = v20 * v21;
        int v104 = v22 * v20 * v21;
        int v105 = v104 * v24;
        int v112 = v26;
        int v113 = v25;
        Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v99, *(void *)a2);
        id v32 = v99[0];
        [v32 setComputePipelineState:*((void *)this + 52)];
        [v32 setBuffer:*((void *)v13 + 21) offset:0 atIndex:0];
        [v32 setBuffer:v16[21] offset:0 atIndex:1];
        [v32 setBytes:&v100 length:56 atIndex:2];
        [v32 setBytes:(char *)this + 304 length:36 atIndex:3];
        uint64_t v33 = v13[6] * (uint64_t)v13[5];
        int v34 = v13[2];
        int v35 = v34 - 1;
        if (v34 == 1)
        {
          int v36 = v13[4] * v13[3];
          int v37 = v36 - 1;
          BOOL v9 = v36 < 1;
          int v38 = v36 + 6;
          if (!v9) {
            int v38 = v37;
          }
          uint64_t v39 = (v38 >> 3) + 1;
          int v40 = v33 - 1;
          BOOL v9 = (int)v33 < 1;
          int v41 = v33 + 6;
          if (!v9) {
            int v41 = v40;
          }
          uint64_t v96 = 1;
          uint64_t v97 = v39;
          uint64_t v98 = (v41 >> 3) + 1;
          uint64_t v93 = 1;
          uint64_t v42 = 8;
        }
        else
        {
          int v43 = v34 + 6;
          if (v35 < 0) {
            int v35 = v43;
          }
          uint64_t v44 = (v35 >> 3) + 1;
          int v45 = v13[4] * v13[3];
          int v46 = v45 - 1;
          BOOL v9 = v45 < 1;
          int v47 = v45 + 6;
          if (!v9) {
            int v47 = v46;
          }
          uint64_t v96 = v44;
          uint64_t v97 = (v47 >> 3) + 1;
          uint64_t v98 = v33;
          uint64_t v93 = 8;
          uint64_t v42 = 1;
        }
        uint64_t v94 = 8;
        uint64_t v95 = v42;
        objc_msgSend(v32, "dispatchThreadgroups:threadsPerThreadgroup:", &v96);

        long long v48 = v99;
        goto LABEL_49;
      }
    }
    else
    {
      int v13 = 0;
    }
    int v14 = 0;
    goto LABEL_15;
  }
  if (*((unsigned char *)this + 440))
  {
    if (*((void *)this + 49)) {
      goto LABEL_58;
    }
LABEL_63:
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to find a kernel in MPS_BUFFERS_ENGINE activation!");
  }
  if (!*((void *)this + 52)) {
    goto LABEL_63;
  }
LABEL_58:
  uint64_t v49 = *(void *)a3;
  if (*(void *)v49)
  {
    if (v50)
    {
      int v14 = *(std::__shared_weak_count **)(v49 + 8);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v14 = 0;
    }
  }
  else
  {
    int v14 = 0;
    int v50 = 0;
  }
  uint64_t v51 = *(void *)a4;
  if (!*(void *)v51)
  {
    BOOL v52 = 0;
    goto LABEL_71;
  }
  if (!v52)
  {
LABEL_71:
    size_t v17 = 0;
    goto LABEL_72;
  }
  size_t v17 = *(std::__shared_weak_count **)(v51 + 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_72:
  BOOL v53 = *(void **)a2;
  if (*(void *)a2
  {
    char v18 = *(std::__shared_weak_count **)(a2 + 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    char v18 = 0;
  }
  if (!*((unsigned char *)this + 440))
  {
    int v58 = (*(uint64_t (**)(int *))(*(void *)v50 + 32))(v50);
    int v59 = v50[3];
    uint64_t v60 = v50[2];
    int v61 = v50[4];
    int v101 = v50[2];
    int v102 = v61 * v59;
    int v106 = v59;
    int v107 = v61;
    unint64_t v62 = *((void *)v50 + 31);
    int v109 = *((void *)v50 + 31);
    int v64 = v50[5];
    int v63 = v50[6];
    if (v64 <= 1) {
      int v65 = 1;
    }
    else {
      int v65 = v50[5];
    }
    if (v63 <= 1) {
      int v66 = 1;
    }
    else {
      int v66 = v50[6];
    }
    int v108 = v66 * v65;
    if ((v58 - 1) >= 0xD)
    {
      unint64_t v68 = v62 + v62 * ((4 * v60 - 1) / v62);
      unint64_t v67 = 4;
    }
    else
    {
      unint64_t v67 = qword_192DF6AD8[v58 - 1];
      unint64_t v68 = v62 + v62 * ((v67 * v60 - 1) / v62);
    }
    unint64_t v69 = v68 / v67;
    int v70 = v60 - 1;
    if ((int)v60 < 1) {
      int v70 = v60 + 2;
    }
    int v110 = (v70 >> 2) + 1;
    unsigned int v111 = v69 >> 2;
    int v100 = v69;
    int v103 = v59 * v60;
    int v104 = v61 * v59 * v60;
    int v105 = v104 * v64;
    int v112 = v65;
    int v113 = v63;
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v96, *(void *)a2);
    id v71 = (id)v96;
    [v71 setComputePipelineState:*((void *)this + 52)];
    [v71 setBuffer:*((void *)v50 + 21) offset:0 atIndex:0];
    [v71 setBuffer:*((void *)v52 + 21) offset:0 atIndex:1];
    [v71 setBytes:&v100 length:56 atIndex:2];
    [v71 setBytes:(char *)this + 304 length:36 atIndex:3];
    [v71 setBuffer:*((void *)this + 53) offset:0 atIndex:4];
    [v71 setBuffer:*((void *)this + 54) offset:0 atIndex:5];
    int v72 = v66 * v64;
    int v73 = v50[2];
    int v74 = v73 - 1;
    if (v73 == 1)
    {
      int v75 = v50[4] * v50[3];
      int v76 = v75 - 1;
      BOOL v9 = v75 < 1;
      int v77 = v75 + 6;
      if (!v9) {
        int v77 = v76;
      }
      uint64_t v78 = (v77 >> 3) + 1;
      int v79 = v72 - 1;
      BOOL v9 = v72 < 1;
      int v80 = v72 + 6;
      if (!v9) {
        int v80 = v79;
      }
      v92[0] = 1;
      v92[1] = v78;
      v92[2] = (v80 >> 3) + 1;
      uint64_t v91 = 1;
      id v81 = v92;
      id v82 = &v91;
      uint64_t v83 = 8;
    }
    else
    {
      int v84 = v73 + 6;
      if (v74 < 0) {
        int v74 = v84;
      }
      uint64_t v85 = (v74 >> 3) + 1;
      int v86 = v50[4] * v50[3];
      int v87 = v86 - 1;
      BOOL v9 = v86 < 1;
      int v88 = v86 + 6;
      if (!v9) {
        int v88 = v87;
      }
      v90[0] = v85;
      v90[1] = (v88 >> 3) + 1;
      v90[2] = v72;
      uint64_t v89 = 8;
      id v81 = v90;
      id v82 = &v89;
      uint64_t v83 = 1;
    }
    v82[1] = 8;
    v82[2] = v83;
    [v71 dispatchThreadgroups:v81 threadsPerThreadgroup:v89];

    long long v48 = (id *)&v96;
LABEL_49:
    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v48);
    if (!v18) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  BOOL v54 = (void *)*((void *)this + 49);
  uint64_t v55 = v53[18];
  id v56 = *((id *)v52 + 25);
  id v57 = *((id *)v50 + 25);
  [v54 encodeToCommandBuffer:v55 inputMatrix:v56 biasVector:0 resultMatrix:v57];

  if (v18) {
LABEL_50:
  }
    nitro::nitro_function::nitro_function(v18);
LABEL_51:
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
}

void sub_1927F8248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  if (v29)
  {
    nitro::nitro_function::nitro_function(v29);
    if (!v28)
    {
LABEL_3:
      if (!v27) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v28)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v28);
  if (!v27) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v27);
  goto LABEL_5;
}

void Espresso::MPSBuffersEngine::activation_kernel::~activation_kernel(Espresso::MPSBuffersEngine::activation_kernel *this)
{
  Espresso::MPSBuffersEngine::activation_kernel::~activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  BOOL v2 = (void *)*((void *)this + 59);
  if (v2)
  {
    *((void *)this + 60) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 56);
  if (v3)
  {
    *((void *)this + 57) = v3;
    operator delete(v3);
  }

  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

BOOL Espresso::MPSBuffersEngine::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == *(void *)a3) {
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, *(const Espresso::layer_shape **)a3, 0);
  BOOL result = 0;
  if (*(unsigned char *)(a1 + 340)) {
    BOOL v5 = v7 > 3;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return *(_WORD *)(a1 + 320) == 0;
  }
  return result;
}

void Espresso::MPSBuffersEngine::concat_kernel::on_resized(Espresso::MPSBuffersEngine::concat_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 44);
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (*((void *)a2 + 1) != *(void *)a2)
  {
    uint64_t v7 = *(void *)a3;
    if (*((void *)a3 + 1) != *(void *)a3)
    {
      if (*(void *)v7)
      {
        if (v8)
        {
          uint64_t v9 = (uint64_t)v8;
          int v10 = (unsigned char **)((char *)this + 344);
          uint64_t v11 = *(std::__shared_weak_count **)(v7 + 8);
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v12 = *v10;
          if (!*v10)
          {
            (*(void (**)(uint64_t))(*(void *)v9 + 32))(v9);
            Espresso::abstract_blob_container::shape(v17, v9);
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v20, (const Espresso::layer_shape *)v17, 0);
            if (__p)
            {
              int v19 = __p;
              operator delete(__p);
            }
            if (*((unsigned char *)this + 340)) {
              int v13 = 0;
            }
            else {
              int v13 = 2 * (v21 > 3);
            }
            int v14 = operator new(0x160uLL);
            v14[1] = 0;
            void v14[2] = 0;
            void *v14 = &unk_1EE384600;
            uint64_t v12 = (unsigned char *)Espresso::base_kernel::base_kernel((uint64_t)(v14 + 3), (uint64_t *)this + 1);
            v14[3] = &unk_1EE33D248;
            *((unsigned char *)v14 + 312) = 0;
            *((_OWORD *)v14 + 20) = 0u;
            *((_OWORD *)v14 + 21) = 0u;
            *((_DWORD *)v14 + 76) = v13;
            *((_WORD *)v14 + 154) = 0;
            *(void *)&long long v15 = v12;
            *((void *)&v15 + 1) = v14;
            int v16 = (std::__shared_weak_count *)*((void *)this + 44);
            *(_OWORD *)int v10 = v15;
            if (v16)
            {
              nitro::nitro_function::nitro_function(v16);
              uint64_t v12 = *v10;
            }
            v12[288] = *((_DWORD *)this + 70) != 0;
          }
          (*(void (**)(unsigned char *, Espresso::layer_data *, Espresso::layer_data *))(*(void *)v12 + 80))(v12, a2, a3);
          if (v11) {
            nitro::nitro_function::nitro_function(v11);
          }
        }
      }
    }
  }
}

void sub_1927F8600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSBuffersEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(unsigned char *)(a1 + 285) == 0;
}

void Espresso::MPSBuffersEngine::general_concat_kernel::on_resized(Espresso::MPSBuffersEngine::general_concat_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v6 = (void *)*((void *)this + 37);
  *((void *)this + 37) = 0;

  unsigned int v8 = a2;
  uint64_t v7 = *(void *)a2;
  if (*((void *)v8 + 1) == v7) {
    return;
  }
  uint64_t v9 = *(void *)a3;
  if (*((void *)a3 + 1) == *(void *)a3) {
    return;
  }
  if (!*(void *)v7)
  {
    int v10 = 0;
    goto LABEL_8;
  }
  if (!v10)
  {
LABEL_8:
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v7 + 8);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(void *)a3;
  }
LABEL_9:
  if (*(void *)v9)
  {
    if (v12)
    {
      int v13 = *(std::__shared_weak_count **)(v9 + 8);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  int v13 = 0;
LABEL_15:
  int v14 = (const void *)*((void *)this + 1);
  if (!v14
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  int v16 = v15;
  size_t v17 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10 && v12)
  {
    if ((*(unsigned int (**)(void *))(*(void *)v12 + 32))(v12))
    {
      if ((*(unsigned int (**)(void *))(*(void *)v12 + 32))(v12) != 1) {
        Espresso::throw_exception_selector<Espresso::generic_error>("unsupported compute path in general_concat kernel");
      }
      char v18 = @"general_concat_f16_buffers";
    }
    else
    {
      char v18 = @"general_concat_f32_buffers";
    }
    uint64_t v19 = Espresso::context_metal::kernel_for_function(v16, &v18->isa);
    int v20 = (void *)*((void *)this + 37);
    *((void *)this + 37) = v19;

    Espresso::abstract_blob_container::shape((char *)&v43, **(void **)a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v47, (const Espresso::layer_shape *)&v43, 0);
    if (__p)
    {
      int v46 = __p;
      operator delete(__p);
    }
    unsigned int v21 = *((_DWORD *)this + 70) + (v48 & (*((int *)this + 70) >> 31));
    if (v48) {
      BOOL v22 = *((unsigned char *)this + 284) == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22) {
      unint64_t v23 = v21;
    }
    else {
      unint64_t v23 = v48 + ~v21;
    }
    BOOL v24 = v48 >= v23 || *((unsigned char *)this + 284) == 0;
    if ((v23 & 0x80000000) != 0 || !v24) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid value of the argument 'axis'.");
    }
    std::vector<unsigned long>::vector(&v43, (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4);
    int v25 = (void *)((char *)this + 304);
    int v26 = (void *)*((void *)this + 38);
    if (v26)
    {
      *((void *)this + 39) = v26;
      operator delete(v26);
      void *v25 = 0;
      *((void *)this + 39) = 0;
      *((void *)this + 40) = 0;
    }
    *((_OWORD *)this + 19) = v43;
    *((void *)this + 40) = v44;
    switch((int)v23)
    {
      case 0:
        uint64_t v27 = *(void *)a3;
        if (*((void *)a3 + 1) != *(void *)a3)
        {
          uint64_t v28 = 0;
          unint64_t v29 = 0;
          do
          {
            Espresso::abstract_blob_container::shape((char *)&v43, *(void *)(v27 + v28));
            *(void *)(*v25 + 8 * v29) = (int)v43;
            if (__p)
            {
              int v46 = __p;
              operator delete(__p);
            }
            ++v29;
            uint64_t v27 = *(void *)a3;
            v28 += 16;
          }
          while (v29 < (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4);
        }
        break;
      case 1:
        uint64_t v39 = *(void *)a3;
        if (*((void *)a3 + 1) != *(void *)a3)
        {
          uint64_t v40 = 0;
          unint64_t v41 = 0;
          do
          {
            Espresso::abstract_blob_container::shape((char *)&v43, *(void *)(v39 + v40));
            *(void *)(*v25 + 8 * v41) = SDWORD1(v43);
            if (__p)
            {
              int v46 = __p;
              operator delete(__p);
            }
            ++v41;
            uint64_t v39 = *(void *)a3;
            v40 += 16;
          }
          while (v41 < (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4);
        }
        break;
      case 2:
        uint64_t v33 = *(void *)a3;
        if (*((void *)a3 + 1) != *(void *)a3)
        {
          uint64_t v34 = 0;
          unint64_t v35 = 0;
          do
          {
            Espresso::abstract_blob_container::shape((char *)&v43, *(void *)(v33 + v34));
            *(void *)(*v25 + 8 * v35) = SDWORD2(v43);
            if (__p)
            {
              int v46 = __p;
              operator delete(__p);
            }
            ++v35;
            uint64_t v33 = *(void *)a3;
            v34 += 16;
          }
          while (v35 < (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4);
        }
        break;
      case 3:
        uint64_t v36 = *(void *)a3;
        if (*((void *)a3 + 1) != *(void *)a3)
        {
          uint64_t v37 = 0;
          unint64_t v38 = 0;
          do
          {
            Espresso::abstract_blob_container::shape((char *)&v43, *(void *)(v36 + v37));
            *(void *)(*v25 + 8 * v38) = SHIDWORD(v43);
            if (__p)
            {
              int v46 = __p;
              operator delete(__p);
            }
            ++v38;
            uint64_t v36 = *(void *)a3;
            v37 += 16;
          }
          while (v38 < (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4);
        }
        break;
      case 4:
        uint64_t v30 = *(void *)a3;
        if (*((void *)a3 + 1) != *(void *)a3)
        {
          uint64_t v31 = 0;
          unint64_t v32 = 0;
          do
          {
            Espresso::abstract_blob_container::shape((char *)&v43, *(void *)(v30 + v31));
            *(void *)(*v25 + 8 * v32) = (int)v44;
            if (__p)
            {
              int v46 = __p;
              operator delete(__p);
            }
            ++v32;
            uint64_t v30 = *(void *)a3;
            v31 += 16;
          }
          while (v32 < (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 4);
        }
        break;
      default:
        break;
    }
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_1927F8BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (v17)
  {
    nitro::nitro_function::nitro_function(v17);
    if (v16)
    {
LABEL_8:
      nitro::nitro_function::nitro_function(v16);
      if (!v15) {
LABEL_5:
      }
        _Unwind_Resume(exception_object);
LABEL_4:
      nitro::nitro_function::nitro_function(v15);
      goto LABEL_5;
    }
  }
  else if (v16)
  {
    goto LABEL_8;
  }
  if (!v15) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

void Espresso::MPSBuffersEngine::general_concat_kernel::blob_options(Espresso::MPSBuffersEngine::general_concat_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  double v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  unsigned int v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    int v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)int v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927F8DF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::general_concat_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  if (a4[1] != *a4)
  {
    uint64_t v5 = *a3;
    if (a3[1] != *a3)
    {
      uint64_t v6 = a4;
      if (!*(void *)(a1 + 296))
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)a1 + 80))(a1, a3, a4);
        if (!*(void *)(a1 + 296)) {
          Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
        }
        uint64_t v5 = *a3;
      }
      if (*(void *)v5)
      {
        if (v8)
        {
          uint64_t v9 = *(std::__shared_weak_count **)(v5 + 8);
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
      }
      else
      {
        uint64_t v9 = 0;
        unsigned int v8 = 0;
      }
      id v164 = *((id *)v8 + 21);
      Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v219, *a2);
      id v165 = v219[0];
      uint64_t v11 = *v6;
      int v10 = v6[1];
      uint64_t v218 = 0;
      memset(v217, 0, sizeof(v217));
      int v12 = (*(uint64_t (**)(int *))(*(void *)v8 + 32))(v8);
      int v13 = v8[3];
      uint64_t v14 = v8[2];
      LODWORD(v217[0]) = v8[2];
      DWORD1(v217[0]) = v13;
      int v15 = v8[4];
      int32x2_t v16 = vmax_s32(*(int32x2_t *)(v8 + 5), (int32x2_t)0x100000001);
      *(int32x2_t *)((char *)v217 + 12) = v16;
      DWORD2(v217[0]) = v15;
      DWORD1(v217[1]) = 1;
      float32x4_t v162 = v9;
      if ((v12 - 1) >= 0xD)
      {
        unint64_t v18 = *((void *)v8 + 31) + *((void *)v8 + 31) * ((unint64_t)(4 * v14 - 1) / *((void *)v8 + 31));
        unint64_t v17 = 4;
      }
      else
      {
        unint64_t v17 = qword_192DF6AD8[v12 - 1];
        unint64_t v18 = *((void *)v8 + 31) + *((void *)v8 + 31) * ((v17 * v14 - 1) / *((void *)v8 + 31));
      }
      DWORD2(v217[1]) = v18 / v17;
      HIDWORD(v217[1]) = v13 * DWORD2(v217[1]);
      LODWORD(v218) = v13 * DWORD2(v217[1]) * v15;
      HIDWORD(v218) = v218 * v16.i32[0];
      if (v10 != v11)
      {
        uint64_t v19 = 0;
        unint64_t v178 = ((char *)v10 - (char *)v11) >> 4;
        float32x4_t v163 = v6;
        while (1)
        {
          long long v215 = 0u;
          long long v216 = 0u;
          int v20 = *v6;
          uint64_t v21 = 2 * v19;
          BOOL v22 = (const void *)(*v6)[2 * v19];
          uint64_t v177 = v19;
          if (v22)
          {
            if (v23)
            {
              BOOL v24 = (std::__shared_weak_count *)v20[2 * v19 + 1];
              if (v24) {
                atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              BOOL v24 = 0;
            }
          }
          else
          {
            BOOL v24 = 0;
            unint64_t v23 = 0;
          }
          id v173 = *((id *)v23 + 21);
          id v25 = *((id *)v23 + 21);
          id v176 = *((id *)v23 + 21);
          id v175 = *((id *)v23 + 21);
          int v26 = (*(uint64_t (**)(uint64_t))(*(void *)(*v6)[v21] + 32))((*v6)[v21]);
          unsigned int v27 = *((_DWORD *)v23 + 2);
          if ((v26 - 1) >= 0xD)
          {
            unint64_t v29 = v23 + 248;
            unint64_t v30 = *((void *)v23 + 31)
                + *((void *)v23 + 31) * ((unint64_t)(4 * (int)v27 - 1) / *((void *)v23 + 31));
            unint64_t v28 = 4;
          }
          else
          {
            unint64_t v28 = qword_192DF6AD8[v26 - 1];
            unint64_t v29 = v23 + 248;
            unint64_t v30 = *((void *)v23 + 31) + *((void *)v23 + 31) * ((v28 * (int)v27 - 1) / *((void *)v23 + 31));
          }
          unsigned int v31 = *((_DWORD *)v23 + 3);
          unsigned int v32 = *((_DWORD *)v23 + 4);
          int32x2_t v209 = vmax_s32(*(int32x2_t *)(v23 + 20), (int32x2_t)0x100000001);
          unsigned int v206 = v27;
          unsigned int v207 = v31;
          unsigned int v208 = v32;
          int v210 = 1;
          int v211 = v30 / v28;
          int v212 = v31 * v211;
          int v213 = v31 * v211 * v32;
          __int32 v214 = v213 * v209.i32[0];
          int v33 = (*(uint64_t (**)(uint64_t))(*(void *)(*v6)[v21] + 32))((*v6)[v21]);
          unsigned int v34 = *((_DWORD *)v23 + 2);
          if ((v33 - 1) >= 0xD)
          {
            unint64_t v36 = *v29 + *v29 * ((unint64_t)(4 * (int)v34 - 1) / *v29);
            unint64_t v35 = 4;
          }
          else
          {
            unint64_t v35 = qword_192DF6AD8[v33 - 1];
            unint64_t v36 = *v29 + *v29 * ((v35 * (int)v34 - 1) / *v29);
          }
          int v37 = *((_DWORD *)v23 + 3);
          int v38 = *((_DWORD *)v23 + 4);
          int32x2_t v200 = vmax_s32(*(int32x2_t *)(v23 + 20), (int32x2_t)0x100000001);
          unsigned int v197 = v34;
          int v198 = v37;
          int v199 = v38;
          int v201 = 1;
          int v202 = v36 / v35;
          int v203 = v37 * v202;
          int v204 = v37 * v202 * v38;
          __int32 v205 = v204 * v200.i32[0];
          int v39 = (*(uint64_t (**)(uint64_t))(*(void *)(*v6)[v21] + 32))((*v6)[v21]);
          unsigned int v40 = *((_DWORD *)v23 + 2);
          if ((v39 - 1) >= 0xD)
          {
            unint64_t v42 = *v29 + *v29 * ((unint64_t)(4 * (int)v40 - 1) / *v29);
            unint64_t v41 = 4;
          }
          else
          {
            unint64_t v41 = qword_192DF6AD8[v39 - 1];
            unint64_t v42 = *v29 + *v29 * ((v41 * (int)v40 - 1) / *v29);
          }
          int v43 = *((_DWORD *)v23 + 3);
          int v44 = *((_DWORD *)v23 + 4);
          int32x2_t v191 = vmax_s32(*(int32x2_t *)(v23 + 20), (int32x2_t)0x100000001);
          unsigned int v188 = v40;
          int v189 = v43;
          int v190 = v44;
          int v192 = 1;
          int v193 = v42 / v41;
          int v194 = v43 * v193;
          int v195 = v43 * v193 * v44;
          __int32 v196 = v195 * v191.i32[0];
          int v45 = (*(uint64_t (**)(uint64_t))(*(void *)(*v6)[v21] + 32))((*v6)[v21]);
          unsigned int v46 = *((_DWORD *)v23 + 2);
          if ((v45 - 1) >= 0xD)
          {
            unint64_t v48 = *v29 + *v29 * ((unint64_t)(4 * (int)v46 - 1) / *v29);
            unint64_t v47 = 4;
          }
          else
          {
            unint64_t v47 = qword_192DF6AD8[v45 - 1];
            unint64_t v48 = *v29 + *v29 * ((v47 * (int)v46 - 1) / *v29);
          }
          int v49 = *((_DWORD *)v23 + 3);
          int v50 = *((_DWORD *)v23 + 4);
          int32x2_t v182 = vmax_s32(*(int32x2_t *)(v23 + 20), (int32x2_t)0x100000001);
          unsigned int v179 = v46;
          int v180 = v49;
          int v181 = v50;
          int v183 = 1;
          int v184 = v48 / v47;
          int v185 = v49 * v184;
          int v186 = v49 * v184 * v50;
          __int32 v187 = v186 * v182.i32[0];
          if (v178 < 2)
          {
            int v51 = 0;
            LOBYTE(v52) = 0;
            uint64_t v53 = 1;
            goto LABEL_84;
          }
          uint64_t v54 = v177 + 1;
          uint64_t v55 = (uint64_t)&(*v6)[2 * v177 + 2];
          id v57 = *(std::__shared_weak_count **)(v55 + 8);
          if (v57)
          {
            atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
            id v58 = v56[21];

            nitro::nitro_function::nitro_function(v57);
            id v25 = v58;
          }
          else
          {
            id v59 = v56[21];

            id v25 = v59;
          }
          uint64_t v60 = *v6;
          int v61 = (const void *)(*v6)[2 * v54];
          if (!v61) {
            break;
          }
          if (!v62) {
            goto LABEL_45;
          }
          int v63 = (std::__shared_weak_count *)v60[2 * v54 + 1];
          if (v63)
          {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v60 = *v6;
          }
LABEL_46:
          int v64 = (*(uint64_t (**)(uint64_t))(*(void *)v60[v21] + 32))(v60[v21]);
          unsigned int v65 = *((_DWORD *)v62 + 2);
          if ((v64 - 1) >= 0xD)
          {
            unint64_t v67 = *((void *)v62 + 31)
                + *((void *)v62 + 31) * ((unint64_t)(4 * (int)v65 - 1) / *((void *)v62 + 31));
            unint64_t v66 = 4;
          }
          else
          {
            unint64_t v66 = qword_192DF6AD8[v64 - 1];
            unint64_t v67 = *((void *)v62 + 31) + *((void *)v62 + 31) * ((v66 * (int)v65 - 1) / *((void *)v62 + 31));
          }
          int v68 = *((_DWORD *)v62 + 3);
          int v69 = *((_DWORD *)v62 + 4);
          int32x2_t v200 = vmax_s32(*(int32x2_t *)(v62 + 20), (int32x2_t)0x100000001);
          unsigned int v197 = v65;
          int v198 = v68;
          int v199 = v69;
          int v201 = 1;
          int v202 = v67 / v66;
          int v203 = v68 * v202;
          int v204 = v68 * v202 * v69;
          __int32 v205 = v204 * v200.i32[0];
          if (v63) {
            nitro::nitro_function::nitro_function(v63);
          }
          if (v178 < 3)
          {
            int v51 = 0;
            LOBYTE(v52) = 0;
            uint64_t v53 = 2;
            goto LABEL_84;
          }
          uint64_t v70 = v177 + 2;
          uint64_t v71 = (uint64_t)&(*v6)[2 * v177 + 4];
          int v73 = *(std::__shared_weak_count **)(v71 + 8);
          if (v73)
          {
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
            id v74 = v72[21];

            nitro::nitro_function::nitro_function(v73);
            id v176 = v74;
          }
          else
          {
            id v75 = v72[21];

            id v176 = v75;
          }
          int v76 = *v6;
          int v77 = (const void *)(*v6)[2 * v70];
          if (v77)
          {
            if (v78)
            {
              int v79 = (std::__shared_weak_count *)v76[2 * v70 + 1];
              if (v79)
              {
                atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
                int v76 = *v6;
              }
              goto LABEL_62;
            }
          }
          else
          {
            uint64_t v78 = 0;
          }
          int v79 = 0;
LABEL_62:
          int v80 = (*(uint64_t (**)(uint64_t))(*(void *)v76[v21] + 32))(v76[v21]);
          unsigned int v81 = *((_DWORD *)v78 + 2);
          if ((v80 - 1) >= 0xD)
          {
            unint64_t v83 = *((void *)v78 + 31)
                + *((void *)v78 + 31) * ((unint64_t)(4 * (int)v81 - 1) / *((void *)v78 + 31));
            unint64_t v82 = 4;
          }
          else
          {
            unint64_t v82 = qword_192DF6AD8[v80 - 1];
            unint64_t v83 = *((void *)v78 + 31) + *((void *)v78 + 31) * ((v82 * (int)v81 - 1) / *((void *)v78 + 31));
          }
          int v84 = *((_DWORD *)v78 + 3);
          int v85 = *((_DWORD *)v78 + 4);
          int32x2_t v191 = vmax_s32(*(int32x2_t *)(v78 + 20), (int32x2_t)0x100000001);
          unsigned int v188 = v81;
          int v189 = v84;
          int v190 = v85;
          int v192 = 1;
          int v193 = v83 / v82;
          int v194 = v84 * v193;
          int v195 = v84 * v193 * v85;
          __int32 v196 = v195 * v191.i32[0];
          if (v79) {
            nitro::nitro_function::nitro_function(v79);
          }
          if (v178 >= 4)
          {
            uint64_t v86 = v177 + 3;
            uint64_t v87 = (uint64_t)&(*v6)[2 * v177 + 6];
            uint64_t v89 = *(std::__shared_weak_count **)(v87 + 8);
            if (v89)
            {
              atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
              id v90 = v88[21];

              nitro::nitro_function::nitro_function(v89);
              id v175 = v90;
            }
            else
            {
              id v91 = v88[21];

              id v175 = v91;
            }
            id v92 = *v6;
            uint64_t v93 = (const void *)(*v6)[2 * v86];
            if (v93)
            {
              if (v94)
              {
                BOOL v52 = (std::__shared_weak_count *)v92[2 * v86 + 1];
                if (v52)
                {
                  atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
                  id v92 = *v6;
                }
                goto LABEL_78;
              }
            }
            else
            {
              uint64_t v94 = 0;
            }
            BOOL v52 = 0;
LABEL_78:
            int v95 = (*(uint64_t (**)(uint64_t))(*(void *)v92[v21] + 32))(v92[v21]);
            unsigned int v96 = *((_DWORD *)v94 + 2);
            if ((v95 - 1) >= 0xD)
            {
              unint64_t v98 = *((void *)v94 + 31)
                  + *((void *)v94 + 31) * ((unint64_t)(4 * (int)v96 - 1) / *((void *)v94 + 31));
              unint64_t v97 = 4;
            }
            else
            {
              unint64_t v97 = qword_192DF6AD8[v95 - 1];
              unint64_t v98 = *((void *)v94 + 31) + *((void *)v94 + 31) * ((v97 * (int)v96 - 1) / *((void *)v94 + 31));
            }
            int v99 = *((_DWORD *)v94 + 3);
            int v100 = *((_DWORD *)v94 + 4);
            int32x2_t v182 = vmax_s32(*(int32x2_t *)(v94 + 20), (int32x2_t)0x100000001);
            unsigned int v179 = v96;
            int v180 = v99;
            int v181 = v100;
            int v51 = 1;
            int v183 = 1;
            int v184 = v98 / v97;
            int v185 = v99 * v184;
            int v186 = v99 * v184 * v100;
            __int32 v187 = v186 * v182.i32[0];
            if (v52)
            {
              nitro::nitro_function::nitro_function(v52);
              LOBYTE(v52) = 0;
            }
            uint64_t v53 = 4;
            goto LABEL_84;
          }
          int v51 = 1;
          LOBYTE(v52) = 1;
          uint64_t v53 = 3;
LABEL_84:
          LODWORD(v215) = v53;
          Espresso::abstract_blob_container::shape(v220, **v6);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v223, (const Espresso::layer_shape *)v220, 0);
          if (v221)
          {
            int v222 = v221;
            operator delete(v221);
          }
          unsigned int v101 = *(_DWORD *)(a1 + 280) + (v224 & (*(int *)(a1 + 280) >> 31));
          if (v224) {
            BOOL v102 = *(unsigned char *)(a1 + 284) == 0;
          }
          else {
            BOOL v102 = 1;
          }
          if (v102) {
            unint64_t v103 = v101;
          }
          else {
            unint64_t v103 = v224 + ~v101;
          }
          BOOL v104 = v224 >= v103 || *(unsigned char *)(a1 + 284) == 0;
          if ((v103 & 0x80000000) != 0 || !v104) {
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid value of the argument 'axis'.");
          }
          uint64_t v105 = *(void *)(a1 + 304);
          int v106 = v177;
          if (v177)
          {
            int v106 = 0;
            uint64_t v107 = 8 * v177;
            int v108 = *(int **)(a1 + 304);
            do
            {
              int v109 = *v108;
              v108 += 2;
              v106 += v109;
              v107 -= 8;
            }
            while (v107);
          }
          DWORD1(v215) = v103;
          int v110 = 1;
          switch((int)v103)
          {
            case 0:
              break;
            case 1:
              int v110 = DWORD2(v217[1]);
              break;
            case 2:
              int v110 = HIDWORD(v217[1]);
              break;
            case 3:
              int v110 = v218;
              break;
            case 4:
              int v110 = HIDWORD(v218);
              break;
            default:
              Espresso::throw_exception_selector<Espresso::generic_error>("axis not supported in general_concat mpsbuffers.");
          }
          DWORD2(v216) = v110;
          uint64_t v166 = v53;
          LODWORD(v215) = v53;
          DWORD2(v215) = v110 * v106;
          if (v178 >= 2)
          {
            int v111 = v106 + *(_DWORD *)(v105 + 8 * v177);
            HIDWORD(v215) = v110 * v111;
            if (v51)
            {
              uint64_t v112 = v105 + 8 * v177;
              int v113 = v111 + *(_DWORD *)(v112 + 8);
              LODWORD(v216) = v110 * v113;
              if ((v52 & 1) == 0) {
                DWORD1(v216) = v110 * (v113 + *(_DWORD *)(v112 + 16));
              }
            }
          }
          unsigned int v114 = v206;
          unsigned int v115 = v197;
          unsigned int v116 = v188;
          unsigned int v117 = v179;
          uint64_t v118 = (unsigned int *)operator new(0x10uLL);
          unsigned int *v118 = v114;
          v118[1] = v115;
          void v118[2] = v116;
          v118[3] = v117;
          std::string __p = v118;
          unsigned int v119 = v207;
          int v120 = v198;
          int v121 = v189;
          int v122 = v180;
          id v123 = (int *)operator new(0x10uLL);
          int v170 = v24;
          uint64_t v171 = v25;
          *id v123 = v119;
          v123[1] = v120;
          void v123[2] = v121;
          v123[3] = v122;
          unsigned int v124 = v208;
          int v125 = v199;
          int v126 = v190;
          int v127 = v181;
          uint64_t v128 = (int *)operator new(0x10uLL);
          *uint64_t v128 = v124;
          v128[1] = v125;
          void v128[2] = v126;
          v128[3] = v127;
          unsigned __int32 v129 = v209.i32[0];
          __int32 v130 = v200.i32[0];
          __int32 v131 = v191.i32[0];
          __int32 v132 = v182.i32[0];
          int v133 = (int *)operator new(0x10uLL);
          *int v133 = v129;
          v133[1] = v130;
          uint64_t v133[2] = v131;
          v133[3] = v132;
          unsigned __int32 v134 = v209.u32[1];
          __int32 v135 = v200.i32[1];
          __int32 v167 = v182.i32[1];
          __int32 v168 = v191.i32[1];
          int v136 = operator new(0x10uLL);
          unsigned int v137 = v136;
          *int v136 = v134;
          v136[1] = v135;
          uint64_t v138 = 1;
          BOOL v139 = __p;
          v136[2] = v168;
          v136[3] = v167;
          do
          {
            unsigned int v140 = __p[v138];
            BOOL v141 = v114 >= v140;
            if (v114 <= v140) {
              unsigned int v114 = __p[v138];
            }
            if (!v141) {
              BOOL v139 = &__p[v138];
            }
            ++v138;
          }
          while (v138 != 4);
          unsigned int v169 = *v139;
          uint64_t v142 = 1;
          uint64_t v143 = v123;
          do
          {
            unsigned int v144 = v123[v142];
            BOOL v145 = v119 >= v144;
            if (v119 <= v144) {
              unsigned int v119 = v123[v142];
            }
            if (!v145) {
              uint64_t v143 = &v123[v142];
            }
            ++v142;
          }
          while (v142 != 4);
          int v146 = *v143;
          uint64_t v147 = 1;
          float32x4_t v148 = v128;
          do
          {
            unsigned int v149 = v128[v147];
            BOOL v150 = v124 >= v149;
            if (v124 <= v149) {
              unsigned int v124 = v128[v147];
            }
            if (!v150) {
              float32x4_t v148 = &v128[v147];
            }
            ++v147;
          }
          while (v147 != 4);
          int v151 = *v148;
          uint64_t v152 = 1;
          int v153 = v133;
          do
          {
            unsigned __int32 v154 = v133[v152];
            BOOL v155 = v129 >= v154;
            if (v129 <= v154) {
              unsigned __int32 v129 = v133[v152];
            }
            if (!v155) {
              int v153 = &v133[v152];
            }
            ++v152;
          }
          while (v152 != 4);
          int v156 = *v153;
          uint64_t v157 = 1;
          float32x4_t v158 = v136;
          do
          {
            unsigned __int32 v159 = v136[v157];
            BOOL v160 = v134 >= v159;
            if (v134 <= v159) {
              unsigned __int32 v134 = v136[v157];
            }
            if (!v160) {
              float32x4_t v158 = &v136[v157];
            }
            ++v157;
          }
          while (v157 != 4);
          int v161 = *v158;
          [v165 setComputePipelineState:*(void *)(a1 + 296)];
          [v165 setBuffer:v164 offset:0 atIndex:0];
          [v165 setBuffer:v173 offset:0 atIndex:1];
          [v165 setBuffer:v171 offset:0 atIndex:2];
          [v165 setBuffer:v176 offset:0 atIndex:3];
          [v165 setBuffer:v175 offset:0 atIndex:4];
          [v165 setBytes:v217 length:40 atIndex:5];
          [v165 setBytes:&v206 length:40 atIndex:6];
          [v165 setBytes:&v197 length:40 atIndex:7];
          [v165 setBytes:&v188 length:40 atIndex:8];
          [v165 setBytes:&v179 length:40 atIndex:9];
          [v165 setBytes:&v215 length:32 atIndex:10];
          operator delete(v137);
          operator delete(v133);
          operator delete(v128);
          operator delete(v123);
          operator delete(__p);

          if (v170) {
            nitro::nitro_function::nitro_function(v170);
          }
          uint64_t v19 = v166 + v177;
          uint64_t v6 = v163;
          v178 -= v166;
          if (!v178) {
            goto LABEL_142;
          }
        }
        unint64_t v62 = 0;
LABEL_45:
        int v63 = 0;
        goto LABEL_46;
      }
LABEL_142:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v219);
      if (v162) {
        nitro::nitro_function::nitro_function(v162);
      }
    }
  }
}

void sub_1927F9EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v23 - 216));
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::general_concat_kernel::~general_concat_kernel(Espresso::MPSBuffersEngine::general_concat_kernel *this)
{
  *(void *)this = &unk_1EE33D248;
  BOOL v2 = (void *)*((void *)this + 38);
  if (v2)
  {
    *((void *)this + 39) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE33D248;
  BOOL v2 = (void *)*((void *)this + 38);
  if (v2)
  {
    *((void *)this + 39) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384600;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::MPSBuffersEngine::concat_kernel::blob_options(Espresso::MPSBuffersEngine::concat_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  double v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  unsigned int v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    int v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)int v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927FA2D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSBuffersEngine::concat_kernel::__launch(uint64_t result, uint64_t a2, void *a3, void *a4)
{
  if (a3[1] != *a3 && a4[1] != *a4)
  {
    double v4 = (void *)result;
    uint64_t v5 = *(void *)(result + 344);
    if (!v5)
    {
      (*(void (**)(void *, void *, void *))(*v4 + 80))(v4, a3, a4);
      uint64_t v5 = v4[43];
      if (!v5) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to make fallback kernel in concat");
      }
    }
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 16);
    return v6();
  }
  return result;
}

void Espresso::MPSBuffersEngine::concat_kernel::~concat_kernel(Espresso::MPSBuffersEngine::concat_kernel *this)
{
  *(void *)this = &unk_1EE33B980;
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE33B980;
  BOOL v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::MPSBuffersEngine::copy_kernel::blob_options(Espresso::MPSBuffersEngine::copy_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  double v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  unsigned int v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    int v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)int v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927FA60C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::copy_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, uint64_t *a4)
{
  uint64_t v7 = *a3;
  unsigned int v8 = **a3;
  if (!v8)
  {
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  if (!v9)
  {
LABEL_6:
    int v10 = 0;
    goto LABEL_7;
  }
  int v10 = (std::__shared_weak_count *)v7[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v11 = *a4;
  if (!*(void *)v11)
  {
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  if (!v12)
  {
LABEL_12:
    int v13 = 0;
    goto LABEL_13;
  }
  int v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  if (!*(void *)a2)
  {
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  if (!v14)
  {
LABEL_18:
    int v15 = 0;
    goto LABEL_19;
  }
  int v15 = *(std::__shared_weak_count **)(a2 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  int32x2_t v16 = *(void **)(a1 + 288);
  if (!v16)
  {
    *(_DWORD *)(a1 + 296) = 2;
    unint64_t v17 = *(const void **)(a1 + 8);
    if (!v17
    {
      exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    uint64_t v19 = *(std::__shared_weak_count **)(a1 + 16);
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      id v20 = v18[18];
      nitro::nitro_function::nitro_function(v19);
    }
    else
    {
      id v20 = v18[18];
    }
    uint64_t v21 = [objc_alloc(MEMORY[0x1E4F35668]) initWithDevice:v20];
    BOOL v22 = *(void **)(a1 + 288);
    *(void *)(a1 + 288) = v21;

    LODWORD(v23) = 1.0;
    [*(id *)(a1 + 288) setNeuronType:*(unsigned int *)(a1 + 296) parameterA:v23 parameterB:0.0 parameterC:0.0];

    int32x2_t v16 = *(void **)(a1 + 288);
  }
  uint64_t v24 = v14[18];
  id v25 = v12[25];
  id v26 = v9[25];
  [v16 encodeToCommandBuffer:v24 inputMatrix:v25 biasVector:0 resultMatrix:v26];

  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927FA978(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void Espresso::MPSBuffersEngine::copy_kernel::~copy_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::MPSBuffersEngine::split_kernel::is_valid_for_engine(_DWORD *a1, uint64_t a2, long long **a3)
{
  if (a1[71] != 2) {
    return 0;
  }
  int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v10, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
  double v4 = v10;
  uint64_t v5 = v11;
  while (v4 != v5)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v8, v4, 0);
    if (v9 >= 4) {
      goto LABEL_9;
    }
    double v4 = (const Espresso::layer_shape *)((char *)v4 + 64);
  }
  if (a1[86] <= 1u)
  {
    BOOL v6 = a1[74] == 0;
    goto LABEL_10;
  }
LABEL_9:
  BOOL v6 = 0;
LABEL_10:
  v8[0] = (void **)&v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v8);
  return v6;
}

void sub_1927FAB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::split_kernel::blob_options(Espresso::MPSBuffersEngine::split_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  double v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  unsigned int v8 = v7;
  unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    int v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)int v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927FACBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::split_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, void **a4)
{
  uint64_t v4 = (uint64_t)*a4;
  if (a4[1] == *a4) {
    return;
  }
  if (*(void *)v4)
  {
    if (v8)
    {
      unsigned int v9 = *(std::__shared_weak_count **)(v4 + 8);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
  unsigned int v9 = 0;
LABEL_8:
  id v142 = v8[21];
  int v10 = *(Espresso::context_metal **)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 344);
  if (v11 == 1)
  {
    uint64_t v12 = Espresso::context_metal::kernel_for_function(v10, &cfstr_SplitF16Buffer.isa);
  }
  else
  {
    if (v11) {
      Espresso::throw_exception_selector<Espresso::generic_error>("unsupported compute path in split kernel");
    }
    uint64_t v12 = Espresso::context_metal::kernel_for_function(v10, &cfstr_SplitF32Buffer.isa);
  }
  int v13 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = v12;

  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v210, *a2);
  id v14 = v210[0];
  uint64_t v16 = *a3;
  uint64_t v15 = a3[1];
  int v17 = (*(uint64_t (**)(void))(*(void *)**a4 + 32))(**a4);
  BOOL v141 = v9;
  int v18 = *((_DWORD *)v8 + 3);
  uint64_t v19 = *((int *)v8 + 2);
  int v20 = *((_DWORD *)v8 + 4);
  v197[1] = *((_DWORD *)v8 + 2);
  unsigned int v198 = v20 * v18;
  int v202 = v18;
  int v203 = v20;
  unint64_t v21 = v8[31];
  unsigned int v205 = v8[31];
  int v23 = *((_DWORD *)v8 + 5);
  int v22 = *((_DWORD *)v8 + 6);
  if (v23 <= 1) {
    int v23 = 1;
  }
  if (v22 <= 1) {
    int v24 = 1;
  }
  else {
    int v24 = *((_DWORD *)v8 + 6);
  }
  unsigned int v204 = v24 * v23;
  if ((v17 - 1) >= 0xD)
  {
    unint64_t v26 = v21 + v21 * ((4 * v19 - 1) / v21);
    unint64_t v25 = 4;
  }
  else
  {
    unint64_t v25 = qword_192DF6AD8[v17 - 1];
    unint64_t v26 = v21 + v21 * ((v25 * v19 - 1) / v21);
  }
  unint64_t v27 = v26 / v25;
  int v28 = v19 - 1;
  if ((int)v19 < 1) {
    int v28 = v19 + 2;
  }
  int v206 = (v28 >> 2) + 1;
  unsigned int v207 = v27 >> 2;
  int v29 = *((_DWORD *)v8 + 5);
  if (v29 <= 1) {
    int v30 = 1;
  }
  else {
    int v30 = *((_DWORD *)v8 + 5);
  }
  v197[0] = v27;
  int v199 = v18 * v19;
  int v200 = v20 * v18 * v19;
  int v201 = v200 * v29;
  int v208 = v30;
  int v209 = v22;
  int v31 = *(_DWORD *)(**a4 + 8);
  int v32 = *(_DWORD *)(a1 + 280);
  uint64_t v194 = 0;
  uint64_t v195 = 0;
  int v196 = 0;
  if (v15 != v16)
  {
    uint64_t v33 = 0;
    unint64_t v34 = (v15 - v16) >> 4;
    unsigned int v144 = (v31 - 1) / v32 + 1;
    int v145 = 0;
    while (1)
    {
      uint64_t v35 = *a3 + 16 * v33;
      int v37 = *(std::__shared_weak_count **)(v35 + 8);
      if (v37)
      {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        id v147 = v36[21];
        nitro::nitro_function::nitro_function(v37);
      }
      else
      {
        id v147 = v36[21];
      }
      uint64_t v38 = *a3 + 16 * v33;
      unsigned int v40 = *(std::__shared_weak_count **)(v38 + 8);
      if (v40)
      {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        id v41 = v39[21];
        nitro::nitro_function::nitro_function(v40);
      }
      else
      {
        id v41 = v39[21];
      }
      uint64_t v42 = *a3 + 16 * v33;
      int v44 = *(std::__shared_weak_count **)(v42 + 8);
      if (v44)
      {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        id v149 = v43[21];
        nitro::nitro_function::nitro_function(v44);
      }
      else
      {
        id v149 = v43[21];
      }
      uint64_t v45 = *a3 + 16 * v33;
      unint64_t v47 = *(std::__shared_weak_count **)(v45 + 8);
      if (v47)
      {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        id v148 = v46[21];
        nitro::nitro_function::nitro_function(v47);
      }
      else
      {
        id v148 = v46[21];
      }
      HIDWORD(v194) = v145;
      uint64_t v48 = *a3;
      int v49 = *(const void **)(*a3 + 16 * v33);
      if (!v49) {
        break;
      }
      if (!v50) {
        goto LABEL_44;
      }
      int v51 = *(std::__shared_weak_count **)(v48 + 16 * v33 + 8);
      if (v51)
      {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        int v49 = *(const void **)(*a3 + 16 * v33);
      }
LABEL_45:
      int v52 = (*(uint64_t (**)(const void *))(*(void *)v49 + 32))(v49);
      int v53 = v50[3];
      uint64_t v54 = v50[2];
      int v55 = v50[4];
      v183[1] = v50[2];
      v183[2] = v55 * v53;
      int v187 = v55;
      int v186 = v53;
      unint64_t v56 = *((void *)v50 + 31);
      int v189 = *((void *)v50 + 31);
      int v58 = v50[5];
      int v57 = v50[6];
      if (v58 <= 1) {
        int v58 = 1;
      }
      if (v57 <= 1) {
        int v59 = 1;
      }
      else {
        int v59 = v50[6];
      }
      int v188 = v59 * v58;
      if ((v52 - 1) >= 0xD)
      {
        unint64_t v61 = v56 + v56 * ((4 * v54 - 1) / v56);
        unint64_t v60 = 4;
      }
      else
      {
        unint64_t v60 = qword_192DF6AD8[v52 - 1];
        unint64_t v61 = v56 + v56 * ((v60 * v54 - 1) / v56);
      }
      unint64_t v62 = v61 / v60;
      int v63 = v54 - 1;
      if ((int)v54 < 1) {
        int v63 = v54 + 2;
      }
      int v190 = (v63 >> 2) + 1;
      unsigned int v191 = v62 >> 2;
      int v64 = v50[5];
      v183[0] = v62;
      v183[3] = v53 * v54;
      int v184 = v55 * v53 * v54;
      int v185 = v184 * v64;
      if (v64 <= 1) {
        int v65 = 1;
      }
      else {
        int v65 = v64;
      }
      int v192 = v65;
      int v193 = v57;
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v34 < 2)
      {
        uint64_t v72 = 1;
        int v73 = v41;
        goto LABEL_139;
      }
      v145 += v144;
      LODWORD(v195) = v145;
      uint64_t v66 = v33 + 1;
      uint64_t v67 = *a3 + 16 * (v33 + 1);
      int v69 = *(std::__shared_weak_count **)(v67 + 8);
      if (v69)
      {
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
        id v70 = v68[21];

        nitro::nitro_function::nitro_function(v69);
        id v71 = v70;
      }
      else
      {
        id v74 = v68[21];

        id v71 = v74;
      }
      uint64_t v75 = *a3;
      int v76 = *(const void **)(*a3 + 16 * v66);
      if (!v76)
      {
        int v77 = 0;
LABEL_70:
        uint64_t v78 = 0;
        goto LABEL_71;
      }
      if (!v77) {
        goto LABEL_70;
      }
      uint64_t v78 = *(std::__shared_weak_count **)(v75 + 16 * v66 + 8);
      if (v78)
      {
        atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
        int v76 = *(const void **)(*a3 + 16 * v66);
      }
LABEL_71:
      int v73 = v71;
      int v79 = (*(uint64_t (**)(const void *))(*(void *)v76 + 32))(v76);
      int v80 = v77[3];
      uint64_t v81 = v77[2];
      int v82 = v77[4];
      v172[1] = v77[2];
      v172[2] = v82 * v80;
      int v175 = v80;
      int v176 = v82;
      unint64_t v83 = *((void *)v77 + 31);
      int v178 = *((void *)v77 + 31);
      int v85 = v77[5];
      int v84 = v77[6];
      if (v85 <= 1) {
        int v85 = 1;
      }
      if (v84 <= 1) {
        int v86 = 1;
      }
      else {
        int v86 = v77[6];
      }
      int v177 = v86 * v85;
      if ((v79 - 1) >= 0xD)
      {
        unint64_t v88 = v83 + v83 * ((4 * v81 - 1) / v83);
        unint64_t v87 = 4;
      }
      else
      {
        unint64_t v87 = qword_192DF6AD8[v79 - 1];
        unint64_t v88 = v83 + v83 * ((v87 * v81 - 1) / v83);
      }
      unint64_t v89 = v88 / v87;
      int v90 = v81 - 1;
      if ((int)v81 < 1) {
        int v90 = v81 + 2;
      }
      int v179 = (v90 >> 2) + 1;
      unsigned int v180 = v89 >> 2;
      int v91 = v77[5];
      v172[0] = v89;
      v172[3] = v80 * v81;
      int v173 = v82 * v80 * v81;
      int v174 = v173 * v91;
      if (v91 <= 1) {
        int v92 = 1;
      }
      else {
        int v92 = v91;
      }
      int v181 = v92;
      int v182 = v84;
      if (v78) {
        nitro::nitro_function::nitro_function(v78);
      }
      if (v34 < 3)
      {
        uint64_t v72 = 2;
        goto LABEL_139;
      }
      v145 += v144;
      HIDWORD(v195) = v145;
      uint64_t v93 = v33 + 2;
      uint64_t v94 = *a3 + 16 * (v33 + 2);
      unsigned int v96 = *(std::__shared_weak_count **)(v94 + 8);
      if (v96)
      {
        atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
        id v97 = v95[21];

        nitro::nitro_function::nitro_function(v96);
        id v149 = v97;
      }
      else
      {
        id v98 = v95[21];

        id v149 = v98;
      }
      uint64_t v99 = *a3;
      int v100 = *(const void **)(*a3 + 16 * v93);
      if (v100)
      {
        if (v101)
        {
          BOOL v102 = *(std::__shared_weak_count **)(v99 + 16 * v93 + 8);
          if (v102)
          {
            atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
            int v100 = *(const void **)(*a3 + 16 * v93);
          }
          goto LABEL_97;
        }
      }
      else
      {
        unsigned int v101 = 0;
      }
      BOOL v102 = 0;
LABEL_97:
      int v73 = v71;
      int v103 = (*(uint64_t (**)(const void *))(*(void *)v100 + 32))(v100);
      int v104 = v101[3];
      uint64_t v105 = v101[2];
      int v106 = v101[4];
      v161[1] = v101[2];
      v161[2] = v106 * v104;
      int v164 = v104;
      int v165 = v106;
      unint64_t v107 = *((void *)v101 + 31);
      int v167 = *((void *)v101 + 31);
      int v109 = v101[5];
      int v108 = v101[6];
      if (v109 <= 1) {
        int v109 = 1;
      }
      if (v108 <= 1) {
        int v110 = 1;
      }
      else {
        int v110 = v101[6];
      }
      int v166 = v110 * v109;
      if ((v103 - 1) >= 0xD)
      {
        unint64_t v112 = v107 + v107 * ((4 * v105 - 1) / v107);
        unint64_t v111 = 4;
      }
      else
      {
        unint64_t v111 = qword_192DF6AD8[v103 - 1];
        unint64_t v112 = v107 + v107 * ((v111 * v105 - 1) / v107);
      }
      unint64_t v113 = v112 / v111;
      int v114 = v105 - 1;
      if ((int)v105 < 1) {
        int v114 = v105 + 2;
      }
      int v168 = (v114 >> 2) + 1;
      unsigned int v169 = v113 >> 2;
      int v115 = v101[5];
      v161[0] = v113;
      v161[3] = v104 * v105;
      int v162 = v106 * v104 * v105;
      int v163 = v162 * v115;
      if (v115 <= 1) {
        int v116 = 1;
      }
      else {
        int v116 = v115;
      }
      int v170 = v116;
      int v171 = v108;
      if (v102) {
        nitro::nitro_function::nitro_function(v102);
      }
      if (v34 >= 4)
      {
        int v146 = v145 + v144;
        int v196 = v146;
        uint64_t v117 = v33 + 3;
        uint64_t v118 = *a3 + 16 * (v33 + 3);
        int v120 = *(std::__shared_weak_count **)(v118 + 8);
        if (v120)
        {
          atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
          id v121 = v119[21];

          nitro::nitro_function::nitro_function(v120);
          id v148 = v121;
        }
        else
        {
          id v122 = v119[21];

          id v148 = v122;
        }
        uint64_t v123 = *a3;
        unsigned int v124 = *(const void **)(*a3 + 16 * v117);
        if (v124)
        {
          if (v125)
          {
            int v126 = *(std::__shared_weak_count **)(v123 + 16 * v117 + 8);
            if (v126)
            {
              atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
              unsigned int v124 = *(const void **)(*a3 + 16 * v117);
            }
            goto LABEL_123;
          }
        }
        else
        {
          int v125 = 0;
        }
        int v126 = 0;
LABEL_123:
        int v73 = v71;
        int v127 = (*(uint64_t (**)(const void *))(*(void *)v124 + 32))(v124);
        int v128 = v125[3];
        uint64_t v129 = v125[2];
        int v130 = v125[4];
        v150[1] = v125[2];
        v150[2] = v130 * v128;
        int v153 = v128;
        int v154 = v130;
        unint64_t v131 = *((void *)v125 + 31);
        int v156 = *((void *)v125 + 31);
        int v133 = v125[5];
        int v132 = v125[6];
        if (v133 <= 1) {
          int v133 = 1;
        }
        if (v132 <= 1) {
          int v134 = 1;
        }
        else {
          int v134 = v125[6];
        }
        int v155 = v134 * v133;
        if ((v127 - 1) >= 0xD)
        {
          unint64_t v136 = v131 + v131 * ((4 * v129 - 1) / v131);
          unint64_t v135 = 4;
        }
        else
        {
          unint64_t v135 = qword_192DF6AD8[v127 - 1];
          unint64_t v136 = v131 + v131 * ((v135 * v129 - 1) / v131);
        }
        unint64_t v137 = v136 / v135;
        int v138 = v129 - 1;
        if ((int)v129 < 1) {
          int v138 = v129 + 2;
        }
        int v157 = (v138 >> 2) + 1;
        unsigned int v158 = v137 >> 2;
        int v139 = v125[5];
        v150[0] = v137;
        v150[3] = v128 * v129;
        int v151 = v130 * v128 * v129;
        int v152 = v151 * v139;
        if (v139 <= 1) {
          int v140 = 1;
        }
        else {
          int v140 = v139;
        }
        int v159 = v140;
        int v160 = v132;
        if (v126) {
          nitro::nitro_function::nitro_function(v126);
        }
        int v145 = v146 + v144;
        uint64_t v72 = 4;
        goto LABEL_139;
      }
      uint64_t v72 = 3;
LABEL_139:
      LODWORD(v194) = v72;
      if (!*(void *)(a1 + 336)) {
        Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
      }
      objc_msgSend(v14, "setComputePipelineState:");
      [v14 setBuffer:v142 offset:0 atIndex:0];
      [v14 setBuffer:v147 offset:0 atIndex:1];
      [v14 setBuffer:v73 offset:0 atIndex:2];
      [v14 setBuffer:v149 offset:0 atIndex:3];
      [v14 setBuffer:v148 offset:0 atIndex:4];
      [v14 setBytes:v197 length:56 atIndex:5];
      [v14 setBytes:v183 length:56 atIndex:6];
      [v14 setBytes:v172 length:56 atIndex:7];
      [v14 setBytes:v161 length:56 atIndex:8];
      [v14 setBytes:v150 length:56 atIndex:9];
      [v14 setBytes:&v194 length:20 atIndex:10];
      v33 += v72;
      v34 -= v72;

      if (!v34) {
        goto LABEL_141;
      }
    }
    int v50 = 0;
LABEL_44:
    int v51 = 0;
    goto LABEL_45;
  }
LABEL_141:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v210);
  if (v141) {
    nitro::nitro_function::nitro_function(v141);
  }
}

void sub_1927FBB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v14 - 104));
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::split_kernel::~split_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::MPSBuffersEngine::reduce_kernel::is_valid_for_engine(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 280);
  if (*(unsigned char *)(a1 + 320))
  {
    BOOL v2 = v1 >= 0xC;
    unsigned int v3 = 3587;
  }
  else
  {
    BOOL v2 = v1 >= 0xB;
    BOOL v5 = v1 == 11;
    int v4 = (1 << v1) & 0xE03;
    BOOL v5 = !v5 && v2 || v4 == 0;
    if (v5) {
      return 0;
    }
    unsigned int v1 = *(_DWORD *)(a1 + 288);
    BOOL v2 = v1 >= 0x11;
    unsigned int v3 = 65814;
  }
  unsigned int v6 = (v3 >> v1) & 1;
  if (v2) {
    return 0;
  }
  else {
    return v6;
  }
}

void Espresso::MPSBuffersEngine::reduce_kernel::on_resized(Espresso::MPSBuffersEngine::reduce_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  unsigned int v6 = (void *)*((void *)this + 41);
  *((void *)this + 41) = 0;

  uint64_t v7 = *(void *)a3;
  if (*((void *)a3 + 1) == *(void *)a3) {
    return;
  }
  uint64_t v8 = *(void *)a2;
  if (*((void *)a2 + 1) == *(void *)a2) {
    return;
  }
  *((unsigned char *)this + 464) = 0;
  if (!*(void *)v7)
  {
    unsigned int v9 = 0;
    goto LABEL_8;
  }
  if (!v9)
  {
LABEL_8:
    int v10 = 0;
    goto LABEL_9;
  }
  int v10 = *(std::__shared_weak_count **)(v7 + 8);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = *(void *)a2;
  }
LABEL_9:
  if (!*(void *)v8)
  {
    int v11 = 0;
    goto LABEL_14;
  }
  if (!v11)
  {
LABEL_14:
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v8 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_15:
  int v13 = (const void *)*((void *)this + 1);
  if (!v13
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v15 = v14;
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v9 || !v11) {
    goto LABEL_87;
  }
  if (*((unsigned char *)this + 320) || (unsigned int v17 = *((_DWORD *)this + 72), v17 > 0x10)) {
    LOBYTE(v18) = 0;
  }
  else {
    unsigned int v18 = (0x10116u >> v17) & 1;
  }
  *((unsigned char *)this + 464) = v18;
  int v82 = v12;
  unint64_t v83 = v10;
  Espresso::abstract_blob_container::shape((char *)&v96, (uint64_t)v9);
  Espresso::abstract_blob_container::shape(v87, (uint64_t)v9);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v94, (const Espresso::layer_shape *)v87, 0);
  if (__p)
  {
    uint64_t v93 = __p;
    operator delete(__p);
  }
  Espresso::layer_nd_shape::shape_vector(&v86, (uint64_t)v94);
  Espresso::abstract_blob_container::shape(v87, (uint64_t)v11);
  id v80 = v15[18];
  if (*((unsigned char *)this + 464))
  {
    int v19 = 0;
    int v20 = *((_DWORD *)this + 72);
    switch(v20)
    {
      case 2:
        int v19 = 1;
        goto LABEL_37;
      case 3:
      case 7:
        goto LABEL_100;
      case 4:
        int v19 = 2;
        goto LABEL_37;
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        goto LABEL_37;
      case 8:
        int v19 = 3;
        goto LABEL_37;
      case 16:
        int v19 = 4;
        goto LABEL_37;
      default:
        if (v20 != 31) {
          goto LABEL_37;
        }
LABEL_100:
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("Axis mode not implemented on mps buffers.");
    }
  }
  unint64_t v21 = *((_DWORD *)this + 79) + (v95 & (*((int *)this + 79) >> 31));
  if ((v21 & 0x80000000) != 0 || v21 >= v86.__end_ - v86.__begin_) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
  }
  int v19 = v95 + ~v21;
LABEL_37:
  int v22 = (*(uint64_t (**)(int *))(*(void *)v9 + 32))(v9);
  uint64_t v23 = v9[2];
  *((_DWORD *)this + 87) = v23;
  int v25 = v9[3];
  int v24 = v9[4];
  *((_DWORD *)this + 88) = v24 * v25;
  *((_DWORD *)this + 93) = v24;
  *((_DWORD *)this + 92) = v25;
  unint64_t v26 = *((void *)v9 + 31);
  *((_DWORD *)this + 95) = *((void *)v9 + 31);
  int v28 = v9[5];
  int v27 = v9[6];
  if (v28 <= 1) {
    int v28 = 1;
  }
  if (v27 <= 1) {
    int v29 = 1;
  }
  else {
    int v29 = v9[6];
  }
  *((_DWORD *)this + 94) = v29 * v28;
  if ((v22 - 1) >= 0xD)
  {
    unint64_t v31 = v26 + v26 * ((4 * v23 - 1) / v26);
    unint64_t v30 = 4;
  }
  else
  {
    unint64_t v30 = qword_192DF6AD8[v22 - 1];
    unint64_t v31 = v26 + v26 * ((v30 * v23 - 1) / v26);
  }
  unint64_t v32 = v31 / v30;
  *((_DWORD *)this + 86) = v32;
  int v33 = v23 - 1;
  if ((int)v23 < 1) {
    int v33 = v23 + 2;
  }
  *((_DWORD *)this + 96) = (v33 >> 2) + 1;
  *((_DWORD *)this + 97) = v32 >> 2;
  int v34 = v9[5];
  if (v34 <= 1) {
    int v35 = 1;
  }
  else {
    int v35 = v9[5];
  }
  *((_DWORD *)this + 98) = v35;
  int v36 = v25 * v23;
  *((_DWORD *)this + 89) = v36;
  int v37 = v24 * v36;
  *((_DWORD *)this + 90) = v37;
  *((_DWORD *)this + 91) = v37 * v34;
  *((_DWORD *)this + 99) = v27;
  int v38 = (*(uint64_t (**)(int *))(*(void *)v11 + 32))(v11);
  uint64_t v39 = v11[2];
  *((_DWORD *)this + 101) = v39;
  int v41 = v11[3];
  int v40 = v11[4];
  *((_DWORD *)this + 102) = v40 * v41;
  *((_DWORD *)this + 107) = v40;
  *((_DWORD *)this + 106) = v41;
  unint64_t v42 = *((void *)v11 + 31);
  *((_DWORD *)this + 109) = *((void *)v11 + 31);
  int v44 = v11[5];
  int v43 = v11[6];
  if (v44 <= 1) {
    int v44 = 1;
  }
  if (v43 <= 1) {
    int v45 = 1;
  }
  else {
    int v45 = v11[6];
  }
  *((_DWORD *)this + 108) = v45 * v44;
  if ((v38 - 1) >= 0xD)
  {
    unint64_t v47 = v42 + v42 * ((4 * v39 - 1) / v42);
    unint64_t v46 = 4;
  }
  else
  {
    unint64_t v46 = qword_192DF6AD8[v38 - 1];
    unint64_t v47 = v42 + v42 * ((v46 * v39 - 1) / v42);
  }
  unint64_t v48 = v47 / v46;
  *((_DWORD *)this + 100) = v48;
  int v49 = v39 - 1;
  if ((int)v39 < 1) {
    int v49 = v39 + 2;
  }
  *((_DWORD *)this + 110) = (v49 >> 2) + 1;
  *((_DWORD *)this + 111) = v48 >> 2;
  int v50 = v11[5];
  if (v50 <= 1) {
    int v51 = 1;
  }
  else {
    int v51 = v11[5];
  }
  *((_DWORD *)this + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112) = v51;
  int v52 = v41 * v39;
  *((_DWORD *)this + 103) = v52;
  int v53 = v40 * v52;
  *((_DWORD *)this + 104) = v53;
  *((_DWORD *)this + 105) = v53 * v50;
  *((_DWORD *)this + 113) = v43;
  *((_DWORD *)this + 114) = 0;
  switch(v19)
  {
    case 0:
      int v54 = v96;
      int v55 = v99 * v98 * v97 * v100;
      *((_DWORD *)this + 114) = 32 * v55;
      int v56 = v9[60];
      int v57 = v11[60];
      int v58 = 1;
      int v59 = 1;
      break;
    case 1:
      int v59 = v9[60];
      int v54 = v97;
      int v55 = v99 * v98 * v100;
      *((_DWORD *)this + 114) = 32 * v55 * v59;
      int v58 = *((_DWORD *)this + 86);
      int v56 = v59 * v54;
      int v57 = v88 * v11[60];
      break;
    case 2:
      int v64 = v9[60];
      int v65 = v97;
      int v54 = v98;
      int v55 = v100 * v99;
      *((_DWORD *)this + 114) = 32 * v100 * v99 * v64 * v97;
      int v66 = *((_DWORD *)this + 86);
      int v58 = *((_DWORD *)this + 92) * v66;
      int v56 = v64 * v54 * v65;
      int v59 = v66 * v65;
      int v57 = v88 * v11[60] * v89;
      break;
    case 3:
      int v54 = v99;
      int v55 = v100;
      int v67 = v98 * v97;
      int v68 = v98 * v97 * v9[60];
      *((_DWORD *)this + 114) = 32 * v68 * v100;
      int v69 = *((_DWORD *)this + 86);
      int v58 = *((_DWORD *)this + 88) * v69;
      int v59 = v67 * v69;
      int v56 = v68 * v54;
      int v57 = v88 * v11[60] * v89 * v90;
      break;
    case 4:
      int v60 = v9[60];
      int v61 = v99;
      int v54 = v100;
      int v62 = v98 * v97;
      *((_DWORD *)this + 114) = 32 * v98 * v97 * v99 * v60;
      int v63 = *((_DWORD *)this + 86);
      int v58 = *((_DWORD *)this + 88) * v63 * *((_DWORD *)this + 98);
      int v56 = v62 * v54 * v60 * v61;
      int v59 = v62 * v61 * v63;
      int v57 = v88 * v11[60] * v89 * v90 * v91;
      int v55 = 1;
      break;
    default:
      Espresso::throw_exception_selector<Espresso::generic_error>("axis not supported in reduce_kernel nd mode for mpsbuffers.");
  }
  std::string::basic_string[abi:ne180100]<0>(&v85, "");
  uint64_t v70 = *((unsigned int *)this + 70);
  if (v70 >= 0xC || ((0xE03u >> v70) & 1) == 0)
  {
    int v79 = "reduce mode not implemented in reduce_kernel";
    goto LABEL_96;
  }
  MEMORY[0x192FF0F50](&v85, off_1E5747190[v70]);
  int v71 = (*(uint64_t (**)(int *))(*(void *)v9 + 32))(v9);
  if (!v71)
  {
    uint64_t v72 = "_f32";
    goto LABEL_75;
  }
  if (v71 != 1)
  {
    int v79 = "compute path not supported for reduce in reduce_kernel";
LABEL_96:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>(v79);
  }
  uint64_t v72 = "_f16";
LABEL_75:
  std::string::append(&v85, v72);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v73 = &v85;
  }
  else {
    int v73 = (std::string *)v85.__r_.__value_.__r.__words[0];
  }
  uint64_t v74 = objc_msgSend(v15[20], "kernelForFunction:cacheString:withConstants:", v73, 0, 0, v80);
  uint64_t v75 = (void *)*((void *)this + 41);
  *((void *)this + 41) = v74;

  if (!*((void *)this + 41)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found");
  }
  v84[0] = v59;
  v84[1] = v56;
  _OWORD v84[2] = v58;
  v84[3] = v54;
  v84[4] = v55;
  v84[5] = v57;
  uint64_t v76 = [v81 newBufferWithBytes:v84 length:24 options:0];
  int v77 = (void *)*((void *)this + 42);
  *((void *)this + 42) = v76;

  uint64_t v12 = v82;
  int v10 = v83;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }

  if (__p)
  {
    uint64_t v93 = __p;
    operator delete(__p);
  }
  if (v86.__begin_)
  {
    v86.__end_ = v86.__begin_;
    operator delete(v86.__begin_);
  }
  if (v101)
  {
    BOOL v102 = v101;
    operator delete(v101);
  }
LABEL_87:
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927FC568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  int v33 = *(void **)(v31 - 112);
  if (v33)
  {
    *(void *)(v31 - 104) = v33;
    operator delete(v33);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::reduce_kernel::blob_options(Espresso::MPSBuffersEngine::reduce_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  int v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    int v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)int v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927FC804(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::reduce_kernel::__launch(Espresso::MPSBuffersEngine::reduce_kernel *this, uint64_t *a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  uint64_t v4 = *(void *)a4;
  if (*((void *)a4 + 1) == *(void *)a4) {
    return;
  }
  if (!*((void *)this + 41))
  {
    Espresso::MPSBuffersEngine::reduce_kernel::on_resized(this, a3, a4);
    if (!*((void *)this + 41)) {
      Espresso::throw_exception_selector<Espresso::generic_error>("reduce kernel not found");
    }
    uint64_t v4 = *(void *)a4;
  }
  if (!*(void *)v4)
  {
    unsigned int v9 = 0;
    goto LABEL_10;
  }
  if (!v9)
  {
LABEL_10:
    int v10 = 0;
    goto LABEL_11;
  }
  int v10 = *(std::__shared_weak_count **)(v4 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_11:
  uint64_t v11 = *(void *)a3;
  uint64_t v12 = **(const void ***)a3;
  if (v12)
  {
    if (v13)
    {
      uint64_t v14 = *(std::__shared_weak_count **)(v11 + 8);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_17;
    }
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = 0;
LABEL_17:
  id v15 = v9[21];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v76, *a2);
  id v16 = v76[0];
  id v17 = v13[21];
  int v18 = (*(uint64_t (**)(void))(***(void ***)a4 + 32))(**(void **)a4);
  int v19 = *((_DWORD *)v9 + 3);
  uint64_t v20 = *((int *)v9 + 2);
  int v21 = *((_DWORD *)v9 + 4);
  v65[1] = *((_DWORD *)v9 + 2);
  std::string v65[2] = v21 * v19;
  int v68 = v19;
  int v69 = v21;
  unint64_t v22 = v9[31];
  unsigned int v71 = v9[31];
  int v23 = *((_DWORD *)v9 + 5);
  int v24 = *((_DWORD *)v9 + 6);
  if (v23 <= 1) {
    int v25 = 1;
  }
  else {
    int v25 = *((_DWORD *)v9 + 5);
  }
  if (v24 <= 1) {
    int v26 = 1;
  }
  else {
    int v26 = *((_DWORD *)v9 + 6);
  }
  int v70 = v26 * v25;
  if ((v18 - 1) >= 0xD)
  {
    unint64_t v28 = v22 + v22 * ((4 * v20 - 1) / v22);
    unint64_t v27 = 4;
  }
  else
  {
    unint64_t v27 = qword_192DF6AD8[v18 - 1];
    unint64_t v28 = v22 + v22 * ((v27 * v20 - 1) / v22);
  }
  unint64_t v29 = v28 / v27;
  int v30 = v20 - 1;
  if ((int)v20 < 1) {
    int v30 = v20 + 2;
  }
  int v72 = (v30 >> 2) + 1;
  unsigned int v73 = v29 >> 2;
  v65[0] = v29;
  void v65[3] = v19 * v20;
  int v66 = v21 * v19 * v20;
  int v67 = v66 * v23;
  int v74 = v25;
  int v75 = v24;
  int v31 = (*(uint64_t (**)(void))(***(void ***)a3 + 32))(**(void **)a3);
  int v32 = *((_DWORD *)v13 + 3);
  uint64_t v33 = *((int *)v13 + 2);
  int v34 = *((_DWORD *)v13 + 4);
  v54[1] = *((_DWORD *)v13 + 2);
  v54[2] = v34 * v32;
  int v57 = v32;
  int v58 = v34;
  unint64_t v35 = v13[31];
  unsigned int v60 = v13[31];
  int v36 = *((_DWORD *)v13 + 5);
  int v37 = *((_DWORD *)v13 + 6);
  if (v36 <= 1) {
    int v38 = 1;
  }
  else {
    int v38 = *((_DWORD *)v13 + 5);
  }
  if (v37 <= 1) {
    int v39 = 1;
  }
  else {
    int v39 = *((_DWORD *)v13 + 6);
  }
  int v59 = v39 * v38;
  if ((v31 - 1) >= 0xD)
  {
    unint64_t v41 = v35 + v35 * ((4 * v33 - 1) / v35);
    unint64_t v40 = 4;
  }
  else
  {
    unint64_t v40 = qword_192DF6AD8[v31 - 1];
    unint64_t v41 = v35 + v35 * ((v40 * v33 - 1) / v35);
  }
  unint64_t v42 = v41 / v40;
  int v43 = v33 - 1;
  if ((int)v33 < 1) {
    int v43 = v33 + 2;
  }
  int v61 = (v43 >> 2) + 1;
  unsigned int v62 = v42 >> 2;
  v54[0] = v42;
  void v54[3] = v32 * v33;
  int v55 = v34 * v32 * v33;
  int v56 = v55 * v36;
  int v63 = v38;
  int v64 = v37;
  [v16 setComputePipelineState:*((void *)this + 41)];
  int v44 = *((_DWORD *)this + 114);
  int v46 = v44 - 1;
  BOOL v45 = v44 < 1;
  int v47 = v44 + 254;
  if (v45) {
    int v48 = v47;
  }
  else {
    int v48 = v46;
  }
  [v16 setComputePipelineState:*((void *)this + 41)];
  [v16 setBuffer:v15 offset:0 atIndex:0];
  [v16 setBuffer:v17 offset:0 atIndex:1];
  [v16 setBytes:v65 length:56 atIndex:2];
  [v16 setBytes:v54 length:56 atIndex:3];
  [v16 setBuffer:*((void *)this + 42) offset:0 atIndex:4];
  [v16 setThreadgroupMemoryLength:1024 atIndex:0];
  if (*((_DWORD *)this + 70) == 11) {
    uint64_t v49 = 1024;
  }
  else {
    uint64_t v49 = 16;
  }
  [v16 setThreadgroupMemoryLength:v49 atIndex:1];
  uint64_t v52 = (v48 >> 8) + 1;
  int64x2_t v53 = vdupq_n_s64(1uLL);
  long long v50 = xmmword_192DCA500;
  uint64_t v51 = 1;
  [v16 dispatchThreadgroups:&v52 threadsPerThreadgroup:&v50];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v76);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927FCCB4(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::reduce_kernel::~reduce_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::MPSBuffersEngine::general_padding_kernel::on_resized(Espresso::MPSBuffersEngine::general_padding_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  unsigned int v6 = (void *)*((void *)this + 61);
  *((void *)this + 61) = 0;

  uint64_t v7 = (void *)*((void *)this + 64);
  *((void *)this + 64) = 0;

  uint64_t v8 = (void *)*((void *)this + 62);
  *((void *)this + 62) = 0;

  unsigned int v9 = (void *)*((void *)this + 63);
  *((void *)this + 63) = 0;

  uint64_t v10 = *((void *)this + 1);
  id v11 = *(id *)(v10 + 144);
  std::string::basic_string[abi:ne180100]<0>(v69, "");
  int v12 = *((_DWORD *)this + 130);
  if (v12)
  {
    if (v12 != 1) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("MPS Buffers Engine supports FP16, FP32 compute paths.");
    }
    int v13 = "fp16";
  }
  else
  {
    int v13 = "fp32";
  }
  MEMORY[0x192FF0F50](v69, v13);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v68 = 0;
  int v14 = *((unsigned __int16 *)this + 141);
  if (*((_WORD *)this + 141) && v14 != 2 && v14 != 1) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown mode selected in general_padding kernel.");
  }
  std::operator+<char>();
  if (SHIBYTE(v68) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v65;
  uint64_t v68 = v66;
  if (v66 >= 0) {
    id v15 = __p;
  }
  else {
    id v15 = (void **)v65;
  }
  uint64_t v16 = [*(id *)(v10 + 160) kernelForFunction:v15 cacheString:0 withConstants:0];
  id v17 = (void *)*((void *)this + 61);
  *((void *)this + 61) = v16;

  uint64_t v18 = *(void *)a2;
  if (!*(void *)v18)
  {
    int v19 = 0;
    goto LABEL_18;
  }
  if (!v19)
  {
LABEL_18:
    uint64_t v20 = 0;
    goto LABEL_19;
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v18 + 8);
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  uint64_t v21 = *(void *)a3;
  if (!*(void *)v21)
  {
    unint64_t v22 = 0;
    goto LABEL_24;
  }
  if (!v22)
  {
LABEL_24:
    int v23 = 0;
    goto LABEL_25;
  }
  int v23 = *(std::__shared_weak_count **)(v21 + 8);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_25:
  int v24 = (*(uint64_t (**)(int *))(*(void *)v22 + 32))(v22);
  uint64_t v25 = v22[2];
  *((_DWORD *)this + 90) = v25;
  int v27 = v22[3];
  int v26 = v22[4];
  *((_DWORD *)this + 91) = v26 * v27;
  *((_DWORD *)this + 96) = v26;
  *((_DWORD *)this + 95) = v27;
  unint64_t v28 = *((void *)v22 + 31);
  *((_DWORD *)this + 98) = *((void *)v22 + 31);
  int v30 = v22[5];
  int v29 = v22[6];
  if (v30 <= 1) {
    int v30 = 1;
  }
  if (v29 <= 1) {
    int v31 = 1;
  }
  else {
    int v31 = v22[6];
  }
  *((_DWORD *)this + 97) = v31 * v30;
  if ((v24 - 1) >= 0xD)
  {
    unint64_t v33 = v28 + v28 * ((4 * v25 - 1) / v28);
    unint64_t v32 = 4;
  }
  else
  {
    unint64_t v32 = qword_192DF6AD8[v24 - 1];
    unint64_t v33 = v28 + v28 * ((v32 * v25 - 1) / v28);
  }
  unint64_t v34 = v33 / v32;
  *((_DWORD *)this + 89) = v34;
  int v35 = v25 - 1;
  if ((int)v25 < 1) {
    int v35 = v25 + 2;
  }
  *((_DWORD *)this + 99) = (v35 >> 2) + 1;
  *((_DWORD *)this + 100) = v34 >> 2;
  int v36 = v22[5];
  if (v36 <= 1) {
    int v37 = 1;
  }
  else {
    int v37 = v22[5];
  }
  *((_DWORD *)this + 101) = v37;
  int v38 = v27 * v25;
  *((_DWORD *)this + 92) = v38;
  int v39 = v26 * v38;
  *((_DWORD *)this + 93) = v39;
  *((_DWORD *)this + 94) = v39 * v36;
  *((_DWORD *)this + 102) = v29;
  int v40 = (*(uint64_t (**)(int *))(*(void *)v19 + 32))(v19);
  uint64_t v41 = v19[2];
  *((_DWORD *)this + 104) = v41;
  int v43 = v19[3];
  int v42 = v19[4];
  *((_DWORD *)this + 105) = v42 * v43;
  *((_DWORD *)this + 110) = v42;
  *((_DWORD *)this + 109) = v43;
  unint64_t v44 = *((void *)v19 + 31);
  *((_DWORD *)this + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112) = *((void *)v19 + 31);
  int v46 = v19[5];
  int v45 = v19[6];
  if (v46 <= 1) {
    int v46 = 1;
  }
  if (v45 <= 1) {
    int v47 = 1;
  }
  else {
    int v47 = v19[6];
  }
  *((_DWORD *)this + 111) = v47 * v46;
  if ((v40 - 1) >= 0xD)
  {
    unint64_t v49 = v44 + v44 * ((4 * v41 - 1) / v44);
    unint64_t v48 = 4;
  }
  else
  {
    unint64_t v48 = qword_192DF6AD8[v40 - 1];
    unint64_t v49 = v44 + v44 * ((v48 * v41 - 1) / v44);
  }
  unint64_t v50 = v49 / v48;
  *((_DWORD *)this + 103) = v50;
  int v51 = v41 - 1;
  if ((int)v41 < 1) {
    int v51 = v41 + 2;
  }
  *((_DWORD *)this + 113) = (v51 >> 2) + 1;
  *((_DWORD *)this + 114) = v50 >> 2;
  int v52 = v19[5];
  if (v52 <= 1) {
    int v53 = 1;
  }
  else {
    int v53 = v19[5];
  }
  *((_DWORD *)this + 115) = v53;
  int v54 = v43 * v41;
  *((_DWORD *)this + 106) = v54;
  int v55 = v42 * v54;
  *((_DWORD *)this + 107) = v55;
  *((_DWORD *)this + 108) = v55 * v52;
  *((_DWORD *)this + 116) = v45;
  uint64_t v56 = [v11 newBufferWithBytes:(char *)this + 356 length:56 options:0];
  int v57 = (void *)*((void *)this + 62);
  *((void *)this + 62) = v56;

  uint64_t v58 = [v11 newBufferWithBytes:(char *)this + 412 length:56 options:0];
  int v59 = (void *)*((void *)this + 63);
  *((void *)this + 63) = v58;

  int32x4_t v60 = vmovl_s16(*(int16x4_t *)((char *)this + 288));
  int32x4_t v61 = vrev64q_s32(v60);
  v61.i64[0] = v60.i64[0];
  *(int32x4_t *)((char *)this + 468) = v61;
  *((_DWORD *)this + 121) = *((_DWORD *)this + 71);
  uint64_t v62 = objc_msgSend(v11, "newBufferWithBytes:length:options:");
  int v63 = (void *)*((void *)this + 64);
  *((void *)this + 64) = v62;

  if (!*((void *)this + 64))
  {
    int v64 = "padding params buffer is nil";
    goto LABEL_66;
  }
  if (!*((void *)this + 62))
  {
    int v64 = "pb_src buffer is nil.";
    goto LABEL_66;
  }
  if (!*((void *)this + 63))
  {
    int v64 = "pb_dst buffer is nil.";
LABEL_66:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v64);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(__p[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
}

void sub_1927FD30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::general_padding_kernel::__launch(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = **a3;
  if (v8)
  {
    if (v9)
    {
      uint64_t v10 = (std::__shared_weak_count *)v7[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unsigned int v9 = 0;
  }
  uint64_t v11 = *a4;
  if (!*(void *)v11)
  {
    int v12 = 0;
    goto LABEL_12;
  }
  if (!v12)
  {
LABEL_12:
    int v13 = 0;
    goto LABEL_13;
  }
  int v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  int v14 = v9[6];
  if (v14 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v14;
  }
  if (!a1[61]) {
    Espresso::throw_exception_selector<Espresso::generic_error>("kernel not found in MPSBuffersEngine::general_padding_kernel!");
  }
  uint64_t v16 = v9[5];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v29, *a2);
  id v17 = v29[0];
  [v17 setComputePipelineState:a1[61]];
  [v17 setBuffer:v12[21] offset:0 atIndex:0];
  [v17 setBuffer:*((void *)v9 + 21) offset:0 atIndex:1];
  [v17 setBuffer:a1[62] offset:0 atIndex:2];
  [v17 setBuffer:a1[63] offset:0 atIndex:3];
  [v17 setBuffer:a1[64] offset:0 atIndex:4];
  int v18 = v9[2];
  int v20 = v18 - 1;
  BOOL v19 = v18 < 1;
  int v21 = v18 + 6;
  if (!v19) {
    int v21 = v20;
  }
  uint64_t v22 = (v21 >> 3) + 1;
  int v23 = v9[4] * v9[3];
  int v24 = v23 - 1;
  BOOL v19 = v23 < 1;
  int v25 = v23 + 6;
  if (!v19) {
    int v25 = v24;
  }
  v28[0] = v22;
  v28[1] = (v25 >> 3) + 1;
  uint64_t v28[2] = v15 * v16;
  int64x2_t v26 = vdupq_n_s64(8uLL);
  uint64_t v27 = 1;
  [v17 dispatchThreadgroups:v28 threadsPerThreadgroup:&v26];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v29);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927FD5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::general_padding_kernel::~general_padding_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::MPSBuffersEngine::transpose_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSBuffersEngine::transpose_kernel::on_resized(uint64_t a1, std::__shared_weak_count ***a2, uint64_t *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 300) = 0;
  unsigned int v6 = *(void **)(a1 + 464);
  *(void *)(a1 + 464) = 0;

  uint64_t v7 = *a3;
  if (a3[1] == *a3 {
    || !*(void *)v7
  }
  {
    return;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v9 = *(const void **)(a1 + 8);
  if (!v9
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = *(_DWORD *)(a1 + 376);
  if (v12 == 1)
  {
    int v13 = @"strided_copy_kernel_fp16";
    goto LABEL_14;
  }
  if (!v12)
  {
    int v13 = @"strided_copy_kernel_fp32";
LABEL_14:
    uint64_t v14 = Espresso::context_metal::kernel_for_function(v10, &v13->isa);
    uint64_t v15 = *(void **)(a1 + 464);
    *(void *)(a1 + 464) = v14;
  }
  if (!*(void *)(a1 + 464)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to find kernel in transpose mps buffers.");
  }
  uint64_t v16 = *a3;
  if (*(void *)v16)
  {
    if (v17)
    {
      int v18 = *(std::__shared_weak_count **)(v16 + 8);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v18 = 0;
    }
  }
  else
  {
    int v18 = 0;
    id v17 = 0;
  }
  BOOL v19 = *a2;
  int v20 = *v19;
  if (*v19)
  {
    int v21 = v20;
    if (v20)
    {
      int v20 = v19[1];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
  }
  else
  {
    int v21 = 0;
  }
  int v22 = *((_DWORD *)v17 + 2);
  int v23 = *((_DWORD *)v17 + 3);
  int v24 = *((_DWORD *)v17 + 4);
  int32x2_t v25 = vmax_s32(*(int32x2_t *)(v17 + 20), (int32x2_t)0x100000001);
  unsigned int v26 = *(_DWORD *)(a1 + 376) - 1;
  if (v26 >= 0xD)
  {
    unint64_t v28 = *((void *)v17 + 31) + *((void *)v17 + 31) * ((unint64_t)(4 * v22 - 1) / *((void *)v17 + 31));
    unint64_t v27 = 4;
  }
  else
  {
    unint64_t v27 = qword_192DF6AD8[v26];
    unint64_t v28 = *((void *)v17 + 31) + *((void *)v17 + 31) * ((v27 * v22 - 1) / *((void *)v17 + 31));
  }
  unint64_t v29 = v28 / v27;
  int v30 = v23 * v29 * v24;
  *(_DWORD *)(a1 + 380) = v22;
  *(_DWORD *)(a1 + 384) = v23;
  *(_DWORD *)(a1 + 388) = v24;
  *(int32x2_t *)(a1 + 392) = v25;
  *(_DWORD *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 404) = v29;
  *(_DWORD *)(a1 + 408) = v23 * v29;
  *(_DWORD *)(a1 + 412) = v30;
  *(_DWORD *)(a1 + 416) = v30 * v25.i32[0];
  int shared_owners_high = HIDWORD(v21->__shared_owners_);
  uint64_t shared_owners_low = SLODWORD(v21->__shared_owners_);
  int shared_weak_owners = v21->__shared_weak_owners_;
  int shared_weak_owners_high = HIDWORD(v21->__shared_weak_owners_);
  if (shared_weak_owners_high <= 1) {
    int shared_weak_owners_high = 1;
  }
  if (v26 >= 0xD)
  {
    unint64_t v36 = v21[10].__shared_owners_
        + v21[10].__shared_owners_ * ((unint64_t)(4 * shared_owners_low - 1) / v21[10].__shared_owners_);
    unint64_t v35 = 4;
  }
  else
  {
    unint64_t v35 = qword_192DF6AD8[v26];
    unint64_t v36 = v21[10].__shared_owners_
        + v21[10].__shared_owners_ * ((v35 * shared_owners_low - 1) / v21[10].__shared_owners_);
  }
  unint64_t v37 = v36 / v35;
  int v38 = shared_owners_high * v37 * shared_weak_owners;
  long long v40 = 0uLL;
  int v41 = 0;
  *((_DWORD *)&v40 + *(int *)(a1 + 280)) = 1;
  *((_DWORD *)&v40 + *(int *)(a1 + 28std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*((void **)this + 4)) = v37;
  *((_DWORD *)&v40 + *(int *)(a1 + 288)) = shared_owners_high * v37;
  *((_DWORD *)&v40 + *(int *)(a1 + 292)) = v38;
  *((_DWORD *)&v40 + *(int *)(a1 + 296)) = v38 * shared_weak_owners_high;
  LODWORD(v37) = v41;
  *(_DWORD *)(a1 + 436) = 0;
  *(void *)(a1 + 428) = 0;
  *(void *)(a1 + 420) = 0;
  *(_OWORD *)(a1 + 440) = v40;
  *(_DWORD *)(a1 + 456) = v37;
  *(unsigned char *)(a1 + 300) = 1;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1927FDB8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::transpose_kernel::blob_options(Espresso::MPSBuffersEngine::transpose_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927FDD38(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::transpose_kernel::__launch(uint64_t a1, uint64_t *a2, std::__shared_weak_count ***a3, uint64_t *a4)
{
  if (a4[1] == *a4) {
    return;
  }
  if (!*(unsigned char *)(a1 + 300)) {
    Espresso::MPSBuffersEngine::transpose_kernel::on_resized(a1, a3, a4);
  }
  if (!*(void *)(a1 + 464)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
  }
  if (!*(unsigned char *)(a1 + 300)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to make transpose kernel ready");
  }
  uint64_t v8 = *a4;
  if (*(void *)v8)
  {
    if (v9)
    {
      uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unsigned int v9 = 0;
  }
  uint64_t v11 = *a3;
  if (*v11)
  {
    if (v12)
    {
      int v13 = v11[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  int v13 = 0;
LABEL_18:
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v16, *a2);
  id v14 = v16[0];
  [v14 setComputePipelineState:*(void *)(a1 + 464)];
  [v14 setBuffer:*((void *)v9 + 21) offset:0 atIndex:0];
  [v14 setBuffer:v12[21] offset:0 atIndex:1];
  [v14 setBytes:a1 + 380 length:40 atIndex:2];
  [v14 setBytes:a1 + 420 length:40 atIndex:3];
  if (*((int *)v9 + 6) <= 1) {
    int v15 = 1;
  }
  else {
    int v15 = *((_DWORD *)v9 + 6);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v16);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927FDF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::transpose_kernel::~transpose_kernel(id *this)
{
  id v2 = this[44];
  if (v2)
  {
    this[45] = v2;
    operator delete(v2);
  }
  id v3 = this[41];
  if (v3)
  {
    this[42] = v3;
    operator delete(v3);
  }
  id v4 = this[38];
  if (v4)
  {
    this[39] = v4;
    operator delete(v4);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  id v2;
  id v3;
  id v4;
  uint64_t vars8;

  id v2 = this[44];
  if (v2)
  {
    this[45] = v2;
    operator delete(v2);
  }
  id v3 = this[41];
  if (v3)
  {
    this[42] = v3;
    operator delete(v3);
  }
  id v4 = this[38];
  if (v4)
  {
    this[39] = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

const char *Espresso::generic_squeeze_kernel::kernel_type_str(Espresso::generic_squeeze_kernel *this)
{
  return "squeeze";
}

uint64_t Espresso::MPSBuffersEngine::squeeze_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSBuffersEngine::squeeze_kernel::on_resized(Espresso::MPSBuffersEngine::squeeze_kernel *this, void ***a2, const void ***a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = (const void *)*((void *)this + 1);
  if (!v4
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = *((_DWORD *)this + 126);
  if (v9 == 1)
  {
    uint64_t v10 = Espresso::context_metal::kernel_for_function(v7, &cfstr_StridedCopyKer_0.isa);
  }
  else
  {
    if (v9) {
      goto LABEL_10;
    }
    uint64_t v10 = Espresso::context_metal::kernel_for_function(v7, &cfstr_StridedCopyKer.isa);
  }
  uint64_t v11 = (void *)*((void *)this + 64);
  *((void *)this + 64) = v10;

LABEL_10:
  if (!*((void *)this + 64)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
  }
  uint64_t v12 = *a3;
  int v13 = **a3;
  if (v13)
  {
    if (v14)
    {
      int v15 = (std::__shared_weak_count *)v12[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v15 = 0;
    }
  }
  else
  {
    int v15 = 0;
    id v14 = 0;
  }
  uint64_t v16 = *a2;
  id v17 = (int *)**a2;
  if (v17
  {
    int v18 = (std::__shared_weak_count *)v16[1];
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v18 = 0;
  }
  int v19 = *((_DWORD *)v14 + 2);
  int v20 = *((_DWORD *)v14 + 3);
  int v21 = *((_DWORD *)v14 + 4);
  int32x2_t v22 = vmax_s32(*(int32x2_t *)(v14 + 20), (int32x2_t)0x100000001);
  unsigned int v23 = *((_DWORD *)this + 126) - 1;
  if (v23 >= 0xD)
  {
    unint64_t v25 = *((void *)v14 + 31) + *((void *)v14 + 31) * ((unint64_t)(4 * v19 - 1) / *((void *)v14 + 31));
    unint64_t v24 = 4;
  }
  else
  {
    unint64_t v24 = qword_192DF6AD8[v23];
    unint64_t v25 = *((void *)v14 + 31) + *((void *)v14 + 31) * ((v24 * v19 - 1) / *((void *)v14 + 31));
  }
  unint64_t v26 = v25 / v24;
  int v27 = v20 * v26 * v21;
  *((_DWORD *)this + 106) = v19;
  *((_DWORD *)this + 107) = v20;
  *((_DWORD *)this + 108) = v21;
  *(int32x2_t *)((char *)this + 436) = v22;
  *((_DWORD *)this + 111) = 1;
  *((_DWORD *)this + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112) = v26;
  *((_DWORD *)this + 113) = v20 * v26;
  *((_DWORD *)this + 114) = v27;
  *((_DWORD *)this + 115) = v27 * v22.i32[0];
  uint64_t v28 = v17[2];
  if (v17[5] <= 1) {
    int v29 = 1;
  }
  else {
    int v29 = v17[5];
  }
  if (v23 >= 0xD)
  {
    unint64_t v31 = *((void *)v17 + 31) + *((void *)v17 + 31) * ((unint64_t)(4 * v28 - 1) / *((void *)v17 + 31));
    unint64_t v30 = 4;
  }
  else
  {
    unint64_t v30 = qword_192DF6AD8[v23];
    unint64_t v31 = *((void *)v17 + 31) + *((void *)v17 + 31) * ((v30 * v28 - 1) / *((void *)v17 + 31));
  }
  int v33 = v17[3];
  int v32 = v17[4];
  long long v57 = *(_OWORD *)((char *)this + 424);
  __int32 v58 = v22.i32[1];
  Espresso::abstract_blob_container::shape((char *)&v50, (uint64_t)v14);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v46, (const Espresso::layer_shape *)&v50, 0);
  if (__p)
  {
    uint64_t v56 = __p;
    operator delete(__p);
  }
  int v34 = v47;
  char v45 = 0;
  int v44 = 0;
  if (*((unsigned char *)this + 416))
  {
    char v45 = 1;
    int v44 = 16843009;
  }
  else
  {
    uint64_t v35 = *((unsigned int *)this + 71);
    if (v35)
    {
      if (v35 > 5) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("too many axes");
      }
      unint64_t v36 = (int *)((char *)this + 288);
      unint64_t v37 = "duplicate axis";
      while (1)
      {
        int v38 = *v36++;
        int v39 = v34 + ~((v34 & (v38 >> 31)) + v38);
        if (*((unsigned char *)&v44 + v39)) {
          goto LABEL_57;
        }
        if (*((_DWORD *)&v57 + v39) != 1) {
          break;
        }
        *((unsigned char *)&v44 + v39) = 1;
        if (!--v35) {
          goto LABEL_43;
        }
      }
      unint64_t v37 = "axis dimension must be one";
LABEL_57:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v37);
    }
    *((unsigned char *)&v44 + v47 + ~((v47 & (*((int *)this + 70) >> 31)) + *((_DWORD *)this + 70))) = 1;
  }
LABEL_43:
  uint64_t v40 = 0;
  uint64_t v41 = 1;
  int v50 = 1;
  int v51 = v31 / v30;
  int v52 = v33 * v51;
  int v53 = v33 * v51 * v32;
  int v54 = v53 * v29;
  long long v49 = 0uLL;
  do
  {
    if (*((_DWORD *)&v57 + v40) == 1 && *((unsigned char *)&v44 + v40))
    {
      uint64_t v42 = v41;
      LODWORD(v41) = v41 - 1;
    }
    else
    {
      uint64_t v42 = (v41 + 1);
    }
    *(_DWORD *)&v48[4 * v40++ + 4] = *(&v50 + (int)v41);
    uint64_t v41 = v42;
  }
  while (v40 != 4);
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0x100000000;
  *(_OWORD *)((char *)this + 488) = v49;
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1927FE5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (v24)
  {
    nitro::nitro_function::nitro_function(v24);
    if (!v23) {
      goto LABEL_7;
    }
  }
  else if (!v23)
  {
LABEL_7:
    if (a9) {
      nitro::nitro_function::nitro_function(a9);
    }
    _Unwind_Resume(exception_object);
  }
  nitro::nitro_function::nitro_function(v23);
  goto LABEL_7;
}

void Espresso::MPSBuffersEngine::squeeze_kernel::blob_options(Espresso::MPSBuffersEngine::squeeze_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  id v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927FE7D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::squeeze_kernel::__launch(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (!a1[64])
  {
    (*(void (**)(void *, uint64_t *, uint64_t *))(*a1 + 80))(a1, a3, a4);
    if (!a1[64]) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
    }
  }
  uint64_t v8 = *a4;
  if (*(void *)v8)
  {
    if (v9)
    {
      uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    int v9 = 0;
  }
  uint64_t v11 = *a3;
  if (!*(void *)v11)
  {
    uint64_t v12 = 0;
    goto LABEL_14;
  }
  if (!v12)
  {
LABEL_14:
    int v13 = 0;
    goto LABEL_15;
  }
  int v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_15:
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v16, *a2);
  id v14 = v16[0];
  [v14 setComputePipelineState:a1[64]];
  [v14 setBuffer:*((void *)v9 + 21) offset:0 atIndex:0];
  [v14 setBuffer:v12[21] offset:0 atIndex:1];
  [v14 setBytes:a1 + 53 length:40 atIndex:2];
  [v14 setBytes:a1 + 58 length:40 atIndex:3];
  if (*((int *)v9 + 6) <= 1) {
    int v15 = 1;
  }
  else {
    int v15 = *((_DWORD *)v9 + 6);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v16);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927FEA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::squeeze_kernel::~squeeze_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

const char *Espresso::generic_expand_dims_kernel::kernel_type_str(Espresso::generic_expand_dims_kernel *this)
{
  return "expand_dims";
}

uint64_t Espresso::MPSBuffersEngine::expand_dims_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSBuffersEngine::expand_dims_kernel::on_resized(Espresso::MPSBuffersEngine::expand_dims_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v4 = (const void *)*((void *)this + 1);
  if (!v4
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = *((_DWORD *)this + 124);
  if (v9 == 1)
  {
    uint64_t v10 = Espresso::context_metal::kernel_for_function(v7, &cfstr_StridedCopyKer_0.isa);
  }
  else
  {
    if (v9) {
      goto LABEL_10;
    }
    uint64_t v10 = Espresso::context_metal::kernel_for_function(v7, &cfstr_StridedCopyKer.isa);
  }
  uint64_t v11 = (void *)*((void *)this + 63);
  *((void *)this + 63) = v10;

LABEL_10:
  if (!*((void *)this + 63)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
  }
  uint64_t v12 = *(void *)a3;
  if (*(void *)v12)
  {
    if (v13)
    {
      id v14 = *(std::__shared_weak_count **)(v12 + 8);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      id v14 = 0;
    }
  }
  else
  {
    id v14 = 0;
    int v13 = 0;
  }
  uint64_t v15 = *(void *)a2;
  if (*(void *)v15)
  {
    if (v16)
    {
      id v17 = *(std::__shared_weak_count **)(v15 + 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      id v17 = 0;
    }
  }
  else
  {
    id v17 = 0;
    uint64_t v16 = 0;
  }
  int v18 = *((_DWORD *)v13 + 2);
  int v19 = *((_DWORD *)v13 + 3);
  int v20 = *((_DWORD *)v13 + 4);
  int32x2_t v21 = vmax_s32(*(int32x2_t *)(v13 + 20), (int32x2_t)0x100000001);
  unsigned int v22 = *((_DWORD *)this + 124) - 1;
  if (v22 >= 0xD)
  {
    unint64_t v24 = *((void *)v13 + 31) + *((void *)v13 + 31) * ((unint64_t)(4 * v18 - 1) / *((void *)v13 + 31));
    unint64_t v23 = 4;
  }
  else
  {
    unint64_t v23 = qword_192DF6AD8[v22];
    unint64_t v24 = *((void *)v13 + 31) + *((void *)v13 + 31) * ((v23 * v18 - 1) / *((void *)v13 + 31));
  }
  unint64_t v25 = v24 / v23;
  int v26 = v19 * v25 * v20;
  *((_DWORD *)this + 104) = v18;
  *((_DWORD *)this + 105) = v19;
  *((_DWORD *)this + 106) = v20;
  *(int32x2_t *)((char *)this + 428) = v21;
  *((_DWORD *)this + 109) = 1;
  *((_DWORD *)this + 110) = v25;
  *((_DWORD *)this + 111) = v19 * v25;
  *((_DWORD *)this + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112) = v26;
  *((_DWORD *)this + 113) = v26 * v21.i32[0];
  int v27 = *((_DWORD *)v16 + 2);
  int v28 = *((_DWORD *)v16 + 3);
  int v29 = *((_DWORD *)v16 + 4);
  int32x2_t v30 = vmax_s32(*(int32x2_t *)(v16 + 20), (int32x2_t)0x100000001);
  __int32 v43 = v30.i32[0];
  if (v22 >= 0xD)
  {
    unint64_t v32 = *((void *)v16 + 31) + *((void *)v16 + 31) * ((unint64_t)(4 * v27 - 1) / *((void *)v16 + 31));
    unint64_t v31 = 4;
  }
  else
  {
    unint64_t v31 = qword_192DF6AD8[v22];
    unint64_t v32 = *((void *)v16 + 31) + *((void *)v16 + 31) * ((v31 * v27 - 1) / *((void *)v16 + 31));
  }
  v57[0] = *((_DWORD *)v16 + 2);
  v57[1] = v28;
  uint64_t v57[2] = v29;
  int32x2_t v58 = v30;
  Espresso::abstract_blob_container::shape((char *)&v50, (uint64_t)v16);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v46, (const Espresso::layer_shape *)&v50, 0);
  if (__p)
  {
    uint64_t v56 = __p;
    operator delete(__p);
  }
  int v33 = v47;
  char v45 = 0;
  int v44 = 0;
  uint64_t v34 = *((unsigned int *)this + 71);
  if (v34)
  {
    if (v34 > 5) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("too many axes");
    }
    uint64_t v35 = (int *)((char *)this + 288);
    unint64_t v36 = "duplicate axis";
    while (1)
    {
      int v37 = *v35++;
      int v38 = v33 + ~((v33 & (v37 >> 31)) + v37);
      if (*((unsigned char *)&v44 + v38)) {
        goto LABEL_51;
      }
      if (v57[v38] != 1) {
        break;
      }
      *((unsigned char *)&v44 + v38) = 1;
      if (!--v34) {
        goto LABEL_39;
      }
    }
    unint64_t v36 = "axis dimension must be one";
LABEL_51:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v36);
  }
  *((unsigned char *)&v44 + v47 + ~((v47 & (*((int *)this + 70) >> 31)) + *((_DWORD *)this + 70))) = 1;
LABEL_39:
  uint64_t v39 = 0;
  int v40 = 0;
  int v50 = 1;
  int v51 = v32 / v31;
  int v52 = v28 * v51;
  int v53 = v28 * v51 * v29;
  int v54 = v53 * v43;
  long long v48 = 0uLL;
  int v49 = 0;
  do
  {
    if (!*((unsigned char *)&v44 + v39)) {
      *((_DWORD *)&v48 + v40++) = *(&v50 + v39);
    }
    ++v39;
  }
  while (v39 != 5);
  int v41 = v49;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((_DWORD *)this + 118) = 0;
  *(_OWORD *)((char *)this + 476) = v48;
  *((_DWORD *)this + 123) = v41;
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1927FF008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (v27)
  {
    nitro::nitro_function::nitro_function(v27);
    if (v26)
    {
LABEL_7:
      nitro::nitro_function::nitro_function(v26);
      if (!v25) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (v26)
  {
    goto LABEL_7;
  }
  if (!v25) {
LABEL_9:
  }
    _Unwind_Resume(exception_object);
LABEL_8:
  nitro::nitro_function::nitro_function(v25);
  goto LABEL_9;
}

void Espresso::MPSBuffersEngine::expand_dims_kernel::blob_options(Espresso::MPSBuffersEngine::expand_dims_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  id v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927FF1F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::expand_dims_kernel::__launch(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (!a1[63])
  {
    (*(void (**)(void *, uint64_t *, uint64_t *))(*a1 + 80))(a1, a3, a4);
    if (!a1[63]) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
    }
  }
  uint64_t v8 = *a4;
  if (*(void *)v8)
  {
    if (v9)
    {
      uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    int v9 = 0;
  }
  uint64_t v11 = *a3;
  if (!*(void *)v11)
  {
    uint64_t v12 = 0;
    goto LABEL_14;
  }
  if (!v12)
  {
LABEL_14:
    int v13 = 0;
    goto LABEL_15;
  }
  int v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_15:
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v16, *a2);
  id v14 = v16[0];
  [v14 setComputePipelineState:a1[63]];
  [v14 setBuffer:*((void *)v9 + 21) offset:0 atIndex:0];
  [v14 setBuffer:v12[21] offset:0 atIndex:1];
  [v14 setBytes:a1 + 52 length:40 atIndex:2];
  [v14 setBytes:a1 + 57 length:40 atIndex:3];
  if (*((int *)v9 + 6) <= 1) {
    int v15 = 1;
  }
  else {
    int v15 = *((_DWORD *)v9 + 6);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v16);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1927FF448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::expand_dims_kernel::~expand_dims_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::MPSBuffersEngine::batch_matmul_kernel::is_valid_for_engine(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(const Espresso::layer_shape **)a3;
  if (*(void *)(a3 + 8) - *(void *)a3 < 0x80uLL) {
    return 0;
  }
  unsigned int v6 = (int *)((char *)v3 + 64);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, *(const Espresso::layer_shape **)a3, 0);
  unsigned int v7 = v25;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, (const Espresso::layer_shape *)((char *)v3 + 64), 0);
  BOOL v8 = 0;
  int v9 = *((_DWORD *)v3 + 2);
  int v10 = *((_DWORD *)v3 + 18);
  if (v10 == 1 || v9 == 1 || v9 == v10)
  {
    int v13 = *((_DWORD *)v3 + 3);
    int v14 = *((_DWORD *)v3 + 19);
    if (v14 != 1 && v13 != 1 && v13 != v14) {
      goto LABEL_37;
    }
    int v17 = *((_DWORD *)v3 + 4);
    int v18 = *((_DWORD *)v3 + 20);
    BOOL v19 = v18 == 1 || v17 == 1;
    if (!v19 && v17 != v18) {
      goto LABEL_37;
    }
    if (a1[281])
    {
      if (a1[282]) {
        int v21 = *v6;
      }
      else {
        int v21 = *((_DWORD *)v3 + 17);
      }
      BOOL v8 = *((_DWORD *)v3 + 1) == v21;
      goto LABEL_38;
    }
    int v22 = a1[282] ? *v6 : *((_DWORD *)v3 + 17);
    if (*(_DWORD *)v3 == v22) {
      BOOL v8 = 1;
    }
    else {
LABEL_37:
    }
      BOOL v8 = 0;
  }
LABEL_38:
  if (v7 >= 5) {
    BOOL v8 = 0;
  }
  BOOL v23 = v25 < 5 && v8;
  return !a1[280] && v23;
}

void Espresso::MPSBuffersEngine::batch_matmul_kernel::on_resized(Espresso::MPSBuffersEngine::batch_matmul_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v3 = *(void *)a3;
  if (*((void *)a3 + 1) == *(void *)a3) {
    return;
  }
  *((unsigned char *)this + 296) = 0;
  if (!*(void *)v3) {
    return;
  }
  if (!v7) {
    return;
  }
  BOOL v8 = v7;
  int v9 = *(std::__shared_weak_count **)(v3 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = (const void *)*((void *)this + 1);
  if (!v10
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v12 = v11;
  int v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)a3;
  if (*((void *)a3 + 1) - *(void *)a3 >= 0x20uLL)
  {
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = *(void *)a3;
    }
    int v15 = *(const void **)(v14 + 16);
    if (v15)
    {
      if (v16)
      {
        int v17 = *(std::__shared_weak_count **)(v14 + 24);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_19:
        uint64_t v18 = *(void *)a2;
        if (*(void *)v18)
        {
          if (v19)
          {
            int v20 = *(std::__shared_weak_count **)(v18 + 8);
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            goto LABEL_25;
          }
        }
        else
        {
          BOOL v19 = 0;
        }
        int v20 = 0;
LABEL_25:
        Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)&v28, v8);
        int v21 = (void *)*((void *)this + 38);
        if (v21)
        {
          *((void *)this + 39) = v21;
          operator delete(v21);
          *((void *)this + 38) = 0;
          *((void *)this + 39) = 0;
          *((void *)this + 40) = 0;
        }
        *((_OWORD *)this + 19) = v28;
        *((void *)this + 40) = v29;
        Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)&v28, v16);
        int v22 = (void *)((char *)this + 328);
        BOOL v23 = (void *)*((void *)this + 41);
        if (v23)
        {
          *((void *)this + 42) = v23;
          operator delete(v23);
          void *v22 = 0;
          *((void *)this + 42) = 0;
          *((void *)this + 43) = 0;
        }
        *(_OWORD *)int v22 = v28;
        *((void *)this + 43) = v29;
        Espresso::MPSBuffersEngine::blob_container::ndarray_strides((Espresso::MPSBuffersEngine::blob_container *)&v28, v19);
        unint64_t v24 = (void *)*((void *)this + 44);
        if (v24)
        {
          *((void *)this + 45) = v24;
          operator delete(v24);
          *((void *)this + 44) = 0;
          *((void *)this + 45) = 0;
          *((void *)this + 46) = 0;
        }
        *((_OWORD *)this + 22) = v28;
        *((void *)this + 46) = v29;
        uint64_t v25 = [objc_alloc(MEMORY[0x1E4F357B8]) initWithDevice:v12[18] sourceCount:2];
        int v26 = (void *)*((void *)this + 36);
        *((void *)this + 36) = v25;

        [*((id *)this + 36) setBeta:0.0];
        *((unsigned char *)this + 296) = 1;
        if (v20) {
          nitro::nitro_function::nitro_function(v20);
        }
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v9) {
          nitro::nitro_function::nitro_function(v9);
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    int v17 = 0;
    goto LABEL_19;
  }
LABEL_37:
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1927FF9E4(_Unwind_Exception *exception_object)
{
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    if (!v3)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v3);
  if (!v1)
  {
LABEL_4:
    if (!v2) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  nitro::nitro_function::nitro_function(v1);
  if (!v2)
  {
LABEL_5:
    if (!v1) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_11:
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_6:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_7;
}

void sub_1927FFA50()
{
  if (!v0) {
    JUMPOUT(0x1927FFA14);
  }
  JUMPOUT(0x1927FFA0CLL);
}

void sub_1927FFA5C()
{
  __cxa_free_exception(v1);
  if (!v0) {
    JUMPOUT(0x1927FFA14);
  }
  JUMPOUT(0x1927FFA0CLL);
}

void Espresso::MPSBuffersEngine::batch_matmul_kernel::blob_options(Espresso::MPSBuffersEngine::batch_matmul_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  id v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  BOOL v8 = v7;
  int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    int v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)int v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1927FFBE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::batch_matmul_kernel::__launch(uint64_t a1, uint64_t a2, Espresso::layer_data *a3, const void ***a4)
{
  v56[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (char *)a4[1] - (char *)*a4;
  if (!v4) {
    return;
  }
  if (v4 <= 0x1F) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Matrix multiplication requires two inputs.");
  }
  if (!*(unsigned char *)(a1 + 296))
  {
    Espresso::MPSBuffersEngine::batch_matmul_kernel::on_resized((Espresso::MPSBuffersEngine::batch_matmul_kernel *)a1, a3, (Espresso::layer_data *)a4);
    if (!*(unsigned char *)(a1 + 296)) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Failed to prepare batch matmul with MPSNDArray.");
    }
  }
  if (*(void *)a2)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a2 + 8);
      if (v9)
      {
        int v50 = *(std::__shared_weak_count **)(a2 + 8);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_11;
      }
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  int v50 = 0;
LABEL_11:
  int v10 = *a4;
  uint64_t v11 = **a4;
  if (v11)
  {
    if (v12)
    {
      int v13 = (atomic_ullong *)v10[1];
      if (v13)
      {
        int v49 = (std::__shared_weak_count *)v10[1];
        atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
        int v10 = *a4;
        goto LABEL_17;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  int v49 = 0;
LABEL_17:
  uint64_t v14 = v10[2];
  if (v14)
  {
    if (v15)
    {
      uint64_t v16 = (atomic_ullong *)v10[3];
      if (v16)
      {
        long long v48 = (std::__shared_weak_count *)v10[3];
        atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
        goto LABEL_23;
      }
    }
  }
  else
  {
    int v15 = 0;
  }
  long long v48 = 0;
LABEL_23:
  uint64_t v17 = *(void *)a3;
  if (!*(void *)v17)
  {
    uint64_t v18 = 0;
LABEL_28:
    int v47 = 0;
    goto LABEL_29;
  }
  if (!v18) {
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v17 + 8);
  if (!v19) {
    goto LABEL_28;
  }
  int v47 = *(std::__shared_weak_count **)(v17 + 8);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
LABEL_29:
  id v20 = v12[27];
  id v21 = v15[27];
  id v22 = v18[27];
  id v23 = [v12[25] ndArrayWithCommandBuffer:v8[18] descriptor:v12[28] aliasing:1];

  id v24 = [v15[25] ndArrayWithCommandBuffer:v8[18] descriptor:v15[28] aliasing:1];

  uint64_t v51 = [v18[25] ndArrayWithCommandBuffer:v8[18] descriptor:v18[28] aliasing:1];
  id v25 = (id)v51;

  if (!v23)
  {
    long long v28 = Espresso::espresso_os_log_subsystem(v26, v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_debug_impl(&dword_1920CB000, v28, OS_LOG_TYPE_DEBUG, "Failed to alias src_a in batch_matmul.", buf, 2u);
    }

    id v23 = v12[27];
    int v26 = (Espresso *)[v23 importDataWithCommandBuffer:v8[18] fromBuffer:v12[21] sourceDataType:*((unsigned int *)v12 + 48) offset:0 rowStrides:*(void *)(a1 + 304)];
  }
  if (!v24)
  {
    uint64_t v29 = Espresso::espresso_os_log_subsystem(v26, v27);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_debug_impl(&dword_1920CB000, v29, OS_LOG_TYPE_DEBUG, "Failed to alias src_b in batch_matmul.", buf, 2u);
    }

    id v24 = v15[27];
    int v26 = (Espresso *)[v24 importDataWithCommandBuffer:v8[18] fromBuffer:v15[21] sourceDataType:*((unsigned int *)v15 + 48) offset:0 rowStrides:*(void *)(a1 + 328)];
  }
  if (!v51)
  {
    int32x2_t v30 = Espresso::espresso_os_log_subsystem(v26, v27);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)vImage_Buffer buf = 0;
      _os_log_debug_impl(&dword_1920CB000, v30, OS_LOG_TYPE_DEBUG, "Failed to alias dst in batch_matmul.", buf, 2u);
    }

    id v25 = v18[27];
    [v25 importDataWithCommandBuffer:v8[18] fromBuffer:v18[21] sourceDataType:*((unsigned int *)v18 + 48) offset:0 rowStrides:*(void *)(a1 + 352)];
  }
  int v53 = v25;
  id v31 = v23;
  id v32 = v24;
  if (*(unsigned char *)(a1 + 281))
  {
    int v33 = [v31 descriptor];
    [v33 transposeDimension:0 withDimension:1];
    uint64_t v34 = [v31 arrayViewWithCommandBuffer:v8[18] descriptor:v33 aliasing:1];
    if (!v34)
    {
      unint64_t v36 = Espresso::espresso_os_log_subsystem(0, v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_debug_impl(&dword_1920CB000, v36, OS_LOG_TYPE_DEBUG, "Failed to alias src_a_nd_array for transpose in batch_matmul.", buf, 2u);
      }

      uint64_t v34 = [v31 arrayViewWithCommandBuffer:v8[18] descriptor:v33 aliasing:2];
    }
    id v52 = v34;

    int v37 = v52;
  }
  else
  {
    id v52 = 0;
    int v37 = v31;
  }
  if (*(unsigned char *)(a1 + 282))
  {
    int v38 = [v32 descriptor];
    [v38 transposeDimension:0 withDimension:1];
    uint64_t v39 = [v32 arrayViewWithCommandBuffer:v8[18] descriptor:v38 aliasing:1];
    if (!v39)
    {
      int v41 = Espresso::espresso_os_log_subsystem(0, v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)vImage_Buffer buf = 0;
        _os_log_debug_impl(&dword_1920CB000, v41, OS_LOG_TYPE_DEBUG, "Failed to alias src_b_nd_array for transpose in batch_matmul.", buf, 2u);
      }

      uint64_t v39 = [v32 arrayViewWithCommandBuffer:v8[18] descriptor:v38 aliasing:2];
    }
    id v42 = v39;

    __int32 v43 = v42;
  }
  else
  {
    id v42 = 0;
    __int32 v43 = v32;
  }
  int v44 = *(void **)(a1 + 288);
  if (!v44) {
    Espresso::throw_exception_selector<Espresso::generic_error>("ndarray matrix multiplication kernel was nil.");
  }
  uint64_t v45 = v8[18];
  v56[0] = v37;
  v56[1] = v43;
  int v46 = [MEMORY[0x1E4F1C978] arrayWithObjects:v56 count:2];
  [v44 encodeToCommandBuffer:v45 sourceArrays:v46 destinationArray:v53];

  if (!v51) {
    [v53 exportDataWithCommandBuffer:v8[18] toBuffer:v18[21] destinationDataType:*((unsigned int *)v18 + 48) offset:0 rowStrides:*(void *)(a1 + 352)];
  }

  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
}

void sub_19280030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, void *a14, void *a15)
{
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::batch_matmul_kernel::~batch_matmul_kernel(Espresso::MPSBuffersEngine::batch_matmul_kernel *this)
{
  id v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 41);
  if (v3)
  {
    *((void *)this + 42) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 38);
  if (v4)
  {
    *((void *)this + 39) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  id v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 41);
  if (v3)
  {
    *((void *)this + 42) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 38);
  if (v4)
  {
    *((void *)this + 39) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

BOOL Espresso::MPSBuffersEngine::reshape_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  return !*(_DWORD *)(a1 + 304) && (!*(unsigned char *)(a1 + 312) || a3[1] - *a3 == 64);
}

void Espresso::MPSBuffersEngine::reshape_kernel::on_resized(uint64_t a1, uint64_t *a2, void *a3)
{
  unsigned int v6 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = 0;

  unsigned int v7 = *(void **)(a1 + 328);
  *(void *)(a1 + 328) = 0;

  BOOL v8 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = 0;

  int v10 = a3;
  uint64_t v9 = *a3;
  if (v10[1] == v9) {
    return;
  }
  uint64_t v11 = *a2;
  if (a2[1] == *a2) {
    return;
  }
  if (!*(void *)v9)
  {
    uint64_t v12 = 0;
    goto LABEL_8;
  }
  if (!v12)
  {
LABEL_8:
    int v13 = 0;
    goto LABEL_9;
  }
  int v13 = *(std::__shared_weak_count **)(v9 + 8);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = *a2;
  }
LABEL_9:
  if (*(void *)v11)
  {
    if (v14)
    {
      int v15 = v14;
      uint64_t v16 = *(std::__shared_weak_count **)(v11 + 8);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v12) {
        goto LABEL_59;
      }
      int v17 = (*(uint64_t (**)(int *))(*(void *)v12 + 32))(v12);
      int v18 = v12[3];
      uint64_t v19 = v12[2];
      *(_DWORD *)(a1 + 348) = v19;
      int v20 = v12[4];
      *(_DWORD *)(a1 + 352) = v20 * v18;
      *(_DWORD *)(a1 + 3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v20;
      *(_DWORD *)(a1 + 368) = v18;
      unint64_t v21 = *((void *)v12 + 31);
      *(_DWORD *)(a1 + 380) = *((void *)v12 + 31);
      int v23 = v12[5];
      int v22 = v12[6];
      if (v23 <= 1) {
        int v23 = 1;
      }
      if (v22 <= 1) {
        int v24 = 1;
      }
      else {
        int v24 = v12[6];
      }
      *(_DWORD *)(a1 + 376) = v24 * v23;
      if ((v17 - 1) >= 0xD)
      {
        unint64_t v26 = v21 + v21 * ((4 * v19 - 1) / v21);
        unint64_t v25 = 4;
      }
      else
      {
        unint64_t v25 = qword_192DF6AD8[v17 - 1];
        unint64_t v26 = v21 + v21 * ((v25 * v19 - 1) / v21);
      }
      unint64_t v27 = v26 / v25;
      *(_DWORD *)(a1 + 344) = v27;
      int v28 = v19 - 1;
      if ((int)v19 < 1) {
        int v28 = v19 + 2;
      }
      *(_DWORD *)(a1 + 384) = (v28 >> 2) + 1;
      *(_DWORD *)(a1 + 388) = v27 >> 2;
      int v29 = v12[5];
      if (v29 <= 1) {
        int v30 = 1;
      }
      else {
        int v30 = v12[5];
      }
      *(_DWORD *)(a1 + 392) = v30;
      int v31 = v18 * v19;
      *(_DWORD *)(a1 + 356) = v31;
      int v32 = v20 * v31;
      *(_DWORD *)(a1 + 360) = v32;
      *(_DWORD *)(a1 + 364) = v32 * v29;
      *(_DWORD *)(a1 + 396) = v22;
      int v33 = (*(uint64_t (**)(_DWORD *))(*(void *)v15 + 32))(v15);
      int v34 = v15[3];
      uint64_t v35 = (int)v15[2];
      *(_DWORD *)(a1 + 404) = v35;
      int v36 = v15[4];
      *(_DWORD *)(a1 + 408) = v36 * v34;
      *(_DWORD *)(a1 + 428) = v36;
      *(_DWORD *)(a1 + 4std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v34;
      unint64_t v37 = *((void *)v15 + 31);
      *(_DWORD *)(a1 + 436) = *((void *)v15 + 31);
      int v39 = v15[5];
      int v38 = v15[6];
      if (v39 <= 1) {
        int v39 = 1;
      }
      if (v38 <= 1) {
        int v40 = 1;
      }
      else {
        int v40 = v15[6];
      }
      *(_DWORD *)(a1 + 432) = v40 * v39;
      if ((v33 - 1) >= 0xD)
      {
        unint64_t v42 = v37 + v37 * ((4 * v35 - 1) / v37);
        unint64_t v41 = 4;
      }
      else
      {
        unint64_t v41 = qword_192DF6AD8[v33 - 1];
        unint64_t v42 = v37 + v37 * ((v41 * v35 - 1) / v37);
      }
      unint64_t v43 = v42 / v41;
      *(_DWORD *)(a1 + 400) = v43;
      int v44 = v35 - 1;
      if ((int)v35 < 1) {
        int v44 = v35 + 2;
      }
      *(_DWORD *)(a1 + 440) = (v44 >> 2) + 1;
      *(_DWORD *)(a1 + 444) = v43 >> 2;
      int v45 = v15[5];
      if (v45 <= 1) {
        int v46 = 1;
      }
      else {
        int v46 = v15[5];
      }
      *(_DWORD *)(a1 + 448) = v46;
      int v47 = v34 * v35;
      *(_DWORD *)(a1 + 412) = v47;
      int v48 = v36 * v47;
      *(_DWORD *)(a1 + 416) = v48;
      *(_DWORD *)(a1 + 420) = v48 * v45;
      *(_DWORD *)(a1 + 452) = v38;
      int v49 = *(const void **)(a1 + 8);
      if (!v49
      {
        exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
      }
      uint64_t v51 = v50;
      id v52 = *(std::__shared_weak_count **)(a1 + 16);
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v53 = [v50[18] newBufferWithBytes:a1 + 344 length:56 options:0];
      int v54 = *(void **)(a1 + 328);
      *(void *)(a1 + 328) = v53;

      uint64_t v55 = [v51[18] newBufferWithBytes:a1 + 400 length:56 options:0];
      uint64_t v56 = *(void **)(a1 + 336);
      *(void *)(a1 + 336) = v55;

      long long v57 = *(unsigned int (**)(_DWORD *))(*(void *)v15 + 32);
      if (v15[2] == v12[2])
      {
        if (v57(v15))
        {
          if ((*(unsigned int (**)(_DWORD *))(*(void *)v15 + 32))(v15) != 1) {
            goto LABEL_54;
          }
          int32x2_t v58 = "reshape_fast_axis_unchanged_buffers_f16";
        }
        else
        {
          int32x2_t v58 = "reshape_fast_axis_unchanged_buffers_f32";
        }
      }
      else if (v57(v15))
      {
        if ((*(unsigned int (**)(_DWORD *))(*(void *)v15 + 32))(v15) != 1) {
          goto LABEL_54;
        }
        int32x2_t v58 = "reshape_fast_axis_changed_buffers_f16";
      }
      else
      {
        int32x2_t v58 = "reshape_fast_axis_changed_buffers_f32";
      }
      uint64_t v59 = [v51[20] kernelForFunction:v58 cacheString:0 withConstants:0];
      int32x4_t v60 = *(void **)(a1 + 320);
      *(void *)(a1 + 320) = v59;

LABEL_54:
      if (*(void *)(a1 + 320))
      {
        if (*(void *)(a1 + 328))
        {
          if (*(void *)(a1 + 336))
          {
            if (v52) {
              nitro::nitro_function::nitro_function(v52);
            }
LABEL_59:
            if (v16) {
              nitro::nitro_function::nitro_function(v16);
            }
            goto LABEL_61;
          }
          uint64_t v62 = "Failed to create pb_dst buffer.";
        }
        else
        {
          uint64_t v62 = "Failed to create pb_src buffer.";
        }
      }
      else
      {
        uint64_t v62 = "Failed to create kernel in reshape_kernel";
      }
      Espresso::throw_exception_selector<Espresso::generic_error>(v62);
    }
  }
LABEL_61:
  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
  }
}

void sub_192800AEC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    if (!v1) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_4;
  }
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_4;
}

void Espresso::MPSBuffersEngine::reshape_kernel::blob_options(Espresso::MPSBuffersEngine::reshape_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  unint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  BOOL v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    int v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)int v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_192800CBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::reshape_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, const void ***a4)
{
  if (a4[1] == *a4) {
    return;
  }
  if (!*(void *)(a1 + 320))
  {
    Espresso::MPSBuffersEngine::reshape_kernel::on_resized(a1, a3, a4);
    if (!*(void *)(a1 + 320)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("reshape_kernel failed to get ready.");
    }
  }
  BOOL v8 = *(const void **)(a1 + 8);
  if (!v8
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = *a4;
  uint64_t v11 = **a4;
  if (!v11)
  {
    uint64_t v12 = 0;
    goto LABEL_13;
  }
  if (!v12)
  {
LABEL_13:
    int v13 = 0;
    goto LABEL_14;
  }
  int v13 = (std::__shared_weak_count *)v10[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_14:
  uint64_t v14 = *a3;
  if (*(void *)v14)
  {
    if (v15)
    {
      uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_20;
    }
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = 0;
LABEL_20:
  id v17 = v12[21];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v25, *a2);
  id v18 = v25[0];
  id v19 = v15[21];
  int v20 = **a4;
  int v22 = v20[5];
  int v21 = v20[6];
  if (v21 <= 1) {
    int v23 = 1;
  }
  else {
    int v23 = v21;
  }
  [v18 setComputePipelineState:*(void *)(a1 + 320)];
  [v18 setBuffer:v17 offset:0 atIndex:0];
  [v18 setBuffer:v19 offset:0 atIndex:1];
  [v18 setBuffer:*(void *)(a1 + 328) offset:0 atIndex:2];
  [v18 setBuffer:*(void *)(a1 + 336) offset:0 atIndex:3];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v25);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192800FF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::reshape_kernel::~reshape_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::matrix_band_part_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_matrix_band_part_kernel::kernel_type_str(Espresso::generic_matrix_band_part_kernel *this)
{
  return "matrix_band_part";
}

uint64_t Espresso::MPSBuffersEngine::matrix_band_part_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSBuffersEngine::matrix_band_part_kernel::on_resized(Espresso::MPSBuffersEngine::matrix_band_part_kernel *this, Espresso::layer_data *a2, const void ***a3)
{
  BOOL v5 = (void *)*((void *)this + 38);
  *((void *)this + 38) = 0;

  unsigned int v6 = (void *)*((void *)this + 49);
  *((void *)this + 49) = 0;

  unsigned int v7 = (void *)*((void *)this + 50);
  *((void *)this + 50) = 0;

  BOOL v8 = *a3;
  if (a3[1] == *a3) {
    return;
  }
  if (!*v8) {
    return;
  }
  if (!v9) {
    return;
  }
  uint64_t v10 = (uint64_t)v9;
  uint64_t v11 = (std::__shared_weak_count *)v8[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (id *)*((void *)this + 1);
  id v13 = v12[18];
  int v14 = *((_DWORD *)this + 78);
  if (v14 == 1)
  {
    int v15 = @"matrix_band_part_f16_buffers";
  }
  else
  {
    if (v14)
    {
      unint64_t v42 = "Unsupported CP in matrix_band_part kernel MPS_BUFFERS_ENGINE.";
LABEL_39:
      Espresso::throw_exception_selector<Espresso::generic_error>(v42);
    }
    int v15 = @"matrix_band_part_f32_buffers";
  }
  uint64_t v16 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v12, &v15->isa);
  id v17 = (void *)*((void *)this + 38);
  *((void *)this + 38) = v16;

  if (!*((void *)this + 38))
  {
    unint64_t v42 = "Could not find kernel for matrix_band_part in buffers engine.";
    goto LABEL_39;
  }
  id v18 = *a3;
  id v19 = **a3;
  if (v19)
  {
    if (v20)
    {
      int v21 = (std::__shared_weak_count *)v18[1];
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        id v19 = **a3;
      }
      goto LABEL_17;
    }
  }
  else
  {
    int v20 = 0;
  }
  int v21 = 0;
LABEL_17:
  int v22 = (*(uint64_t (**)(const void *))(*(void *)v19 + 32))(v19);
  uint64_t v23 = v20[2];
  *((_DWORD *)this + 80) = v23;
  int v25 = v20[3];
  int v24 = v20[4];
  *((_DWORD *)this + 81) = v24 * v25;
  *((_DWORD *)this + 86) = v24;
  *((_DWORD *)this + 85) = v25;
  unint64_t v26 = *((void *)v20 + 31);
  *((_DWORD *)this + 88) = *((void *)v20 + 31);
  int v28 = v20[5];
  int v27 = v20[6];
  if (v28 <= 1) {
    int v28 = 1;
  }
  if (v27 <= 1) {
    int v29 = 1;
  }
  else {
    int v29 = v20[6];
  }
  *((_DWORD *)this + 87) = v29 * v28;
  if ((v22 - 1) >= 0xD)
  {
    unint64_t v31 = v26 + v26 * ((4 * v23 - 1) / v26);
    unint64_t v30 = 4;
  }
  else
  {
    unint64_t v30 = qword_192DF6AD8[v22 - 1];
    unint64_t v31 = v26 + v26 * ((v30 * v23 - 1) / v26);
  }
  unint64_t v32 = v31 / v30;
  *((_DWORD *)this + 79) = v32;
  int v33 = v23 - 1;
  if ((int)v23 < 1) {
    int v33 = v23 + 2;
  }
  *((_DWORD *)this + 89) = (v33 >> 2) + 1;
  *((_DWORD *)this + 90) = v32 >> 2;
  int v34 = v20[5];
  if (v34 <= 1) {
    int v35 = 1;
  }
  else {
    int v35 = v20[5];
  }
  *((_DWORD *)this + 91) = v35;
  int v36 = v25 * v23;
  *((_DWORD *)this + 82) = v36;
  int v37 = v24 * v36;
  *((_DWORD *)this + 83) = v37;
  *((_DWORD *)this + 84) = v37 * v34;
  *((_DWORD *)this + 92) = v27;
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  uint64_t v38 = [v13 newBufferWithBytes:(char *)this + 316 length:56 options:0];
  int v39 = (void *)*((void *)this + 49);
  *((void *)this + 49) = v38;

  *(int32x2_t *)((char *)this + 3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = vrev64_s32(*(int32x2_t *)((char *)this + 280));
  *((_DWORD *)this + 95) = *((unsigned __int8 *)this + 292);
  *((_DWORD *)this + 96) = *((_DWORD *)this + 72);
  Espresso::abstract_blob_container::shape(v43, v10);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v46, (const Espresso::layer_shape *)v43, 0);
  *((_DWORD *)this + 97) = v47;
  if (__p)
  {
    int v45 = __p;
    operator delete(__p);
  }
  uint64_t v40 = [v13 newBufferWithBytes:(char *)this + 372 length:20 options:0];
  unint64_t v41 = (void *)*((void *)this + 50);
  *((void *)this + 50) = v40;

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_1928014A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }

  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::matrix_band_part_kernel::__launch(Espresso::MPSBuffersEngine::matrix_band_part_kernel *this, Espresso::layer_data *a2, uint64_t *a3, const void ***a4)
{
  unint64_t v4 = *a4;
  if (a4[1] != *a4)
  {
    if (!*((void *)this + 38) || !*((void *)this + 50))
    {
      Espresso::MPSBuffersEngine::matrix_band_part_kernel::on_resized(this, a2, a4);
      unint64_t v4 = *a4;
    }
    uint64_t v10 = (std::__shared_weak_count *)v4[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      id v11 = v9[21];
      nitro::nitro_function::nitro_function(v10);
    }
    else
    {
      id v11 = v9[21];
    }
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v20, *(void *)a2);
    id v12 = v20[0];
    uint64_t v13 = *a3;
    int v15 = *(std::__shared_weak_count **)(v13 + 8);
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      id v16 = v14[21];
      nitro::nitro_function::nitro_function(v15);
    }
    else
    {
      id v16 = v14[21];
    }
    id v17 = **a4;
    if ((int)v17[6] <= 1) {
      int v18 = 1;
    }
    else {
      int v18 = v17[6];
    }
    if (!*((void *)this + 38)) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
    }
    int v19 = v17[5];
    objc_msgSend(v12, "setComputePipelineState:");
    [v12 setBuffer:v16 offset:0 atIndex:0];
    [v12 setBuffer:*((void *)this + 50) offset:0 atIndex:1];
    [v12 setBuffer:*((void *)this + 49) offset:0 atIndex:2];
    [v12 setBuffer:v11 offset:0 atIndex:3];

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v20);
  }
}

void sub_192801734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::matrix_band_part_kernel::~matrix_band_part_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::MPSBuffersEngine::l2_normalize_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 288) - 1) <= 1 && *(_DWORD *)(a1 + 284) != 0;
}

void Espresso::MPSBuffersEngine::l2_normalize_kernel::on_resized(uint64_t a1, uint64_t *a2, void *a3)
{
  unsigned int v6 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = 0;

  unsigned int v7 = *(void **)(a1 + 368);
  *(void *)(a1 + 368) = 0;

  uint64_t v9 = a3;
  uint64_t v8 = *a3;
  if (v9[1] == v8) {
    return;
  }
  if (!*(void *)v8) {
    return;
  }
  if (!v10) {
    return;
  }
  id v11 = v10;
  id v12 = *(std::__shared_weak_count **)(v8 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(const void **)(a1 + 8);
  if (!v13
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  int v15 = v14;
  id v16 = *(std::__shared_weak_count **)(a1 + 16);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v17 = (MTLFunctionConstantValues *)objc_opt_new();
  int v18 = v17;
  int v19 = *(_DWORD *)(a1 + 284);
  __int16 v20 = v19 == 1;
  __int16 v63 = (v19 - 1) < 2;
  __int16 v21 = v19 == 3 || v19 == 1;
  __int16 v62 = v21;
  __int16 v61 = v20;
  int v60 = *(_DWORD *)(a1 + 280);
  [(MTLFunctionConstantValues *)v17 setConstantValue:&v63 type:37 atIndex:0];
  [(MTLFunctionConstantValues *)v18 setConstantValue:&v62 type:37 atIndex:1];
  [(MTLFunctionConstantValues *)v18 setConstantValue:&v61 type:37 atIndex:2];
  [(MTLFunctionConstantValues *)v18 setConstantValue:&v60 type:3 atIndex:3];
  int v22 = (NSString *)objc_opt_new();
  uint64_t v23 = *(unsigned int (**)(void *))(*(void *)v11 + 32);
  if (*(_DWORD *)(a1 + 288) == 1)
  {
    if (v23(v11))
    {
      if ((*(unsigned int (**)(void *))(*(void *)v11 + 32))(v11) == 1)
      {
        uint64_t v24 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v15, &cfstr_L2NormalizeBuf_0.isa);
        int v25 = *(void **)(a1 + 296);
        *(void *)(a1 + 296) = v24;

        uint64_t v26 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v15, &cfstr_L2NormalizeApp_0.isa, v22, v18);
        goto LABEL_22;
      }
LABEL_56:
      Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported compute path for L2 norm in buffers engine.");
    }
    uint64_t v29 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v15, &cfstr_L2NormalizeBuf.isa);
    unint64_t v30 = *(void **)(a1 + 296);
    *(void *)(a1 + 296) = v29;

    uint64_t v26 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v15, &cfstr_L2NormalizeApp.isa, v22, v18);
  }
  else if (v23(v11))
  {
    if ((*(unsigned int (**)(void *))(*(void *)v11 + 32))(v11) != 1) {
      goto LABEL_56;
    }
    uint64_t v27 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v15, &cfstr_L2NormalizeBuf_2.isa);
    int v28 = *(void **)(a1 + 296);
    *(void *)(a1 + 296) = v27;

    uint64_t v26 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v15, &cfstr_L2NormalizeApp_2.isa, v22, v18);
  }
  else
  {
    uint64_t v31 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v15, &cfstr_L2NormalizeBuf_1.isa);
    unint64_t v32 = *(void **)(a1 + 296);
    *(void *)(a1 + 296) = v31;

    uint64_t v26 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v15, &cfstr_L2NormalizeApp_1.isa, v22, v18);
  }
LABEL_22:
  int v33 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v26;

  uint64_t v34 = *a2;
  if (!*(void *)v34)
  {
    int v35 = 0;
    goto LABEL_27;
  }
  if (!v35)
  {
LABEL_27:
    int v36 = 0;
    goto LABEL_28;
  }
  int v36 = *(std::__shared_weak_count **)(v34 + 8);
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_28:
  int v37 = (*(uint64_t (**)(int *))(*(void *)v35 + 32))(v35);
  int v38 = v35[3];
  uint64_t v39 = v35[2];
  *(_DWORD *)(a1 + 316) = v39;
  int v40 = v35[4];
  *(_DWORD *)(a1 + 320) = v40 * v38;
  *(_DWORD *)(a1 + 340) = v40;
  *(_DWORD *)(a1 + 336) = v38;
  unint64_t v41 = *((void *)v35 + 31);
  *(_DWORD *)(a1 + 348) = *((void *)v35 + 31);
  int v43 = v35[5];
  int v42 = v35[6];
  if (v43 <= 1) {
    int v43 = 1;
  }
  if (v42 <= 1) {
    int v44 = 1;
  }
  else {
    int v44 = v35[6];
  }
  *(_DWORD *)(a1 + 344) = v44 * v43;
  if ((v37 - 1) >= 0xD)
  {
    unint64_t v46 = v41 + v41 * ((4 * v39 - 1) / v41);
    unint64_t v45 = 4;
  }
  else
  {
    unint64_t v45 = qword_192DF6AD8[v37 - 1];
    unint64_t v46 = v41 + v41 * ((v45 * v39 - 1) / v41);
  }
  unint64_t v47 = v46 / v45;
  *(_DWORD *)(a1 + 312) = v47;
  int v48 = v39 - 1;
  if ((int)v39 < 1) {
    int v48 = v39 + 2;
  }
  *(_DWORD *)(a1 + 352) = (v48 >> 2) + 1;
  *(_DWORD *)(a1 + 356) = v47 >> 2;
  int v49 = v35[5];
  if (v49 <= 1) {
    int v50 = 1;
  }
  else {
    int v50 = v35[5];
  }
  *(_DWORD *)(a1 + 360) = v50;
  int v51 = v38 * v39;
  *(_DWORD *)(a1 + 3std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v51;
  int v52 = v40 * v51;
  *(_DWORD *)(a1 + 328) = v52;
  *(_DWORD *)(a1 + 332) = v52 * v49;
  *(_DWORD *)(a1 + 364) = v42;
  uint64_t v53 = [v15[18] newBufferWithBytes:a1 + 312 length:56 options:0];
  int v54 = *(void **)(a1 + 368);
  *(void *)(a1 + 368) = v53;

  uint64_t v55 = 8 * *(unsigned int *)(a1 + 344);
  if (*(_DWORD *)(a1 + 288) == 1) {
    v55 *= *(unsigned int *)(a1 + 340);
  }
  uint64_t v56 = [v15[18] newBufferWithLength:v55 options:0];
  long long v57 = *(void **)(a1 + 376);
  *(void *)(a1 + 376) = v56;

  if (!*(void *)(a1 + 296))
  {
    uint64_t v59 = "Failed to find kernel for L2 norm in buffers engine.";
    goto LABEL_55;
  }
  if (!*(void *)(a1 + 304))
  {
    uint64_t v59 = "Failed to find application kernel for L2 norm in buffers engine.";
LABEL_55:
    Espresso::throw_exception_selector<Espresso::generic_error>(v59);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }

  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192801E40(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::l2_normalize_kernel::blob_options(Espresso::MPSBuffersEngine::l2_normalize_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  unint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_192802020(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::l2_normalize_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, const void ***a4)
{
  if (a4[1] == *a4) {
    return;
  }
  if (!*(void *)(a1 + 296) || !*(void *)(a1 + 304))
  {
    Espresso::MPSBuffersEngine::l2_normalize_kernel::on_resized(a1, a3, a4);
    if (!*(void *)(a1 + 296) || !*(void *)(a1 + 304)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("l2_normalize_kernel failed to create kernels.");
    }
  }
  uint64_t v8 = *(const void **)(a1 + 8);
  if (!v8
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a4;
  uint64_t v11 = **a4;
  if (!v11)
  {
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  if (!v12)
  {
LABEL_15:
    uint64_t v13 = 0;
    goto LABEL_16;
  }
  uint64_t v13 = (std::__shared_weak_count *)v10[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_16:
  uint64_t v14 = *a3;
  if (*(void *)v14)
  {
    if (v15)
    {
      id v16 = *(std::__shared_weak_count **)(v14 + 8);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_22;
    }
  }
  else
  {
    int v15 = 0;
  }
  id v16 = 0;
LABEL_22:
  id v17 = v12[21];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v30, *a2);
  id v18 = v30[0];
  id v19 = v15[21];
  __int16 v20 = **a4;
  int v22 = v20[5];
  int v21 = v20[6];
  if (v21 <= 1) {
    uint64_t v23 = 1;
  }
  else {
    uint64_t v23 = v21;
  }
  [v18 setComputePipelineState:*(void *)(a1 + 296)];
  [v18 setBuffer:v17 offset:0 atIndex:0];
  [v18 setBuffer:*(void *)(a1 + 368) offset:0 atIndex:1];
  [v18 setBuffer:*(void *)(a1 + 376) offset:0 atIndex:2];
  [v18 setThreadgroupMemoryLength:512 atIndex:0];
  [v18 setThreadgroupMemoryLength:512 atIndex:1];
  uint64_t v24 = v23 * v22;
  if (*(_DWORD *)(a1 + 288) == 1) {
    uint64_t v24 = (*(_DWORD *)(a1 + 340) * v24);
  }
  int64x2_t v28 = vdupq_n_s64(1uLL);
  uint64_t v29 = v24;
  long long v26 = xmmword_192DCA510;
  uint64_t v27 = 1;
  [v18 dispatchThreadgroups:&v28 threadsPerThreadgroup:&v26];
  [v18 setComputePipelineState:*(void *)(a1 + 304)];
  [v18 setBuffer:v17 offset:0 atIndex:0];
  [v18 setBuffer:*(void *)(a1 + 368) offset:0 atIndex:1];
  [v18 setBuffer:v19 offset:0 atIndex:2];
  [v18 setBuffer:*(void *)(a1 + 376) offset:0 atIndex:3];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v30);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192802410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::l2_normalize_kernel::~l2_normalize_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::MPSBuffersEngine::softmax_nd_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSBuffersEngine::softmax_nd_kernel::on_resized(Espresso::MPSBuffersEngine::softmax_nd_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  unsigned int v6 = (void *)*((void *)this + 36);
  *((void *)this + 36) = 0;

  uint64_t v8 = a3;
  uint64_t v7 = *(void *)a3;
  if (*((void *)v8 + 1) != v7)
  {
    uint64_t v9 = *(void *)a2;
    if (*((void *)a2 + 1) != *(void *)a2)
    {
      if (*(void *)v7)
      {
        if (v10)
        {
          uint64_t v11 = *(std::__shared_weak_count **)(v7 + 8);
          if (v11)
          {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v9 = *(void *)a2;
          }
LABEL_9:
          if (!*(void *)v9
          {
LABEL_58:
            if (v11) {
              nitro::nitro_function::nitro_function(v11);
            }
            return;
          }
          uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v10)
          {
            Espresso::abstract_blob_container::shape((char *)&v67, (uint64_t)v10);
            Espresso::abstract_blob_container::shape((char *)&v62, (uint64_t)v10);
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v65, (const Espresso::layer_shape *)&v62, 0);
            if (__p)
            {
              int v64 = __p;
              operator delete(__p);
            }
            Espresso::layer_nd_shape::shape_vector(&v62, (uint64_t)v65);
            uint64_t v13 = (void *)((char *)this + 376);
            uint64_t v14 = (void *)*((void *)this + 47);
            if (v14)
            {
              *((void *)this + 48) = v14;
              operator delete(v14);
              *uint64_t v13 = 0;
              *((void *)this + 48) = 0;
              *((void *)this + 49) = 0;
            }
            *(_OWORD *)uint64_t v13 = *(_OWORD *)&v62.__begin_;
            *((void *)this + 49) = v62.__end_cap_.__value_;
            int v15 = (const void *)*((void *)this + 1);
            if (!v15
            {
              exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
              exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
            }
            id v17 = v16;
            id v18 = (std::__shared_weak_count *)*((void *)this + 2);
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            id v19 = v16[18];
            int v20 = *((_DWORD *)this + 70);
            int v60 = v18;
            id v61 = v19;
            if (v20 < 0 && (v20 += v66, v20 < 0)
              || v20 >= (unint64_t)((uint64_t)(*((void *)this + 48) - *((void *)this + 47)) >> 2))
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
            }
            int v21 = v66;
            int v22 = (*(uint64_t (**)(int *))(*(void *)v10 + 32))(v10);
            uint64_t v23 = v10[2];
            *((_DWORD *)this + 79) = v23;
            int v24 = v10[3];
            int v25 = v10[4];
            int v26 = v25 * v24;
            *((_DWORD *)this + 80) = v25 * v24;
            *((_DWORD *)this + 85) = v25;
            *((_DWORD *)this + 84) = v24;
            unint64_t v27 = *((void *)v10 + 31);
            *((_DWORD *)this + 87) = *((void *)v10 + 31);
            int v29 = v10[5];
            int v28 = v10[6];
            if (v29 <= 1) {
              int v29 = 1;
            }
            if (v28 <= 1) {
              int v30 = 1;
            }
            else {
              int v30 = v10[6];
            }
            *((_DWORD *)this + 86) = v30 * v29;
            if ((v22 - 1) >= 0xD)
            {
              unint64_t v32 = v27 + v27 * ((4 * v23 - 1) / v27);
              unint64_t v31 = 4;
            }
            else
            {
              unint64_t v31 = qword_192DF6AD8[v22 - 1];
              unint64_t v32 = v27 + v27 * ((v31 * v23 - 1) / v27);
            }
            unint64_t v33 = v32 / v31;
            *((_DWORD *)this + 78) = v32 / v31;
            int v34 = v23 - 1;
            if ((int)v23 < 1) {
              int v34 = v23 + 2;
            }
            *((_DWORD *)this + 88) = (v34 >> 2) + 1;
            *((_DWORD *)this + 89) = v33 >> 2;
            int v35 = v10[5];
            if (v35 <= 1) {
              int v36 = 1;
            }
            else {
              int v36 = v10[5];
            }
            *((_DWORD *)this + 90) = v36;
            int v37 = v24 * v23;
            *((_DWORD *)this + 81) = v37;
            int v38 = v25 * v37;
            *((_DWORD *)this + 82) = v38;
            *((_DWORD *)this + 83) = v38 * v35;
            *((_DWORD *)this + 91) = v28;
            *((_DWORD *)this + 92) = 0;
            switch(v21 + ~v20)
            {
              case 0:
                unsigned int v39 = v67;
                unsigned int v40 = v70 * v69 * v68 * v71;
                *((_DWORD *)this + 92) = 32 * v40;
                int v41 = v10[60];
                LODWORD(v33) = 1;
                int v42 = 1;
                goto LABEL_45;
              case 1:
                int v42 = v10[60];
                unsigned int v39 = v68;
                unsigned int v40 = v70 * v69 * v71;
                *((_DWORD *)this + 92) = 32 * v40 * v42;
                int v41 = v42 * v39;
                goto LABEL_45;
              case 2:
                int v47 = v10[60];
                unsigned int v48 = v68;
                unsigned int v39 = v69;
                unsigned int v40 = v71 * v70;
                *((_DWORD *)this + 92) = 32 * v71 * v70 * v47 * v68;
                int v42 = v48 * v33;
                int v41 = v47 * v39 * v48;
                LODWORD(v33) = v24 * v33;
                goto LABEL_45;
              case 3:
                unsigned int v39 = v70;
                unsigned int v40 = v71;
                int v49 = v69 * v68;
                int v50 = v69 * v68 * v10[60];
                *((_DWORD *)this + 92) = 32 * v50 * v71;
                int v42 = v49 * v33;
                int v46 = v26 * v33;
                int v41 = v50 * v39;
                goto LABEL_43;
              case 4:
                unsigned int v43 = v70;
                unsigned int v39 = v71;
                int v44 = v69 * v68;
                int v45 = v69 * v68 * v10[60] * v70;
                *((_DWORD *)this + 92) = 32 * v45;
                int v46 = v26 * v33 * v36;
                int v41 = v45 * v39;
                int v42 = v44 * v33 * v43;
                unsigned int v40 = 1;
LABEL_43:
                LODWORD(v33) = v46;
LABEL_45:
                if ((*(unsigned int (**)(int *))(*(void *)v10 + 32))(v10))
                {
                  if ((*(unsigned int (**)(int *))(*(void *)v10 + 32))(v10) != 1) {
                    goto LABEL_50;
                  }
                  int v51 = "softmax_nd_axis_get_max_and_sum_buffers_fp16";
                }
                else
                {
                  int v51 = "softmax_nd_axis_get_max_and_sum_buffers_fp32";
                }
                uint64_t v52 = objc_msgSend(v17[20], "kernelForFunction:cacheString:withConstants:", v51, 0, 0, v60);
                uint64_t v53 = (void *)*((void *)this + 36);
                *((void *)this + 36) = v52;

LABEL_50:
                if (*((void *)this + 36))
                {
                  uint64_t v54 = [v61 newBufferWithBytes:(char *)this + 312 length:56 options:0];
                  uint64_t v55 = (void *)*((void *)this + 37);
                  *((void *)this + 37) = v54;

                  if (*((void *)this + 37))
                  {
                    v62.__begin_ = (std::vector<int>::pointer)__PAIR64__(v41, v42);
                    v62.__end_ = (std::vector<int>::pointer)__PAIR64__(v39, v33);
                    v62.__end_cap_.__value_ = (int *)v40;
                    uint64_t v56 = [v61 newBufferWithBytes:&v62 length:24 options:0];
                    long long v57 = (void *)*((void *)this + 38);
                    *((void *)this + 38) = v56;

                    if (v60) {
                      nitro::nitro_function::nitro_function(v60);
                    }
                    if (v72)
                    {
                      unsigned int v73 = v72;
                      operator delete(v72);
                    }
                    break;
                  }
                  uint64_t v59 = "failed to allocate buffer for pb_src params.";
                }
                else
                {
                  uint64_t v59 = "Could not create kernel for softmax_nd!";
                }
LABEL_65:
                Espresso::throw_exception_selector<Espresso::generic_error>(v59);
              default:
                uint64_t v59 = "axis not supported in softmax_nd mpsbuffers.";
                goto LABEL_65;
            }
          }
          if (v12) {
            nitro::nitro_function::nitro_function(v12);
          }
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      uint64_t v11 = 0;
      goto LABEL_9;
    }
  }
}

void sub_192802B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (__p)
  {
    operator delete(__p);
    if (!v29)
    {
LABEL_5:
      if (!v28) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v29)
  {
    goto LABEL_5;
  }
  nitro::nitro_function::nitro_function(v29);
  if (!v28) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_6:
  nitro::nitro_function::nitro_function(v28);
  goto LABEL_7;
}

void Espresso::MPSBuffersEngine::softmax_nd_kernel::blob_options(Espresso::MPSBuffersEngine::softmax_nd_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  unint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_192802DB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::softmax_nd_kernel::__launch(Espresso::MPSBuffersEngine::softmax_nd_kernel *this, uint64_t *a2, Espresso::layer_data *a3, Espresso::layer_data *a4)
{
  if (*((void *)a4 + 1) == *(void *)a4) {
    return;
  }
  if (!*((void *)this + 36))
  {
    Espresso::MPSBuffersEngine::softmax_nd_kernel::on_resized(this, a3, a4);
    if (!*((void *)this + 36)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("softmax_nd_kernel failed to get ready.");
    }
  }
  uint64_t v8 = (const void *)*((void *)this + 1);
  if (!v8
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)a4;
  if (!*(void *)v10)
  {
    uint64_t v11 = 0;
    goto LABEL_13;
  }
  if (!v11)
  {
LABEL_13:
    uint64_t v12 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_14:
  uint64_t v13 = *(void *)a3;
  if (*(void *)v13)
  {
    if (v14)
    {
      int v15 = *(std::__shared_weak_count **)(v13 + 8);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int v15 = 0;
LABEL_20:
  id v16 = v11[21];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v29, *a2);
  id v17 = v29[0];
  id v18 = v14[21];
  int v19 = *((_DWORD *)this + 92);
  int v21 = v19 - 1;
  BOOL v20 = v19 < 1;
  int v22 = v19 + 254;
  if (v20) {
    int v23 = v22;
  }
  else {
    int v23 = v21;
  }
  [v17 setComputePipelineState:*((void *)this + 36)];
  [v17 setBuffer:v16 offset:0 atIndex:0];
  [v17 setBuffer:*((void *)this + 37) offset:0 atIndex:1];
  [v17 setBuffer:v18 offset:0 atIndex:2];
  [v17 setBuffer:*((void *)this + 38) offset:0 atIndex:3];
  [v17 setThreadgroupMemoryLength:1024 atIndex:0];
  uint64_t v26 = 1;
  uint64_t v27 = (v23 >> 8) + 1;
  int64x2_t v28 = vdupq_n_s64(1uLL);
  long long v25 = xmmword_192DCA500;
  [v17 dispatchThreadgroups:&v27 threadsPerThreadgroup:&v25];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v29);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192803108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::softmax_nd_kernel::~softmax_nd_kernel(Espresso::MPSBuffersEngine::softmax_nd_kernel *this)
{
  id v2 = (void *)*((void *)this + 47);
  if (v2)
  {
    *((void *)this + 48) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  uint64_t vars8;

  id v2 = (void *)*((void *)this + 47);
  if (v2)
  {
    *((void *)this + 48) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

BOOL Espresso::MPSBuffersEngine::fill_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  return a3[1] == *a3 || *(unsigned char *)(a1 + 312) == 0;
}

void Espresso::MPSBuffersEngine::fill_kernel::on_resized(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = 0;

  BOOL v5 = *(void **)(a1 + 328);
  *(void *)(a1 + 328) = 0;

  uint64_t v7 = a2;
  uint64_t v6 = *a2;
  if (v7[1] == v6) {
    return;
  }
  if (!*(void *)v6) {
    return;
  }
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(std::__shared_weak_count **)(v6 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(const void **)(a1 + 8);
  if (!v11
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(unsigned int (**)(int *))(*(void *)v9 + 32))(v9))
  {
    if ((*(unsigned int (**)(int *))(*(void *)v9 + 32))(v9) != 1) {
      goto LABEL_15;
    }
    int v15 = "fill_kernel_buffers_f16";
  }
  else
  {
    int v15 = "fill_kernel_buffers_f32";
  }
  uint64_t v16 = [v13[20] kernelForFunction:v15 cacheString:0 withConstants:0];
  id v17 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = v16;

LABEL_15:
  if (!*(void *)(a1 + 320))
  {
    int v37 = "Failed to find kernel for fill_kernel";
    goto LABEL_40;
  }
  int v18 = (*(uint64_t (**)(int *))(*(void *)v9 + 32))(v9);
  int v19 = v9[3];
  uint64_t v20 = v9[2];
  *(_DWORD *)(a1 + 340) = v20;
  int v21 = v9[4];
  *(_DWORD *)(a1 + 344) = v21 * v19;
  *(_DWORD *)(a1 + 364) = v21;
  *(_DWORD *)(a1 + 360) = v19;
  unint64_t v22 = *((void *)v9 + 31);
  *(_DWORD *)(a1 + 3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = *((void *)v9 + 31);
  int v24 = v9[5];
  int v23 = v9[6];
  if (v24 <= 1) {
    int v24 = 1;
  }
  if (v23 <= 1) {
    int v25 = 1;
  }
  else {
    int v25 = v9[6];
  }
  *(_DWORD *)(a1 + 368) = v25 * v24;
  if ((v18 - 1) >= 0xD)
  {
    unint64_t v27 = v22 + v22 * ((4 * v20 - 1) / v22);
    unint64_t v26 = 4;
  }
  else
  {
    unint64_t v26 = qword_192DF6AD8[v18 - 1];
    unint64_t v27 = v22 + v22 * ((v26 * v20 - 1) / v22);
  }
  unint64_t v28 = v27 / v26;
  *(_DWORD *)(a1 + 336) = v28;
  int v29 = v20 - 1;
  if ((int)v20 < 1) {
    int v29 = v20 + 2;
  }
  *(_DWORD *)(a1 + 376) = (v29 >> 2) + 1;
  *(_DWORD *)(a1 + 380) = v28 >> 2;
  int v30 = v9[5];
  if (v30 <= 1) {
    int v31 = 1;
  }
  else {
    int v31 = v9[5];
  }
  *(_DWORD *)(a1 + 384) = v31;
  int v32 = v19 * v20;
  *(_DWORD *)(a1 + 348) = v32;
  int v33 = v21 * v32;
  *(_DWORD *)(a1 + 352) = v33;
  *(_DWORD *)(a1 + 356) = v33 * v30;
  *(_DWORD *)(a1 + 388) = v23;
  uint64_t v34 = [v13[18] newBufferWithBytes:a1 + 336 length:56 options:0];
  int v35 = *(void **)(a1 + 328);
  *(void *)(a1 + 328) = v34;

  if (!*(void *)(a1 + 328))
  {
    int v37 = "Failed to create pb_dst in fill_kernel.";
LABEL_40:
    Espresso::throw_exception_selector<Espresso::generic_error>(v37);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1928035F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::fill_kernel::__launch(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  if (a3[1] != *a3)
  {
    if (!a1[40] || !a1[41])
    {
      (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 80))(a1, a3, a4);
      if (!a1[40]) {
        Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create kernel for fill_kernel.");
      }
      uint64_t v4 = *a3;
    }
    if (*(void *)v4)
    {
      if (v8)
      {
        uint64_t v9 = *(std::__shared_weak_count **)(v4 + 8);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v9 = 0;
LABEL_12:
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v12, *a2);
    id v10 = v12[0];
    id v11 = *((id *)v8 + 21);
    [v10 setComputePipelineState:a1[40]];
    [v10 setBuffer:v11 offset:0 atIndex:0];
    [v10 setBuffer:a1[41] offset:0 atIndex:1];
    [v10 setBytes:a1 + 35 length:36 atIndex:2];

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v12);
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
}

void sub_1928037E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::fill_kernel::~fill_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::MPSBuffersEngine::general_slice_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  return a3[1] - *a3 == 64;
}

void Espresso::MPSBuffersEngine::general_slice_kernel::on_resized(Espresso::MPSBuffersEngine::general_slice_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  uint64_t v6 = (void *)*((void *)this + 48);
  *((void *)this + 48) = 0;

  uint64_t v7 = (void *)*((void *)this + 63);
  *((void *)this + 63) = 0;

  uint64_t v8 = (void *)*((void *)this + 64);
  *((void *)this + 64) = 0;

  uint64_t v9 = *(void *)a3;
  if (*((void *)a3 + 1) == *(void *)a3) {
    return;
  }
  uint64_t v10 = *(void *)a2;
  if (*((void *)a2 + 1) == *(void *)a2) {
    return;
  }
  if (*(void *)v9)
  {
    if (v11)
    {
      uint64_t v12 = *(std::__shared_weak_count **)(v9 + 8);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v10 = *(void *)a2;
      }
      goto LABEL_9;
    }
  }
  else
  {
    id v11 = 0;
  }
  uint64_t v12 = 0;
LABEL_9:
  if (!*(void *)v10) {
    goto LABEL_91;
  }
  if (!v13) {
    goto LABEL_91;
  }
  uint64_t v14 = v13;
  int v15 = *(std::__shared_weak_count **)(v10 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11) {
    goto LABEL_89;
  }
  Espresso::abstract_blob_container::shape((char *)&v88, **(void **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v95, (const Espresso::layer_shape *)&v88, 0);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  Espresso::layer_nd_shape::shape_vector(&v87, (uint64_t)v95);
  uint64_t v16 = v96;
  if (v96 < 1) {
    goto LABEL_38;
  }
  uint64_t v17 = 0;
  begiunsigned int n = v87.__begin_;
  int v19 = (char *)this + 340;
  do
  {
    if (v19[v17])
    {
      uint64_t v20 = &v19[4 * v17];
      if (*((int *)v20 - 5) <= 0) {
        int v21 = begin[v17] - 1;
      }
      else {
        int v21 = 0;
      }
    }
    else
    {
      uint64_t v20 = &v19[4 * v17];
      int v21 = *((_DWORD *)v20 - 15);
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_25;
      }
      v21 += begin[v17];
    }
    *((_DWORD *)v20 - 15) = v21;
    if (v21 < 0) {
      goto LABEL_94;
    }
LABEL_25:
    if (v21 >= begin[v17]) {
LABEL_94:
    }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel: Invalid values in begin_ids");
    ++v17;
  }
  while (v16 != v17);
  uint64_t v22 = 0;
  int v23 = (char *)this + 345;
  do
  {
    if (v23[v22])
    {
      int v24 = &v23[4 * v22];
      if (*(int *)(v24 - 25) < 1) {
        int v25 = -1;
      }
      else {
        int v25 = begin[v22];
      }
      *(_DWORD *)(v24 - 45) = v25;
    }
    else
    {
      unint64_t v26 = &v23[4 * v22];
      int v25 = *(_DWORD *)(v26 - 45);
      if (v25 < 0)
      {
        v25 += begin[v22];
        *(_DWORD *)(v26 - 45) = v25;
        if (v25 < 0) {
LABEL_95:
        }
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel: Invalid values in end_ids");
      }
    }
    if (v25 > begin[v22]) {
      goto LABEL_95;
    }
    ++v22;
  }
  while (v16 != v22);
LABEL_38:
  uint64_t v90 = 0;
  uint64_t v89 = 0;
  int v91 = 0;
  *(void *)&long long v27 = 0x100000001;
  *((void *)&v27 + 1) = 0x100000001;
  long long v92 = v27;
  *(_DWORD *)std::string __p = 1;
  *(_OWORD *)&__p[4] = 0uLL;
  int v94 = 0;
  int v88 = v16;
  if ((int)v16 > 0)
  {
    unint64_t v28 = (char *)this + 280;
    int v29 = (_DWORD *)((char *)this + 4 * (v16 - 1) + 280);
    int v30 = v29[5];
    LODWORD(v89) = *v29;
    LODWORD(v92) = v30;
    *(_DWORD *)&__p[4] = v29[10];
    if (v16 != 1)
    {
      int v31 = (char *)this + 4 * (v16 - 2);
      int v32 = *((_DWORD *)v31 + 75);
      HIDWORD(v89) = *(_DWORD *)&v28[4 * (v16 - 2)];
      DWORD1(v92) = v32;
      *(_DWORD *)&__p[8] = *((_DWORD *)v31 + 80);
      if (v16 >= 3)
      {
        int v33 = (char *)this + 4 * (v16 - 3);
        int v34 = *((_DWORD *)v33 + 75);
        LODWORD(v90) = *(_DWORD *)&v28[4 * (v16 - 3)];
        DWORD2(v92) = v34;
        *(_DWORD *)&unsigned char __p[12] = *((_DWORD *)v33 + 80);
        if (v16 != 3)
        {
          int v35 = (char *)this + 4 * (v16 - 4);
          int v36 = *((_DWORD *)v35 + 75);
          HIDWORD(v90) = *(_DWORD *)&v28[4 * (v16 - 4)];
          HIDWORD(v92) = v36;
          *(_DWORD *)&__p[16] = *((_DWORD *)v35 + 80);
          if (v16 >= 5)
          {
            unsigned int v37 = v16 - 5;
            int v38 = *(_DWORD *)&v28[4 * v37];
            unsigned int v39 = (char *)this + 4 * v37;
            int v40 = *((_DWORD *)v39 + 75);
            int v91 = v38;
            *(_DWORD *)std::string __p = v40;
            int v94 = *((_DWORD *)v39 + 80);
          }
        }
      }
    }
  }
  int v41 = (const void *)*((void *)this + 1);
  if (!v41
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  unsigned int v43 = v42;
  int v44 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v45 = (*(uint64_t (**)(int *))(*(void *)v11 + 32))(v11);
  uint64_t v46 = v11[2];
  *((_DWORD *)this + 99) = v46;
  int v48 = v11[3];
  int v47 = v11[4];
  *((_DWORD *)this + 100) = v47 * v48;
  *((_DWORD *)this + 105) = v47;
  *((_DWORD *)this + 104) = v48;
  unint64_t v49 = *((void *)v11 + 31);
  *((_DWORD *)this + 107) = *((void *)v11 + 31);
  int v51 = v11[5];
  int v50 = v11[6];
  if (v51 <= 1) {
    int v51 = 1;
  }
  if (v50 <= 1) {
    int v52 = 1;
  }
  else {
    int v52 = v11[6];
  }
  *((_DWORD *)this + 106) = v52 * v51;
  if ((v45 - 1) >= 0xD)
  {
    unint64_t v54 = v49 + v49 * ((4 * v46 - 1) / v49);
    unint64_t v53 = 4;
  }
  else
  {
    unint64_t v53 = qword_192DF6AD8[v45 - 1];
    unint64_t v54 = v49 + v49 * ((v53 * v46 - 1) / v49);
  }
  unint64_t v55 = v54 / v53;
  *((_DWORD *)this + 98) = v55;
  int v56 = v46 - 1;
  if ((int)v46 < 1) {
    int v56 = v46 + 2;
  }
  *((_DWORD *)this + 108) = (v56 >> 2) + 1;
  *((_DWORD *)this + 109) = v55 >> 2;
  int v57 = v11[5];
  if (v57 <= 1) {
    int v58 = 1;
  }
  else {
    int v58 = v11[5];
  }
  *((_DWORD *)this + 110) = v58;
  int v59 = v48 * v46;
  *((_DWORD *)this + 101) = v59;
  int v60 = v47 * v59;
  *((_DWORD *)this + 102) = v60;
  *((_DWORD *)this + 103) = v60 * v57;
  *((_DWORD *)this + 111) = v50;
  int v61 = (*(uint64_t (**)(int *))(*(void *)v14 + 32))(v14);
  uint64_t v62 = v14[2];
  *((_DWORD *)this + 113) = v62;
  int v64 = v14[3];
  int v63 = v14[4];
  *((_DWORD *)this + 114) = v63 * v64;
  *((_DWORD *)this + 119) = v63;
  *((_DWORD *)this + 118) = v64;
  unint64_t v65 = *((void *)v14 + 31);
  *((_DWORD *)this + 121) = *((void *)v14 + 31);
  int v67 = v14[5];
  int v66 = v14[6];
  if (v67 <= 1) {
    int v67 = 1;
  }
  if (v66 <= 1) {
    int v68 = 1;
  }
  else {
    int v68 = v14[6];
  }
  *((_DWORD *)this + 120) = v68 * v67;
  if ((v61 - 1) >= 0xD)
  {
    unint64_t v70 = v65 + v65 * ((4 * v62 - 1) / v65);
    unint64_t v69 = 4;
  }
  else
  {
    unint64_t v69 = qword_192DF6AD8[v61 - 1];
    unint64_t v70 = v65 + v65 * ((v69 * v62 - 1) / v65);
  }
  unint64_t v71 = v70 / v69;
  *((_DWORD *)this + std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112) = v71;
  int v72 = v62 - 1;
  if ((int)v62 < 1) {
    int v72 = v62 + 2;
  }
  *((_DWORD *)this + 122) = (v72 >> 2) + 1;
  *((_DWORD *)this + 123) = v71 >> 2;
  int v73 = v14[5];
  if (v73 <= 1) {
    int v74 = 1;
  }
  else {
    int v74 = v14[5];
  }
  *((_DWORD *)this + 1std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v74;
  int v75 = v64 * v62;
  *((_DWORD *)this + 115) = v75;
  int v76 = v63 * v75;
  *((_DWORD *)this + 116) = v76;
  *((_DWORD *)this + 117) = v76 * v73;
  *((_DWORD *)this + 125) = v66;
  if (!*((void *)this + 65))
  {
    uint64_t v77 = [v43[18] newBufferWithBytes:&v88 length:64 options:0];
    uint64_t v78 = (void *)*((void *)this + 65);
    *((void *)this + 65) = v77;
  }
  if (!*((void *)this + 63))
  {
    uint64_t v79 = [v43[18] newBufferWithBytes:(char *)this + 392 length:56 options:0];
    id v80 = (void *)*((void *)this + 63);
    *((void *)this + 63) = v79;
  }
  if (!*((void *)this + 64))
  {
    uint64_t v81 = [v43[18] newBufferWithBytes:(char *)this + 448 length:56 options:0];
    int v82 = (void *)*((void *)this + 64);
    *((void *)this + 64) = v81;
  }
  if ((*(unsigned int (**)(void))(***(void ***)a2 + 32))(**(void **)a2) == 1)
  {
    unint64_t v83 = "general_slice_buffers_f16";
    goto LABEL_84;
  }
  if (!(*(unsigned int (**)(void))(***(void ***)a2 + 32))(**(void **)a2))
  {
    unint64_t v83 = "general_slice_buffers_f32";
LABEL_84:
    uint64_t v84 = [v43[20] kernelForFunction:v83 cacheString:0 withConstants:0];
    std::string v85 = (void *)*((void *)this + 48);
    *((void *)this + 48) = v84;
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  if (v87.__begin_)
  {
    v87.__end_ = v87.__begin_;
    operator delete(v87.__begin_);
  }
LABEL_89:
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
LABEL_91:
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192804060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::general_slice_kernel::blob_options(Espresso::MPSBuffersEngine::general_slice_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_192804250(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::general_slice_kernel::__launch(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a4[1] == *a4) {
    return;
  }
  if ((!a1[48] || !a1[65] || !a1[63] || !a1[64])
    && (((*(void (**)(void *, uint64_t *, uint64_t *))(*a1 + 80))(a1, a3, a4), !a1[48]) || !a1[65])
    || !a1[63]
    || !a1[64])
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("failed to either create kernel or allocate buffers in general_slice_kernel.");
  }
  uint64_t v8 = (const void *)a1[1];
  if (!v8
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[2];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a4;
  if (!*(void *)v10)
  {
    uint64_t v11 = 0;
    goto LABEL_19;
  }
  if (!v11)
  {
LABEL_19:
    uint64_t v12 = 0;
    goto LABEL_20;
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_20:
  uint64_t v13 = *a3;
  if (*(void *)v13)
  {
    if (v14)
    {
      int v15 = *(std::__shared_weak_count **)(v13 + 8);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int v15 = 0;
LABEL_26:
  id v16 = *((id *)v11 + 21);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v20, *a2);
  id v17 = v20[0];
  id v18 = v14[21];
  [v17 setComputePipelineState:a1[48]];
  [v17 setBuffer:v16 offset:0 atIndex:0];
  [v17 setBuffer:v18 offset:0 atIndex:1];
  [v17 setBuffer:a1[63] offset:0 atIndex:2];
  [v17 setBuffer:a1[64] offset:0 atIndex:3];
  [v17 setBuffer:a1[65] offset:0 atIndex:4];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v20);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1928045CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::general_slice_kernel::~general_slice_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::instancenorm_1d_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_instancenorm_1d_kernel::kernel_type_str(Espresso::generic_instancenorm_1d_kernel *this)
{
  return "instancenorm_1d";
}

uint64_t Espresso::MPSBuffersEngine::instancenorm_1d_kernel::supports_weight_key()
{
  return 1;
}

void Espresso::MPSBuffersEngine::instancenorm_1d_kernel::on_resized(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = 0;

  uint64_t v8 = a3;
  uint64_t v7 = *a3;
  if (v8[1] == v7) {
    return;
  }
  if (a2[1] == *a2) {
    return;
  }
  if (!*(void *)v7) {
    return;
  }
  if (!v9) {
    return;
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v7 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = (*(uint64_t (**)(void *))(*(void *)v9 + 32))(v9);
  uint64_t v12 = *(const void **)(a1 + 8);
  if (!v12
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v14 = v13;
  int v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(_DWORD *)(a1 + 280))
  {
    if (v11 == 1)
    {
      id v16 = "instancenorm_1d_tf_layernorm_buffers_f16";
    }
    else
    {
      if (v11) {
        goto LABEL_21;
      }
      id v16 = "instancenorm_1d_tf_layernorm_buffers_f32";
    }
  }
  else if (v11)
  {
    if (v11 != 1) {
      goto LABEL_21;
    }
    id v16 = "instancenorm_1d_buffers_f16";
  }
  else
  {
    id v16 = "instancenorm_1d_buffers_f32";
  }
  uint64_t v17 = [v13[20] kernelForFunction:v16 cacheString:0 withConstants:0];
  id v18 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = v17;

LABEL_21:
  if (!*(void *)(a1 + 336)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to find kernel for instancenorm_1d in buffers engine.");
  }
  uint64_t v19 = *a2;
  if (*(void *)v19)
  {
    if (v20)
    {
      int v21 = *(std::__shared_weak_count **)(v19 + 8);
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v21 = 0;
    }
  }
  else
  {
    int v21 = 0;
    uint64_t v20 = 0;
  }
  int v22 = (*(uint64_t (**)(int *))(*(void *)v20 + 32))(v20);
  int v23 = v20[3];
  uint64_t v24 = v20[2];
  *(_DWORD *)(a1 + 364) = v24;
  int v25 = v20[4];
  *(_DWORD *)(a1 + 368) = v25 * v23;
  *(_DWORD *)(a1 + 388) = v25;
  *(_DWORD *)(a1 + 384) = v23;
  unint64_t v26 = *((void *)v20 + 31);
  *(_DWORD *)(a1 + 396) = *((void *)v20 + 31);
  int v28 = v20[5];
  int v27 = v20[6];
  if (v28 <= 1) {
    int v28 = 1;
  }
  if (v27 <= 1) {
    int v29 = 1;
  }
  else {
    int v29 = v20[6];
  }
  *(_DWORD *)(a1 + 392) = v29 * v28;
  uint64_t v30 = 4 * v24;
  if ((v22 - 1) >= 0xD)
  {
    unint64_t v32 = v26 + v26 * ((v30 - 1) / v26);
    unint64_t v31 = 4;
  }
  else
  {
    unint64_t v31 = qword_192DF6AD8[v22 - 1];
    unint64_t v32 = v26 + v26 * ((v31 * v24 - 1) / v26);
  }
  unint64_t v33 = v32 / v31;
  *(_DWORD *)(a1 + 360) = v33;
  int v34 = v24 - 1;
  if ((int)v24 < 1) {
    int v34 = v24 + 2;
  }
  *(_DWORD *)(a1 + 400) = (v34 >> 2) + 1;
  *(_DWORD *)(a1 + 404) = v33 >> 2;
  int v35 = v20[5];
  if (v35 <= 1) {
    int v36 = 1;
  }
  else {
    int v36 = v20[5];
  }
  *(_DWORD *)(a1 + 408) = v36;
  int v37 = v23 * v24;
  *(_DWORD *)(a1 + 3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = v37;
  int v38 = v25 * v37;
  *(_DWORD *)(a1 + 376) = v38;
  *(_DWORD *)(a1 + 380) = v38 * v35;
  *(_DWORD *)(a1 + 412) = v27;
  unint64_t v39 = v26 + v26 * ((v30 - 1) / v26);
  if (!*(void *)(a1 + 344))
  {
    if (!*(void *)(a1 + 304))
    {
      unint64_t v55 = "Could not find wGamma in instancenorm_1d";
      goto LABEL_64;
    }
    uint64_t v40 = [v14[18] newBufferWithLength:(((v39 & 0x3FFFFFFFCLL) - 1) & 0xFFFFFFFFFFFFFFF0) + 16 options:0];
    int v41 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v40;

    int v42 = (_DWORD *)[*(id *)(a1 + 344) contents];
    uint64_t v43 = *(void *)(a1 + 304);
    uint64_t v44 = *(int *)(v43 + 8);
    if (v44)
    {
      int v45 = *(int **)(v43 + 16);
      do
      {
        int v46 = *v45++;
        *v42++ = v46;
        --v44;
      }
      while (v44);
    }
  }
  if (!*(void *)(a1 + 352))
  {
    if (*(void *)(a1 + 320))
    {
      uint64_t v47 = [v14[18] newBufferWithLength:(((v39 & 0x3FFFFFFFCLL) - 1) & 0xFFFFFFFFFFFFFFF0) + 16 options:0];
      int v48 = *(void **)(a1 + 352);
      *(void *)(a1 + 352) = v47;

      unint64_t v49 = (_DWORD *)[*(id *)(a1 + 352) contents];
      uint64_t v50 = *(void *)(a1 + 320);
      uint64_t v51 = *(int *)(v50 + 8);
      if (v51)
      {
        int v52 = *(int **)(v50 + 16);
        do
        {
          int v53 = *v52++;
          *v49++ = v53;
          --v51;
        }
        while (v51);
      }
      goto LABEL_51;
    }
    unint64_t v55 = "Could not find wBeta in instancenorm_1d";
LABEL_64:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v55);
  }
LABEL_51:
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192804BDC(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void Espresso::MPSBuffersEngine::instancenorm_1d_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*(void *)(a4 + 8) == *(void *)a4) {
    return;
  }
  if (!*(void *)(a1 + 336) || !*(void *)(a1 + 344) || !*(void *)(a1 + 352))
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 80))(a1, a3, a4);
    if (!*(void *)(a1 + 344)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("instancenorm_1d_kernel: wGammaBuffer is nil.");
    }
    if (!*(void *)(a1 + 352)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("instancenorm_1d_kernel: wBetaBuffer is nil.");
    }
  }
  if (!*(void *)(a1 + 336)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("failed to create kernel in instancenorm_1d_kernel.");
  }
  Espresso::abstract_blob_container::shape((char *)v25, **(void **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v28, (const Espresso::layer_shape *)v25, 0);
  if (__p)
  {
    int v27 = __p;
    operator delete(__p);
  }
  if ((!v29 || v28[v29 - 1] <= 1u) && (!*(_DWORD *)(a1 + 280) || *(_DWORD *)(a1 + 288))) {
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("instancenorm_1d_kernel: inner dimension must have size > 1");
  }
  uint64_t v8 = *(const void **)(a1 + 8);
  if (!v8
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(uint64_t **)a4;
  if (!*v10)
  {
    int v11 = 0;
    goto LABEL_23;
  }
  if (!v11)
  {
LABEL_23:
    uint64_t v12 = 0;
    goto LABEL_24;
  }
  uint64_t v12 = (std::__shared_weak_count *)v10[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_24:
  uint64_t v13 = *a3;
  if (*(void *)v13)
  {
    if (v14)
    {
      int v15 = *(std::__shared_weak_count **)(v13 + 8);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int v15 = 0;
LABEL_30:
  id v16 = v11[21];
  id v17 = v14[21];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v25, *a2);
  id v18 = v25[0];
  [v18 setComputePipelineState:*(void *)(a1 + 336)];
  [v18 setBuffer:v16 offset:0 atIndex:0];
  [v18 setBuffer:v17 offset:0 atIndex:1];
  [v18 setBytes:a1 + 360 length:56 atIndex:2];
  [v18 setBytes:a1 + 280 length:20 atIndex:3];
  [v18 setBuffer:*(void *)(a1 + 344) offset:0 atIndex:4];
  [v18 setBuffer:*(void *)(a1 + 352) offset:0 atIndex:5];
  [v18 setThreadgroupMemoryLength:1024 atIndex:0];
  [v18 setThreadgroupMemoryLength:1024 atIndex:1];
  uint64_t v19 = ((*(_DWORD *)(a1 + 368) - 1) >> 4) + 1;
  uint64_t v20 = (*(_DWORD *)(a1 + 408) * *(_DWORD *)(a1 + 412));
  v24[0] = 1;
  v24[1] = v19;
  uint64_t v24[2] = v20;
  int64x2_t v22 = vdupq_n_s64(0x10uLL);
  uint64_t v23 = 1;
  [v18 dispatchThreadgroups:v24 threadsPerThreadgroup:&v22];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_19280508C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::instancenorm_1d_kernel::~instancenorm_1d_kernel(id *this)
{
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel((Espresso::generic_instancenorm_1d_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel((Espresso::generic_instancenorm_1d_kernel *)this);
}

BOOL Espresso::MPSBuffersEngine::split_nd_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(int *)(a1 + 288) < 1 || *(_DWORD *)(a1 + 292) < 1;
}

void Espresso::MPSBuffersEngine::split_nd_kernel::on_resized(std::vector<int> *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  std::vector<int>::pointer end = this[33].__end_;
  this[33].__end_ = 0;

  uint64_t v8 = a2;
  uint64_t v7 = *(void *)a2;
  if (*((void *)v8 + 1) == v7) {
    return;
  }
  uint64_t v9 = *(void *)a3;
  if (*((void *)a3 + 1) == *(void *)a3) {
    return;
  }
  if (!*(void *)v7)
  {
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  if (!v10)
  {
LABEL_8:
    int v11 = 0;
    goto LABEL_9;
  }
  int v11 = *(std::__shared_weak_count **)(v7 + 8);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(void *)a3;
  }
LABEL_9:
  if (*(void *)v9)
  {
    if (v12)
    {
      uint64_t v13 = *(std::__shared_weak_count **)(v9 + 8);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0;
LABEL_15:
  std::vector<int>::pointer v14 = this->__end_;
  if (!v14
  {
    exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  value = (std::__shared_weak_count *)this->__end_cap_.__value_;
  if (value) {
    atomic_fetch_add_explicit(&value->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10 && v12)
  {
    int v17 = (int)this[33].__end_cap_.__value_;
    if (v17 == 1)
    {
      id v18 = @"split_nd_f16_buffers";
    }
    else
    {
      if (v17) {
        Espresso::throw_exception_selector<Espresso::generic_error>("unsupported compute path in split_nd kernel");
      }
      id v18 = @"split_nd_f32_buffers";
    }
    uint64_t v19 = Espresso::context_metal::kernel_for_function(v15, &v18->isa);
    std::vector<int>::pointer v20 = this[33].__end_;
    this[33].__end_ = (std::vector<int>::pointer)v19;

    std::vector<unsigned long>::vector(&v37, SHIDWORD(this[11].__end_cap_.__value_));
    int v21 = this + 34;
    begiunsigned int n = this[34].__begin_;
    if (begin)
    {
      this[34].__end_ = begin;
      operator delete(begin);
      v21->__begin_ = 0;
      this[34].__end_ = 0;
      this[34].__end_cap_.__value_ = 0;
    }
    this[34] = v37;
    int v23 = (int)this[11].__end_cap_.__value_;
    Espresso::abstract_blob_container::shape((char *)&v37, **(void **)a3);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v40, (const Espresso::layer_shape *)&v37, 0);
    if (__p)
    {
      unint64_t v39 = __p;
      operator delete(__p);
    }
    Espresso::layer_nd_shape::shape_vector(&v37, (uint64_t)v40);
    if (v23 < 0 && (v23 += v41, v23 < 0) || v23 >= (unint64_t)(v37.__end_ - v37.__begin_)) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid value of the argument 'axis'.");
    }
    int v24 = v37.__begin_[v23];
    unint64_t value_high = SHIDWORD(this[11].__end_cap_.__value_);
    std::vector<unsigned long>::resize(v21, value_high);
    if ((int)value_high >= 1)
    {
      unint64_t v26 = 0;
      unint64_t v27 = v24 / value_high;
      unint64_t v28 = v24 % value_high;
      std::vector<int>::pointer v29 = v21->__begin_;
      int64x2_t v30 = (int64x2_t)xmmword_192DBFE30;
      uint64x2_t v31 = (uint64x2_t)vdupq_n_s64((unint64_t)value_high - 1);
      int64x2_t v32 = vdupq_n_s64(2uLL);
      do
      {
        int32x2_t v33 = vmovn_s64((int64x2_t)vcgeq_u64(v31, (uint64x2_t)v30));
        if (v33.i8[0])
        {
          if (v28 <= v26) {
            unint64_t v34 = v24 / value_high;
          }
          else {
            unint64_t v34 = v27 + 1;
          }
          *(void *)&v29[2 * v26] = v34;
        }
        if (v33.i8[4])
        {
          if (v28 <= v26 + 1) {
            unint64_t v35 = v24 / value_high;
          }
          else {
            unint64_t v35 = v27 + 1;
          }
          *(void *)&v29[2 * v26 + 2] = v35;
        }
        v26 += 2;
        int64x2_t v30 = vaddq_s64(v30, v32);
      }
      while (((value_high + 1) & 0x1FFFFFFFELL) != v26);
    }
    if (v37.__begin_)
    {
      v37.__end_ = v37.__begin_;
      operator delete(v37.__begin_);
    }
  }
  if (value) {
    nitro::nitro_function::nitro_function(value);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_1928055B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (v17)
  {
    nitro::nitro_function::nitro_function(v17);
    if (!v16)
    {
LABEL_5:
      if (!v15) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v16)
  {
    goto LABEL_5;
  }
  nitro::nitro_function::nitro_function(v16);
  if (!v15) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_6:
  nitro::nitro_function::nitro_function(v15);
  goto LABEL_7;
}

void sub_192805630()
{
  if (v0) {
    JUMPOUT(0x192805620);
  }
  JUMPOUT(0x192805600);
}

void sub_19280563C()
{
  __cxa_free_exception(v1);
  if (v0) {
    JUMPOUT(0x192805620);
  }
  JUMPOUT(0x192805600);
}

void Espresso::MPSBuffersEngine::split_nd_kernel::blob_options(Espresso::MPSBuffersEngine::split_nd_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    uint64_t v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_1928057C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::split_nd_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4 = *a4;
  if (a4[1] != *a4 && a3[1] != *a3)
  {
    if (!*(void *)(a1 + 800))
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)a1 + 80))(a1, a3, a4);
      if (!*(void *)(a1 + 800)) {
        Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
      }
      uint64_t v4 = *a4;
    }
    if (*v4)
    {
      if (v8)
      {
        uint64_t v9 = (std::__shared_weak_count *)v4[1];
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    id v108 = *((id *)v8 + 21);
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v154, *a2);
    id v10 = v154[0];
    uint64_t v12 = *a3;
    uint64_t v11 = a3[1];
    int v13 = (*(uint64_t (**)(int *))(*(void *)v8 + 32))(v8);
    int v14 = v8[3];
    uint64_t v15 = v8[2];
    v147[0] = v8[2];
    v147[1] = v14;
    int v16 = v8[4];
    int32x2_t v17 = vmax_s32(*(int32x2_t *)(v8 + 5), (int32x2_t)0x100000001);
    int32x2_t v148 = v17;
    v147[2] = v16;
    int v149 = 1;
    unint64_t v107 = a4;
    int v106 = v9;
    if ((v13 - 1) >= 0xD)
    {
      unint64_t v19 = *((void *)v8 + 31) + *((void *)v8 + 31) * ((unint64_t)(4 * v15 - 1) / *((void *)v8 + 31));
      unint64_t v18 = 4;
    }
    else
    {
      unint64_t v18 = qword_192DF6AD8[v13 - 1];
      unint64_t v19 = *((void *)v8 + 31) + *((void *)v8 + 31) * ((v18 * v15 - 1) / *((void *)v8 + 31));
    }
    int v150 = v19 / v18;
    int v151 = v14 * v150;
    int v152 = v14 * v150 * v16;
    int v153 = v152 * v17.i32[0];
    if (v11 != v12)
    {
      uint64_t v20 = 0;
      unint64_t v21 = (v11 - v12) >> 4;
      while (1)
      {
        uint64_t v143 = 0;
        uint64_t v144 = 0;
        int v146 = 0;
        uint64_t v145 = 0;
        uint64_t v22 = *a3 + 16 * v20;
        int v24 = *(std::__shared_weak_count **)(v22 + 8);
        if (v24)
        {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          id v109 = v23[21];
          nitro::nitro_function::nitro_function(v24);
        }
        else
        {
          id v109 = v23[21];
        }
        uint64_t v25 = *a3 + 16 * v20;
        unint64_t v27 = *(std::__shared_weak_count **)(v25 + 8);
        if (v27)
        {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          id v28 = v26[21];
          nitro::nitro_function::nitro_function(v27);
        }
        else
        {
          id v28 = v26[21];
        }
        uint64_t v29 = *a3 + 16 * v20;
        uint64x2_t v31 = *(std::__shared_weak_count **)(v29 + 8);
        if (v31)
        {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          id v112 = v30[21];
          nitro::nitro_function::nitro_function(v31);
        }
        else
        {
          id v112 = v30[21];
        }
        uint64_t v32 = *a3 + 16 * v20;
        unint64_t v34 = *(std::__shared_weak_count **)(v32 + 8);
        if (v34)
        {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          id v111 = v33[21];
          nitro::nitro_function::nitro_function(v34);
        }
        else
        {
          id v111 = v33[21];
        }
        uint64_t v35 = *a3;
        int v36 = *(const void **)(*a3 + 16 * v20);
        if (v36)
        {
          if (v37)
          {
            int v38 = *(std::__shared_weak_count **)(v35 + 16 * v20 + 8);
            if (v38)
            {
              atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
              int v36 = *(const void **)(*a3 + 16 * v20);
            }
          }
          else
          {
            int v38 = 0;
          }
        }
        else
        {
          int v38 = 0;
          std::vector<int> v37 = 0;
        }
        int v39 = (*(uint64_t (**)(const void *))(*(void *)v36 + 32))(v36);
        signed int v40 = *((_DWORD *)v37 + 2);
        if ((v39 - 1) >= 0xD)
        {
          unint64_t v42 = *((void *)v37 + 31)
              + *((void *)v37 + 31) * ((unint64_t)(4 * v40 - 1) / *((void *)v37 + 31));
          unint64_t v41 = 4;
        }
        else
        {
          unint64_t v41 = qword_192DF6AD8[v39 - 1];
          unint64_t v42 = *((void *)v37 + 31) + *((void *)v37 + 31) * ((v41 * v40 - 1) / *((void *)v37 + 31));
        }
        int v43 = *((_DWORD *)v37 + 3);
        int v44 = *((_DWORD *)v37 + 4);
        int32x2_t v137 = vmax_s32(*(int32x2_t *)(v37 + 20), (int32x2_t)0x100000001);
        unsigned int v134 = v40;
        int v135 = v43;
        int v136 = v44;
        int v138 = 1;
        int v139 = v42 / v41;
        int v140 = v43 * v139;
        int v141 = v43 * v139 * v44;
        __int32 v142 = v141 * v137.i32[0];
        if (v38) {
          nitro::nitro_function::nitro_function(v38);
        }
        if (v21 < 2)
        {
          int v45 = 0;
          LOBYTE(v46) = 0;
          uint64_t v47 = 1;
          goto LABEL_76;
        }
        uint64_t v48 = v20 + 1;
        uint64_t v49 = *a3 + 16 * (v20 + 1);
        uint64_t v51 = *(std::__shared_weak_count **)(v49 + 8);
        if (v51)
        {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          id v52 = v50[21];

          nitro::nitro_function::nitro_function(v51);
          id v28 = v52;
        }
        else
        {
          id v53 = v50[21];

          id v28 = v53;
        }
        uint64_t v54 = *a3;
        unint64_t v55 = *(const void **)(*a3 + 16 * v48);
        if (!v55) {
          break;
        }
        if (!v56) {
          goto LABEL_50;
        }
        int v57 = *(std::__shared_weak_count **)(v54 + 16 * v48 + 8);
        if (v57)
        {
          atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v54 = *a3;
        }
LABEL_51:
        int v58 = (*(uint64_t (**)(void))(**(void **)(v54 + 16 * v20) + 32))(*(void *)(v54 + 16 * v20));
        int v59 = *((_DWORD *)v56 + 2);
        if ((v58 - 1) >= 0xD)
        {
          unint64_t v61 = *((void *)v56 + 31)
              + *((void *)v56 + 31) * ((unint64_t)(4 * v59 - 1) / *((void *)v56 + 31));
          unint64_t v60 = 4;
        }
        else
        {
          unint64_t v60 = qword_192DF6AD8[v58 - 1];
          unint64_t v61 = *((void *)v56 + 31) + *((void *)v56 + 31) * ((v60 * v59 - 1) / *((void *)v56 + 31));
        }
        int v62 = *((_DWORD *)v56 + 3);
        int v63 = *((_DWORD *)v56 + 4);
        int32x2_t v128 = vmax_s32(*(int32x2_t *)(v56 + 20), (int32x2_t)0x100000001);
        v127[0] = v59;
        v127[1] = v62;
        v127[2] = v63;
        int v129 = 1;
        int v130 = v61 / v60;
        int v131 = v62 * v130;
        int v132 = v62 * v130 * v63;
        __int32 v133 = v132 * v128.i32[0];
        if (v57) {
          nitro::nitro_function::nitro_function(v57);
        }
        if (v21 < 3)
        {
          int v45 = 0;
          LOBYTE(v46) = 0;
          uint64_t v47 = 2;
          goto LABEL_76;
        }
        uint64_t v64 = v20 + 2;
        uint64_t v65 = *a3 + 16 * (v20 + 2);
        int v67 = *(std::__shared_weak_count **)(v65 + 8);
        if (v67)
        {
          atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
          id v68 = v66[21];

          nitro::nitro_function::nitro_function(v67);
          id v112 = v68;
        }
        else
        {
          id v69 = v66[21];

          id v112 = v69;
        }
        uint64_t v70 = *a3;
        unint64_t v71 = *(const void **)(*a3 + 16 * v64);
        if (v71)
        {
          if (v72)
          {
            int v73 = *(std::__shared_weak_count **)(v70 + 16 * v64 + 8);
            if (v73)
            {
              atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v70 = *a3;
            }
            goto LABEL_67;
          }
        }
        else
        {
          int v72 = 0;
        }
        int v73 = 0;
LABEL_67:
        int v74 = (*(uint64_t (**)(void))(**(void **)(v70 + 16 * v20) + 32))(*(void *)(v70 + 16 * v20));
        int v75 = *((_DWORD *)v72 + 2);
        if ((v74 - 1) >= 0xD)
        {
          unint64_t v77 = *((void *)v72 + 31)
              + *((void *)v72 + 31) * ((unint64_t)(4 * v75 - 1) / *((void *)v72 + 31));
          unint64_t v76 = 4;
        }
        else
        {
          unint64_t v76 = qword_192DF6AD8[v74 - 1];
          unint64_t v77 = *((void *)v72 + 31) + *((void *)v72 + 31) * ((v76 * v75 - 1) / *((void *)v72 + 31));
        }
        int v78 = *((_DWORD *)v72 + 3);
        int v79 = *((_DWORD *)v72 + 4);
        int32x2_t v121 = vmax_s32(*(int32x2_t *)(v72 + 20), (int32x2_t)0x100000001);
        v120[0] = v75;
        v120[1] = v78;
        v120[2] = v79;
        int v122 = 1;
        int v123 = v77 / v76;
        int v124 = v78 * v123;
        int v125 = v78 * v123 * v79;
        __int32 v126 = v125 * v121.i32[0];
        if (v73) {
          nitro::nitro_function::nitro_function(v73);
        }
        if (v21 >= 4)
        {
          uint64_t v80 = v20 + 3;
          uint64_t v81 = *a3 + 16 * (v20 + 3);
          unint64_t v83 = *(std::__shared_weak_count **)(v81 + 8);
          if (v83)
          {
            atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
            id v84 = v82[21];

            nitro::nitro_function::nitro_function(v83);
            id v111 = v84;
          }
          else
          {
            id v96 = v82[21];

            id v111 = v96;
          }
          uint64_t v97 = *a3;
          int v98 = *(const void **)(*a3 + 16 * v80);
          if (v98)
          {
            if (v99)
            {
              int v46 = *(std::__shared_weak_count **)(v97 + 16 * v80 + 8);
              if (v46)
              {
                atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v97 = *a3;
              }
              goto LABEL_105;
            }
          }
          else
          {
            int v99 = 0;
          }
          int v46 = 0;
LABEL_105:
          std::string v85 = v109;
          int v100 = (*(uint64_t (**)(void))(**(void **)(v97 + 16 * v20) + 32))(*(void *)(v97 + 16 * v20));
          int v101 = *((_DWORD *)v99 + 2);
          if ((v100 - 1) >= 0xD)
          {
            unint64_t v103 = *((void *)v99 + 31)
                 + *((void *)v99 + 31) * ((unint64_t)(4 * v101 - 1) / *((void *)v99 + 31));
            unint64_t v102 = 4;
          }
          else
          {
            unint64_t v102 = qword_192DF6AD8[v100 - 1];
            unint64_t v103 = *((void *)v99 + 31) + *((void *)v99 + 31) * ((v102 * v101 - 1) / *((void *)v99 + 31));
          }
          int v104 = *((_DWORD *)v99 + 3);
          int v105 = *((_DWORD *)v99 + 4);
          int32x2_t v114 = vmax_s32(*(int32x2_t *)(v99 + 20), (int32x2_t)0x100000001);
          v113[0] = v101;
          v113[1] = v104;
          _OWORD v113[2] = v105;
          int v45 = 1;
          int v115 = 1;
          int v116 = v103 / v102;
          int v117 = v104 * v116;
          int v118 = v104 * v116 * v105;
          __int32 v119 = v118 * v114.i32[0];
          if (v46)
          {
            nitro::nitro_function::nitro_function(v46);
            LOBYTE(v46) = 0;
          }
          uint64_t v47 = 4;
          goto LABEL_77;
        }
        int v45 = 1;
        LOBYTE(v46) = 1;
        uint64_t v47 = 3;
LABEL_76:
        std::string v85 = v109;
LABEL_77:
        LODWORD(v143) = v47;
        int v86 = *(_DWORD *)(a1 + 280);
        Espresso::abstract_blob_container::shape((char *)&v155, **v107);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v158, (const Espresso::layer_shape *)&v155, 0);
        if (v156)
        {
          int v157 = v156;
          operator delete(v156);
        }
        Espresso::layer_nd_shape::shape_vector(&v155, (uint64_t)v158);
        if (v86 < 0 && (v86 += v159, v86 < 0) || v86 >= (unint64_t)(v155.__end_ - v155.__begin_)) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid value of the argument 'axis'.");
        }
        uint64_t v87 = *(void *)(a1 + 816);
        int v88 = 0;
        if (v20)
        {
          uint64_t v89 = 8 * v20;
          uint64_t v90 = *(int **)(a1 + 816);
          do
          {
            int v91 = *v90;
            v90 += 2;
            v88 += v91;
            v89 -= 8;
          }
          while (v89);
        }
        HIDWORD(v143) = v159 + ~v86;
        int v92 = 1;
        switch(HIDWORD(v143))
        {
          case 0:
            break;
          case 1:
            int v92 = v150;
            break;
          case 2:
            int v92 = v151;
            break;
          case 3:
            int v92 = v152;
            break;
          case 4:
            int v92 = v153;
            break;
          default:
            Espresso::throw_exception_selector<Espresso::generic_error>("axis not supported in split_nd mpsbuffers.");
        }
        int v146 = v92;
        LODWORD(v143) = v47;
        LODWORD(v144) = v92 * v88;
        if (v21 >= 2)
        {
          int v93 = v88 + *(_DWORD *)(v87 + 8 * v20);
          HIDWORD(v144) = v92 * v93;
          if (v45)
          {
            uint64_t v94 = v87 + 8 * v20;
            int v95 = v93 + *(_DWORD *)(v94 + 8);
            LODWORD(v145) = v92 * v95;
            if ((v46 & 1) == 0) {
              HIDWORD(v145) = v92 * (v95 + *(_DWORD *)(v94 + 16));
            }
          }
        }
        if (v155.__begin_)
        {
          v155.__end_ = v155.__begin_;
          operator delete(v155.__begin_);
        }
        [v10 setComputePipelineState:*(void *)(a1 + 800)];
        [v10 setBuffer:v108 offset:0 atIndex:0];
        [v10 setBuffer:v85 offset:0 atIndex:1];
        [v10 setBuffer:v28 offset:0 atIndex:2];
        [v10 setBuffer:v112 offset:0 atIndex:3];
        [v10 setBuffer:v111 offset:0 atIndex:4];
        [v10 setBytes:v147 length:40 atIndex:5];
        [v10 setBytes:&v134 length:40 atIndex:6];
        [v10 setBytes:v127 length:40 atIndex:7];
        [v10 setBytes:v120 length:40 atIndex:8];
        [v10 setBytes:v113 length:40 atIndex:9];
        [v10 setBytes:&v143 length:28 atIndex:10];
        v20 += v47;
        v21 -= v47;

        if (!v21) {
          goto LABEL_111;
        }
      }
      int v56 = 0;
LABEL_50:
      int v57 = 0;
      goto LABEL_51;
    }
LABEL_111:

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v154);
    if (v106) {
      nitro::nitro_function::nitro_function(v106);
    }
  }
}

void sub_192806644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v15 - 208));
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::split_nd_kernel::~split_nd_kernel(Espresso::MPSBuffersEngine::split_nd_kernel *this)
{
  *(void *)this = &unk_1EE33C270;
  id v2 = (void *)*((void *)this + 102);
  if (v2)
  {
    *((void *)this + 103) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE33C270;
  id v2 = (void *)*((void *)this + 102);
  if (v2)
  {
    *((void *)this + 103) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

BOOL Espresso::MPSBuffersEngine::tile_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  return a3[1] - *a3 < 0x80uLL;
}

void Espresso::MPSBuffersEngine::tile_kernel::on_resized(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = 0;

  uint64_t v8 = a2;
  uint64_t v7 = *a2;
  if (v8[1] != v7)
  {
    uint64_t v9 = *a3;
    if (a3[1] != *a3)
    {
      if (*(void *)v7)
      {
        if (v10)
        {
          uint64_t v11 = *(std::__shared_weak_count **)(v7 + 8);
          if (v11)
          {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v9 = *a3;
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
        id v10 = 0;
      }
      if (*(void *)v9)
      {
        if (v12)
        {
          int v13 = *(std::__shared_weak_count **)(v9 + 8);
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          int v13 = 0;
        }
      }
      else
      {
        int v13 = 0;
        uint64_t v12 = 0;
      }
      int v14 = *(const void **)(a1 + 8);
      if (!v14
      {
        exceptiounsigned int n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
      }
      int v16 = v15;
      int32x2_t v17 = *(std::__shared_weak_count **)(a1 + 16);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10 && v12)
      {
        if ((*(unsigned int (**)(char *))(*(void *)v10 + 32))(v10))
        {
          if ((*(unsigned int (**)(char *))(*(void *)v10 + 32))(v10) != 1) {
            Espresso::throw_exception_selector<Espresso::generic_error>("unsupported compute path in tile_kernel kernel");
          }
          unint64_t v18 = @"tile_kernel_f16_buffers";
        }
        else
        {
          unint64_t v18 = @"tile_kernel_f32_buffers";
        }
        uint64_t v19 = Espresso::context_metal::kernel_for_function(v16, &v18->isa);
        uint64_t v20 = *(void **)(a1 + 304);
        *(void *)(a1 + 304) = v19;

        if (!*(void *)(a1 + 304)) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to find kernel in tile_kernel MPSBuffers");
        }
        int v21 = (*(uint64_t (**)(char *))(*(void *)v12 + 32))(v12);
        int v22 = *((_DWORD *)v12 + 2);
        int v23 = *((_DWORD *)v12 + 3);
        int v24 = *((_DWORD *)v12 + 4);
        int32x2_t v25 = vmax_s32(*(int32x2_t *)(v12 + 20), (int32x2_t)0x100000001);
        if ((v21 - 1) >= 0xD)
        {
          unint64_t v27 = *((void *)v12 + 31)
              + *((void *)v12 + 31) * ((unint64_t)(4 * v22 - 1) / *((void *)v12 + 31));
          unint64_t v26 = 4;
        }
        else
        {
          unint64_t v26 = qword_192DF6AD8[v21 - 1];
          unint64_t v27 = *((void *)v12 + 31) + *((void *)v12 + 31) * ((v26 * v22 - 1) / *((void *)v12 + 31));
        }
        unint64_t v28 = v27 / v26;
        int v29 = v23 * v28 * v24;
        *(_DWORD *)(a1 + 352) = v22;
        *(_DWORD *)(a1 + 356) = v23;
        *(_DWORD *)(a1 + 360) = v24;
        *(int32x2_t *)(a1 + 364) = v25;
        *(_DWORD *)(a1 + 3std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72) = 1;
        *(_DWORD *)(a1 + 376) = v28;
        *(_DWORD *)(a1 + 380) = v23 * v28;
        *(_DWORD *)(a1 + 384) = v29;
        *(_DWORD *)(a1 + 388) = v29 * v25.i32[0];
        int v30 = (*(uint64_t (**)(char *))(*(void *)v10 + 32))(v10);
        int v31 = *((_DWORD *)v10 + 2);
        int v32 = *((_DWORD *)v10 + 3);
        int v33 = *((_DWORD *)v10 + 4);
        int32x2_t v34 = vmax_s32(*(int32x2_t *)(v10 + 20), (int32x2_t)0x100000001);
        if ((v30 - 1) >= 0xD)
        {
          unint64_t v36 = *((void *)v10 + 31)
              + *((void *)v10 + 31) * ((unint64_t)(4 * v31 - 1) / *((void *)v10 + 31));
          unint64_t v35 = 4;
        }
        else
        {
          unint64_t v35 = qword_192DF6AD8[v30 - 1];
          unint64_t v36 = *((void *)v10 + 31) + *((void *)v10 + 31) * ((v35 * v31 - 1) / *((void *)v10 + 31));
        }
        unint64_t v37 = v36 / v35;
        int v38 = v32 * v37 * v33;
        *(_DWORD *)(a1 + 312) = v31;
        *(_DWORD *)(a1 + 316) = v32;
        *(_DWORD *)(a1 + 320) = v33;
        *(int32x2_t *)(a1 + 3std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24) = v34;
        *(_DWORD *)(a1 + 332) = 1;
        *(_DWORD *)(a1 + 336) = v37;
        *(_DWORD *)(a1 + 340) = v32 * v37;
        *(_DWORD *)(a1 + 344) = v38;
        *(_DWORD *)(a1 + 348) = v38 * v34.i32[0];
      }
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      if (v11)
      {
        nitro::nitro_function::nitro_function(v11);
      }
    }
  }
}

void sub_192806C9C(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void Espresso::MPSBuffersEngine::tile_kernel::blob_options(Espresso::MPSBuffersEngine::tile_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2)
  {
    id v10 = (char *)operator new(0x70uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)id v10 = &unk_1EE388F48;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((void *)v10 + 3) = &unk_1EE3661F8;
    *((_DWORD *)v10 + 12) = 1065353216;
    *((void *)v10 + 7) = 0x1FFFFFFFFLL;
    *((void *)v10 + 12) = 0;
    *((void *)v10 + 13) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    v10[88] = 0;
    *a3 = v10 + 24;
    a3[1] = v10;
    uint64_t v12 = v8[28];
    uint64_t v11 = v8[29];
    if (!v11)
    {
      *((void *)v10 + 12) = v12;
      *((void *)v10 + 13) = 0;
      if (!v9) {
        return;
      }
      goto LABEL_10;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = v11;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  if (!v9) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v9);
}

void sub_192806E70(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::tile_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 304))
  {
    Espresso::MPSBuffersEngine::tile_kernel::on_resized(a1, a3, a4);
    if (!*(void *)(a1 + 304)) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found");
    }
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v17, *a2);
  id v8 = v17[0];
  uint64_t v9 = *a4;
  if (!*(void *)v9)
  {
    id v10 = 0;
    goto LABEL_8;
  }
  if (!v10)
  {
LABEL_8:
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_9:
  uint64_t v12 = *a3;
  if (!*(void *)v12)
  {
    int v13 = 0;
    goto LABEL_14;
  }
  if (!v13)
  {
LABEL_14:
    int v14 = 0;
    goto LABEL_15;
  }
  int v14 = *(std::__shared_weak_count **)(v12 + 8);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_15:
  id v15 = v10[21];
  id v16 = v13[21];
  [v8 setComputePipelineState:*(void *)(a1 + 304)];
  [v8 setBuffer:v15 offset:0 atIndex:0];
  [v8 setBuffer:v16 offset:0 atIndex:1];
  [v8 setBytes:a1 + 352 length:40 atIndex:2];
  [v8 setBytes:a1 + 312 length:40 atIndex:3];

  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v17);
}

void sub_1928070BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::tile_kernel::~tile_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::MPSBuffersEngine::gather_nd_kernel::is_valid_for_engine(_DWORD *a1, uint64_t a2, long long **a3)
{
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v27, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
  if ((unint64_t)(v28 - (void)v27) < 0x80) {
    goto LABEL_20;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v25, v27, 0);
  unsigned int v4 = v26;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v23, (const Espresso::layer_shape *)((char *)v27 + 64), 0);
  if (a1[72]) {
    goto LABEL_20;
  }
  int v5 = a1[71];
  int v6 = v4 & (v5 >> 31);
  int v7 = v6 + v5;
  if (v6 + v5 < 0 != __OFADD__(v6, v5)) {
    uint64_t v8 = v26;
  }
  else {
    uint64_t v8 = v7;
  }
  int v9 = 1;
  if ((int)v8 >= 1)
  {
    id v10 = v25;
    do
    {
      int v11 = *(_DWORD *)v10;
      id v10 = (void ***)((char *)v10 + 4);
      v9 *= v11;
      --v8;
    }
    while (v8);
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  unsigned int v12 = v7 + 1;
  if (v7 + 1 >= (int)v26)
  {
    int v15 = 1;
  }
  else
  {
    unint64_t v13 = v26 - (unint64_t)v12;
    int v14 = (int *)v25 + v12;
    int v15 = 1;
    do
    {
      int v16 = *v14++;
      v15 *= v16;
      --v13;
    }
    while (v13);
  }
  uint64_t v17 = v24;
  int v18 = 1;
  if (v24 >= 1)
  {
    uint64_t v19 = (int *)v23;
    do
    {
      int v20 = *v19++;
      v18 *= v20;
      --v17;
    }
    while (v17);
  }
  if (v15 * v9 * v18 > 250000) {
LABEL_20:
  }
    BOOL v21 = 0;
  else {
    BOOL v21 = a1[70] == 0;
  }
  v25[0] = (void **)&v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v25);
  return v21;
}