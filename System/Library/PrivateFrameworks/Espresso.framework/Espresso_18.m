void sub_192A54BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  uint64_t v43;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;

  v45 = *(std::__shared_weak_count **)(v43 - 152);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  v46 = *(std::__shared_weak_count **)(v43 - 136);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  v47 = *(std::__shared_weak_count **)(v43 - 120);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) | 1;
      v8 = (int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *(float *)(a2 + 4 * *v8) > *(float *)(a2 + 4 * v8[1]))
      {
        ++v8;
        uint64_t v7 = v9;
      }
      uint64_t v10 = *v8;
      uint64_t v11 = *a4;
      float v12 = *(float *)(a2 + 4 * v11);
      if (*(float *)(a2 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v7);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *(float *)(a2 + 4 * *v8) > *(float *)(a2 + 4 * v8[1]))
          {
            ++v8;
            uint64_t v7 = v14;
          }
          uint64_t v10 = *v8;
        }
        while (*(float *)(a2 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<int *>>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) | 1;
      v8 = (int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        uint64_t v10 = *(void *)(a2 + 24);
      }
      else
      {
        uint64_t v10 = *(void *)(a2 + 24);
        if (*(float *)(v10 + 4 * *v8) > *(float *)(v10 + 4 * v8[1]))
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      uint64_t v11 = *v8;
      uint64_t v12 = *a4;
      float v13 = *(float *)(v10 + 4 * v12);
      if (*(float *)(v10 + 4 * v11) <= v13)
      {
        do
        {
          *a4 = v11;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          v8 = (int *)(result + 4 * v7);
          uint64_t v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v10 + 4 * *v8) > *(float *)(v10 + 4 * v8[1]))
          {
            ++v8;
            uint64_t v7 = v15;
          }
          uint64_t v11 = *v8;
        }
        while (*(float *)(v10 + 4 * v11) <= v13);
        *a4 = v12;
      }
    }
  }
  return result;
}

char *___ZN8Espresso37hierarchical_inner_product_kernel_cpu8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES8__block_invoke()
{
  if (getenv("ESPRESSO_N_CLUSTERS_KEEP")) {
    Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::need_recheck_env = 1;
  }
  result = getenv("ESPRESSO_N_MIN_ROWS_FACTOR");
  if (result) {
    Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::need_recheck_env = 1;
  }
  return result;
}

void Espresso::hierarchical_inner_product_kernel_cpu::~hierarchical_inner_product_kernel_cpu(Espresso::hierarchical_inner_product_kernel_cpu *this)
{
  Espresso::hierarchical_inner_product_kernel_cpu::~hierarchical_inner_product_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  void **v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE36A380;
  v2 = (std::__shared_weak_count *)*((void *)this + 76);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  v3 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v6 = (void **)((char *)this + 560);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 536);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 512);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = (void *)*((void *)this + 61);
  if (v4)
  {
    *((void *)this + 62) = v4;
    operator delete(v4);
  }
  int64_t v5 = (void *)*((void *)this + 58);
  if (v5)
  {
    *((void *)this + 59) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)((char *)this + 440);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 416);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v6);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::rnn_kernel_cpu::set_seq(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v11, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  int v7 = **(_DWORD **)(v11 + 24);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(v10, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v8 = (std::__shared_weak_count *)v10[1];
  *(_DWORD *)(*(void *)(v10[0] + 24) + 4 * a4) = v7;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = v12;
  if (v12)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192A55074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rnn_kernel_cpu::embedding_lookup_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(unsigned int *)(a1 + 312);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v23, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v21, *(void **)a4, *(std::__shared_weak_count **)(a4 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v19, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v17, *(void **)a6, *(std::__shared_weak_count **)(a6 + 8));
  float v10 = **(float **)(v17 + 24);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if ((int)v9 >= 1)
  {
    uint64_t v11 = *(float **)(v23 + 24);
    uint64_t v12 = (float *)(*(void *)(v21 + 24) + 4 * (int)v10);
    float v13 = *(float **)(v19 + 24);
    uint64_t v14 = 4 * *(int *)(v21 + 8);
    do
    {
      float v15 = *v13++;
      *v11++ = *v12 + v15;
      uint64_t v12 = (float *)((char *)v12 + v14);
      --v9;
    }
    while (v9);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  v16 = v24;
  if (v24)
  {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A551A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rnn_kernel_cpu::lstm_elementwise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a1;
  uint64_t v40 = *(unsigned int *)(*(void *)a3 + 20);
  uint64_t v10 = *(int *)(a1 + 312);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v49, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v47, *(void **)a4, *(std::__shared_weak_count **)(a4 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v45, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v43, *(void **)a6, *(std::__shared_weak_count **)(a6 + 8));
  if ((int)v40 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(float **)(v43 + 24);
    float v13 = &v12[2 * v10];
    uint64_t v14 = &v12[3 * v10];
    float v15 = *(float **)(v47 + 24);
    uint64_t v16 = *(void *)(v49 + 24);
    uint64_t v38 = v9;
    uint64_t v39 = 16 * v10;
    uint64_t v17 = 4 * v10;
    v42 = *(float **)(v45 + 24);
    uint64_t v18 = 4 * v10;
    do
    {
      uint64_t v19 = v13;
      uint64_t v20 = v10;
      if ((int)v10 >= 1)
      {
        do
        {
          *uint64_t v19 = *(float *)(v9 + 316) + *v19;
          ++v19;
          --v20;
        }
        while (v20);
      }
      if (v10)
      {
        uint64_t v21 = v18;
        uint64_t v41 = v11;
        v22 = v12;
        uint64_t v23 = v10;
        do
        {
          float *v22 = 1.0 / (float)(expf(-*v22) + 1.0);
          ++v22;
          --v23;
        }
        while (v23);
        uint64_t v24 = v10;
        uint64_t v25 = v10;
        do
        {
          v12[v24] = tanhf(v12[v24]);
          ++v24;
          --v25;
        }
        while (v25);
        for (uint64_t i = 0; i != v10; ++i)
          v13[i] = 1.0 / (float)(expf(-v13[i]) + 1.0);
        uint64_t v27 = 3 * v10;
        uint64_t v28 = v10;
        do
        {
          v12[v27] = 1.0 / (float)(expf(-v12[v27]) + 1.0);
          ++v27;
          --v28;
        }
        while (v28);
        uint64_t v11 = v41;
        uint64_t v18 = v21;
        if ((int)v10 >= 1)
        {
          uint64_t v30 = v10;
          v29 = v42;
          v31 = v12;
          v32 = v15;
          do
          {
            float v33 = *v29++;
            *v32++ = (float)(*v31 * v31[v10]) + (float)(v31[2 * v10] * v33);
            ++v31;
            --v30;
          }
          while (v30);
          unint64_t v34 = 0;
          do
          {
            float v35 = v14[v34 / 4];
            float v36 = tanhf(v15[v34 / 4]);
            uint64_t v18 = v21;
            *(float *)(v16 + v34) = v35 * v36;
            v34 += 4;
          }
          while (v21 != v34);
        }
      }
      ++v11;
      uint64_t v9 = v38;
      float v13 = (float *)((char *)v13 + v39);
      uint64_t v12 = (float *)((char *)v12 + v39);
      float v15 = (float *)((char *)v15 + v17);
      v42 = (float *)((char *)v42 + v17);
      v16 += v17;
      uint64_t v14 = (float *)((char *)v14 + v39);
    }
    while (v11 != v40);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  v37 = v50;
  if (v50)
  {
    nitro::nitro_function::nitro_function(v37);
  }
}

void sub_192A554B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rnn_kernel_cpu::__launch_gru()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "GRU not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192A55540(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::rnn_kernel_cpu::__launch_rnn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(_DWORD *)(*(void *)a5 + 20);
  unsigned int v10 = *(_DWORD *)(a1 + 312);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v73, *(void **)a2, *(std::__shared_weak_count **)(a2 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v71, *(void **)a4, *(std::__shared_weak_count **)(a4 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v69, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v67, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  uint64_t v11 = v70;
  if (v70) {
    atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(int *)(a1 + 324) < 1)
  {
    uint64_t v17 = (long long *)v11;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__B, "W_embedding_in");
    v61 = __B;
    uint64_t v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __B, (_OWORD **)&v61);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v65, *((void **)v12 + 7), *((std::__shared_weak_count **)v12 + 8));
    if (v64 < 0) {
      operator delete(__B[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__B, "b_embedding_in");
    v55 = __B;
    float v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __B, (_OWORD **)&v55);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v61, *((void **)v13 + 7), *((std::__shared_weak_count **)v13 + 8));
    if (v64 < 0) {
      operator delete(__B[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "x_p_tmp");
    __B[0] = (long long *)__p;
    uint64_t v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 848), __p, __B);
    float v15 = v14;
    uint64_t v16 = (long long *)v14[7];
    if (v16
      && *((_DWORD *)v16 + 2) == 1
      && *((_DWORD *)v16 + 3) == 1
      && *((_DWORD *)v16 + 4) == v10
      && *((_DWORD *)v16 + 5) == v9)
    {
      uint64_t v17 = (long long *)v14[8];
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(__B, 1, 1, v10, v9);
      uint64_t v16 = __B[0];
      uint64_t v17 = __B[1];
      uint64_t v18 = (std::__shared_weak_count *)v15[8];
      v15[7] = (uint64_t)__B[0];
      v15[8] = (uint64_t)v17;
      if (v18)
      {
        nitro::nitro_function::nitro_function(v18);
        uint64_t v16 = (long long *)v15[7];
        uint64_t v17 = (long long *)v15[8];
      }
    }
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v60 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v19 = v66;
    v58[0] = v65;
    v58[1] = v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = v62;
    v57[0] = v61;
    v57[1] = v62;
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::matrix_vector_mult_batched((uint64_t)v58, (uint64_t)v57, *(_DWORD *)(a1 + 324), *(const float **)(v69 + 24), v10, *((float **)v16 + 3), v9, 0.0);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  v44 = (std::__shared_weak_count *)v17;
  std::string::basic_string[abi:ne180100]<0>(__B, "W_h");
  v61 = __B;
  uint64_t v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __B, (_OWORD **)&v61);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v65, *((void **)v21 + 7), *((std::__shared_weak_count **)v21 + 8));
  if (v64 < 0) {
    operator delete(__B[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__B, "W_x");
  v55 = __B;
  v22 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __B, (_OWORD **)&v55);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v61, *((void **)v22 + 7), *((std::__shared_weak_count **)v22 + 8));
  if (v64 < 0) {
    operator delete(__B[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__B, "b");
  uint64_t v49 = __B;
  uint64_t v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __B, (_OWORD **)&v49);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v55, *((void **)v23 + 7), *((std::__shared_weak_count **)v23 + 8));
  if (v64 < 0) {
    operator delete(__B[0]);
  }
  uint64_t v24 = v66;
  v54[0] = v65;
  v54[1] = v66;
  if (v66) {
    atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = v56;
  v53[0] = v55;
  v53[1] = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = v73;
  Espresso::matrix_vector_mult_batched((uint64_t)v54, (uint64_t)v53, v10, *(const float **)(v71 + 24), v10, *(float **)(v73 + 24), v9, 0.0);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  uint64_t v27 = v62;
  v52[0] = v61;
  v52[1] = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v51[0] = 0;
  v51[1] = 0;
  Espresso::matrix_vector_mult_batched((uint64_t)v52, (uint64_t)v51, *(_DWORD *)(v69 + 16), *(const float **)(v69 + 24), v10, *(float **)(v26 + 24), v9, 1.0);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  uint64_t v28 = 0;
  v29 = *(float **)(v26 + 24);
  vDSP_Length v30 = *(int *)(v26 + 8);
  do
  {
    v30 *= *(int *)(v26 + 12 + v28);
    v28 += 4;
  }
  while (v28 != 12);
  int v31 = *(_DWORD *)(a1 + 308);
  if (v31)
  {
    if (v31 == 1)
    {
      LODWORD(__B[0]) = 0;
      vDSP_vthr(v29, 1, (const float *)__B, v29, 1, v30);
    }
    else if (v31 == 2 && v30)
    {
      do
      {
        float *v29 = 1.0 / (float)(expf(-*v29) + 1.0);
        ++v29;
        --v30;
      }
      while (v30);
    }
  }
  else
  {
    for (; v30; --v30)
    {
      float *v29 = tanhf(*v29);
      ++v29;
    }
  }
  if (*(int *)(a1 + 328) < 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = *(int *)(v26 + 8);
    do
    {
      v43 *= *(int *)(v26 + 12 + v42);
      v42 += 4;
    }
    while (v42 != 12);
    memcpy(*(void **)(v67 + 24), *(const void **)(v26 + 24), 4 * v43);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__B, "W_embedding_out");
    uint64_t v47 = __B;
    v32 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __B, (_OWORD **)&v47);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v49, *((void **)v32 + 7), *((std::__shared_weak_count **)v32 + 8));
    if (v64 < 0) {
      operator delete(__B[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__B, "b_embedding_out");
    v75 = __B;
    float v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), __B, (_OWORD **)&v75);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v47, *((void **)v33 + 7), *((std::__shared_weak_count **)v33 + 8));
    if (v64 < 0) {
      operator delete(__B[0]);
    }
    unint64_t v34 = v50;
    v46[0] = v49;
    v46[1] = v50;
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v35 = v48;
    v45[0] = v47;
    v45[1] = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v36 = *(const float **)(v26 + 24);
    uint64_t v37 = v67;
    Espresso::matrix_vector_mult_batched((uint64_t)v46, (uint64_t)v45, v10, v36, *(_DWORD *)(a1 + 328), *(float **)(v67 + 24), v9, 0.0);
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
    uint64_t v38 = 0;
    uint64_t v39 = *(float **)(v37 + 24);
    vDSP_Length v40 = *(int *)(v37 + 8);
    do
    {
      v40 *= *(int *)(v37 + 12 + v38);
      v38 += 4;
    }
    while (v38 != 12);
    int v41 = *(_DWORD *)(a1 + 308);
    if (v41)
    {
      if (v41 == 1)
      {
        LODWORD(__B[0]) = 0;
        vDSP_vthr(v39, 1, (const float *)__B, v39, 1, v40);
      }
      else if (v41 == 2 && v40)
      {
        do
        {
          *uint64_t v39 = 1.0 / (float)(expf(-*v39) + 1.0);
          ++v39;
          --v40;
        }
        while (v40);
      }
    }
    else
    {
      for (; v40; --v40)
      {
        *uint64_t v39 = tanhf(*v39);
        ++v39;
      }
    }
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  if (v68) {
    nitro::nitro_function::nitro_function(v68);
  }
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  if (v74) {
    nitro::nitro_function::nitro_function(v74);
  }
}

void sub_192A55C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (v42)
  {
    nitro::nitro_function::nitro_function(v42);
    if (!v41) {
      goto LABEL_6;
    }
  }
  else if (!v41)
  {
LABEL_6:
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    if (a40) {
      nitro::nitro_function::nitro_function(a40);
    }
    uint64_t v45 = *(std::__shared_weak_count **)(v43 - 184);
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    if (a10) {
      nitro::nitro_function::nitro_function(a10);
    }
    v46 = *(std::__shared_weak_count **)(v43 - 168);
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    uint64_t v47 = *(std::__shared_weak_count **)(v43 - 152);
    if (v47) {
      nitro::nitro_function::nitro_function(v47);
    }
    v48 = *(std::__shared_weak_count **)(v43 - 136);
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    uint64_t v49 = *(std::__shared_weak_count **)(v43 - 120);
    if (v49) {
      nitro::nitro_function::nitro_function(v49);
    }
    _Unwind_Resume(exception_object);
  }
  nitro::nitro_function::nitro_function(v41);
  goto LABEL_6;
}

void sub_192A55E9C()
{
  if (*(char *)(v0 - 193) < 0) {
    operator delete(*(void **)(v0 - 216));
  }
  JUMPOUT(0x192A55E48);
}

void sub_192A55EB4()
{
  if (*(char *)(v0 - 193) < 0) {
    operator delete(*(void **)(v0 - 216));
  }
  JUMPOUT(0x192A55E54);
}

void Espresso::matrix_vector_mult_batched(uint64_t a1, uint64_t a2, unsigned int __K, const float *__A, unsigned int __ldc, float *__C, int __M, float a8)
{
  v8 = __C;
  if (*(void *)(*(void *)a1 + 8) != __PAIR64__(__ldc, __K))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v40, __K);
    uint64_t v17 = std::string::insert(&v40, 0, "[matrix_vector_mult_batched] Mismatch ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v41, "/");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, __ldc);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v21 = &v39;
    }
    else {
      uint64_t v21 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v39.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v42, (const std::string::value_type *)v21, size);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t v25 = std::string::append(&v43, "/");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v38, *(_DWORD *)(*(void *)a1 + 8));
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v38;
    }
    else {
      uint64_t v27 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = v38.__r_.__value_.__l.__size_;
    }
    v29 = std::string::append(&v44, (const std::string::value_type *)v27, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    int v31 = std::string::append(&v45, "/");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, *(_DWORD *)(*(void *)a1 + 12));
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v33 = &v37;
    }
    else {
      float v33 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v37.__r_.__value_.__l.__size_;
    }
    float v35 = std::string::append(&v46, (const std::string::value_type *)v33, v34);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v47);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(v11) = __M;
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, __M, __ldc, __K, 1.0, __A, __K, *(const float **)(*(void *)a1 + 24), __K, a8, __C, __ldc);
  if (*(void *)a2 && (int)v11 >= 1)
  {
    vDSP_Length v13 = (int)__ldc;
    uint64_t v14 = 4 * (int)__ldc;
    uint64_t v11 = v11;
    do
    {
      vDSP_vadd(*(const float **)(*(void *)a2 + 24), 1, v8, 1, v8, 1, v13);
      v8 = (float *)((char *)v8 + v14);
      --v11;
    }
    while (v11);
  }
}

void sub_192A56194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (*(char *)(v58 - 57) < 0) {
    operator delete(*(void **)(v58 - 80));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 89) < 0) {
    operator delete(*(void **)(v58 - 112));
  }
  if (*(char *)(v58 - 121) < 0) {
    operator delete(*(void **)(v58 - 144));
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v58 - 153) < 0) {
    operator delete(*(void **)(v58 - 176));
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v57 & 1) == 0) {
LABEL_26:
    }
      _Unwind_Resume(a1);
  }
  else if (!v57)
  {
    goto LABEL_26;
  }
  __cxa_free_exception(v56);
  goto LABEL_26;
}

void Espresso::rnn_kernel_cpu::blob_container_options_for_weight(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::rnn_kernel_cpu::set_weight_blob(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v8 = *(std::string *)a2;
  }
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  v7[0] = v5;
  v7[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_kernel_with_weights_::set_weight_blob(a1, (long long *)&v8, v7);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_192A56394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rnn_kernel_cpu::~rnn_kernel_cpu(Espresso::rnn_kernel_cpu *this)
{
  *(void *)this = &unk_1EE331E38;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 107));
  Espresso::generic_rnn_kernel::~generic_rnn_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE331E38;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 107));

  Espresso::generic_rnn_kernel::~generic_rnn_kernel(this);
}

float vision::DCN::boundingbox::calculate_overlap(float *a1, float *a2)
{
  float v3 = a1[1];
  float v2 = a1[2];
  float v4 = *a1 - v2;
  float v6 = a2[1];
  float v5 = a2[2];
  float v7 = *a2 - v5;
  float v8 = *a1 + v2;
  float v9 = *a2 + v5;
  float v10 = v3 - v2;
  float v11 = v6 - v5;
  float v12 = v2 + v3;
  float v13 = v5 + v6;
  float v14 = fmaxf(fminf(v8, v9) - fmaxf(v4, v7), 0.0) * fmaxf(fminf(v12, v5 + v6) - fmaxf(v10, v6 - v5), 0.0);
  return v14
       / (float)((float)((float)((float)(v8 - v4) * (float)(v12 - v10)) + (float)((float)(v9 - v7) * (float)(v13 - v11)))
               - v14);
}

void Espresso::kaldi_like_sgemv_float_int8(Espresso *this, const signed __int8 *a2, const float *a3, const float *a4, const float *a5, float *a6, unint64_t a7, const inner_product_uniforms *a8, BOOL a9)
{
}

void sub_192A56710(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x90C40C859B4A5);
  MEMORY[0x192FF1690](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void Espresso::InputQuantizationContext<short>::InputQuantizationContext()
{
}

void sub_192A56960(_Unwind_Exception *a1)
{
  MEMORY[0x192FF1690](v2, 0x1000C8052888210);
  uint64_t v4 = v1[1];
  v1[1] = 0;
  if (v4) {
    MEMORY[0x192FF1690](v4, 0x1000C80BDFB0063);
  }
  uint64_t v5 = *v1;
  uint64_t *v1 = 0;
  if (v5) {
    MEMORY[0x192FF1690](v5, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<Espresso::InputQuantizationContext<short>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    MEMORY[0x192FF1690](v2, 0x1000C80BDFB0063);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    MEMORY[0x192FF1690](v3, 0x1000C8052888210);
  }

  JUMPOUT(0x192FF16B0);
}

void *___ZN8Espresso30kaldi_like_sgemv_float_genericIaEEvPKT_PKfS5_S5_PfmRKNS_22inner_product_uniformsEb_block_invoke(void *result, uint64_t a2)
{
  uint64_t v2 = result[4];
  unint64_t v3 = result[5];
  unint64_t v4 = v2 * a2;
  if (v3 >= v2 * a2 + v2) {
    unint64_t v3 = v2 * a2 + v2;
  }
  unint64_t v190 = v3;
  if (v4 < v3)
  {
    unint64_t v5 = result[6];
    uint64_t v6 = result[8];
    uint64_t v187 = result[9];
    uint64_t v188 = v6;
    uint64_t v7 = result[10];
    uint64_t v189 = result[7];
    uint64_t v8 = v189 + v2 * v6 * a2;
    v185 = result;
    uint64_t v186 = v7;
    do
    {
      if (v7) {
        float v9 = *(float *)(v7 + 4 * v4);
      }
      else {
        float v9 = 0.0;
      }
      v196 = (int8x16_t *)(v189 + v6 * v4);
      float v10 = *(float *)(v187 + 4 * v4);
      unint64_t v11 = 0;
      unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v5 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        unint64_t v13 = result[8];
        uint64_t v14 = result[12];
        uint64_t v194 = result[11];
        unint64_t v195 = v5 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v15 = result[13];
        uint64_t v16 = result[14];
        unint64_t v17 = v13 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v191 = v16;
        uint64_t v18 = result[15];
        uint64_t v19 = result[5];
        uint64_t v20 = 4 * v13;
        uint64_t v192 = v15;
        uint64_t v193 = v14;
        do
        {
          uint64_t v21 = (float *)(v14 + 4 * v11);
          if (v15) {
            v22 = (int16x8_t *)(v15 + 2 * v13 * v11);
          }
          else {
            v22 = 0;
          }
          uint64_t v23 = (float32x2_t *)(v16 + 4 * v11);
          if (!v16) {
            uint64_t v23 = 0;
          }
          if (v22) {
            _ZF = v23 == 0;
          }
          else {
            _ZF = 1;
          }
          if (_ZF)
          {
            uint64_t v25 = (_OWORD *)(v194 + 4 * v13 * v11);
            if (v17)
            {
              unint64_t v26 = 0;
              float32x4_t v27 = 0uLL;
              float32x4_t v28 = 0uLL;
              float32x4_t v29 = 0uLL;
              float32x4_t v30 = 0uLL;
              float32x4_t v31 = 0uLL;
              float32x4_t v32 = 0uLL;
              float32x4_t v33 = 0uLL;
              float32x4_t v34 = 0uLL;
              float32x4_t v35 = 0uLL;
              float32x4_t v36 = 0uLL;
              float32x4_t v37 = 0uLL;
              float32x4_t v38 = 0uLL;
              float32x4_t v39 = 0uLL;
              float32x4_t v40 = 0uLL;
              float32x4_t v41 = 0uLL;
              float32x4_t v42 = 0uLL;
              do
              {
                std::string v43 = (float32x4_t *)((char *)v25 + v20);
                std::string v44 = (float32x4_t *)((char *)v25 + 8 * v13);
                std::string v45 = (float32x4_t *)((char *)v25 + 12 * v13);
                int8x16_t v46 = *(int8x16_t *)(v8 + v26);
                int8x8_t v47 = (int8x8_t)vextq_s8(v46, v46, 8uLL).u64[0];
                float32x4_t v48 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v47, 0), 8uLL), 8uLL)));
                float32x4_t v49 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v47, 0), 8uLL), 8uLL)));
                float32x4_t v50 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v46.i8, 0), 8uLL), 8uLL)));
                float32x4_t v51 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v46.i8, 0), 8uLL), 8uLL)));
                float32x4_t v52 = *((float32x4_t *)v25 + 2);
                float32x4_t v53 = *((float32x4_t *)v25 + 3);
                float32x4_t v54 = *(float32x4_t *)v25;
                float32x4_t v55 = *((float32x4_t *)v25 + 1);
                v25 += 4;
                float32x4_t v28 = vmlaq_f32(v28, v51, v55);
                float32x4_t v27 = vmlaq_f32(v27, v50, v54);
                float32x4_t v30 = vmlaq_f32(v30, v49, v53);
                float32x4_t v29 = vmlaq_f32(v29, v48, v52);
                float32x4_t v32 = vmlaq_f32(v32, v51, v43[1]);
                float32x4_t v31 = vmlaq_f32(v31, v50, *v43);
                float32x4_t v34 = vmlaq_f32(v34, v49, v43[3]);
                float32x4_t v33 = vmlaq_f32(v33, v48, v43[2]);
                float32x4_t v40 = vmlaq_f32(v40, v51, v44[1]);
                float32x4_t v39 = vmlaq_f32(v39, v50, *v44);
                float32x4_t v42 = vmlaq_f32(v42, v49, v44[3]);
                float32x4_t v41 = vmlaq_f32(v41, v48, v44[2]);
                float32x4_t v36 = vmlaq_f32(v36, v51, v45[1]);
                float32x4_t v35 = vmlaq_f32(v35, v50, *v45);
                float32x4_t v38 = vmlaq_f32(v38, v49, v45[3]);
                float32x4_t v37 = vmlaq_f32(v37, v48, v45[2]);
                v26 += 16;
              }
              while (v26 < v17);
              v56 = (int8x16_t *)(v8 + v26);
              unint64_t v57 = (((v13 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
            }
            else
            {
              unint64_t v57 = 0;
              float32x4_t v39 = 0uLL;
              float32x4_t v40 = 0uLL;
              float32x4_t v41 = 0uLL;
              float32x4_t v42 = 0uLL;
              float32x4_t v35 = 0uLL;
              float32x4_t v36 = 0uLL;
              float32x4_t v37 = 0uLL;
              float32x4_t v38 = 0uLL;
              float32x4_t v31 = 0uLL;
              float32x4_t v32 = 0uLL;
              float32x4_t v33 = 0uLL;
              float32x4_t v34 = 0uLL;
              float32x4_t v27 = 0uLL;
              float32x4_t v28 = 0uLL;
              float32x4_t v29 = 0uLL;
              v56 = v196;
              float32x4_t v30 = 0uLL;
            }
            float32x4_t v114 = vaddq_f32(v30, vaddq_f32(v29, vaddq_f32(v28, vaddq_f32(v27, (float32x4_t)0))));
            LODWORD(v115) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1)))).u32[0];
            float32x4_t v116 = vaddq_f32(v34, vaddq_f32(v33, vaddq_f32(v32, vaddq_f32(v31, (float32x4_t)0))));
            LODWORD(v117) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), vaddq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1)))).u32[0];
            float32x4_t v118 = vaddq_f32(v42, vaddq_f32(v41, vaddq_f32(v40, vaddq_f32(v39, (float32x4_t)0))));
            LODWORD(v119) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 2), vaddq_f32(v118, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v118.f32, 1)))).u32[0];
            float32x4_t v120 = vaddq_f32(v38, vaddq_f32(v37, vaddq_f32(v36, vaddq_f32(v35, (float32x4_t)0))));
            LODWORD(v121) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 2), vaddq_f32(v120, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v120.f32, 1)))).u32[0];
            _CF = v13 >= v57;
            unint64_t v122 = v13 - v57;
            if (v122 != 0 && _CF)
            {
              do
              {
                int v123 = v56->i8[0];
                v56 = (int8x16_t *)((char *)v56 + 1);
                float v115 = v115 + (float)(*(float *)v25 * (float)v123);
                float v117 = v117 + (float)(*((float *)v25 + v13) * (float)v123);
                float v119 = v119 + (float)(*((float *)v25 + 2 * v13) * (float)v123);
                float v121 = v121 + (float)(*((float *)v25 + 3 * v13) * (float)v123);
                uint64_t v25 = (_OWORD *)((char *)v25 + 4);
                --v122;
              }
              while (v122);
            }
            float v110 = (float)(v9 * *v21) + (float)(v10 * v115);
            float v111 = (float)(v9 * v21[1]) + (float)(v10 * v117);
            float v112 = (float)(v9 * v21[2]) + (float)(v10 * v119);
            float v113 = (float)(v9 * v21[3]) + (float)(v10 * v121);
          }
          else
          {
            unint64_t v58 = 0;
            uint64_t v59 = 0;
            __asm { FMOV            V7.2D, #1.0 }
            float32x4_t v197 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(_Q7, vcvtq_f64_f32(*v23)), v10)), vmulq_n_f64(vdivq_f64(_Q7, vcvt_hight_f64_f32(*(float32x4_t *)v23->f32)), v10));
            float v64 = 0.0;
            unint64_t v65 = 4096;
            v66 = v196;
            float v67 = 0.0;
            float v68 = 0.0;
            float v69 = 0.0;
            do
            {
              if (v13 >= v65) {
                unint64_t v70 = v65;
              }
              else {
                unint64_t v70 = v13;
              }
              unint64_t v71 = (v59 + 1) << 12;
              if (v71 >= v13) {
                unint64_t v71 = v13;
              }
              if (v58 >= v71 >> 4)
              {
                int32x4_t v89 = 0uLL;
                int32x4_t v90 = 0uLL;
                int32x4_t v91 = 0uLL;
                int32x4_t v92 = 0uLL;
                int32x4_t v85 = 0uLL;
                int32x4_t v86 = 0uLL;
                int32x4_t v87 = 0uLL;
                int32x4_t v88 = 0uLL;
                int32x4_t v79 = 0uLL;
                int32x4_t v81 = 0uLL;
                int32x4_t v83 = 0uLL;
                int32x4_t v84 = 0uLL;
                int32x4_t v72 = 0uLL;
                int32x4_t v73 = 0uLL;
                int32x4_t v74 = 0uLL;
                int32x4_t v77 = 0uLL;
              }
              else
              {
                int32x4_t v72 = 0uLL;
                int32x4_t v73 = 0uLL;
                int32x4_t v74 = 0uLL;
                uint64_t v75 = 16 * v58;
                unint64_t v76 = (v70 >> 4) - v58;
                int32x4_t v77 = 0uLL;
                unint64_t v78 = v76;
                int32x4_t v79 = 0uLL;
                v80 = v66;
                int32x4_t v81 = 0uLL;
                v82 = v22;
                int32x4_t v83 = 0uLL;
                int32x4_t v84 = 0uLL;
                int32x4_t v85 = 0uLL;
                int32x4_t v86 = 0uLL;
                int32x4_t v87 = 0uLL;
                int32x4_t v88 = 0uLL;
                int32x4_t v89 = 0uLL;
                int32x4_t v90 = 0uLL;
                int32x4_t v91 = 0uLL;
                int32x4_t v92 = 0uLL;
                do
                {
                  int8x16_t v93 = *v80++;
                  int16x8_t v94 = vmovl_high_s8(v93);
                  int16x8_t v95 = vmovl_s8(*(int8x8_t *)v93.i8);
                  v96 = (int16x8_t *)((char *)v82 + 2 * v13);
                  v97 = (int16x8_t *)((char *)v82 + v20);
                  v98 = (int16x8_t *)((char *)v82 + 6 * v13);
                  int16x8_t v100 = *v82;
                  int16x8_t v99 = v82[1];
                  v82 += 2;
                  int32x4_t v89 = vmlal_s16(v89, *(int16x4_t *)v100.i8, *(int16x4_t *)v95.i8);
                  int32x4_t v90 = vmlal_high_s16(v90, v100, v95);
                  int32x4_t v91 = vmlal_s16(v91, *(int16x4_t *)v99.i8, *(int16x4_t *)v94.i8);
                  int32x4_t v92 = vmlal_high_s16(v92, v99, v94);
                  int16x8_t v101 = v96[1];
                  int32x4_t v85 = vmlal_s16(v85, *(int16x4_t *)v96->i8, *(int16x4_t *)v95.i8);
                  int32x4_t v86 = vmlal_high_s16(v86, *v96, v95);
                  int32x4_t v87 = vmlal_s16(v87, *(int16x4_t *)v101.i8, *(int16x4_t *)v94.i8);
                  int32x4_t v88 = vmlal_high_s16(v88, v101, v94);
                  int16x8_t v102 = v97[1];
                  int32x4_t v79 = vmlal_s16(v79, *(int16x4_t *)v97->i8, *(int16x4_t *)v95.i8);
                  int32x4_t v81 = vmlal_high_s16(v81, *v97, v95);
                  int32x4_t v83 = vmlal_s16(v83, *(int16x4_t *)v102.i8, *(int16x4_t *)v94.i8);
                  int32x4_t v84 = vmlal_high_s16(v84, v102, v94);
                  int16x8_t v103 = v98[1];
                  int32x4_t v72 = vmlal_s16(v72, *(int16x4_t *)v98->i8, *(int16x4_t *)v95.i8);
                  int32x4_t v73 = vmlal_high_s16(v73, *v98, v95);
                  int32x4_t v74 = vmlal_s16(v74, *(int16x4_t *)v103.i8, *(int16x4_t *)v94.i8);
                  int32x4_t v77 = vmlal_high_s16(v77, v103, v94);
                  --v78;
                }
                while (v78);
                v66 = (int8x16_t *)((char *)v66 + (v70 & 0xFFFFFFFFFFFFFFF0) - v75);
                v22 += 2 * v76;
                unint64_t v58 = v70 >> 4;
              }
              float32x4_t v104 = vaddq_f32(vcvtq_f32_s32(v92), vaddq_f32(vcvtq_f32_s32(v91), vaddq_f32(vcvtq_f32_s32(v90), vcvtq_f32_s32(v89))));
              float v64 = v64
                  + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1)))).f32[0];
              float32x4_t v105 = vaddq_f32(vcvtq_f32_s32(v88), vaddq_f32(vcvtq_f32_s32(v87), vaddq_f32(vcvtq_f32_s32(v86), vcvtq_f32_s32(v85))));
              float v67 = v67
                  + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), vaddq_f32(v105, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1)))).f32[0];
              float32x4_t v106 = vaddq_f32(vcvtq_f32_s32(v84), vaddq_f32(vcvtq_f32_s32(v83), vaddq_f32(vcvtq_f32_s32(v81), vcvtq_f32_s32(v79))));
              float32x4_t v107 = vaddq_f32(vcvtq_f32_s32(v77), vaddq_f32(vcvtq_f32_s32(v74), vaddq_f32(vcvtq_f32_s32(v73), vcvtq_f32_s32(v72))));
              float v68 = v68
                  + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1)))).f32[0];
              float v69 = v69
                  + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 2), vaddq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v107.f32, 1)))).f32[0];
              v65 += 4096;
              _ZF = v59++ == v13 >> 12;
            }
            while (!_ZF);
            for (unint64_t i = 16 * v58; i < v13; ++i)
            {
              int v109 = v66->i8[0];
              v66 = (int8x16_t *)((char *)v66 + 1);
              float v64 = v64 + (float)(v22->i16[0] * v109);
              float v67 = v67 + (float)(v22->i16[v13] * v109);
              float v68 = v68 + (float)(v22->i16[2 * v13] * v109);
              float v69 = v69 + (float)(v22->i16[3 * v13] * v109);
              v22 = (int16x8_t *)((char *)v22 + 2);
            }
            float v110 = (float)(*v21 * v9) + (float)(v64 * v197.f32[0]);
            float v111 = (float)(v21[1] * v9) + (float)(v67 * v197.f32[1]);
            float v112 = (float)(v21[2] * v9) + (float)(v68 * v197.f32[2]);
            float v113 = (float)(v21[3] * v9) + (float)(v69 * v197.f32[3]);
            unint64_t v12 = v195;
            uint64_t v15 = v192;
            uint64_t v14 = v193;
            uint64_t v16 = v191;
          }
          *(float *)(v18 + 4 * (v4 + v19 * v11)) = v110;
          *(float *)(v18 + 4 * (v4 + v19 * (v11 | 1))) = v111;
          *(float *)(v18 + 4 * (v4 + v19 * (v11 | 2))) = v112;
          *(float *)(v18 + 4 * (v4 + v19 * (v11 | 3))) = v113;
          v11 += 4;
        }
        while (v11 < v12);
        result = v185;
        unint64_t v5 = v185[6];
      }
      if (v11 < v5)
      {
        unint64_t v124 = result[8];
        uint64_t v125 = result[14];
        uint64_t v126 = result[5];
        uint64_t v127 = result[15] + 4 * v4;
        uint64_t v128 = result[11];
        uint64_t v129 = result[12];
        uint64_t v130 = result[13];
        unint64_t v131 = v124 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          if (v125) {
            float v132 = *(float *)(v125 + 4 * v11);
          }
          else {
            float v132 = 0.0;
          }
          unint64_t v133 = v124 * v11;
          float v134 = *(float *)(v129 + 4 * v11);
          if (v130)
          {
            unint64_t v135 = 0;
            uint64_t v136 = 0;
            v137 = (int16x8_t *)(v130 + 2 * v133);
            double v138 = 1.0 / v132 * v10;
            float v139 = 0.0;
            unint64_t v140 = 4096;
            v141 = v196;
            do
            {
              if (v124 >= v140) {
                unint64_t v142 = v140;
              }
              else {
                unint64_t v142 = v124;
              }
              unint64_t v143 = (v136 + 1) << 12;
              if (v143 >= v124) {
                unint64_t v143 = v124;
              }
              if (v135 >= v143 >> 4)
              {
                int32x4_t v146 = 0uLL;
                int32x4_t v150 = 0uLL;
                int32x4_t v151 = 0uLL;
                int32x4_t v152 = 0uLL;
              }
              else
              {
                uint64_t v144 = 16 * v135;
                unint64_t v145 = (v142 >> 4) - v135;
                int32x4_t v146 = 0uLL;
                unint64_t v147 = v145;
                v148 = v141;
                v149 = v137;
                int32x4_t v150 = 0uLL;
                int32x4_t v151 = 0uLL;
                int32x4_t v152 = 0uLL;
                do
                {
                  int8x16_t v153 = *v148++;
                  int16x8_t v154 = vmovl_high_s8(v153);
                  int16x8_t v155 = vmovl_s8(*(int8x8_t *)v153.i8);
                  int16x8_t v157 = *v149;
                  int16x8_t v156 = v149[1];
                  v149 += 2;
                  int32x4_t v146 = vmlal_s16(v146, *(int16x4_t *)v157.i8, *(int16x4_t *)v155.i8);
                  int32x4_t v150 = vmlal_high_s16(v150, v157, v155);
                  int32x4_t v151 = vmlal_s16(v151, *(int16x4_t *)v156.i8, *(int16x4_t *)v154.i8);
                  int32x4_t v152 = vmlal_high_s16(v152, v156, v154);
                  --v147;
                }
                while (v147);
                v141 = (int8x16_t *)((char *)v141 + (v142 & 0xFFFFFFFFFFFFFFF0) - v144);
                v137 += 2 * v145;
                unint64_t v135 = v142 >> 4;
              }
              float32x4_t v158 = vaddq_f32(vcvtq_f32_s32(v152), vaddq_f32(vcvtq_f32_s32(v151), vaddq_f32(vcvtq_f32_s32(v150), vcvtq_f32_s32(v146))));
              float v139 = v139
                   + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v158, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v158, 2), vaddq_f32(v158, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v158.f32, 1)))).f32[0];
              v140 += 4096;
              _ZF = v136++ == v124 >> 12;
            }
            while (!_ZF);
            for (unint64_t j = 16 * v135; j < v124; ++j)
            {
              int v161 = v141->i8[0];
              v141 = (int8x16_t *)((char *)v141 + 1);
              int v160 = v161;
              int v162 = v137->i16[0];
              v137 = (int16x8_t *)((char *)v137 + 2);
              float v139 = v139 + (float)(v162 * v160);
            }
            float v163 = v138;
            float v164 = (float)(v134 * v9) + (float)(v139 * v163);
          }
          else
          {
            v165 = (_OWORD *)(v128 + 4 * v133);
            if (v131)
            {
              unint64_t v166 = 0;
              float32x4_t v167 = 0uLL;
              float32x4_t v168 = 0uLL;
              float32x4_t v169 = 0uLL;
              float32x4_t v170 = 0uLL;
              do
              {
                int8x16_t v171 = *(int8x16_t *)(v8 + v166);
                int8x8_t v172 = (int8x8_t)vextq_s8(v171, v171, 8uLL).u64[0];
                float32x4_t v173 = *((float32x4_t *)v165 + 2);
                float32x4_t v174 = *((float32x4_t *)v165 + 3);
                float32x4_t v175 = *(float32x4_t *)v165;
                float32x4_t v176 = *((float32x4_t *)v165 + 1);
                v165 += 4;
                float32x4_t v168 = vmlaq_f32(v168, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v171.i8, 0), 8uLL), 8uLL))), v176);
                float32x4_t v167 = vmlaq_f32(v167, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v171.i8, 0), 8uLL), 8uLL))), v175);
                float32x4_t v170 = vmlaq_f32(v170, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v172, 0), 8uLL), 8uLL))), v174);
                float32x4_t v169 = vmlaq_f32(v169, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v172, 0), 8uLL), 8uLL))), v173);
                v166 += 16;
              }
              while (v166 < v131);
              v177 = (int8x16_t *)(v8 + v166);
              unint64_t v178 = (((v124 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
            }
            else
            {
              unint64_t v178 = 0;
              float32x4_t v167 = 0uLL;
              float32x4_t v168 = 0uLL;
              float32x4_t v169 = 0uLL;
              v177 = v196;
              float32x4_t v170 = 0uLL;
            }
            float32x4_t v179 = vaddq_f32(v170, vaddq_f32(v169, vaddq_f32(v168, vaddq_f32(v167, (float32x4_t)0))));
            LODWORD(v180) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v179, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v179, 2), vaddq_f32(v179, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v179.f32, 1)))).u32[0];
            _CF = v124 >= v178;
            unint64_t v181 = v124 - v178;
            if (v181 != 0 && _CF)
            {
              do
              {
                float v182 = *(float *)v165;
                v165 = (_OWORD *)((char *)v165 + 4);
                float v183 = v182;
                int v184 = v177->i8[0];
                v177 = (int8x16_t *)((char *)v177 + 1);
                float v180 = v180 + (float)(v183 * (float)v184);
                --v181;
              }
              while (v181);
            }
            float v164 = (float)(v180 * v10) + (float)(v134 * v9);
          }
          *(float *)(v127 + 4 * v126 * v11++) = v164;
        }
        while (v11 < v5);
      }
      ++v4;
      uint64_t v6 = v188;
      v8 += v188;
      uint64_t v7 = v186;
    }
    while (v4 != v190);
  }
  return result;
}

void Espresso::kaldi_like_sgemv_float_uint8(Espresso *this, const unsigned __int8 *a2, const float *a3, const float *a4, const float *a5, float *a6, unint64_t a7, const inner_product_uniforms *a8, BOOL a9)
{
}

void sub_192A576A4(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x90C40C859B4A5);
  MEMORY[0x192FF1690](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void *___ZN8Espresso30kaldi_like_sgemv_float_genericIhEEvPKT_PKfS5_S5_PfmRKNS_22inner_product_uniformsEb_block_invoke(void *result, uint64_t a2)
{
  uint64_t v2 = result[4];
  unint64_t v3 = result[5];
  unint64_t v4 = v2 * a2;
  if (v3 >= v2 * a2 + v2) {
    unint64_t v3 = v2 * a2 + v2;
  }
  unint64_t v179 = v3;
  if (v4 < v3)
  {
    unint64_t v5 = result[6];
    uint64_t v6 = result[8];
    uint64_t v176 = result[9];
    uint64_t v7 = result[10];
    uint64_t v178 = result[7];
    uint64_t v8 = v178 + v2 * v6 * a2;
    float32x4_t v174 = result;
    uint64_t v175 = v7;
    uint64_t v177 = v6;
    do
    {
      if (v7) {
        float v9 = *(float *)(v7 + 4 * v4);
      }
      else {
        float v9 = 0.0;
      }
      v185 = (uint8x16_t *)(v178 + v6 * v4);
      float v10 = *(float *)(v176 + 4 * v4);
      unint64_t v11 = 0;
      unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v5 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        unint64_t v13 = result[8];
        uint64_t v14 = result[12];
        uint64_t v183 = result[11];
        unint64_t v184 = v5 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v15 = result[13];
        uint64_t v16 = result[14];
        unint64_t v17 = v13 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v180 = v16;
        uint64_t v18 = result[15];
        uint64_t v19 = 12 * v13;
        uint64_t v20 = 8 * v13;
        uint64_t v21 = result[5];
        uint64_t v22 = 4 * v13;
        uint64_t v181 = v15;
        uint64_t v182 = v14;
        do
        {
          uint64_t v23 = (float *)(v14 + 4 * v11);
          if (v15) {
            long long v24 = (int16x8_t *)(v15 + 2 * v13 * v11);
          }
          else {
            long long v24 = 0;
          }
          uint64_t v25 = (float32x2_t *)(v16 + 4 * v11);
          if (!v16) {
            uint64_t v25 = 0;
          }
          if (v24) {
            _ZF = v25 == 0;
          }
          else {
            _ZF = 1;
          }
          if (_ZF)
          {
            float32x4_t v27 = (float32x4_t *)(v183 + 4 * v13 * v11);
            if (v17)
            {
              unint64_t v28 = 0;
              float32x4_t v29 = 0uLL;
              float32x4_t v30 = 0uLL;
              float32x4_t v31 = 0uLL;
              float32x4_t v32 = 0uLL;
              float32x4_t v33 = 0uLL;
              float32x4_t v34 = 0uLL;
              float32x4_t v35 = 0uLL;
              float32x4_t v36 = 0uLL;
              float32x4_t v37 = 0uLL;
              float32x4_t v38 = 0uLL;
              float32x4_t v39 = 0uLL;
              float32x4_t v40 = 0uLL;
              float32x4_t v41 = 0uLL;
              float32x4_t v42 = 0uLL;
              float32x4_t v43 = 0uLL;
              float32x4_t v44 = 0uLL;
              do
              {
                int8x16_t v45 = *(int8x16_t *)(v8 + v28);
                float32x4_t v46 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_192DAD3E0));
                float32x4_t v47 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_192DAD3F0));
                float32x4_t v48 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_192DAD400));
                float32x4_t v49 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v45, (int8x16_t)xmmword_192DAD410));
                float32x4_t v32 = vmlaq_f32(v32, v49, v27[3]);
                float32x4_t v31 = vmlaq_f32(v31, v48, v27[2]);
                float32x4_t v30 = vmlaq_f32(v30, v47, v27[1]);
                float32x4_t v29 = vmlaq_f32(v29, v46, *v27);
                float32x4_t v36 = vmlaq_f32(v36, v49, *(float32x4_t *)((char *)v27 + v22 + 48));
                float32x4_t v35 = vmlaq_f32(v35, v48, *(float32x4_t *)((char *)v27 + v22 + 32));
                float32x4_t v34 = vmlaq_f32(v34, v47, *(float32x4_t *)((char *)v27 + v22 + 16));
                float32x4_t v33 = vmlaq_f32(v33, v46, *(float32x4_t *)((char *)v27 + 4 * v13));
                float32x4_t v44 = vmlaq_f32(v44, v49, *(float32x4_t *)((char *)v27 + v20 + 48));
                float32x4_t v43 = vmlaq_f32(v43, v48, *(float32x4_t *)((char *)v27 + v20 + 32));
                float32x4_t v42 = vmlaq_f32(v42, v47, *(float32x4_t *)((char *)v27 + v20 + 16));
                float32x4_t v41 = vmlaq_f32(v41, v46, *(float32x4_t *)((char *)v27 + 8 * v13));
                float32x4_t v40 = vmlaq_f32(v40, v49, *(float32x4_t *)((char *)v27 + v19 + 48));
                float32x4_t v39 = vmlaq_f32(v39, v48, *(float32x4_t *)((char *)v27 + v19 + 32));
                float32x4_t v38 = vmlaq_f32(v38, v47, *(float32x4_t *)((char *)v27 + v19 + 16));
                float32x4_t v37 = vmlaq_f32(v37, v46, *(float32x4_t *)((char *)v27 + 12 * v13));
                v27 += 4;
                v28 += 16;
              }
              while (v28 < v17);
              float32x4_t v50 = (uint8x16_t *)(v8 + v28);
              unint64_t v51 = (((v13 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
            }
            else
            {
              unint64_t v51 = 0;
              float32x4_t v41 = 0uLL;
              float32x4_t v42 = 0uLL;
              float32x4_t v43 = 0uLL;
              float32x4_t v44 = 0uLL;
              float32x4_t v37 = 0uLL;
              float32x4_t v38 = 0uLL;
              float32x4_t v39 = 0uLL;
              float32x4_t v40 = 0uLL;
              float32x4_t v33 = 0uLL;
              float32x4_t v34 = 0uLL;
              float32x4_t v35 = 0uLL;
              float32x4_t v36 = 0uLL;
              float32x4_t v29 = 0uLL;
              float32x4_t v30 = 0uLL;
              float32x4_t v31 = 0uLL;
              float32x4_t v50 = v185;
              float32x4_t v32 = 0uLL;
            }
            float32x4_t v108 = vaddq_f32(v32, vaddq_f32(v31, vaddq_f32(v30, vaddq_f32(v29, (float32x4_t)0))));
            LODWORD(v109) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1)))).u32[0];
            float32x4_t v110 = vaddq_f32(v36, vaddq_f32(v35, vaddq_f32(v34, vaddq_f32(v33, (float32x4_t)0))));
            LODWORD(v111) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 2), vaddq_f32(v110, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1)))).u32[0];
            float32x4_t v112 = vaddq_f32(v44, vaddq_f32(v43, vaddq_f32(v42, vaddq_f32(v41, (float32x4_t)0))));
            LODWORD(v113) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1)))).u32[0];
            float32x4_t v114 = vaddq_f32(v40, vaddq_f32(v39, vaddq_f32(v38, vaddq_f32(v37, (float32x4_t)0))));
            LODWORD(v115) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1)))).u32[0];
            _CF = v13 >= v51;
            unint64_t v116 = v13 - v51;
            if (v116 != 0 && _CF)
            {
              do
              {
                unsigned int v117 = v50->u8[0];
                float32x4_t v50 = (uint8x16_t *)((char *)v50 + 1);
                float v109 = v109 + (float)(v27->f32[0] * (float)v117);
                float v111 = v111 + (float)(v27->f32[v13] * (float)v117);
                float v113 = v113 + (float)(v27->f32[2 * v13] * (float)v117);
                float v115 = v115 + (float)(v27->f32[3 * v13] * (float)v117);
                float32x4_t v27 = (float32x4_t *)((char *)v27 + 4);
                --v116;
              }
              while (v116);
            }
            float v104 = (float)(v9 * *v23) + (float)(v10 * v109);
            float v105 = (float)(v9 * v23[1]) + (float)(v10 * v111);
            float v106 = (float)(v9 * v23[2]) + (float)(v10 * v113);
            float v107 = (float)(v9 * v23[3]) + (float)(v10 * v115);
          }
          else
          {
            unint64_t v52 = 0;
            uint64_t v53 = 0;
            __asm { FMOV            V19.2D, #1.0 }
            float32x4_t v186 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(_Q19, vcvtq_f64_f32(*v25)), v10)), vmulq_n_f64(vdivq_f64(_Q19, vcvt_hight_f64_f32(*(float32x4_t *)v25->f32)), v10));
            float v58 = 0.0;
            unint64_t v59 = 4096;
            char v60 = v185;
            float v61 = 0.0;
            float v62 = 0.0;
            float v63 = 0.0;
            do
            {
              if (v13 >= v59) {
                unint64_t v64 = v59;
              }
              else {
                unint64_t v64 = v13;
              }
              unint64_t v65 = (v53 + 1) << 12;
              if (v65 >= v13) {
                unint64_t v65 = v13;
              }
              if (v52 >= v65 >> 4)
              {
                int32x4_t v83 = 0uLL;
                int32x4_t v84 = 0uLL;
                int32x4_t v85 = 0uLL;
                int32x4_t v86 = 0uLL;
                int32x4_t v79 = 0uLL;
                int32x4_t v80 = 0uLL;
                int32x4_t v81 = 0uLL;
                int32x4_t v82 = 0uLL;
                int32x4_t v73 = 0uLL;
                int32x4_t v75 = 0uLL;
                int32x4_t v77 = 0uLL;
                int32x4_t v78 = 0uLL;
                int32x4_t v66 = 0uLL;
                int32x4_t v67 = 0uLL;
                int32x4_t v68 = 0uLL;
                int32x4_t v71 = 0uLL;
              }
              else
              {
                int32x4_t v66 = 0uLL;
                int32x4_t v67 = 0uLL;
                int32x4_t v68 = 0uLL;
                uint64_t v69 = 16 * v52;
                unint64_t v70 = (v64 >> 4) - v52;
                int32x4_t v71 = 0uLL;
                unint64_t v72 = v70;
                int32x4_t v73 = 0uLL;
                int32x4_t v74 = v60;
                int32x4_t v75 = 0uLL;
                unint64_t v76 = v24;
                int32x4_t v77 = 0uLL;
                int32x4_t v78 = 0uLL;
                int32x4_t v79 = 0uLL;
                int32x4_t v80 = 0uLL;
                int32x4_t v81 = 0uLL;
                int32x4_t v82 = 0uLL;
                int32x4_t v83 = 0uLL;
                int32x4_t v84 = 0uLL;
                int32x4_t v85 = 0uLL;
                int32x4_t v86 = 0uLL;
                do
                {
                  uint8x16_t v87 = *v74++;
                  int16x8_t v88 = (int16x8_t)vmovl_high_u8(v87);
                  int16x8_t v89 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v87.i8);
                  int32x4_t v90 = (int16x8_t *)((char *)v76 + 2 * v13);
                  int32x4_t v91 = (int16x8_t *)((char *)v76 + v22);
                  int32x4_t v92 = (int16x8_t *)((char *)v76 + 6 * v13);
                  int16x8_t v93 = *v76;
                  int16x8_t v94 = v76[1];
                  v76 += 2;
                  int32x4_t v83 = vmlal_s16(v83, *(int16x4_t *)v93.i8, *(int16x4_t *)v89.i8);
                  int32x4_t v84 = vmlal_high_s16(v84, v93, v89);
                  int32x4_t v85 = vmlal_s16(v85, *(int16x4_t *)v94.i8, *(int16x4_t *)v88.i8);
                  int32x4_t v86 = vmlal_high_s16(v86, v94, v88);
                  int16x8_t v95 = v90[1];
                  int32x4_t v79 = vmlal_s16(v79, *(int16x4_t *)v90->i8, *(int16x4_t *)v89.i8);
                  int32x4_t v80 = vmlal_high_s16(v80, *v90, v89);
                  int32x4_t v81 = vmlal_s16(v81, *(int16x4_t *)v95.i8, *(int16x4_t *)v88.i8);
                  int32x4_t v82 = vmlal_high_s16(v82, v95, v88);
                  int16x8_t v96 = v91[1];
                  int32x4_t v73 = vmlal_s16(v73, *(int16x4_t *)v91->i8, *(int16x4_t *)v89.i8);
                  int32x4_t v75 = vmlal_high_s16(v75, *v91, v89);
                  int32x4_t v77 = vmlal_s16(v77, *(int16x4_t *)v96.i8, *(int16x4_t *)v88.i8);
                  int32x4_t v78 = vmlal_high_s16(v78, v96, v88);
                  int16x8_t v97 = v92[1];
                  int32x4_t v66 = vmlal_s16(v66, *(int16x4_t *)v92->i8, *(int16x4_t *)v89.i8);
                  int32x4_t v67 = vmlal_high_s16(v67, *v92, v89);
                  int32x4_t v68 = vmlal_s16(v68, *(int16x4_t *)v97.i8, *(int16x4_t *)v88.i8);
                  int32x4_t v71 = vmlal_high_s16(v71, v97, v88);
                  --v72;
                }
                while (v72);
                char v60 = (uint8x16_t *)((char *)v60 + (v64 & 0xFFFFFFFFFFFFFFF0) - v69);
                v24 += 2 * v70;
                unint64_t v52 = v64 >> 4;
              }
              float32x4_t v98 = vaddq_f32(vcvtq_f32_s32(v86), vaddq_f32(vcvtq_f32_s32(v85), vaddq_f32(vcvtq_f32_s32(v84), vcvtq_f32_s32(v83))));
              float v58 = v58
                  + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1)))).f32[0];
              float32x4_t v99 = vaddq_f32(vcvtq_f32_s32(v82), vaddq_f32(vcvtq_f32_s32(v81), vaddq_f32(vcvtq_f32_s32(v80), vcvtq_f32_s32(v79))));
              float v61 = v61
                  + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1)))).f32[0];
              float32x4_t v100 = vaddq_f32(vcvtq_f32_s32(v78), vaddq_f32(vcvtq_f32_s32(v77), vaddq_f32(vcvtq_f32_s32(v75), vcvtq_f32_s32(v73))));
              float32x4_t v101 = vaddq_f32(vcvtq_f32_s32(v71), vaddq_f32(vcvtq_f32_s32(v68), vaddq_f32(vcvtq_f32_s32(v67), vcvtq_f32_s32(v66))));
              float v62 = v62
                  + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 2), vaddq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v100.f32, 1)))).f32[0];
              float v63 = v63
                  + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 2), vaddq_f32(v101, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v101.f32, 1)))).f32[0];
              v59 += 4096;
              _ZF = v53++ == v13 >> 12;
            }
            while (!_ZF);
            for (unint64_t i = 16 * v52; i < v13; ++i)
            {
              int v103 = v60->u8[0];
              char v60 = (uint8x16_t *)((char *)v60 + 1);
              float v58 = v58 + (float)(v24->i16[0] * v103);
              float v61 = v61 + (float)(v24->i16[v13] * v103);
              float v62 = v62 + (float)(v24->i16[2 * v13] * v103);
              float v63 = v63 + (float)(v24->i16[3 * v13] * v103);
              long long v24 = (int16x8_t *)((char *)v24 + 2);
            }
            float v104 = (float)(*v23 * v9) + (float)(v58 * v186.f32[0]);
            float v105 = (float)(v23[1] * v9) + (float)(v61 * v186.f32[1]);
            float v106 = (float)(v23[2] * v9) + (float)(v62 * v186.f32[2]);
            float v107 = (float)(v23[3] * v9) + (float)(v63 * v186.f32[3]);
            unint64_t v12 = v184;
            uint64_t v15 = v181;
            uint64_t v14 = v182;
            uint64_t v16 = v180;
          }
          *(float *)(v18 + 4 * (v4 + v21 * v11)) = v104;
          *(float *)(v18 + 4 * (v4 + v21 * (v11 | 1))) = v105;
          *(float *)(v18 + 4 * (v4 + v21 * (v11 | 2))) = v106;
          *(float *)(v18 + 4 * (v4 + v21 * (v11 | 3))) = v107;
          v11 += 4;
        }
        while (v11 < v12);
        result = v174;
        unint64_t v5 = v174[6];
      }
      if (v11 < v5)
      {
        unint64_t v118 = result[8];
        uint64_t v119 = result[14];
        uint64_t v120 = result[5];
        uint64_t v121 = result[15] + 4 * v4;
        uint64_t v122 = result[11];
        uint64_t v123 = result[12];
        uint64_t v124 = result[13];
        unint64_t v125 = v118 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          if (v119) {
            float v126 = *(float *)(v119 + 4 * v11);
          }
          else {
            float v126 = 0.0;
          }
          unint64_t v127 = v118 * v11;
          float v128 = *(float *)(v123 + 4 * v11);
          if (v124)
          {
            unint64_t v129 = 0;
            uint64_t v130 = 0;
            unint64_t v131 = (int16x8_t *)(v124 + 2 * v127);
            double v132 = 1.0 / v126 * v10;
            float v133 = 0.0;
            unint64_t v134 = 4096;
            unint64_t v135 = v185;
            do
            {
              if (v118 >= v134) {
                unint64_t v136 = v134;
              }
              else {
                unint64_t v136 = v118;
              }
              unint64_t v137 = (v130 + 1) << 12;
              if (v137 >= v118) {
                unint64_t v137 = v118;
              }
              if (v129 >= v137 >> 4)
              {
                int32x4_t v140 = 0uLL;
                int32x4_t v144 = 0uLL;
                int32x4_t v145 = 0uLL;
                int32x4_t v146 = 0uLL;
              }
              else
              {
                uint64_t v138 = 16 * v129;
                unint64_t v139 = (v136 >> 4) - v129;
                int32x4_t v140 = 0uLL;
                unint64_t v141 = v139;
                unint64_t v142 = v135;
                unint64_t v143 = v131;
                int32x4_t v144 = 0uLL;
                int32x4_t v145 = 0uLL;
                int32x4_t v146 = 0uLL;
                do
                {
                  uint8x16_t v147 = *v142++;
                  int16x8_t v148 = (int16x8_t)vmovl_high_u8(v147);
                  int16x8_t v149 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v147.i8);
                  int16x8_t v151 = *v143;
                  int16x8_t v150 = v143[1];
                  v143 += 2;
                  int32x4_t v140 = vmlal_s16(v140, *(int16x4_t *)v151.i8, *(int16x4_t *)v149.i8);
                  int32x4_t v144 = vmlal_high_s16(v144, v151, v149);
                  int32x4_t v145 = vmlal_s16(v145, *(int16x4_t *)v150.i8, *(int16x4_t *)v148.i8);
                  int32x4_t v146 = vmlal_high_s16(v146, v150, v148);
                  --v141;
                }
                while (v141);
                unint64_t v135 = (uint8x16_t *)((char *)v135 + (v136 & 0xFFFFFFFFFFFFFFF0) - v138);
                v131 += 2 * v139;
                unint64_t v129 = v136 >> 4;
              }
              float32x4_t v152 = vaddq_f32(vcvtq_f32_s32(v146), vaddq_f32(vcvtq_f32_s32(v145), vaddq_f32(vcvtq_f32_s32(v144), vcvtq_f32_s32(v140))));
              float v133 = v133
                   + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 2), vaddq_f32(v152, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.f32, 1)))).f32[0];
              v134 += 4096;
              _ZF = v130++ == v118 >> 12;
            }
            while (!_ZF);
            for (unint64_t j = 16 * v129; j < v118; ++j)
            {
              int v155 = v135->u8[0];
              unint64_t v135 = (uint8x16_t *)((char *)v135 + 1);
              int v154 = v155;
              int v156 = v131->i16[0];
              unint64_t v131 = (int16x8_t *)((char *)v131 + 2);
              float v133 = v133 + (float)(v156 * v154);
            }
            float v157 = v132;
            float v158 = (float)(v128 * v9) + (float)(v133 * v157);
          }
          else
          {
            v159 = (float32x4_t *)(v122 + 4 * v127);
            if (v125)
            {
              unint64_t v160 = 0;
              float32x4_t v161 = 0uLL;
              float32x4_t v162 = 0uLL;
              float32x4_t v163 = 0uLL;
              float32x4_t v164 = 0uLL;
              do
              {
                int8x16_t v165 = *(int8x16_t *)(v8 + v160);
                float32x4_t v164 = vmlaq_f32(v164, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v165, (int8x16_t)xmmword_192DAD410)), v159[3]);
                float32x4_t v163 = vmlaq_f32(v163, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v165, (int8x16_t)xmmword_192DAD400)), v159[2]);
                float32x4_t v162 = vmlaq_f32(v162, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v165, (int8x16_t)xmmword_192DAD3F0)), v159[1]);
                float32x4_t v161 = vmlaq_f32(v161, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v165, (int8x16_t)xmmword_192DAD3E0)), *v159);
                v159 += 4;
                v160 += 16;
              }
              while (v160 < v125);
              unint64_t v166 = (uint8x16_t *)(v8 + v160);
              unint64_t v167 = (((v118 & 0xFFFFFFFFFFFFFFF0) - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
            }
            else
            {
              unint64_t v167 = 0;
              float32x4_t v161 = 0uLL;
              float32x4_t v162 = 0uLL;
              float32x4_t v163 = 0uLL;
              unint64_t v166 = v185;
              float32x4_t v164 = 0uLL;
            }
            float32x4_t v168 = vaddq_f32(v164, vaddq_f32(v163, vaddq_f32(v162, vaddq_f32(v161, (float32x4_t)0))));
            LODWORD(v169) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v168, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v168, 2), vaddq_f32(v168, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v168.f32, 1)))).u32[0];
            _CF = v118 >= v167;
            unint64_t v170 = v118 - v167;
            if (v170 != 0 && _CF)
            {
              do
              {
                float v171 = v159->f32[0];
                v159 = (float32x4_t *)((char *)v159 + 4);
                float v172 = v171;
                unsigned int v173 = v166->u8[0];
                unint64_t v166 = (uint8x16_t *)((char *)v166 + 1);
                float v169 = v169 + (float)(v172 * (float)v173);
                --v170;
              }
              while (v170);
            }
            float v158 = (float)(v169 * v10) + (float)(v128 * v9);
          }
          *(float *)(v121 + 4 * v120 * v11++) = v158;
        }
        while (v11 < v5);
      }
      ++v4;
      uint64_t v6 = v177;
      v8 += v177;
      uint64_t v7 = v175;
    }
    while (v4 != v179);
  }
  return result;
}

void Espresso::analysis_pass_insert_casts::serialize(Espresso::analysis_pass_insert_casts *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(&__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, &__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  unint64_t v5 = (int *)*((void *)this + 3);
  if (v5)
  {
    uint64_t v6 = *a2;
    do
    {
      uint64_t v7 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      std::string::basic_string[abi:ne180100]<0>(&__p, "json");
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v17, (uint64_t)v7, &__p);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
      __p = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      Espresso::abstract_engine_factory::shared(buf);
      Espresso::abstract_engine_factory::engine_for_platform(*(uint64_t *)buf, v5 + 4, &v15);
      float v9 = (Espresso *)v23;
      if (v23) {
        nitro::nitro_function::nitro_function(v23);
      }
      uint64_t v10 = v15;
      if (v15)
      {
        float v9 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
        if (v9)
        {
          uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
          float v9 = (Espresso *)MEMORY[0x192FF0F50](&__p, v11);
        }
      }
      uint64_t v12 = HIBYTE(v21);
      if (v21 < 0) {
        uint64_t v12 = v20;
      }
      if (!v12)
      {
        unint64_t v13 = Espresso::espresso_os_log_subsystem(v9, v8);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          int v14 = v5[4];
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v14;
          _os_log_error_impl(&dword_1920CB000, v13, OS_LOG_TYPE_ERROR, "Cannot find engine for platform: %d", buf, 8u);
        }
      }
      (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v6 + 240))(v6, &__p, &v17);
      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
      unint64_t v5 = *(int **)v5;
    }
    while (v5);
  }
}

void sub_192A58334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::analysis_pass_insert_casts::deserialize(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  (*(void (**)(void, void **))(*(void *)*a2 + 32))(*a2, &v12);
  unint64_t v4 = v12;
  unint64_t v5 = v13;
  if (v12 != v13)
  {
    uint64_t v6 = (float *)(a1 + 8);
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 120))(&v10);
      uint64_t v7 = Espresso::keys_translation::c_api_engine_from_name(v4);
      unsigned int v8 = Espresso::keys_translation::cpp_platform_from_c_api(v7);
      std::__hash_table<Espresso::platform,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,std::allocator<Espresso::platform>>::__emplace_unique_key_args<Espresso::platform,Espresso::platform const&>(v6, v8, v8);
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  *(void *)buf = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return 1;
}

void sub_192A585D4()
{
}

void Espresso::analysis_pass_insert_casts::~analysis_pass_insert_casts(Espresso::analysis_pass_insert_casts *this)
{
  *(void *)this = &unk_1EE35E0A0;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE35E0A0;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 8);
}

void Espresso::pass_params_insert_casts::~pass_params_insert_casts(Espresso::pass_params_insert_casts *this)
{
}

BOOL Espresso::analysis_pass_insert_casts::has_platform(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v2 <= a2) {
        unint64_t v4 = a2 % v2;
      }
    }
    else
    {
      unint64_t v4 = (v2 - 1) & a2;
    }
    unint64_t i = *(uint64_t **)(*(void *)(a1 + 8) + 8 * v4);
    if (i)
    {
      for (unint64_t i = (uint64_t *)*i; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v6 = i[1];
        if (v6 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return i != 0;
          }
        }
        else
        {
          if (v3.u32[0] > 1uLL)
          {
            if (v6 >= v2) {
              v6 %= v2;
            }
          }
          else
          {
            v6 &= v2 - 1;
          }
          if (v6 != v4) {
            goto LABEL_18;
          }
        }
      }
    }
  }
  else
  {
LABEL_18:
    unint64_t i = 0;
  }
  return i != 0;
}

void Espresso::convolution_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    long long v7 = v6[10];
    long long v101 = v7;
    if (*((void *)&v7 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v101 = 0u;
  }
  unsigned int v8 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v8)
  {
    uint64_t v117 = *((void *)v8 + 20);
    uint64_t v9 = *((void *)v8 + 21);
    if (v9)
    {
      float32x4_t v100 = (std::__shared_weak_count *)*((void *)v8 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      float32x4_t v100 = 0;
    }
  }
  else
  {
    float32x4_t v100 = 0;
    uint64_t v117 = 0;
  }
  uint64_t v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  if (v10)
  {
    uint64_t v12 = *((void *)v10 + 20);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 21);
    *(void *)&long long v125 = v12;
    *((void *)&v125 + 1) = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    long long v125 = 0uLL;
  }
  unint64_t v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  if (v13)
  {
    uint64_t v14 = (std::__shared_weak_count *)*((void *)v13 + 21);
    uint64_t v111 = *((void *)v13 + 20);
    uint64_t v123 = v111;
    uint64_t v124 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v111 = 0;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
  }
  int v15 = *(_DWORD *)(a1 + 420);
  if (v15 <= 1) {
    unint64_t v16 = 1;
  }
  else {
    unint64_t v16 = v15;
  }
  uint64_t v17 = v101;
  int v19 = *(_DWORD *)(v101 + 8);
  int v18 = *(_DWORD *)(v101 + 12);
  int v21 = *(_DWORD *)(v117 + 8);
  int v20 = *(_DWORD *)(v117 + 12);
  int v22 = *(__int16 *)(a1 + 396);
  int v23 = *(__int16 *)(a1 + 398);
  int v24 = *(_DWORD *)(a1 + 352);
  int v25 = *(_DWORD *)(a1 + 356);
  unsigned int v26 = *(__int16 *)(a1 + 384);
  unsigned int v27 = *(__int16 *)(a1 + 386);
  unint64_t v120 = __PAIR64__(v27, v26);
  unsigned int v28 = *(__int16 *)(a1 + 388);
  unsigned int v29 = *(__int16 *)(a1 + 390);
  unint64_t v121 = __PAIR64__(v29, v28);
  unsigned int v30 = *(__int16 *)(a1 + 392);
  unsigned int v31 = *(__int16 *)(a1 + 394);
  unint64_t v122 = __PAIR64__(v30, v31);
  int v32 = *(__int16 *)(a1 + 376);
  uint64_t v116 = a1;
  switch(v32)
  {
    case 4:
      goto LABEL_24;
    case 2:
      uint64_t v17 = 0;
      float32x4_t v43 = 0;
      unint64_t v120 = 0;
      unint64_t v121 = 0;
      unint64_t v122 = 0;
      goto LABEL_78;
    case 1:
LABEL_24:
      unsigned int v30 = 0;
      unsigned int v31 = 0;
      unsigned int v33 = ((v20 - 1) * v23 - v18 + v25) & ~(((v20 - 1) * v23 - v18 + v25) >> 31);
      unsigned int v34 = ((v21 - 1) * v22 - v19 + v24) & ~(((v21 - 1) * v22 - v19 + v24) >> 31);
      unsigned int v35 = v34 >> 1;
      unsigned int v36 = v34 - (v34 >> 1);
      unsigned int v37 = v33 >> 1;
      unsigned int v38 = v33 - (v33 >> 1);
      if (*(_WORD *)(a1 + 376) == 1) {
        unsigned int v26 = v35;
      }
      else {
        unsigned int v26 = v36;
      }
      if (*(_WORD *)(a1 + 376) == 1) {
        unsigned int v27 = v36;
      }
      else {
        unsigned int v27 = v35;
      }
      uint64_t v39 = 12;
      if (*(_WORD *)(a1 + 376) == 1) {
        uint64_t v40 = 8;
      }
      else {
        uint64_t v40 = 12;
      }
      if (*(_WORD *)(a1 + 376) != 1) {
        uint64_t v39 = 8;
      }
      *(_DWORD *)((char *)&v120 + v40) = v37;
      *(_DWORD *)((char *)&v120 + v39) = v38;
      if ((unsigned __int16)v32 == 1) {
        uint64_t v41 = 20;
      }
      else {
        uint64_t v41 = 16;
      }
      if ((unsigned __int16)v32 == 1) {
        uint64_t v42 = 16;
      }
      else {
        uint64_t v42 = 20;
      }
      if ((unsigned __int16)v32 == 1) {
        unsigned int v29 = v38;
      }
      else {
        unsigned int v29 = v37;
      }
      if ((unsigned __int16)v32 == 1) {
        unsigned int v28 = v37;
      }
      else {
        unsigned int v28 = v38;
      }
      unint64_t v120 = __PAIR64__(v27, v26);
      *(_DWORD *)((char *)&v120 + v41) = 0;
      *(_DWORD *)((char *)&v120 + v42) = 0;
      break;
  }
  if (v26 == v27 && v28 == v29 && v31 == v30)
  {
    uint64_t v17 = 0;
    float32x4_t v43 = 0;
  }
  else
  {
    float32x4_t v114 = (void *)v16;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v119, v27 + v26 + *(_DWORD *)(v12 + 8), v28 + *(_DWORD *)(v12 + 12) + v29, *(_DWORD *)(v12 + 16), *(_DWORD *)(v12 + 20));
    if (*(int *)(v12 + 20) >= 1)
    {
      int v44 = 0;
      uint64_t v45 = v119;
      int v46 = v121;
      uint64_t v47 = (int)v120;
      do
      {
        if (*(int *)(v12 + 16) >= 1)
        {
          int v48 = 0;
          do
          {
            int v49 = *(_DWORD *)(v12 + 12);
            if (v49 >= 1)
            {
              for (int i = 0; i < v49; ++i)
              {
                memcpy((void *)(*(void *)(v45 + 24)+ 4 * *(_DWORD *)(v45 + 12) * *(_DWORD *)(v45 + 8) * v44 * *(_DWORD *)(v45 + 16)+ 4 * *(_DWORD *)(v45 + 12) * *(_DWORD *)(v45 + 8) * v48+ 4 * (v46 + i) * *(_DWORD *)(v45 + 8)+ 4 * v47), (const void *)(*(void *)(v12 + 24)+ 4 * *(_DWORD *)(v12 + 8) * v49 * v44 * *(_DWORD *)(v12 + 16)+ 4 * *(_DWORD *)(v12 + 8) * v49 * v48+ 4 * *(_DWORD *)(v12 + 8) * i), 4 * *(int *)(v12 + 8));
                int v49 = *(_DWORD *)(v12 + 12);
              }
            }
            ++v48;
          }
          while (v48 < *(_DWORD *)(v12 + 16));
        }
        ++v44;
      }
      while (v44 < *(_DWORD *)(v12 + 20));
    }
    uint64_t __p = v119;
    long long v125 = v119;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    float32x4_t v43 = (std::__shared_weak_count *)*((void *)&v101 + 1);
    if (*((void *)&v101 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v101 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v119, v120 + *(_DWORD *)(v101 + 8) + HIDWORD(v120), v121 + *(_DWORD *)(v101 + 12) + HIDWORD(v121), *(_DWORD *)(v101 + 16), *(_DWORD *)(v101 + 20));
    if (*(int *)(v101 + 20) >= 1)
    {
      int v51 = 0;
      uint64_t v52 = v119;
      int v53 = v121;
      uint64_t v54 = (int)v120;
      do
      {
        if (*(int *)(v101 + 16) >= 1)
        {
          int v55 = 0;
          do
          {
            int v56 = *(_DWORD *)(v101 + 12);
            if (v56 >= 1)
            {
              for (int j = 0; j < v56; ++j)
              {
                memcpy((void *)(*(void *)(v52 + 24)+ 4 * *(_DWORD *)(v52 + 12) * *(_DWORD *)(v52 + 8) * v51 * *(_DWORD *)(v52 + 16)+ 4 * *(_DWORD *)(v52 + 12) * *(_DWORD *)(v52 + 8) * v55+ 4 * (v53 + j) * *(_DWORD *)(v52 + 8)+ 4 * v54), (const void *)(*(void *)(v101 + 24)+ 4 * *(_DWORD *)(v101 + 8) * v56 * v51 * *(_DWORD *)(v101 + 16)+ 4 * *(_DWORD *)(v101 + 8) * v56 * v55+ 4 * *(_DWORD *)(v101 + 8) * j), 4 * *(int *)(v101 + 8));
                int v56 = *(_DWORD *)(v101 + 12);
              }
            }
            ++v55;
          }
          while (v55 < *(_DWORD *)(v101 + 16));
        }
        ++v51;
      }
      while (v51 < *(_DWORD *)(v101 + 20));
    }
    long long v101 = v119;
    if (v43) {
      nitro::nitro_function::nitro_function(v43);
    }
    uint64_t v12 = __p;
    unint64_t v16 = (unint64_t)v114;
    a1 = v116;
  }
LABEL_78:
  float v58 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v58)
  {
    unint64_t v59 = (std::__shared_weak_count *)*((void *)v58 + 21);
    *(void *)&long long v119 = *((void *)v58 + 20);
    *((void *)&v119 + 1) = v59;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v59 = 0;
    long long v119 = 0uLL;
  }
  float32x4_t v99 = v43;
  if (v16 <= (uint64_t)(*(void *)(a1 + 832) - *(void *)(a1 + 824)) >> 3)
  {
    float v63 = v59;
  }
  else
  {
    std::vector<void *>::resize((char **)(a1 + 824), v16);
    char v60 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
    if (v60)
    {
      long long v61 = v60[10];
      uint64_t v62 = *((void *)v60 + 21);
      if (v62) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      long long v61 = 0uLL;
    }
    long long v119 = v61;
    float v63 = (std::__shared_weak_count *)*((void *)&v61 + 1);
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    v118[0] = 0;
    v118[1] = 0;
    create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(a1 + 304, (uint64_t)&v125, (uint64_t)&v123, (uint64_t)&v119, (uint64_t)v118, &v120, a1 + 824, 0, 0);
  }
  unint64_t v64 = *(int *)(a1 + 344);
  uint64_t v65 = *(int *)(v101 + 8);
  uint64_t v66 = *(int *)(v101 + 12);
  uint64_t v67 = *(int *)(v117 + 12);
  uint64_t v106 = *(int *)(v117 + 8);
  unint64_t v108 = *(int *)(a1 + 348);
  float32x4_t v98 = v63;
  int32x4_t v68 = operator new(0x18uLL);
  unint64_t v69 = v64;
  void *v68 = v65;
  v68[1] = v66;
  float v115 = v68;
  unint64_t v102 = v108 / v16;
  v68[2] = v108 / v16;
  unint64_t v70 = operator new(0x18uLL);
  unint64_t v71 = v16;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  unint64_t v75 = v69 / v71;
  void *v70 = v106;
  v70[1] = v67;
  __pa = v70;
  v70[2] = v69 / v71;
  batch_std::string::size_type size = *(int *)(v117 + 20);
  uint64_t v76 = (int)v66 * (uint64_t)(int)v65;
  size_t v109 = v76 * v108;
  uint64_t v77 = (int)v67 * (uint64_t)(int)v106;
  size_t v78 = v77 * v69;
  int32x4_t v79 = (BNNSNDArrayDescriptor *)(v116 + 472);
  out_delta = (const BNNSNDArrayDescriptor *)(v116 + 648);
  uint64_t v105 = 8 * v71;
  size_t v107 = v78;
  uint64_t v103 = 4 * v76 * v102;
  uint64_t v104 = 4 * v77 * v75;
  do
  {
    uint64_t v81 = *(void *)(v101 + 24) + v72;
    *(_OWORD *)(v116 + 616) = 0u;
    *(_OWORD *)(v116 + 632) = 0u;
    *(_OWORD *)(v116 + 584) = 0u;
    *(_OWORD *)(v116 + 600) = 0u;
    *(_OWORD *)(v116 + 552) = 0u;
    *(_OWORD *)(v116 + 568) = 0u;
    *(_OWORD *)(v116 + 520) = 0u;
    *(_OWORD *)(v116 + 536) = 0u;
    *(_OWORD *)(v116 + 488) = 0u;
    *(_OWORD *)(v116 + 504) = 0u;
    *(_OWORD *)&v79->flags = 0u;
    *(_DWORD *)(v116 + 476) = 196608;
    *(void *)(v116 + 496) = v115[2];
    *(_OWORD *)(v116 + 480) = *(_OWORD *)v115;
    *(void *)(v116 + 608) = v81;
    *(_DWORD *)(v116 + 616) = 65568;
    *(void *)(v116 + 636) = 1065353216;
    uint64_t v82 = *(void *)(v117 + 24) + v73;
    *(_OWORD *)(v116 + 792) = 0u;
    *(_OWORD *)(v116 + 808) = 0u;
    *(_OWORD *)(v116 + 760) = 0u;
    *(_OWORD *)(v116 + 776) = 0u;
    *(_OWORD *)(v116 + 728) = 0u;
    *(_OWORD *)(v116 + 744) = 0u;
    *(_OWORD *)(v116 + 696) = 0u;
    *(_OWORD *)(v116 + 712) = 0u;
    *(_OWORD *)(v116 + 664) = 0u;
    *(_OWORD *)(v116 + 680) = 0u;
    *(_OWORD *)&out_delta->flags = 0u;
    *(_DWORD *)(v116 + 652) = 196608;
    *(_OWORD *)(v116 + 656) = *(_OWORD *)__pa;
    *(void *)(v116 + 672) = __pa[2];
    *(void *)(v116 + 784) = v82;
    *(_DWORD *)(v116 + 792) = 65568;
    *(void *)(v116 + 812) = 1065353216;
    uint64_t v83 = BNNSFilterApplyBackwardBatch(*(void **)(*(void *)(v116 + 824) + v74), batch_size, (const void *)(*(void *)(v12 + 24) + v72), v109, v79, v109, (const void *)(*(void *)(v111 + 24) + v73), v107, out_delta, v107, 0, 0);
    if (v83) {
      Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v83);
    }
    v74 += 8;
    v73 += v104;
    v72 += v103;
  }
  while (v105 != v74);
  if (v17)
  {
    int v84 = *(_DWORD *)(v17 + 20);
    if (v84 >= 1)
    {
      int v85 = 0;
      LODWORD(v86) = 0;
      int v87 = *(_DWORD *)(v17 + 16);
      do
      {
        if (v87 >= 1)
        {
          int v88 = 0;
          int v89 = *(_DWORD *)(v17 + 12);
          do
          {
            if (v89 >= 1)
            {
              int v90 = 0;
              uint64_t v91 = *(unsigned int *)(v17 + 8);
              int v92 = v121;
              int v93 = v120;
              do
              {
                if ((int)v91 >= 1)
                {
                  uint64_t v94 = *(void *)(v101 + 24);
                  uint64_t v95 = *(void *)(v17 + 24);
                  uint64_t v86 = (int)v86;
                  int v96 = v93
                      + *(_DWORD *)(v101 + 8) * (v92 + *(_DWORD *)(v101 + 12) * (v88 + v85 * *(_DWORD *)(v101 + 16)));
                  uint64_t v97 = v91;
                  do
                  {
                    *(_DWORD *)(v95 + 4 * v86++) = *(_DWORD *)(v94 + 4 * v96++);
                    --v97;
                  }
                  while (v97);
                }
                ++v90;
                ++v92;
              }
              while (v90 != v89);
            }
            ++v88;
          }
          while (v88 != v87);
        }
        ++v85;
      }
      while (v85 != v84);
    }
  }
  operator delete(__pa);
  operator delete(v115);
  if (v98) {
    nitro::nitro_function::nitro_function(v98);
  }
  if (v99) {
    nitro::nitro_function::nitro_function(v99);
  }
  if (v124) {
    nitro::nitro_function::nitro_function(v124);
  }
  if (*((void *)&v125 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v125 + 1));
  }
  if (v100) {
    nitro::nitro_function::nitro_function(v100);
  }
  if (*((void *)&v101 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v101 + 1));
  }
}

void sub_192A5904C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, long long a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p)
{
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  int v32 = *(std::__shared_weak_count **)(v30 - 136);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  unsigned int v33 = *(std::__shared_weak_count **)(v30 - 120);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (*((void *)&a17 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&a17 + 1));
  }
  _Unwind_Resume(exception_object);
}

void std::vector<void *>::resize(char **a1, unint64_t a2)
{
  uint8x8_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    int v19 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  long long v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    int v19 = &v4[8 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
  uint64_t v12 = &v11[8 * v5];
  uint64_t v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  int v15 = &v12[8 * v6];
  uint64_t v17 = *a1;
  unint64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    unint64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void Espresso::convolution_grad_kernel::~convolution_grad_kernel(void ***this)
{
  Espresso::convolution_grad_kernel::~convolution_grad_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  void **v3;
  void **v4;
  uint64_t vars8;

  *this = (void **)&unk_1EE35A218;
  unint64_t v2 = (void **)(this + 103);
  Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(this + 103);
  uint8x8_t v3 = (void **)*v2;
  if (*v2)
  {
    this[104] = v3;
    operator delete(v3);
  }
  *this = (void **)&unk_1EE368A88;
  unint64_t v4 = (void **)(this + 35);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::convolution_weights_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    long long v7 = (std::__shared_weak_count *)v6[21];
    uint64_t v94 = v6[20];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v7 = 0;
    uint64_t v94 = 0;
  }
  uint64_t v8 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v8)
  {
    uint64_t v9 = (std::__shared_weak_count *)v8[21];
    uint64_t v99 = v8[20];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v99 = 0;
  }
  unint64_t v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v10)
  {
    uint64_t v12 = v10[20];
    uint64_t v11 = (std::__shared_weak_count *)v10[21];
    *(void *)&long long v107 = v12;
    *((void *)&v107 + 1) = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    long long v107 = 0uLL;
  }
  int v13 = *(_DWORD *)(a1 + 420);
  if (v13 <= 1) {
    unint64_t v14 = 1;
  }
  else {
    unint64_t v14 = v13;
  }
  int v15 = *(_DWORD *)(v12 + 8);
  int v16 = *(_DWORD *)(v12 + 12);
  int v18 = *(_DWORD *)(v99 + 8);
  int v17 = *(_DWORD *)(v99 + 12);
  int v19 = *(__int16 *)(a1 + 396);
  int v20 = *(__int16 *)(a1 + 398);
  int v21 = *(_DWORD *)(a1 + 352);
  int v22 = *(_DWORD *)(a1 + 356);
  unsigned int v23 = *(__int16 *)(a1 + 384);
  unsigned int v24 = *(__int16 *)(a1 + 386);
  unint64_t v104 = __PAIR64__(v24, v23);
  unsigned int v25 = *(__int16 *)(a1 + 388);
  unsigned int v26 = *(__int16 *)(a1 + 390);
  unint64_t v105 = __PAIR64__(v26, v25);
  unsigned int v27 = *(__int16 *)(a1 + 392);
  unsigned int v28 = *(__int16 *)(a1 + 394);
  unint64_t v106 = __PAIR64__(v27, v28);
  int v29 = *(__int16 *)(a1 + 376);
  uint64_t v98 = a1;
  int32x4_t v79 = v9;
  int32x4_t v80 = v7;
  switch(v29)
  {
    case 4:
      goto LABEL_19;
    case 2:
      unint64_t v104 = 0;
      unint64_t v105 = 0;
      unint64_t v106 = 0;
      goto LABEL_63;
    case 1:
LABEL_19:
      unsigned int v27 = 0;
      unsigned int v28 = 0;
      unsigned int v30 = ((v17 - 1) * v20 - v16 + v22) & ~(((v17 - 1) * v20 - v16 + v22) >> 31);
      unsigned int v31 = ((v18 - 1) * v19 - v15 + v21) & ~(((v18 - 1) * v19 - v15 + v21) >> 31);
      unsigned int v32 = v31 >> 1;
      unsigned int v33 = v31 - (v31 >> 1);
      unsigned int v34 = v30 >> 1;
      unsigned int v35 = v30 - (v30 >> 1);
      if (*(_WORD *)(a1 + 376) == 1) {
        unsigned int v23 = v32;
      }
      else {
        unsigned int v23 = v33;
      }
      if (*(_WORD *)(a1 + 376) == 1) {
        unsigned int v24 = v33;
      }
      else {
        unsigned int v24 = v32;
      }
      uint64_t v36 = 12;
      if (*(_WORD *)(a1 + 376) == 1) {
        uint64_t v37 = 8;
      }
      else {
        uint64_t v37 = 12;
      }
      if (*(_WORD *)(a1 + 376) != 1) {
        uint64_t v36 = 8;
      }
      *(_DWORD *)((char *)&v104 + v37) = v34;
      *(_DWORD *)((char *)&v104 + v36) = v35;
      if ((unsigned __int16)v29 == 1) {
        uint64_t v38 = 20;
      }
      else {
        uint64_t v38 = 16;
      }
      if ((unsigned __int16)v29 == 1) {
        uint64_t v39 = 16;
      }
      else {
        uint64_t v39 = 20;
      }
      if ((unsigned __int16)v29 == 1) {
        unsigned int v26 = v35;
      }
      else {
        unsigned int v26 = v34;
      }
      if ((unsigned __int16)v29 == 1) {
        unsigned int v25 = v34;
      }
      else {
        unsigned int v25 = v35;
      }
      unint64_t v104 = __PAIR64__(v24, v23);
      *(_DWORD *)((char *)&v104 + v38) = 0;
      *(_DWORD *)((char *)&v104 + v39) = 0;
      break;
  }
  if (v23 != v24 || v25 != v26 || v28 != v27)
  {
    int v96 = (void *)v14;
    uint64_t v81 = v11;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v103, v24 + v23 + *(_DWORD *)(v12 + 8), v25 + *(_DWORD *)(v12 + 12) + v26, *(_DWORD *)(v12 + 16), *(_DWORD *)(v12 + 20));
    if (*(int *)(v12 + 20) >= 1)
    {
      int v42 = 0;
      uint64_t v43 = v103;
      int v44 = v105;
      uint64_t v45 = (int)v104;
      do
      {
        if (*(int *)(v12 + 16) >= 1)
        {
          int v46 = 0;
          do
          {
            int v47 = *(_DWORD *)(v12 + 12);
            if (v47 >= 1)
            {
              for (int i = 0; i < v47; ++i)
              {
                memcpy((void *)(*(void *)(v43 + 24)+ 4 * *(_DWORD *)(v43 + 12) * *(_DWORD *)(v43 + 8) * v42 * *(_DWORD *)(v43 + 16)+ 4 * *(_DWORD *)(v43 + 12) * *(_DWORD *)(v43 + 8) * v46+ 4 * (v44 + i) * *(_DWORD *)(v43 + 8)+ 4 * v45), (const void *)(*(void *)(v12 + 24)+ 4 * *(_DWORD *)(v12 + 8) * v47 * v42 * *(_DWORD *)(v12 + 16)+ 4 * *(_DWORD *)(v12 + 8) * v47 * v46+ 4 * *(_DWORD *)(v12 + 8) * i), 4 * *(int *)(v12 + 8));
                int v47 = *(_DWORD *)(v12 + 12);
              }
            }
            ++v46;
          }
          while (v46 < *(_DWORD *)(v12 + 16));
        }
        ++v42;
      }
      while (v42 < *(_DWORD *)(v12 + 20));
    }
    long long v107 = v103;
    int v49 = (std::__shared_weak_count *)*((void *)&v103 + 1);
    uint64_t v12 = v103;
    if (v81) {
      nitro::nitro_function::nitro_function(v81);
    }
    uint64_t v11 = v49;
    unint64_t v14 = (unint64_t)v96;
    a1 = v98;
  }
LABEL_63:
  float32x4_t v50 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  if (v50)
  {
    int v51 = (std::__shared_weak_count *)v50[21];
    uint64_t v93 = v50[20];
    *(void *)&long long v103 = v93;
    *((void *)&v103 + 1) = v51;
    if (v51)
    {
      size_t v78 = v51;
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      size_t v78 = 0;
    }
  }
  else
  {
    size_t v78 = 0;
    uint64_t v93 = 0;
    long long v103 = 0uLL;
  }
  uint64_t v82 = v11;
  if (v14 > (uint64_t)(*(void *)(a1 + 832) - *(void *)(a1 + 824)) >> 3)
  {
    std::vector<void *>::resize((char **)(a1 + 824), v14);
    uint64_t v52 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
    if (v52)
    {
      int v53 = (std::__shared_weak_count *)*((void *)v52 + 21);
      uint64_t v101 = *((void *)v52 + 20);
      unint64_t v102 = v53;
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v53 = 0;
      uint64_t v101 = 0;
      unint64_t v102 = 0;
    }
    v100[0] = 0;
    v100[1] = 0;
    create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(a1 + 304, (uint64_t)&v107, (uint64_t)&v103, (uint64_t)&v101, (uint64_t)v100, &v104, a1 + 824, 0, 0);
    if (v53) {
      nitro::nitro_function::nitro_function(v53);
    }
  }
  unint64_t v54 = *(int *)(a1 + 344);
  unint64_t v55 = *(int *)(a1 + 348);
  int v88 = *(_DWORD *)(v12 + 12);
  int v90 = *(_DWORD *)(v12 + 8);
  uint64_t v56 = *(int *)(v99 + 8);
  uint64_t v57 = *(int *)(v99 + 12);
  uint64_t v83 = *(int *)(a1 + 352);
  uint64_t v58 = *(int *)(a1 + 356);
  unint64_t v59 = operator new(0x20uLL);
  unint64_t v60 = v54 / v14;
  *unint64_t v59 = v83;
  v59[1] = v58;
  uint64_t v77 = v58;
  unint64_t v86 = v55 / v14;
  v59[2] = v55 / v14;
  v59[3] = v54 / v14;
  uint64_t v97 = v59;
  long long v61 = operator new(0x18uLL);
  unint64_t v62 = v14;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  *long long v61 = v56;
  v61[1] = v57;
  uint64_t __p = v61;
  v61[2] = v60;
  size_t v92 = *(int *)(v99 + 20);
  uint64_t v67 = v88 * (uint64_t)v90;
  size_t v91 = v67 * v55;
  uint64_t v68 = (int)v57 * (uint64_t)(int)v56;
  size_t v69 = v68 * v54;
  weights_delta = (BNNSNDArrayDescriptor *)(v98 + 472);
  out_delta = (const BNNSNDArrayDescriptor *)(v98 + 648);
  unint64_t v72 = v86 * v60;
  uint64_t v87 = 4 * v67 * v86;
  uint64_t v89 = 8 * v62;
  uint64_t v84 = 4 * v72 * v83 * v77;
  uint64_t v85 = 4 * v68 * v60;
  do
  {
    uint64_t v73 = *(void *)(v94 + 24) + v63;
    *(_OWORD *)(v98 + 616) = 0u;
    *(_OWORD *)(v98 + 632) = 0u;
    *(_OWORD *)(v98 + 584) = 0u;
    *(_OWORD *)(v98 + 600) = 0u;
    *(_OWORD *)(v98 + 552) = 0u;
    *(_OWORD *)(v98 + 568) = 0u;
    *(_OWORD *)(v98 + 520) = 0u;
    *(_OWORD *)(v98 + 536) = 0u;
    *(_OWORD *)(v98 + 488) = 0u;
    *(_OWORD *)(v98 + 504) = 0u;
    *(_OWORD *)&weights_delta->flags = 0u;
    *(_DWORD *)(v98 + 476) = 0x40000;
    long long v74 = v97[1];
    *(_OWORD *)(v98 + 480) = *v97;
    *(_OWORD *)(v98 + 496) = v74;
    *(void *)(v98 + 608) = v73;
    *(_DWORD *)(v98 + 616) = 65568;
    *(void *)(v98 + 636) = 1065353216;
    uint64_t v75 = *(void *)(v99 + 24) + v64;
    *(_OWORD *)(v98 + 792) = 0u;
    *(_OWORD *)(v98 + 808) = 0u;
    *(_OWORD *)(v98 + 760) = 0u;
    *(_OWORD *)(v98 + 776) = 0u;
    *(_OWORD *)(v98 + 728) = 0u;
    *(_OWORD *)(v98 + 744) = 0u;
    *(_OWORD *)(v98 + 696) = 0u;
    *(_OWORD *)(v98 + 712) = 0u;
    *(_OWORD *)(v98 + 664) = 0u;
    *(_OWORD *)(v98 + 680) = 0u;
    *(_OWORD *)&out_delta->flags = 0u;
    *(_DWORD *)(v98 + 652) = 196608;
    *(_OWORD *)(v98 + 656) = *(_OWORD *)__p;
    *(void *)(v98 + 672) = __p[2];
    *(void *)(v98 + 784) = v75;
    *(_DWORD *)(v98 + 792) = 65568;
    *(void *)(v98 + 812) = 1065353216;
    uint64_t v76 = BNNSFilterApplyBackwardBatch(*(void **)(*(void *)(v98 + 824) + v66), v92, (const void *)(*(void *)(v12 + 24) + v65), v91, 0, v91, (const void *)(*(void *)(v93 + 24) + v64), v69, out_delta, v69, weights_delta, 0);
    if (v76) {
      Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v76);
    }
    v66 += 8;
    v65 += v87;
    v64 += v85;
    v63 += v84;
  }
  while (v89 != v66);
  operator delete(__p);
  operator delete(v97);
  if (v78) {
    nitro::nitro_function::nitro_function(v78);
  }
  if (v82) {
    nitro::nitro_function::nitro_function(v82);
  }
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
  if (v80) {
    nitro::nitro_function::nitro_function(v80);
  }
}

void sub_192A59950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *__p)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::convolution_weights_grad_kernel::~convolution_weights_grad_kernel(void ***this)
{
  Espresso::convolution_weights_grad_kernel::~convolution_weights_grad_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  void **v3;
  void **v4;
  uint64_t vars8;

  *this = (void **)&unk_1EE366268;
  unint64_t v2 = (void **)(this + 103);
  Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(this + 103);
  uint8x8_t v3 = (void **)*v2;
  if (*v2)
  {
    this[104] = v3;
    operator delete(v3);
  }
  *this = (void **)&unk_1EE368A88;
  unint64_t v4 = (void **)(this + 35);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::pool_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  long long v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v7)
  {
    uint64_t v9 = (int32x2_t *)*((void *)v7 + 20);
    uint64_t v8 = *((void *)v7 + 21);
    if (v8)
    {
      uint64_t v45 = (std::__shared_weak_count *)*((void *)v7 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v45 = 0;
    }
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v9 = 0;
  }
  unint64_t v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v10)
  {
    uint64_t v12 = *((void *)v10 + 20);
    uint64_t v11 = *((void *)v10 + 21);
    if (v11)
    {
      int v44 = (std::__shared_weak_count *)*((void *)v10 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      int v44 = 0;
    }
  }
  else
  {
    int v44 = 0;
    uint64_t v12 = 0;
  }
  int v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v13)
  {
    int v17 = (int32x2_t *)*((void *)v13 + 20);
    uint64_t v16 = *((void *)v13 + 21);
    if (v16)
    {
      uint64_t v43 = (std::__shared_weak_count *)*((void *)v13 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v43 = 0;
    }
  }
  else
  {
    uint64_t v43 = 0;
    int v17 = 0;
  }
  int v18 = *(__int16 *)(a1 + 316);
  if (v18 != 4)
  {
    if (v18 == 2)
    {
      int32x4_t v22 = 0uLL;
    }
    else
    {
      if (v18 == 1) {
        goto LABEL_19;
      }
      int32x4_t v22 = vmovl_s16(*(int16x4_t *)(a1 + 324));
    }
    int32x4_t v41 = v22;
    goto LABEL_26;
  }
LABEL_19:
  int32x2_t v19 = vmax_s32(vadd_s32(vmla_s32(vneg_s32(v9[1]), *(int32x2_t *)(a1 + 296), vadd_s32(v17[1], (int32x2_t)-1)), *(int32x2_t *)(a1 + 284)), 0);
  v20.i32[1] = 1;
  v20.i32[0] = (unsigned __int32)v19.i32[0] >> 1;
  v15.i32[0] = vsub_s32(v19, v20).u32[0];
  *(uint32x2_t *)v14.i8 = vshl_u32((uint32x2_t)v19, (uint32x2_t)vneg_s32(v20));
  __int32 v21 = vsub_s32(v19, *(int32x2_t *)&v14).i32[1];
  if (*(_WORD *)(a1 + 316) == 1)
  {
    v15.i32[1] = v14.i32[1];
    int8x16_t v15 = vextq_s8(v14, v15, 0xCuLL);
    v15.i32[0] = (unsigned __int32)v19.i32[0] >> 1;
    v15.i32[3] = v21;
  }
  else
  {
    v15.i32[1] = (unsigned __int32)v19.i32[0] >> 1;
    v15.i64[1] = __PAIR64__(v14.u32[1], v21);
  }
  int32x4_t v41 = (int32x4_t)v15;
LABEL_26:
  Espresso::BNNSEngine::bnns_descriptor_for_layer_data((uint64_t)a4, (uint64_t)v51);
  Espresso::BNNSEngine::bnns_descriptor_for_layer_data((uint64_t)a3, (uint64_t)v53);
  uint64_t bnns_filter = *(void *)(a1 + 392);
  if (!bnns_filter)
  {
    long long v24 = *(_OWORD *)(a1 + 360);
    v50[4] = *(_OWORD *)(a1 + 344);
    v50[5] = v24;
    v50[6] = *(_OWORD *)(a1 + 376);
    long long v25 = *(_OWORD *)(a1 + 296);
    v50[0] = *(_OWORD *)(a1 + 280);
    v50[1] = v25;
    long long v26 = *(_OWORD *)(a1 + 328);
    v50[2] = *(_OWORD *)(a1 + 312);
    v50[3] = v26;
    uint64_t v49 = v54;
    v48[1] = v53[1];
    v48[2] = v53[2];
    v48[0] = v53[0];
    uint64_t v47 = v52;
    v46[1] = v51[1];
    void v46[2] = v51[2];
    v46[0] = v51[0];
    uint64_t bnns_filter = Espresso::BNNSEngine::pool_kernel::create_bnns_filter((uint64_t)v50, (uint64_t)v48, (uint64_t)v46, v41.i32[0], v41.i32[2], 0);
    *(void *)(a1 + 392) = bnns_filter;
  }
  filter = (void *)bnns_filter;
  uint64_t v42 = v12;
  uint64_t v28 = v9[1].i32[1];
  uint64_t v27 = v9[2].i32[0];
  uint64_t v29 = v9[1].i32[0];
  unsigned int v30 = v9;
  uint64_t v32 = v17[1].i32[0];
  uint64_t v31 = v17[1].i32[1];
  unsigned int v33 = v17;
  unsigned int v34 = operator new(0x18uLL);
  *unsigned int v34 = v29;
  v34[1] = v28;
  v34[2] = v27;
  unsigned int v35 = operator new(0x18uLL);
  *unsigned int v35 = v32;
  v35[1] = v31;
  v35[2] = v27;
  size_t v36 = v33[2].i32[1];
  int32x2_t v37 = v30[3];
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 404) = 196608;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)v34;
  *(void *)(a1 + 424) = v34[2];
  *(int32x2_t *)(a1 + 536) = v37;
  *(_DWORD *)(a1 + 544) = 65568;
  *(void *)(a1 + 564) = 1065353216;
  int32x2_t v38 = v33[3];
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 580) = 196608;
  *(_OWORD *)(a1 + 584) = *(_OWORD *)v35;
  *(void *)(a1 + 600) = v35[2];
  *(int32x2_t *)(a1 + 712) = v38;
  *(_DWORD *)(a1 + 720) = 65568;
  *(void *)(a1 + 740) = 1065353216;
  uint64_t v39 = BNNSFilterApplyBackwardBatch(filter, v36, *(const void **)(v42 + 24), (int)v29 * (uint64_t)(int)v27 * v28, (BNNSNDArrayDescriptor *)(a1 + 400), (int)v29 * (uint64_t)(int)v27 * v28, 0, (int)v32 * (uint64_t)(int)v27 * v31, (const BNNSNDArrayDescriptor *)(a1 + 576), (int)v32 * (uint64_t)(int)v27 * v31, 0, 0);
  if (v39) {
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v39);
  }
  operator delete(v35);
  operator delete(v34);
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
}

void sub_192A59E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20)
{
  operator delete(v20);
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  _Unwind_Resume(a1);
}

void Espresso::pool_grad_kernel::~pool_grad_kernel(void **this)
{
  Espresso::pool_grad_kernel::~pool_grad_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *this = &unk_1EE33DEB8;
  BNNSFilterDestroy(this[49]);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::nonlinearity_grad::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  long long v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v7)
  {
    uint64_t v9 = *((void *)v7 + 20);
    uint64_t v8 = *((void *)v7 + 21);
    if (v8)
    {
      uint64_t v31 = (std::__shared_weak_count *)*((void *)v7 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v31 = 0;
    }
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v9 = 0;
  }
  unint64_t v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v10)
  {
    uint64_t v12 = *((void *)v10 + 20);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 21);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  int v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v13)
  {
    uint64_t v15 = *((void *)v13 + 20);
    int8x16_t v14 = (std::__shared_weak_count *)*((void *)v13 + 21);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v15 = 0;
    int8x16_t v14 = 0;
  }
  uint64_t v16 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  if (v16)
  {
    uint64_t v18 = *((void *)v16 + 20);
    int v17 = (std::__shared_weak_count *)*((void *)v16 + 21);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v18 = 0;
    int v17 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)v38, *(void *)*a3);
  uint64_t v21 = 0;
  size_t v22 = *(int *)(v12 + 8);
  do
  {
    v22 *= *(int *)(v12 + 12 + v21);
    v21 += 4;
  }
  while (v21 != 12);
  if (!*(void *)(a1 + 336))
  {
    uint64_t v37 = 0;
    *(void *)&v33.data_bias = 0;
    size_t v34 = v22;
    int v35 = 65568;
    int v36 = 1065353216;
    v33.std::string::size_type size = v22;
    v33.data_type = BNNSDataTypeFloat32;
    v33.data_scale = 1.0;
    memset(v32, 0, sizeof(v32));
    uint64_t v23 = *(unsigned int *)(a1 + 280);
    switch((int)v23)
    {
      case 0:
        LODWORD(v32[0].size) = 1;
        goto LABEL_28;
      case 1:
        int v24 = 4;
        goto LABEL_27;
      case 2:
      case 4:
      case 5:
        goto LABEL_45;
      case 3:
        int v24 = 3;
        goto LABEL_27;
      case 6:
        goto LABEL_28;
      default:
        if (v23 != 14) {
LABEL_45:
        }
          Espresso::throw_exception_selector<Espresso::generic_error,int &>("activation_grad for activation mode %d is not implemented", v23);
        int v24 = 8;
LABEL_27:
        LODWORD(v32[0].size) = v24;
        *(size_t *)((char *)&v32[0].size + 4) = *(void *)(a1 + 284);
LABEL_28:
        *(void *)(a1 + 336) = Espresso::BNNSEngine::create_bnns_activation((Espresso::BNNSEngine *)&v34, &v33, v32, v19, v20);
        break;
    }
  }
  size_t v25 = v38[3];
  size_t v26 = v38[1] * (uint64_t)v38[2] * v38[0];
  uint64_t v27 = *(void *)(v9 + 24);
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 488) = v27;
  *(_DWORD *)(a1 + 356) = 0x10000;
  *(void *)(a1 + 360) = v26;
  *(_DWORD *)(a1 + 496) = 65568;
  *(void *)(a1 + 516) = 1065353216;
  uint64_t v28 = *(void *)(v12 + 24);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 532) = 0x10000;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(void *)(a1 + 536) = v26;
  *(void *)(a1 + 664) = v28;
  *(_DWORD *)(a1 + 672) = 65568;
  *(void *)(a1 + 692) = 1065353216;
  if (v15)
  {
    uint64_t v29 = *(const void **)(v15 + 24);
    if (v18)
    {
LABEL_31:
      unsigned int v30 = *(const void **)(v18 + 24);
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v29 = 0;
    if (v18) {
      goto LABEL_31;
    }
  }
  unsigned int v30 = 0;
LABEL_34:
  BNNSFilterApplyBackwardBatch(*(void **)(a1 + 336), v25, v29, v26, (BNNSNDArrayDescriptor *)(a1 + 352), v26, v30, v26, (const BNNSNDArrayDescriptor *)(a1 + 528), v26, 0, 0);
  if (__p)
  {
    uint64_t v40 = __p;
    operator delete(__p);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
}

void sub_192A5A27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
  {
    operator delete(__p);
    if (!v36)
    {
LABEL_3:
      if (!v35) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if (!v36)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v36);
  if (!v35)
  {
LABEL_4:
    if (!v34) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  nitro::nitro_function::nitro_function(v35);
  if (!v34)
  {
LABEL_6:
    if (a14) {
      nitro::nitro_function::nitro_function(a14);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  nitro::nitro_function::nitro_function(v34);
  goto LABEL_6;
}

uint64_t Espresso::BNNSEngine::create_bnns_activation(Espresso::BNNSEngine *this, const BNNSVectorDescriptor *a2, const BNNSVectorDescriptor *a3, const BNNSActivation *a4, const BNNSFilterParameters *a5)
{
  long long v7 = this;
  {
    if (this)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
      }
      Espresso::BNNSEngine::create_bnns_activation(BNNSVectorDescriptor const*,BNNSVectorDescriptor const*,BNNSActivation const*,BNNSFilterParameters const*)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
    }
  }
  if (Espresso::BNNSEngine::create_bnns_activation(BNNSVectorDescriptor const*,BNNSVectorDescriptor const*,BNNSActivation const*,BNNSFilterParameters const*)::log_requested)
  {
    uint64_t v8 = Espresso::espresso_os_log_subsystem(this, (const char *)a2);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unint64_t v10 = 0;
      _os_log_debug_impl(&dword_1920CB000, v8, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateVectorActivationLayer", v10, 2u);
    }
  }
  return MEMORY[0x192FEE790](v7, a2, a3, 0, a5);
}

void Espresso::nonlinearity_grad::~nonlinearity_grad(void **this)
{
  Espresso::nonlinearity_grad::~nonlinearity_grad(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1EE34CFA0;
  BNNSFilterDestroy(this[42]);
  *this = &unk_1EE356DA8;
  unint64_t v2 = (std::__shared_weak_count *)this[41];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::inner_product_grad_kernel::clear_weights(uint64_t this)
{
  *(void *)(this + 448) = 0;
  return this;
}

void Espresso::inner_product_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 20);
    long long v7 = (std::__shared_weak_count *)*((void *)v6 + 21);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    uint64_t v11 = *((void *)v9 + 20);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 21);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  uint64_t v14 = *((void *)v12 + 20);
  int v13 = (std::__shared_weak_count *)*((void *)v12 + 21);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *(void **)(v14 + 24);
    nitro::nitro_function::nitro_function(v13);
  }
  else
  {
    uint64_t v15 = *(void **)(v14 + 24);
  }
  Espresso::abstract_blob_container::shape(v31, *(void *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v34, (const Espresso::layer_shape *)v31, 0);
  if (__p)
  {
    BNNSVectorDescriptor v33 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 344) || v38 <= 3)
  {
    switch(v38)
    {
      case 1u:
        size_t v16 = 1;
        break;
      case 2u:
        goto LABEL_22;
      case 3u:
        goto LABEL_21;
      case 4u:
        size_t v16 = v35 * (uint64_t)v34 * v36;
        break;
      case 5u:
        size_t v16 = v35 * (uint64_t)v34 * v36 * v37;
        break;
      default:
        goto LABEL_23;
    }
  }
  else if (v38 == 5)
  {
LABEL_21:
    size_t v16 = v35 * (uint64_t)v34;
  }
  else if (v38 == 4)
  {
LABEL_22:
    size_t v16 = v34;
  }
  else
  {
LABEL_23:
    size_t v16 = 0;
  }
  int v17 = *(void **)(a1 + 440);
  if (v17)
  {
    if (v15 == *(void **)(a1 + 448)) {
      goto LABEL_30;
    }
    BNNSFilterDestroy(v17);
    *(void *)(a1 + 440) = 0;
  }
  *(void *)(a1 + 448) = v15;
  *(void *)(a1 + 440) = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 304), *(_DWORD *)(a1 + 420), *(_DWORD *)(a1 + 432), v15, 0, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, 0);
LABEL_30:
  uint64_t v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  uint64_t v20 = *((void *)v18 + 20);
  int32x2_t v19 = (std::__shared_weak_count *)*((void *)v18 + 21);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = *(const void **)(v20 + 24);
    nitro::nitro_function::nitro_function(v19);
  }
  else
  {
    uint64_t v21 = *(const void **)(v20 + 24);
  }
  size_t v22 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  uint64_t v24 = *((void *)v22 + 20);
  uint64_t v23 = (std::__shared_weak_count *)*((void *)v22 + 21);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v25 = *(const void **)(v24 + 24);
    nitro::nitro_function::nitro_function(v23);
  }
  else
  {
    size_t v25 = *(const void **)(v24 + 24);
  }
  uint64_t v26 = *(unsigned int *)(a1 + 308);
  uint64_t v27 = *(void *)(v8 + 24);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 460) = 0x10000;
  *(void *)(a1 + 464) = v26;
  *(void *)(a1 + 592) = v27;
  *(_DWORD *)(a1 + 600) = 65568;
  *(void *)(a1 + 620) = 1065353216;
  uint64_t v28 = *(unsigned int *)(a1 + 304);
  uint64_t v29 = *(void *)(v11 + 24);
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 636) = 0x10000;
  *(void *)(a1 + 640) = v28;
  *(void *)(a1 + 768) = v29;
  *(_DWORD *)(a1 + 776) = 65568;
  *(void *)(a1 + 796) = 1065353216;
  uint64_t v30 = BNNSFilterApplyBackwardBatch(*(void **)(a1 + 440), v16, v21, *(unsigned int *)(a1 + 308), (BNNSNDArrayDescriptor *)(a1 + 456), *(unsigned int *)(a1 + 308), v25, *(unsigned int *)(a1 + 304), (const BNNSNDArrayDescriptor *)(a1 + 632), *(unsigned int *)(a1 + 304), 0, 0);
  if (v30) {
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v30);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192A5A824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    if (!v21)
    {
LABEL_3:
      if (!v20) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v21)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v21);
  if (!v20) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v20);
  goto LABEL_5;
}

void Espresso::inner_product_grad_kernel::~inner_product_grad_kernel(void **this)
{
  Espresso::inner_product_grad_kernel::~inner_product_grad_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1EE35DA78;
  BNNSFilterDestroy(this[55]);
  *this = &unk_1EE368A88;
  unint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::inner_product_weights_grad_kernel::clear_weights(uint64_t this)
{
  *(void *)(this + 448) = 0;
  return this;
}

void Espresso::inner_product_weights_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v8 = v6[20];
    long long v7 = (std::__shared_weak_count *)v6[21];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    uint64_t v11 = *((void *)v9 + 20);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 21);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v12)
  {
    uint64_t v14 = v12[20];
    int v13 = (std::__shared_weak_count *)v12[21];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v13 = 0;
    uint64_t v14 = 0;
  }
  unsigned int v38 = v7;
  int v37 = v13;
  Espresso::abstract_blob_container::shape(v39, *(void *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v42, (const Espresso::layer_shape *)v39, 0);
  if (__p)
  {
    int32x4_t v41 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 344) || v46 <= 3)
  {
    switch(v46)
    {
      case 1u:
        uint64_t v15 = 1;
        goto LABEL_27;
      case 2u:
        goto LABEL_23;
      case 3u:
        goto LABEL_22;
      case 4u:
        uint64_t v15 = v43 * (uint64_t)v42 * v44;
        goto LABEL_27;
      case 5u:
        uint64_t v15 = v43 * (uint64_t)v42 * v44 * v45;
        goto LABEL_27;
      default:
        goto LABEL_24;
    }
  }
  if (v46 == 5)
  {
LABEL_22:
    uint64_t v15 = v43 * (uint64_t)v42;
  }
  else
  {
    if (v46 != 4)
    {
LABEL_24:
      batch_std::string::size_type size = 0;
      goto LABEL_28;
    }
LABEL_23:
    uint64_t v15 = v42;
  }
LABEL_27:
  batch_std::string::size_type size = v15;
LABEL_28:
  size_t v16 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  uint64_t v18 = *((void *)v16 + 20);
  int v17 = (std::__shared_weak_count *)*((void *)v16 + 21);
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    int32x2_t v19 = *(void **)(v18 + 24);
    nitro::nitro_function::nitro_function(v17);
  }
  else
  {
    int32x2_t v19 = *(void **)(v18 + 24);
  }
  uint64_t v20 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  if (v20)
  {
    uint64_t v21 = (std::__shared_weak_count *)*((void *)v20 + 21);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  size_t v22 = *(void **)(a1 + 440);
  if (v22)
  {
    if (v19 == *(void **)(a1 + 448)) {
      goto LABEL_39;
    }
    BNNSFilterDestroy(v22);
    *(void *)(a1 + 440) = 0;
  }
  *(void *)(a1 + 448) = v19;
  *(void *)(a1 + 440) = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 304), *(_DWORD *)(a1 + 420), *(_DWORD *)(a1 + 432), v19, 0, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, 0);
LABEL_39:
  uint64_t v23 = *(const void **)(v14 + 24);
  uint64_t v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  uint64_t v26 = *((void *)v24 + 20);
  size_t v25 = (std::__shared_weak_count *)*((void *)v24 + 21);
  uint64_t v27 = v11;
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v28 = *(const void **)(v26 + 24);
    nitro::nitro_function::nitro_function(v25);
  }
  else
  {
    uint64_t v28 = *(const void **)(v26 + 24);
  }
  uint64_t v29 = *(void *)(v8 + 24);
  uint64_t v30 = *(unsigned int *)(a1 + 308);
  uint64_t v31 = *(unsigned int *)(a1 + 304);
  uint64_t v32 = operator new(0x10uLL);
  void *v32 = v30;
  v32[1] = v31;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 460) = 0x20000;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)v32;
  *(void *)(a1 + 592) = v29;
  *(_DWORD *)(a1 + 600) = 65568;
  *(void *)(a1 + 620) = 1065353216;
  operator delete(v32);
  uint64_t v33 = *(void *)(v27 + 24);
  uint64_t v34 = *(unsigned int *)(a1 + 304);
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 636) = 0x10000;
  *(void *)(a1 + 640) = v34;
  *(void *)(a1 + 768) = v33;
  *(_DWORD *)(a1 + 776) = 65568;
  *(void *)(a1 + 796) = 1065353216;
  uint64_t v35 = BNNSFilterApplyBackwardBatch(*(void **)(a1 + 440), batch_size, v23, *(unsigned int *)(a1 + 308), 0, *(unsigned int *)(a1 + 308), v28, *(unsigned int *)(a1 + 304), (const BNNSNDArrayDescriptor *)(a1 + 632), *(unsigned int *)(a1 + 304), (BNNSNDArrayDescriptor *)(a1 + 456), 0);
  if (v35) {
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v35);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
}

void sub_192A5AD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_weights_grad_kernel::~inner_product_weights_grad_kernel(void **this)
{
  Espresso::inner_product_weights_grad_kernel::~inner_product_weights_grad_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1EE3688F8;
  BNNSFilterDestroy(this[55]);
  *this = &unk_1EE368A88;
  unint64_t v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::fused_convolution_grad_kernel::should_unpack()
{
  return 0;
}

void Espresso::fused_convolution_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  long long v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v7)
  {
    uint64_t v9 = (int32x2_t *)*((void *)v7 + 20);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 21);
    unint64_t v86 = v9;
    uint64_t v87 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v86 = 0;
    uint64_t v87 = 0;
  }
  unint64_t v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v10)
  {
    uint64_t v14 = (int32x2_t *)*((void *)v10 + 20);
    int v13 = (std::__shared_weak_count *)*((void *)v10 + 21);
    uint64_t v84 = v14;
    uint64_t v85 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
  }
  v11.i16[0] = *(_WORD *)(a1 + 376);
  v11.i16[2] = *(_WORD *)(a1 + 378);
  int32x2_t v15 = *(int32x2_t *)(a1 + 328);
  int32x2_t v16 = v14[1];
  int32x2_t v17 = v9[1];
  v12.i16[0] = *(_WORD *)(a1 + 372);
  v12.i16[2] = *(_WORD *)(a1 + 374);
  int32x4_t v82 = vmovl_s16(*(int16x4_t *)(a1 + 360));
  int v18 = *(__int16 *)(a1 + 368);
  LODWORD(v83) = *(__int16 *)(a1 + 370);
  HIDWORD(v83) = v18;
  int v19 = *(__int16 *)(a1 + 352);
  if (v19 == 4)
  {
LABEL_12:
    int32x2_t v20 = vmax_s32(vsub_s32(vmul_s32(vadd_s32(v17, (int32x2_t)-1), vshr_n_s32(vshl_n_s32(v12, 0x10uLL), 0x10uLL)), (int32x2_t)vmvn_s8((int8x8_t)vmla_s32(vneg_s32(v16), vadd_s32(v15, (int32x2_t)-1), vshr_n_s32(vshl_n_s32(v11, 0x10uLL), 0x10uLL)))), 0);
    unsigned int v21 = (unsigned __int32)v20.i32[0] >> 1;
    v22.i32[1] = 1;
    v22.i32[0] = (unsigned __int32)v20.i32[0] >> 1;
    unsigned __int32 v23 = vsub_s32(v20, v22).u32[0];
    int32x2_t v24 = (int32x2_t)vshl_u32((uint32x2_t)v20, (uint32x2_t)vneg_s32(v22));
    int32x2_t v25 = vsub_s32(v20, (int32x2_t)__PAIR64__(v24.u32[1], v23));
    if (*(_WORD *)(a1 + 352) == 1)
    {
      v82.i32[0] = v21;
      *(uint64_t *)((char *)v82.i64 + 4) = __PAIR64__(v24.u32[1], v23);
      *(_DWORD *)((unint64_t)&v82 | 0xC) = v25.i32[1];
    }
    else
    {
      v82.i64[0] = __PAIR64__(v21, v23);
      v82.u64[1] = (unint64_t)vzip2_s32(v25, v24);
    }
    goto LABEL_16;
  }
  if (v19 != 2)
  {
    if (v19 != 1) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  int32x4_t v82 = 0uLL;
LABEL_16:
  uint64_t v83 = 0;
LABEL_17:
  uint64_t v26 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  if (v26)
  {
    uint64_t v27 = (std::__shared_weak_count *)*((void *)v26 + 21);
    uint64_t v80 = *((void *)v26 + 20);
    uint64_t v81 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v80 = 0;
    uint64_t v81 = 0;
  }
  uint64_t v28 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  if (v28)
  {
    uint64_t v30 = *((void *)v28 + 20);
    uint64_t v29 = (std::__shared_weak_count *)*((void *)v28 + 21);
    uint64_t v78 = v30;
    int32x4_t v79 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v78 = 0;
    int32x4_t v79 = 0;
  }
  if (*(unsigned char *)(a1 + 448)
    && (int v31 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)(a1 + 280), 0, *(unsigned __int8 *)(a1 + 448)), (v32 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v31)) != 0))
  {
    uint64_t v34 = *((void *)v32 + 20);
    uint64_t v33 = *((void *)v32 + 21);
    if (v33)
    {
      uint64_t v75 = (std::__shared_weak_count *)*((void *)v32 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v75 = 0;
    }
  }
  else
  {
    uint64_t v75 = 0;
    uint64_t v34 = 0;
  }
  if (*(unsigned char *)(a1 + 449)
    && (int v35 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)(a1 + 280), 1, *(unsigned __int8 *)(a1 + 449)), (v36 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v35)) != 0))
  {
    uint64_t v38 = *((void *)v36 + 20);
    uint64_t v37 = *((void *)v36 + 21);
    if (v37)
    {
      long long v74 = (std::__shared_weak_count *)*((void *)v36 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v38 = 0;
  }
  long long v74 = 0;
LABEL_36:
  if (*(unsigned char *)(a1 + 450))
  {
    int v39 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)(a1 + 280), 2, *(unsigned __int8 *)(a1 + 450));
    uint64_t v40 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v39);
    uint64_t v42 = *((void *)v40 + 20);
    int32x4_t v41 = (std::__shared_weak_count *)*((void *)v40 + 21);
    if (v41)
    {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v70 = *(void *)(v42 + 24);
      nitro::nitro_function::nitro_function(v41);
    }
    else
    {
      uint64_t v70 = *(void *)(v42 + 24);
    }
  }
  else
  {
    uint64_t v70 = 0;
  }
  if (*(void *)(a1 + 1168) == *(void *)(a1 + 1160))
  {
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    if (*(unsigned char *)(a1 + 450))
    {
      int v43 = (char *)operator new(0x58uLL);
      *((void *)v43 + 1) = 0;
      *((void *)v43 + 2) = 0;
      *(void *)int v43 = &unk_1EE389920;
      int v44 = *(_DWORD *)(a1 + 320);
      *((void *)v43 + 3) = &unk_1EE36BEB0;
      *(_OWORD *)(v43 + 56) = 0u;
      *(_OWORD *)(v43 + 72) = 0u;
      *((_DWORD *)v43 + 8) = v44;
      *((void *)v43 + 5) = v70;
      v43[48] = 0;
      uint64_t v76 = v43 + 24;
      uint64_t v77 = v43;
    }
    else
    {
      int v43 = 0;
    }
    std::vector<void *>::resize((char **)(a1 + 1160), 1uLL);
    int v45 = v30 ? &v78 : (uint64_t *)&v86;
    create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(a1 + 280, (uint64_t)&v84, (uint64_t)v45, (uint64_t)&v80, (uint64_t)&v76, &v82, a1 + 1160, 0, 0);
    if (v43) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v43);
    }
  }
  uint64_t v73 = v30;
  uint64_t v68 = v38;
  uint64_t v69 = v34;
  uint64_t v46 = *(int *)(a1 + 320);
  uint64_t v47 = *(int *)(a1 + 324);
  uint64_t v49 = v14[1].i32[0];
  uint64_t v48 = v14[1].i32[1];
  float32x4_t v50 = v9;
  uint64_t v51 = v9[1].i32[0];
  uint64_t v52 = v9[1].i32[1];
  int v53 = operator new(0x18uLL);
  uint64_t v71 = v48;
  unint64_t v72 = v14;
  *int v53 = v49;
  v53[1] = v48;
  void v53[2] = v47;
  uint64_t v54 = *(void *)(a1 + 328);
  unint64_t v55 = operator new(0x20uLL);
  *(void *)&long long v56 = (int)v54;
  *((void *)&v56 + 1) = SHIDWORD(v54);
  *(_OWORD *)unint64_t v55 = v56;
  v55[2] = v47;
  v55[3] = v46;
  uint64_t v57 = operator new(0x18uLL);
  *uint64_t v57 = v51;
  v57[1] = v52;
  void v57[2] = v46;
  size_t v58 = v50[2].i32[1];
  int32x2_t v59 = v50[3];
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_DWORD *)(a1 + 988) = 196608;
  *(void *)(a1 + 1008) = v46;
  *(_OWORD *)(a1 + 992) = *(_OWORD *)v57;
  *(int32x2_t *)(a1 + 1120) = v59;
  *(_DWORD *)(a1 + 1128) = 65568;
  *(void *)(a1 + 1148) = 1065353216;
  if (*(unsigned char *)(a1 + 448))
  {
    unint64_t v60 = (BNNSNDArrayDescriptor *)(a1 + 456);
    uint64_t v61 = *(void *)(v69 + 24);
    *(_OWORD *)(a1 + 456) = 0uLL;
    *(_OWORD *)(a1 + 472) = 0uLL;
    *(_OWORD *)(a1 + 584) = 0uLL;
    *(_OWORD *)(a1 + 600) = 0uLL;
    *(_OWORD *)(a1 + 616) = 0uLL;
    *(_OWORD *)(a1 + 552) = 0uLL;
    *(_OWORD *)(a1 + 568) = 0uLL;
    *(_OWORD *)(a1 + 520) = 0uLL;
    *(_OWORD *)(a1 + 536) = 0uLL;
    *(_OWORD *)(a1 + 488) = 0uLL;
    *(_OWORD *)(a1 + 504) = 0uLL;
    *(_DWORD *)(a1 + 460) = 196608;
    *(_OWORD *)(a1 + 464) = *(_OWORD *)v53;
    *(void *)(a1 + 480) = v53[2];
    *(void *)(a1 + 592) = v61;
    *(_DWORD *)(a1 + 600) = 65568;
    *(void *)(a1 + 620) = 1065353216;
  }
  else
  {
    unint64_t v60 = 0;
  }
  if (*(unsigned char *)(a1 + 449))
  {
    weights_delta = (BNNSNDArrayDescriptor *)(a1 + 632);
    uint64_t v63 = *(void *)(v68 + 24);
    *(_OWORD *)(a1 + 632) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
    *(_OWORD *)(a1 + 776) = 0u;
    *(_OWORD *)(a1 + 792) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_OWORD *)(a1 + 712) = 0u;
    *(_OWORD *)(a1 + 728) = 0u;
    *(_OWORD *)(a1 + 680) = 0u;
    *(_OWORD *)(a1 + 696) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_DWORD *)(a1 + 636) = 0x40000;
    long long v64 = *((_OWORD *)v55 + 1);
    *(_OWORD *)(a1 + 640) = *(_OWORD *)v55;
    *(_OWORD *)(a1 + 656) = v64;
    *(void *)(a1 + 768) = v63;
    *(_DWORD *)(a1 + 776) = 65568;
    *(void *)(a1 + 796) = 1065353216;
  }
  else
  {
    weights_delta = 0;
  }
  if (*(unsigned char *)(a1 + 450))
  {
    uint64_t v65 = (BNNSNDArrayDescriptor *)(a1 + 808);
    *(_OWORD *)(a1 + 936) = 0u;
    *(_OWORD *)(a1 + 952) = 0u;
    *(_OWORD *)(a1 + 968) = 0u;
    *(_OWORD *)(a1 + 904) = 0u;
    *(_OWORD *)(a1 + 920) = 0u;
    *(_OWORD *)(a1 + 872) = 0u;
    *(_OWORD *)(a1 + 888) = 0u;
    *(_OWORD *)(a1 + 840) = 0u;
    *(_OWORD *)(a1 + 856) = 0u;
    *(_OWORD *)(a1 + 808) = 0u;
    *(_OWORD *)(a1 + 824) = 0u;
    *(_DWORD *)(a1 + 812) = 0x10000;
    *(void *)(a1 + 816) = v46;
    *(void *)(a1 + 944) = v70;
    *(_DWORD *)(a1 + 952) = 65568;
    *(void *)(a1 + 972) = 1065353216;
  }
  else
  {
    uint64_t v65 = 0;
  }
  if (v73) {
    uint64_t v66 = *(const void **)(v73 + 24);
  }
  else {
    uint64_t v66 = 0;
  }
  uint64_t v67 = BNNSFilterApplyBackwardBatch(**(void ***)(a1 + 1160), v58, *(const void **)&v72[3], (int)v49 * (uint64_t)(int)v47 * v71, v60, (int)v49 * (uint64_t)(int)v47 * v71, v66, (int)v51 * (uint64_t)(int)v46 * v52, (const BNNSNDArrayDescriptor *)(a1 + 984), (int)v51 * (uint64_t)(int)v46 * v52, weights_delta, v65);
  if (v67) {
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v67);
  }
  operator delete(v57);
  operator delete(v55);
  operator delete(v53);
  if (v74) {
    nitro::nitro_function::nitro_function(v74);
  }
  if (v75) {
    nitro::nitro_function::nitro_function(v75);
  }
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
  if (v81) {
    nitro::nitro_function::nitro_function(v81);
  }
  if (v85) {
    nitro::nitro_function::nitro_function(v85);
  }
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
}

void sub_192A5B500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 128);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  int v31 = *(std::__shared_weak_count **)(v28 - 112);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fused_convolution_grad_kernel::~fused_convolution_grad_kernel(void ***this)
{
  Espresso::fused_convolution_grad_kernel::~fused_convolution_grad_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  *this = (void **)&unk_1EE3643C8;
  unint64_t v2 = (void **)(this + 145);
  Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(this + 145);
  uint8x8_t v3 = (void **)*v2;
  if (*v2)
  {
    this[146] = v3;
    operator delete(v3);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::fused_inner_product_grad_kernel::should_unpack()
{
  return 0;
}

void Espresso::fused_inner_product_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  size_t v58 = a3;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 20);
    long long v7 = (std::__shared_weak_count *)*((void *)v6 + 21);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  uint64_t v11 = *((void *)v9 + 20);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 21);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    int32x2_t v12 = *(const void **)(v11 + 24);
    nitro::nitro_function::nitro_function(v10);
  }
  else
  {
    int32x2_t v12 = *(const void **)(v11 + 24);
  }
  int v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  uint64_t v15 = *((void *)v13 + 20);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v13 + 21);
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    int32x2_t v16 = *(void **)(v15 + 24);
    nitro::nitro_function::nitro_function(v14);
  }
  else
  {
    int32x2_t v16 = *(void **)(v15 + 24);
  }
  int32x2_t v17 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  if (v17)
  {
    uint64_t v18 = *((void *)v17 + 20);
    int v19 = (std::__shared_weak_count *)*((void *)v17 + 21);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v18)
    {
      int32x2_t v20 = *(const void **)(v18 + 24);
      goto LABEL_18;
    }
  }
  else
  {
    int v19 = 0;
  }
  int32x2_t v20 = 0;
LABEL_18:
  Espresso::abstract_blob_container::shape(v59, *(void *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v62, (const Espresso::layer_shape *)v59, 0);
  if (v60)
  {
    uint64_t v61 = v60;
    operator delete(v60);
  }
  if (*(unsigned char *)(a1 + 320) || v66 <= 3)
  {
    switch(v66)
    {
      case 1u:
        uint64_t v22 = 1;
        break;
      case 2u:
        goto LABEL_28;
      case 3u:
        goto LABEL_27;
      case 4u:
        uint64_t v22 = v63 * (uint64_t)v62 * v64;
        break;
      case 5u:
        uint64_t v22 = v63 * (uint64_t)v62 * v64 * v65;
        break;
      default:
        goto LABEL_29;
    }
  }
  else if (v66 == 5)
  {
LABEL_27:
    uint64_t v22 = v63 * (uint64_t)v62;
  }
  else if (v66 == 4)
  {
LABEL_28:
    uint64_t v22 = v62;
  }
  else
  {
LABEL_29:
    uint64_t v22 = 0;
  }
  unsigned __int32 v23 = *(void **)(a1 + 416);
  if (v23)
  {
    if (v16 == *(void **)(a1 + 424)) {
      goto LABEL_39;
    }
    BNNSFilterDestroy(v23);
    *(void *)(a1 + 416) = 0;
  }
  *(void *)(a1 + 424) = v16;
  if (*(unsigned char *)(a1 + 414))
  {
    MEMORY[0x1F4188790](v21);
    *(_DWORD *)(a1 + 408) = 0;
    bnns = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 284), *(unsigned int *)(a1 + 280), *(_DWORD *)(a1 + 396), 0, v16, (char *)&v53 - ((v24 + 15) & 0x7FFFFFFF0), BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 408) = 0;
    bnns = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 284), *(unsigned int *)(a1 + 280), *(_DWORD *)(a1 + 396), 0, v16, 0, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, 0);
  }
  *(void *)(a1 + 416) = bnns;
  if (!bnns) {
    Espresso::throw_exception_selector<Espresso::generic_error>("BNNS Error");
  }
LABEL_39:
  uint64_t v57 = v20;
  if (*(unsigned char *)(a1 + 412))
  {
    int v26 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)(a1 + 280), 0, *(unsigned __int8 *)(a1 + 412));
    uint64_t v27 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*v58, v58[1], v26);
    uint64_t v29 = *((void *)v27 + 20);
    uint64_t v28 = (std::__shared_weak_count *)*((void *)v27 + 21);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = *(unsigned int *)(a1 + 284);
    uint64_t v31 = *(void *)(v29 + 24);
    *(_OWORD *)(a1 + 560) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
    *(_DWORD *)(a1 + 436) = 0x10000;
    *(void *)(a1 + 440) = v30;
    *(void *)(a1 + 568) = v31;
    *(_DWORD *)(a1 + 576) = 65568;
    *(void *)(a1 + 596) = 1065353216;
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
  }
  uint64_t v32 = *(unsigned __int8 *)(a1 + 413);
  size_t v56 = v22;
  if (v32)
  {
    uint64_t v33 = v12;
    uint64_t v54 = v19;
    unint64_t v55 = v7;
    int v34 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)(a1 + 280), 1, v32);
    int v35 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*v58, v58[1], v34);
    uint64_t v36 = *((void *)v35 + 20);
    uint64_t v37 = (std::__shared_weak_count *)*((void *)v35 + 21);
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v38 = *(void *)(v36 + 24);
    uint64_t v39 = *(unsigned int *)(a1 + 284);
    uint64_t v40 = *(unsigned int *)(a1 + 280);
    int32x4_t v41 = operator new(0x10uLL);
    weights_delta = (BNNSNDArrayDescriptor *)(a1 + 608);
    *int32x4_t v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 768) = 0u;
    *(_OWORD *)(a1 + 720) = 0u;
    *(_OWORD *)(a1 + 736) = 0u;
    *(_OWORD *)(a1 + 688) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
    *(_OWORD *)(a1 + 608) = 0u;
    *(_DWORD *)(a1 + 612) = 0x20000;
    *(_OWORD *)(a1 + 616) = *(_OWORD *)v41;
    *(void *)(a1 + 744) = v38;
    *(_DWORD *)(a1 + 752) = 65568;
    *(void *)(a1 + 772) = 1065353216;
    operator delete(v41);
    if (v37) {
      nitro::nitro_function::nitro_function(v37);
    }
    int v19 = v54;
    long long v7 = v55;
    int32x2_t v12 = v33;
  }
  else
  {
    weights_delta = 0;
  }
  if (*(unsigned char *)(a1 + 414))
  {
    int v43 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)(a1 + 280), 2, *(unsigned __int8 *)(a1 + 414));
    int v44 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*v58, v58[1], v43);
    uint64_t v46 = *((void *)v44 + 20);
    int v45 = (std::__shared_weak_count *)*((void *)v44 + 21);
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v47 = (BNNSNDArrayDescriptor *)(a1 + 784);
    uint64_t v48 = *(unsigned int *)(a1 + 280);
    uint64_t v49 = *(void *)(v46 + 24);
    *(_OWORD *)(a1 + 912) = 0u;
    *(_OWORD *)(a1 + 928) = 0u;
    *(_OWORD *)(a1 + 944) = 0u;
    *(_OWORD *)(a1 + 784) = 0u;
    *(_OWORD *)(a1 + 800) = 0u;
    *(_OWORD *)(a1 + 816) = 0u;
    *(_OWORD *)(a1 + 832) = 0u;
    *(_OWORD *)(a1 + 848) = 0u;
    *(_OWORD *)(a1 + 864) = 0u;
    *(_OWORD *)(a1 + 880) = 0u;
    *(_OWORD *)(a1 + 896) = 0u;
    *(_DWORD *)(a1 + 788) = 0x10000;
    *(void *)(a1 + 792) = v48;
    *(void *)(a1 + 920) = v49;
    *(_DWORD *)(a1 + 928) = 65568;
    *(void *)(a1 + 948) = 1065353216;
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
  }
  else
  {
    uint64_t v47 = 0;
  }
  uint64_t v50 = *(unsigned int *)(a1 + 280);
  uint64_t v51 = *(void *)(v8 + 24);
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_DWORD *)(a1 + 964) = 0x10000;
  *(void *)(a1 + 968) = v50;
  *(void *)(a1 + 1096) = v51;
  *(_DWORD *)(a1 + 1104) = 65568;
  *(void *)(a1 + 1124) = 1065353216;
  uint64_t v52 = BNNSFilterApplyBackwardBatch(*(void **)(a1 + 416), v56, v12, *(unsigned int *)(a1 + 284), (BNNSNDArrayDescriptor *)(a1 + 432), *(unsigned int *)(a1 + 284), v57, *(unsigned int *)(a1 + 280), (const BNNSNDArrayDescriptor *)(a1 + 960), *(unsigned int *)(a1 + 280), weights_delta, v47);
  if (v52) {
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v52);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192A5BC24(_Unwind_Exception *exception_object)
{
  *(void *)(v3 - 216) = v2;
  *(void *)(v3 - 208) = v1;
  if (*(void *)(v3 - 216)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v3 - 216));
  }
  if (*(void *)(v3 - 208)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v3 - 208));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fused_inner_product_grad_kernel::~fused_inner_product_grad_kernel(void **this)
{
  Espresso::fused_inner_product_grad_kernel::~fused_inner_product_grad_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  uint64_t vars8;

  *this = &unk_1EE3663C8;
  BNNSFilterDestroy(this[52]);
  uint64_t v2 = this[142];
  if (v2)
  {
    this[143] = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void sub_192A5BDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      uint64_t v6 = *((void *)v3 + 2);
      v14[0] = &unk_1EE37B880;
      v14[1] = v3 + 16;
      v14[2] = this;
      uint64_t v15 = v14;
      uint64_t v9 = *(void **)(v6 + 120);
      long long v7 = (void *)(v6 + 120);
      uint64_t v8 = v9;
      if (v9 == v7 - 1)
      {
        char v10 = 0;
      }
      else
      {
        char v10 = 0;
        do
        {
          int v11 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v15, v8[2]);
          int32x2_t v12 = v8 + 1;
          if (v11) {
            int32x2_t v12 = v7;
          }
          v10 |= v11;
          uint64_t v8 = (void *)*v12;
        }
        while ((void *)*v12 != v7 - 1);
      }
      v5 |= v10;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v14);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

void sub_192A5BEFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes27remove_nhwc_nchw_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *a2;
  uint64_t v4 = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  int v5 = 1065353216;
  long long v6 = 0u;
  long long v7 = 0u;
  int v8 = 1065353216;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 1065353216;
  v15[0] = &unk_1EE377E68;
  v15[1] = Espresso::zephyr::match_transpose_to_nhwc;
  v15[3] = v15;
  v14[0] = &unk_1EE377E68;
  v14[1] = Espresso::zephyr::match_transpose_to_nchw;
  void v14[3] = v14;
  v13[0] = &unk_1EE37E8F8;
  v13[3] = v13;
  Espresso::zephyr::transposed_subgraph_matcher::match();
}

void sub_192A5C4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v6);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 8))(a6);
  }
  _Unwind_Resume(a1);
}

void Espresso::zephyr::transposed_subgraph_matcher::match()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_192A5D0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__function::__value_func<void ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](&a29);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((void *)(v29 - 176));
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_general_concat_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  long long v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void Espresso::zephyr::transposed_subgraph_matcher::transform(void *a1, uint64_t a2, Espresso::zephyr::ordered_block_t *a3, uint64_t a4)
{
  v90[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(*a1 + 88);
  uint64_t v7 = *a1 + 96;
  if (v6 != (void *)v7)
  {
    do
    {
      uint64_t v8 = v6[4];
      uint64_t v9 = *(void *)(v8 + 96);
      uint64_t v10 = *(void *)(v8 + 104);
      while (v9 != v10)
      {
        uint64_t v11 = *(void *)(*(void *)v9 + 8);
        uint64_t v12 = *(std::__shared_weak_count **)(v11 + 16);
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        if (v12) {
          nitro::nitro_function::nitro_function(v12);
        }
        v9 += 8;
      }
      int v13 = (void *)v6[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v6[2];
          BOOL v15 = *v14 == (void)v6;
          uint64_t v6 = v14;
        }
        while (!v15);
      }
      uint64_t v6 = v14;
    }
    while (v14 != (void *)v7);
  }
  for (int i = (void *)a1[3]; i; int i = (void *)*i)
  {
    int32x2_t v17 = (Espresso::zephyr::node_t *)i[2];
    uint64_t v18 = (uint64_t *)*((void *)v17 + 12);
    if (*((uint64_t **)v17 + 13) == v18) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    int v19 = (Espresso::zephyr::value_t **)*((void *)v17 + 15);
    if (*((Espresso::zephyr::value_t ***)v17 + 16) == v19) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v20 = *v18;
    __n128 v21 = *v19;
    v90[0] = &unk_1EE37E0B8;
    v90[1] = a1;
    v90[3] = v90;
    Espresso::zephyr::value_t::replace_uses_if (v20, v21, (uint64_t)v90);
    uint64_t v22 = (Espresso *)std::__function::__value_func<BOOL ()(Espresso::zephyr::use_t)>::~__value_func[abi:ne180100](v90);
    uint64_t v24 = Espresso::espresso_os_log_subsystem(v22, v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      int32x2_t v25 = (void *)*((void *)v17 + 12);
      if (*((void **)v17 + 13) == v25) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v26 = *v25;
      uint64_t v27 = (void *)(*v25 + 32);
      if (*(char *)(v26 + 55) < 0) {
        uint64_t v27 = (void *)*v27;
      }
      uint64_t v28 = (uint64_t)(*(void *)(v26 + 64) - *(void *)(v26 + 56)) >> 4;
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = v27;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v28;
      _os_log_debug_impl(&dword_1920CB000, v24, OS_LOG_TYPE_DEBUG, "ichecking %s %zu\n", buf, 0x16u);
    }

    Espresso::zephyr::node_t::remove_if_unused(v17);
  }
  *(_OWORD *)&uint8_t buf[8] = 0uLL;
  *(void *)buf = &buf[8];
  uint64_t v29 = a1 + 8;
  while (1)
  {
    uint64_t v29 = (void *)*v29;
    if (!v29) {
      break;
    }
    uint64_t v30 = (Espresso::zephyr::node_t *)v29[2];
    uint64_t v31 = (Espresso::zephyr::value_t **)*((void *)v30 + 12);
    uint64_t v32 = (Espresso::zephyr::value_t **)*((void *)v30 + 13);
    if (v32 == v31) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v33 = (unint64_t *)*((void *)*v31 + 7);
    int v34 = (unint64_t *)*((void *)*v31 + 8);
    if (v33 != v34)
    {
      do
      {
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)buf, *v33, *v33);
        v33 += 2;
      }
      while (v33 != v34);
      uint64_t v31 = (Espresso::zephyr::value_t **)*((void *)v30 + 12);
      uint64_t v32 = (Espresso::zephyr::value_t **)*((void *)v30 + 13);
    }
    if (v32 == v31
      || (int v35 = (Espresso::zephyr::value_t **)*((void *)v30 + 15), *((Espresso::zephyr::value_t ***)v30 + 16) == v35))
    {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    Espresso::zephyr::value_t::replace_uses(*v31, *v35);
    uint64_t v38 = Espresso::espresso_os_log_subsystem(v36, v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = (void *)*((void *)v30 + 12);
      if (*((void **)v30 + 13) == v39) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v40 = *v39;
      int32x4_t v41 = (void *)(*v39 + 32);
      if (*(char *)(v40 + 55) < 0) {
        int32x4_t v41 = (void *)*v41;
      }
      uint64_t v42 = (uint64_t)(*(void *)(v40 + 64) - *(void *)(v40 + 56)) >> 4;
      *(_DWORD *)uint64_t v85 = 136315394;
      *(void *)&v85[4] = v41;
      __int16 v86 = 2048;
      uint64_t v87 = v42;
      _os_log_debug_impl(&dword_1920CB000, v38, OS_LOG_TYPE_DEBUG, "checking %s %zu\n", v85, 0x16u);
    }

    Espresso::zephyr::node_t::remove_if_unused(v30);
  }
  for (int j = (void *)a1[13]; j; int j = (void *)*j)
  {
    uint64_t v44 = j[2];
    int v45 = *(Espresso::zephyr::node_t **)(v44 + 80);
    uint64_t v46 = *(void *)(v44 + 24);
    if (*(char *)(v44 + 55) >= 0) {
      size_t v47 = *(unsigned __int8 *)(v44 + 55);
    }
    else {
      size_t v47 = *(void *)(v44 + 40);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v85, v47 + 4);
    uint64_t v48 = (void *)(v44 + 32);
    if (v88 >= 0) {
      uint64_t v49 = v85;
    }
    else {
      uint64_t v49 = *(unsigned char **)v85;
    }
    if (v47)
    {
      if (*(char *)(v44 + 55) >= 0) {
        uint64_t v50 = (const void *)(v44 + 32);
      }
      else {
        uint64_t v50 = *(const void **)(v44 + 32);
      }
      memmove(v49, v50, v47);
    }
    strcpy(&v49[v47], "leak");
    uint64_t v51 = Espresso::zephyr::function_t::new_value(v46, (uint64_t)v85);
    uint64_t v53 = (Espresso::zephyr::value_t *)v51;
    if (v88 < 0) {
      operator delete(*(void **)v85);
    }
    if (*(void *)(*(void *)(v44 + 8) + 8))
    {
      uint64_t v51 = (char *)operator new(0x58uLL);
      *((void *)v51 + 1) = 0;
      *((void *)v51 + 2) = 0;
      *(void *)uint64_t v51 = &unk_1EE381880;
      *((_OWORD *)v51 + 3) = 0u;
      *((_OWORD *)v51 + 4) = 0u;
      *(_OWORD *)(v51 + 24) = xmmword_192DC3600;
      *((void *)v51 + 10) = 0;
      *((void *)v51 + 5) = 0xFFFFFFFF00000001;
      uint64_t v54 = *((void *)v53 + 1);
      unint64_t v55 = *(std::__shared_weak_count **)(v54 + 16);
      *(void *)(v54 + 8) = v51 + 24;
      *(void *)(v54 + 16) = v51;
      if (v55) {
        nitro::nitro_function::nitro_function(v55);
      }
      size_t v56 = *(long long **)(*(void *)(v44 + 8) + 8);
      uint64_t v57 = *(void *)(*((void *)v53 + 1) + 8);
      long long v58 = *v56;
      long long v59 = v56[1];
      *(void *)(v57 + 32) = *((void *)v56 + 4);
      *(_OWORD *)uint64_t v57 = v58;
      *(_OWORD *)(v57 + 16) = v59;
      if ((long long *)v57 != v56) {
        uint64_t v51 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v57 + 40), *((char **)v56 + 5), *((void *)v56 + 6), (uint64_t)(*((void *)v56 + 6) - *((void *)v56 + 5)) >> 2);
      }
    }
    unint64_t v60 = Espresso::espresso_os_log_subsystem((Espresso *)v51, v52);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v44 + 55) < 0) {
        uint64_t v48 = (void *)*v48;
      }
      *(_DWORD *)uint64_t v85 = 136315138;
      *(void *)&v85[4] = v48;
      _os_log_debug_impl(&dword_1920CB000, v60, OS_LOG_TYPE_DEBUG, "leaked %s\n", v85, 0xCu);
    }

    *(void *)&long long v79 = a1;
    *((void *)&v79 + 1) = v44;
    std::set<Espresso::zephyr::node_t *>::set[abi:ne180100]((uint64_t)&v80, buf);
    uint64_t v84 = 0;
    uint64_t v61 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v61 = &unk_1EE37E060;
    *(_OWORD *)(v61 + 8) = v79;
    int v62 = v81;
    *((void *)v61 + 3) = v80;
    *((void *)v61 + 4) = v62;
    int v63 = v61 + 32;
    uint64_t v64 = v82;
    *((void *)v61 + 5) = v82;
    if (v64)
    {
      v62[2] = v63;
      uint64_t v80 = &v81;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
    }
    else
    {
      *((void *)v61 + 3) = v63;
    }
    uint64_t v84 = v61;
    Espresso::zephyr::value_t::replace_uses_if (v44, v53, (uint64_t)v83);
    std::__function::__value_func<BOOL ()(Espresso::zephyr::use_t)>::~__value_func[abi:ne180100](v83);
    std::__tree<int>::destroy(v81);
    uint64_t v65 = *(void *)(a4 + 24);
    if (!v65) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v65 + 48))(&v77);
    uint64_t v66 = *(void *)(a2 + 24);
    if (*(char *)(a2 + 167) >= 0) {
      size_t v67 = *(unsigned __int8 *)(a2 + 167);
    }
    else {
      size_t v67 = *(void *)(a2 + 152);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v85, v67 + 5);
    if (v88 >= 0) {
      uint64_t v68 = v85;
    }
    else {
      uint64_t v68 = *(unsigned char **)v85;
    }
    if (v67)
    {
      if (*(char *)(a2 + 167) >= 0) {
        uint64_t v69 = (const void *)(a2 + 144);
      }
      else {
        uint64_t v69 = *(const void **)(a2 + 144);
      }
      memmove(v68, v69, v67);
    }
    strcpy(&v68[v67], "_leak");
    uint64_t v70 = Espresso::zephyr::function_t::new_detached_node(v66, (uint64_t)v85);
    if (v88 < 0) {
      operator delete(*(void **)v85);
    }
    uint64_t v71 = *((void *)v70 + 1);
    uint64_t v73 = v77;
    unint64_t v72 = v78;
    if (v78) {
      atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v74 = *(std::__shared_weak_count **)(v71 + 16);
    *(void *)(v71 + 8) = v73;
    *(void *)(v71 + 16) = v72;
    if (v74) {
      nitro::nitro_function::nitro_function(v74);
    }
    Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v70, (Espresso::zephyr::value_t *)v44);
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v70, v53);
    Espresso::zephyr::ordered_block_t::insert_node_after(a3, (Espresso::zephyr::node_t *)v70, v45);
    if (v78) {
      nitro::nitro_function::nitro_function(v78);
    }
  }
  std::__tree<int>::destroy(*(void **)&buf[8]);
}

void sub_192A5D8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__tree<int>::destroy(*(void **)(v36 - 168));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::shared_ptr<Espresso::base_kernel> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::use_t)>::~__value_func[abi:ne180100](void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::set<Espresso::zephyr::node_t *>::set[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  long long v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      uint64_t v7 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void **)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      unint64_t v11 = v5[4];
      if (v7[4] < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = (uint64_t **)v7;
        }
        else {
          uint64_t v12 = (uint64_t **)v3;
        }
        if (v6) {
          int v13 = (uint64_t **)(v7 + 1);
        }
        else {
          int v13 = (uint64_t **)v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t **)v3;
        int v13 = (uint64_t **)v3;
        if (v6)
        {
          int v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              unint64_t v17 = v6[4];
              if (v11 >= v17) {
                break;
              }
              uint64_t v6 = *v12;
              int v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v17 >= v11) {
              break;
            }
            int v13 = v12 + 1;
            uint64_t v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        uint64_t v14 = (uint64_t *)operator new(0x28uLL);
        void v14[4] = v5[4];
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      BOOL v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          BOOL v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          int v5 = v16;
        }
        while (!v10);
      }
      int v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_192A5DBF4(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr27transposed_subgraph_matcher9transformEPNS0_6node_tEPNS0_15ordered_block_tENSt3__18functionIFNS6_10shared_ptrINS_11base_kernelEEEvEEEEUlNS0_5use_tEE0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::operator()(uint64_t a1, unint64_t **a2)
{
  long long v3 = *a2;
  if (std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*(void *)(**(void **)(a1 + 8) + 96), *a2))
  {
    return 0;
  }
  for (int i = *(void **)(a1 + 32); i; int i = (void *)*i)
  {
    unint64_t v6 = i[4];
    if (v6 <= (unint64_t)v3)
    {
      if (v6 >= (unint64_t)v3) {
        return 0;
      }
      ++i;
    }
  }
  return 1;
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::destroy_deallocate(void **a1)
{
  std::__tree<int>::destroy(a1[4]);

  operator delete(a1);
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37E060;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return std::set<Espresso::zephyr::node_t *>::set[abi:ne180100](a2 + 24, (void *)(a1 + 24));
}

char *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_1EE37E060;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  std::set<Espresso::zephyr::node_t *>::set[abi:ne180100]((uint64_t)(v2 + 24), (void *)(a1 + 24));
  return v2;
}

void sub_192A5DD94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37E060;
  std::__tree<int>::destroy(*(void **)(a1 + 32));

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37E060;
  std::__tree<int>::destroy(*(void **)(a1 + 32));
  return a1;
}

void *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr27transposed_subgraph_matcher9transformEPNS0_6node_tEPNS0_15ordered_block_tENSt3__18functionIFNS6_10shared_ptrINS_11base_kernelEEEvEEEEUlNS0_5use_tEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::operator()(uint64_t a1, unint64_t **a2)
{
  return std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*(void *)(**(void **)(a1 + 8) + 96), *a2) != 0;
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37E0B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37E0B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes27remove_nhwc_nchw_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::operator()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  long long v5 = xmmword_192DCA520;
  int v6 = 4;
  Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v4, *(void *)(*(void *)(**(void **)(a1 + 8) + 8) + 8), (uint64_t)&v5);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37E950;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37E950;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::~__func()
{
}

void std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__assign_unique<Espresso::zephyr::node_t * const*>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  long long v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*(void *)a1 + 8 * i) = 0;
    uint64_t v8 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      while (1)
      {
        unint64_t v11 = *v4;
        BOOL v10 = (void *)*v8;
        unint64_t v12 = 0x9DDFEA08EB382D69 * ((8 * *v4 + 8) ^ HIDWORD(*v4));
        unint64_t v13 = 0x9DDFEA08EB382D69 * (HIDWORD(*v4) ^ (v12 >> 47) ^ v12);
        unint64_t v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
        v8[1] = v14;
        v8[2] = v11;
        unint64_t v15 = *(void *)(a1 + 8);
        if (v15)
        {
          uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
          v16.i16[0] = vaddlv_u8(v16);
          if (v16.u32[0] > 1uLL)
          {
            unint64_t v17 = v14;
            if (v15 <= v14) {
              unint64_t v17 = v14 % v15;
            }
          }
          else
          {
            unint64_t v17 = (v15 - 1) & v14;
          }
          uint64_t v18 = *(void **)(*(void *)a1 + 8 * v17);
          if (v18)
          {
            for (int j = (void *)*v18; j; int j = (void *)*j)
            {
              unint64_t v20 = j[1];
              if (v20 == v14)
              {
                if (j[2] == v11) {
                  goto LABEL_49;
                }
              }
              else
              {
                if (v16.u32[0] > 1uLL)
                {
                  if (v20 >= v15) {
                    v20 %= v15;
                  }
                }
                else
                {
                  v20 &= v15 - 1;
                }
                if (v20 != v17) {
                  break;
                }
              }
            }
          }
        }
        float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
        float v22 = *(float *)(a1 + 32);
        if (!v15 || (float)(v22 * (float)v15) < v21)
        {
          uint64_t v23 = 2 * v15;
          BOOL v24 = v15 < 3 || (v15 & (v15 - 1)) != 0;
          size_t v25 = v24 | v23;
          unint64_t v26 = vcvtps_u32_f32(v21 / v22);
          if (v25 <= v26) {
            size_t v27 = v26;
          }
          else {
            size_t v27 = v25;
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v27);
          unint64_t v15 = *(void *)(a1 + 8);
          unint64_t v14 = v8[1];
        }
        uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.u32[0] > 1uLL)
        {
          if (v14 >= v15) {
            v14 %= v15;
          }
        }
        else
        {
          v14 &= v15 - 1;
        }
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v14);
        if (v29)
        {
          void *v8 = *v29;
        }
        else
        {
          void *v8 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v8;
          *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
          if (!*v8) {
            goto LABEL_48;
          }
          unint64_t v30 = *(void *)(*v8 + 8);
          if (v28.u32[0] > 1uLL)
          {
            if (v30 >= v15) {
              v30 %= v15;
            }
          }
          else
          {
            v30 &= v15 - 1;
          }
          uint64_t v29 = (void *)(*(void *)a1 + 8 * v30);
        }
        void *v29 = v8;
LABEL_48:
        ++*(void *)(a1 + 24);
LABEL_49:
        ++v4;
        if (v10)
        {
          uint64_t v8 = v10;
          if (v4 != a3) {
            continue;
          }
        }
        goto LABEL_51;
      }
    }
    BOOL v10 = v8;
LABEL_51:
    if (v10)
    {
      do
      {
        uint64_t v31 = (void *)*v10;
        operator delete(v10);
        BOOL v10 = v31;
      }
      while (v31);
    }
  }
  while (v4 != a3)
  {
    unint64_t v32 = *v4++;
    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>(a1, v32, v32);
  }
}

void sub_192A5E34C(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_192A5E36C(_Unwind_Exception *a1)
{
}

uint64_t std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

void std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__assign_multi<std::__tree_const_iterator<Espresso::zephyr::value_t *,std::__tree_node<Espresso::zephyr::value_t *,void *> *,long>>(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    if (!v8)
    {
      unint64_t v17 = 0;
LABEL_22:
      std::__tree<int>::destroy(v17);
      goto LABEL_23;
    }
    BOOL v9 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
    if (a2 != a3)
    {
      BOOL v10 = a2;
      do
      {
        unint64_t v11 = v8;
        uint64_t v8 = v9;
        unint64_t v12 = (void *)v10[4];
        v11[4] = (uint64_t)v12;
        leaf_high = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_leaf_high(a1, &v23, v12);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, v23, leaf_high, v11);
        if (v9) {
          BOOL v9 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
        }
        unint64_t v14 = (void *)v10[1];
        if (v14)
        {
          do
          {
            a2 = v14;
            unint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            a2 = (void *)v10[2];
            BOOL v15 = *a2 == (void)v10;
            BOOL v10 = a2;
          }
          while (!v15);
        }
        if (!v8) {
          break;
        }
        BOOL v10 = a2;
      }
      while (a2 != a3);
    }
    std::__tree<int>::destroy(v8);
    if (v9)
    {
      for (uint64_t i = (uint64_t *)v9[2]; i; uint64_t i = (uint64_t *)i[2])
        BOOL v9 = i;
      unint64_t v17 = v9;
      goto LABEL_22;
    }
  }
LABEL_23:
  if (a2 != a3)
  {
    do
    {
      uint64_t v18 = (uint64_t *)operator new(0x28uLL);
      int v19 = (void *)a2[4];
      v18[4] = (uint64_t)v19;
      unint64_t v20 = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_leaf_high(a1, &v23, v19);
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, v23, v20, v18);
      float v21 = (void *)a2[1];
      if (v21)
      {
        do
        {
          float v22 = v21;
          float v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          float v22 = (void *)a2[2];
          BOOL v15 = *v22 == (void)a2;
          a2 = v22;
        }
        while (!v15);
      }
      a2 = v22;
    }
    while (v22 != a3);
  }
}

void std::__hash_table<Espresso::zephyr::value_t *,std::hash<Espresso::zephyr::value_t *>,std::equal_to<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = operator new(0x18uLL);
  *unint64_t v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          float v21 = operator new(8 * *(void *)&prime);
          float v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          BOOL v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            unint64_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  void *v24 = *v30;
                  *unint64_t v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  unint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                BOOL v24 = v30;
                unint64_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        int v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v32 = *(void **)a1;
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *unint64_t v14 = *v33;
LABEL_72:
    *uint64_t v33 = v14;
    goto LABEL_73;
  }
  *unint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_192A5E980(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_leaf_high(uint64_t a1, void *a2, void *a3)
{
  long long v5 = *(void **)(a1 + 8);
  unint64_t v3 = (void *)(a1 + 8);
  long long v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = v4;
        unint64_t v6 = a3 ? *a3 : 0;
        unint64_t v7 = (void *)v4[4];
        if (v7) {
          unint64_t v7 = (void *)*v7;
        }
        if (v6 >= (unint64_t)v7) {
          break;
        }
        long long v4 = (void *)*v3;
        unint64_t v8 = v3;
        if (!*v3) {
          goto LABEL_13;
        }
      }
      long long v4 = (void *)v3[1];
    }
    while (v4);
    unint64_t v8 = v3 + 1;
  }
  else
  {
    unint64_t v8 = v3;
  }
LABEL_13:
  *a2 = v3;
  return v8;
}

void *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr27transposed_subgraph_matcher5matchEPNS0_6node_tENSt3__18functionIFbS3_EEES7_S7_EUlS3_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = (void *)a1[1];
  int v5 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()(*(void *)(a1[4] + 24), *a2);
  if (a1[2] == v3) {
    int v6 = 0;
  }
  else {
    int v6 = v5;
  }
  if (v6 == 1)
  {
    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)(v4 + 1), v3, v3);
  }
  else if ((std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()(*(void *)(a1[3] + 24), v3) & 1) == 0 {
         && !std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()(*(void *)(a1[5] + 24), v3))
  }
  {
    return 0;
  }
  uint64_t v7 = v6 ^ 1u;
  (*(void (**)(void, uint64_t))(*(void *)*v4 + 16))(*v4, v3);
  return v7;
}

__n128 std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37E008;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE37E008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes27remove_nhwc_nchw_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(*a2)
    || Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v2))
  {
    return 1;
  }
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v2);
  if (constant)
  {
    int v6 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)constant + 384))(constant);
    if (*((_DWORD *)v6 + 5) == 1) {
      return 1;
    }
    if (Espresso::zephyr::match_verbose)
    {
      unint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        uint8x8_t v26 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
        __int16 v27 = 1024;
        int v28 = 261;
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
      }
LABEL_28:

      return 0;
    }
    return 0;
  }
  unint64_t v9 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_general_concat_kernel>(v2);
  if (!v9)
  {
    unint64_t v8 = Espresso::espresso_os_log_subsystem(0, v10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      float v22 = (const char *)(v2 + 144);
      if (*(char *)(v2 + 167) < 0) {
        float v22 = *(const char **)v22;
      }
      *(_DWORD *)buf = 136315138;
      uint8x8_t v26 = v22;
      _os_log_debug_impl(&dword_1920CB000, v8, OS_LOG_TYPE_DEBUG, "remove_nhwc_nchw_transposes: non-covariant node %s", buf, 0xCu);
    }
    goto LABEL_28;
  }
  uint64_t v11 = *(void *)(v2 + 96);
  if (*(void *)(v2 + 104) == v11) {
    goto LABEL_51;
  }
  if (!*(void *)(*(void *)v11 + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      unint64_t v8 = Espresso::espresso_os_log_subsystem(v9, v10);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        uint8x8_t v26 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
        __int16 v27 = 1024;
        int v28 = 268;
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
      }
      goto LABEL_28;
    }
    return 0;
  }
  unint64_t v12 = *(Espresso::zephyr::value_t ***)(v2 + 120);
  if (*(Espresso::zephyr::value_t ***)(v2 + 128) == v12) {
LABEL_51:
  }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  unint64_t v13 = v9;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v23, *v12);
  if (!v23)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_45;
    }
    unint64_t v19 = Espresso::espresso_os_log_subsystem(v14, v15);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
      goto LABEL_44;
    }
    *(_DWORD *)buf = 136315394;
    uint8x8_t v26 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    __int16 v27 = 1024;
    int v28 = 271;
LABEL_43:
    _os_log_impl(&dword_1920CB000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
    goto LABEL_44;
  }
  int v16 = *(_DWORD *)(v23 + 20);
  if (v16 != 4 && (v16 != -1 || *(_DWORD *)(v23 + 16) != 1))
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_45;
    }
    unint64_t v19 = Espresso::espresso_os_log_subsystem(v14, v15);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
      goto LABEL_44;
    }
    *(_DWORD *)buf = 136315394;
    uint8x8_t v26 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    __int16 v27 = 1024;
    int v28 = 273;
    goto LABEL_43;
  }
  if (*(unsigned char *)((*(uint64_t (**)(Espresso *))(*(void *)v13 + 320))(v13) + 4))
  {
    BOOL v17 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v13 + 320))(v13);
    if (*(_DWORD *)v17 != 3)
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_45;
      }
      unint64_t v19 = Espresso::espresso_os_log_subsystem(v17, v18);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
        goto LABEL_44;
      }
      *(_DWORD *)buf = 136315394;
      uint8x8_t v26 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
      __int16 v27 = 1024;
      int v28 = 276;
      goto LABEL_43;
    }
  }
  if (*(unsigned char *)((*(uint64_t (**)(Espresso *))(*(void *)v13 + 320))(v13) + 4)
    || (unint64_t v20 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(void *)v13 + 320))(v13), !*(_DWORD *)v20))
  {
    uint64_t v3 = 1;
    goto LABEL_46;
  }
  if (Espresso::zephyr::match_verbose)
  {
    unint64_t v19 = Espresso::espresso_os_log_subsystem(v20, v21);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      uint8x8_t v26 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
      __int16 v27 = 1024;
      int v28 = 279;
      goto LABEL_43;
    }
LABEL_44:
  }
LABEL_45:
  uint64_t v3 = 0;
LABEL_46:
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  return v3;
}

void sub_192A5F118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E8F8;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EE37E8F8;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000192DEA1F7)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377E68;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE377E68;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37B880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37B880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192A5F3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      uint64_t v6 = *((void *)v3 + 2);
      v14[0] = &unk_1EE37B8D8;
      v14[1] = v3 + 16;
      v14[2] = this;
      float v15 = v14;
      unint64_t v9 = *(void **)(v6 + 120);
      uint64_t v7 = (void *)(v6 + 120);
      unint64_t v8 = v9;
      if (v9 == v7 - 1)
      {
        char v10 = 0;
      }
      else
      {
        char v10 = 0;
        do
        {
          int v11 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v15, v8[2]);
          unint64_t v12 = v8 + 1;
          if (v11) {
            unint64_t v12 = v7;
          }
          v10 |= v11;
          unint64_t v8 = (void *)*v12;
        }
        while ((void *)*v12 != v7 - 1);
      }
      v5 |= v10;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v14);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

void sub_192A5F4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes27remove_seqw_wseq_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *a2;
  uint64_t v4 = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  int v5 = 1065353216;
  long long v6 = 0u;
  long long v7 = 0u;
  int v8 = 1065353216;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 1065353216;
  v15[0] = &unk_1EE377E68;
  v15[1] = Espresso::zephyr::match_transpose_to_seqw;
  v15[3] = v15;
  v14[0] = &unk_1EE377E68;
  v14[1] = Espresso::zephyr::match_transpose_to_seqw;
  void v14[3] = v14;
  v13[0] = &unk_1EE37E9A8;
  v13[3] = v13;
  Espresso::zephyr::transposed_subgraph_matcher::match();
}

void sub_192A5F8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__function::__value_func<std::shared_ptr<Espresso::base_kernel> ()(void)>::~__value_func[abi:ne180100](&a31);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v32);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v31);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a10);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes27remove_seqw_wseq_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::operator()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  long long v5 = xmmword_192DCA450;
  int v6 = 0;
  Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v4, *(void *)(*(void *)(**(void **)(a1 + 8) + 8) + 8), (uint64_t)&v5);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37EA00;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37EA00;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes27remove_seqw_wseq_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(*a2)
    || Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v2)
    || Espresso::zephyr::cast_kernel<Espresso::generic_batchnorm_kernel>(v2))
  {
    return 1;
  }
  long long v5 = Espresso::espresso_os_log_subsystem(0, v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v6 = (void *)(v2 + 144);
    if (*(char *)(v2 + 167) < 0) {
      int v6 = (void *)*v6;
    }
    int v7 = 136315138;
    int v8 = v6;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "remove_seqw_wseq_transposes: non-covariant node %s", (uint8_t *)&v7, 0xCu);
  }

  return 0;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_batchnorm_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

void std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37E9A8;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EE37E9A8;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37B8D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37B8D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192A5FDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64) {
    return 0;
  }
  char v5 = 0;
  do
  {
    uint64_t v6 = *((void *)v3 + 2);
    v15[0] = &unk_1EE37BA90;
    v15[1] = v3 + 16;
    v15[2] = this;
    uint64_t v16 = v15;
    uint64_t v9 = *(void **)(v6 + 120);
    int v7 = (void *)(v6 + 120);
    int v8 = v9;
    if (v9 == v7 - 1)
    {
      char v10 = 0;
    }
    else
    {
      char v10 = 0;
      do
      {
        int v11 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v16, v8[2]);
        uint64_t v12 = v8 + 1;
        if (v11) {
          uint64_t v12 = v7;
        }
        v10 |= v11;
        int v8 = (void *)*v12;
      }
      while ((void *)*v12 != v7 - 1);
    }
    v5 |= v10;
    std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v15);
    uint64_t v3 = (char *)*((void *)v3 + 1);
  }
  while (v3 != v2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(this, v13);
  return 1;
}

void sub_192A5FF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes32remove_squeeze_expanddims_1d_opsERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *a2;
  uint64_t v4 = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  int v5 = 1065353216;
  long long v6 = 0u;
  long long v7 = 0u;
  int v8 = 1065353216;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 1065353216;
  v15[0] = &unk_1EE377E68;
  v15[1] = Espresso::zephyr::match_squeeze_4d_to_3d;
  void v15[3] = v15;
  v14[0] = &unk_1EE377E68;
  v14[1] = Espresso::zephyr::match_expanddims_3d_to_4d;
  void v14[3] = v14;
  v13[0] = &unk_1EE37EA58;
  v13[3] = v13;
  Espresso::zephyr::transposed_subgraph_matcher::match();
}

void sub_192A6030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__function::__value_func<std::shared_ptr<Espresso::base_kernel> ()(void)>::~__value_func[abi:ne180100](&a31);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v32);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v31);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a10);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes32remove_squeeze_expanddims_1d_opsERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::operator()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  memset(v13, 0, sizeof(v13));
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  long long v8 = 0u;
  long long v7 = 0u;
  long long v6 = 0u;
  int v14 = 2;
  int v5 = 2;
  Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(&v4, *(void *)(*(void *)(**(void **)(a1 + 8) + 8) + 8), (uint64_t)&v5);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37EAB0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37EAB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes32remove_squeeze_expanddims_1d_opsERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(*a2)
    || Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v2))
  {
    return 1;
  }
  int v5 = Espresso::espresso_os_log_subsystem(0, v3);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    long long v6 = (void *)(v2 + 144);
    if (*(char *)(v2 + 167) < 0) {
      long long v6 = (void *)*v6;
    }
    int v7 = 136315138;
    long long v8 = v6;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "remove_squeeze_expanddims_1d_ops: non-covariant node %s", (uint8_t *)&v7, 0xCu);
  }

  return 0;
}

void std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37EA58;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EE37EA58;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37BA90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37BA90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void Espresso::pass_multi_head_program_gen::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v243 = *MEMORY[0x1E4F143B8];
  int v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388F80;
  long long v6 = &v5[1].__vftable;
  v196 = v5;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE366218;
  Espresso::net::_tag_inputs_and_outputs(a1);
  uint64_t v217 = 0;
  uint64_t v218 = 0;
  uint64_t v219 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v217, *((void *)a1 + 83), *((void *)a1 + 84), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 84) - *((void *)a1 + 83)) >> 3));
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)v216);
  uint64_t v194 = v6;
  uint64_t v195 = a2;
  uint64_t v204 = *((void *)a1 + 4);
  uint64_t v205 = *((void *)a1 + 5);
  unint64_t v206 = (v205 - v204) >> 4;
  int v7 = std::vector<std::unordered_set<unsigned long>>::vector(v215, v206);
  *(void *)&long long v211 = 0;
  uint64_t v9 = v217;
  v207 = a1;
  if (v218 != v217)
  {
    unint64_t v10 = 0;
    uint64_t v11 = *MEMORY[0x1E4F283E0];
    do
    {
      uint64_t v12 = v9 + 24 * v10;
      unint64_t v13 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v25 = v12;
        if (*(char *)(v12 + 23) < 0) {
          uint64_t v25 = *(void *)v12;
        }
        *(_DWORD *)buf = 134218242;
        *(void *)&uint8_t buf[4] = v211;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v25;
        _os_log_debug_impl(&dword_1920CB000, v13, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen ioutput=%zu name=%s", buf, 0x16u);
      }

      int v14 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v216, v12);
      if (!v14) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v15 = v14[5];
      uint64_t v16 = operator new(8uLL);
      *(void *)buf = v16;
      void *v16 = v15;
      *(void *)&uint8_t buf[8] = v16 + 1;
      *(void *)&buf[16] = v16 + 1;
      memset(__p, 0, 24);
      Espresso::net::recurse_layer_producers((uint64_t)a1, v216, v15, (uint64_t)buf, (uint64_t)__p, 0);
      uint64_t v17 = *(void **)buf;
      unint64_t v18 = *(void **)&buf[8];
      while (v17 != v18)
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v215[0][40 * *v17++], (unint64_t *)&v211, &v211);
      unint64_t v19 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
      unint64_t v20 = [v19 persistentDomainForName:v11];

      float v21 = [v20 objectForKeyedSubscript:@"espresso.no_mh"];
      int v22 = [v21 BOOLValue];

      if (v22 && *((void *)v207 + 5) != *((void *)v207 + 4))
      {
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        do
        {
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v215[0][v23], (unint64_t *)&v211, &v211);
          ++v24;
          v23 += 40;
        }
        while (v24 < (uint64_t)(*((void *)v207 + 5) - *((void *)v207 + 4)) >> 4);
      }

      a1 = v207;
      v228.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
      int v7 = *(char ***)buf;
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      unint64_t v10 = v211 + 1;
      *(void *)&long long v211 = v10;
      uint64_t v9 = v217;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v218 - v217) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "multi_head_merge_group_prefixes");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a1 + 472, (uint64_t)buf, (uint64_t)__p, &v214);
  unint64_t v26 = (v205 - v204) >> 4;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  v200 = (char *)a1 + 472;
  if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v27 = &v214;
  }
  else {
    __int16 v27 = (std::string *)v214.__r_.__value_.__r.__words[0];
  }
  Espresso::string_split((Espresso *)__p, (char *)v27);
  int v28 = *(char **)__p;
  v203 = *(char **)&__p[8];
  if (*(void *)__p != *(void *)&__p[8])
  {
    if (v206 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = (v205 - v204) >> 4;
    }
    uint64_t v202 = v29;
    do
    {
      memset(buf, 0, 32);
      *(_DWORD *)&buf[32] = 1065353216;
      v228.__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = v217;
      uint64_t v31 = v218;
      if (v218 != v217)
      {
        unint64_t v32 = 0;
        do
        {
          uint64_t v33 = (void **)(v30 + 24 * v32);
          if (*((char *)v33 + 23) < 0)
          {
            uint64_t v33 = (void **)*v33;
            uint64_t v34 = *(void *)(v30 + 24 * v32 + 8);
          }
          else
          {
            uint64_t v34 = *((unsigned __int8 *)v33 + 23);
          }
          int v35 = v28[23];
          if (v35 >= 0) {
            uint64_t v36 = v28;
          }
          else {
            uint64_t v36 = *(char **)v28;
          }
          if (v35 >= 0) {
            int64_t v37 = v28[23];
          }
          else {
            int64_t v37 = *((void *)v28 + 1);
          }
          if (!v37) {
            goto LABEL_53;
          }
          if (v34 >= v37)
          {
            uint64_t v38 = (void **)((char *)v33 + v34);
            int v39 = *v36;
            uint64_t v40 = v33;
            while (1)
            {
              uint64_t v41 = v34 - v37;
              if (v41 == -1 || (uint64_t v42 = (void **)memchr(v40, v39, v41 + 1)) == 0)
              {
LABEL_49:
                unint64_t v26 = (v205 - v204) >> 4;
                goto LABEL_54;
              }
              int v43 = v42;
              if (!memcmp(v42, v36, v37)) {
                break;
              }
              uint64_t v40 = (void **)((char *)v43 + 1);
              uint64_t v34 = (char *)v38 - ((char *)v43 + 1);
              if (v34 < v37) {
                goto LABEL_49;
              }
            }
            unint64_t v26 = (v205 - v204) >> 4;
            if (v43 != v38 && v43 == v33)
            {
LABEL_53:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)buf, (unint64_t *)&v228, &v228);
              unint64_t v32 = v228.__r_.__value_.__r.__words[0];
              uint64_t v30 = v217;
              uint64_t v31 = v218;
            }
          }
LABEL_54:
          v228.__r_.__value_.__r.__words[0] = ++v32;
        }
        while (v32 < 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3));
      }
      if (v205 != v204)
      {
        uint64_t v44 = 0;
        do
        {
          int v45 = &v215[0][40 * v44];
          uint64_t v46 = v45 + 16;
          while (1)
          {
            uint64_t v46 = (void *)*v46;
            if (!v46) {
              break;
            }
            if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(buf, v46[2]))
            {
              size_t v47 = *(void **)&buf[16];
              if (*(void *)&buf[16])
              {
                do
                {
                  v228.__r_.__value_.__r.__words[0] = v47[2];
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v45, (unint64_t *)&v228, &v228);
                  size_t v47 = (void *)*v47;
                }
                while (v47);
              }
              break;
            }
          }
          ++v44;
        }
        while (v44 != v202);
      }
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)buf);
      v28 += 24;
    }
    while (v28 != v203);
  }
  *(void *)buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  memset(&v228, 0, sizeof(v228));
  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 1065353216;
  if (v205 == v204)
  {
    std::string::size_type v51 = 0;
    std::string::size_type v62 = 0;
    std::string::size_type v61 = 0;
  }
  else
  {
    uint64_t v48 = 0;
    if (v26 <= 1) {
      uint64_t v49 = 1;
    }
    else {
      uint64_t v49 = v26;
    }
    do
    {
      uint64_t v50 = &v215[0][40 * v48];
      std::string::size_type v51 = std::operator==[abi:ne180100]<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>((uint64_t)__p, v50);
      if ((v51 & 1) == 0)
      {
        std::string::size_type size = v228.__r_.__value_.__l.__size_;
        if (v228.__r_.__value_.__l.__size_ >= v228.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v51 = v228.__r_.__value_.__r.__words[0];
          uint64_t v55 = (uint64_t)(v228.__r_.__value_.__l.__size_ - v228.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v57 = v228.__r_.__value_.__r.__words[2] - v228.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v228.__r_.__value_.__r.__words[2] - v228.__r_.__value_.__r.__words[0]) >> 2 > v56) {
            unint64_t v56 = v57 >> 2;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58)
          {
            unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v58);
            std::string::size_type size = v228.__r_.__value_.__l.__size_;
            std::string::size_type v51 = v228.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v52 = 0;
          }
          long long v59 = (void *)(v58 + 8 * v55);
          *long long v59 = v48;
          std::string::size_type v54 = (std::string::size_type)(v59 + 1);
          while (size != v51)
          {
            uint64_t v60 = *(void *)(size - 8);
            size -= 8;
            *--long long v59 = v60;
          }
          v228.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          v228.__r_.__value_.__l.__size_ = v54;
          v228.__r_.__value_.__r.__words[2] = v58 + 8 * (void)v52;
          if (v51) {
            operator delete((void *)v51);
          }
        }
        else
        {
          *(void *)v228.__r_.__value_.__l.__size_ = v48;
          std::string::size_type v54 = size + 8;
        }
        v228.__r_.__value_.__l.__size_ = v54;
        if (__p != v50)
        {
          *(_DWORD *)&__p[32] = *((_DWORD *)v50 + 8);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>(__p, *((void **)v50 + 2));
        }
      }
      ++v48;
    }
    while (v48 != v49);
    std::string::size_type v61 = v228.__r_.__value_.__r.__words[2];
    std::string::size_type v62 = v228.__r_.__value_.__l.__size_;
    if (v228.__r_.__value_.__l.__size_ < v228.__r_.__value_.__r.__words[2])
    {
      unint64_t v26 = (v205 - v204) >> 4;
      uint64_t i = (uint64_t)v207;
      *(void *)v228.__r_.__value_.__l.__size_ = v206;
      std::string::size_type v64 = v62 + 8;
      goto LABEL_105;
    }
    std::string::size_type v51 = v228.__r_.__value_.__r.__words[0];
    unint64_t v26 = (v205 - v204) >> 4;
  }
  uint64_t v65 = (uint64_t)(v62 - v51) >> 3;
  unint64_t v66 = v65 + 1;
  if ((unint64_t)(v65 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v67 = v61 - v51;
  if (v67 >> 2 > v66) {
    unint64_t v66 = v67 >> 2;
  }
  BOOL v146 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v146) {
    unint64_t v68 = v66;
  }
  uint64_t i = (uint64_t)v207;
  if (v68)
  {
    unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v68);
    std::string::size_type v62 = v228.__r_.__value_.__l.__size_;
    std::string::size_type v51 = v228.__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v52 = 0;
  }
  uint64_t v69 = (unint64_t *)(v68 + 8 * v65);
  std::string::size_type v70 = v68 + 8 * (void)v52;
  *uint64_t v69 = v26;
  std::string::size_type v64 = (std::string::size_type)(v69 + 1);
  while (v62 != v51)
  {
    unint64_t v71 = *(void *)(v62 - 8);
    v62 -= 8;
    *--uint64_t v69 = v71;
  }
  v228.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  v228.__r_.__value_.__l.__size_ = v64;
  v228.__r_.__value_.__r.__words[2] = v70;
  if (v51) {
    operator delete((void *)v51);
  }
LABEL_105:
  v228.__r_.__value_.__l.__size_ = v64;
  long long v211 = 0uLL;
  *(void *)&long long v212 = 0;
  std::string::size_type v72 = v228.__r_.__value_.__r.__words[0];
  if (v64 - v228.__r_.__value_.__r.__words[0] != 8)
  {
    unint64_t v73 = 0;
    uint64_t v74 = 0;
    do
    {
      unint64_t v75 = v74 + 1;
      unint64_t v76 = *(void *)(v72 + 8 * (v74 + 1)) - *(void *)(v72 + 8 * v74);
      uint64_t v77 = *((void *)&v211 + 1);
      if (!v74 || (v76 | v73) >= 2)
      {
        if (*((void *)&v211 + 1) >= (unint64_t)v212)
        {
          unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v211 + 1) - v211) >> 3);
          unint64_t v79 = v78 + 1;
          if (v78 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v212 - v211) >> 3) > v79) {
            unint64_t v79 = 0x5555555555555556 * ((uint64_t)(v212 - v211) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v212 - v211) >> 3) >= 0x555555555555555) {
            unint64_t v80 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v80 = v79;
          }
          *(void *)&buf[32] = &v212;
          uint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v80);
          uint64_t v82 = &v81[24 * v78];
          *(void *)buf = v81;
          *(void *)&uint8_t buf[8] = v82;
          *(void *)&unsigned char buf[24] = &v81[24 * v83];
          *(void *)uint64_t v82 = 0;
          *((void *)v82 + 1) = 0;
          *((void *)v82 + 2) = 0;
          *(void *)&buf[16] = v82 + 24;
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v211, buf);
          uint64_t v77 = *((void *)&v211 + 1);
          std::string::size_type v51 = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          **((void **)&v211 + 1) = 0;
          *(void *)(v77 + 8) = 0;
          *(void *)(v77 + 16) = 0;
          v77 += 24;
        }
        *((void *)&v211 + 1) = v77;
      }
      uint64_t v84 = *(void **)(v77 - 16);
      unint64_t v85 = *(void *)(v77 - 8);
      if ((unint64_t)v84 >= v85)
      {
        std::string::size_type v51 = *(void *)(v77 - 24);
        uint64_t v87 = (uint64_t)((uint64_t)v84 - v51) >> 3;
        if ((unint64_t)(v87 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v88 = v85 - v51;
        unint64_t v89 = (uint64_t)(v85 - v51) >> 2;
        if (v89 <= v87 + 1) {
          unint64_t v89 = v87 + 1;
        }
        if (v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        if (v90)
        {
          unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v90);
          std::string::size_type v51 = *(void *)(v77 - 24);
          uint64_t v84 = *(void **)(v77 - 16);
        }
        else
        {
          uint64_t v52 = 0;
        }
        size_t v91 = (void *)(v90 + 8 * v87);
        *size_t v91 = v74;
        __int16 v86 = v91 + 1;
        while (v84 != (void *)v51)
        {
          uint64_t v92 = *--v84;
          *--size_t v91 = v92;
        }
        *(void *)(v77 - 24) = v91;
        *(void *)(v77 - 16) = v86;
        *(void *)(v77 - 8) = v90 + 8 * (void)v52;
        if (v51) {
          operator delete((void *)v51);
        }
      }
      else
      {
        *uint64_t v84 = v74;
        __int16 v86 = v84 + 1;
      }
      *(void *)(v77 - 16) = v86;
      std::string::size_type v72 = v228.__r_.__value_.__r.__words[0];
      unint64_t v73 = v76;
      ++v74;
    }
    while (v75 < ((uint64_t)(v228.__r_.__value_.__l.__size_ - v228.__r_.__value_.__r.__words[0]) >> 3) - 1);
    uint64_t v94 = (void *)*((void *)&v211 + 1);
    uint64_t v93 = (void *)v211;
    unint64_t v26 = (v205 - v204) >> 4;
    for (uint64_t i = (uint64_t)v207; v93 != v94; v93 += 3)
    {
      if (v93[1] - *v93 >= 0x10uLL)
      {
        uint64_t v95 = Espresso::espresso_os_log_subsystem((Espresso *)v51, v52);
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v108 = (uint64_t)(v93[1] - *v93) >> 3;
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v108;
          _os_log_debug_impl(&dword_1920CB000, v95, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen: merge_group.size()=%zu", buf, 0xCu);
        }

        memset(buf, 0, 32);
        *(_DWORD *)&buf[32] = 1065353216;
        int v96 = (void *)*v93;
        uint64_t v97 = (void *)v93[1];
        if ((void *)*v93 != v97)
        {
          std::string::size_type v98 = v228.__r_.__value_.__r.__words[0];
          do
          {
            unint64_t v99 = *(void *)(v98 + 8 * *v96);
            uint64_t v100 = *v96 + 1;
            while (v99 < *(void *)(v98 + 8 * v100))
            {
              uint64_t v101 = *(void **)&v215[0][40 * v99 + 16];
              if (v101)
              {
                do
                {
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)buf, v101 + 2, v101 + 2);
                  uint64_t v101 = (void *)*v101;
                }
                while (v101);
                std::string::size_type v98 = v228.__r_.__value_.__r.__words[0];
              }
              ++v99;
            }
            ++v96;
          }
          while (v96 != v97);
          unint64_t v102 = (void *)*v93;
          long long v103 = (void *)v93[1];
          while (v102 != v103)
          {
            unint64_t v104 = *(void *)(v98 + 8 * *v102);
            uint64_t v105 = *v102 + 1;
            if (v104 < *(void *)(v98 + 8 * v105))
            {
              uint64_t v106 = 40 * v104;
              do
              {
                long long v107 = &v215[0][v106];
                if (&v215[0][v106] != buf)
                {
                  *((_DWORD *)v107 + 8) = *(_DWORD *)&buf[32];
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>(v107, *(void **)&buf[16]);
                  std::string::size_type v98 = v228.__r_.__value_.__r.__words[0];
                }
                ++v104;
                v106 += 40;
              }
              while (v104 < *(void *)(v98 + 8 * v105));
            }
            ++v102;
          }
        }
        std::string::size_type v51 = std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)buf);
        unint64_t v26 = (v205 - v204) >> 4;
        uint64_t i = (uint64_t)v207;
      }
    }
  }
  *(void *)buf = &v211;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__p);
  if (v228.__r_.__value_.__r.__words[0])
  {
    v228.__r_.__value_.__l.__size_ = v228.__r_.__value_.__r.__words[0];
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  long long v211 = 0u;
  long long v212 = 0u;
  int v213 = 1065353216;
  memset(v209, 0, sizeof(v209));
  int v210 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(buf, "multi_head_always_compute_outputs");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v200, (uint64_t)buf, (uint64_t)__p, &v208);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v208.__r_.__value_.__l.__size_)
    {
      uint64_t v111 = (std::string *)v208.__r_.__value_.__r.__words[0];
      goto LABEL_170;
    }
  }
  else if (*((unsigned char *)&v208.__r_.__value_.__s + 23))
  {
    uint64_t v111 = &v208;
LABEL_170:
    Espresso::string_split((Espresso *)buf, (char *)v111);
    uint64_t v112 = *(void *)buf;
    for (uint64_t j = *(void *)&buf[8]; v112 != j; v112 += 24)
    {
      *(void *)uint64_t __p = 0;
      uint64_t v114 = v217;
      uint64_t v115 = v218;
      uint64_t v116 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v217, v218, (unsigned __int8 **)v112);
      if (v116 == v115)
      {
        if (*(char *)(v112 + 23) >= 0) {
          uint64_t v193 = (unsigned __int8 *)v112;
        }
        else {
          uint64_t v193 = *(unsigned __int8 **)v112;
        }
        v228.__r_.__value_.__r.__words[0] = (std::string::size_type)v193;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find output %s", &v228);
      }
      *(void *)uint64_t __p = 0xAAAAAAAAAAAAAAABLL * ((v116 - v114) >> 3);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v209, (unint64_t *)__p, __p);
    }
    *(void *)uint64_t __p = buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    uint64_t i = (uint64_t)v207;
  }
  char v117 = 0;
  unint64_t v118 = 0;
  int v119 = 0;
  unint64_t v120 = v26;
  uint64_t v197 = i + 16;
  v198 = (void *)(i + 1256);
  do
  {
    unint64_t v121 = v26 - 1;
    if (v26 - 1 >= v118) {
      unint64_t v121 = v118;
    }
    unint64_t v122 = &v215[0][40 * v121];
    if (v118 < v120)
    {
      unint64_t v109 = std::operator==[abi:ne180100]<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>((uint64_t)&v211, &v215[0][40 * v121]);
      if (v109) {
        goto LABEL_343;
      }
      if (&v211 != (long long *)v122)
      {
        int v213 = *((_DWORD *)v122 + 8);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>(&v211, *((void **)v122 + 2));
      }
    }
    if (v117)
    {
      std::to_string((std::string *)buf, v118);
      uint64_t v123 = std::string::insert((std::string *)buf, 0, "mh_control@");
      std::string v228 = *v123;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      *(_DWORD *)buf = 0;
      memset(&buf[8], 0, 64);
      uint64_t v124 = (char *)operator new(0xF8uLL);
      *((void *)v124 + 1) = 0;
      *((void *)v124 + 2) = 0;
      *(void *)uint64_t v124 = &unk_1EE389DF0;
      *((void *)v124 + 3) = &unk_1EE36C758;
      *(_OWORD *)(v124 + 40) = 0u;
      *(_OWORD *)(v124 + 56) = 0u;
      *(_OWORD *)(v124 + 72) = 0u;
      *(_OWORD *)(v124 + 88) = 0u;
      *(_OWORD *)(v124 + 104) = 0u;
      *(_OWORD *)(v124 + 120) = 0u;
      *(_OWORD *)(v124 + 136) = 0u;
      *(_OWORD *)(v124 + 152) = 0u;
      *(_OWORD *)(v124 + 161) = 0u;
      *((_OWORD *)v124 + 13) = 0u;
      *((_OWORD *)v124 + 14) = 0u;
      *((void *)v124 + 30) = 0;
      *(void *)&uint8_t buf[8] = v124 + 24;
      *(void *)&buf[16] = v124;
      int v125 = SHIBYTE(v228.__r_.__value_.__r.__words[2]);
      if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v126 = HIBYTE(v228.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v126 = v228.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v126 + 4);
      if (__p[23] >= 0) {
        unint64_t v127 = __p;
      }
      else {
        unint64_t v127 = *(unsigned char **)__p;
      }
      if (v126)
      {
        if (v125 >= 0) {
          float v128 = &v228;
        }
        else {
          float v128 = (std::string *)v228.__r_.__value_.__r.__words[0];
        }
        memmove(v127, v128, v126);
      }
      strcpy(&v127[v126], "_end");
      uint64_t v129 = *(void *)&buf[8];
      uint64_t v130 = *(void *)&buf[8] + 16;
      if (*(char *)(*(void *)&buf[8] + 39) < 0)
      {
        operator delete(*(void **)v130);
        uint64_t v129 = *(void *)&buf[8];
      }
      uint64_t v131 = *(void *)&__p[16];
      *(_OWORD *)uint64_t v130 = *(_OWORD *)__p;
      *(void *)(v130 + 16) = v131;
      double v132 = (Espresso *)MEMORY[0x192FF0F50](v129 + 40, "cf_end");
      *(_DWORD *)buf = v119 + v118 - 1;
      unint64_t v134 = Espresso::espresso_os_log_subsystem(v132, v133);
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v187 = *(void *)(*(void *)(i + 32) + 16 * *(int *)buf);
        uint64_t v188 = (void *)(v187 + 40);
        if (*(char *)(v187 + 63) < 0) {
          uint64_t v188 = (void *)*v188;
        }
        *(_DWORD *)uint64_t __p = 134218242;
        *(void *)&__p[4] = v118;
        *(_WORD *)&__p[12] = 2080;
        *(void *)&__p[14] = v188;
        _os_log_debug_impl(&dword_1920CB000, v134, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen: cf_end ilayer=%zu type=%s", __p, 0x16u);
      }

      unint64_t v137 = Espresso::espresso_os_log_subsystem(v135, v136);
      if (os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v189 = *(void *)(*(void *)(i + 32) + 16 * *(int *)buf);
        unint64_t v190 = (void *)(v189 + 40);
        if (*(char *)(v189 + 63) < 0) {
          unint64_t v190 = (void *)*v190;
        }
        *(_DWORD *)uint64_t __p = 67109378;
        *(_DWORD *)&__p[4] = *(_DWORD *)buf;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = v190;
        _os_log_debug_impl(&dword_1920CB000, v137, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen: cf_end after_ilayer=%d type=%s", __p, 0x12u);
      }

      uint64_t v138 = *(void *)(*(void *)(i + 32) + 16 * *(int *)buf);
      *(_DWORD *)(*(void *)&buf[8] + 12) = *(_DWORD *)(v138 + 12);
      *(_DWORD *)(*(void *)&buf[8] + 8) = (***(uint64_t (****)(void))(*(void *)(*(void *)(v138 + 64) + 8) + 8))();
      Espresso::abstract_engine_factory::shared(&__str);
      uint64_t v139 = __str.__r_.__value_.__r.__words[0];
      uint64_t v140 = *(void *)(*(void *)(*(void *)(i + 32) + 16 * *(int *)buf) + 64);
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
      LODWORD(v220) = 0;
      Espresso::abstract_engine_factory::make_kernel_priv(v139, v140 + 8, (uint64_t)__p, (uint64_t)&v226, (int *)&v220);
      unint64_t v141 = (void *)lpsrc.__r_.__value_.__r.__words[0];
      if (lpsrc.__r_.__value_.__r.__words[0]
      {
        std::string::size_type v142 = lpsrc.__r_.__value_.__l.__size_;
        if (lpsrc.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string::size_type v142 = 0;
      }
      uint64_t v143 = *(void *)&buf[8];
      int32x4_t v144 = *(std::__shared_weak_count **)(*(void *)&buf[8] + 72);
      *(void *)(*(void *)&buf[8] + 64) = v141;
      *(void *)(v143 + 72) = v142;
      if (v144) {
        nitro::nitro_function::nitro_function(v144);
      }
      if (lpsrc.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (__str.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[48], 0, 0, 0);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[24], 0, 0, 0);
      *(_DWORD *)uint64_t __p = *(_DWORD *)buf;
      *(_OWORD *)&__p[8] = *(_OWORD *)&buf[8];
      if (*(void *)&buf[16]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[16] + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&__p[24] = 0;
      *(void *)&__p[32] = 0;
      *(void *)&long long v234 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(uint64_t *)&buf[24], *(uint64_t *)&buf[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[32] - *(void *)&buf[24]) >> 3));
      *((void *)&v234 + 1) = 0;
      long long v235 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v234 + 1, *(uint64_t *)&buf[48], *(uint64_t *)&buf[56], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[56] - *(void *)&buf[48]) >> 3));
      memset(&lpsrc, 0, sizeof(lpsrc));
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
      __str.__r_.__value_.__s.__data_[8] = 0;
      lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      lpsrc.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__r.__words[0];
      lpsrc.__r_.__value_.__r.__words[2] = lpsrc.__r_.__value_.__r.__words[0] + 72;
      lpsrc.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&lpsrc.__r_.__value_.__r.__words[2], (uint64_t)__p, (uint64_t)&v236, (uint64_t)lpsrc.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers(i, (uint64_t **)&lpsrc);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (*(void *)&__p[16]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[16]);
      }
      *(void *)uint64_t __p = &buf[48];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      *(void *)uint64_t __p = &buf[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      unint64_t v109 = *(void *)&buf[16];
      if (*(void *)&buf[16]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[16]);
      }
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v228.__r_.__value_.__l.__data_);
      }
      ++v119;
    }
    if (v118 == v206) {
      goto LABEL_230;
    }
    int32x4_t v145 = v122 + 16;
    do
    {
      int32x4_t v145 = (void *)*v145;
      if (!v145) {
        break;
      }
      unint64_t v109 = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v209, v145[2]);
    }
    while (!v109);
    BOOL v146 = v145 || *((void *)v122 + 3) >= 0xAAAAAAAAAAAAAAABLL * ((v218 - v217) >> 3);
    if (v146)
    {
LABEL_230:
      char v117 = 0;
    }
    else
    {
      uint8x16_t v147 = Espresso::espresso_os_log_subsystem((Espresso *)v109, v110);
      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v191 = *(void *)&v215[0][40 * v118 + 24];
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v118;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v191;
        _os_log_debug_impl(&dword_1920CB000, v147, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen: cf_if ilayer=%zu outputs_per_layer[ilayer].size()=%zu", buf, 0x16u);
      }

      int16x8_t v149 = v215[0];
      std::to_string((std::string *)buf, v118);
      int16x8_t v150 = std::string::insert((std::string *)buf, 0, "mh_control@");
      std::string lpsrc = *v150;
      v150->__r_.__value_.__l.__size_ = 0;
      v150->__r_.__value_.__r.__words[2] = 0;
      v150->__r_.__value_.__r.__words[0] = 0;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (*v198) {
        uint64_t v151 = (uint64_t)v198;
      }
      else {
        uint64_t v151 = v197;
      }
      int v199 = v119;
      BOOL v152 = (***(unsigned int (****)(void))(*(void *)v151 + 8))(*(void *)(*(void *)v151 + 8)) == 101
          || (***(unsigned int (****)(void))(*(void *)v151 + 8))(*(void *)(*(void *)v151 + 8)) != 100
          || (***(unsigned int (****)(void))(*(void *)v151 + 8))(*(void *)(*(void *)v151 + 8)) != 0;
      BOOL v201 = v152;
      int v153 = SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
      if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v154 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v154 = lpsrc.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v154 + 8);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v154)
      {
        if (v153 >= 0) {
          p_std::string lpsrc = &lpsrc;
        }
        else {
          p_std::string lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        }
        memmove(p_str, p_lpsrc, v154);
      }
      strcpy((char *)p_str + v154, "_builtin");
      uint64_t v242 = 0;
      long long v240 = 0u;
      long long v241 = 0u;
      long long v238 = 0u;
      long long v239 = 0u;
      memset(buf, 0, sizeof(buf));
      MEMORY[0x192FF0F50](buf, "bound_output");
      float v157 = &v149[40 * v118];
      float v158 = (void *)*((void *)v157 + 2);
      if (v158)
      {
        unint64_t v159 = 0;
        do
        {
          uint64_t v160 = v217 + 24 * v158[2];
          int v161 = *(char *)(v160 + 23);
          if (v161 >= 0) {
            float32x4_t v162 = (const std::string::value_type *)(v217 + 24 * v158[2]);
          }
          else {
            float32x4_t v162 = *(const std::string::value_type **)v160;
          }
          if (v161 >= 0) {
            std::string::size_type v163 = *(unsigned __int8 *)(v160 + 23);
          }
          else {
            std::string::size_type v163 = *(void *)(v160 + 8);
          }
          std::string::append((std::string *)&buf[24], v162, v163);
          if (v159 < *((void *)v157 + 3) - 1) {
            std::string::append((std::string *)&buf[24], ",");
          }
          float v158 = (void *)*v158;
          ++v159;
        }
        while (v158);
      }
      *(_DWORD *)uint64_t __p = 0;
      memset(&__p[8], 0, 32);
      long long v234 = 0u;
      long long v235 = 0u;
      float32x4_t v164 = (char *)operator new(0xF8uLL);
      *((void *)v164 + 1) = 0;
      *((void *)v164 + 2) = 0;
      *(void *)float32x4_t v164 = &unk_1EE389DF0;
      *((void *)v164 + 3) = &unk_1EE36C758;
      *(_OWORD *)(v164 + 56) = 0u;
      *(_OWORD *)(v164 + 72) = 0u;
      *(_OWORD *)(v164 + 88) = 0u;
      *(_OWORD *)(v164 + 104) = 0u;
      *(_OWORD *)(v164 + 120) = 0u;
      *(_OWORD *)(v164 + 136) = 0u;
      *(_OWORD *)(v164 + 152) = 0u;
      *(_OWORD *)(v164 + 40) = 0u;
      *(_OWORD *)(v164 + 161) = 0u;
      *((_OWORD *)v164 + 13) = 0u;
      *((_OWORD *)v164 + 14) = 0u;
      *((void *)v164 + 30) = 0;
      *(void *)&__p[8] = v164 + 24;
      *(void *)&__p[16] = v164;
      std::string::operator=((std::string *)(v164 + 40), &__str);
      uint64_t i = (uint64_t)v207;
      MEMORY[0x192FF0F50](*(void *)&__p[8] + 40, "builtin");
      int v165 = (***(uint64_t (****)(void))(*(void *)v151 + 8))(*(void *)(*(void *)v151 + 8));
      uint64_t v166 = *(void *)&__p[8];
      *(_DWORD *)(*(void *)&__p[8] + 8) = v165;
      if (v201) {
        int v167 = 0;
      }
      else {
        int v167 = *(_DWORD *)(*(void *)(*((void *)v207 + 4) + 16 * v118) + 12);
      }
      *(_DWORD *)(v166 + 12) = v167;
      Espresso::abstract_engine_factory::shared(&v226);
      float32x4_t v168 = v226;
      std::string::basic_string[abi:ne180100]<0>(&v228, "builtin");
      int v223 = 0;
      Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v168, v151, (uint64_t)&v228, (uint64_t)buf, &v223);
      float v169 = v220;
      if (v220
      {
        unint64_t v170 = v221;
        if (v221) {
          atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        unint64_t v170 = 0;
      }
      uint64_t v171 = *(void *)&__p[8];
      float v172 = *(std::__shared_weak_count **)(*(void *)&__p[8] + 72);
      *(void *)(*(void *)&__p[8] + 64) = v169;
      *(void *)(v171 + 72) = v170;
      if (v172) {
        nitro::nitro_function::nitro_function(v172);
      }
      if (v221) {
        nitro::nitro_function::nitro_function(v221);
      }
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v228.__r_.__value_.__l.__data_);
      }
      if (v227) {
        nitro::nitro_function::nitro_function(v227);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v228, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v228 = __str;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&v234 + 8), &v228, &v229, 1uLL);
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v228.__r_.__value_.__l.__data_);
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&__p[24], 0, 0, 0);
      *(_DWORD *)uint64_t __p = v118 + v199 - 1;
      LODWORD(v228.__r_.__value_.__l.__data_) = *(_DWORD *)__p;
      *(_OWORD *)&v228.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      if (*(void *)&__p[16]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__p[16] + 8), 1uLL, memory_order_relaxed);
      }
      long long v229 = 0uLL;
      uint64_t v230 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v229, *(uint64_t *)&__p[24], *(uint64_t *)&__p[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[32] - *(void *)&__p[24]) >> 3));
      memset(v231, 0, sizeof(v231));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v231, *((uint64_t *)&v234 + 1), v235, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v235 - *((void *)&v234 + 1)) >> 3));
      v220 = 0;
      v221 = 0;
      v222 = 0;
      v226 = &v220;
      LOBYTE(v227) = 0;
      v220 = operator new(0x48uLL);
      v221 = (std::__shared_weak_count *)v220;
      v222 = (char *)v220 + 72;
      v221 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v222, (uint64_t)&v228, (uint64_t)&v232, (uint64_t)v220);
      Espresso::net::insert_layers((uint64_t)v207, (uint64_t **)&v220);
      v226 = &v220;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v226);
      v226 = (void **)v231;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v226);
      v226 = (void **)&v229;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v226);
      if (v228.__r_.__value_.__r.__words[2]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v228.__r_.__value_.__r.__words[2]);
      }
      v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
      v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
      if (*(void *)&__p[16]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[16]);
      }
      if (SBYTE7(v240) < 0) {
        operator delete((void *)v239);
      }
      if (SHIBYTE(v238) < 0) {
        operator delete(*(void **)&buf[72]);
      }
      if ((buf[71] & 0x80000000) != 0) {
        operator delete(*(void **)&buf[48]);
      }
      if ((buf[47] & 0x80000000) != 0) {
        operator delete(*(void **)&buf[24]);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      *(_DWORD *)buf = 0;
      memset(&buf[8], 0, 64);
      unsigned int v173 = (char *)operator new(0xF8uLL);
      *((void *)v173 + 1) = 0;
      *((void *)v173 + 2) = 0;
      *(void *)unsigned int v173 = &unk_1EE389DF0;
      *((void *)v173 + 3) = &unk_1EE36C758;
      *(_OWORD *)(v173 + 40) = 0u;
      *(_OWORD *)(v173 + 56) = 0u;
      *(_OWORD *)(v173 + 72) = 0u;
      *(_OWORD *)(v173 + 88) = 0u;
      *(_OWORD *)(v173 + 104) = 0u;
      *(_OWORD *)(v173 + 120) = 0u;
      *(_OWORD *)(v173 + 136) = 0u;
      *(_OWORD *)(v173 + 152) = 0u;
      *(_OWORD *)(v173 + 161) = 0u;
      *((_OWORD *)v173 + 13) = 0u;
      *((_OWORD *)v173 + 14) = 0u;
      *((void *)v173 + 30) = 0;
      *(void *)&uint8_t buf[8] = v173 + 24;
      *(void *)&buf[16] = v173;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v154 + 3);
      if (__p[23] >= 0) {
        float32x4_t v174 = __p;
      }
      else {
        float32x4_t v174 = *(unsigned char **)__p;
      }
      if (v154)
      {
        if (v153 >= 0) {
          uint64_t v175 = &lpsrc;
        }
        else {
          uint64_t v175 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        }
        memmove(v174, v175, v154);
      }
      *(_DWORD *)&v174[v154] = 6711647;
      uint64_t v176 = *(void *)&buf[8];
      uint64_t v177 = *(void *)&buf[8] + 16;
      if (*(char *)(*(void *)&buf[8] + 39) < 0)
      {
        operator delete(*(void **)v177);
        uint64_t v176 = *(void *)&buf[8];
      }
      uint64_t v178 = *(void *)&__p[16];
      *(_OWORD *)uint64_t v177 = *(_OWORD *)__p;
      *(void *)(v177 + 16) = v178;
      MEMORY[0x192FF0F50](v176 + 40, "cf_if");
      int v179 = (***(uint64_t (****)(void))(*(void *)v151 + 8))(*(void *)(*(void *)v151 + 8));
      uint64_t v180 = *(void *)&buf[8];
      *(_DWORD *)(*(void *)&buf[8] + 8) = v179;
      if (v201) {
        int v181 = 0;
      }
      else {
        int v181 = *(_DWORD *)(*(void *)(*((void *)v207 + 4) + 16 * v118) + 12);
      }
      *(_DWORD *)(v180 + 12) = v181;
      Espresso::abstract_engine_factory::shared(&v220);
      uint64_t v182 = v220;
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
      LODWORD(v226) = 0;
      Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v182, v151, (uint64_t)__p, (uint64_t)&v223, (int *)&v226);
      uint64_t v183 = (void *)v228.__r_.__value_.__r.__words[0];
      if (v228.__r_.__value_.__r.__words[0]
      {
        std::string::size_type v184 = v228.__r_.__value_.__l.__size_;
        if (v228.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v228.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string::size_type v184 = 0;
      }
      uint64_t v185 = *(void *)&buf[8];
      float32x4_t v186 = *(std::__shared_weak_count **)(*(void *)&buf[8] + 72);
      *(void *)(*(void *)&buf[8] + 64) = v183;
      *(void *)(v185 + 72) = v184;
      if (v186) {
        nitro::nitro_function::nitro_function(v186);
      }
      if (v228.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v228.__r_.__value_.__l.__size_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (v221) {
        nitro::nitro_function::nitro_function(v221);
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[48], 0, 0, 0);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)uint64_t __p = __str;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[24], (std::string *)__p, (long long *)&__p[24], 1uLL);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      *(_DWORD *)buf = v199 + v118;
      *(_DWORD *)uint64_t __p = v199 + v118;
      *(_OWORD *)&__p[8] = *(_OWORD *)&buf[8];
      if (*(void *)&buf[16]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[16] + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&__p[24] = 0;
      *(void *)&__p[32] = 0;
      *(void *)&long long v234 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(uint64_t *)&buf[24], *(uint64_t *)&buf[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[32] - *(void *)&buf[24]) >> 3));
      *((void *)&v234 + 1) = 0;
      long long v235 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v234 + 1, *(uint64_t *)&buf[48], *(uint64_t *)&buf[56], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[56] - *(void *)&buf[48]) >> 3));
      memset(&v228, 0, sizeof(v228));
      v220 = &v228;
      LOBYTE(v221) = 0;
      v228.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      v228.__r_.__value_.__l.__size_ = v228.__r_.__value_.__r.__words[0];
      v228.__r_.__value_.__r.__words[2] = v228.__r_.__value_.__r.__words[0] + 72;
      v228.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v228.__r_.__value_.__r.__words[2], (uint64_t)__p, (uint64_t)&v236, (uint64_t)v228.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers((uint64_t)v207, (uint64_t **)&v228);
      v220 = &v228;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
      v220 = (char *)&v234 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
      v220 = &__p[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
      if (*(void *)&__p[16]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[16]);
      }
      *(void *)uint64_t __p = &buf[48];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      *(void *)uint64_t __p = &buf[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      unint64_t v109 = *(void *)&buf[16];
      if (*(void *)&buf[16]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[16]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      }
      int v119 = v199 + 2;
      char v117 = 1;
    }
LABEL_343:
    ++v118;
    unint64_t v120 = (v205 - v204) >> 4;
  }
  while (v118 <= v206);
  atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
  *(unsigned char *)uint64_t v195 = 1;
  *(void *)(v195 + 8) = v194;
  *(void *)(v195 + 16) = v196;
  atomic_fetch_add_explicit(&v196->__shared_owners_, 1uLL, memory_order_relaxed);
  nitro::nitro_function::nitro_function(v196);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v208.__r_.__value_.__l.__data_);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v209);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v211);
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v214.__r_.__value_.__l.__data_);
  }
  *(void *)buf = v215;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v216[2]);
  uint64_t v192 = v216[0];
  v216[0] = 0;
  if (v192) {
    operator delete(v192);
  }
  *(void *)buf = &v217;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  nitro::nitro_function::nitro_function(v196);
}

void sub_192A62594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a46);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a52);
  if (a62 < 0) {
    operator delete(a57);
  }
  a52 = (uint64_t)&a63;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)a68);
  std::string::size_type v72 = a66;
  a66 = 0;
  if (v72) {
    operator delete(v72);
  }
  a66 = &a71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
  nitro::nitro_function::nitro_function(a18);
  _Unwind_Resume(a1);
}

char **std::vector<std::unordered_set<unsigned long>>::vector(char **a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    int v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)long long v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_192A62AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

unint64_t std::operator==[abi:ne180100]<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v3 = (void *)(a1 + 16);
  while (1)
  {
    uint64_t v3 = (void *)*v3;
    unint64_t result = v3 == 0;
    if (!v3) {
      break;
    }
    unint64_t v5 = v3[2];
    unint64_t result = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(a2, v5);
    if (!result) {
      break;
    }
    if (v5 != *(void *)(result + 16)) {
      return 0;
    }
  }
  return result;
}

void Espresso::builtin_params_t::~builtin_params_t(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void Espresso::analysis_multi_head_program_gen::serialize(void *a1@<X8>)
{
  uint64_t v3 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a1, (uint64_t)v3, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A62C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::analysis_multi_head_program_gen::deserialize()
{
  return 1;
}

void Espresso::analysis_multi_head_program_gen::~analysis_multi_head_program_gen(Espresso::analysis_multi_head_program_gen *this)
{
}

void Espresso::pass_multi_head_program_gen::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

void Espresso::pass_multi_head_program_gen::~pass_multi_head_program_gen(Espresso::pass_multi_head_program_gen *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::get_f16_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 600);
  *a2 = *(void *)(this + 592);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 592) = v2;
  long long v4 = *(std::__shared_weak_count **)(a1 + 600);
  *(void *)(a1 + 600) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 568);
  *a2 = *(void *)(this + 560);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 584);
  *a2 = *(void *)(this + 576);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 560) = v2;
  long long v4 = *(std::__shared_weak_count **)(a1 + 568);
  *(void *)(a1 + 568) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 576) = v2;
  long long v4 = *(std::__shared_weak_count **)(a1 + 584);
  *(void *)(a1 + 584) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v4 = a3[1] - *a3;
  if (v4 != 64)
  {
    long long v6 = a2[1];
    v22[0] = *a2;
    v22[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v4 = a3[1] - *a3;
    }
    std::to_string(&v16, v4 >> 6);
    int v7 = std::string::insert(&v16, 0, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: number of inputs must be 1, received ");
    std::string v17 = *v7;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v17, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v22, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_13;
  }
  uint64_t v5 = a3[4] - a3[3];
  if (v5 != 64)
  {
    long long v6 = a2[1];
    v15[0] = *a2;
    v15[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v5 = a3[4] - a3[3];
    }
    std::to_string(&v16, v5 >> 6);
    long long v8 = std::string::insert(&v16, 0, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: number of outputs must be 1, received ");
    std::string v17 = *v8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v17, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v15, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_13:
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    uint64_t v23 = (void **)v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v23);
    uint64_t v23 = (void **)v19;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    uint64_t v9 = (void *)v16.__r_.__value_.__r.__words[0];
    goto LABEL_35;
  }
  if (*(_DWORD *)(a1 + 448))
  {
    long long v6 = a2[1];
    v14[0] = *a2;
    v14[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: low_precision_accumulation");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v17, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v14, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_29:
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_33;
  }
  if (*(unsigned __int16 *)(a1 + 376) >= 2u)
  {
    long long v6 = a2[1];
    v13[0] = *a2;
    v13[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: padding configuration");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v17, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 364) != -1)
  {
    long long v6 = a2[1];
    v12[0] = *a2;
    v12[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v17, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: fused_activation_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v17, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_29;
  }
  if (*(int *)(a1 + 328) < 1 || *(int *)(a1 + 332) < 1) {
    return 1;
  }
  long long v6 = a2[1];
  v11[0] = *a2;
  v11[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v17, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: fused_relu > 0 and fused_tanh > 0");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v17, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_33:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (void *)v17.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v9);
  }
LABEL_36:
  if (v6) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
  }
  return 0;
}

void sub_192A63184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a32);
  if (a31 < 0) {
    operator delete(__p);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::__set_weight_raw_blob(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  uint64_t v11 = (*(void *(**)(long long *__return_ptr, uint64_t *))(*a1 + 464))(v19, a1);
  uint64_t v15 = a1 + 59;
  uint64_t v16 = a1[1];
  std::string v17 = (std::__shared_weak_count *)a1[2];
  v18[0] = v16;
  v18[1] = (uint64_t)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::set_conv_quantized_weight_helper(v12, v13, v14, (uint64_t)v11, (unsigned __int8 **)a3, (char *)a4, a5, a6, v15, v19, v18, 1, 1);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (__p)
  {
    float v21 = __p;
    operator delete(__p);
  }
}

void sub_192A63324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::clear_weights(Espresso::MPSGraphEngine::Kernels::deconvolution_kernel *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 71);
  long long v3 = 0uLL;
  *((_OWORD *)this + 35) = 0u;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    long long v3 = 0uLL;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 73);
  *((_OWORD *)this + 36) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 75);
  *((_OWORD *)this + 37) = 0u;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 60);
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
  }
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::share_weights(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    if (v4)
    {
      uint64_t v5 = v4;
      long long v6 = *(std::__shared_weak_count **)(a2 + 8);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v4 + 456))(&v13, v4);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 400))(a1, &v13);
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v5 + 448))(&v11, v5);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 392))(a1, &v11);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v5 + 552))(&v9, v5);
      uint64_t v7 = 0;
      long long v8 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 544))(a1, &v9, &v7);
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      if (v6) {
        nitro::nitro_function::nitro_function(v6);
      }
    }
  }
}

void sub_192A635E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::~deconvolution_kernel(Espresso::MPSGraphEngine::Kernels::deconvolution_kernel *this)
{
  *(void *)this = &unk_1EE330C18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE330C18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

void Espresso::abstract_data_source::get_data_for_batch(Espresso::abstract_data_source *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a3 * a2;
    do
    {
      (**(void (***)(void **__return_ptr, Espresso::abstract_data_source *, uint64_t))this)(&v30, this, v7 + v8);
      uint64_t v9 = v31;
      if (v31)
      {
        do
        {
          std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v9 + 1);
          *(void *)&long long v26 = &__p;
          unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (unsigned __int8 *)&__p, (long long **)&v26);
          uint64_t v11 = *((void *)v10 + 5);
          __n128 v12 = v28;
          if (!v11)
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v26, v28[2], v28[3], v28[4], a3);
            uint64_t v13 = v26;
            int32x2_t v14 = (std::__shared_weak_count *)*((void *)v10 + 6);
            *(_OWORD *)(v10 + 40) = v26;
            if (v14)
            {
              nitro::nitro_function::nitro_function(v14);
              uint64_t v11 = *((void *)v10 + 5);
            }
            else
            {
              uint64_t v11 = v13;
            }
            __n128 v12 = v28;
          }
          uint64_t v15 = *(int *)(v11 + 8);
          if (v15 != v12[2]
            || (int v16 = *(_DWORD *)(v11 + 12), v16 != v12[3])
            || (int v17 = *(_DWORD *)(v11 + 16), v17 != v12[4]))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Data Inconsistency");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v18 = 0;
          uint64_t v19 = *(void *)(v11 + 24);
          unint64_t v20 = (const void *)*((void *)v12 + 3);
          float v21 = v12 + 3;
          uint64_t v22 = v15;
          do
            v22 *= v21[v18++];
          while (v18 != 3);
          memcpy((void *)(v19 + 4 * v7 * v16 * (int)v15 * v17), v20, 4 * v22);
          if (v29) {
            nitro::nitro_function::nitro_function(v29);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v9 = *(long long **)v9;
        }
        while (v9);
        uint64_t v23 = v31;
      }
      else
      {
        uint64_t v23 = 0;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v23);
      unint64_t v24 = v30;
      uint64_t v30 = 0;
      if (v24) {
        operator delete(v24);
      }
      ++v7;
    }
    while (v7 != a3);
  }
}

void sub_192A63984(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::async_data_source::get_data_for_sample(Espresso::async_data_source *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 11);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Ready not called!");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v13 = 0;
  int32x2_t v14 = &v13;
  uint64_t v15 = 0x5812000000;
  int v16 = __Block_byref_object_copy__17612;
  long long v18 = 0u;
  long long v19 = 0u;
  int v17 = __Block_byref_object_dispose__17613;
  uint64_t v20 = 0;
  int v21 = 1065353216;
  uint64_t v9 = 0;
  unint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  uint64_t v4 = MEMORY[0x1E4F143A8];
  do
  {
    uint64_t v5 = *(NSObject **)(v2 + 8);
    v8[0] = v4;
    v8[1] = 3221225472;
    v8[2] = ___ZN8Espresso17async_data_source6priv_t9get_frontEm_block_invoke;
    v8[3] = &unk_1E5747660;
    v8[5] = &v9;
    v8[6] = v2;
    v8[4] = &v13;
    dispatch_sync(v5, v8);
  }
  while (!*((unsigned char *)v10 + 24));
  std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(a2, (uint64_t)(v14 + 6));
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(*((void **)&v19 + 1));
  long long v6 = (void *)*((void *)&v18 + 1);
  *((void *)&v18 + 1) = 0;
  if (v6) {
    operator delete(v6);
  }
}

void sub_192A63B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17612(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__17613(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 48);
}

void ___ZN8Espresso17async_data_source6priv_t9get_frontEm_block_invoke(void *a1)
{
  uint64_t v1 = a1[6];
  if (*(void *)(v1 + 72))
  {
    std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map((uint64_t)__p, *(void *)(*(void *)(v1 + 40) + 8 * (*(void *)(v1 + 64) / 0x55uLL))+ 48 * (*(void *)(v1 + 64) % 0x55uLL)+ 8);
    uint64_t v3 = *(void *)(a1[4] + 8);
    if ((void **)(v3 + 48) != __p)
    {
      *(_DWORD *)(v3 + 80) = v8;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,void *> *>>((void *)(v3 + 48), v7);
    }
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(*(void *)(*(void *)(v1 + 40) + 8 * (*(void *)(v1 + 64) / 0x55uLL))+ 48 * (*(void *)(v1 + 64) % 0x55uLL)+ 8);
    int64x2_t v4 = vaddq_s64(*(int64x2_t *)(v1 + 64), (int64x2_t)xmmword_192DC5030);
    *(int64x2_t *)(v1 + 64) = v4;
    if (v4.i64[0] >= 0xAAuLL)
    {
      operator delete(**(void ***)(v1 + 40));
      *(void *)(v1 + 40) += 8;
      *(void *)(v1 + 64) -= 85;
    }
    --*(_DWORD *)(v1 + 80);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v7);
    uint64_t v5 = __p[0];
    __p[0] = 0;
    if (v5) {
      operator delete(v5);
    }
  }
  Espresso::async_data_source::priv_t::__fill_cache((Espresso::async_data_source::priv_t *)v1);
}

void sub_192A63D24(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::async_data_source::priv_t::__fill_cache(Espresso::async_data_source::priv_t *this)
{
  int v1 = *(_DWORD *)(*(void *)this + 16);
  int v2 = v1 - *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = v1;
  if (v2 >= 1)
  {
    uint64_t v3 = *((void *)this + 2);
    int64x2_t v4 = *((void *)this + 3);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = ___ZN8Espresso17async_data_source6priv_t12__fill_cacheEv_block_invoke;
    v5[3] = &__block_descriptor_44_e5_v8__0l;
    v5[4] = this;
    int v6 = v2;
    dispatch_group_async(v4, v3, v5);
  }
}

void ___ZN8Espresso17async_data_source6priv_t12__fill_cacheEv_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if (v1 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(v4 + 88);
    do
    {
      if (!*(unsigned char *)(v4 + 96))
      {
        (*(void (**)(void **__return_ptr))(**(void **)v4 + 40))(v16);
        if (*(unsigned char *)(*(void *)v4 + 8))
        {
          while (1)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "labels");
            v17[0] = (long long *)__p;
            float v6 = **(float **)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)__p, v17)+ 5)+ 24);
            float v7 = *(float *)(v4 + 100);
            if (SHIBYTE(v15) < 0) {
              operator delete(__p[0]);
            }
            if (v6 != v7) {
              break;
            }
            (*(void (**)(void **__return_ptr))(**(void **)v4 + 40))(__p);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__move_assign((uint64_t)v16, (uint64_t *)__p);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v15);
            int v8 = __p[0];
            __p[0] = 0;
            if (v8) {
              operator delete(v8);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "labels");
          v17[0] = (long long *)__p;
          *(_DWORD *)(v4 + 100) = **(_DWORD **)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)__p, v17)+ 5)+ 24);
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v9 = *(NSObject **)(v4 + 8);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3321888768;
        block[2] = ___ZN8Espresso17async_data_source6priv_t8load_oneEm_block_invoke;
        block[3] = &__block_descriptor_88_ea8_48c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE_e5_v8__0l;
        block[4] = v4;
        block[5] = v5;
        std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map((uint64_t)v13, (uint64_t)v16);
        dispatch_async(v9, block);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((void *)v13[2]);
        unint64_t v10 = v13[0];
        v13[0] = 0;
        if (v10) {
          operator delete(v10);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((void *)v16[2]);
        uint64_t v11 = v16[0];
        v16[0] = 0;
        if (v11) {
          operator delete(v11);
        }
        uint64_t v5 = *(void *)(v4 + 88);
        int v1 = *(_DWORD *)(a1 + 40);
      }
      *(void *)(v4 + 88) = ++v5;
      ++v3;
    }
    while (v3 < v1);
  }
}

void sub_192A64020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(a31);
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    char v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  int v16 = *a3;
  long long v17 = **a3;
  *((void *)i + 4) = *((void *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)int v16 = 0;
  *((void *)i + 5) = 0;
  *((void *)i + 6) = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_38:
    *uint64_t v25 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v15;
  *uint64_t v15 = i;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_192A642C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17async_data_source6priv_t8load_oneEm_block_invoke(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  uint64_t v117 = *(void *)(a1 + 40);
  std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map((uint64_t)__p, a1 + 48);
  int v2 = (char *)v1[6];
  unint64_t v3 = (char *)v1[5];
  uint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 85 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v6 = v1[8];
  unint64_t v7 = v1[9] + v6;
  if (v5 != v7) {
    goto LABEL_84;
  }
  if (v6 < 0x55)
  {
    uint64_t v22 = v4 >> 3;
    size_t v23 = (char *)v1[7];
    uint64_t v24 = (char *)v1[4];
    uint64_t v25 = v23 - v24;
    if (v4 >> 3 < (unint64_t)((v23 - v24) >> 3))
    {
      if (v23 == v2)
      {
        std::string::size_type v51 = operator new(0xFF0uLL);
        if (v24 == v3)
        {
          if (v2 == v3) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v25 >> 2;
          }
          uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v52);
          unint64_t v3 = &v53[(2 * v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = (uint64_t *)v1[5];
          unint64_t v56 = v3;
          uint64_t v57 = v1[6] - (void)v55;
          if (v57)
          {
            unint64_t v56 = &v3[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            long long v59 = v3;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)long long v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          std::string::size_type v61 = (void *)v1[4];
          v1[4] = v53;
          v1[5] = v3;
          v1[6] = v56;
          v1[7] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            unint64_t v3 = (char *)v1[5];
          }
        }
        *((void *)v3 - 1) = v51;
        std::string::size_type v62 = (char *)v1[5];
        int v63 = (char *)v1[6];
        v1[5] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        v1[5] = v62;
        if (v63 == (char *)v1[7])
        {
          unint64_t v65 = v1[4];
          uint64_t v66 = (uint64_t)&v62[-v65];
          if ((unint64_t)v62 <= v65)
          {
            uint64_t v99 = (uint64_t)&v63[-v65];
            BOOL v38 = v99 == 0;
            uint64_t v100 = v99 >> 2;
            if (v38) {
              unint64_t v101 = 1;
            }
            else {
              unint64_t v101 = v100;
            }
            unint64_t v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v101);
            unint64_t v104 = &v102[8 * (v101 >> 2)];
            uint64_t v105 = (uint64_t *)v1[5];
            int v63 = v104;
            uint64_t v106 = v1[6] - (void)v105;
            if (v106)
            {
              int v63 = &v104[v106 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v107 = 8 * (v106 >> 3);
              uint64_t v108 = &v102[8 * (v101 >> 2)];
              do
              {
                uint64_t v109 = *v105++;
                *(void *)uint64_t v108 = v109;
                v108 += 8;
                v107 -= 8;
              }
              while (v107);
            }
            float32x4_t v110 = (void *)v1[4];
            v1[4] = v102;
            v1[5] = v104;
            v1[6] = v63;
            v1[7] = &v102[8 * v103];
            if (v110)
            {
              operator delete(v110);
              int v63 = (char *)v1[6];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v14 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v14) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            std::string::size_type v72 = &v62[-8 * v71];
            int64_t v73 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v71], v62, v63 - v62);
              std::string::size_type v62 = (char *)v1[5];
            }
            int v63 = &v72[v73];
            v1[5] = &v62[8 * v70];
            v1[6] = &v72[v73];
          }
        }
        *(void *)int v63 = v64;
      }
      else
      {
        *(void *)int v2 = operator new(0xFF0uLL);
      }
      goto LABEL_82;
    }
    if (v23 == v24) {
      unint64_t v26 = 1;
    }
    else {
      unint64_t v26 = v25 >> 2;
    }
    __int16 v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v26);
    uint64_t v29 = v28;
    uint64_t v30 = &v27[8 * v22];
    *(void *)&long long v31 = v27;
    *((void *)&v31 + 1) = v30;
    long long v114 = v31;
    unint64_t v32 = operator new(0xFF0uLL);
    *(void *)&long long v33 = v30;
    *((void *)&v33 + 1) = &v27[8 * v29];
    if (v22 == v29)
    {
      uint64_t v34 = 8 * v22;
      *(void *)&long long v35 = v114;
      if (v4 >= 1)
      {
        uint64_t v36 = v34 >> 3;
        if (v36 >= -1) {
          unint64_t v37 = v36 + 1;
        }
        else {
          unint64_t v37 = v36 + 2;
        }
        v30 -= 8 * (v37 >> 1);
        *(void *)&long long v33 = v30;
        *((void *)&v35 + 1) = v30;
        goto LABEL_56;
      }
      uint64_t v74 = v34 >> 2;
      if (v2 == v3) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      unint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v75);
      uint64_t v30 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v35 = v76;
      *((void *)&v35 + 1) = v30;
      *(void *)&long long v33 = v30;
      *((void *)&v33 + 1) = &v76[8 * v77];
      if (!v27) {
        goto LABEL_56;
      }
      long long v111 = v33;
      long long v114 = v35;
      operator delete(v27);
      long long v33 = v111;
    }
    long long v35 = v114;
LABEL_56:
    *(void *)uint64_t v30 = v32;
    *(void *)&long long v33 = v33 + 8;
    for (uint64_t i = v1[6]; i != v1[5]; i -= 8)
    {
      unint64_t v79 = (void *)*((void *)&v35 + 1);
      if (*((void *)&v35 + 1) == (void)v35)
      {
        uint64_t v81 = (unsigned char *)v33;
        if ((unint64_t)v33 >= *((void *)&v33 + 1))
        {
          if (*((void *)&v33 + 1) == *((void *)&v35 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v33 + 1) - *((void *)&v35 + 1)) >> 2;
          }
          uint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v86);
          unint64_t v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            unint64_t v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            uint64_t v92 = v80;
            uint64_t v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)uint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v35 = v87;
          *((void *)&v35 + 1) = v80;
          *(void *)&long long v33 = v89;
          *((void *)&v33 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v112 = v33;
            long long v116 = v35;
            operator delete(v79);
            long long v33 = v112;
            long long v35 = v116;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v33 + 1) - v33) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v33 + 8 * (v83 >> 1);
          unint64_t v80 = (char *)(v85 - (v33 - *((void *)&v35 + 1)));
          if ((void)v33 == *((void *)&v35 + 1))
          {
            uint64_t v81 = (unsigned char *)*((void *)&v35 + 1);
          }
          else
          {
            uint64_t v113 = *((void *)&v33 + 1);
            uint64_t v115 = v35;
            memmove((void *)(v85 - (v33 - *((void *)&v35 + 1))), *((const void **)&v35 + 1), v33 - *((void *)&v35 + 1));
            *((void *)&v33 + 1) = v113;
            *(void *)&long long v35 = v115;
          }
          *((void *)&v35 + 1) = v80;
          *(void *)&long long v33 = &v81[8 * v84];
        }
      }
      else
      {
        unint64_t v80 = (char *)*((void *)&v35 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v35 + 1) -= 8;
    }
    int v96 = (void *)v1[4];
    *((_OWORD *)v1 + 2) = v35;
    *((_OWORD *)v1 + 3) = v33;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
  v1[8] = v6 - 85;
  uint64_t v10 = *(void *)v3;
  unint64_t v8 = v3 + 8;
  uint64_t v9 = v10;
  v1[5] = v8;
  if ((char *)v1[7] == v2)
  {
    unint64_t v11 = v1[4];
    uint64_t v12 = (uint64_t)&v8[-v11];
    if ((unint64_t)v8 <= v11)
    {
      uint64_t v39 = (uint64_t)&v2[-v11];
      BOOL v38 = v39 == 0;
      uint64_t v40 = v39 >> 2;
      if (v38) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = v40;
      }
      uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
      uint64_t v44 = &v42[8 * (v41 >> 2)];
      int v45 = (uint64_t *)v1[5];
      int v2 = v44;
      uint64_t v46 = v1[6] - (void)v45;
      if (v46)
      {
        int v2 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        uint64_t v48 = &v42[8 * (v41 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)uint64_t v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      uint64_t v50 = (void *)v1[4];
      v1[4] = v42;
      v1[5] = v44;
      v1[6] = v2;
      v1[7] = &v42[8 * v43];
      if (v50)
      {
        operator delete(v50);
        int v2 = (char *)v1[6];
      }
    }
    else
    {
      uint64_t v13 = v12 >> 3;
      BOOL v14 = v12 >> 3 < -1;
      uint64_t v15 = (v12 >> 3) + 2;
      if (v14) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = v13 + 1;
      }
      uint64_t v17 = -(v16 >> 1);
      uint64_t v18 = v16 >> 1;
      float v19 = &v8[-8 * v18];
      int64_t v20 = v2 - v8;
      if (v2 == v8)
      {
        unint64_t v21 = v2;
      }
      else
      {
        memmove(&v8[-8 * v18], v8, v2 - v8);
        unint64_t v21 = (char *)v1[5];
      }
      int v2 = &v19[v20];
      v1[5] = &v21[8 * v17];
      v1[6] = &v19[v20];
    }
  }
  *(void *)int v2 = v9;
LABEL_82:
  v1[6] += 8;
LABEL_83:
  unint64_t v3 = (char *)v1[5];
  unint64_t v7 = v1[9] + v1[8];
LABEL_84:
  uint64_t v97 = (void *)(*(void *)&v3[8 * (v7 / 0x55)] + 48 * (v7 % 0x55));
  void *v97 = v117;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table((uint64_t)(v97 + 1), (uint64_t *)__p);
  ++v1[9];
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((void *)__p[2]);
  std::string::size_type v98 = __p[0];
  __p[0] = 0;
  if (v98) {
    operator delete(v98);
  }
}

void sub_192A64888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v12);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::simple_blobs_data_source::get_num_samples(Espresso::simple_blobs_data_source *this)
{
  return *((void *)this + 3);
}

void Espresso::simple_blobs_data_source::~simple_blobs_data_source(Espresso::simple_blobs_data_source *this)
{
  *(void *)this = &unk_1EE35CFD8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 5));

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EE35CFD8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 5));
}

void Espresso::simple_blobs_data_source::get_data_for_sample(Espresso::simple_blobs_data_source *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = v4 + 1;
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    uint64_t v4 = (int)std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v5, *((_DWORD **)this + 9));
  }
  unint64_t v6 = (long long *)*((void *)this + 4);
  unint64_t v7 = (char *)this + 40;
  if (v6 != (long long *)((char *)this + 40))
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v6 + 2);
      uint64_t v9 = v21;
      unint64_t v8 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v19, *(_DWORD *)(v9 + 8), *(_DWORD *)(v9 + 12), *(_DWORD *)(v9 + 16), 1);
      p_p = &__p;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (long long **)&p_p);
      uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
      *(_OWORD *)(v10 + 40) = v19;
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      int v12 = *(_DWORD *)(v9 + 8);
      int v13 = *(_DWORD *)(v9 + 12);
      uint64_t v14 = *(int *)(v9 + 16);
      *(void *)&long long v19 = &__p;
      uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (long long **)&v19);
      memcpy(*(void **)(*((void *)v15 + 5) + 24), (const void *)(*(void *)(v9 + 24) + 4 * v4 * v13 * (uint64_t)v12 * v14), 4 * v13 * (uint64_t)v12 * v14);
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = (long long *)*((void *)v6 + 1);
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = *(long long **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (long long *)*((void *)v6 + 2);
          BOOL v18 = *(void *)v17 == (void)v6;
          unint64_t v6 = v17;
        }
        while (!v18);
      }
      unint64_t v6 = v17;
    }
    while (v17 != (long long *)v7);
  }
}

void sub_192A64B40(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v3);
  _Unwind_Resume(a1);
}

uint64_t std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = a2[1];
  int v3 = v2 - *a2;
  if (v2 == *a2) {
    return v2;
  }
  unsigned int v4 = v3 + 1;
  if (v3 == -1)
  {
    uint64_t v17 = a1;
    long long v18 = xmmword_192DCA720;
    int64x2_t v19 = vdupq_n_s64(2uLL);
    long long v20 = xmmword_192DCA730;
    return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v17);
  }
  uint64_t v6 = __clz(v4);
  uint64_t v7 = 31;
  if (((v4 << v6) & 0x7FFFFFFF) != 0) {
    uint64_t v7 = 32;
  }
  unint64_t v8 = v7 - v6;
  uint64_t v17 = a1;
  *(void *)&long long v18 = v8;
  if (v8 % 0x1E) {
    unint64_t v9 = v8 / 0x1E + 1;
  }
  else {
    unint64_t v9 = v8 / 0x1E;
  }
  unint64_t v10 = v8 / v9;
  *((void *)&v18 + 1) = v8 / v9;
  v19.i64[0] = v9;
  LODWORD(v11) = (-1 << (v8 / v9)) & 0x7FFFFFFE;
  if (v8 / v9 >= 0x20) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v11;
  }
  LODWORD(v20) = v11;
  if (v11 / v9 < (v11 ^ 0x7FFFFFFE))
  {
    ++v9;
    unint64_t v10 = v8 / v9;
    *((void *)&v18 + 1) = v8 / v9;
    v19.i64[0] = v9;
    if (v8 / v9 > 0x1F)
    {
      LODWORD(v20) = 0;
      v19.i64[1] = v9 - v8 + 32 * v9;
      unint64_t v10 = 32;
      goto LABEL_18;
    }
    LODWORD(v20) = (-1 << v10) & 0x7FFFFFFE;
  }
  v19.i64[1] = v9 + v8 / v9 * v9 - v8;
  if (v10 > 0x1E)
  {
LABEL_18:
    int v12 = 0;
    DWORD1(v20) = 0;
    goto LABEL_19;
  }
  DWORD1(v20) = (-2 << v10) & 0x7FFFFFFE;
  int v12 = 1;
LABEL_19:
  unsigned int v13 = 0xFFFFFFFF >> -(char)v10;
  if (!v10) {
    unsigned int v13 = 0;
  }
  unsigned int v14 = 0xFFFFFFFF >> ~(_BYTE)v10;
  if (!v12) {
    unsigned int v14 = -1;
  }
  *((void *)&v20 + 1) = __PAIR64__(v14, v13);
  do
    unsigned int v15 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v17);
  while (v15 >= v4);
  return *a2 + v15;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    LODWORD(result) = 0;
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        unsigned int v7 = v6 / 0xADC8;
        unsigned int v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        BOOL v9 = v8 >= v7;
        unsigned int v10 = v8 - v7;
        if (v9) {
          int v11 = 0;
        }
        else {
          int v11 = 0x7FFFFFFF;
        }
        unsigned int v6 = v11 + v10;
      }
      while (v6 - 1 >= *(_DWORD *)(a1 + 40));
      int v12 = result << v5;
      if (v5 >= 0x20) {
        int v12 = 0;
      }
      uint64_t result = v12 + (*(_DWORD *)(a1 + 48) & (v6 - 1));
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v13 = *(void *)(a1 + 24);
  if (v2 < v13)
  {
    unsigned int v14 = *(unsigned int **)a1;
    unsigned int v15 = *(_DWORD *)(a1 + 44);
    unint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(a1 + 52);
    unsigned int v18 = *v14;
    while (1)
    {
      unsigned int v19 = v18 / 0xADC8;
      unsigned int v20 = 48271 * (v18 % 0xADC8);
      v19 *= 3399;
      BOOL v9 = v20 >= v19;
      unsigned int v21 = v20 - v19;
      if (v9) {
        int v22 = 0;
      }
      else {
        int v22 = 0x7FFFFFFF;
      }
      unsigned int v18 = v22 + v21;
      if (v18 - 1 < v15)
      {
        int v23 = result << (v16 + 1);
        if (v16 >= 0x1F) {
          int v23 = 0;
        }
        uint64_t result = v23 + (v17 & (v18 - 1));
        if (++v2 == v13) {
          break;
        }
      }
    }
    *unsigned int v14 = v18;
  }
  return result;
}

void Espresso::f4_blob_async_data_source::background_load_sample(Espresso::f4_blob_async_data_source *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v4 = (void *)*((void *)this + 22);
  unint64_t v5 = (char *)this + 184;
  if (v4 != (void *)((char *)this + 184))
  {
    do
    {
      if (*((char *)v4 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)v4[4], v4[5]);
      }
      else {
        std::string v27 = *(std::string *)(v4 + 4);
      }
      uint64_t v7 = v4[7];
      unsigned int v6 = (std::__shared_weak_count *)v4[8];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v8 = *((void *)this + 21);
      unint64_t v9 = *(int *)(v7 + 20);
      if (v8 >= v9)
      {
        unint64_t v8 = 0;
        *((void *)this + 21) = 0;
      }
      if (v8 >= v9)
      {
        Espresso::f4_blob_async_data_source::load_chunk(this, *((void *)this + 20));
        unint64_t v10 = *((void *)this + 20) + 1;
        *((void *)this + 20) = v10;
        uint64_t v25 = &v27;
        int v11 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 16, (const void **)&v27.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v25);
        if (v10 >= 0xAAAAAAAAAAAAAAABLL * (v11[8] - v11[7]))
        {
          *((void *)this + 20) = 0;
          if ((*((_DWORD *)this + 50) & 0x80000000) == 0)
          {
            NSLog(&cfstr_XshuffleD.isa, *((unsigned int *)this + 50));
            std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(*((void *)this + 31), *((void *)this + 32), *((void *)this + 26));
          }
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v25, *(_DWORD *)(v7 + 8), *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), 1);
      int v12 = v25;
      int v13 = v25->__r_.__value_.__r.__words[1];
      if (v13 != *(_DWORD *)(v7 + 8)
        || (int v14 = HIDWORD(v25->__r_.__value_.__r.__words[1]), v14 != *(_DWORD *)(v7 + 12))
        || (int v15 = v25->__r_.__value_.__r.__words[2], v15 != *(_DWORD *)(v7 + 16)))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "size mismatch");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v16 = 12;
      uint64_t v17 = SLODWORD(v25->__r_.__value_.__r.__words[1]);
      do
      {
        v17 *= *(int *)((char *)&v25->__r_.__value_.__l.__data_ + v16);
        v16 += 4;
      }
      while (v16 != 24);
      memcpy(v25[1].__r_.__value_.__l.__data_, (const void *)(*(void *)(v7 + 24)+ 4 * *(int *)(*((void *)this + 28) + 4 * *((void *)this + 21)) * (uint64_t)(v14 * v13 * v15)), 4 * v17);
      uint64_t v28 = &v27;
      unsigned int v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&v27, (long long **)&v28);
      unsigned int v19 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned int v20 = (std::__shared_weak_count *)*((void *)v18 + 6);
      *((void *)v18 + 5) = v12;
      *((void *)v18 + 6) = v19;
      if (v20) {
        nitro::nitro_function::nitro_function(v20);
      }
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
      if (v6) {
        nitro::nitro_function::nitro_function(v6);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      unsigned int v21 = (char *)v4[1];
      if (v21)
      {
        do
        {
          int v22 = v21;
          unsigned int v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v22 = (char *)v4[2];
          BOOL v23 = *(void *)v22 == (void)v4;
          uint64_t v4 = v22;
        }
        while (!v23);
      }
      uint64_t v4 = v22;
    }
    while (v22 != v5);
  }
  ++*((void *)this + 21);
}

void sub_192A65108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v18);
  _Unwind_Resume(a1);
}

void Espresso::f4_blob_async_data_source::load_chunk(Espresso::f4_blob_async_data_source *this, uint64_t a2)
{
  uint64_t v2 = a2;
  int v3 = this;
  uint64_t v4 = *(void *)(*((void *)this + 31) + 8 * a2);
  unint64_t v5 = (void *)((char *)this + 184);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 23));
  unsigned int v6 = (uint64_t **)((char *)v3 + 128);
  uint64_t v7 = (const void **)*((void *)v3 + 16);
  *((void *)v3 + 22) = v5;
  unint64_t v8 = (uint64_t **)((char *)v3 + 176);
  *unint64_t v5 = 0;
  *((void *)v3 + 24) = 0;
  *((void *)v3 + 21) = 0;
  BOOL v38 = (const void ***)((char *)v3 + 136);
  if (v7 == (const void **)((char *)v3 + 136))
  {
    unint64_t v28 = 0;
  }
  else
  {
    uint64_t v36 = v3;
    uint64_t v37 = v2;
    unint64_t v9 = (const void **)((char *)v3 + 104);
    unint64_t v10 = (std::vector<int> *)((char *)v3 + 224);
    do
    {
      __p[0] = v7 + 4;
      int v11 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v7 + 4, (uint64_t)&std::piecewise_construct, (long long **)__p);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (const void **)&v11[7][3 * v4], (uint64_t)__p);
      if (v41 >= 0) {
        int v12 = __p;
      }
      else {
        int v12 = (void **)__p[0];
      }
      printf("path=%s\n", (const char *)v12);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v42 = (long long *)(v7 + 4);
      int v13 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v7 + 4, (uint64_t)&std::piecewise_construct, &v42);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (const void **)&v13[7][3 * v4], (uint64_t)__p);
      if (v41 >= 0) {
        int v14 = __p;
      }
      else {
        int v14 = (void **)__p[0];
      }
      int v15 = fopen((const char *)v14, "rb");
      Espresso::debug::read_blob_f4((Espresso::debug *)&v39, v15);
      fclose(v15);
      uint64_t v42 = (long long *)(v7 + 4);
      uint64_t v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, v7 + 4, &v42);
      uint64_t v17 = (std::__shared_weak_count *)v16[8];
      *(_OWORD *)(v16 + 7) = v39;
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      __p[0] = v7 + 4;
      uint64_t v18 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v7 + 4, (uint64_t)&std::piecewise_construct, (long long **)__p);
      unsigned int v19 = v18[7];
      unsigned int v20 = v18[8];
      __p[0] = v7 + 4;
      unsigned int v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, v7 + 4, (long long **)__p);
      std::vector<int>::resize(v10, *(int *)(v21[7] + 20));
      uint64_t v22 = v21[7];
      if (*(int *)(v22 + 20) >= 1)
      {
        uint64_t v23 = 0;
        std::vector<int>::pointer begin = v10->__begin_;
        do
        {
          begin[v23] = v23;
          ++v23;
        }
        while (v23 < *(int *)(v22 + 20));
      }
      uint64_t v25 = (const void **)v7[1];
      if (v25)
      {
        do
        {
          unint64_t v26 = (const void ***)v25;
          uint64_t v25 = (const void **)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          unint64_t v26 = (const void ***)v7[2];
          BOOL v27 = *v26 == v7;
          uint64_t v7 = (const void **)v26;
        }
        while (!v27);
      }
      uint64_t v7 = (const void **)v26;
    }
    while (v26 != v38);
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v20 - v19);
    int v3 = v36;
    uint64_t v2 = v37;
  }
  if ((*((_DWORD *)v3 + 50) & 0x80000000) == 0)
  {
    NSLog(&cfstr_ShuffleD.isa, *((unsigned int *)v3 + 50));
    uint64_t v30 = (int *)*((void *)v3 + 28);
    uint64_t v29 = *((void *)v3 + 29);
    if (v29 - (uint64_t)v30 >= 5)
    {
      unint64_t v31 = v29 - 4;
      if (v29 - 4 > (unint64_t)v30)
      {
        uint64_t v32 = *((void *)v3 + 26);
        long long v33 = (char *)(((unint64_t)(v29 - (void)v30) >> 2) - 1);
        do
        {
          __p[0] = 0;
          __p[1] = v33;
          uint64_t v34 = std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v32, __p);
          if (v34)
          {
            int v35 = *v30;
            *uint64_t v30 = v30[v34];
            v30[v34] = v35;
          }
          ++v30;
          --v33;
        }
        while ((unint64_t)v30 < v31);
      }
    }
  }
  NSLog(&cfstr_LoadedChunkIdZ.isa, v2, v4, (uint64_t)(*((void *)v3 + 32) - *((void *)v3 + 31)) >> 3, v28);
}

void sub_192A65488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((uint64_t)(a2 - a1) >= 9)
  {
    uint64_t v4 = (uint64_t *)a1;
    unint64_t v5 = a2 - 8;
    if (a2 - 8 > a1)
    {
      uint64_t v7 = ((a2 - a1) >> 3) - 1;
      do
      {
        v11[0] = 0;
        v11[1] = v7;
        uint64_t v8 = std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a3, v11);
        if (v8)
        {
          uint64_t v9 = *v4;
          *uint64_t v4 = v4[v8];
          v4[v8] = v9;
        }
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

uint64_t Espresso::f4_blob_async_data_source::get_num_samples(Espresso::f4_blob_async_data_source *this)
{
  return *((void *)this + 19);
}

void Espresso::f4_blob_async_data_source::~f4_blob_async_data_source(Espresso::f4_blob_async_data_source *this)
{
  *(void *)this = &unk_1EE35D170;
  uint64_t v2 = (void *)*((void *)this + 31);
  if (v2)
  {
    *((void *)this + 32) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 28);
  if (v3)
  {
    *((void *)this + 29) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 23));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 128, *((char **)this + 17));
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  Espresso::async_data_source::~async_data_source(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE35D170;
  uint64_t v2 = (void *)*((void *)this + 31);
  if (v2)
  {
    *((void *)this + 32) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 28);
  if (v3)
  {
    *((void *)this + 29) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 23));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 128, *((char **)this + 17));
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }

  Espresso::async_data_source::~async_data_source(this);
}

void Espresso::async_data_source::~async_data_source(Espresso::async_data_source *this)
{
  *(void *)this = &unk_1EE34C1D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    int v3 = (std::__shared_weak_count *)*((void *)this + 12);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
}

void Espresso::image_async_data_source::background_load_sample(Espresso::image_async_data_source *this)
{
  unint64_t v2 = *((void *)this + 21);
  uint64_t v3 = *((void *)this + 18);
  if (v2 >= (*((void *)this + 19) - v3) >> 5)
  {
    Espresso::image_async_data_source::reset(this);
    unint64_t v2 = *((void *)this + 21);
    uint64_t v3 = *((void *)this + 18);
  }
  uint64_t v4 = (long long *)(v3 + 32 * v2);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    unint64_t v2 = *((void *)this + 21);
    uint64_t v3 = *((void *)this + 18);
  }
  else
  {
    long long v5 = *v4;
    v12.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  }
  int v6 = *(_DWORD *)(v3 + 32 * v2 + 24);
  *((void *)this + 21) = v2 + 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v11, 1, 1, 1, 1);
  **(float **)(v11 + 24) = (float)v6;
  uint64_t v7 = (void *)MEMORY[0x1E4F1C9B8];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v12;
  }
  else {
    uint64_t v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  [NSString stringWithUTF8String:v8];
  id v9 = [v7 dataWithContentsOfFile:objc_claimAutoreleasedReturnValue()];
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Functionality disabled in production mode");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192A65858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::image_async_data_source::reset(Espresso::image_async_data_source *this)
{
  *((void *)this + 21) = 0;
  if (*((void *)this + 13))
  {
    NSLog(&cfstr_ImageAsyncData_1.isa);
    unint64_t v3 = *((void *)this + 18);
    uint64_t v2 = *((void *)this + 19);
    if ((uint64_t)(v2 - v3) >= 33)
    {
      unint64_t v4 = v2 - 32;
      if (v2 - 32 > v3)
      {
        uint64_t v5 = *((void *)this + 13);
        uint64_t v6 = ((v2 - v3) >> 5) - 1;
        do
        {
          v12[0] = 0;
          v12[1] = v6;
          uint64_t v7 = std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v5, v12);
          if (v7)
          {
            uint64_t v8 = *(void *)(v3 + 16);
            long long v9 = *(_OWORD *)v3;
            unint64_t v10 = v3 + 32 * v7;
            uint64_t v11 = *(void *)(v10 + 16);
            *(_OWORD *)unint64_t v3 = *(_OWORD *)v10;
            *(void *)(v3 + 16) = v11;
            *(_OWORD *)unint64_t v10 = v9;
            *(void *)(v10 + 16) = v8;
            LODWORD(v8) = *(_DWORD *)(v3 + 24);
            *(_DWORD *)(v3 + 24) = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v10 + 24) = v8;
          }
          v3 += 32;
          --v6;
        }
        while (v3 < v4);
      }
    }
  }
}

uint64_t Espresso::image_async_data_source::get_num_samples(Espresso::image_async_data_source *this)
{
  return (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 5;
}

void Espresso::image_async_data_source::~image_async_data_source(Espresso::image_async_data_source *this)
{
  *(void *)this = &unk_1EE35AF30;
  unint64_t v3 = (void **)((char *)this + 144);
  std::vector<std::pair<std::string,int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::async_data_source::~async_data_source(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE35AF30;
  unint64_t v3 = (void **)((char *)this + 144);
  std::vector<std::pair<std::string,int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::async_data_source::~async_data_source(this);
}

void std::vector<std::pair<std::string,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t Espresso::multikey_data_source::get_num_samples(Espresso::multikey_data_source *this)
{
  int v1 = (uint64_t *)*((void *)this + 2);
  if (v1 == *((uint64_t **)this + 3)) {
    return 0;
  }
  uint64_t v2 = *v1;
  unint64_t v3 = (std::__shared_weak_count *)v1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return v4;
}

void sub_192A65BB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::multikey_data_source::~multikey_data_source(Espresso::multikey_data_source *this)
{
  *(void *)this = &unk_1EE3522F8;
  int v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v1);

  JUMPOUT(0x192FF16B0);
}

{
  void **v1;

  *(void *)this = &unk_1EE3522F8;
  int v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(void *)this = &unk_1EE3522F8;
  int v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void Espresso::multikey_data_source::get_data_for_batch(Espresso::multikey_data_source *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  unint64_t v3 = (uint64_t *)*((void *)this + 2);
  for (uint64_t i = (uint64_t *)*((void *)this + 3); v3 != i; v3 += 2)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (std::__shared_weak_count *)v3[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v5 + 8))(&v17);
    uint64_t v7 = v18;
    if (v18)
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v7 + 1);
        p_p = &__p;
        uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (long long **)&p_p);
        uint64_t v10 = v15;
        long long v9 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 6);
        *((void *)v8 + 5) = v10;
        *((void *)v8 + 6) = v9;
        if (v11) {
          nitro::nitro_function::nitro_function(v11);
        }
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v7 = *(long long **)v7;
      }
      while (v7);
      std::string v12 = v18;
    }
    else
    {
      std::string v12 = 0;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v12);
    int v13 = v17;
    uint64_t v17 = 0;
    if (v13) {
      operator delete(v13);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
  }
}

void sub_192A65DF4(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::multikey_data_source::get_data_for_sample(Espresso::multikey_data_source *this@<X0>, uint64_t a2@<X8>)
{
  void (***v5)(void **__return_ptr);
  std::__shared_weak_count *v6;
  long long *v7;
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  long long *v12;
  void *v13;
  std::string __p;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v17;
  long long *v18;
  std::string *p_p;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = *((void *)this + 2);
  for (uint64_t i = *((void *)this + 3); v3 != i; v3 += 16)
  {
    uint64_t v5 = *(void (****)(void **__return_ptr))v3;
    uint64_t v6 = *(std::__shared_weak_count **)(v3 + 8);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (**v5)(&v17);
    uint64_t v7 = v18;
    if (v18)
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v7 + 1);
        p_p = &__p;
        uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (long long **)&p_p);
        uint64_t v10 = v15;
        long long v9 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 6);
        *((void *)v8 + 5) = v10;
        *((void *)v8 + 6) = v9;
        if (v11) {
          nitro::nitro_function::nitro_function(v11);
        }
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v7 = *(long long **)v7;
      }
      while (v7);
      std::string v12 = v18;
    }
    else
    {
      std::string v12 = 0;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v12);
    int v13 = v17;
    uint64_t v17 = 0;
    if (v13) {
      operator delete(v13);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
  }
}

void sub_192A65F84(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::mxnet_imagebinary_reader::background_load_sample(Espresso::mxnet_imagebinary_reader *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "MXNet Image Binary Reader not found at load time");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192A66010(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::mxnet_imagebinary_reader::get_num_samples(Espresso::mxnet_imagebinary_reader *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "MXNet Image Binary Reader not found at load time");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192A6606C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::mxnet_imagebinary_reader::~mxnet_imagebinary_reader(Espresso::mxnet_imagebinary_reader *this)
{
  Espresso::async_data_source::~async_data_source(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::async_data_source::async_data_source(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE34C1D8;
  long long v4 = *a2;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 56) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 40) = v5;
  }
  uint64_t v6 = (std::string *)(a1 + 64);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *(void *)(a1 + 80) = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  return a1;
}

void sub_192A66184(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::async_data_source::ready(Espresso::async_data_source *this)
{
  uint64_t v2 = (char *)operator new(0x80uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EE386158;
  *((void *)v2 + 3) = this;
  *((void *)v2 + 14) = 0;
  v2[120] = 0;
  *((_DWORD *)v2 + 31) = 0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *(_OWORD *)(v2 + 92) = 0u;
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.espresso.async_data_source.queued_samples_lock", 0);
  long long v4 = (void *)*((void *)v2 + 4);
  *((void *)v2 + 4) = v3;

  dispatch_queue_t v5 = dispatch_queue_create("com.apple.espresso.async_data_source.loading_queue", 0);
  uint64_t v6 = (void *)*((void *)v2 + 5);
  *((void *)v2 + 5) = v5;

  dispatch_group_t v7 = dispatch_group_create();
  uint64_t v8 = (void *)*((void *)v2 + 6);
  *((void *)v2 + 6) = v7;

  long long v9 = *((void *)v2 + 4);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN8Espresso17async_data_source6priv_tC2EPS0__block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v2 + 24;
  dispatch_sync(v9, block);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 12);
  *((void *)this + 11) = v2 + 24;
  *((void *)this + 12) = v2;
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void ___ZN8Espresso17async_data_source6priv_tC2EPS0__block_invoke(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::async_data_source::priv_t>::__on_zero_shared(uint64_t a1)
{
  *(unsigned char *)(a1 + 120) = 1;
  dispatch_sync(*(dispatch_queue_t *)(a1 + 40), &__block_literal_global_17651);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 32), &__block_literal_global_114_17652);
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 40), &__block_literal_global_116_17653);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 32), &__block_literal_global_118_17654);
  uint64_t v2 = *(void ***)(a1 + 64);
  dispatch_queue_t v3 = *(void ***)(a1 + 72);
  if (v3 == v2)
  {
    long long v4 = (void *)(a1 + 96);
    dispatch_queue_t v3 = *(void ***)(a1 + 64);
  }
  else
  {
    long long v4 = (void *)(a1 + 96);
    unint64_t v5 = *(void *)(a1 + 88);
    uint64_t v6 = &v2[v5 / 0x55];
    unint64_t v7 = (unint64_t)*v6 + 48 * (v5 % 0x55);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 96) + v5) / 0x55] + 48 * ((*(void *)(a1 + 96) + v5) % 0x55);
    if (v7 != v8)
    {
      do
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v7 + 8);
        v7 += 48;
        if (v7 - (void)*v6 == 4080)
        {
          unint64_t v9 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = *(void ***)(a1 + 64);
      dispatch_queue_t v3 = *(void ***)(a1 + 72);
    }
  }
  *long long v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      dispatch_queue_t v3 = *(void ***)(a1 + 72);
      uint64_t v2 = (void **)(*(void *)(a1 + 64) + 8);
      *(void *)(a1 + 64) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 85;
LABEL_14:
    *(void *)(a1 + 88) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      int v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 72);
    if (v14 != v15) {
      *(void *)(a1 + 72) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  uint64_t v16 = *(void **)(a1 + 56);
  if (v16) {
    operator delete(v16);
  }

  uint64_t v17 = *(void **)(a1 + 32);
}

void std::__shared_ptr_emplace<Espresso::async_data_source::priv_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386158;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::async_data_source::priv_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::simple_blobs_data_source::simple_blobs_data_source(uint64_t a1, void *a2, unsigned int a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE35CFD8;
  *(void *)(a1 + 40) = 0;
  long long v4 = (uint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  unint64_t v5 = (uint64_t **)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = (int **)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  if ((void *)(a1 + 32) == a2) {
    goto LABEL_44;
  }
  unint64_t v7 = (long long *)(a2 + 1);
  unint64_t v8 = (long long *)*a2;
  if ((void *)*a2 == a2 + 1) {
    goto LABEL_44;
  }
  do
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>> const&>((uint64_t)&__p, (uint64_t)v5, v8 + 2);
    unint64_t v10 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
    unint64_t v11 = (uint64_t *)*v4;
    uint64_t v12 = (uint64_t **)v4;
    int v13 = (uint64_t **)v4;
    if (*v4)
    {
      do
      {
        while (1)
        {
          uint64_t v12 = (uint64_t **)v11;
          if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 4, v11 + 4)) {
            break;
          }
          unint64_t v11 = *v12;
          int v13 = v12;
          if (!*v12) {
            goto LABEL_9;
          }
        }
        unint64_t v11 = v12[1];
      }
      while (v11);
      int v13 = v12 + 1;
    }
LABEL_9:
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v5, (uint64_t)v12, v13, v10);
    __p.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
    uint64_t v14 = (long long *)*((void *)v8 + 1);
    if (v14)
    {
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = *(long long **)v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        uint64_t v15 = (long long *)*((void *)v8 + 2);
        BOOL v16 = *(void *)v15 == (void)v8;
        unint64_t v8 = v15;
      }
      while (!v16);
    }
    unint64_t v8 = v15;
  }
  while (v15 != v7);
  if (!*(void *)(a1 + 48))
  {
LABEL_44:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Empty blobs");
    goto LABEL_46;
  }
  uint64_t v17 = *v5;
  uint64_t v18 = (*v5)[7];
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid parameter");
LABEL_46:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)(a1 + 24) = *(int *)(v18 + 20);
  if (v17 != v4)
  {
    while (1)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, (long long *)v17 + 2);
      if (!v33) {
        break;
      }
      if (*(void *)(a1 + 24) != *(_DWORD *)(v33 + 20))
      {
        uint64_t v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v30, "Inconsistent dimensions");
LABEL_43:
        __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unsigned int v19 = (uint64_t *)v17[1];
      if (v19)
      {
        do
        {
          unsigned int v20 = v19;
          unsigned int v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unsigned int v20 = (uint64_t *)v17[2];
          BOOL v16 = *v20 == (void)v17;
          uint64_t v17 = v20;
        }
        while (!v16);
      }
      uint64_t v17 = v20;
      if (v20 == v4) {
        goto LABEL_30;
      }
    }
    uint64_t v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Invalid parameter");
    goto LABEL_43;
  }
LABEL_30:
  if ((a3 & 0x80000000) == 0)
  {
    unsigned int v21 = (char *)operator new(0x20uLL);
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = 0;
    *(void *)unsigned int v21 = &unk_1EE38D510;
    unsigned int v22 = a3 - 0x7FFFFFFF;
    if (a3 < 0x7FFFFFFF) {
      unsigned int v22 = a3;
    }
    if (v22 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v22;
    }
    *((_DWORD *)v21 + 6) = v23;
    uint64_t v24 = (int *)(v21 + 24);
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 64);
    *(void *)(a1 + 56) = v21 + 24;
    *(void *)(a1 + 64) = v21;
    if (v25)
    {
      nitro::nitro_function::nitro_function(v25);
      uint64_t v24 = *v6;
    }
    int *v24 = v23;
    uint64_t v26 = *(void *)(a1 + 24);
    BOOL v27 = operator new(0x20uLL);
    v27[1] = 0;
    v27[2] = 0;
    *BOOL v27 = &unk_1EE38D4D8;
    *((_DWORD *)v27 + 6) = 0;
    *((_DWORD *)v27 + 7) = v26 - 1;
    unint64_t v28 = *(std::__shared_weak_count **)(a1 + 80);
    *(void *)(a1 + 72) = v27 + 3;
    *(void *)(a1 + 80) = v27;
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
  }
  return a1;
}

void sub_192A668C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v11);
  uint64_t v14 = *(std::__shared_weak_count **)(v10 + 80);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v10 + 64);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::uniform_int_distribution<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D4D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<std::uniform_int_distribution<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D4D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::f4_blob_async_data_source::f4_blob_async_data_source(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  long long v85 = *(_OWORD *)a2;
  int v86 = *(_DWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v87 = *(std::string *)(a2 + 24);
  }
  if (*(char *)(a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else {
    std::string __p = *(std::string *)(a2 + 48);
  }
  Espresso::async_data_source::async_data_source(a1, &v85);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EE35D170;
  *(void *)(a1 + 104) = 0;
  uint64_t v71 = (std::string *)(a1 + 104);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  unint64_t v8 = (void *)(a1 + 152);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 200) = a4;
  unint64_t v9 = operator new(0x20uLL);
  v9[1] = 0;
  v9[2] = 0;
  *unint64_t v9 = &unk_1EE38D510;
  unsigned int v10 = a4 + ((a4 / 0x7FFFFFFF) | ((a4 / 0x7FFFFFFF) << 31));
  if (v10 <= 1) {
    unsigned int v10 = 1;
  }
  *((_DWORD *)v9 + 6) = v10;
  *(void *)(a1 + 208) = v9 + 3;
  *(void *)(a1 + 216) = v9;
  unint64_t v11 = a3;
  if (*((char *)a3 + 23) < 0) {
    unint64_t v11 = (uint64_t *)*a3;
  }
  std::string::size_type v72 = (void *)(a1 + 248);
  uint64_t v12 = [NSString stringWithUTF8String:v11];
  id v13 = [v12 stringByDeletingLastPathComponent];
  MEMORY[0x192FF0F50](v71, [v13 UTF8String]);

  std::string::append(v71, "/");
  uint64_t v14 = a3;
  if (*((char *)a3 + 23) < 0) {
    uint64_t v14 = (uint64_t *)*a3;
  }
  uint64_t v15 = (void *)MEMORY[0x1E4F1C9B8];
  BOOL v16 = [NSString stringWithUTF8String:v14];
  uint64_t v64 = [v15 dataWithContentsOfFile:v16];

  if (!v64)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)&__v);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v84 = 0;
  uint64_t v17 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v64 options:0 error:&v84];
  id v63 = v84;
  uint64_t v68 = v17;
  if (!v17)
  {
    long long v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__ptr, "Can't load JSON ");
    uint64_t v60 = [v63 localizedDescription];
    std::string::size_type v61 = std::string::append(&__ptr, v60);
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    __v.__end_ = (std::__split_buffer<std::string>::pointer)v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__v.__first_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v59, (const std::string *)&__v);
    __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)(a1 + 256) = *(void *)(a1 + 248);
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  uint64_t v18 = [v17 allKeys];
  uint64_t v66 = [v18 countByEnumeratingWithState:&v80 objects:v91 count:16];
  if (v66)
  {
    uint64_t v65 = *(void *)v81;
    uint64_t v67 = v18;
    do
    {
      for (uint64_t i = 0; i != v66; ++i)
      {
        if (*(void *)v81 != v65) {
          objc_enumerationMutation(v18);
        }
        unsigned int v19 = *(void **)(*((void *)&v80 + 1) + 8 * i);
        void *v8 = 0;
        id v73 = v19;
        unsigned int v20 = objc_msgSend(v17, "objectForKeyedSubscript:");
        unsigned int v21 = [v20 objectForKeyedSubscript:@"chunks"];
        unint64_t v22 = [v21 count];

        uint64_t v24 = *(void *)(a1 + 248);
        uint64_t v23 = *(void *)(a1 + 256);
        if (v23 == v24)
        {
          std::vector<unsigned long>::resize(v72, v22);
          uint64_t v24 = *(void *)(a1 + 248);
          uint64_t v23 = *(void *)(a1 + 256);
        }
        if (v22 != (v23 - v24) >> 3)
        {
          uint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v57, "chunk size mismatch");
          __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        uint64_t v25 = [v68 objectForKeyedSubscript:v73];
        obuint64_t j = [v25 objectForKeyedSubscript:@"chunks"];

        uint64_t v26 = [obj countByEnumeratingWithState:&v76 objects:v90 count:16];
        if (v26)
        {
          uint64_t v27 = 0;
          uint64_t v28 = *(void *)v77;
          do
          {
            for (uint64_t j = 0; j != v26; ++j)
            {
              if (*(void *)v77 != v28) {
                objc_enumerationMutation(obj);
              }
              uint64_t v30 = *(void **)(*((void *)&v76 + 1) + 8 * j);
              std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)[v73 UTF8String]);
              __v.__first_ = &__ptr;
              unint64_t v31 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 128), (const void **)&__ptr.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__v);
              id v32 = v30;
              std::string::basic_string[abi:ne180100]<0>(v74, (char *)[v32 UTF8String]);
              uint64_t v33 = v31[9];
              uint64_t v34 = v31[8];
              if (v34 >= v33)
              {
                uint64_t v36 = v31[7];
                unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (v34 - v36);
                unint64_t v38 = v37 + 1;
                if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (v33 - v36);
                if (2 * v39 > v38) {
                  unint64_t v38 = 2 * v39;
                }
                if (v39 >= 0x555555555555555) {
                  unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v40 = v38;
                }
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v31 + 9);
                if (v40) {
                  unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v40);
                }
                else {
                  uint64_t v41 = 0;
                }
                uint64_t v42 = (std::string *)(v40 + 24 * v37);
                __v.__first_ = (std::__split_buffer<std::string>::pointer)v40;
                __v.__begin_ = v42;
                __v.__end_cap_.__value_ = (std::string *)(v40 + 24 * v41);
                long long v43 = *(_OWORD *)v74;
                v42->__r_.__value_.__r.__words[2] = v75;
                *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
                v74[1] = 0;
                std::string::size_type v75 = 0;
                v74[0] = 0;
                __v.__end_ = v42 + 1;
                std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v31 + 7), &__v);
                uint64_t v44 = v31[8];
                std::__split_buffer<std::string>::~__split_buffer(&__v);
                int v45 = SHIBYTE(v75);
                v31[8] = v44;
                if (v45 < 0) {
                  operator delete(v74[0]);
                }
              }
              else
              {
                long long v35 = *(_OWORD *)v74;
                v34[2] = v75;
                *(_OWORD *)uint64_t v34 = v35;
                v31[8] = v34 + 3;
              }
              if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__ptr.__r_.__value_.__l.__data_);
              }
              *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = 0uLL;
              uint64_t v46 = (const char *)[v32 UTF8String];
              uint64_t v47 = v46;
              if (*(char *)(a1 + 127) >= 0) {
                size_t v48 = *(unsigned __int8 *)(a1 + 127);
              }
              else {
                size_t v48 = *(void *)(a1 + 112);
              }
              size_t v49 = strlen(v46);
              std::string::basic_string[abi:ne180100]((uint64_t)&__v, v48 + v49);
              if (SHIBYTE(__v.__end_) >= 0) {
                p_v = (char *)&__v;
              }
              else {
                p_v = (char *)__v.__first_;
              }
              if (v48)
              {
                if (*(char *)(a1 + 127) >= 0) {
                  std::string::size_type v51 = (const void *)(a1 + 104);
                }
                else {
                  std::string::size_type v51 = *(const void **)(a1 + 104);
                }
                memmove(p_v, v51, v48);
              }
              unint64_t v52 = &p_v[v48];
              if (v49) {
                memmove(v52, v47, v49);
              }
              v52[v49] = 0;
              if (SHIBYTE(__v.__end_) >= 0) {
                first = (const char *)&__v;
              }
              else {
                first = (const char *)__v.__first_;
              }
              uint64_t v54 = fopen(first, "rb");
              if (!v54)
              {
                unint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v56, "Null file pointer");
                __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              fread(&__ptr, 4uLL, 4uLL, v54);
              fclose(v54);
              if (SHIBYTE(__v.__end_) < 0) {
                operator delete(__v.__first_);
              }
              *v8 += SHIDWORD(__ptr.__r_.__value_.__r.__words[1]);
              *(void *)(*v72 + 8 * v27) = v27;
              ++v27;
            }
            uint64_t v26 = [obj countByEnumeratingWithState:&v76 objects:v90 count:16];
          }
          while (v26);
        }

        uint64_t v17 = v68;
        uint64_t v18 = v67;
      }
      uint64_t v66 = [v67 countByEnumeratingWithState:&v80 objects:v91 count:16];
    }
    while (v66);
  }

  if ((*(_DWORD *)(a1 + 200) & 0x80000000) == 0)
  {
    NSLog(&cfstr_ShuffleChunksD.isa, *(unsigned int *)(a1 + 200));
    std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(*(void *)(a1 + 248), *(void *)(a1 + 256), *(void *)(a1 + 208));
  }
  *(void *)(a1 + 160) = 0;
  Espresso::f4_blob_async_data_source::load_chunk((Espresso::f4_blob_async_data_source *)a1, 0);
  Espresso::async_data_source::ready((Espresso::async_data_source *)a1);

  return a1;
}

void sub_192A67284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, void **a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    operator delete(__p);
  }

  if (*(char *)(v62 - 105) < 0)
  {
    operator delete(*(void **)(v62 - 128));
    if ((v59 & 1) == 0)
    {
LABEL_8:

      uint64_t v64 = *a20;
      if (*a20)
      {
        *(void *)(v60 + 256) = v64;
        operator delete(v64);
      }
      uint64_t v65 = *(void **)(v60 + 224);
      if (v65)
      {
        *(void *)(v60 + 232) = v65;
        operator delete(v65);
      }
      uint64_t v66 = *(std::__shared_weak_count **)(v60 + 216);
      if (v66) {
        nitro::nitro_function::nitro_function(v66);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(v60 + 184));
      std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a19, *(char **)(v60 + 136));
      if (*(char *)(v60 + 127) < 0) {
        operator delete(*a18);
      }
      Espresso::async_data_source::~async_data_source((Espresso::async_data_source *)v60);
      _Unwind_Resume(a1);
    }
  }
  else if (!v59)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v61);
  goto LABEL_8;
}

uint64_t Espresso::image_async_data_source::image_async_data_source(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  long long v100 = *(_OWORD *)a2;
  int v101 = *(_DWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v102 = *(std::string *)(a2 + 24);
  }
  if (*(char *)(a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else {
    std::string __p = *(std::string *)(a2 + 48);
  }
  Espresso::async_data_source::async_data_source(a1, &v100);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EE35AF30;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v74 = (std::vector<std::string> *)(a1 + 120);
  long long v81 = (void ***)(a1 + 144);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  long long v82 = [MEMORY[0x1E4F28CB8] defaultManager];
  unint64_t v7 = a3;
  if (*((char *)a3 + 23) < 0) {
    unint64_t v7 = (uint64_t *)*a3;
  }
  [NSString stringWithUTF8String:v7];
  uint64_t v70 = (int **)(a1 + 104);
  long long v79 = v99 = 0;
  uint64_t v71 = objc_msgSend(v82, "contentsOfDirectoryAtPath:error:");
  id v8 = 0;
  if (*((char *)a3 + 23) < 0) {
    a3 = (uint64_t *)*a3;
  }
  NSLog(&cfstr_ImageAsyncData.isa, a3, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 16));
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  obuint64_t j = v71;
  uint64_t v80 = [obj countByEnumeratingWithState:&v95 objects:v106 count:16];
  if (v80)
  {
    id v73 = (std::allocator<std::string> *)(a1 + 136);
    uint64_t v78 = *(void *)v96;
    long long v83 = (void *)a1;
    do
    {
      for (uint64_t i = 0; i != v80; ++i)
      {
        if (*(void *)v96 != v78) {
          objc_enumerationMutation(obj);
        }
        unint64_t v9 = *(void **)(*((void *)&v95 + 1) + 8 * i);
        char v94 = 0;
        unsigned int v10 = [v79 stringByAppendingPathComponent:v9];
        int v11 = [v82 fileExistsAtPath:v10 isDirectory:&v94];
        if (([v9 hasPrefix:@"__"] & 1) == 0)
        {
          int v12 = v94 ? v11 : 0;
          if (v12 == 1)
          {
            [v9 lastPathComponent];
            long long v85 = v10;
            id v13 = objc_claimAutoreleasedReturnValue();
            std::string::basic_string[abi:ne180100]<0>(v92, (char *)[v13 UTF8String]);
            unint64_t v14 = *(void *)(a1 + 128);
            unint64_t v15 = *(void *)(a1 + 136);
            if (v14 >= v15)
            {
              unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (unint64_t)v74->__begin_) >> 3);
              unint64_t v18 = v17 + 1;
              if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (unint64_t)v74->__begin_) >> 3);
              if (2 * v19 > v18) {
                unint64_t v18 = 2 * v19;
              }
              if (v19 >= 0x555555555555555) {
                unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v20 = v18;
              }
              __v.__end_cap_.__value_ = v73;
              if (v20) {
                unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v20);
              }
              else {
                uint64_t v21 = 0;
              }
              unint64_t v22 = (std::string *)(v20 + 24 * v17);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v20;
              __v.__begin_ = v22;
              __v.__end_cap_.__value_ = (std::string *)(v20 + 24 * v21);
              long long v23 = *(_OWORD *)v92;
              v22->__r_.__value_.__r.__words[2] = v93;
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
              v92[1] = 0;
              std::string::size_type v93 = 0;
              v92[0] = 0;
              __v.__end_ = v22 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(v74, &__v);
              uint64_t v24 = v83[16];
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              int v25 = SHIBYTE(v93);
              v83[16] = v24;
              a1 = (uint64_t)v83;
              if (v25 < 0) {
                operator delete(v92[0]);
              }
            }
            else
            {
              long long v16 = *(_OWORD *)v92;
              *(void *)(v14 + 16) = v93;
              *(_OWORD *)unint64_t v14 = v16;
              v92[1] = 0;
              std::string::size_type v93 = 0;
              v92[0] = 0;
              *(void *)(a1 + 128) = v14 + 24;
            }

            uint64_t v26 = *(void *)(a1 + 128);
            uint64_t v27 = (void *)(v26 - 24);
            if (*(char *)(v26 - 1) < 0) {
              uint64_t v27 = (void *)*v27;
            }
            NSLog(&cfstr_CategoryS.isa, v27);
            id v91 = v8;
            uint64_t v28 = [v82 contentsOfDirectoryAtPath:v10 error:&v91];
            id v75 = v91;

            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            id v86 = v28;
            uint64_t v29 = [v86 countByEnumeratingWithState:&v87 objects:v105 count:16];
            if (v29)
            {
              int v77 = 0;
              uint64_t v30 = *(void *)v88;
LABEL_42:
              uint64_t v31 = 0;
              if (v77 <= 3000) {
                int v32 = 3000;
              }
              else {
                int v32 = v77;
              }
              uint64_t v33 = (v32 - v77);
              v77 += v29;
              while (1)
              {
                if (*(void *)v88 != v30) {
                  objc_enumerationMutation(v86);
                }
                uint64_t v34 = *(void **)(*((void *)&v87 + 1) + 8 * v31);
                long long v35 = [v34 pathExtension];
                uint64_t v36 = [v35 lowercaseString];
                int v37 = [v36 isEqualToString:@"jpeg"];

                unint64_t v38 = [v34 pathExtension];
                unint64_t v39 = [v38 lowercaseString];
                int v40 = [v39 isEqualToString:@"jpg"];

                if (v37 | v40)
                {
                  id v41 = [v85 stringByAppendingPathComponent:v34];
                  uint64_t v42 = (char *)[v41 UTF8String];
                  long long v43 = (void *)a1;
                  uint64_t v44 = *(void *)(a1 + 128);
                  uint64_t v45 = v43[15];
                  std::string::basic_string[abi:ne180100]<0>(&__v, v42);
                  int v46 = -1 - 1431655765 * ((unint64_t)(v44 - v45) >> 3);
                  LODWORD(__v.__end_cap_.__value_) = v46;
                  size_t v48 = (void **)v43[19];
                  unint64_t v47 = v43[20];
                  a1 = (uint64_t)v43;
                  if ((unint64_t)v48 >= v47)
                  {
                    uint64_t v50 = *v81;
                    uint64_t v51 = ((char *)v48 - (char *)*v81) >> 5;
                    unint64_t v52 = v51 + 1;
                    if ((unint64_t)(v51 + 1) >> 59) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v53 = v47 - (void)v50;
                    if (v53 >> 4 > v52) {
                      unint64_t v52 = v53 >> 4;
                    }
                    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v54 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v54 = v52;
                    }
                    if (v54 >> 59) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    uint64_t v55 = (char *)operator new(32 * v54);
                    unint64_t v56 = &v55[32 * v51];
                    *(_OWORD *)unint64_t v56 = *(_OWORD *)&__v.__first_;
                    *((void *)v56 + 2) = __v.__end_;
                    uint64_t v57 = &v55[32 * v54];
                    memset(&__v, 0, 24);
                    *((_DWORD *)v56 + 6) = v46;
                    uint64_t v58 = v56 + 32;
                    if (v48 == v50)
                    {
                      a1 = (uint64_t)v83;
                      v83[18] = v56;
                      v83[19] = v58;
                      v83[20] = v57;
                    }
                    else
                    {
                      a1 = (uint64_t)v83;
                      do
                      {
                        long long v59 = *((_OWORD *)v48 - 2);
                        *((void *)v56 - 2) = *(v48 - 2);
                        *((_OWORD *)v56 - 2) = v59;
                        *(v48 - 3) = 0;
                        *(v48 - 2) = 0;
                        *(v48 - 4) = 0;
                        *((_DWORD *)v56 - 2) = *((_DWORD *)v48 - 2);
                        v56 -= 32;
                        v48 -= 4;
                      }
                      while (v48 != v50);
                      size_t v48 = (void **)v83[18];
                      uint64_t v60 = (void **)v83[19];
                      v83[18] = v56;
                      v83[19] = v58;
                      v83[20] = v57;
                      while (v60 != v48)
                      {
                        if (*((char *)v60 - 9) < 0) {
                          operator delete(*(v60 - 4));
                        }
                        v60 -= 4;
                      }
                    }
                    if (v48) {
                      operator delete(v48);
                    }
                    int end_high = SHIBYTE(__v.__end_);
                    *(void *)(a1 + 152) = v58;
                    if (end_high < 0) {
                      operator delete(__v.__first_);
                    }
                  }
                  else
                  {
                    long long v49 = *(_OWORD *)&__v.__first_;
                    v48[2] = __v.__end_;
                    *(_OWORD *)size_t v48 = v49;
                    memset(&__v, 0, 24);
                    *((_DWORD *)v48 + 6) = __v.__end_cap_.__value_;
                    v43[19] = v48 + 4;
                  }
                }
                if (v31 == v33) {
                  break;
                }
                if (++v31 == v29)
                {
                  uint64_t v29 = [v86 countByEnumeratingWithState:&v87 objects:v105 count:16];
                  if (v29) {
                    goto LABEL_42;
                  }
                  break;
                }
              }
            }

            id v8 = v75;
            unsigned int v10 = v85;
          }
        }
      }
      uint64_t v80 = [obj countByEnumeratingWithState:&v95 objects:v106 count:16];
    }
    while (v80);
  }

  if (a4 >= 1)
  {
    uint64_t v62 = (char *)operator new(0x20uLL);
    *((void *)v62 + 1) = 0;
    *((void *)v62 + 2) = 0;
    *(void *)uint64_t v62 = &unk_1EE38D510;
    unsigned int v63 = a4 - 0x7FFFFFFF;
    if (a4 < 0x7FFFFFFF) {
      unsigned int v63 = a4;
    }
    if (v63 <= 1) {
      int v64 = 1;
    }
    else {
      int v64 = v63;
    }
    *((_DWORD *)v62 + 6) = v64;
    uint64_t v65 = (int *)(v62 + 24);
    uint64_t v66 = *(std::__shared_weak_count **)(a1 + 112);
    *(void *)(a1 + 104) = v62 + 24;
    *(void *)(a1 + 112) = v62;
    if (v66)
    {
      nitro::nitro_function::nitro_function(v66);
      uint64_t v65 = *v70;
    }
    *uint64_t v65 = v64;
  }
  uint64_t v67 = *(uint64_t **)(a1 + 144);
  uint64_t v68 = (uint64_t)(*(void *)(a1 + 152) - (void)v67) >> 5;
  if (*((char *)v67 + 23) < 0) {
    uint64_t v67 = (uint64_t *)*v67;
  }
  NSLog(&cfstr_ImageAsyncData_0.isa, v68, v67);
  Espresso::image_async_data_source::reset((Espresso::image_async_data_source *)a1);
  Espresso::async_data_source::ready((Espresso::async_data_source *)a1);

  return a1;
}

void sub_192A67D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a63 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *Espresso::multikey_data_source::multikey_data_source(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  dispatch_queue_t v3 = a3;
  unint64_t v5 = (void *)a1;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE3522F8;
  *(void *)(a1 + 16) = 0;
  uint64_t v78 = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (*((char *)a3 + 23) < 0) {
    a3 = (uint64_t *)*a3;
  }
  uint64_t v6 = [NSString stringWithUTF8String:a3];
  id v7 = [v6 stringByDeletingLastPathComponent];
  std::string::basic_string[abi:ne180100]<0>(&v87, (char *)[v7 UTF8String]);

  std::string::append(&v87, "/");
  id v8 = v3;
  if (*((char *)v3 + 23) < 0) {
    id v8 = (uint64_t *)*v3;
  }
  NSLog(&cfstr_MultikeyDataSo.isa, v8);
  unint64_t v9 = v3;
  if (*((char *)v3 + 23) < 0) {
    unint64_t v9 = (uint64_t *)*v3;
  }
  unsigned int v10 = (void *)MEMORY[0x1E4F1C9B8];
  int v11 = [NSString stringWithUTF8String:v9];
  id v73 = [v10 dataWithContentsOfFile:v11];

  if (!v73)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v89);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v86 = 0;
  int v12 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v73 options:0 error:&v86];
  id v72 = v86;
  if (!v12)
  {
    uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Can't load JSON ");
    uint64_t v69 = [v72 localizedDescription];
    uint64_t v70 = std::string::append(&__p, v69);
    long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v68, &v89);
    __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id v13 = v12;
  uint64_t v14 = [v13 countByEnumeratingWithState:&v82 objects:v92 count:16];
  if (v14)
  {
    uint64_t v77 = *(void *)v83;
    uint64_t v74 = (_OWORD *)(a2 + 48);
    id v75 = (_OWORD *)(a2 + 24);
    long long v76 = v5;
    do
    {
      uint64_t v79 = v14;
      for (uint64_t i = 0; i != v79; ++i)
      {
        if (*(void *)v83 != v77) {
          objc_enumerationMutation(v13);
        }
        id v16 = *(id *)(*((void *)&v82 + 1) + 8 * i);
        unint64_t v17 = [v13 objectForKeyedSubscript:v16];
        unint64_t v18 = [v17 objectForKeyedSubscript:@"shuffle_seed"];
        BOOL v19 = v18 == 0;

        if (v19)
        {
          unsigned int v80 = -1;
        }
        else
        {
          unint64_t v20 = [v13 objectForKeyedSubscript:v16];
          uint64_t v21 = [v20 objectForKeyedSubscript:@"shuffle_seed"];
          unsigned int v80 = [v21 intValue];
        }
        unint64_t v22 = [v13 objectForKeyedSubscript:v16];
        long long v23 = [v22 objectForKeyedSubscript:@"path"];

        uint64_t v24 = [v13 objectForKeyedSubscript:v16];
        int v25 = [v24 objectForKeyedSubscript:@"type"];
        NSLog(&cfstr_Type_5.isa, v25, v13);

        uint64_t v26 = [v13 objectForKeyedSubscript:v16];
        uint64_t v27 = [v26 objectForKeyedSubscript:@"width"];
        *(_DWORD *)(a2 + 8) = [v27 intValue];

        uint64_t v28 = [v13 objectForKeyedSubscript:v16];
        uint64_t v29 = [v28 objectForKeyedSubscript:@"height"];
        *(_DWORD *)(a2 + 12) = [v29 intValue];

        uint64_t v30 = [v13 objectForKeyedSubscript:v16];
        uint64_t v31 = [v30 objectForKeyedSubscript:@"channels"];
        *(_DWORD *)(a2 + 16) = [v31 intValue];

        int v32 = (void *)v5[2];
        uint64_t v33 = (void *)v5[3];
        if (v33 == v32)
        {
          if (v5[4] == (void)v33)
          {
            uint64_t v36 = operator new(0x10uLL);
            *uint64_t v36 = 0;
            v36[1] = 0;
            v5[2] = v36;
            v5[3] = v36 + 2;
            v5[4] = v36 + 2;
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *uint64_t v33 = 0;
            v33[1] = 0;
            v5[3] = v33 + 2;
          }
        }
        else if ((unint64_t)((char *)v33 - (char *)v32) >= 0x11)
        {
          uint64_t v34 = v32 + 2;
          while (v33 != v34)
          {
            long long v35 = (std::__shared_weak_count *)*(v33 - 1);
            if (v35) {
              nitro::nitro_function::nitro_function(v35);
            }
            v33 -= 2;
          }
          v5[3] = v34;
        }
        int v37 = [v13 objectForKeyedSubscript:v16];
        unint64_t v38 = [v37 objectForKeyedSubscript:@"type"];
        int v39 = [v38 isEqualToString:@"f4"];

        if (v39)
        {
          int v40 = v23;
          id v41 = (const char *)[v23 UTF8String];
          uint64_t v42 = v41;
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v87.__r_.__value_.__l.__size_;
          }
          size_t v44 = strlen(v41);
          std::string::basic_string[abi:ne180100]((uint64_t)&v81, size + v44);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v45 = &v81;
          }
          else {
            uint64_t v45 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v46 = &v87;
            }
            else {
              int v46 = (std::string *)v87.__r_.__value_.__r.__words[0];
            }
            memmove(v45, v46, size);
          }
          unint64_t v47 = (char *)v45 + size;
          if (v44) {
            memmove(v47, v42, v44);
          }
          v47[v44] = 0;
          size_t v48 = operator new(0x128uLL);
          v48[1] = 0;
          v48[2] = 0;
          void *v48 = &unk_1EE388298;
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          LODWORD(v89.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 16);
          if (*(char *)(a2 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
          }
          else
          {
            *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *v75;
            v90.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
          }
          if (*(char *)(a2 + 71) < 0)
          {
            std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
          }
          else
          {
            *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *v74;
            v91.__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
          }
          long long v59 = v48 + 3;
          std::string __p = v81;
          memset(&v81, 0, sizeof(v81));
          Espresso::f4_blob_async_data_source::f4_blob_async_data_source((uint64_t)(v48 + 3), (uint64_t)&v89, (uint64_t *)&__p, v80);
        }
        else
        {
          long long v49 = [v13 objectForKeyedSubscript:v16];
          uint64_t v50 = [v49 objectForKeyedSubscript:@"type"];
          int v51 = [v50 isEqualToString:@"img"];

          if (!v51)
          {
            unsigned int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&__p, "type not supported ");
            [v13 objectForKeyedSubscript:v16];
            int v64 = [(id)objc_claimAutoreleasedReturnValue() objectForKeyedSubscript:@"type"];
            uint64_t v65 = std::string::append(&__p, v64);
            long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
            v89.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v66;
            v65->__r_.__value_.__l.__size_ = 0;
            v65->__r_.__value_.__r.__words[2] = 0;
            v65->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v63, &v89);
            __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int v40 = v23;
          unint64_t v52 = (const char *)[v23 UTF8String];
          uint64_t v53 = v52;
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v54 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v54 = v87.__r_.__value_.__l.__size_;
          }
          size_t v55 = strlen(v52);
          std::string::basic_string[abi:ne180100]((uint64_t)&v81, v54 + v55);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v56 = &v81;
          }
          else {
            unint64_t v56 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          if (v54)
          {
            if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v57 = &v87;
            }
            else {
              uint64_t v57 = (std::string *)v87.__r_.__value_.__r.__words[0];
            }
            memmove(v56, v57, v54);
          }
          uint64_t v58 = (char *)v56 + v54;
          if (v55) {
            memmove(v58, v53, v55);
          }
          v58[v55] = 0;
          size_t v48 = operator new(0xC8uLL);
          v48[1] = 0;
          v48[2] = 0;
          void *v48 = &unk_1EE387B98;
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          LODWORD(v89.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 16);
          if (*(char *)(a2 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
          }
          else
          {
            *(_OWORD *)&v90.__r_.__value_.__l.__data_ = *v75;
            v90.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
          }
          if (*(char *)(a2 + 71) < 0)
          {
            std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
          }
          else
          {
            *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *v74;
            v91.__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
          }
          long long v59 = v48 + 3;
          std::string __p = v81;
          memset(&v81, 0, sizeof(v81));
          Espresso::image_async_data_source::image_async_data_source((uint64_t)(v48 + 3), (uint64_t)&v89, (uint64_t *)&__p, v80);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        *(void *)&long long v60 = v59;
        *((void *)&v60 + 1) = v48;
        std::string::size_type v61 = *(std::__shared_weak_count **)(*(void *)v78 + 8);
        *(_OWORD *)*(void *)uint64_t v78 = v60;
        if (v61) {
          nitro::nitro_function::nitro_function(v61);
        }
        unint64_t v5 = v76;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v14 = [v13 countByEnumeratingWithState:&v82 objects:v92 count:16];
    }
    while (v14);
  }

  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_192A688F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a57 < 0) {
    operator delete(__p);
  }

  if (a50 < 0)
  {
    operator delete(a45);
    if ((v65 & 1) == 0)
    {
LABEL_8:

      if (a44 < 0) {
        operator delete(a39);
      }
      a39 = a21;
      std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
      _Unwind_Resume(a1);
    }
  }
  else if (!v65)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v64);
  goto LABEL_8;
}

uint64_t std::__shared_ptr_emplace<Espresso::image_async_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<Espresso::image_async_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387B98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::image_async_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::f4_blob_async_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<Espresso::f4_blob_async_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388298;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::f4_blob_async_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::mxnet_imagebinary_reader::mxnet_imagebinary_reader(void *a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  int v6 = *(_DWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v7 = *(std::string *)(a2 + 24);
  }
  if (*(char *)(a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else {
    std::string __p = *(std::string *)(a2 + 48);
  }
  Espresso::async_data_source::async_data_source((uint64_t)a1, &v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_1EE35CCC0;
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "MXNet Image Binary Reader not found at load time");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  Espresso::mxnet_imagebinary_reader::mxnet_imagebinary_reader(a1, a2);
}

void sub_192A68E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  Espresso::async_data_source::~async_data_source(v23);
  _Unwind_Resume(a1);
}

void Espresso::load_data_source(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (*(char *)(a1 + 23) >= 0) {
    int v6 = (const std::string::value_type *)a1;
  }
  else {
    int v6 = *(const std::string::value_type **)a1;
  }
  std::string v7 = [NSString stringWithUTF8String:v6];
  id v8 = [v7 pathExtension];
  std::string::basic_string[abi:ne180100]<0>(&v40, (char *)[v8 UTF8String]);

  memset(&__str, 0, sizeof(__str));
  long long v35 = 0x100uLL;
  int v36 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v37, "data");
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
  uint64_t v9 = *a2 + 56;
  v45.__r_.__value_.__r.__words[0] = 0;
  unsigned int v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, 0, &v45);
  std::string::operator=(&__str, (const std::string *)v10[3]);
  uint64_t v11 = *a2 + 136;
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  int v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)&__str, (long long **)&v45);
  uint64_t v13 = *((void *)v12 + 5);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)&v35 + 1) = *(void *)(v13 + 8);
  int v36 = *(_DWORD *)(v13 + 16);
  std::string::operator=(&v37, &__str);
  char v34 = 0;
  unint64_t v15 = [MEMORY[0x1E4F28CB8] defaultManager];
  [v15 fileExistsAtPath:v7 isDirectory:&v34];

  if (!v34)
  {
    if (v42 < 0)
    {
      if (v41 == 2)
      {
        int v17 = *(unsigned __int16 *)v40;
LABEL_38:
        if (v17 == 13414)
        {
          *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = 0uLL;
          v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44.__r_.__value_.__l.__size_;
          if (*(char *)(a1 + 23) >= 0) {
            BOOL v19 = (const char *)a1;
          }
          else {
            BOOL v19 = *(const char **)a1;
          }
          unint64_t v20 = fopen(v19, "rb");
          Espresso::debug::read_blob_f4((Espresso::debug *)&v45, v20);
          fclose(v20);
          long long v43 = &v37;
          uint64_t v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v44, &v37, (long long **)&v43);
          unint64_t v22 = (std::__shared_weak_count *)v21[8];
          *(_OWORD *)(v21 + 7) = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
          if (v22) {
            nitro::nitro_function::nitro_function(v22);
          }
          long long v23 = operator new(0x70uLL);
          v23[1] = 0;
          v23[2] = 0;
          *long long v23 = &unk_1EE3881F0;
          std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)&v45, &v44);
          Espresso::simple_blobs_data_source::simple_blobs_data_source((uint64_t)(v23 + 3), &v45, 0xFFFFFFFF);
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy((void *)v45.__r_.__value_.__l.__size_);
          *(void *)&long long v24 = v23 + 3;
          *((void *)&v24 + 1) = v23;
          *(_OWORD *)a3 = v24;
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy((void *)v44.__r_.__value_.__l.__size_);
          if (v14) {
            goto LABEL_26;
          }
          goto LABEL_27;
        }
LABEL_65:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(exception, &v45);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v41 != 3) {
        goto LABEL_65;
      }
      uint64_t v26 = (unsigned __int16 *)v40;
      if (*(_WORD *)v40 != 28778 || *((unsigned char *)v40 + 2) != 103)
      {
LABEL_59:
        int v29 = *v26;
        int v30 = *((unsigned __int8 *)v26 + 2);
        if (v29 == 25970 && v30 == 99)
        {
          int v32 = operator new(0x80uLL);
          v32[1] = 0;
          BNNSVectorDescriptor v32[2] = 0;
          void *v32 = &unk_1EE387FF8;
          std::allocator<Espresso::mxnet_imagebinary_reader>::construct[abi:ne180100]<Espresso::mxnet_imagebinary_reader,Espresso::async_data_source::options &,std::string const&,int>(v32 + 3, &v35, a1);
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (v42 == 2)
      {
        int v17 = (unsigned __int16)v40;
        goto LABEL_38;
      }
      if (v42 != 3) {
        goto LABEL_65;
      }
      if ((unsigned __int16)v40 != 28778 || BYTE2(v40) != 103)
      {
        uint64_t v26 = (unsigned __int16 *)&v40;
        goto LABEL_59;
      }
    }
    uint64_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "load_data_source: Loading single image not implemented");
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v16 = operator new(0xC8uLL);
  v16[1] = 0;
  v16[2] = 0;
  void *v16 = &unk_1EE387B98;
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v35;
  LODWORD(v45.__r_.__value_.__r.__words[2]) = v36;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v46, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else {
    std::string v46 = v37;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v47 = __p;
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v44 = *(std::string *)a1;
  }
  Espresso::image_async_data_source::image_async_data_source((uint64_t)(v16 + 3), (uint64_t)&v45, (uint64_t *)&v44, -1);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v18 = v16 + 3;
  *((void *)&v18 + 1) = v16;
  *(_OWORD *)a3 = v18;
  if (v14) {
LABEL_26:
  }
    nitro::nitro_function::nitro_function(v14);
LABEL_27:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(v40);
  }
}

void sub_192A69460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__shared_weak_count::~__shared_weak_count(v43);
  operator delete(v45);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  Espresso::async_data_source::options::~options(&a11);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }

  _Unwind_Resume(a1);
}

void std::allocator<Espresso::mxnet_imagebinary_reader>::construct[abi:ne180100]<Espresso::mxnet_imagebinary_reader,Espresso::async_data_source::options &,std::string const&,int>(void *a1, long long *a2, uint64_t a3)
{
  long long v7 = *a2;
  int v8 = *((_DWORD *)a2 + 4);
  if (*((char *)a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else {
    std::string v9 = *(std::string *)((unsigned char *)a2 + 1);
  }
  if (*((char *)a2 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else {
    std::string v10 = *(std::string *)((unsigned char *)a2 + 2);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v6 = *(std::string *)a3;
  }
  Espresso::mxnet_imagebinary_reader::mxnet_imagebinary_reader(a1, (uint64_t)&v7);
}

void sub_192A696AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<Espresso::mxnet_imagebinary_reader>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<Espresso::mxnet_imagebinary_reader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::mxnet_imagebinary_reader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::simple_blobs_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<Espresso::simple_blobs_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3881F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::simple_blobs_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3881F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_bind_labels::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  char v4 = 0;
  std::string __p = 0;
  uint64_t v78 = 0;
  unint64_t v79 = 0;
  char v5 = 1;
  do
  {
    char v74 = v5;
    if (__p != v78) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Stack not empty after end of pass head=%zu size=%zu", *(void *)__p, ((char *)v78 - (unsigned char *)__p) >> 3);
    }
    uint64_t v6 = *((void *)a1 + 4);
    if (*((void *)a1 + 5) != v6)
    {
      unint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = *(void *)(v6 + 16 * v7);
        std::string v10 = *(const void **)(v8 + 64);
        std::string v9 = *(std::__shared_weak_count **)(v8 + 72);
        if (v9)
        {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v6 = *((void *)a1 + 4);
          uint64_t v8 = *(void *)(v6 + 16 * v7);
        }
        if (*(char *)(v8 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v8 + 16), *(void *)(v8 + 24));
          uint64_t v6 = *((void *)a1 + 4);
        }
        else
        {
          std::string __str = *(std::string *)(v8 + 16);
        }
        if (v7 >= ((*((void *)a1 + 5) - v6) >> 4) - 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v75, "");
        }
        else
        {
          uint64_t v11 = *(void *)(v6 + 16 * v7 + 16);
          if (*(char *)(v11 + 39) < 0) {
            std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(v11 + 16), *(void *)(v11 + 24));
          }
          else {
            std::string v75 = *(std::string *)(v11 + 16);
          }
        }
        if (!v10) {
          goto LABEL_125;
        }
        if (v12) {
          break;
        }
        if (v21)
        {
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::operator=((std::string *)(v21 + 328), &__str);
          uint64_t v13 = v78;
          if ((unint64_t)v78 >= v79)
          {
            uint64_t v14 = (unint64_t *)__p;
            uint64_t v22 = ((char *)v78 - (unsigned char *)__p) >> 3;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = v79 - (void)__p;
            if ((uint64_t)(v79 - (void)__p) >> 2 > v23) {
              unint64_t v23 = v24 >> 2;
            }
            BOOL v18 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v18) {
              unint64_t v19 = v23;
            }
            if (v19)
            {
              unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v19);
              uint64_t v14 = (unint64_t *)__p;
              uint64_t v13 = v78;
            }
            else
            {
              uint64_t v20 = 0;
            }
            uint64_t v26 = (unint64_t *)(v19 + 8 * v22);
            *uint64_t v26 = v7;
            int v25 = v26 + 1;
            while (v13 != v14)
            {
              unint64_t v37 = *--v13;
              *--uint64_t v26 = v37;
            }
            goto LABEL_95;
          }
          goto LABEL_42;
        }
        {
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v13 = v78;
          if ((unint64_t)v78 >= v79)
          {
            uint64_t v14 = (unint64_t *)__p;
            uint64_t v34 = ((char *)v78 - (unsigned char *)__p) >> 3;
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v36 = v79 - (void)__p;
            if ((uint64_t)(v79 - (void)__p) >> 2 > v35) {
              unint64_t v35 = v36 >> 2;
            }
            BOOL v18 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v18) {
              unint64_t v19 = v35;
            }
            if (v19)
            {
              unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v19);
              uint64_t v14 = (unint64_t *)__p;
              uint64_t v13 = v78;
            }
            else
            {
              uint64_t v20 = 0;
            }
            uint64_t v26 = (unint64_t *)(v19 + 8 * v34);
            *uint64_t v26 = v7;
            int v25 = v26 + 1;
            while (v13 != v14)
            {
              unint64_t v46 = *--v13;
              *--uint64_t v26 = v46;
            }
            goto LABEL_95;
          }
          goto LABEL_42;
        }
        {
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = *((void *)a1 + 4);
          if (v7 >= (*((void *)a1 + 5) - v28) >> 4) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Else at end of program");
          }
          uint64_t v29 = *(void *)(v28 + 16 * *(v78 - 1));
          int v30 = *(const void **)(v29 + 64);
          if (!v30
          {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the label to bind");
          }
          int v32 = *(std::__shared_weak_count **)(v29 + 72);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::operator=((std::string *)(v31 + 8), &v75);
          if (v32) {
            nitro::nitro_function::nitro_function(v32);
          }
          int v25 = v78;
          uint64_t v33 = v78 - 1;
          uint64_t v78 = v33;
          if ((unint64_t)v33 < v79)
          {
            *uint64_t v33 = v7;
            goto LABEL_97;
          }
          uint64_t v14 = (unint64_t *)__p;
          uint64_t v47 = ((char *)v33 - (unsigned char *)__p) >> 3;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v49 = v79 - (void)__p;
          if ((uint64_t)(v79 - (void)__p) >> 2 > v48) {
            unint64_t v48 = v49 >> 2;
          }
          BOOL v18 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v18) {
            unint64_t v19 = v48;
          }
          if (v19)
          {
            unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v19);
            uint64_t v14 = (unint64_t *)__p;
            uint64_t v33 = v78;
          }
          else
          {
            uint64_t v20 = 0;
          }
          uint64_t v26 = (unint64_t *)(v19 + 8 * v47);
          *uint64_t v26 = v7;
          int v25 = v26 + 1;
          while (v33 != v14)
          {
            unint64_t v50 = *--v33;
            *--uint64_t v26 = v50;
          }
LABEL_95:
          std::string __p = v26;
          uint64_t v78 = v25;
          unint64_t v79 = v19 + 8 * v20;
          if (v14) {
            operator delete(v14);
          }
          goto LABEL_97;
        }
        if (v38)
        {
          id v72 = v38;
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v39 = v78;
          uint64_t v71 = 16 * *(v78 - 1);
          uint64_t v40 = *(void *)(*((void *)a1 + 4) + v71);
          uint64_t v41 = *(const void **)(v40 + 64);
          if (!v41
          {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the label to bind");
          }
          long long v43 = v42;
          std::string v44 = *(std::__shared_weak_count **)(v40 + 72);
          id v73 = v44;
          if (v44)
          {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
            int v39 = v78;
          }
          uint64_t v78 = v39 - 1;
          if (v42[31] < 0)
          {
            std::string v45 = v72;
            if (!*((void *)v42 + 2))
            {
LABEL_135:
              std::string::operator=((std::string *)(v42 + 8), &__str);
              if (v73 && v65)
              {
                atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
                v45[11].__r_.__value_.__s.__data_[17] = 1;
                nitro::nitro_function::nitro_function(v73);
                if (!v45[11].__r_.__value_.__s.__data_[17]) {
                  goto LABEL_147;
                }
              }
              else
              {
                v45[11].__r_.__value_.__s.__data_[17] = v65 != 0;
                if (!v65) {
                  goto LABEL_147;
                }
              }
              std::string::operator=(v45 + 12, (const std::string *)(*(void *)(*((void *)a1 + 4) + v71) + 16));
              uint64_t v66 = *(void *)(*((void *)a1 + 4) + v71);
              uint64_t v67 = *(void **)(v66 + 64);
              if (v67
              {
                std::string::size_type v68 = *(void *)(v66 + 72);
                if (v68) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                std::string::size_type v68 = 0;
              }
              size_t size = (std::__shared_weak_count *)v45[13].__r_.__value_.__l.__size_;
              v45[13].__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
              v45[13].__r_.__value_.__l.__size_ = v68;
              if (size) {
                nitro::nitro_function::nitro_function(size);
              }
            }
          }
          else
          {
            std::string v45 = v72;
            if (!v42[31]) {
              goto LABEL_135;
            }
          }
LABEL_147:
          if (v73) {
            nitro::nitro_function::nitro_function(v73);
          }
LABEL_98:
          if (v9) {
            nitro::nitro_function::nitro_function(v9);
          }
        }
        if ((v4 & 1) == 0) {
          goto LABEL_125;
        }
        if (v51)
        {
          unint64_t v52 = v51;
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v53 = *(_DWORD *)(*(uint64_t (**)(char *))(*(void *)v51 + 320))(v51);
          if ((v53 & 0x80000000) == 0)
          {
            uint64_t v54 = *(void *)(*((void *)a1 + 4)
                            + 16 * *((void *)__p + ((unint64_t)((char *)v78 - (unsigned char *)__p) >> 3) + ~v53));
            size_t v55 = *(const void **)(v54 + 64);
            if (!v55
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the label to bind");
            }
            uint64_t v57 = *(std::__shared_weak_count **)(v54 + 72);
            if (v57) {
              atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::operator=((std::string *)(v52 + 296), (const std::string *)(v56 + 8));
            if (v57) {
              nitro::nitro_function::nitro_function(v57);
            }
          }
        }
        else
        {
          if (!v58) {
            goto LABEL_125;
          }
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v59 = (*(uint64_t (**)(void *))(*(void *)v58 + 320))(v58);
          int v60 = *(_DWORD *)(v59 + 48);
          if ((v60 & 0x80000000) == 0)
          {
            uint64_t v61 = *(void *)(*((void *)a1 + 4)
                            + 16 * *((void *)__p + ((unint64_t)((char *)v78 - (unsigned char *)__p) >> 3) + ~v60));
            uint64_t v62 = *(const void **)(v61 + 64);
            if (!v62
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the label to bind");
            }
            int v64 = *(std::__shared_weak_count **)(v61 + 72);
            if (v64) {
              atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::operator=((std::string *)v59, (const std::string *)(v63 + 8));
            if (v64) {
              nitro::nitro_function::nitro_function(v64);
            }
            if (v7 >= (uint64_t)(*((void *)a1 + 5) - *((void *)a1 + 4)) >> 4) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unbound branch at end of program");
            }
            std::string::operator=((std::string *)(v59 + 24), &v75);
          }
        }
        if (v9) {
          nitro::nitro_function::nitro_function(v9);
        }
LABEL_125:
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if (!v9) {
            goto LABEL_130;
          }
LABEL_129:
          nitro::nitro_function::nitro_function(v9);
          goto LABEL_130;
        }
        if (v9) {
          goto LABEL_129;
        }
LABEL_130:
        ++v7;
        uint64_t v6 = *((void *)a1 + 4);
        if (v7 >= (*((void *)a1 + 5) - v6) >> 4) {
          goto LABEL_149;
        }
      }
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::operator=((std::string *)(v12 + 296), &__str);
      uint64_t v13 = v78;
      if ((unint64_t)v78 >= v79)
      {
        uint64_t v14 = (unint64_t *)__p;
        uint64_t v15 = ((char *)v78 - (unsigned char *)__p) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v79 - (void)__p;
        if ((uint64_t)(v79 - (void)__p) >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        BOOL v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v18) {
          unint64_t v19 = v16;
        }
        if (v19)
        {
          unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v19);
          uint64_t v14 = (unint64_t *)__p;
          uint64_t v13 = v78;
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v26 = (unint64_t *)(v19 + 8 * v15);
        *uint64_t v26 = v7;
        int v25 = v26 + 1;
        while (v13 != v14)
        {
          unint64_t v27 = *--v13;
          *--uint64_t v26 = v27;
        }
        goto LABEL_95;
      }
LABEL_42:
      *uint64_t v13 = v7;
      int v25 = v13 + 1;
LABEL_97:
      uint64_t v78 = v25;
      goto LABEL_98;
    }
LABEL_149:
    char v5 = 0;
    char v4 = 1;
  }
  while ((v74 & 1) != 0);
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (__p)
  {
    uint64_t v78 = (unint64_t *)__p;
    operator delete(__p);
  }
}

void sub_192A6A2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (v29)
  {
    nitro::nitro_function::nitro_function(v29);
    char v31 = 0;
  }
  else
  {
    char v31 = 1;
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if ((v31 & 1) == 0) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_bind_labels::~pass_bind_labels(Espresso::pass_bind_labels *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t Espresso::MPSGraphEngine::Kernels::general_padding_kernel::is_valid_for_engine(unsigned __int16 *a1, int64x2_t **a2, void *a3)
{
  if (a3[1] - *a3 != 64 || a3[4] - a3[3] != 64)
  {
    char v4 = a2[1];
    v17[0] = *a2;
    v17[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "[Dispatch::MPSGraph::general_padding_kernel] unsupported: invalid number of inputs or outputs.  Only 1 & 1 supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v12, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v17, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_11;
  }
  if (a1[148] || a1[149])
  {
    char v4 = a2[1];
    v11[0] = *a2;
    v11[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "[Dispatch::MPSGraph::general_padding_kernel] unsupported: front, back padding specified.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v12, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_11:
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
    v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    char v5 = (void *)v12.__r_.__value_.__r.__words[0];
    goto LABEL_17;
  }
  unsigned int v7 = a1[141];
  if (v7 < 3) {
    return 1;
  }
  char v4 = a2[1];
  v10[0] = *a2;
  v10[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    LOWORD(v7) = a1[141];
  }
  std::to_string(&v9, (__int16)v7);
  uint64_t v8 = std::string::insert(&v9, 0, "[Dispatch::MPSGraph::general_padding_kernel] unsupported: fill_mode ");
  std::string v12 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v12, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v10, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    char v5 = (void *)v9.__r_.__value_.__r.__words[0];
LABEL_17:
    operator delete(v5);
  }
LABEL_18:
  if (v4) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
  }
  return 0;
}

void sub_192A6A674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a27);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::general_padding_kernel::~general_padding_kernel(Espresso::MPSGraphEngine::Kernels::general_padding_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::blob_storage_root::~blob_storage_root(Espresso::blob_storage_root *this)
{
}

void Espresso::blob_rtti_root::~blob_rtti_root(Espresso::blob_rtti_root *this)
{
}

void Espresso::kern_alloc(Espresso *this)
{
  uint64_t v2 = Espresso::kern_alloc_uninitialized(this);

  bzero(v2, (size_t)this);
}

void Espresso::throw_exception_selector<Espresso::memory_error,int &,unsigned long &>(int a1, uint64_t a2)
{
}

uint64_t **___ZN8Espresso8on_allocEPvm_block_invoke_2(uint64_t **a1)
{
  unint64_t v2 = ((unint64_t)a1[4] + 4095) & 0xFFFFFFFFFFFFF000;
  Espresso::allocated_memory += v2;
  SizesPerPointer = (uint64_t **)Espresso::getSizesPerPointer((Espresso *)a1);
  uint64_t result = std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(SizesPerPointer, (unint64_t)a1[5], a1 + 5);
  result[5] = (uint64_t *)v2;
  if (Espresso::allocated_memory > (unint64_t)Espresso::max_allocated_memory) {
    Espresso::max_allocated_memory = Espresso::allocated_memory;
  }
  return result;
}

uint64_t Espresso::getSizesPerPointer(Espresso *this)
{
  {
    operator new();
  }
  return Espresso::getSizesPerPointer(void)::leaked_sizes_per_ptr;
}

void sub_192A6A8BC(_Unwind_Exception *a1)
{
}

uint64_t **std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        char v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      char v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = a1 + 1;
LABEL_9:
    std::string v9 = (uint64_t *)v7;
    unsigned int v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *unsigned int v7 = 0;
    v7[1] = 0;
    uint64_t v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    std::string v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void Espresso::kern_dealloc(Espresso *this, void *a2)
{
  Espresso::on_dealloc(this, a2);

  free(this);
}

void ___ZN8Espresso10on_deallocEPv_block_invoke_2(uint64_t **a1)
{
  SizesPerPointer = (uint64_t **)Espresso::getSizesPerPointer((Espresso *)a1);
  unint64_t v4 = (unint64_t)a1[4];
  dispatch_queue_t v3 = a1 + 4;
  char v5 = std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(SizesPerPointer, v4, v3);
  Espresso::allocated_memory -= (uint64_t)v5[5];
  uint64_t v6 = (uint64_t **)Espresso::getSizesPerPointer((Espresso *)v5);
  unsigned int v7 = v6[1];
  if (v7)
  {
    unint64_t v8 = *v3;
    std::string v9 = (uint64_t *)(v6 + 1);
    std::string v10 = v6[1];
    do
    {
      unint64_t v11 = v10[4];
      BOOL v12 = v11 >= (unint64_t)v8;
      if (v11 >= (unint64_t)v8) {
        uint64_t v13 = (uint64_t **)v10;
      }
      else {
        uint64_t v13 = (uint64_t **)(v10 + 1);
      }
      if (v12) {
        std::string v9 = v10;
      }
      std::string v10 = *v13;
    }
    while (*v13);
    if (v9 != (uint64_t *)(v6 + 1) && (unint64_t)v8 >= v9[4])
    {
      uint64_t v14 = (uint64_t *)v9[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        unint64_t v16 = v9;
        do
        {
          uint64_t v15 = (uint64_t *)v16[2];
          BOOL v17 = *v15 == (void)v16;
          unint64_t v16 = v15;
        }
        while (!v17);
      }
      if (*v6 == v9) {
        *uint64_t v6 = v15;
      }
      v6[2] = (uint64_t *)((char *)v6[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, v9);
      operator delete(v9);
    }
  }
}

uint64_t ___ZN8Espresso10on_deallocEPv_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.espresso.memdbgq", 0);
  uint64_t v1 = Espresso::alloc_dbg_queue;
  Espresso::alloc_dbg_queue = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t Espresso::print_mem_stats(Espresso *this)
{
  if (Espresso::onceToken != -1) {
    dispatch_once(&Espresso::onceToken, &__block_literal_global_7_17808);
  }
  uint64_t v4 = 0;
  char v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  if (Espresso::debug_allocated_mem)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN8Espresso15print_mem_statsEv_block_invoke_2;
    block[3] = &unk_1E5745818;
    block[4] = &v4;
    dispatch_sync((dispatch_queue_t)Espresso::alloc_dbg_queue, block);
    uint64_t v1 = v5[3];
  }
  else
  {
    uint64_t v1 = 0;
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t ___ZN8Espresso15print_mem_statsEv_block_invoke_2(uint64_t a1)
{
  float v1 = (float)(unint64_t)Espresso::allocated_memory * 0.00000095367;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Espresso::allocated_memory;
  return printf("[mem] tot=%.3fM max=%.3f\n", v1, (float)((float)(unint64_t)Espresso::max_allocated_memory * 0.00000095367));
}

uint64_t ___ZN8Espresso15print_mem_statsEv_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.espresso.memdbgq", 0);
  uint64_t v1 = Espresso::alloc_dbg_queue;
  Espresso::alloc_dbg_queue = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t Espresso::get_max_allocated_memory(Espresso *this)
{
  return Espresso::max_allocated_memory;
}

long double Espresso::statdist_psnr(Espresso *this, float *a2, float *a3)
{
  if ((int)a3 < 1)
  {
    double v4 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    uint64_t v3 = 0;
    double v4 = 0.0;
    float v5 = 0.0;
    do
    {
      float v6 = a2[v3];
      double v4 = v4
         + (float)((float)(*(float *)((char *)this + v3 * 4) - v6) * (float)(*(float *)((char *)this + v3 * 4) - v6));
      float v7 = fabsf(v6);
      if (v7 > v5 || v3 == 0) {
        float v5 = v7;
      }
      ++v3;
    }
    while (a3 != v3);
    double v9 = v5;
  }
  return log10(v9 / sqrt(v4 / (double)(int)a3)) * 20.0;
}

double Espresso::statdist_kullback_leibler(Espresso *this, float *a2, float *a3)
{
  if ((int)a3 < 1) {
    return 0.0;
  }
  uint64_t v5 = a3;
  double v6 = 0.0;
  do
  {
    float v7 = *(float *)this;
    this = (Espresso *)((char *)this + 4);
    float v8 = v7;
    float v9 = *a2++;
    double v6 = v6 + (float)(v8 * logf(v8 / (float)(v9 + 0.00000001)));
    --v5;
  }
  while (v5);
  return v6;
}

double Espresso::statdist_cosine(Espresso *this, float *a2, float *a3)
{
  if ((int)a3 < 1)
  {
    float v6 = 0.0;
    float v10 = 0.0;
  }
  else
  {
    uint64_t v3 = a3;
    float v4 = 0.0;
    float v5 = 0.0;
    float v6 = 0.0;
    do
    {
      float v7 = *(float *)this;
      this = (Espresso *)((char *)this + 4);
      float v8 = v7;
      float v9 = *a2++;
      float v6 = v6 + (float)(v8 * v9);
      float v5 = v5 + (float)(v8 * v8);
      float v4 = v4 + (float)(v9 * v9);
      --v3;
    }
    while (v3);
    float v10 = v5 * v4;
  }
  return (float)(v6 / sqrtf(v10));
}

void Espresso::statdist_cosine_topn(Espresso *this, float *a2, float *a3, int a4)
{
  int v5 = (int)a3;
  if (a3)
  {
    if ((a3 & 0x80000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v8 = 2 * (int)a3;
    float v9 = (float *)operator new(v8 * 4);
    bzero(v9, 8 * v5);
    uint64_t v10 = 0;
    do
    {
      int v11 = *(_DWORD *)this;
      this = (Espresso *)((char *)this + 4);
      int v12 = v11;
      int v13 = *(_DWORD *)a2++;
      uint64_t v14 = &v9[v10];
      *(_DWORD *)uint64_t v14 = v12;
      *((_DWORD *)v14 + 1) = v13;
      v10 += 2;
    }
    while (2 * v5 != v10);
    uint64_t v15 = &v9[v8];
  }
  else
  {
    float v9 = 0;
    uint64_t v15 = 0;
  }
  if (v5 >= a4) {
    int v16 = a4;
  }
  else {
    int v16 = v5;
  }
  if (v16)
  {
    uint64_t v17 = v16;
    BOOL v18 = &v9[2 * v16];
    if (v16 >= 2)
    {
      unint64_t v19 = (unint64_t)(v16 - 2) >> 1;
      unint64_t v20 = v19 + 1;
      uint64_t v21 = &v9[2 * v19];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::statdist_cosine_topn(float *,float *,int,int)::$_0 &,std::__wrap_iter<std::pair<float,float> *>>((uint64_t)v9, v17, v21);
        v21 -= 2;
        --v20;
      }
      while (v20);
    }
    if (v18 != v15)
    {
      uint64_t v22 = v18;
      do
      {
        if (v22[1] > v9[1])
        {
          float v23 = *v22;
          float *v22 = *v9;
          *float v9 = v23;
          int v24 = *((_DWORD *)v22 + 1);
          v22[1] = v9[1];
          *((_DWORD *)v9 + 1) = v24;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::statdist_cosine_topn(float *,float *,int,int)::$_0 &,std::__wrap_iter<std::pair<float,float> *>>((uint64_t)v9, v17, v9);
        }
        v22 += 2;
      }
      while (v22 != v15);
    }
    if ((int)v17 > 1)
    {
      uint64_t v25 = v17;
      do
      {
        uint64_t v26 = 0;
        int v28 = *(_DWORD *)v9;
        int v27 = *((_DWORD *)v9 + 1);
        uint64_t v29 = v9;
        do
        {
          int v30 = v29;
          v29 += 2 * v26 + 2;
          uint64_t v31 = 2 * v26;
          uint64_t v26 = (2 * v26) | 1;
          uint64_t v32 = v31 + 2;
          if (v32 < v25 && v29[1] > v29[3])
          {
            v29 += 2;
            uint64_t v26 = v32;
          }
          *int v30 = *v29;
          v30[1] = v29[1];
        }
        while (v26 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
        if (v29 == v18 - 2)
        {
          *(_DWORD *)uint64_t v29 = v28;
          *((_DWORD *)v29 + 1) = v27;
        }
        else
        {
          float *v29 = *(v18 - 2);
          v29[1] = *(v18 - 1);
          *((_DWORD *)v18 - 2) = v28;
          *((_DWORD *)v18 - 1) = v27;
          uint64_t v33 = (char *)v29 - (char *)v9 + 8;
          if (v33 >= 9)
          {
            unint64_t v34 = (((unint64_t)v33 >> 3) - 2) >> 1;
            float v35 = v29[1];
            if (v9[2 * v34 + 1] > v35)
            {
              int v36 = *(_DWORD *)v29;
              do
              {
                unint64_t v37 = v29;
                uint64_t v29 = &v9[2 * v34];
                float *v37 = *v29;
                v37[1] = v29[1];
                if (!v34) {
                  break;
                }
                unint64_t v34 = (v34 - 1) >> 1;
              }
              while (v9[2 * v34 + 1] > v35);
              *(_DWORD *)uint64_t v29 = v36;
              v29[1] = v35;
            }
          }
        }
        v18 -= 2;
      }
      while (v25-- > 2);
    }
    if ((int)v17 >= 1)
    {
      uint64_t v39 = v17;
      uint64_t v40 = v9 + 1;
      float v41 = 0.0;
      float v42 = 0.0;
      do
      {
        float v41 = v41 + (float)(*(v40 - 1) * *v40);
        float v42 = v42 + (float)(*v40 * *v40);
        v40 += 2;
        --v39;
      }
      while (v39);
      goto LABEL_41;
    }
  }
  if (v9) {
LABEL_41:
  }
    operator delete(v9);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::statdist_cosine_topn(float *,float *,int,int)::$_0 &,std::__wrap_iter<std::pair<float,float> *>>(uint64_t result, uint64_t a2, float *a3)
{
  if (a2 >= 2)
  {
    uint64_t v3 = (uint64_t)a3 - result;
    int64_t v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      uint64_t v5 = v3 >> 2;
      uint64_t v6 = (v3 >> 2) | 1;
      float v7 = (float *)(result + 8 * v6);
      uint64_t v8 = v5 + 2;
      if (v8 < a2 && v7[1] > v7[3])
      {
        v7 += 2;
        uint64_t v6 = v8;
      }
      float v9 = a3[1];
      if (v7[1] <= v9)
      {
        float v10 = *a3;
        do
        {
          int v11 = a3;
          a3 = v7;
          *int v11 = *v7;
          v11[1] = v7[1];
          if (v4 < v6) {
            break;
          }
          uint64_t v12 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          float v7 = (float *)(result + 8 * v6);
          uint64_t v13 = v12 + 2;
          if (v13 < a2 && v7[1] > v7[3])
          {
            v7 += 2;
            uint64_t v6 = v13;
          }
        }
        while (v7[1] <= v9);
        *a3 = v10;
        a3[1] = v9;
      }
    }
  }
  return result;
}

void Espresso::load_network_no_dispatch_internal(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t **a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v12 = (char *)operator new(0x70uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE381D50;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((void *)v12 + 6) = v12 + 56;
  *((void *)v12 + 10) = 0;
  *((void *)v12 + 9) = v12 + 80;
  *((void *)v12 + 12) = 0;
  *((void *)v12 + 13) = 0;
  *((void *)v12 + 11) = 0;
  *a1 = (uint64_t)(v12 + 24);
  a1[1] = (uint64_t)v12;
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 16), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 13);
    *((void *)v12 + 12) = v13;
    *((void *)v12 + 13) = v14;
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    *((void *)v12 + 12) = v13;
    *((void *)v12 + 13) = 0;
  }
  int v16 = (char *)operator new(0xB0uLL);
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)int v16 = &unk_1EE388928;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *((void *)v16 + 12) = v16 + 104;
  *((void *)v16 + 17) = 0;
  *((void *)v16 + 16) = 0;
  *((void *)v16 + 15) = v16 + 128;
  *((void *)v16 + 20) = 0;
  *((void *)v16 + 21) = 0;
  *((void *)v16 + 19) = v16 + 160;
  uint64_t v26 = v16 + 24;
  int v27 = (std::__shared_weak_count *)v16;
  uint64_t v25 = 0;
  char v17 = Espresso::check_3d_layer_from_serdes(a4);
  uint64_t v18 = *a3;
  *(unsigned char *)(*a3 + 1281) = v17;
  uint64_t v19 = *a2;
  unint64_t v20 = (std::__shared_weak_count *)a2[1];
  v24[0] = v19;
  v24[1] = (uint64_t)v20;
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v18 = *a3;
  }
  uint64_t v21 = (std::__shared_weak_count *)a3[1];
  v23[0] = v18;
  v23[1] = (uint64_t)v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::get_net_info_ir(v24, v23, (Espresso ***)a4, a5, a6, (int *)&v25 + 1, (int *)&v25, (uint64_t)&v28, a1, &v26);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  uint64_t v22 = v29;
  if (v29)
  {
    nitro::nitro_function::nitro_function(v22);
  }
}

void sub_192A6B3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  float v23 = *(std::__shared_weak_count **)(v18 + 8);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  int v24 = *(std::__shared_weak_count **)(v21 - 56);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "degamma");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6B588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "degamma");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A6B67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "degamma");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6B7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v11[0] = 0;
  v11[1] = a4;
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "degamma");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A6B8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A678;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "furthest_point_sampling");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6BAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 2;
  int v11 = -2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "furthest_point_sampling");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A6BC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  char v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "furthest_point_sampling");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6BD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v11 = 2;
  int v12 = -2;
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "furthest_point_sampling");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A6BE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BB78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BB78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "meta_convolution");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6C090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int16 v19 = 1;
  uint64_t v21 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v20 = 0;
  __int16 v22 = 0;
  uint64_t v23 = 0x1000100010001;
  int v24 = 0;
  int v26 = 1;
  int v34 = 0;
  char v35 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  long long v16 = xmmword_192DCA220;
  memset(v15, 0, 32);
  v15[4] = 1;
  long long v25 = xmmword_192DCA230;
  uint64_t v27 = 0;
  __int16 v29 = 1;
  unint64_t v17 = 0xFFFFFFFF00000000;
  uint64_t v18 = _D0;
  __int16 v28 = 0;
  int v32 = 0;
  __int16 v33 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "meta_convolution");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A6C204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "meta_convolution");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6C35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v37 = a4;
  __int16 v20 = 1;
  uint64_t v22 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v21 = 0;
  __int16 v23 = 0;
  uint64_t v24 = 0x1000100010001;
  int v25 = 0;
  int v27 = 1;
  int v35 = 0;
  char v36 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v17 = xmmword_192DCA220;
  memset(v16, 0, 32);
  v16[4] = 1;
  long long v26 = xmmword_192DCA230;
  uint64_t v28 = 0;
  __int16 v30 = 1;
  unint64_t v18 = 0xFFFFFFFF00000000;
  uint64_t v19 = _D0;
  __int16 v29 = 0;
  int v33 = 0;
  __int16 v34 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "meta_convolution");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A6C4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B718;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_out");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6C6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DCA4F0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "wg_tx_out");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A6C800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "wg_tx_out");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6C958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  long long v11 = xmmword_192DCA4F0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_out");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A6CA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_in");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6CC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DCA4F0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "wg_tx_in");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A6CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "wg_tx_in");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6CEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  long long v11 = xmmword_192DCA4F0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_in");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A6D000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B9B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B9B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_dequantize");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6D228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = -1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "linear_dequantize");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A6D320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "linear_dequantize");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6D478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = -1;
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_dequantize");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A6D57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_quantize");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6D7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = -1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "linear_quantize");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A6D89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "linear_quantize");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6D9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = -1;
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_quantize");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A6DAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B440;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "plane_rw");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6DD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 875704422;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(*a2, (int *)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "plane_rw");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A6DE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (int *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "plane_rw");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6DF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = 875704422;
  Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(a2, (int *)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "plane_rw");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A6E080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A8E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A8E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_unit");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6E2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v16 = 0u;
  memset(v17, 0, 28);
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)int v15 = 0u;
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)char v10 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<((uint64_t *)&v6, "tunneled_ane_unit");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0) {
    operator delete(v14[0]);
  }
  uint64_t v6 = (void **)&v13[1] + 1;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)v13;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (v11[1])
  {
    *(void **)&long long v12 = v11[1];
    operator delete(v11[1]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
}

void sub_192A6E430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "tunneled_ane_unit");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6E598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v19 = a4;
  long long v17 = 0u;
  memset(v18, 0, 28);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)char v11 = 0u;
  *(_OWORD *)long long v12 = 0u;
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_unit");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(*((void **)&v16 + 1));
  }
  if (SBYTE7(v16) < 0) {
    operator delete((void *)v15);
  }
  __p[0] = (char *)&v14[1] + 8;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v14;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v12[1])
  {
    *(void **)&long long v13 = v12[1];
    operator delete(v12[1]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
}

void sub_192A6E730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_op");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6E968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  memset(v10, 0, sizeof(v10));
  int v12 = 0;
  int v11 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "tunneled_ane_op");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)v10);
}

void sub_192A6EA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "tunneled_ane_op");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6EC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v28 = a4;
  memset(v11, 0, sizeof(v11));
  int v13 = 0;
  int v12 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_op");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)v11);
}

void sub_192A6ED40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B5C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B5C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "einsum");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6EF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *(_OWORD *)long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  *(_OWORD *)int v13 = 0u;
  *(_OWORD *)char v10 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "einsum");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v14[1])
  {
    *(void **)&long long v15 = v14[1];
    operator delete(v14[1]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (v11[1])
  {
    *(void **)&long long v12 = v11[1];
    operator delete(v11[1]);
  }
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A6F0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  Espresso::einsum_params_t::~einsum_params_t((Espresso::einsum_params_t *)&a20);
  _Unwind_Resume(a1);
}

void Espresso::einsum_params_t::~einsum_params_t(Espresso::einsum_params_t *this)
{
  unint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  int64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "einsum");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6F284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v17 = a4;
  *(_OWORD *)long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long v14 = 0u;
  *(_OWORD *)char v11 = 0u;
  *(_OWORD *)long long v12 = 0u;
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "einsum");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v15[1])
  {
    *(void **)&long long v16 = v15[1];
    operator delete(v15[1]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v12[1])
  {
    *(void **)&long long v13 = v12[1];
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_192A6F3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::einsum_params_t::~einsum_params_t((Espresso::einsum_params_t *)&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A410;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "resize_nearest_neighbor");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6F608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0;
  v10[1] = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(*a2, v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "resize_nearest_neighbor");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A6F6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "resize_nearest_neighbor");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6F854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  v11[0] = 0;
  v11[1] = 0;
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "resize_nearest_neighbor");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A6F954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BC20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BC20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice_update");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A6FB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v11 = 0;
  v10[0] = 0;
  v10[1] = 0;
  int v13 = 1;
  long long v12 = xmmword_192E06E0C;
  int v15 = 1;
  long long v14 = xmmword_192E06E0C;
  long long v16 = 0u;
  long long v17 = 0u;
  int v18 = 0;
  uint64_t v19 = 0xFFFFFFFFLL;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "general_slice_update");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A6FCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  int v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "general_slice_update");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A6FE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v21 = a4;
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  int v14 = 1;
  long long v13 = xmmword_192E06E0C;
  int v16 = 1;
  long long v15 = xmmword_192E06E0C;
  long long v17 = 0u;
  long long v18 = 0u;
  int v19 = 0;
  uint64_t v20 = 0xFFFFFFFFLL;
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice_update");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A6FF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconv3d");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v16 = 1;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v17 = v3;
  __asm { FMOV            V1.2S, #1.0 }
  unint64_t v18 = 0xFFFFFFFF00000001;
  uint64_t v19 = _D1;
  int v20 = 0;
  __int16 v21 = 1;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  __int16 v24 = 0;
  WORD1(v3) = 1;
  WORD3(v3) = 1;
  uint64_t v25 = v3;
  int v26 = 65537;
  uint64_t v27 = 0x100000000;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v9 = *a2;
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(*a2, (uint64_t)&v16, 1);
  std::string::basic_string[abi:ne180100]<0>(v10, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v9, (uint64_t)v10, &v12);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v12, "deconv3d");
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A702C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "deconv3d");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A70418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v31 = a4;
  uint64_t v17 = 1;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v18 = v5;
  __asm { FMOV            V1.2S, #1.0 }
  unint64_t v19 = 0xFFFFFFFF00000001;
  uint64_t v20 = _D1;
  int v21 = 0;
  __int16 v22 = 1;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  __int16 v25 = 0;
  WORD1(v5) = 1;
  WORD3(v5) = 1;
  uint64_t v26 = v5;
  int v27 = 65537;
  uint64_t v28 = 0x100000000;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a2, (uint64_t)&v17, 0);
  Espresso::abstract_engine_factory::shared(&v15);
  uint64_t v11 = v15;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconv3d");
  int v12 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v11, a3, (uint64_t)__p, (uint64_t)&v17, &v12);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A70570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A8A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A8A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_inner_product_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A70798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v20 = 0;
  int v22 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v23 = _D0;
  uint64_t v28 = 0;
  long long v15 = xmmword_192DCA240;
  int v16 = 0;
  uint64_t v17 = _D0;
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  int v19 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  __int16 v29 = 257;
  char v30 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(*a2, &v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "fused_inner_product_grad");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A708EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  long long v5 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "fused_inner_product_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A70A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v32 = a4;
  char v21 = 0;
  int v23 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v24 = _D0;
  uint64_t v29 = 0;
  long long v16 = xmmword_192DCA240;
  int v17 = 0;
  uint64_t v18 = _D0;
  uint64_t v25 = 0;
  uint64_t v19 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  uint64_t v26 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  __int16 v30 = 257;
  char v31 = 1;
  Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(a2, &v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_inner_product_grad");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A70BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BC90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_convolution_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A70DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int16 v19 = 1;
  uint64_t v21 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v20 = 0;
  __int16 v22 = 0;
  uint64_t v23 = 0x1000100010001;
  int v24 = 0;
  int v26 = 1;
  int v34 = 0;
  char v35 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  long long v16 = xmmword_192DCA220;
  memset(v15, 0, 32);
  v15[4] = 1;
  long long v25 = xmmword_192DCA230;
  uint64_t v27 = 0;
  __int16 v29 = 1;
  unint64_t v17 = 0xFFFFFFFF00000000;
  uint64_t v18 = _D0;
  __int16 v28 = 0;
  int v32 = 0;
  __int16 v33 = 1;
  int v36 = 65793;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(*a2, v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "fused_convolution_grad");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A70F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  long long v5 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "fused_convolution_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A710A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v38 = a4;
  __int16 v20 = 1;
  uint64_t v22 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v21 = 0;
  __int16 v23 = 0;
  uint64_t v24 = 0x1000100010001;
  int v25 = 0;
  int v27 = 1;
  int v35 = 0;
  char v36 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v17 = xmmword_192DCA220;
  memset(v16, 0, 32);
  v16[4] = 1;
  long long v26 = xmmword_192DCA230;
  uint64_t v28 = 0;
  __int16 v30 = 1;
  unint64_t v18 = 0xFFFFFFFF00000000;
  uint64_t v19 = _D0;
  __int16 v29 = 0;
  int v33 = 0;
  __int16 v34 = 1;
  int v37 = 65793;
  Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(a2, v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_convolution_grad");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A71220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BB40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "static_dequantize");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A71448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = -1;
  uint64_t v11 = 1065353216;
  uint64_t v12 = 0;
  uint64_t v13 = 1065353216;
  int v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "static_dequantize");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "static_dequantize");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A716B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  int v11 = -1;
  uint64_t v12 = 1065353216;
  uint64_t v13 = 0;
  uint64_t v14 = 1065353216;
  int v15 = 0;
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "static_dequantize");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A717D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B8A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B8A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "static_quantize");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A719F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = -1;
  uint64_t v11 = 1065353216;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "static_quantize");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A71B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "static_quantize");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A71C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  int v11 = -1;
  uint64_t v12 = 1065353216;
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "static_quantize");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A71D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B558;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice_update");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A71F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DCA6B0;
  uint64_t v11 = 0x100000000;
  int v12 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "slice_update");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A720A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "slice_update");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A721F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  long long v11 = xmmword_192DCA6B0;
  uint64_t v12 = 0x100000000;
  int v13 = 0;
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice_update");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A72310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B050;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "argsort");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A72538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[4] = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "argsort");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A72634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "argsort");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  v11[4] = 1;
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "argsort");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A72890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A528;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A72AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v16 = 1;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v17 = v3;
  __asm { FMOV            V1.2S, #1.0 }
  unint64_t v18 = 0xFFFFFFFF00000001;
  uint64_t v19 = _D1;
  int v20 = 0;
  __int16 v21 = 1;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  __int16 v24 = 0;
  WORD1(v3) = 1;
  WORD3(v3) = 1;
  uint64_t v25 = v3;
  int v26 = 65537;
  uint64_t v27 = 0x100000000;
  uint64_t v29 = 0;
  uint64_t v28 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v9 = *a2;
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(*a2, (uint64_t)&v16, 1);
  std::string::basic_string[abi:ne180100]<0>(v10, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v9, (uint64_t)v10, &v12);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v12, "conv3d");
  if (v15 < 0) {
    operator delete(__p);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A72C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "conv3d");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A72D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v31 = a4;
  uint64_t v17 = 1;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v18 = v5;
  __asm { FMOV            V1.2S, #1.0 }
  unint64_t v19 = 0xFFFFFFFF00000001;
  uint64_t v20 = _D1;
  int v21 = 0;
  __int16 v22 = 1;
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  __int16 v25 = 0;
  WORD1(v5) = 1;
  WORD3(v5) = 1;
  uint64_t v26 = v5;
  int v27 = 65537;
  uint64_t v28 = 0x100000000;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a2, (uint64_t)&v17, 0);
  Espresso::abstract_engine_factory::shared(&v15);
  uint64_t v11 = v15;
  std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
  int v12 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v11, a3, (uint64_t)__p, (uint64_t)&v17, &v12);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A72EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A368;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "hierarchical_inner_product");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A730E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v20 = 0;
  int v22 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v23 = _D0;
  uint64_t v28 = 0;
  long long v15 = xmmword_192DCA240;
  int v16 = 0;
  uint64_t v17 = _D0;
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  int v19 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "hierarchical_inner_product");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A73228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "hierarchical_inner_product");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A73380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v30 = a4;
  char v21 = 0;
  int v23 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v24 = _D0;
  uint64_t v29 = 0;
  long long v16 = xmmword_192DCA240;
  int v17 = 0;
  uint64_t v18 = _D0;
  uint64_t v25 = 0;
  uint64_t v19 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  uint64_t v26 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "hierarchical_inner_product");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A734CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BCC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BCC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool3d");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A736F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = xmmword_192DC3600;
  v10[1] = xmmword_192DCA240;
  int v11 = 0;
  __int16 v12 = 1;
  v14[0] = 0;
  uint64_t v13 = 0;
  *(void *)((char *)v14 + 6) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "pool3d");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A73814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "pool3d");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7396C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  v11[0] = xmmword_192DC3600;
  v11[1] = xmmword_192DCA240;
  int v12 = 0;
  __int16 v13 = 1;
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = 0;
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool3d");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A73A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A4B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A4B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "loopkit");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A73CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  *(_OWORD *)int v16 = 0u;
  *(_OWORD *)int v13 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)char v10 = 0u;
  int v18 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "loopkit");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v14[0]) < 0) {
    operator delete(v13[0]);
  }
  if (v11[1])
  {
    *(void **)&long long v12 = v11[1];
    operator delete(v11[1]);
  }
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A73E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  Espresso::loopkit_params_t::~loopkit_params_t((Espresso::loopkit_params_t *)&a20);
  _Unwind_Resume(a1);
}

void Espresso::loopkit_params_t::~loopkit_params_t(Espresso::loopkit_params_t *this)
{
  unint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "loopkit");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A73FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v20 = a4;
  uint64_t v18 = 0;
  long long v17 = 0u;
  *(_OWORD *)long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)char v11 = 0u;
  *(_OWORD *)long long v12 = 0u;
  int v19 = 1;
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "loopkit");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if ((void)v17)
  {
    *((void *)&v17 + 1) = v17;
    operator delete((void *)v17);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0) {
    operator delete(v14[0]);
  }
  if (v12[1])
  {
    *(void **)&long long v13 = v12[1];
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_192A7416C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::loopkit_params_t::~loopkit_params_t((Espresso::loopkit_params_t *)&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A720;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "self_attention");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A743A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v11 = 0;
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "self_attention");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7449C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "self_attention");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A745F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  char v12 = 0;
  uint64_t v11 = 0;
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "self_attention");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A746F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B2B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B2B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "bahdanau_attention");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A74920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  int v11 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "bahdanau_attention");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A74A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "bahdanau_attention");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A74B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v11 = 0;
  int v12 = 0;
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "bahdanau_attention");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A74C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B910;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "local_correlation");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A74E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DCA740;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "local_correlation");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A74F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "local_correlation");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A750F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  long long v11 = xmmword_192DCA740;
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "local_correlation");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A751FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B830;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "resample");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A75424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  char v14 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::resample_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "resample");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7552C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::resample_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "resample");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A75684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  int v11 = 1;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  int v14 = 0;
  char v15 = 1;
  Espresso::SerDes::params_io<Espresso::resample_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "resample");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A75798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A918;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "grid_sampling");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A759C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  __int16 v11 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "grid_sampling");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A75AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "grid_sampling");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A75C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  int v11 = 0;
  __int16 v12 = 0;
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "grid_sampling");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A75D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B1A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B1A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "sparse_inner_product");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A75F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0x100000001;
  int v11 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "sparse_inner_product");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A76038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "sparse_inner_product");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A76190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v11 = 0x100000001;
  int v12 = 0;
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "sparse_inner_product");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A76298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BB08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "dev_op");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A764C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::default_params(uint64_t a1@<X1>, void **a2@<X8>)
{
  uint64_t v10 = 0;
  int v11 = 0;
  *(_OWORD *)int v12 = 0u;
  *(_OWORD *)int v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  memset(v16, 0, sizeof(v16));
  long long v17 = 0u;
  uint64_t v18 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<((uint64_t *)&v6, "dev_op");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  uint64_t v6 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)v16 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (SBYTE7(v16[0]) < 0) {
    operator delete(v15[0]);
  }
  if (v13[1])
  {
    *(void **)&long long v14 = v13[1];
    operator delete(v13[1]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_192A76630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  int v23 = *(std::__shared_weak_count **)(v21 + 8);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  Espresso::dev_op_params_t::~dev_op_params_t(&a21);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::write(int a1, void *a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "dev_op");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A76798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cumsum");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A769BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int16 v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cumsum_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cumsum");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A76AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cumsum_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "cumsum");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A76C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  __int16 v11 = 0;
  Espresso::SerDes::params_io<Espresso::cumsum_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cumsum");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A76D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A3A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A3A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "one_hot");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A76F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  uint64_t v11 = 1065353216;
  int v12 = -1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "one_hot");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "one_hot");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A77194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v11 = 0;
  uint64_t v12 = 1065353216;
  int v13 = -1;
  int v14 = a4;
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "one_hot");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A772A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A790;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "precompiled_segment");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A774CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "precompiled_segment");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A775AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "precompiled_segment");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A776F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "precompiled_segment");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A777DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B9F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B9F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "nonzero");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A77A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "nonzero");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A77AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "nonzero");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A77C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "nonzero");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A77D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A758;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A77F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  int v11 = 0;
  __int16 v12 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "scatter_nd");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A78040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "scatter_nd");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A78198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  uint64_t v11 = 0;
  int v12 = 0;
  __int16 v13 = 257;
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A782A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A784CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  int v11 = 0;
  __int16 v12 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "gather_nd");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A785D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AB48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "adam");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7880C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0x3F7FBE773F666666;
  v10[1] = 0x1322BCC77;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::adam_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "adam");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7891C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::adam_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "adam");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A78A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  v11[0] = 0x3F7FBE773F666666;
  v11[1] = 0x1322BCC77;
  Espresso::SerDes::params_io<Espresso::adam_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "adam");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A78B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389F78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "sgd");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A78DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0;
  uint64_t v11 = 0x100000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "sgd");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A78EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "sgd");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7900C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  v11[0] = 0;
  uint64_t v12 = 0x100000000;
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "sgd");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A79114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389F40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389F40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "non_maximum_suppression");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7933C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 1;
  uint64_t v11 = 1056964608;
  char v12 = 0;
  uint64_t v13 = 0x300000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  int v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "non_maximum_suppression");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_192A79470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 + 8);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "non_maximum_suppression");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A795E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BBE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BBE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cross_entropy");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A79804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0;
  int v11 = 1;
  char v12 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cross_entropy");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A79908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "cross_entropy");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A79A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  v11[0] = 0;
  int v12 = 1;
  char v13 = 1;
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cross_entropy");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A79B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B0F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B0F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "reverse_seq");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A79D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0x100000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "reverse_seq");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A79E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "reverse_seq");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A79FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = 0x100000000;
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "reverse_seq");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7A0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AF00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AF00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "sliding_windows");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7A31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0x100000000;
  int v11 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "sliding_windows");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7A424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "sliding_windows");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7A57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v11 = 0x100000000;
  int v12 = 1;
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "sliding_windows");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7A68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B520;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_nd");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7A8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "softmax_nd");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7A9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "softmax_nd");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7AB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v11[0] = 0;
  v11[1] = a4;
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_nd");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7ABFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ACD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ACD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "split_nd");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7AE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0x200000000;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "split_nd");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7AF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "split_nd");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7B0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v44 = a4;
  uint64_t v11 = 0x200000000;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "split_nd");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7B25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A988;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "stack_nd");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7B484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "stack_nd");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7B578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "stack_nd");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7B6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v11[0] = 0;
  v11[1] = a4;
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "stack_nd");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7B7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A9C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A9C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7B9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v11 = 0;
  v10[0] = 0;
  v10[1] = 0;
  int v13 = 1;
  long long v12 = xmmword_192E06E0C;
  int v15 = 1;
  long long v14 = xmmword_192E06E0C;
  long long v16 = 0u;
  long long v17 = 0u;
  unint64_t v18 = 0xFFFFFFFF00000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "general_slice");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7BB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B168;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "transplant");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7BD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v11 = 0;
  v10[0] = 0;
  v10[1] = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(*a2, v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "transplant");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7BE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "transplant");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7BFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "transplant");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7C0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AD08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AD08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "builtin");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7C2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)int v13 = 0u;
  *(_OWORD *)long long v14 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)char v10 = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "builtin");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (SBYTE7(v17) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v14[0]) < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[1]);
  }
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A7C444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  Espresso::builtin_params_t::~builtin_params_t(&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "builtin");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7C5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v21 = a4;
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  *(_OWORD *)long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long v14 = 0u;
  *(_OWORD *)char v11 = 0u;
  *(_OWORD *)long long v12 = 0u;
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "builtin");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (SBYTE7(v18) < 0) {
    operator delete((void *)v17);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_192A7C720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::builtin_params_t::~builtin_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A560;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "gumbel_max");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7C958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v10 = 0xFFFFFFFF00000001;
  __int16 v11 = 0;
  long long v12 = xmmword_192DCA260;
  char v13 = 0;
  int v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "gumbel_max");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7CA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "gumbel_max");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7CBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  unint64_t v11 = 0xFFFFFFFF00000001;
  __int16 v12 = 0;
  long long v13 = xmmword_192DCA260;
  char v14 = 0;
  int v15 = 0;
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "gumbel_max");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7CCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "phi_virtual");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7CF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "phi_virtual");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7CFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "phi_virtual");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A7D134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "phi_virtual");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7D220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AEC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AEC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "instancenorm_1d");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7D448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0x358637BD00000000;
  v10[1] = 0;
  int v11 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "instancenorm_1d");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7D550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "instancenorm_1d");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7D6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  v11[0] = 0x358637BD00000000;
  v11[1] = 0;
  int v12 = 0;
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "instancenorm_1d");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7D7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B408;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "multinomial");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7D9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v10 = 0xFFFFFFFF00000001;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "multinomial");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7DADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "multinomial");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7DC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  unint64_t v11 = 0xFFFFFFFF00000001;
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "multinomial");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7DD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AE90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AE90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "array_gather");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7DF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v11 = v3;
  uint64_t v12 = 4294967294;
  char v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v4 = *a2;
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(*a2, (uint64_t)&v11, 1);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "array_gather");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A7E070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "array_gather");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7E1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v12 = v5;
  uint64_t v13 = 4294967294;
  char v14 = 0;
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(a2, (uint64_t)&v12, 0);
  Espresso::abstract_engine_factory::shared(&v10);
  uint64_t v6 = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "array_gather");
  int v7 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a3, (uint64_t)__p, (uint64_t)&v12, &v7);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192A7E2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AF38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AF38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7E504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(*a2, v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "expand_dims");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7E60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ADE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ADE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7E848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  memset(v10, 0, sizeof(v10));
  int v11 = 2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "squeeze");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7E95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A870;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7EB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  memset(v26, 0, sizeof(v26));
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "tensor_zero_pad");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7ECE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "tensor_zero_pad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7EE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v28 = a4;
  v11[0] = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7EF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B590;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7F1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v11 = 0;
  v10[0] = 0;
  v10[1] = 0;
  unint64_t v12 = 0xFFFFFFFF00000001;
  int v13 = 0;
  char v14 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::fill_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "fill");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7F2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::fill_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "fill");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7F424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  unint64_t v13 = 0xFFFFFFFF00000001;
  int v14 = 0;
  char v15 = 1;
  Espresso::SerDes::params_io<Espresso::fill_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7F540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A090;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7F768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v11 = 0;
  v10[0] = 0;
  *(void *)((char *)v10 + 5) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "matrix_band_part");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7F864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "matrix_band_part");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7F9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  int v12 = 0;
  memset(v11, 0, 13);
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A7FAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B6E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B6E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_matmul");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A7FCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int16 v10 = 1;
  char v11 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "batch_matmul");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A7FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "batch_matmul");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A7FF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  __int16 v11 = 1;
  char v12 = 0;
  Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_matmul");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8004C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AF70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AF70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A80274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 1065353216;
  int v11 = 1065353216;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::range_params_t>(*a2, (float *)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "range");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (float *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::range_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "range");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A804D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v11 = 1065353216;
  int v12 = 1065353216;
  Espresso::SerDes::params_io<Espresso::range_params_t>(a2, (float *)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A805E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_range_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_range_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A218;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_range_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8080C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  uint64_t v11 = 1065353216;
  long long v12 = xmmword_192DCA4C0;
  long long v13 = xmmword_192DC5D50;
  __int16 v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "load_random");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8092C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "load_random");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A80A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  int v11 = 0;
  uint64_t v12 = 1065353216;
  long long v13 = xmmword_192DCA4C0;
  long long v14 = xmmword_192DC5D50;
  __int16 v15 = 0;
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A80BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AE58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AE58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A80DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v11 = v3;
  int v12 = -2;
  __int16 v13 = 0;
  char v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v4 = *a2;
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(*a2, (uint64_t)&v11, 1);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "scatter");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A80EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "scatter");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A81038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v12 = v5;
  int v13 = -2;
  __int16 v14 = 0;
  char v15 = 0;
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(a2, (uint64_t)&v12, 0);
  Espresso::abstract_engine_factory::shared(&v10);
  uint64_t v6 = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter");
  int v7 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a3, (uint64_t)__p, (uint64_t)&v12, &v7);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192A8114C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A800;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A81374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::copy_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "copy");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A81468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::copy_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "copy");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A815C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A020;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_else");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A817E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cf_else");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A818C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "cf_else");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A81A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_else");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A81AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A5D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A5D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A81D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cf_end");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A81DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "cf_end");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A81F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A2C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A2C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_for");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A82254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0x100000001;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cf_for");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8234C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "cf_for");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A824A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = 0x100000001;
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_for");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A825A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A2F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A2F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_loop");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A827D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cf_loop");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A828C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "cf_loop");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A82A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v11[0] = 0;
  v11[1] = a4;
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_loop");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A82B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::~layer_io()
{
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A640;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A82D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cf_if");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A82DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "cf_if");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A82F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A83024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::~layer_io()
{
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A1E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A1E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "store_global");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A83220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v12 = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  v10[0] = 0;
  long long v13 = xmmword_192DC3600;
  uint64_t v14 = 0x100000001;
  int v15 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "store_global");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A83348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  int v28 = *(std::__shared_weak_count **)(v26 + 8);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "store_global");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A834B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v17 = a4;
  v11[0] = 0;
  v11[1] = 0;
  char v13 = 0;
  uint64_t v12 = 0;
  long long v14 = xmmword_192DC3600;
  uint64_t v15 = 0x100000001;
  int v16 = 0;
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "store_global");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_192A835E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::~layer_io()
{
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B088;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A837FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v12 = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  v10[0] = 0;
  long long v13 = xmmword_192DCA4C0;
  unint64_t v14 = 0xFFFFFFFF00000001;
  int v15 = 7;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "load_global");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A8392C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  int v28 = *(std::__shared_weak_count **)(v26 + 8);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "load_global");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A83A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v17 = a4;
  v11[0] = 0;
  v11[1] = 0;
  char v13 = 0;
  uint64_t v12 = 0;
  long long v14 = xmmword_192DCA4C0;
  unint64_t v15 = 0xFFFFFFFF00000001;
  int v16 = 7;
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_192A83BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::~layer_io()
{
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AE20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AE20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "alloc");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A83DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  char v11 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "alloc");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A83EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "alloc");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A84040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  int v11 = 0;
  char v12 = 1;
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "alloc");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A84148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::~layer_io()
{
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A170;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A84344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 2;
  __int16 v11 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "general_concat");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A84444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "general_concat");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8459C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B280;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A847C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v11 = v3;
  int v12 = -2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v4 = *a2;
  Espresso::SerDes::params_io<Espresso::gather_params_t>(*a2, &v11, 1);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "gather");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A848C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::gather_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "gather");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A84A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v12 = v5;
  int v13 = -2;
  Espresso::SerDes::params_io<Espresso::gather_params_t>(a2, &v12, 0);
  Espresso::abstract_engine_factory::shared(&v10);
  uint64_t v6 = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather");
  int v7 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a3, (uint64_t)__p, (uint64_t)&v12, &v7);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192A84B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A448;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A84D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 5;
  __int16 v11 = 0;
  int v12 = -1;
  __int16 v13 = 256;
  char v14 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::topk_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "topk");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A84E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A138;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "get_shape");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A850A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0xFFFFFFFFLL;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "get_shape");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8519C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "get_shape");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A852F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = 0xFFFFFFFFLL;
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "get_shape");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A853F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AB80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AB80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_return");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A85620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cf_return");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A85700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "cf_return");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A85844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_return");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A85930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AB10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AB10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_call");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A85B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[1] = 0;
  uint64_t v11 = 0;
  v10[0] = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cf_call");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A85C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v19 = *(std::__shared_weak_count **)(v16 + 8);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (*(char *)(v17 - 17) < 0) {
    operator delete(*(void **)(v17 - 40));
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "cf_call");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A85DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_call");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_192A85EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A598;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_jump");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A86124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = -1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cf_jump");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A86220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "cf_jump");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A86378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v11[0] = -1;
  v11[1] = a4;
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_jump");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A86478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A608;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_branch");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A866A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)char v10 = 0u;
  int v13 = -1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cf_branch");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[1]);
  }
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A867C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "cf_branch");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A86930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  *(_OWORD *)long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)char v11 = 0u;
  int v14 = -1;
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_branch");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_192A86A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A86C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DCA5A0;
  char v11 = 0;
  int v12 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "spatial_transformer");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A86DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "spatial_transformer");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A86EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  long long v11 = xmmword_192DCA5A0;
  char v12 = 0;
  int v13 = 0;
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A87008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_gather");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A87230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DCA750;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "quantized_gather");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A87330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "quantized_gather");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A87488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  long long v11 = xmmword_192DCA750;
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_gather");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A87590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B750;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_dequantize");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A877B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0xFFFFFFFFLL;
  int v11 = 0;
  uint64_t v12 = 1065353216;
  uint64_t v13 = 0;
  int v14 = 1065353216;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "dynamic_dequantize");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A878D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "dynamic_dequantize");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A87A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v17 = a4;
  uint64_t v11 = 0xFFFFFFFFLL;
  int v12 = 0;
  uint64_t v13 = 1065353216;
  int v14 = 0;
  int v15 = 0;
  int v16 = 1065353216;
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_dequantize");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A87B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B948;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_quantize");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A87D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0xFFFFFFFFLL;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "dynamic_quantize");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A87E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "dynamic_quantize");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A87FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = 0xFFFFFFFFLL;
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_quantize");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A880C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B670;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop_and_resize");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A882EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v12 = 0;
  int v13 = 0;
  char v11 = 0;
  v10[0] = 0;
  v10[1] = 0;
  int v14 = 1065353216;
  char v15 = 0;
  int v16 = 2;
  long long v17 = 0u;
  long long v18 = 0u;
  int v19 = 1;
  char v20 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "crop_and_resize");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A88418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "crop_and_resize");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A88570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v22 = a4;
  int v13 = 0;
  int v14 = 0;
  v11[0] = 0;
  v11[1] = 0;
  char v12 = 0;
  int v15 = 1065353216;
  char v16 = 0;
  int v17 = 2;
  long long v18 = 0u;
  long long v19 = 0u;
  int v20 = 1;
  char v21 = 0;
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop_and_resize");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A886A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B398;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "patch_extractor");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A888C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DCA5A0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  char v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "patch_extractor");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A889D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "patch_extractor");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A88B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  long long v11 = xmmword_192DCA5A0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  char v15 = 0;
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "patch_extractor");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A88C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B478;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "lambda");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A88E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)char v10 = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "lambda");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[1]);
  }
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(v10[0]);
  }
}

void sub_192A88F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "lambda");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A890EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  *(_OWORD *)long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)char v11 = 0u;
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "lambda");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_192A89214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A480;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "compute_stats");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8944C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "compute_stats");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "compute_stats");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A89670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "compute_stats");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8975C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "cast");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A89984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cast_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "cast");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A89A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A89CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = -1;
  v10[1] = -1;
  void v10[2] = 0xFFFFFFFF00000001;
  char v11 = 0;
  int v12 = 0;
  char v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "broadcast");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A89DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "broadcast");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A89F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  v11[0] = -1;
  v11[1] = -1;
  void v11[2] = 0xFFFFFFFF00000001;
  char v12 = 0;
  int v13 = 0;
  char v14 = 0;
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8A03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AAA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AAA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8A264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DCA6B0;
  uint64_t v11 = 0x100000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::slice_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "slice");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A250;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_batch");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8A5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  memset(v10, 0, 37);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "space_to_batch");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "space_to_batch");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8A800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  memset(v11, 0, sizeof(v11));
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_batch");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8A908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B2F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B2F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_depth");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8AB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 2;
  int v11 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "space_to_depth");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8AC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "space_to_depth");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8AD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v11 = 2;
  int v12 = 0;
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_depth");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8AE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B328;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "prediction_smoothing");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8B0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0x3F4CCCCD00000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "prediction_smoothing");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8B1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "prediction_smoothing");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8B318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = 0x3F4CCCCD00000000;
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "prediction_smoothing");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8B420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BAD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BAD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8B648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0;
  v10[1] = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::crop_params>(*a2, v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "crop");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8B73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::crop_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "crop");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8B894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  v11[0] = 0;
  v11[1] = 0;
  Espresso::SerDes::params_io<Espresso::crop_params>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8B994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A058;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_repeat");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8BBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "sequence_repeat");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8BCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "sequence_repeat");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8BE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v11[0] = 1;
  v11[1] = a4;
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_repeat");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8BF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B4E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B4E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_reverse");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8C138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "sequence_reverse");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8C218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "sequence_reverse");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A8C35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_reverse");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8C448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B788;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_concat");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8C670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "sequence_concat");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8C764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "sequence_concat");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8C8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v11[0] = 0;
  v11[1] = a4;
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_concat");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8C9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B4B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B4B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8CBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::flatten_params>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "flatten");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8CCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::flatten_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "flatten");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8CE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = 0;
  Espresso::SerDes::params_io<Espresso::flatten_params>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8CF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A6E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A6E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8D154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DAF430;
  int v11 = 4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "transpose");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8D25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "transpose");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8D3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ABF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ABF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_padding");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8D5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  memset(v10, 0, 76);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::general_padding_params>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "general_padding");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8D6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::general_padding_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "general_padding");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8D830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  memset(v11, 0, sizeof(v11));
  Espresso::SerDes::params_io<Espresso::general_padding_params>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_padding");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8D93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B3D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B3D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn_arch");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8DB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __asm { FMOV            V0.2S, #1.0 }
  v15[1] = _D0;
  v15[0] = 0;
  uint64_t v17 = _D0;
  int v16 = 2;
  uint64_t v19 = _D0;
  int v18 = 0;
  uint64_t v21 = _D0;
  int v20 = 0;
  uint64_t v23 = _D0;
  int v22 = 2;
  uint64_t v25 = _D0;
  uint64_t v26 = 512;
  int v24 = 0;
  int v27 = 1065353216;
  long long v28 = xmmword_192DBFE30;
  uint64_t v30 = 0x100000000;
  uint64_t v31 = 1065353216;
  int v29 = 1112014848;
  int v32 = 1065353216;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  __int16 v36 = 0;
  uint64_t v35 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(*a2, (uint64_t)v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "rnn_arch");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A8DCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "rnn_arch");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8DE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v38 = a4;
  __asm { FMOV            V0.2S, #1.0 }
  v16[1] = _D0;
  v16[0] = 0;
  uint64_t v18 = _D0;
  int v17 = 2;
  uint64_t v20 = _D0;
  int v19 = 0;
  uint64_t v22 = _D0;
  int v21 = 0;
  uint64_t v24 = _D0;
  int v23 = 2;
  uint64_t v26 = _D0;
  int v25 = 0;
  uint64_t v27 = 512;
  long long v29 = xmmword_192DBFE30;
  int v28 = 1065353216;
  int v30 = 1112014848;
  uint64_t v31 = 0x100000000;
  uint64_t v32 = 1065353216;
  int v33 = 1065353216;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  __int16 v37 = 0;
  uint64_t v36 = 0;
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(a2, (uint64_t)v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn_arch");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A8DFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A950;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8E1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0;
  v10[1] = 0x3F80000000000200;
  long long v11 = xmmword_192DCA760;
  long long v12 = xmmword_192DCA770;
  long long v13 = xmmword_192DCA780;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::rnn_params>(*a2, v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "rnn");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8E314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::rnn_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "rnn");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8E46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  v11[0] = 0;
  v11[1] = 0x3F80000000000200;
  long long v12 = xmmword_192DCA760;
  long long v13 = xmmword_192DCA770;
  long long v14 = xmmword_192DCA780;
  Espresso::SerDes::params_io<Espresso::rnn_params>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8E598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389F08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8E7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0x358637BD00000000;
  v10[1] = 0x100000007;
  _OWORD v10[3] = 0;
  void v10[2] = 0;
  unsigned char v10[4] = 0xFFFFFFFF00000000;
  char v11 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "reduce");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8E8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A4F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A4F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "tile");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8EB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v11 = v3;
  int v12 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v4 = *a2;
  Espresso::SerDes::params_io<Espresso::tile_params_t>(*a2, &v11, 1);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "tile");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A8EC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::tile_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "tile");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8ED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v12 = v5;
  int v13 = 1;
  Espresso::SerDes::params_io<Espresso::tile_params_t>(a2, &v12, 0);
  Espresso::abstract_engine_factory::shared(&v10);
  uint64_t v6 = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "tile");
  int v7 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a3, (uint64_t)__p, (uint64_t)&v12, &v7);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192A8EE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A100;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_like");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8F0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  memset(v10, 0, 45);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "reshape_like");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8F1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "reshape_like");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8F300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  memset(v11, 0, 45);
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_like");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8F408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B018;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8F630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0;
  v10[1] = 0;
  long long v11 = xmmword_192DCA380;
  __int16 v12 = 1;
  int v13 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::reshape_params>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "reshape");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8F740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::reshape_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "reshape");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8F898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A7C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A7C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "context_transfer");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A8FABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  memset(v10, 0, sizeof(v10));
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(*a2, v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "context_transfer");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A8FBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  char v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "context_transfer");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A8FD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  memset(v11, 0, sizeof(v11));
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "context_transfer");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A8FE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B600;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_constant");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A90038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v10 = xmmword_192DC3600;
  unint64_t v11 = 0xFFFFFFFF00000001;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::load_constant_params>(*a2, &v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "load_constant");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A90144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B210;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "axpby");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A90380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v15 = _D0;
  long long v16 = 0u;
  memset(v17, 0, sizeof(v17));
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::axpby_params>(*a2, (uint64_t)&v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "axpby");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A90484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::axpby_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "axpby");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A905DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v19 = a4;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v16 = _D0;
  long long v17 = 0u;
  memset(v18, 0, sizeof(v18));
  Espresso::SerDes::params_io<Espresso::axpby_params>(a2, (uint64_t)&v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "axpby");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A906F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A90918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 1056964608;
  uint64_t v11 = 1993;
  int v12 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dropout_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "dropout_grad");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A90A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dropout_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "dropout_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A90B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = 0;
  int v14 = a4;
  int v11 = 1056964608;
  uint64_t v12 = 1993;
  Espresso::SerDes::params_io<Espresso::dropout_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout_grad");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A90C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AFA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AFA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A90EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 1056964608;
  uint64_t v11 = 1993;
  int v12 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dropout_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "dropout");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A90FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dropout_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "dropout");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A91118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = 0;
  int v14 = a4;
  int v11 = 1056964608;
  uint64_t v12 = 1993;
  Espresso::SerDes::params_io<Espresso::dropout_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A91228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A6B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A6B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A91450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0;
  v10[1] = 1065353216;
  _OWORD v10[2] = 897988541;
  char v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::elementwise_params>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "elementwise_grad");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A91568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "elementwise_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A916C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  v11[0] = 0;
  v11[1] = 1065353216;
  _OWORD v11[2] = 897988541;
  char v12 = 0;
  uint64_t v13 = 0;
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise_grad");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A917E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_weights_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A91A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v20 = 0;
  int v22 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v23 = _D0;
  uint64_t v28 = 0;
  long long v15 = xmmword_192DCA240;
  int v16 = 0;
  uint64_t v17 = _D0;
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  int v19 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "inner_product_weights_grad");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A91B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "inner_product_weights_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A91CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v30 = a4;
  char v21 = 0;
  int v23 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v24 = _D0;
  uint64_t v29 = 0;
  long long v16 = xmmword_192DCA240;
  int v17 = 0;
  uint64_t v18 = _D0;
  uint64_t v25 = 0;
  uint64_t v19 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  uint64_t v26 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_weights_grad");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A91DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BD00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BD00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A92018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v20 = 0;
  int v22 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v23 = _D0;
  uint64_t v28 = 0;
  long long v15 = xmmword_192DCA240;
  int v16 = 0;
  uint64_t v17 = _D0;
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  int v19 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "inner_product_grad");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A9215C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "inner_product_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A922B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v30 = a4;
  char v21 = 0;
  int v23 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v24 = _D0;
  uint64_t v29 = 0;
  long long v16 = xmmword_192DCA240;
  int v17 = 0;
  uint64_t v18 = _D0;
  uint64_t v25 = 0;
  uint64_t v19 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  uint64_t v26 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_grad");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A92400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B980;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A92628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 897988541;
  uint64_t v11 = 0x200000003;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "l2_normalize_grad");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A92734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "l2_normalize_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A9288C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  int v11 = 897988541;
  uint64_t v12 = 0x200000003;
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize_grad");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A929A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B7C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B7C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A92BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 897988541;
  uint64_t v11 = 0x200000003;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "l2_normalize");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A92CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "l2_normalize");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A92E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  int v11 = 897988541;
  uint64_t v12 = 0x200000003;
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A92F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AFE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AFE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A93168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0x3F6666663727C5ACLL;
  __int16 v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  int v16 = 1065353216;
  uint64_t v17 = 0;
  uint64_t v18 = 0x200000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "batchnorm_grad");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A93294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "batchnorm_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A933EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v20 = a4;
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0x3F6666663727C5ACLL;
  __int16 v14 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  int v17 = 1065353216;
  uint64_t v18 = 0;
  uint64_t v19 = 0x200000000;
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_grad");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A93520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B248;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A93748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0x3F6666663727C5ACLL;
  __int16 v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  int v16 = 1065353216;
  uint64_t v17 = 0;
  uint64_t v18 = 0x200000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "batchnorm");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A93874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "batchnorm");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A939CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AA30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AA30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "bias_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A93BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  char v11 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::bias_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "bias_grad");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A93CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::bias_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "bias_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A93E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  int v11 = 0;
  char v12 = 0;
  Espresso::SerDes::params_io<Espresso::bias_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "bias_grad");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A93F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AA68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A9416C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v10 = 0;
  char v11 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::bias_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "bias");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A94264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::bias_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "bias");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A943BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  int v11 = 0;
  char v12 = 0;
  Espresso::SerDes::params_io<Espresso::bias_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A944C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A946E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v15 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v16 = _D0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::activation_params>(*a2, (uint64_t)&v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "activation_grad");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A947EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::activation_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "activation_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A94944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v21 = a4;
  int v16 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v17 = _D0;
  uint64_t v18 = 0;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  Espresso::SerDes::params_io<Espresso::activation_params>(a2, (uint64_t)&v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation_grad");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A94A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B360;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A94C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v17 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v18 = _D0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::activation_params>(*a2, (uint64_t)&v17, 1);
  std::string::basic_string[abi:ne180100]<0>(v11, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v11, &v13);
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  (*(void (**)(uint64_t, void **, void **))(*(void *)v13 + 232))(v13, &v15, __p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_192A94DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a21);
  if (a20 < 0) {
    operator delete(a15);
  }
  int v23 = *(std::__shared_weak_count **)(v21 + 8);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::activation_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  (*(void (**)(uint64_t, void **, void **))(*(void *)v10 + 232))(v10, &v12, __p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_192A94F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_loss_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A951B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v12 = 256;
  long long v10 = xmmword_192DCA290;
  uint64_t v11 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::softmax_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "softmax_loss_grad");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A952CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::softmax_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "softmax_loss_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A95424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  int v13 = 256;
  long long v11 = xmmword_192DCA290;
  uint64_t v12 = 1;
  Espresso::SerDes::params_io<Espresso::softmax_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_loss_grad");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A95540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B868;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "concat_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A95768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v12 = 0;
  __int16 v11 = 0;
  v10[0] = 0;
  _OWORD v10[8] = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::concat_params>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "concat_grad");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A95868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::concat_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "concat_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A959C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  char v13 = 0;
  __int16 v12 = 0;
  v11[0] = 0;
  unsigned char v11[8] = 0;
  Espresso::SerDes::params_io<Espresso::concat_params>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "concat_grad");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A95ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AD40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AD40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A95CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = xmmword_192DCA400;
  v10[1] = xmmword_192DCA240;
  int v11 = 2;
  __int16 v12 = 1;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0x100000001;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::pool_params>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "pool_grad");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A95E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::pool_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "pool_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A95F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v21 = a4;
  v11[0] = xmmword_192DCA400;
  v11[1] = xmmword_192DCA240;
  int v12 = 2;
  __int16 v13 = 1;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0x100000001;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  Espresso::SerDes::params_io<Espresso::pool_params>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool_grad");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A960C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ABB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ABB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_weights_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A962E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int16 v19 = 1;
  uint64_t v21 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v20 = 0;
  __int16 v22 = 0;
  uint64_t v23 = 0x1000100010001;
  int v24 = 0;
  int v26 = 1;
  int v34 = 0;
  char v35 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  long long v16 = xmmword_192DCA220;
  memset(v15, 0, 32);
  v15[4] = 1;
  long long v25 = xmmword_192DCA230;
  uint64_t v27 = 0;
  __int16 v29 = 1;
  unint64_t v17 = 0xFFFFFFFF00000000;
  uint64_t v18 = _D0;
  __int16 v28 = 0;
  int v32 = 0;
  __int16 v33 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "convolution_weights_grad");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A9645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "convolution_weights_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A965B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v37 = a4;
  __int16 v20 = 1;
  uint64_t v22 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v21 = 0;
  __int16 v23 = 0;
  uint64_t v24 = 0x1000100010001;
  int v25 = 0;
  int v27 = 1;
  int v35 = 0;
  char v36 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v17 = xmmword_192DCA220;
  memset(v16, 0, 32);
  v16[4] = 1;
  long long v26 = xmmword_192DCA230;
  uint64_t v28 = 0;
  __int16 v30 = 1;
  unint64_t v18 = 0xFFFFFFFF00000000;
  uint64_t v19 = _D0;
  __int16 v29 = 0;
  int v33 = 0;
  __int16 v34 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_weights_grad");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A96728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BC58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BC58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_grad");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A96950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int16 v19 = 1;
  uint64_t v21 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v20 = 0;
  __int16 v22 = 0;
  uint64_t v23 = 0x1000100010001;
  int v24 = 0;
  int v26 = 1;
  int v34 = 0;
  char v35 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  long long v16 = xmmword_192DCA220;
  memset(v15, 0, 32);
  v15[4] = 1;
  long long v25 = xmmword_192DCA230;
  uint64_t v27 = 0;
  __int16 v29 = 1;
  unint64_t v17 = 0xFFFFFFFF00000000;
  uint64_t v18 = _D0;
  __int16 v28 = 0;
  int v32 = 0;
  __int16 v33 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "convolution_grad");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A96AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "convolution_grad");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A96C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v37 = a4;
  __int16 v20 = 1;
  uint64_t v22 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v21 = 0;
  __int16 v23 = 0;
  uint64_t v24 = 0x1000100010001;
  int v25 = 0;
  int v27 = 1;
  int v35 = 0;
  char v36 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v17 = xmmword_192DCA220;
  memset(v16, 0, 32);
  v16[4] = 1;
  long long v26 = xmmword_192DCA230;
  uint64_t v28 = 0;
  __int16 v30 = 1;
  unint64_t v18 = 0xFFFFFFFF00000000;
  uint64_t v19 = _D0;
  __int16 v29 = 0;
  int v33 = 0;
  __int16 v34 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_grad");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A96D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B638;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A96FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int16 v19 = 1;
  uint64_t v21 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v20 = 0;
  __int16 v22 = 0;
  uint64_t v23 = 0x1000100010001;
  int v24 = 0;
  int v26 = 1;
  int v34 = 0;
  char v35 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  long long v16 = xmmword_192DCA220;
  memset(v15, 0, 32);
  v15[4] = 1;
  long long v25 = xmmword_192DCA230;
  uint64_t v27 = 0;
  __int16 v29 = 1;
  unint64_t v17 = 0xFFFFFFFF00000000;
  uint64_t v18 = _D0;
  __int16 v28 = 0;
  int v32 = 0;
  __int16 v33 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "deconvolution");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A9712C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "deconvolution");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A97284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B130;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "split");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A974A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v11 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0x200000002;
  int v14 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::split_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "split");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A975B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::split_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "split");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A97708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A288;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A9792C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = 0;
  v10[1] = 1065353216;
  _OWORD v10[2] = 897988541;
  char v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::elementwise_params>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "elementwise");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A97A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ADB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ADB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A97C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v15 = xmmword_192DCA210;
  uint64_t v16 = 0x100000000;
  char v17 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v18 = _D0;
  char v19 = 1;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  uint64_t v23 = _D0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(*a2, (uint64_t)&v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "upsample");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A97DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  char v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "upsample");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A97F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "concat");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A98128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v12 = 0;
  __int16 v11 = 0;
  v10[0] = 0;
  _OWORD v10[8] = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::concat_params>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "concat");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A98228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  char v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::concat_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "concat");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A98380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A330;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_quantized");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A985A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v20 = 0;
  int v22 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v23 = _D0;
  uint64_t v28 = 0;
  long long v15 = xmmword_192DCA240;
  int v16 = 0;
  uint64_t v17 = _D0;
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  int v19 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "inner_product_quantized");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A986E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "inner_product_quantized");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A98840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v30 = a4;
  char v21 = 0;
  int v23 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v24 = _D0;
  uint64_t v29 = 0;
  long long v16 = xmmword_192DCA240;
  int v17 = 0;
  uint64_t v18 = _D0;
  uint64_t v25 = 0;
  uint64_t v19 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  uint64_t v26 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_quantized");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192A9898C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BBB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BBB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A98BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v20 = 0;
  int v22 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v23 = _D0;
  uint64_t v28 = 0;
  long long v15 = xmmword_192DCA240;
  int v16 = 0;
  uint64_t v17 = _D0;
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v21 = 0;
  int v19 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "inner_product");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A98CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B1D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B1D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A98F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v12 = 256;
  long long v10 = xmmword_192DCA290;
  uint64_t v11 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::softmax_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "softmax");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A99048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::softmax_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "softmax");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A991A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A838;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A993C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  v10[0] = xmmword_192DCA400;
  v10[1] = xmmword_192DCA240;
  int v11 = 2;
  __int16 v12 = 1;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0x100000001;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::pool_params>(*a2, (uint64_t)v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "pool");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A994F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::pool_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "pool");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A99650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A0C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A0C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A99874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0x3F40000038D1B717;
  int v11 = 3;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v3 = *a2;
  Espresso::SerDes::params_io<Espresso::lrn_params>(*a2, (uint64_t)&v10, 1);
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "lrn");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A99984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::lrn_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "lrn");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A99ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  uint64_t v11 = 0x3F40000038D1B717;
  int v12 = 3;
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  Espresso::SerDes::params_io<Espresso::lrn_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A99BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A99E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int16 v19 = 1;
  uint64_t v21 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v20 = 0;
  __int16 v22 = 0;
  uint64_t v23 = 0x1000100010001;
  int v24 = 0;
  int v26 = 1;
  int v34 = 0;
  char v35 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  long long v16 = xmmword_192DCA220;
  memset(v15, 0, 32);
  v15[4] = 1;
  long long v25 = xmmword_192DCA230;
  uint64_t v27 = 0;
  __int16 v29 = 1;
  unint64_t v17 = 0xFFFFFFFF00000000;
  uint64_t v18 = _D0;
  __int16 v28 = 0;
  int v32 = 0;
  __int16 v33 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(a2, a1);
  uint64_t v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v15, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "convolution");
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_192A99F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "convolution");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192A9A0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AD78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AD78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  int v13 = a4;
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v11);
  uint64_t v7 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "no_op");
  int v8 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v8);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A9A30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v4, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v4, &v6);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v6, "no_op");
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_192A9A3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  (*(void (**)(void *))(*(void *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v5, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v7, "no_op");
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192A9A530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "no_op");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A9A61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::~layer_io()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::no_op_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::no_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389E98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::no_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389E98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::SerDes::layer_io_base::throw_inconstistent_state(Espresso::SerDes::layer_io_base *this)
{
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 696) = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 704);
  *(void *)(a1 + 704) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_quantization_lut_blob()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented/deprecated");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192A9A824(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(unsigned int *)(v3 + 12);
  int v7 = *(_DWORD *)(v3 + 16);
  int v8 = *(_DWORD *)(v3 + 20);
  int v9 = v7 - 1;
  if (v7 < 1) {
    int v9 = v7 + 2;
  }
  int v10 = v9 >> 2;
  int v11 = (v9 >> 2) + 1;
  int v12 = v8 - 1;
  if (v8 < 1) {
    int v12 = v8 + 2;
  }
  int v13 = v12 >> 2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(&v61, 4, 4, *(_DWORD *)(v3 + 8), *(_DWORD *)(v3 + 12), v11, (v12 >> 2) + 1);
  uint64_t v14 = 0;
  uint64_t v15 = 1;
  do
  {
    *(void *)&v63[8 * v14] = (int)v15;
    v15 *= *(unsigned int *)(v3 + 8 + 4 * v14++);
  }
  while (v14 != 4);
  uint64_t v16 = v64;
  uint64_t v17 = v65;
  uint64_t v18 = v66;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = 0;
  uint64_t v58 = *(unsigned char **)(v3 + 24);
  uint64_t v20 = v61;
  uint64_t v21 = 1;
  do
  {
    *(void *)&v63[8 * v19] = (int)v21;
    v21 *= *(unsigned int *)(v20 + 4 * v19++ + 8);
  }
  while (v19 != 6);
  uint64_t v22 = v64;
  uint64_t v23 = v65;
  uint64_t v24 = v66;
  uint64_t v60 = v67;
  uint64_t v55 = v68;
  long long v25 = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v50 = v25;
  uint64_t v57 = *(unsigned char **)(v20 + 32);
  uint64_t v26 = *(int *)(v20 + 8);
  for (uint64_t i = 12; i != 32; i += 4)
    v26 *= *(int *)(v20 + i);
  unint64_t v52 = v4;
  uint64_t v53 = a1;
  if (v26)
  {
    for (uint64_t j = 0; j != v26; ++j)
      *(unsigned char *)(*(void *)(v20 + 32) + j) = 0;
  }
  uint64_t v51 = v20;
  if (v8 >= -2)
  {
    uint64_t v29 = 0;
    if (v8 >= 4) {
      int v30 = 4;
    }
    else {
      int v30 = v8;
    }
    if (v7 >= 4) {
      int v31 = 4;
    }
    else {
      int v31 = v7;
    }
    if (v31 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v31;
    }
    if (v30 <= 1) {
      uint64_t v33 = 1;
    }
    else {
      uint64_t v33 = v30;
    }
    uint64_t v59 = (v10 & ~(v10 >> 31)) + 1;
    uint64_t v54 = (v13 & ~(v13 >> 31)) + 1;
    do
    {
      uint64_t v56 = v29;
      if (v7 >= -2)
      {
        uint64_t v34 = 0;
        char v35 = v57;
        char v36 = v58;
        do
        {
          if ((int)v6 >= 1)
          {
            uint64_t v37 = 0;
            int v38 = v36;
            long long v39 = v35;
            do
            {
              if ((int)v5 >= 1)
              {
                uint64_t v40 = 0;
                long long v41 = v38;
                long long v42 = v39;
                do
                {
                  if (v8 >= 1)
                  {
                    uint64_t v43 = 0;
                    int v44 = v41;
                    std::string v45 = v42;
                    do
                    {
                      unint64_t v46 = v44;
                      uint64_t v47 = v45;
                      uint64_t v48 = v32;
                      if (v7 >= 1)
                      {
                        do
                        {
                          *v47++ = *v46;
                          v46 += v17;
                          --v48;
                        }
                        while (v48);
                      }
                      ++v43;
                      v45 += v22;
                      v44 += v18;
                    }
                    while (v43 != v33);
                  }
                  ++v40;
                  v42 += v23;
                  ++v41;
                }
                while (v40 != v5);
              }
              ++v37;
              v39 += v24;
              v38 += v16;
            }
            while (v37 != v6);
          }
          ++v34;
          v35 += v60;
          v36 += 4 * v17;
        }
        while (v34 != v59);
      }
      uint64_t v29 = v56 + 1;
      v57 += v55;
      v58 += 4 * v18;
    }
    while (v56 + 1 != v54);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  if (v52)
  {
    nitro::nitro_function::nitro_function(v52);
    nitro::nitro_function::nitro_function(v52);
  }
  if (v50) {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v53 + 680) = v51;
  uint64_t v49 = *(std::__shared_weak_count **)(v53 + 688);
  *(void *)(v53 + 688) = v50;
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  if (v50)
  {
    nitro::nitro_function::nitro_function(v50);
  }
}

void sub_192A9ABA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MetalLowmemEngine::meta_convolution_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 656);
  *a2 = *(void *)(this + 648);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::MetalLowmemEngine::meta_convolution_kernel::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 672);
  *a2 = *(void *)(this + 664);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_weights(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 648) = v6;
  int v7 = *(std::__shared_weak_count **)(a1 + 656);
  *(void *)(a1 + 656) = v5;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  int v8 = *(std::__shared_weak_count **)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_weights_bias_if_ready(a1);
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_192A9AC8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_weights_bias_if_ready(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 696);
  if (v2)
  {
    if (*(void *)(a1 + 680))
    {
      uint64_t v3 = *(void *)(a1 + 664);
      if (v3)
      {
        uint64_t v4 = *(std::__shared_weak_count **)(a1 + 672);
        if (v4)
        {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v2 = *(void *)(a1 + 696);
        }
        uint64_t v5 = *(std::__shared_weak_count **)(a1 + 704);
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(_DWORD *)(a1 + 416))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v171, *(_DWORD *)(a1 + 344), 1, 1, 1);
          uint64_t v3 = v171;
          uint64_t v6 = v172;
          if (v4) {
            nitro::nitro_function::nitro_function(v4);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v171, 2 * *(_DWORD *)(a1 + 344), 1, 1, 1);
          uint64_t v2 = v171;
          int v7 = v172;
          if (v5) {
            nitro::nitro_function::nitro_function(v5);
          }
          uint64_t v8 = *(void *)(a1 + 664);
          int v9 = *(std::__shared_weak_count **)(a1 + 672);
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v10 = *(unsigned int *)(a1 + 344);
          if ((int)v10 >= 1)
          {
            uint64_t v11 = 0;
            uint64_t v12 = *(void *)(v8 + 16);
            uint64_t v13 = *(void *)(*(void *)(a1 + 696) + 16);
            uint64_t v14 = *(void *)(v2 + 16);
            uint64_t v15 = 4 * v10;
            uint64_t v16 = *(void *)(v3 + 16);
            uint64_t v17 = v14 + 4 * v10;
            uint64_t v18 = v13 + 4 * v10;
            uint64_t v19 = (float *)(v12 + 8);
            do
            {
              float v20 = *(v19 - 2);
              float v21 = *(v19 - 1);
              float v22 = *v19;
              float v23 = v19[1];
              v19 += 4;
              float v24 = 1.0 / v23;
              *(float *)(v14 + v11) = (float)(v20 * v24) * *(float *)(v13 + v11);
              *(float *)(v17 + v11) = (float)(v20 * v24) * *(float *)(v18 + v11);
              *(float *)(v16 + v11) = v21 + (float)((float)-(float)(v22 * v24) * v20);
              v11 += 4;
            }
            while (v15 != v11);
          }
          if (v9) {
            nitro::nitro_function::nitro_function(v9);
          }
          uint64_t v5 = v7;
          uint64_t v4 = v6;
        }
        long long v25 = *(const void **)(a1 + 8);
        if (!v25
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
          exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
        }
        uint64_t v27 = *(std::__shared_weak_count **)(a1 + 16);
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __int16 v28 = (void *)v26[18];
        uint64_t v29 = *(void *)(a1 + 680);
        uint64_t v30 = *(int *)(v29 + 8);
        for (uint64_t i = 12; i != 32; i += 4)
          v30 *= *(int *)(v29 + i);
        uint64_t v32 = [v28 newBufferWithBytes:*(void *)(v29 + 32) length:v30 options:0];
        uint64_t v33 = *(void **)(a1 + 616);
        *(void *)(a1 + 616) = v32;

        if (v27) {
          nitro::nitro_function::nitro_function(v27);
        }
        uint64_t v34 = *(const void **)(a1 + 8);
        if (!v34
        {
          int16x8_t v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v150, "Espresso: wrong_context_type");
          v150->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
        }
        char v36 = *(std::__shared_weak_count **)(a1 + 16);
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v37 = [v35[18] newBufferWithBytes:*(void *)(v2 + 16) length:4 * *(int *)(v2 + 8) options:0];
        int v38 = *(void **)(a1 + 624);
        *(void *)(a1 + 624) = v37;

        if (v36) {
          nitro::nitro_function::nitro_function(v36);
        }
        long long v39 = *(const void **)(a1 + 8);
        if (!v39 {
          || (uint64_t v40 = *(int *)(v3 + 8),
        }
        {
          uint64_t v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v151, "Espresso: wrong_context_type");
          v151->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
        }
        long long v42 = *(std::__shared_weak_count **)(a1 + 16);
        if (v42) {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v43 = (void *)v41[18];
        if ((unint64_t)(2 * v40) <= 0x10) {
          uint64_t v44 = 16;
        }
        else {
          uint64_t v44 = 2 * v40;
        }
        uint64_t v45 = [v43 newBufferWithLength:v44 options:0];
        unint64_t v46 = *(void **)(a1 + 632);
        *(void *)(a1 + 632) = v45;

        if (v42) {
          nitro::nitro_function::nitro_function(v42);
        }
        uint64_t v47 = *(int **)(v3 + 16);
        uint64_t v48 = (_WORD *)[*(id *)(a1 + 632) contents];
        if (v40)
        {
          do
          {
            int v49 = *v47++;
            _S0 = v49;
            __asm { FCVT            H0, S0 }
            *v48++ = _S0;
            --v40;
          }
          while (v40);
        }
        if (!*(void *)(a1 + 616)) {
          *(_DWORD *)(a1 + 580) = 1;
        }
        if (!v5) {
          goto LABEL_151;
        }
        uint64_t v55 = v5;
        goto LABEL_150;
      }
    }
  }
  uint64_t v56 = *(void *)(a1 + 664);
  if (!v56 && (*(_DWORD *)(a1 + 336) || *(_DWORD *)(a1 + 416))) {
    return;
  }
  uint64_t v57 = *(void *)(a1 + 648);
  if (!v57) {
    return;
  }
  uint64_t v58 = *(std::__shared_weak_count **)(a1 + 672);
  if (v58)
  {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v57 = *(void *)(a1 + 648);
  }
  uint64_t v59 = *(std::__shared_weak_count **)(a1 + 656);
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(_DWORD *)(a1 + 416))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v171, *(_DWORD *)(a1 + 344), 1, 1, 1);
    uint64_t v56 = v171;
    uint64_t v60 = v172;
    if (v58) {
      nitro::nitro_function::nitro_function(v58);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v171, *(void *)(a1 + 648) + 8);
    uint64_t v57 = v171;
    uint64_t v62 = v172;
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    Espresso::util_bake_batchnorm_generic(*(unsigned int *)(a1 + 344), *(_DWORD *)(*(void *)(a1 + 648) + 12)* *(_DWORD *)(*(void *)(a1 + 648) + 8)* *(_DWORD *)(*(void *)(a1 + 648) + 16), 1, *(void *)(*(void *)(a1 + 648) + 24), *(const float **)(v57 + 24), *(float **)(*(void *)(a1 + 664) + 16), *(const float **)(v56 + 16), v61);
    uint64_t v59 = v62;
  }
  else
  {
    uint64_t v60 = v58;
  }
  int v156 = v60;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v63 = *(unsigned int *)(v57 + 8);
  uint64_t v64 = *(unsigned int *)(v57 + 12);
  int v66 = *(_DWORD *)(v57 + 16);
  int v65 = *(_DWORD *)(v57 + 20);
  int v67 = v66 - 1;
  if (v66 < 1) {
    int v67 = v66 + 2;
  }
  int v68 = v67 >> 2;
  int v69 = (v67 >> 2) + 1;
  int v70 = v65 - 1;
  if (v65 < 1) {
    int v70 = v65 + 2;
  }
  int v167 = v70 >> 2;
  int v155 = v59;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(&v169, 4, 4, v63, v64, v69, (v70 >> 2) + 1);
  uint64_t v71 = 0;
  uint64_t v72 = 1;
  do
  {
    *(&v171 + v71) = (int)v72;
    v72 *= *(unsigned int *)(v57 + 8 + 4 * v71++);
  }
  while (v71 != 4);
  id v73 = v172;
  uint64_t v74 = v173;
  uint64_t v75 = v174;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v163 = v68;
  uint64_t v153 = a1;
  uint64_t v76 = 0;
  int v165 = *(_DWORD **)(v57 + 24);
  uint64_t v77 = v169;
  uint64_t v78 = v169 + 8;
  uint64_t v79 = 1;
  do
  {
    *(&v171 + v76) = (int)v79;
    v79 *= *(unsigned int *)(v78 + 4 * v76++);
  }
  while (v76 != 6);
  std::string v81 = v172;
  uint64_t v80 = v173;
  uint64_t v83 = v174;
  uint64_t v82 = v175;
  uint64_t v84 = v176;
  long long v85 = v170;
  if (v170) {
    atomic_fetch_add_explicit(&v170->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v166 = *(char **)(v77 + 32);
  uint64_t v86 = *(int *)(v77 + 8);
  for (uint64_t j = 12; j != 32; j += 4)
    v86 *= *(int *)(v77 + j);
  uint64_t v157 = v77;
  uint64_t v152 = v56;
  size_t v154 = v85;
  if (v86)
  {
    uint64_t v159 = v84;
    int v161 = v73;
    uint64_t v88 = v74;
    uint64_t v89 = v75;
    bzero(v166, 4 * v86);
    uint64_t v84 = v159;
    id v73 = v161;
    uint64_t v75 = v89;
    uint64_t v74 = v88;
  }
  if (v65 >= -2)
  {
    uint64_t v90 = 0;
    int v91 = v167 & ~(v167 >> 31);
    if (v65 >= 4) {
      int v92 = 4;
    }
    else {
      int v92 = v65;
    }
    uint64_t v162 = 4 * v84;
    uint64_t v168 = 4 * v82;
    if (v66 >= 4) {
      int v93 = 4;
    }
    else {
      int v93 = v66;
    }
    uint64_t v94 = 4 * v83;
    uint64_t v95 = 4 * v80;
    if (v93 <= 1) {
      uint64_t v96 = 1;
    }
    else {
      uint64_t v96 = v93;
    }
    uint64_t v97 = 4 * (void)v81;
    if (v92 <= 1) {
      uint64_t v98 = 1;
    }
    else {
      uint64_t v98 = v92;
    }
    uint64_t v99 = 16 * v74;
    uint64_t v100 = (v163 & ~(v163 >> 31)) + 1;
    uint64_t v101 = 4 * (void)v73;
    uint64_t v158 = (v91 + 1);
    uint64_t v160 = 16 * v75;
    uint64_t v102 = 4 * v75;
    uint64_t v103 = 4 * v74;
    do
    {
      uint64_t v164 = v90;
      if (v66 >= -2)
      {
        uint64_t v104 = 0;
        uint64_t v105 = v165;
        uint64_t v106 = v166;
        do
        {
          if ((int)v64 >= 1)
          {
            uint64_t v107 = 0;
            uint64_t v108 = v105;
            uint64_t v109 = v106;
            do
            {
              if ((int)v63 >= 1)
              {
                uint64_t v110 = 0;
                long long v111 = v108;
                long long v112 = v109;
                do
                {
                  if (v65 >= 1)
                  {
                    uint64_t v113 = 0;
                    long long v114 = v111;
                    uint64_t v115 = v112;
                    do
                    {
                      long long v116 = v114;
                      uint64_t v117 = v115;
                      uint64_t v118 = v96;
                      if (v66 >= 1)
                      {
                        do
                        {
                          *v117++ = *v116;
                          long long v116 = (_DWORD *)((char *)v116 + v103);
                          --v118;
                        }
                        while (v118);
                      }
                      ++v113;
                      uint64_t v115 = (_DWORD *)((char *)v115 + v97);
                      long long v114 = (_DWORD *)((char *)v114 + v102);
                    }
                    while (v113 != v98);
                  }
                  ++v110;
                  long long v112 = (_DWORD *)((char *)v112 + v95);
                  ++v111;
                }
                while (v110 != v63);
              }
              ++v107;
              v109 += v94;
              uint64_t v108 = (_DWORD *)((char *)v108 + v101);
            }
            while (v107 != v64);
          }
          ++v104;
          v106 += v168;
          uint64_t v105 = (_DWORD *)((char *)v105 + v99);
        }
        while (v104 != v100);
      }
      uint64_t v90 = v164 + 1;
      v166 += v162;
      int v165 = (_DWORD *)((char *)v165 + v160);
    }
    while (v164 + 1 != v158);
  }
  if (v154) {
    nitro::nitro_function::nitro_function(v154);
  }
  if (v155)
  {
    nitro::nitro_function::nitro_function(v155);
    nitro::nitro_function::nitro_function(v155);
  }
  int v119 = *(void **)(v153 + 616);
  *(void *)(v153 + 616) = 0;

  uint64_t v120 = *(int *)(v157 + 8);
  for (uint64_t k = 12; k != 32; k += 4)
    v120 *= *(int *)(v157 + k);
  unint64_t v122 = *(const void **)(v153 + 8);
  if (!v122
  {
    uint8x16_t v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v147, "Espresso: wrong_context_type");
    v147->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v124 = *(std::__shared_weak_count **)(v153 + 16);
  if (v124) {
    atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v125 = (void *)v123[18];
  if ((unint64_t)(2 * v120) <= 0x10) {
    uint64_t v126 = 16;
  }
  else {
    uint64_t v126 = 2 * v120;
  }
  uint64_t v127 = [v125 newBufferWithLength:v126 options:0];
  float v128 = *(void **)(v153 + 616);
  *(void *)(v153 + 616) = v127;

  if (v124) {
    nitro::nitro_function::nitro_function(v124);
  }
  uint64_t v129 = *(int **)(v157 + 32);
  for (m = (_WORD *)[*(id *)(v153 + 616) contents]; v120; --v120)
  {
    int v131 = *v129++;
    _S0 = v131;
    __asm { FCVT            H0, S0 }
    *m++ = _S0;
  }
  float v133 = *(void **)(v153 + 632);
  *(void *)(v153 + 632) = 0;

  unint64_t v134 = (int *)(v153 + 344);
  if (v152) {
    unint64_t v134 = (int *)(v152 + 8);
  }
  unint64_t v135 = *(const void **)(v153 + 8);
  if (!v135 {
    || (uint64_t v136 = *v134,
  }
  {
    int16x8_t v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v148, "Espresso: wrong_context_type");
    v148->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v138 = *(std::__shared_weak_count **)(v153 + 16);
  if (v138) {
    atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v139 = (void *)v137[18];
  if ((unint64_t)(2 * v136) <= 0x10) {
    uint64_t v140 = 16;
  }
  else {
    uint64_t v140 = 2 * v136;
  }
  uint64_t v141 = [v139 newBufferWithLength:v140 options:0];
  std::string::size_type v142 = *(void **)(v153 + 632);
  *(void *)(v153 + 632) = v141;

  if (v138) {
    nitro::nitro_function::nitro_function(v138);
  }
  if (v152)
  {
    uint64_t v143 = *(int **)(v152 + 16);
    uint64_t v4 = v156;
    int32x4_t v144 = (_WORD *)[*(id *)(v153 + 632) contents];
    if (v136)
    {
      do
      {
        int v145 = *v143++;
        _S0 = v145;
        __asm { FCVT            H0, S0 }
        *v144++ = _S0;
        --v136;
      }
      while (v136);
    }
  }
  else
  {
    uint64_t v4 = v156;
    bzero((void *)[*(id *)(v153 + 632) contents], objc_msgSend(*(id *)(v153 + 632), "length"));
  }
  if (v154) {
    nitro::nitro_function::nitro_function(v154);
  }
  if (v155)
  {
    uint64_t v55 = v155;
LABEL_150:
    nitro::nitro_function::nitro_function(v55);
  }
LABEL_151:
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_192A9B824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_biases(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 664) = v6;
  int v7 = *(std::__shared_weak_count **)(a1 + 672);
  *(void *)(a1 + 672) = v5;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_weights_bias_if_ready(a1);
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_192A9B9E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_weights()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Invalid call");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192A9BA40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 424))(a1, &v5, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192A9BAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 416))(a1, &v5, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192A9BB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, std::__shared_weak_count_vtbl *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v8 = a3;
  int v9 = a2;
  uint64_t v10 = a1;
  uint64_t v11 = (_OWORD *)(a1 + 792);
  Espresso::generic_convolution_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  int v12 = *(_DWORD *)(v10 + 424);
  if (v12 <= 1) {
    int v12 = 1;
  }
  if ((char)v8[23] < 0)
  {
    uint64_t v16 = *((void *)v8 + 1);
    if (v16 != 7)
    {
      if (v16 != 9)
      {
        if (v16 != 11) {
          goto LABEL_121;
        }
        uint64_t v17 = *(uint64_t **)v8;
        if (**(void **)v8 == 0x74666968735F7868 && *(void *)(*(void *)v8 + 3) == 0x74756F7466696873) {
          goto LABEL_98;
        }
        uint64_t v19 = *v17;
        uint64_t v20 = *(uint64_t *)((char *)v17 + 3);
        if (v19 == 0x656C6163735F7868 && v20 == 0x74756F656C616373)
        {
LABEL_29:
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v139, *(_DWORD *)(v10 + 344) * v12, 1, 1, 1);
          std::string::size_type v22 = v139.__r_.__value_.__r.__words[0];
          float v23 = *(std::__shared_weak_count **)(v10 + 816);
          v11[1] = *(_OWORD *)&v139.__r_.__value_.__l.__data_;
          if (v23)
          {
            nitro::nitro_function::nitro_function(v23);
            std::string::size_type v24 = *((void *)v11 + 2);
          }
          else
          {
            std::string::size_type v24 = v22;
          }
          if (a5 != 4 * *(int *)(v24 + 8))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v136, a5);
            long long v114 = std::string::insert(&v136, 0, "Unexpected size ");
            long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
            v137.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v115;
            v114->__r_.__value_.__l.__size_ = 0;
            v114->__r_.__value_.__r.__words[2] = 0;
            v114->__r_.__value_.__r.__words[0] = 0;
            long long v116 = std::string::append(&v137, "/");
            long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
            v138.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v117;
            v116->__r_.__value_.__l.__size_ = 0;
            v116->__r_.__value_.__r.__words[2] = 0;
            v116->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v135, 4 * *(int *)(*((void *)v11 + 2) + 8));
            if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v118 = &v135;
            }
            else {
              uint64_t v118 = (std::string *)v135.__r_.__value_.__r.__words[0];
            }
            if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v135.__r_.__value_.__l.__size_;
            }
            uint64_t v120 = std::string::append(&v138, (const std::string::value_type *)v118, size);
            long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
            v139.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v121;
            v120->__r_.__value_.__l.__size_ = 0;
            v120->__r_.__value_.__r.__words[2] = 0;
            v120->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v139);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
LABEL_120:
          memcpy(*(void **)(v24 + 16), a4, a5);
          goto LABEL_121;
        }
        goto LABEL_121;
      }
      if (**(void **)v8 != 0x656E72656B5F7868 || *(unsigned char *)(*(void *)v8 + 8) != 108) {
        goto LABEL_121;
      }
LABEL_42:
      int v27 = *(_DWORD *)(v10 + 420);
      if (v27 <= 1) {
        int v27 = 1;
      }
      uint64_t v28 = *(unsigned int *)(v10 + 352);
      uint64_t v29 = *(unsigned int *)(v10 + 356);
      int v30 = *(_DWORD *)(v10 + 344) * v12;
      int v31 = *(_DWORD *)(v10 + 348) / v27;
      uint64_t v32 = (std::__shared_weak_count *)operator new(0x60uLL);
      uint64_t v33 = v32;
      v32->__shared_owners_ = 0;
      v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389B18;
      v32->__shared_weak_owners_ = 0;
      v32[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BFD0;
      *(_OWORD *)&v32[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v32[3].__shared_owners_ = 0u;
      LODWORD(v32[1].__shared_owners_) = v31;
      HIDWORD(v32[1].__shared_owners_) = v28;
      LODWORD(v32[1].__shared_weak_owners_) = v29;
      HIDWORD(v32[1].__shared_weak_owners_) = v30;
      int v34 = v30;
      v32[2].__vftable = a4;
      LOBYTE(v32[2].__shared_owners_) = 0;
      int v35 = v31;
      uint64_t v36 = 36;
      uint64_t v37 = v31;
      do
      {
        v37 *= *(int *)((char *)&v32->__vftable + v36);
        v36 += 4;
      }
      while (v36 != 48);
      if (v37 != a5)
      {
        uint64_t v101 = &v32->__vftable;
        uint64_t v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v136, a5);
        uint64_t v103 = std::string::insert(&v136, 0, "Unexpected size ");
        long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v137.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        uint64_t v105 = std::string::append(&v137, "/");
        uint64_t v106 = 0;
        long long v107 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v107;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        unint64_t v108 = *((int *)v101 + 8);
        do
        {
          v108 *= *(int *)((char *)v101 + v106 + 36);
          v106 += 4;
        }
        while (v106 != 12);
        std::to_string(&v135, v108);
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v109 = &v135;
        }
        else {
          uint64_t v109 = (std::string *)v135.__r_.__value_.__r.__words[0];
        }
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v110 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v110 = v135.__r_.__value_.__l.__size_;
        }
        long long v111 = std::string::append(&v138, (const std::string::value_type *)v109, v110);
        long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
        v139.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v112;
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v102, &v139);
        __cxa_throw(v102, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      int v38 = *(_DWORD *)(v10 + 560);
      int v39 = *(_DWORD *)(v10 + 592);
      int v130 = (v31 - 1) / v39;
      int v40 = v34;
      int v131 = (v34 - 1) / v38;
      uint64_t v129 = (v131 + 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(&v138, v39, v38, v28, v29, v130 + 1, v131 + 1);
      uint64_t v41 = 0;
      uint64_t v42 = v38;
      uint64_t v43 = v39;
      uint64_t v44 = 1;
      do
      {
        v139.__r_.__value_.__r.__words[v41] = (int)v44;
        v44 *= *((unsigned int *)&v33[1].__shared_owners_ + v41++);
      }
      while (v41 != 4);
      uint64_t v45 = 0;
      long long v46 = *(_OWORD *)&v139.__r_.__value_.__r.__words[1];
      uint64_t v47 = v140;
      uint64_t v48 = 1;
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v134 = v33[2].__vftable;
      std::string::size_type v49 = v138.__r_.__value_.__r.__words[0];
      do
      {
        v139.__r_.__value_.__r.__words[v45] = (int)v48;
        v48 *= *(unsigned int *)(v49 + 4 * v45++ + 8);
      }
      while (v45 != 6);
      long long v50 = *(_OWORD *)&v139.__r_.__value_.__r.__words[1];
      uint64_t v51 = v140;
      uint64_t v52 = v141;
      uint64_t v128 = v142;
      std::string::size_type v53 = v138.__r_.__value_.__l.__size_;
      if (v138.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v138.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      float v133 = *(unsigned char **)(v49 + 32);
      uint64_t v54 = *(int *)(v49 + 8);
      for (uint64_t i = 12; i != 32; i += 4)
        v54 *= *(int *)(v49 + i);
      unint64_t v122 = (std::__shared_weak_count *)v53;
      uint64_t v124 = v9;
      uint64_t v125 = v10;
      uint64_t v126 = v33;
      if (v54)
      {
        for (uint64_t j = 0; j != v54; ++j)
          *(unsigned char *)(*(void *)(v49 + 32) + j) = 0;
      }
      std::string::size_type v123 = v49;
      if ((v131 & 0x80000000) == 0)
      {
        uint64_t v57 = 0;
        if (v40 >= v38) {
          uint64_t v58 = v38;
        }
        else {
          uint64_t v58 = v40;
        }
        if (v35 >= v39) {
          uint64_t v59 = v39;
        }
        else {
          uint64_t v59 = v35;
        }
        uint64_t v127 = v47 * v42;
        do
        {
          uint64_t v132 = v57;
          if ((v130 & 0x80000000) == 0)
          {
            uint64_t v60 = 0;
            uint64_t v61 = v133;
            uint64_t v62 = v134;
            do
            {
              if ((int)v29 >= 1)
              {
                uint64_t v63 = 0;
                uint64_t v64 = v62;
                int v65 = v61;
                do
                {
                  if ((int)v28 >= 1)
                  {
                    uint64_t v66 = 0;
                    int v67 = v64;
                    int v68 = v65;
                    do
                    {
                      if ((int)v58 >= 1)
                      {
                        uint64_t v69 = 0;
                        int v70 = (char *)v67;
                        uint64_t v71 = v68;
                        do
                        {
                          uint64_t v72 = v70;
                          id v73 = v71;
                          uint64_t v74 = v59;
                          if ((int)v59 >= 1)
                          {
                            do
                            {
                              char v75 = *v72++;
                              *v73++ = v75;
                              --v74;
                            }
                            while (v74);
                          }
                          ++v69;
                          v71 += v50;
                          v70 += v47;
                        }
                        while (v69 != v58);
                      }
                      ++v66;
                      v68 += *((void *)&v50 + 1);
                      int v67 = (std::__shared_weak_count_vtbl *)((char *)v67 + v46);
                    }
                    while (v66 != v28);
                  }
                  ++v63;
                  v65 += v51;
                  uint64_t v64 = (std::__shared_weak_count_vtbl *)((char *)v64 + *((void *)&v46 + 1));
                }
                while (v63 != v29);
              }
              ++v60;
              v61 += v52;
              uint64_t v62 = (std::__shared_weak_count_vtbl *)((char *)v62 + v43);
            }
            while (v60 != v130 + 1);
          }
          uint64_t v57 = v132 + 1;
          v133 += v128;
          unint64_t v134 = (std::__shared_weak_count_vtbl *)((char *)v134 + v127);
        }
        while (v132 + 1 != v129);
      }
      if (v122) {
        nitro::nitro_function::nitro_function(v122);
      }
      nitro::nitro_function::nitro_function(v126);
      nitro::nitro_function::nitro_function(v126);
      int v9 = v124;
      uint64_t v10 = v125;
      if (v122) {
        atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)(v125 + 680) = v123;
      uint64_t v76 = *(std::__shared_weak_count **)(v125 + 688);
      *(void *)(v125 + 688) = v122;
      if (v76) {
        nitro::nitro_function::nitro_function(v76);
      }
      if (v122) {
        nitro::nitro_function::nitro_function(v122);
      }
      nitro::nitro_function::nitro_function(v126);
      goto LABEL_121;
    }
    uint64_t v8 = *(unsigned __int8 **)v8;
LABEL_91:
    if (*(_DWORD *)v8 == 1650423912 && *(_DWORD *)(v8 + 3) == 1935763810)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v139, *(_DWORD *)(v10 + 344) * v12, 1, 1, 1);
      std::string::size_type v78 = v139.__r_.__value_.__r.__words[0];
      uint64_t v79 = *(std::__shared_weak_count **)(v10 + 800);
      *uint64_t v11 = *(_OWORD *)&v139.__r_.__value_.__l.__data_;
      if (v79)
      {
        nitro::nitro_function::nitro_function(v79);
        std::string::size_type v24 = *(void *)v11;
      }
      else
      {
        std::string::size_type v24 = v78;
      }
      if (a5 != 4 * *(int *)(v24 + 8))
      {
        uint64_t v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v136, a5);
        uint64_t v83 = std::string::insert(&v136, 0, "Unexpected size ");
        long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        v137.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        long long v85 = std::string::append(&v137, "/");
        long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v135, 4 * *(int *)(*(void *)v11 + 8));
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v87 = &v135;
        }
        else {
          std::string v87 = (std::string *)v135.__r_.__value_.__r.__words[0];
        }
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v88 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v88 = v135.__r_.__value_.__l.__size_;
        }
        uint64_t v89 = std::string::append(&v138, (const std::string::value_type *)v87, v88);
        long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
        v139.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v90;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v82, &v139);
        __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  int v13 = v8[23];
  if (v13 == 7) {
    goto LABEL_91;
  }
  if (v13 != 9)
  {
    if (v13 != 11) {
      goto LABEL_121;
    }
    if (*(void *)v8 != 0x74666968735F7868 || *(void *)(v8 + 3) != 0x74756F7466696873)
    {
      if (*(void *)v8 != 0x656C6163735F7868 || *(void *)(v8 + 3) != 0x74756F656C616373) {
        goto LABEL_121;
      }
      goto LABEL_29;
    }
LABEL_98:
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(&v139, *(_DWORD *)(v10 + 344) * v12, 1, 1, 1);
    std::string::size_type v80 = v139.__r_.__value_.__r.__words[0];
    std::string v81 = *(std::__shared_weak_count **)(v10 + 832);
    _OWORD v11[2] = *(_OWORD *)&v139.__r_.__value_.__l.__data_;
    if (v81)
    {
      nitro::nitro_function::nitro_function(v81);
      std::string::size_type v24 = *((void *)v11 + 4);
    }
    else
    {
      std::string::size_type v24 = v80;
    }
    if (a5 != 4 * *(int *)(v24 + 8))
    {
      int v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v136, a5);
      int v92 = std::string::insert(&v136, 0, "Unexpected size ");
      long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      uint64_t v94 = std::string::append(&v137, "/");
      long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      v138.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v135, 4 * *(int *)(*((void *)v11 + 4) + 8));
      if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v96 = &v135;
      }
      else {
        uint64_t v96 = (std::string *)v135.__r_.__value_.__r.__words[0];
      }
      if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v97 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v97 = v135.__r_.__value_.__l.__size_;
      }
      uint64_t v98 = std::string::append(&v138, (const std::string::value_type *)v96, v97);
      long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      v139.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v99;
      v98->__r_.__value_.__l.__size_ = 0;
      v98->__r_.__value_.__r.__words[2] = 0;
      v98->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v91, &v139);
      __cxa_throw(v91, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_120;
  }
  if (*(void *)v8 == 0x656E72656B5F7868 && v8[8] == 108) {
    goto LABEL_42;
  }
LABEL_121:
  uint64_t v100 = (std::__shared_weak_count *)v9[1];
  if (v100) {
    atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_weights_bias_if_ready(v10);
  if (v100)
  {
    nitro::nitro_function::nitro_function(v100);
  }
}

void sub_192A9C65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v46 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v46)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v45);
  goto LABEL_14;
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::wisdom_tunables(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = operator new(0x18uLL);
  *uint64_t v4 = xmmword_192DCA710;
  int v27 = v4;
  *((void *)v4 + 2) = 0x300000001;
  std::string __p = operator new(8uLL);
  void *__p = 0x800000004;
  uint64_t v5 = operator new(8uLL);
  unint64_t v6 = 0;
  *uint64_t v5 = 0x800000004;
  int v7 = a2 + 2;
  uint64_t v8 = v27;
  do
  {
    char v9 = 0;
    uint64_t v10 = 0;
    uint64_t v28 = v8;
    uint64_t v11 = *v8;
    do
    {
      char v12 = 0;
      uint64_t v13 = 0;
      char v30 = v9;
      int v14 = *((_DWORD *)__p + v10);
      do
      {
        char v15 = v12;
        int v16 = *((_DWORD *)v5 + v13);
        int v17 = *(_DWORD *)(a1 + 420);
        if (v17 <= 1) {
          int v17 = 1;
        }
        if (v16 == 4 || !(*(_DWORD *)(a1 + 348) / v17 % v16))
        {
          uint64_t v18 = operator new(0x1CuLL);
          uint64_t v19 = (char *)(v18 + 7);
          *(void *)uint64_t v18 = v11;
          uint64_t v18[2] = v14;
          v18[3] = v16;
          *((void *)v18 + 2) = 0;
          v18[6] = 0;
          *(void *)&long long v20 = v18;
          *((void *)&v20 + 1) = v18 + 7;
          if (v6 >= *v7)
          {
            unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a2) >> 3);
            unint64_t v22 = v21 + 1;
            if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            long long v31 = v20;
            if (0x5555555555555556 * ((uint64_t)(*v7 - *a2) >> 3) > v22) {
              unint64_t v22 = 0x5555555555555556 * ((uint64_t)(*v7 - *a2) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v7 - *a2) >> 3) >= 0x555555555555555) {
              unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v23 = v22;
            }
            v32[4] = a2 + 2;
            std::string::size_type v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v23);
            long long v25 = &v24[24 * v21];
            v32[0] = v24;
            v32[1] = v25;
            v32[3] = &v24[24 * v26];
            *(_OWORD *)long long v25 = v31;
            *((void *)v25 + 2) = v19;
            BNNSVectorDescriptor v32[2] = v25 + 24;
            std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a2, v32);
            unint64_t v6 = a2[1];
            std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v32);
          }
          else
          {
            *(_OWORD *)unint64_t v6 = v20;
            *(void *)(v6 + 16) = v19;
            v6 += 24;
            a2[1] = v6;
          }
          a2[1] = v6;
        }
        char v12 = 1;
        uint64_t v13 = 1;
      }
      while ((v15 & 1) == 0);
      char v9 = 1;
      uint64_t v10 = 1;
    }
    while ((v30 & 1) == 0);
    uint64_t v8 = v28 + 1;
  }
  while (v28 + 1 != v27 + 3);
  operator delete(v5);
  operator delete(__p);
  operator delete(v27);
}

void sub_192A9CA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t Espresso::MetalLowmemEngine::meta_convolution_kernel::wisdom_key()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"C", 1);
  dispatch_queue_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"K", 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"X", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Y", 1);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"G", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"W", 1);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"H", 1);
  unint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"S", 1);
  int v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"V", 1);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"_", 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v14);
}

void sub_192A9CDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 616) && *(void *)(a1 + 624))
  {
    if (!*(void *)a2
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      objc_storeStrong((id *)(a1 + 784), v4[98]);
      nitro::nitro_function::nitro_function(v5);
    }
    else
    {
      id v6 = v4[98];
      objc_storeStrong((id *)(a1 + 784), v6);
    }
  }
}

void sub_192A9CEFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::tmp_aux_buffer_create(Espresso::MetalLowmemEngine::meta_convolution_kernel *this, uint64_t a2)
{
  if (*((void *)this + 77) && *((void *)this + 78))
  {
    uint64_t v3 = (const void *)*((void *)this + 1);
    if (!v3
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    id v6 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = [v5[18] newBufferWithLength:a2 options:0];
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    uint64_t v8 = (void *)*((void *)this + 98);
    *((void *)this + 98) = v7;
  }
}

void sub_192A9D048(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::MetalLowmemEngine::meta_convolution_kernel::tmp_aux_buffer_size(Espresso::MetalLowmemEngine::meta_convolution_kernel *this)
{
  uint64_t result = (void *)*((void *)this + 77);
  if (result)
  {
    if (*((void *)this + 78))
    {
      unsigned int v3 = *((_DWORD *)this + 161) - 1;
      uint64_t v4 = [result length];
      if (v3 <= 1) {
        return (void *)(2 * v4);
      }
      else {
        return (void *)(4 * v4);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::share_weights(uint64_t a1, const void **a2)
{
  if (*a2)
  {
    if (v3)
    {
      uint64_t v4 = v3;
      objc_storeStrong((id *)(a1 + 632), v3[79]);
      objc_storeStrong((id *)(a1 + 616), v4[77]);
      objc_storeStrong((id *)(a1 + 624), v4[78]);
      id v5 = v4[99];
      id v6 = (atomic_ullong *)v4[100];
      if (v6) {
        atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 792) = v5;
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 800);
      *(void *)(a1 + 800) = v6;
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      id v8 = v4[101];
      uint64_t v9 = (atomic_ullong *)v4[102];
      if (v9) {
        atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 808) = v8;
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 816);
      *(void *)(a1 + 816) = v9;
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      id v11 = v4[103];
      char v12 = (atomic_ullong *)v4[104];
      if (v12) {
        atomic_fetch_add_explicit(v12 + 1, 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 824) = v11;
      char v13 = *(std::__shared_weak_count **)(a1 + 832);
      *(void *)(a1 + 832) = v12;
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      uint64_t v14 = *(void **)(a1 + 608);
      *(void *)(a1 + 608) = 0;
    }
  }
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::__launch(int32x2_t *a1, uint64_t a2, const void ***a3, const void ***a4)
{
  if (!*(void *)a2)
  {
    id v8 = 0;
LABEL_6:
    uint64_t v219 = 0;
    goto LABEL_7;
  }
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v219 = *(std::__shared_weak_count **)(a2 + 8);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
LABEL_7:
  uint64_t v10 = (const void *)a1[1];
  if (v10
  {
    id v11 = (std::__shared_weak_count *)a1[2];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    v226 = 0;
    id v11 = 0;
  }
  char v12 = *a4;
  char v13 = **a4;
  if (v13)
  {
    if (v14 && (char v15 = (atomic_ullong *)v12[1]) != 0)
    {
      std::string v214 = (std::__shared_weak_count *)v12[1];
      atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
    }
    else
    {
      std::string v214 = 0;
    }
  }
  else
  {
    std::string v214 = 0;
    uint64_t v14 = 0;
  }
  int v16 = *a3;
  int v17 = **a3;
  if (v17)
  {
    if (v18 && (uint64_t v19 = (atomic_ullong *)v16[1]) != 0)
    {
      int v213 = (std::__shared_weak_count *)v16[1];
      atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
    }
    else
    {
      int v213 = 0;
    }
  }
  else
  {
    int v213 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v222 = (uint64_t)a3;
  long long v234 = a1;
  v209 = v8;
  if (*(void *)&a1[103] && *(void *)&a1[101] && *(void *)&a1[99] && !*(void *)&a1[78])
  {
    v220 = a4;
    v207 = v11;
    v215 = v18;
    uint64_t v217 = v14;
    __int32 v20 = v14[14].i32[1];
    int v21 = v18[29];
    int v22 = a1[53].i32[0];
    if (v22 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v22;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v243, 2 * v23 * a1[43].i32[0], 1, 1, 1);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    __int32 v26 = a1[43].i32[0];
    if (v20) {
      double v27 = 128.0;
    }
    else {
      double v27 = 256.0;
    }
    uint64_t v224 = *(void *)v243;
    uint64_t v28 = v26 * (int)v23;
    uint64_t v230 = v23;
    uint64_t v232 = a1[43].u32[0];
    uint64_t v228 = 4 * v26;
    do
    {
      if ((int)v232 >= 1)
      {
        uint64_t v29 = v232;
        char v30 = (float *)(*(void *)(v224 + 16) + v24);
        long long v31 = (int *)(*(void *)(*(void *)&v234[99] + 16) + v24);
        uint64_t v32 = (int *)(*(void *)(*(void *)&v234[101] + 16) + v24);
        uint64_t v33 = (unsigned int *)(*(void *)(*(void *)&v234[103] + 16) + v24);
        do
        {
          unsigned int v34 = *v33++;
          double v35 = exp2(-(double)v34);
          double v36 = v35 + v35;
          if (!v21) {
            double v36 = v35;
          }
          if (!v20) {
            double v35 = v36;
          }
          if (!v21) {
            double v35 = v35 * 0.5;
          }
          if (!v20) {
            double v35 = v36;
          }
          int v37 = *v32++;
          float v38 = v35 * (double)v37;
          *char v30 = v38;
          int v39 = *v31++;
          float v40 = v35 * (double)v39 / v27;
          v30[v28] = v40;
          ++v30;
          --v29;
        }
        while (v29);
      }
      ++v25;
      v24 += v228;
    }
    while (v25 != v230);
    uint64_t v41 = (const void *)v234[1];
    if (!v41
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    uint64_t v43 = (std::__shared_weak_count *)v234[2];
    id v8 = v209;
    a4 = v220;
    uint64_t v18 = v215;
    uint64_t v14 = v217;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v11 = v207;
    uint64_t v44 = [v42[18] newBufferWithBytes:*(void *)(v224 + 16) length:4 * *(int *)(v224 + 8) options:0];
    uint64_t v45 = (void *)v234[78];
    v234[78] = (int32x2_t)v44;

    if (v43) {
      nitro::nitro_function::nitro_function(v43);
    }
    a1 = v234;
    objc_storeStrong((id *)&v234[79], *(id *)&v234[78]);
    if (*(void *)&v243[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v243[8]);
    }
  }
  int v46 = a1 + 38;
  __int32 v47 = v14[2].i32[1];
  __int32 v48 = v18[2];
  if (v47 != a1[54].i16[3] || v48 != v46->i32[0] || v18[3] != v234[38].i32[1])
  {
    v234[38].i32[0] = v48;
    __int32 v49 = v18[3];
    v234[38].i32[1] = v49;
    int32x2_t v50 = v14[1];
    v234[39] = v50;
    v234[54].i16[3] = v47;
    v234[40].i32[1] = v18[51];
    int v51 = v234[47].i16[0];
    if (v51 != 4)
    {
      if (v51 == 2)
      {
        int8x8_t v58 = 0;
        std::string::size_type v53 = v234;
        goto LABEL_64;
      }
      if (v51 != 1)
      {
        std::string::size_type v53 = v234;
        v58.i16[0] = v234[48].i16[0];
        v58.i16[2] = v234[48].i16[2];
        goto LABEL_64;
      }
    }
    int32x2_t v52 = vadd_s32((int32x2_t)__PAIR64__(v49, v48), (int32x2_t)-1);
    std::string::size_type v53 = v234;
    v55.i32[0] = v234[50].i16[0];
    v55.i32[1] = v234[50].i16[1];
    v54.i32[1] = v234[49].i16[3];
    v54.i32[0] = v234[49].i16[2];
    int32x2_t v56 = vmax_s32(vsub_s32(vmul_s32(vadd_s32(v234[44], (int32x2_t)-1), vmax_s32(v55, (int32x2_t)0x100000001)), (int32x2_t)vmvn_s8((int8x8_t)vmla_s32(vneg_s32(v50), v52, v54))), 0);
    int32x2_t v57 = (int32x2_t)vshr_n_u32((uint32x2_t)v56, 1uLL);
    int8x8_t v58 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v234[47].u16[0] == 1), 0x1FuLL)), (int8x8_t)v57, (int8x8_t)vsub_s32(v56, v57));
LABEL_64:
    v53[50].i16[2] = v58.i16[0];
    v53[50].i16[3] = v58.i16[2];
    uint64_t v59 = (void *)v53[76];
    v53[76] = 0;
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v235, (uint64_t)v8);
  uint64_t v60 = v234;
  uint64_t v61 = (void *)*((void *)v18 + 21);
  uint64_t v62 = (void *)v14[21];
  uint64_t v63 = (void *)v234[77];
  uint64_t v64 = (void *)v234[79];
  id v65 = v235[0];
  id v225 = v61;
  id v231 = v62;
  id v66 = v63;
  id v233 = v64;
  int v67 = v234[43].i32[1];
  int v69 = v67 - 1;
  BOOL v68 = v67 < 1;
  int v70 = v67 + 2;
  if (!v68) {
    int v70 = v69;
  }
  int v71 = v70 >> 2;
  int v72 = v234[52].i32[1];
  BOOL v68 = v72 < 2;
  int v73 = v71 / v72;
  if (!v68) {
    int v71 = v73;
  }
  uint64_t v74 = (v71 + 1);
  long long v229 = v66;
  if (!*(void *)&v234[76])
  {
    uint64_t v75 = v234[80].i32[0];
    if ((int)v75 > 1)
    {
      v242.__r_.__value_.__s.__data_[0] = 0;
      std::vector<unsigned char>::vector(v243, 192 * v75, &v242);
      int v78 = v234[80].i32[0];
      uint64_t v79 = *(void *)v243;
      if (v78 >= 1)
      {
        uint64_t v80 = 0;
        int v81 = 0;
        uint64_t v82 = *(void *)v243;
        int v83 = (int)v74 / v78;
        do
        {
          long long v84 = *(_OWORD *)v46->i8;
          long long v85 = *(_OWORD *)v46[4].i8;
          *(_OWORD *)(v82 + 16) = *(_OWORD *)v46[2].i8;
          *(_OWORD *)(v82 + 32) = v85;
          *(_OWORD *)uint64_t v82 = v84;
          long long v86 = *(_OWORD *)v46[6].i8;
          long long v87 = *(_OWORD *)v46[8].i8;
          long long v88 = *(_OWORD *)v46[12].i8;
          *(_OWORD *)(v82 + 80) = *(_OWORD *)v46[10].i8;
          *(_OWORD *)(v82 + 96) = v88;
          *(_OWORD *)(v82 + 48) = v86;
          *(_OWORD *)(v82 + 64) = v87;
          long long v89 = *(_OWORD *)v46[14].i8;
          long long v90 = *(_OWORD *)v46[16].i8;
          long long v91 = *(_OWORD *)v46[18].i8;
          *(int32x2_t *)(v82 + 157) = *(int32x2_t *)((char *)v46 + 157);
          *(_OWORD *)(v82 + 128) = v90;
          *(_OWORD *)(v82 + 144) = v91;
          *(_OWORD *)(v82 + 112) = v89;
          uint64_t v92 = v234[80].i32[0];
          *(_WORD *)(v82 + 132) = v92;
          *(_DWORD *)(v82 + 16) = v81;
          v81 += v83;
          ++v80;
          v82 += 192;
        }
        while (v80 < v92);
      }
      uint64_t v93 = [*((id *)v226 + 18) newBufferWithBytes:v79 length:*(void *)&v243[8] - v79 options:0];
      uint64_t v94 = (void *)v234[76];
      v234[76] = (int32x2_t)v93;

      if (*(void *)v243)
      {
        *(void *)&v243[8] = *(void *)v243;
        operator delete(*(void **)v243);
      }
      uint64_t v60 = v234;
    }
    else
    {
      uint64_t v76 = [*((id *)v226 + 18) newBufferWithBytes:v46 length:168 options:0];
      uint64_t v60 = v234;
      uint64_t v77 = (void *)v234[76];
      v234[76] = (int32x2_t)v76;
    }
  }
  int v95 = v60[43].i32[0];
  int v96 = v95 - 1;
  BOOL v68 = v95 < 1;
  int v97 = v95 + 2;
  if (v68) {
    int v98 = v97;
  }
  else {
    int v98 = v96;
  }
  if (!v66)
  {
    uint64_t v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v202, "weights not set!");
    goto LABEL_277;
  }
  if (!v233)
  {
    uint64_t v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v202, "biases not set!");
LABEL_277:
    __cxa_throw(v202, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v221 = v60[38].i32[0];
  int v99 = v60[38].i32[1];
  int v100 = v60[54].i16[3];
  long long v240 = 0uLL;
  uint64_t v241 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v240, *(const void **)&v60[94], *(void *)&v60[95], (uint64_t)(*(void *)&v60[95] - *(void *)&v60[94]) >> 2);
  uint64_t v101 = *((void *)v226 + 3);
  if (v101 && !v234[97].i8[0])
  {
    if (*(unsigned char *)(v101 + 12))
    {
      Espresso::wisdom_trainer2::get_tune(*((void *)v226 + 3), (uint64_t)v234, v222, (uint64_t)a4, v243);
      if ((void)v240)
      {
        *((void *)&v240 + 1) = v240;
        operator delete((void *)v240);
      }
      long long v240 = *(_OWORD *)v243;
      uint64_t v241 = *(void *)&v243[16];
    }
    if (!*(unsigned char *)(v101 + 80))
    {
      if (&v234[94] != (int32x2_t *)&v240) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v234[94], (char *)v240, *((uint64_t *)&v240 + 1), (uint64_t)(*((void *)&v240 + 1) - v240) >> 2);
      }
      v234[97].i8[0] = 1;
    }
  }
  std::string __p = 0;
  long long v238 = 0;
  uint64_t v239 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)v240, *((uint64_t *)&v240 + 1), (uint64_t)(*((void *)&v240 + 1) - v240) >> 2);
  uint64_t v102 = v234;
  uint64_t v103 = v225;
  Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_for_tune((uint64_t)v234, (uint64_t)&__p);
  if (__p)
  {
    long long v238 = __p;
    operator delete(__p);
  }
  int v104 = v100 + v100 * (v98 >> 2);
  if (v234[89].i32[0])
  {
    unsigned int v223 = v234[89].u32[0];
    __int32 v105 = v234[71].i32[0];
    __int32 v106 = v234[70].i32[1];
    unsigned int v212 = v234[89].u32[1];
    int v216 = v234[90].i32[0];
    int v218 = v234[70].i32[0] / 4;
    goto LABEL_134;
  }
  v234[89] = (int32x2_t)0x400000004;
  v234[90].i32[0] = 4;
  __int32 v105 = v234[71].i32[0];
  __int32 v106 = v234[70].i32[1];
  int v107 = v234[70].i32[0];
  int v108 = v107 + 3;
  if (v107 >= 0) {
    int v108 = v234[70].i32[0];
  }
  int v109 = v221 % (4 * v105);
  if (!v109)
  {
    unsigned int v223 = 4;
    goto LABEL_111;
  }
  float v110 = (float)v221;
  if ((float)((float)v109 / (float)v221) <= 0.02)
  {
    unsigned int v223 = 4;
  }
  else
  {
    unsigned int v223 = 2;
    v234[89].i32[0] = 2;
    int v109 = v221 % (2 * v105);
    if (!v109) {
      goto LABEL_111;
    }
  }
  if ((float)((float)v109 / v110) > 0.02)
  {
    v234[89].i32[0] = v223 >> 1;
    v223 >>= 1;
    int v109 = v221 % (int)(v223 * v105);
  }
  if (v109 && v223 >= 2 && (float)((float)v109 / v110) > 0.02)
  {
    v223 >>= 1;
    v234[89].i32[0] = v223;
  }
LABEL_111:
  int v218 = v108 >> 2;
  int v111 = v99 % (4 * v106);
  if (!v111)
  {
    unsigned int v113 = 4;
    goto LABEL_123;
  }
  float v112 = (float)v99;
  if ((float)((float)v111 / (float)v99) <= 0.02)
  {
    unsigned int v113 = 4;
    goto LABEL_117;
  }
  unsigned int v113 = 2;
  v234[89].i32[1] = 2;
  int v111 = v99 % (2 * v106);
  if (v111)
  {
LABEL_117:
    if ((float)((float)v111 / v112) > 0.02)
    {
      v234[89].i32[1] = v113 >> 1;
      v113 >>= 1;
      int v111 = v99 % (int)(v113 * v106);
    }
    if (v111 && v113 >= 2 && (float)((float)v111 / v112) > 0.02)
    {
      v113 >>= 1;
      v234[89].i32[1] = v113;
    }
  }
LABEL_123:
  unsigned int v212 = v113;
  unsigned int v114 = v223 * v113;
  if (v223 * v113 > 8)
  {
    int v216 = 4;
  }
  else
  {
    if (v104 % v218)
    {
      int v216 = 4;
    }
    else
    {
      int v216 = 1;
      v234[90].i32[0] = 1;
    }
    if (v114 <= 4)
    {
      if (!(v104 % (2 * v218)))
      {
        int v216 = 2;
        v234[90].i32[0] = 2;
      }
      if (v114 <= 2 && !(v104 % (4 * v218)))
      {
        int v216 = 4;
        v234[90].i32[0] = 4;
      }
    }
  }
LABEL_134:
  if (!*(void *)&v234[75])
  {
    int v210 = v99;
    long long v115 = objc_opt_new();
    long long v116 = objc_opt_new();
    *(_WORD *)uint64_t v243 = v74;
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 0, v74);
    [v115 setConstantValue:v243 type:41 atIndex:0];
    uint64_t v117 = v234[44].u32[0];
    *(_WORD *)uint64_t v243 = v234[44].i32[0];
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 1, v117);
    [v115 setConstantValue:v243 type:41 atIndex:1];
    uint64_t v118 = v234[44].u32[1];
    *(_WORD *)uint64_t v243 = v234[44].i32[1];
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 2, v118);
    [v115 setConstantValue:v243 type:41 atIndex:2];
    uint64_t v119 = v234[52].u32[1];
    *(_WORD *)uint64_t v243 = v234[52].i32[1];
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 3, v119);
    [v115 setConstantValue:v243 type:41 atIndex:3];
    uint64_t v120 = v234[53].u16[2] >> 2;
    *(_WORD *)uint64_t v243 = (unsigned __int16)v234[53].i16[2] >> 2;
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 4, v120);
    [v115 setConstantValue:v243 type:41 atIndex:4];
    uint64_t v121 = v234[53].u16[3] >> 2;
    *(_WORD *)uint64_t v243 = (unsigned __int16)v234[53].i16[3] >> 2;
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 5, v121);
    [v115 setConstantValue:v243 type:41 atIndex:5];
    LODWORD(v122) = v234[53].i32[0];
    if ((int)v122 <= 1) {
      uint64_t v122 = 1;
    }
    else {
      uint64_t v122 = v122;
    }
    *(_WORD *)uint64_t v243 = v122;
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 6, v122);
    [v115 setConstantValue:v243 type:41 atIndex:6];
    BOOL v123 = v234[41].i32[0] > 0;
    *(_WORD *)uint64_t v243 = v234[41].i32[0] > 0;
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 7, v123);
    [v115 setConstantValue:v243 type:41 atIndex:7];
    *(_WORD *)uint64_t v243 = v234[49].i16[2];
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 8, *(__int16 *)v243);
    [v115 setConstantValue:v243 type:41 atIndex:8];
    *(_WORD *)uint64_t v243 = v234[49].i16[3];
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 9, *(__int16 *)v243);
    [v115 setConstantValue:v243 type:41 atIndex:9];
    *(_WORD *)uint64_t v243 = v234[50].i16[0];
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 10, *(__int16 *)v243);
    [v115 setConstantValue:v243 type:41 atIndex:10];
    *(_WORD *)uint64_t v243 = v234[50].i16[1];
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 11, *(__int16 *)v243);
    [v115 setConstantValue:v243 type:41 atIndex:11];
    uint64_t v124 = v234[80].u32[0];
    *(_WORD *)uint64_t v243 = v234[80].i32[0];
    objc_msgSend(v116, "appendFormat:", @"%d:%d_", 12, v124);
    [v115 setConstantValue:v243 type:41 atIndex:12];
    std::string::basic_string[abi:ne180100]<0>(&v236, "conv_1x1");
    std::to_string(&v242, v234[70].i32[0]);
    uint64_t v125 = std::string::insert(&v242, 0, "_oc");
    long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v125->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v243 = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    if (v243[23] >= 0) {
      uint64_t v127 = v243;
    }
    else {
      uint64_t v127 = *(const std::string::value_type **)v243;
    }
    if (v243[23] >= 0) {
      std::string::size_type v128 = v243[23];
    }
    else {
      std::string::size_type v128 = *(void *)&v243[8];
    }
    std::string::append(&v236, v127, v128);
    if ((v243[23] & 0x80000000) != 0) {
      operator delete(*(void **)v243);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    std::to_string(&v242, v234[70].i32[1]);
    uint64_t v129 = std::string::insert(&v242, 0, "_oy");
    long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v129->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v243 = v130;
    v129->__r_.__value_.__l.__size_ = 0;
    v129->__r_.__value_.__r.__words[2] = 0;
    v129->__r_.__value_.__r.__words[0] = 0;
    if (v243[23] >= 0) {
      int v131 = v243;
    }
    else {
      int v131 = *(const std::string::value_type **)v243;
    }
    if (v243[23] >= 0) {
      std::string::size_type v132 = v243[23];
    }
    else {
      std::string::size_type v132 = *(void *)&v243[8];
    }
    std::string::append(&v236, v131, v132);
    if ((v243[23] & 0x80000000) != 0) {
      operator delete(*(void **)v243);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    std::to_string(&v242, v234[71].i32[0]);
    float v133 = std::string::insert(&v242, 0, "_ox");
    long long v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v133->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v243 = v134;
    v133->__r_.__value_.__l.__size_ = 0;
    v133->__r_.__value_.__r.__words[2] = 0;
    v133->__r_.__value_.__r.__words[0] = 0;
    if (v243[23] >= 0) {
      std::string v135 = v243;
    }
    else {
      std::string v135 = *(const std::string::value_type **)v243;
    }
    if (v243[23] >= 0) {
      std::string::size_type v136 = v243[23];
    }
    else {
      std::string::size_type v136 = *(void *)&v243[8];
    }
    std::string::append(&v236, v135, v136);
    if ((v243[23] & 0x80000000) != 0) {
      operator delete(*(void **)v243);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    std::to_string(&v242, v234[71].i32[1]);
    std::string v137 = std::string::insert(&v242, 0, "_kx");
    long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v137->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v243 = v138;
    v137->__r_.__value_.__l.__size_ = 0;
    v137->__r_.__value_.__r.__words[2] = 0;
    v137->__r_.__value_.__r.__words[0] = 0;
    if (v243[23] >= 0) {
      std::string v139 = v243;
    }
    else {
      std::string v139 = *(const std::string::value_type **)v243;
    }
    if (v243[23] >= 0) {
      std::string::size_type v140 = v243[23];
    }
    else {
      std::string::size_type v140 = *(void *)&v243[8];
    }
    std::string::append(&v236, v139, v140);
    if ((v243[23] & 0x80000000) != 0) {
      operator delete(*(void **)v243);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    std::to_string(&v242, v234[72].i32[0]);
    uint64_t v141 = std::string::insert(&v242, 0, "_ky");
    long long v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v141->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v243 = v142;
    v141->__r_.__value_.__l.__size_ = 0;
    v141->__r_.__value_.__r.__words[2] = 0;
    v141->__r_.__value_.__r.__words[0] = 0;
    if (v243[23] >= 0) {
      uint64_t v143 = v243;
    }
    else {
      uint64_t v143 = *(const std::string::value_type **)v243;
    }
    if (v243[23] >= 0) {
      std::string::size_type v144 = v243[23];
    }
    else {
      std::string::size_type v144 = *(void *)&v243[8];
    }
    std::string::append(&v236, v143, v144);
    if ((v243[23] & 0x80000000) != 0) {
      operator delete(*(void **)v243);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    std::to_string(&v242, v234[72].i32[1]);
    int v145 = std::string::insert(&v242, 0, "_weights_type");
    long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v145->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v243 = v146;
    v145->__r_.__value_.__l.__size_ = 0;
    v145->__r_.__value_.__r.__words[2] = 0;
    v145->__r_.__value_.__r.__words[0] = 0;
    if (v243[23] >= 0) {
      uint8x16_t v147 = v243;
    }
    else {
      uint8x16_t v147 = *(const std::string::value_type **)v243;
    }
    if (v243[23] >= 0) {
      std::string::size_type v148 = v243[23];
    }
    else {
      std::string::size_type v148 = *(void *)&v243[8];
    }
    std::string::append(&v236, v147, v148);
    if ((v243[23] & 0x80000000) != 0) {
      operator delete(*(void **)v243);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    std::to_string(&v242, v234[73].i32[0]);
    int16x8_t v149 = std::string::insert(&v242, 0, "_image_type");
    long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v149->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v243 = v150;
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v149->__r_.__value_.__r.__words[0] = 0;
    if (v243[23] >= 0) {
      uint64_t v151 = v243;
    }
    else {
      uint64_t v151 = *(const std::string::value_type **)v243;
    }
    if (v243[23] >= 0) {
      std::string::size_type v152 = v243[23];
    }
    else {
      std::string::size_type v152 = *(void *)&v243[8];
    }
    std::string::append(&v236, v151, v152);
    if ((v243[23] & 0x80000000) != 0) {
      operator delete(*(void **)v243);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    std::to_string(&v242, v234[73].i32[1]);
    uint64_t v153 = std::string::insert(&v242, 0, "_tex_mode");
    long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v153->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v243 = v154;
    v153->__r_.__value_.__l.__size_ = 0;
    v153->__r_.__value_.__r.__words[2] = 0;
    v153->__r_.__value_.__r.__words[0] = 0;
    if (v243[23] >= 0) {
      int v155 = v243;
    }
    else {
      int v155 = *(const std::string::value_type **)v243;
    }
    if (v243[23] >= 0) {
      std::string::size_type v156 = v243[23];
    }
    else {
      std::string::size_type v156 = *(void *)&v243[8];
    }
    std::string::append(&v236, v155, v156);
    if ((v243[23] & 0x80000000) != 0) {
      operator delete(*(void **)v243);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    std::to_string(&v242, v234[74].i32[0]);
    __int32 v157 = v106;
    uint64_t v158 = std::string::insert(&v242, 0, "_nk");
    uint64_t v159 = v11;
    long long v160 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    *(void *)&v243[16] = *((void *)&v158->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v243 = v160;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    if (v243[23] >= 0) {
      int v161 = v243;
    }
    else {
      int v161 = *(const std::string::value_type **)v243;
    }
    if (v243[23] >= 0) {
      std::string::size_type v162 = v243[23];
    }
    else {
      std::string::size_type v162 = *(void *)&v243[8];
    }
    std::string::append(&v236, v161, v162);
    __int32 v163 = v105;
    if ((v243[23] & 0x80000000) != 0) {
      operator delete(*(void **)v243);
    }
    int v164 = v104;
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    int v165 = SHIBYTE(v236.__r_.__value_.__r.__words[2]);
    std::string::size_type v166 = v236.__r_.__value_.__r.__words[0];
    id v167 = v116;
    uint64_t v168 = [v167 UTF8String];
    if (v165 >= 0) {
      uint64_t v169 = &v236;
    }
    else {
      uint64_t v169 = (std::string *)v166;
    }
    uint64_t v170 = [*((id *)v226 + 20) kernelForFunction:v169 cacheString:v168 withConstants:v115];
    uint64_t v171 = (void *)v234[75];
    v234[75] = (int32x2_t)v170;

    if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v236.__r_.__value_.__l.__data_);
    }

    uint64_t v103 = v225;
    uint64_t v102 = v234;
    int v99 = v210;
    int v104 = v164;
    __int32 v105 = v163;
    id v11 = v159;
    __int32 v106 = v157;
  }
  float v172 = v219;
  if (v219) {
    atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)&v102[77] && *(void *)&v102[78])
  {
    __int32 v227 = v105;
    int v211 = v99;
    if (v102[80].i32[1]) {
      uint64_t v173 = "dequantize_range_f16";
    }
    else {
      uint64_t v173 = "dequantize_range_f32";
    }
    std::string v208 = v11;
    uint64_t v174 = [*(id *)(*(void *)&v102[1] + 160) kernelForFunction:v173 cacheString:0 withConstants:0];
    __int32 v175 = v106;
    int v176 = v104;
    id v177 = v209[19];
    uint64_t v178 = v177;
    if (!v174)
    {
      uint64_t v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v204, "Kernel not found");
      __cxa_throw(v204, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v177 setComputePipelineState:v174];
    if (v234[43].i32[1] <= 4) {
      int v179 = 4;
    }
    else {
      int v179 = v234[43].i32[1];
    }
    if (v234[52].i32[1] <= 1) {
      int v180 = 1;
    }
    else {
      int v180 = v234[52].i32[1];
    }
    if (!*(void *)&v234[98])
    {
      uint64_t v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v205, "Inconsistent state");
      __cxa_throw(v205, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    __int32 v181 = v234[44].i32[0];
    __int32 v182 = v234[44].i32[1];
    __int32 v183 = v234[43].i32[0];
    [v178 setBuffer:*(void *)&v234[77] offset:0 atIndex:0];
    [v178 setBuffer:*(void *)&v234[78] offset:0 atIndex:1];
    [v178 setBuffer:*(void *)&v234[98] offset:0 atIndex:2];
    [v178 setBuffer:*(void *)&v234[76] offset:0 atIndex:3];
    int v184 = v183 * (v179 * v181 * v182 / v180) / 4;
    int v185 = v184 - 1;
    BOOL v68 = v184 < 1;
    int v186 = v184 + 62;
    if (!v68) {
      int v186 = v185;
    }
    *(void *)uint64_t v243 = (v186 >> 6) + 1;
    *(int64x2_t *)&v243[8] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = xmmword_192DCA430;
    v242.__r_.__value_.__r.__words[2] = 1;
    [v178 dispatchThreadgroups:v243 threadsPerThreadgroup:&v242];

    id v11 = v208;
    uint64_t v103 = v225;
    uint64_t v102 = v234;
    int v99 = v211;
    float v172 = v219;
    int v104 = v176;
    __int32 v105 = v227;
    __int32 v106 = v175;
  }
  if (v172) {
    nitro::nitro_function::nitro_function(v172);
  }
  uint64_t v187 = v172;
  if (!*(void *)&v102[75])
  {
    v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v203, "Kernel not found");
    __cxa_throw(v203, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  objc_msgSend(v65, "setComputePipelineState:");
  [v65 setTexture:v103 atIndex:0];
  [v65 setTexture:v231 atIndex:1];
  [v65 setTexture:v103 atIndex:2];
  [v65 setBuffer:*(void *)&v102[76] offset:0 atIndex:0];
  if (v102[98]) {
    uint64_t v188 = (void *)v102[98];
  }
  else {
    uint64_t v188 = v229;
  }
  [v65 setBuffer:v188 offset:0 atIndex:1];
  [v65 setBuffer:v233 offset:0 atIndex:2];
  int32x2_t v189 = v102[78];
  if (v189) {
    [v65 setBuffer:*(void *)&v189 offset:0 atIndex:3];
  }
  int v190 = (v104 - 1) / (v216 * v218) + 1;
  uint64_t v191 = (v221 - 1) / (int)(v223 * v105) + 1;
  uint64_t v192 = (v99 - 1) / (int)(v212 * v106) + 1;
  uint64_t v193 = v190;
  if (v102[80].i32[0] >= 2)
  {
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    do
    {
      [v65 setBuffer:*(void *)&v102[76] offset:v197 atIndex:0];
      *(void *)uint64_t v243 = v191;
      *(void *)&v243[8] = v192;
      *(void *)&v243[16] = v193;
      std::string::size_type v199 = v102[90].i32[0];
      int32x2_t v200 = v102[89];
      *(void *)&long long v201 = v200.i32[0];
      *((void *)&v201 + 1) = v200.i32[1];
      *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v201;
      v242.__r_.__value_.__r.__words[2] = v199;
      [v65 dispatchThreadgroups:v243 threadsPerThreadgroup:&v242];
      ++v198;
      v197 += 192;
    }
    while (v198 < v102[80].i32[0]);
  }
  else
  {
    *(void *)uint64_t v243 = (v221 - 1) / (int)(v223 * v105) + 1;
    *(void *)&v243[8] = v192;
    *(void *)&v243[16] = v190;
    std::string::size_type v194 = v102[90].i32[0];
    int32x2_t v195 = v102[89];
    *(void *)&long long v196 = v195.i32[0];
    *((void *)&v196 + 1) = v195.i32[1];
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v196;
    v242.__r_.__value_.__r.__words[2] = v194;
    [v65 dispatchThreadgroups:v243 threadsPerThreadgroup:&v242];
  }
  if ((void)v240)
  {
    *((void *)&v240 + 1) = v240;
    operator delete((void *)v240);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v235);
  if (v213) {
    nitro::nitro_function::nitro_function(v213);
  }
  if (v214) {
    nitro::nitro_function::nitro_function(v214);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v187) {
    nitro::nitro_function::nitro_function(v187);
  }
}

void sub_192A9E9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,id a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36)
{
  float v40 = *(void **)(v38 - 192);
  if (v40)
  {
    *(void *)(v38 - 184) = v40;
    operator delete(v40);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a27);
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_for_tune(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(id **)(a1 + 8);
  if (v4
  {
    id v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    id v5 = 0;
  }
  *(void *)(a1 + 564) = 0x100000002;
  if (*(int *)(a1 + 344) <= 4) {
    int v6 = 4;
  }
  else {
    int v6 = 8;
  }
  *(_DWORD *)(a1 + 560) = v6;
  int v7 = *(_DWORD *)(a1 + 348);
  int v8 = *(_DWORD *)(a1 + 420);
  if (v8 < 2)
  {
    if ((v7 & 0xF) == 0)
    {
LABEL_16:
      int v9 = 8;
      goto LABEL_17;
    }
    int v8 = 1;
  }
  else if (((v7 / v8) & 0xF) == 0)
  {
    goto LABEL_16;
  }
  if (((v7 / v8) & 7) == 0) {
    goto LABEL_16;
  }
  int v9 = 4;
LABEL_17:
  *(_DWORD *)(a1 + 592) = v9;
  if (!v4 || ([v4[18] supportsFeatureSet:7] & 1) == 0)
  {
    *(_DWORD *)(a1 + 568) = 2;
    *(void *)(a1 + 560) = 0x200000004;
  }
  *(_DWORD *)(a1 + 640) = 1;
  *(void *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  uint64_t v10 = *(char **)a2;
  size_t v11 = *(void *)(a2 + 8) - *(void *)a2;
  if (v11 == 28)
  {
    *(_DWORD *)(a1 + 568) = *(_DWORD *)v10;
    *(_DWORD *)(a1 + 564) = *((_DWORD *)v10 + 1);
    *(_DWORD *)(a1 + 560) = *((_DWORD *)v10 + 2);
    *(_DWORD *)(a1 + 592) = *((_DWORD *)v10 + 3);
    *(_DWORD *)(a1 + 712) = *((_DWORD *)v10 + 4);
    *(_DWORD *)(a1 + 716) = *((_DWORD *)v10 + 5);
    *(_DWORD *)(a1 + 720) = *((_DWORD *)v10 + 6);
  }
  char v12 = *(const void **)(a1 + 728);
  if (v11 != *(void *)(a1 + 736) - (void)v12 || memcmp(v10, v12, v11))
  {
    char v13 = *(void **)(a1 + 600);
    *(void *)(a1 + 600) = 0;

    if (a1 + 728 != a2) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 728), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    }
  }
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192A9EEA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::~meta_convolution_kernel(Espresso::MetalLowmemEngine::meta_convolution_kernel *this)
{
  Espresso::MetalLowmemEngine::meta_convolution_kernel::~meta_convolution_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t vars8;

  *(void *)this = &unk_1EE34A180;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  id v5 = (void *)*((void *)this + 94);
  if (v5)
  {
    *((void *)this + 95) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 91);
  if (v6)
  {
    *((void *)this + 92) = v6;
    operator delete(v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 88);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 86);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  int v9 = (std::__shared_weak_count *)*((void *)this + 84);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 82);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

uint64_t Espresso::MPSGraphEngine::Kernels::squeeze_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 420) == 1)
  {
    if (!*(_DWORD *)(a1 + 280)) {
      return 1;
    }
    uint64_t v4 = a2[1];
    v6[0] = *a2;
    v6[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "[Dispatch::MPSGraph::squeeze_kernel] unsupported: nd_axis != 0");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v7, a3, 0);
    Espresso::emit_kernel_validation_warning(v6, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else
  {
    uint64_t v4 = a2[1];
    v13[0] = *a2;
    v13[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "[Dispatch::MPSGraph::squeeze_kernel] unsupported: version != 1");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v7, a3, 0);
    Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v14 = (void **)&v11;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v14 = (void **)&v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v4) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
  }
  return 0;
}

void sub_192A9F130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a17);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::squeeze_kernel::~squeeze_kernel(Espresso::MPSGraphEngine::Kernels::squeeze_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,int const&>(uint64_t a1, int a2)
{
}

void Espresso::pass_allocation::run_on_network(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

void Espresso::pass_allocation::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_allocation::~pass_allocation(Espresso::pass_allocation *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void sub_192A9F470(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_fastspeech::run_on_network(void **a1@<X1>, Espresso::pass_fastspeech *a2@<X8>)
{
}

void Espresso::pass_fastspeech::run_v1(Espresso::pass_fastspeech *this, void **a2)
{
  v497[8] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v447, "/tmp/");
  std::string::basic_string[abi:ne180100]<0>(&__p, "original");
  v471[3] = 0;
  Espresso::net::pprint((uint64_t)a2, (uint64_t)&__p, (uint64_t)v471);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v471);
  if (SHIBYTE(v488) < 0) {
    operator delete((void *)__p);
  }
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)v472, (Espresso::net *)a2);
  uint64_t v2 = getenv("FASTSPEECH_ENCODER");
  uint64_t v3 = (((unsigned char *)a2[5] - (unsigned char *)a2[4]) >> 4) - 1;
  v456[0] = v3;
  if (!v3) {
    goto LABEL_190;
  }
  uint64_t v393 = v2 != 0;
  uint64_t v4 = (char *)(a2 + 12);
  v392 = (char *)(a2 + 17);
  v395 = (char *)(a2 + 12);
  do
  {
    id v5 = (uint64_t *)((char *)a2[4] + 16 * v3);
    uint64_t v7 = *v5;
    int v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v8 = *(const void **)(v7 + 64);
    if (!v8) {
      goto LABEL_138;
    }
    v394 = v6;
    if (!v398) {
      goto LABEL_137;
    }
    int v9 = *(std::__shared_weak_count **)(v7 + 72);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v391 = v9;
    if (v393)
    {
      uint64_t v10 = (std::__shared_weak_count *)a2[3];
      v461 = a2[2];
      v462 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v459 = 0;
      v460 = 0;
      Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v461, 0, &v459);
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      uint64_t v439 = v456[0];
      if (v456[0] >= (unint64_t)((((unsigned char *)a2[5] - (unsigned char *)a2[4]) >> 4) - 7))
      {
LABEL_125:
        std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v497);
        if (v496) {
          nitro::nitro_function::nitro_function(v496);
        }
        uint64_t v74 = v495;
        uint64_t v4 = (char *)(a2 + 12);
        if (!v495) {
          goto LABEL_129;
        }
LABEL_128:
        nitro::nitro_function::nitro_function(v74);
        goto LABEL_129;
      }
      uint64_t v11 = *(void *)v472;
      while (1)
      {
        LODWORD(v454) = 0;
        *(_DWORD *)buf = v456[0];
        LODWORD(v454) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v11 + 16), v456[0], buf)[5];
        int v12 = v454;
        uint64_t v13 = *(void *)v472;
        uint64_t v14 = (uint64_t **)(*(void *)v472 + 16);
        int v453 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)v472 + 16), v454, &v454)[5];
        int v15 = v453;
        int v452 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v14, v453, &v453)[5];
        int v16 = v452;
        int v17 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 40), v452, &v452)[5]+ 1);
        int v451 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v14, v16, &v452)[5];
        int v434 = v451;
        int v450 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v14, v451, &v451)[5];
        int v430 = v450;
        int v449 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v14, v450, &v450)[5];
        int v18 = v449;
        int v396 = v12;
        uint64_t v412 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v14, v449, &v449)[5];
        __int32 v20 = a2[4];
        uint64_t v21 = v20[2 * v12];
        int v22 = *(const void **)(v21 + 64);
        if (v22
        {
          uint64_t v24 = *(std::__shared_weak_count **)(v21 + 72);
          v416 = v23;
          if (v24)
          {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            __int32 v20 = a2[4];
          }
        }
        else
        {
          v416 = 0;
          uint64_t v24 = 0;
        }
        uint64_t v25 = v20[2 * v15];
        __int32 v26 = *(const void **)(v25 + 64);
        if (v26
        {
          uint64_t v28 = *(void *)(v25 + 72);
          v409 = v27;
          if (v28)
          {
            v425 = *(std::__shared_weak_count **)(v25 + 72);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
            __int32 v20 = a2[4];
            goto LABEL_29;
          }
        }
        else
        {
          v409 = 0;
        }
        v425 = 0;
LABEL_29:
        uint64_t v29 = v20[2 * v16];
        char v30 = *(const void **)(v29 + 64);
        uint64_t v399 = v13;
        int v397 = v15;
        if (v30)
        {
          if (v31)
          {
            uint64_t v32 = *(void *)(v29 + 72);
            if (v32)
            {
              v421 = *(std::__shared_weak_count **)(v29 + 72);
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
              __int32 v20 = a2[4];
              goto LABEL_35;
            }
          }
        }
        else
        {
          long long v31 = 0;
        }
        v421 = 0;
LABEL_35:
        v407 = v24;
        uint64_t v33 = v20[2 * v17];
        unsigned int v34 = *(const void **)(v33 + 64);
        if (v34)
        {
          if (v35)
          {
            uint64_t v36 = *(void *)(v33 + 72);
            if (v36)
            {
              v404 = *(std::__shared_weak_count **)(v33 + 72);
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
              __int32 v20 = a2[4];
              goto LABEL_41;
            }
          }
        }
        else
        {
          double v35 = 0;
        }
        v404 = 0;
LABEL_41:
        uint64_t v37 = v20[2 * v434];
        uint64_t v38 = *(const void **)(v37 + 64);
        if (v38)
        {
          if (v39)
          {
            uint64_t v40 = *(void *)(v37 + 72);
            if (v40)
            {
              v402 = *(std::__shared_weak_count **)(v37 + 72);
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
              __int32 v20 = a2[4];
              goto LABEL_47;
            }
          }
        }
        else
        {
          int v39 = 0;
        }
        v402 = 0;
LABEL_47:
        uint64_t v41 = v20[2 * v430];
        uint64_t v42 = *(const void **)(v41 + 64);
        if (v42)
        {
          if (v43)
          {
            uint64_t v44 = *(void *)(v41 + 72);
            if (v44)
            {
              v401 = *(std::__shared_weak_count **)(v41 + 72);
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
              __int32 v20 = a2[4];
              goto LABEL_53;
            }
          }
        }
        else
        {
          uint64_t v43 = 0;
        }
        v401 = 0;
LABEL_53:
        uint64_t v45 = v20[2 * v18];
        int v46 = *(const void **)(v45 + 64);
        if (v46)
        {
          if (v47)
          {
            uint64_t v48 = *(void *)(v45 + 72);
            if (v48)
            {
              v400 = *(std::__shared_weak_count **)(v45 + 72);
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
              __int32 v20 = a2[4];
              goto LABEL_59;
            }
          }
        }
        else
        {
          __int32 v47 = 0;
        }
        v400 = 0;
LABEL_59:
        uint64_t v49 = v20[2 * v412];
        int32x2_t v50 = *(void **)(v49 + 64);
        if (v50
        {
          int v51 = *(std::__shared_weak_count **)(v49 + 72);
          char v52 = 1;
          if (v51) {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          char v52 = 0;
          int v51 = 0;
        }
        if (v416) {
          BOOL v53 = v35 == 0;
        }
        else {
          BOOL v53 = 1;
        }
        if (v53 || v409 == 0 || v31 == 0 || v39 == 0 || v43 == 0 || v47 == 0) {
          char v59 = 0;
        }
        else {
          char v59 = v52;
        }
        if (v59)
        {
          uint64_t v60 = Espresso::espresso_os_log_subsystem((Espresso *)v50, v19);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134217984;
            *(void *)&uint8_t buf[4] = v439;
            _os_log_impl(&dword_1920CB000, v60, OS_LOG_TYPE_INFO, "[Extra operations in-between dilated convolutions] Found the pattern on layer: %lu\n", buf, 0xCu);
          }

          *(void *)v455 = v17;
          v468 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v395, v17, v455)[3];
          uint64_t v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v392, (unsigned __int8 *)v468, (long long **)&v468);
          Espresso::abstract_blob_container::shape((char *)buf, *((void *)v61 + 5));
          int v62 = *(_DWORD *)buf;
          if (v479)
          {
            v480 = v479;
            operator delete(v479);
          }
          uint64_t v63 = v51;
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v468, v62, 1, 1, 1);
          uint64_t v64 = v468;
          id v65 = (void *)v468[2];
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(buf, v35 + 43);
          memcpy(v65, *(const void **)(*(void *)buf + 24), 4 * *((int *)v64 + 2));
          if (*(void *)&buf[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
          }
          id v66 = v469;
          v457 = v64;
          v458 = v469;
          if (v469) {
            atomic_fetch_add_explicit(&v469->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void *, uint64_t **))(*(void *)v398 + 392))(v398, &v457);
          if (v458) {
            nitro::nitro_function::nitro_function(v458);
          }
          *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v398 + 384))(v398) + 32) = 1;
          if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v39 + 384))(v39) == 1)
          {
            *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v398 + 384))(v398) + 24) = 1;
          }
          else
          {
            int v67 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v39 + 384))(v39);
            *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v398 + 384))(v398) + 60) = v67;
          }
          *(void *)v455 = v18;
          BOOL v68 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v395, v18, v455)[3];
          *(void *)buf = v456;
          int v69 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v395, (unint64_t *)v456, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
          std::string::operator=((std::string *)v69[3], v68);
          Espresso::net::remove_layer((Espresso::net *)a2, v18);
          Espresso::net::remove_layer((Espresso::net *)a2, v430);
          Espresso::net::remove_layer((Espresso::net *)a2, v434);
          Espresso::net::remove_layer((Espresso::net *)a2, v16);
          Espresso::net::remove_layer((Espresso::net *)a2, v17);
          Espresso::net::remove_layer((Espresso::net *)a2, v397);
          Espresso::net::remove_layer((Espresso::net *)a2, v396);
          int v72 = Espresso::espresso_os_log_subsystem(v70, v71);
          if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67110656;
            *(_DWORD *)&uint8_t buf[4] = v18;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v430;
            *(_WORD *)&buf[14] = 1024;
            LODWORD(v476) = v434;
            WORD2(v476) = 1024;
            *(_DWORD *)((char *)&v476 + 6) = v17;
            WORD5(v476) = 1024;
            HIDWORD(v476) = v16;
            *(_WORD *)v477 = 1024;
            *(_DWORD *)&v477[2] = v397;
            __int16 v478 = 1024;
            LODWORD(v479) = v396;
            _os_log_impl(&dword_1920CB000, v72, OS_LOG_TYPE_INFO, "[Extra operations in-between dilated convolutions]                                         Removing layers: %d %d %d %d %d %d %d\n", buf, 0x2Cu);
          }

          int v51 = v63;
          *(_OWORD *)buf = 0u;
          long long v476 = 0u;
          *(_DWORD *)v477 = 1065353216;
          Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (long long **)a2, v439, (uint64_t)buf);
          std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node((void *)v476);
          int v73 = *(void **)buf;
          *(void *)buf = 0;
          if (v73) {
            operator delete(v73);
          }
          if (v66) {
            nitro::nitro_function::nitro_function(v66);
          }
        }
        if (v51) {
          nitro::nitro_function::nitro_function(v51);
        }
        uint64_t v11 = v399;
        if (v400) {
          nitro::nitro_function::nitro_function(v400);
        }
        if (v401) {
          nitro::nitro_function::nitro_function(v401);
        }
        if (v402) {
          nitro::nitro_function::nitro_function(v402);
        }
        if (v404) {
          nitro::nitro_function::nitro_function(v404);
        }
        if (v421) {
          nitro::nitro_function::nitro_function(v421);
        }
        if (v425) {
          nitro::nitro_function::nitro_function(v425);
        }
        if (v407) {
          nitro::nitro_function::nitro_function(v407);
        }
        if ((v59 & 1) == 0 && ++v439 < (unint64_t)((((unsigned char *)a2[5] - (unsigned char *)a2[4]) >> 4) - 7)) {
          continue;
        }
        goto LABEL_125;
      }
    }
    uint64_t v75 = (std::__shared_weak_count *)a2[3];
    v465 = a2[2];
    v466 = v75;
    if (v75) {
      atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v470 = 0uLL;
    Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v465, 0, (uint64_t *)&v470);
    if (v75) {
      nitro::nitro_function::nitro_function(v75);
    }
    for (unint64_t i = v456[0]; ; unint64_t i = *(void *)v455 + 1)
    {
      *(void *)v455 = i;
      uint64_t v77 = a2[4];
      if (i >= ((unsigned char *)a2[5] - v77) >> 4) {
        break;
      }
      uint64_t v78 = *(void *)&v77[16 * i];
      uint64_t v79 = *(const void **)(v78 + 64);
      if (!v79)
      {
        uint64_t v80 = 0;
LABEL_153:
        int v81 = 0;
        goto LABEL_154;
      }
      if (!v80) {
        goto LABEL_153;
      }
      int v81 = *(std::__shared_weak_count **)(v78 + 72);
      if (v81)
      {
        atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v77 = a2[4];
      }
LABEL_154:
      uint64_t v82 = *(void *)&v77[16 * i + 16];
      int v83 = *(const void **)(v82 + 64);
      if (v83
      {
        long long v84 = *(std::__shared_weak_count **)(v82 + 72);
        if (v84)
        {
          atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
          if (v80)
          {
            long long v85 = v84;
LABEL_165:
            v468 = (uint64_t *)v455;
            v468 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v4, (unint64_t *)v455, (uint64_t)&std::piecewise_construct, &v468)[3];
            long long v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v392, (unsigned __int8 *)v468, (long long **)&v468);
            Espresso::abstract_blob_container::shape((char *)buf, *((void *)v86 + 5));
            int v87 = *(_DWORD *)buf;
            if (v479)
            {
              v480 = v479;
              operator delete(v479);
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v468, v87, 1, 1, 1);
            long long v88 = v468;
            long long v89 = (void *)v468[2];
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(buf, v80 + 43);
            memcpy(v89, *(const void **)(*(void *)buf + 24), 4 * *((int *)v88 + 2));
            if (*(void *)&buf[8]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
            }
            long long v90 = v469;
            v463 = v88;
            v464 = v469;
            if (v469) {
              atomic_fetch_add_explicit(&v469->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, uint64_t **))(*(void *)v398 + 392))(v398, &v463);
            if (v464) {
              nitro::nitro_function::nitro_function(v464);
            }
            *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v398 + 384))(v398) + 32) = 1;
            uint64_t v91 = *(void *)v455;
            uint64_t v92 = *((void *)a2[4] + 2 * *(void *)v455 - 2);
            uint64_t v93 = *(const void **)(v92 + 64);
            if (v93
            {
              uint64_t v94 = *(std::__shared_weak_count **)(v92 + 72);
              if (v94) {
                atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              uint64_t v94 = 0;
            }
            *(void *)buf = v91 + 1;
            int v95 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v4, v91 + 1, buf)[3];
            uint64_t v454 = *(void *)v455 - 1;
            int v96 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v4, *(void *)v455 - 1, &v454);
            std::string::operator=((std::string *)v96[3], v95);
            Espresso::net::remove_layer((Espresso::net *)a2, v455[0] + 1);
            Espresso::net::remove_layer((Espresso::net *)a2, v455[0]);
            *(_OWORD *)buf = 0u;
            long long v476 = 0u;
            *(_DWORD *)v477 = 1065353216;
            Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (long long **)a2, v455[0], (uint64_t)buf);
            std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
            if (v94) {
              nitro::nitro_function::nitro_function(v94);
            }
            if (v90) {
              nitro::nitro_function::nitro_function(v90);
            }
            if (v84) {
              nitro::nitro_function::nitro_function(v85);
            }
            if (v81) {
              nitro::nitro_function::nitro_function(v81);
            }
            break;
          }
          nitro::nitro_function::nitro_function(v84);
        }
        else if (v80)
        {
          long long v85 = 0;
          goto LABEL_165;
        }
      }
      if (v81) {
        nitro::nitro_function::nitro_function(v81);
      }
    }
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v497);
    if (v496) {
      nitro::nitro_function::nitro_function(v496);
    }
    uint64_t v74 = v495;
    if (v495) {
      goto LABEL_128;
    }
LABEL_129:
    if (v494) {
      nitro::nitro_function::nitro_function(v494);
    }
    if (v493 < 0) {
      operator delete(v492);
    }
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v488, v489);
    if (*((void *)&__p + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__p + 1));
    }
    ++v393;
    if (v391) {
      nitro::nitro_function::nitro_function(v391);
    }
LABEL_137:
    int v6 = v394;
LABEL_138:
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    uint64_t v3 = --v456[0];
  }
  while (v456[0]);
LABEL_190:
  if (*(void *)&v472[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v472[8]);
  }
  if (getenv("FASTSPEECH_ENCODER"))
  {
    std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&v470, (Espresso::net *)a2);
    v465 = 0;
    v466 = 0;
    unint64_t v467 = 0;
    uint64_t v97 = ((unsigned char *)a2[5] - (unsigned char *)a2[4]) >> 4;
    uint64_t v98 = v97 - 1;
    if (v97 != 1)
    {
      v405 = (char *)(a2 + 12);
      while (1)
      {
        int v99 = (uint64_t *)((char *)a2[4] + 16 * v98);
        uint64_t v100 = *v99;
        uint64_t v101 = (std::__shared_weak_count *)v99[1];
        if (v101) {
          atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v102 = *(const void **)(v100 + 64);
        if (v102)
        {
          if (v103) {
            break;
          }
        }
LABEL_308:
        if (v101) {
          nitro::nitro_function::nitro_function(v101);
        }
        if (!--v98)
        {
          uint64_t v173 = (int *)v465;
          uint64_t v174 = (int *)v466;
          goto LABEL_313;
        }
      }
      int v104 = v103;
      __int32 v105 = *(std::__shared_weak_count **)(v100 + 72);
      if (v105) {
        atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v106 = v470;
      int v107 = (uint64_t **)(v470 + 16);
      LODWORD(__p) = v98;
      v426 = v105;
      LODWORD(v463) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v470 + 16), v98, &__p)[5];
      int v108 = (int)v463;
      LODWORD(v461) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v107, (int)v463, &v463)[5];
      int v109 = (int)v461;
      float v110 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v107, (int)v461, &v461);
      unint64_t v111 = v109;
      int v440 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v106 + 40), *(_DWORD *)v110[5], v110[5])[5]+ 1);
      LODWORD(v459) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v107, v109, &v461)[5];
      int v112 = v459;
      int v435 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v107, v459, &v459)[5];
      unsigned int v114 = a2[4];
      uint64_t v115 = v114[2 * v108];
      long long v116 = *(const void **)(v115 + 64);
      if (v116)
      {
        if (v117)
        {
          uint64_t v118 = *(void *)(v115 + 72);
          if (v118)
          {
            v422 = *(std::__shared_weak_count **)(v115 + 72);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v118 + 8), 1uLL, memory_order_relaxed);
            unsigned int v114 = a2[4];
            goto LABEL_207;
          }
        }
      }
      else
      {
        uint64_t v117 = 0;
      }
      v422 = 0;
LABEL_207:
      uint64_t v119 = v114[2 * v111];
      uint64_t v120 = *(const void **)(v119 + 64);
      if (v120)
      {
        if (v121)
        {
          uint64_t v122 = *(void *)(v119 + 72);
          if (v122)
          {
            v417 = *(std::__shared_weak_count **)(v119 + 72);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v122 + 8), 1uLL, memory_order_relaxed);
            unsigned int v114 = a2[4];
            goto LABEL_213;
          }
        }
      }
      else
      {
        uint64_t v121 = 0;
      }
      v417 = 0;
LABEL_213:
      uint64_t v123 = v114[2 * v440];
      uint64_t v124 = *(const void **)(v123 + 64);
      if (v124)
      {
        if (v125)
        {
          uint64_t v126 = *(void *)(v123 + 72);
          if (v126)
          {
            v413 = *(std::__shared_weak_count **)(v123 + 72);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
            unsigned int v114 = a2[4];
            goto LABEL_219;
          }
        }
      }
      else
      {
        uint64_t v125 = 0;
      }
      v413 = 0;
LABEL_219:
      uint64_t v127 = v114[2 * v112];
      std::string::size_type v128 = *(const void **)(v127 + 64);
      if (v128)
      {
        if (v129)
        {
          uint64_t v130 = *(void *)(v127 + 72);
          if (v130)
          {
            v410 = *(std::__shared_weak_count **)(v127 + 72);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v130 + 8), 1uLL, memory_order_relaxed);
            unsigned int v114 = a2[4];
LABEL_225:
            uint64_t v131 = v114[2 * v435];
            std::string::size_type v132 = *(std::__shared_weak_count **)(v131 + 64);
            if (v132)
            {
              float v133 = v132;
              if (v132)
              {
                std::string::size_type v132 = *(std::__shared_weak_count **)(v131 + 72);
                if (v132) {
                  atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
            }
            else
            {
              float v133 = 0;
            }
            if (v121 && v117 && v125 && v129 && v133)
            {
              v403 = v132;
              long long v134 = Espresso::espresso_os_log_subsystem((Espresso *)v132, v113);
              if (os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
              {
                LODWORD(__p) = 134217984;
                *(void *)((char *)&__p + 4) = v98;
                _os_log_impl(&dword_1920CB000, v134, OS_LOG_TYPE_INFO, "[Convolution fuse bias and activation] Found pattern on layer: %lu\n", (uint8_t *)&__p, 0xCu);
              }

              *(void *)v472 = v440;
              *(void *)buf = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v405, v440, v472)[3];
              std::string v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 17), *(unsigned __int8 **)buf, (long long **)buf);
              Espresso::abstract_blob_container::shape((char *)&__p, *((void *)v135 + 5));
              int v136 = __p;
              if (v490)
              {
                v491 = v490;
                operator delete(v490);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, v136, 1, 1, 1);
              uint64_t v137 = __p;
              long long v138 = *(void **)(__p + 16);
              Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(buf, v125 + 43);
              memcpy(v138, *(const void **)(*(void *)buf + 24), 4 * *(int *)(v137 + 8));
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              std::string v139 = (std::__shared_weak_count *)*((void *)&__p + 1);
              v468 = (uint64_t *)v137;
              v469 = (std::__shared_weak_count *)*((void *)&__p + 1);
              if (*((void *)&__p + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(void *, uint64_t **))(*(void *)v104 + 392))(v104, &v468);
              if (v469) {
                nitro::nitro_function::nitro_function(v469);
              }
              *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v104 + 384))(v104) + 32) = 1;
              if (*(_DWORD *)((uint64_t (*)(std::__shared_weak_count *))v133->__vftable[9].__get_deleter)(v133) == 1)
              {
                *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v104 + 384))(v104) + 24) = 1;
              }
              else
              {
                int v140 = *(_DWORD *)((uint64_t (*)(std::__shared_weak_count *))v133->__vftable[9].__get_deleter)(v133);
                *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v104 + 384))(v104) + 60) = v140;
              }
              *(void *)buf = v435;
              uint64_t v141 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v405, v435, buf)[3];
              *(void *)v472 = v111;
              long long v142 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v405, v111, v472);
              std::string::operator=((std::string *)v142[3], v141);
              std::string::size_type v144 = v466;
              unint64_t v143 = v467;
              if ((unint64_t)v466 >= v467)
              {
                long long v146 = (std::__shared_weak_count *)v465;
                int64_t v147 = ((char *)v466 - (unsigned char *)v465) >> 2;
                unint64_t v148 = v147 + 1;
                if ((unint64_t)(v147 + 1) >> 62) {
                  goto LABEL_706;
                }
                uint64_t v149 = v467 - (void)v465;
                if ((uint64_t)(v467 - (void)v465) >> 1 > v148) {
                  unint64_t v148 = v149 >> 1;
                }
                BOOL v150 = (unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v151 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v150) {
                  unint64_t v151 = v148;
                }
                if (v151)
                {
                  unint64_t v151 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v151);
                  long long v146 = (std::__shared_weak_count *)v465;
                  std::string::size_type v144 = v466;
                }
                else
                {
                  uint64_t v152 = 0;
                }
                uint64_t v153 = (_DWORD *)(v151 + 4 * v147);
                *uint64_t v153 = v440;
                int v145 = (std::__shared_weak_count *)(v153 + 1);
                while (v144 != v146)
                {
                  int shared_weak_owners_high = HIDWORD(v144[-1].__shared_weak_owners_);
                  std::string::size_type v144 = (std::__shared_weak_count *)((char *)v144 - 4);
                  *--uint64_t v153 = shared_weak_owners_high;
                }
                unint64_t v143 = v151 + 4 * v152;
                v465 = v153;
                v466 = v145;
                unint64_t v467 = v143;
                if (v146)
                {
                  operator delete(v146);
                  unint64_t v143 = v467;
                }
              }
              else
              {
                LODWORD(v466->__vftable) = v440;
                int v145 = (std::__shared_weak_count *)((char *)&v144->__vftable + 4);
              }
              v466 = v145;
              if ((unint64_t)v145 >= v143)
              {
                std::string::size_type v156 = (std::__shared_weak_count *)v465;
                uint64_t v157 = ((char *)v145 - (unsigned char *)v465) >> 2;
                unint64_t v158 = v157 + 1;
                if ((unint64_t)(v157 + 1) >> 62) {
                  goto LABEL_706;
                }
                uint64_t v159 = v143 - (void)v465;
                if (v159 >> 1 > v158) {
                  unint64_t v158 = v159 >> 1;
                }
                BOOL v150 = (unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v160 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v150) {
                  unint64_t v160 = v158;
                }
                if (v160)
                {
                  unint64_t v160 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v160);
                  std::string::size_type v156 = (std::__shared_weak_count *)v465;
                  int v145 = v466;
                }
                else
                {
                  uint64_t v161 = 0;
                }
                std::string::size_type v162 = (_DWORD *)(v160 + 4 * v157);
                *std::string::size_type v162 = v459;
                int v155 = (std::__shared_weak_count *)(v162 + 1);
                while (v145 != v156)
                {
                  int v163 = HIDWORD(v145[-1].__shared_weak_owners_);
                  int v145 = (std::__shared_weak_count *)((char *)v145 - 4);
                  *--std::string::size_type v162 = v163;
                }
                unint64_t v143 = v160 + 4 * v161;
                v465 = v162;
                v466 = v155;
                unint64_t v467 = v143;
                if (v156)
                {
                  operator delete(v156);
                  unint64_t v143 = v467;
                }
              }
              else
              {
                LODWORD(v145->__vftable) = v459;
                int v155 = (std::__shared_weak_count *)((char *)&v145->__vftable + 4);
              }
              v466 = v155;
              if ((unint64_t)v155 >= v143)
              {
                int v165 = (std::__shared_weak_count *)v465;
                uint64_t v166 = ((char *)v155 - (unsigned char *)v465) >> 2;
                unint64_t v167 = v166 + 1;
                if ((unint64_t)(v166 + 1) >> 62) {
LABEL_706:
                }
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                uint64_t v168 = v143 - (void)v465;
                if (v168 >> 1 > v167) {
                  unint64_t v167 = v168 >> 1;
                }
                BOOL v150 = (unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v150) {
                  unint64_t v169 = v167;
                }
                if (v169)
                {
                  unint64_t v169 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v169);
                  int v165 = (std::__shared_weak_count *)v465;
                  int v155 = v466;
                }
                else
                {
                  uint64_t v170 = 0;
                }
                uint64_t v171 = (_DWORD *)(v169 + 4 * v166);
                *uint64_t v171 = v435;
                int v164 = (std::__shared_weak_count *)(v171 + 1);
                while (v155 != v165)
                {
                  int v172 = HIDWORD(v155[-1].__shared_weak_owners_);
                  int v155 = (std::__shared_weak_count *)((char *)v155 - 4);
                  *--uint64_t v171 = v172;
                }
                v465 = v171;
                v466 = v164;
                unint64_t v467 = v169 + 4 * v170;
                if (v165) {
                  operator delete(v165);
                }
              }
              else
              {
                LODWORD(v155->__vftable) = v435;
                int v164 = (std::__shared_weak_count *)((char *)&v155->__vftable + 4);
              }
              v466 = v164;
              if (v139) {
                nitro::nitro_function::nitro_function(v139);
              }
              std::string::size_type v132 = v403;
            }
            if (v132) {
              nitro::nitro_function::nitro_function(v132);
            }
            if (v410) {
              nitro::nitro_function::nitro_function(v410);
            }
            if (v413) {
              nitro::nitro_function::nitro_function(v413);
            }
            if (v417) {
              nitro::nitro_function::nitro_function(v417);
            }
            if (v422) {
              nitro::nitro_function::nitro_function(v422);
            }
            if (v426) {
              nitro::nitro_function::nitro_function(v426);
            }
            goto LABEL_308;
          }
        }
      }
      else
      {
        uint64_t v129 = 0;
      }
      v410 = 0;
      goto LABEL_225;
    }
    uint64_t v174 = 0;
    uint64_t v173 = 0;
LABEL_313:
    unint64_t v175 = 126 - 2 * __clz(v174 - v173);
    if (v174 == v173) {
      uint64_t v176 = 0;
    }
    else {
      uint64_t v176 = v175;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v173, v174, v176, 1);
    id v177 = (std::__shared_weak_count *)a2[3];
    v463 = (uint64_t *)a2[2];
    v464 = v177;
    if (v177) {
      atomic_fetch_add_explicit(&v177->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v461 = 0;
    v462 = 0;
    uint64_t v178 = (Espresso *)Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v463, 0, (uint64_t *)&v461);
    if (v177) {
      nitro::nitro_function::nitro_function(v177);
    }
    int v180 = (int *)v465;
    __int32 v181 = v466;
    if (v465 != v466)
    {
      do
      {
        int v182 = *v180;
        __int32 v183 = Espresso::espresso_os_log_subsystem(v178, v179);
        if (os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v182;
          _os_log_impl(&dword_1920CB000, v183, OS_LOG_TYPE_INFO, "[Convolution fuse bias and activation] Removing layer: %d\n", buf, 8u);
        }

        Espresso::net::remove_layer((Espresso::net *)a2, v182);
        ++v180;
      }
      while (v180 != (int *)v181);
    }
    *(_OWORD *)buf = 0u;
    long long v476 = 0u;
    *(_DWORD *)v477 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (long long **)a2, 0, (uint64_t)buf);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    recompile_fs2((Espresso::net *)a2);
    std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)buf, (Espresso::net *)a2);
    uint64_t v184 = *(void *)buf;
    int v185 = (std::__shared_weak_count *)*((void *)&v470 + 1);
    long long v470 = *(_OWORD *)buf;
    if (v185)
    {
      uint64_t v441 = *(void *)buf;
      nitro::nitro_function::nitro_function(v185);
      uint64_t v184 = v441;
    }
    int v186 = (int *)v465;
    v466 = (std::__shared_weak_count *)v465;
    uint64_t v187 = ((unsigned char *)a2[5] - (unsigned char *)a2[4]) >> 4;
    uint64_t v188 = v187 - 1;
    if (v187 != 1)
    {
      uint64_t v189 = v184;
      v408 = (char *)(a2 + 12);
      while (1)
      {
        int v190 = (uint64_t *)((char *)a2[4] + 16 * v188);
        uint64_t v192 = *v190;
        uint64_t v191 = (std::__shared_weak_count *)v190[1];
        if (v191) {
          atomic_fetch_add_explicit(&v191->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v193 = *(const void **)(v192 + 64);
        if (v193)
        {
          if (v194) {
            break;
          }
        }
LABEL_423:
        if (v191) {
          nitro::nitro_function::nitro_function(v191);
        }
        if (!--v188)
        {
          v251 = (int *)v465;
          int v186 = (int *)v466;
          goto LABEL_428;
        }
      }
      int32x2_t v195 = *(std::__shared_weak_count **)(v192 + 72);
      if (v195) {
        atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v406 = v194;
      LODWORD(v456[0]) = 0;
      *(_DWORD *)buf = v188;
      v431 = v195;
      LODWORD(v456[0]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v189 + 16), v188, buf)[5];
      int v196 = v456[0];
      uint64_t v197 = v470;
      uint64_t v198 = (uint64_t **)(v470 + 16);
      v455[0] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v470 + 16), v456[0], v456)[5];
      int v199 = v455[0];
      int32x2_t v200 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v198, v455[0], v455);
      int v442 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v197 + 40), *(_DWORD *)v200[5], v200[5])[5]+ 1);
      int v436 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v198, v199, v455)[5];
      long long v201 = a2[4];
      uint64_t v202 = v201[2 * v196];
      v203 = *(const void **)(v202 + 64);
      if (v203)
      {
        if (v204)
        {
          uint64_t v205 = *(void *)(v202 + 72);
          if (v205)
          {
            v427 = *(std::__shared_weak_count **)(v202 + 72);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v205 + 8), 1uLL, memory_order_relaxed);
            long long v201 = a2[4];
            goto LABEL_340;
          }
        }
      }
      else
      {
        uint64_t v204 = 0;
      }
      v427 = 0;
LABEL_340:
      uint64_t v414 = v197;
      uint64_t v206 = v201[2 * v199];
      v207 = *(const void **)(v206 + 64);
      if (v207)
      {
        if (v208)
        {
          uint64_t v209 = *(void *)(v206 + 72);
          if (v209)
          {
            v423 = *(std::__shared_weak_count **)(v206 + 72);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v209 + 8), 1uLL, memory_order_relaxed);
            long long v201 = a2[4];
LABEL_347:
            uint64_t v210 = v201[2 * v442];
            int v211 = *(const void **)(v210 + 64);
            if (v211
            {
              uint64_t v212 = *(void *)(v210 + 72);
              if (v212)
              {
                v418 = *(std::__shared_weak_count **)(v210 + 72);
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v212 + 8), 1uLL, memory_order_relaxed);
                long long v201 = a2[4];
                goto LABEL_353;
              }
            }
            else
            {
              v411 = 0;
            }
            v418 = 0;
LABEL_353:
            uint64_t v213 = v201[2 * v436];
            std::string v214 = *(const void **)(v213 + 64);
            if (v214
            {
              v215 = *(std::__shared_weak_count **)(v213 + 72);
              if (v215) {
                atomic_fetch_add_explicit(&v215->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v208 && v204 && v411)
              {
                uint64_t v216 = *((void *)a2[4] + 2 * v442);
                if (*(char *)(v216 + 39) < 0)
                {
                  uint64_t v217 = *(char **)(v216 + 16);
                  uint64_t v218 = *(void *)(v216 + 24);
                }
                else
                {
                  uint64_t v217 = (char *)(v216 + 16);
                  uint64_t v218 = *(unsigned __int8 *)(v216 + 39);
                }
                if (v218 >= 4)
                {
                  uint64_t v219 = (Espresso *)&v217[v218];
                  v220 = v217;
                  while (1)
                  {
                    int v221 = (Espresso *)memchr(v220, 66, v218 - 3);
                    if (!v221) {
                      goto LABEL_413;
                    }
                    if (*(_DWORD *)v221 == 1935763778) {
                      break;
                    }
                    v220 = (char *)v221 + 1;
                    uint64_t v218 = v219 - (Espresso *)v220;
                    if (v219 - (Espresso *)v220 < 4) {
                      goto LABEL_413;
                    }
                  }
                  if (v221 != v219 && v221 - (Espresso *)v217 != -1)
                  {
                    unsigned int v223 = Espresso::espresso_os_log_subsystem(v221, v222);
                    if (os_log_type_enabled(v223, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 134217984;
                      *(void *)&uint8_t buf[4] = v188;
                      _os_log_impl(&dword_1920CB000, v223, OS_LOG_TYPE_INFO, "[Convolution fuse bias only] Found pattern on layer: %lu\n", buf, 0xCu);
                    }

                    v457 = (uint64_t *)v442;
                    *(void *)v472 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v408, v442, &v457)[3];
                    uint64_t v224 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 17), *(unsigned __int8 **)v472, (long long **)v472);
                    Espresso::abstract_blob_container::shape((char *)buf, *((void *)v224 + 5));
                    int v225 = *(_DWORD *)buf;
                    if (v479)
                    {
                      v480 = v479;
                      operator delete(v479);
                    }
                    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(buf, v225, 1, 1, 1);
                    uint64_t v226 = *(void *)buf;
                    __int32 v227 = *(void **)(*(void *)buf + 16);
                    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v472, v411 + 43);
                    memcpy(v227, *(const void **)(*(void *)v472 + 24), 4 * *(int *)(v226 + 8));
                    if (*(void *)&v472[8]) {
                      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v472[8]);
                    }
                    uint64_t v228 = *(std::__shared_weak_count **)&buf[8];
                    uint64_t v459 = v226;
                    v460 = *(std::__shared_weak_count **)&buf[8];
                    if (*(void *)&buf[8]) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
                    }
                    (*(void (**)(void *, uint64_t *))(*(void *)v406 + 392))(v406, &v459);
                    if (v460) {
                      nitro::nitro_function::nitro_function(v460);
                    }
                    *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v406 + 384))(v406) + 32) = 1;
                    *(void *)v472 = v436;
                    long long v229 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v408, v436, v472)[3];
                    v457 = (uint64_t *)v199;
                    uint64_t v230 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v408, v199, &v457);
                    std::string::operator=((std::string *)v230[3], v229);
                    uint64_t v232 = v466;
                    unint64_t v231 = v467;
                    if ((unint64_t)v466 >= v467)
                    {
                      long long v234 = (std::__shared_weak_count *)v465;
                      int64_t v235 = ((char *)v466 - (unsigned char *)v465) >> 2;
                      unint64_t v236 = v235 + 1;
                      if ((unint64_t)(v235 + 1) >> 62) {
                        goto LABEL_708;
                      }
                      uint64_t v237 = v467 - (void)v465;
                      if ((uint64_t)(v467 - (void)v465) >> 1 > v236) {
                        unint64_t v236 = v237 >> 1;
                      }
                      BOOL v150 = (unint64_t)v237 >= 0x7FFFFFFFFFFFFFFCLL;
                      unint64_t v238 = 0x3FFFFFFFFFFFFFFFLL;
                      if (!v150) {
                        unint64_t v238 = v236;
                      }
                      if (v238)
                      {
                        unint64_t v238 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v238);
                        long long v234 = (std::__shared_weak_count *)v465;
                        uint64_t v232 = v466;
                      }
                      else
                      {
                        uint64_t v239 = 0;
                      }
                      long long v240 = (_DWORD *)(v238 + 4 * v235);
                      *long long v240 = v442;
                      id v233 = (std::__shared_weak_count *)(v240 + 1);
                      while (v232 != v234)
                      {
                        int v241 = HIDWORD(v232[-1].__shared_weak_owners_);
                        uint64_t v232 = (std::__shared_weak_count *)((char *)v232 - 4);
                        *--long long v240 = v241;
                      }
                      unint64_t v231 = v238 + 4 * v239;
                      v465 = v240;
                      v466 = v233;
                      unint64_t v467 = v231;
                      if (v234)
                      {
                        operator delete(v234);
                        unint64_t v231 = v467;
                      }
                    }
                    else
                    {
                      LODWORD(v466->__vftable) = v442;
                      id v233 = (std::__shared_weak_count *)((char *)&v232->__vftable + 4);
                    }
                    v466 = v233;
                    if ((unint64_t)v233 >= v231)
                    {
                      uint64_t v243 = (std::__shared_weak_count *)v465;
                      uint64_t v244 = ((char *)v233 - (unsigned char *)v465) >> 2;
                      unint64_t v245 = v244 + 1;
                      if ((unint64_t)(v244 + 1) >> 62) {
LABEL_708:
                      }
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      uint64_t v246 = v231 - (void)v465;
                      if (v246 >> 1 > v245) {
                        unint64_t v245 = v246 >> 1;
                      }
                      BOOL v150 = (unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL;
                      unint64_t v247 = 0x3FFFFFFFFFFFFFFFLL;
                      if (!v150) {
                        unint64_t v247 = v245;
                      }
                      if (v247)
                      {
                        unint64_t v247 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v247);
                        uint64_t v243 = (std::__shared_weak_count *)v465;
                        id v233 = v466;
                      }
                      else
                      {
                        uint64_t v248 = 0;
                      }
                      v249 = (_DWORD *)(v247 + 4 * v244);
                      _DWORD *v249 = v436;
                      std::string v242 = (std::__shared_weak_count *)(v249 + 1);
                      while (v233 != v243)
                      {
                        int v250 = HIDWORD(v233[-1].__shared_weak_owners_);
                        id v233 = (std::__shared_weak_count *)((char *)v233 - 4);
                        *--v249 = v250;
                      }
                      v465 = v249;
                      v466 = v242;
                      unint64_t v467 = v247 + 4 * v248;
                      if (v243) {
                        operator delete(v243);
                      }
                    }
                    else
                    {
                      LODWORD(v233->__vftable) = v436;
                      std::string v242 = (std::__shared_weak_count *)((char *)&v233->__vftable + 4);
                    }
                    v466 = v242;
                    if (v228) {
                      nitro::nitro_function::nitro_function(v228);
                    }
                  }
                }
              }
LABEL_413:
              if (v215) {
                nitro::nitro_function::nitro_function(v215);
              }
            }
            if (v418) {
              nitro::nitro_function::nitro_function(v418);
            }
            uint64_t v189 = v414;
            if (v423) {
              nitro::nitro_function::nitro_function(v423);
            }
            if (v427) {
              nitro::nitro_function::nitro_function(v427);
            }
            if (v431) {
              nitro::nitro_function::nitro_function(v431);
            }
            goto LABEL_423;
          }
        }
      }
      else
      {
        std::string v208 = 0;
      }
      v423 = 0;
      goto LABEL_347;
    }
    v251 = (int *)v465;
LABEL_428:
    unint64_t v252 = 126 - 2 * __clz(v186 - v251);
    if (v186 == v251) {
      uint64_t v253 = 0;
    }
    else {
      uint64_t v253 = v252;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v251, v186, v253, 1);
    v254 = (std::__shared_weak_count *)a2[3];
    v457 = (uint64_t *)a2[2];
    v458 = v254;
    if (v254) {
      atomic_fetch_add_explicit(&v254->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v456[0] = 0;
    v456[1] = 0;
    v255 = (Espresso *)Espresso::sequential_builder::sequential_builder((uint64_t)buf, (uint64_t *)&v457, 0, v456);
    if (v254) {
      nitro::nitro_function::nitro_function(v254);
    }
    v257 = (int *)v465;
    v258 = v466;
    if (v465 != v466)
    {
      do
      {
        int v259 = *v257;
        v260 = Espresso::espresso_os_log_subsystem(v255, v256);
        if (os_log_type_enabled(v260, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v472 = 67109120;
          *(_DWORD *)&v472[4] = v259;
          _os_log_impl(&dword_1920CB000, v260, OS_LOG_TYPE_INFO, "[Convolution fuse bias only] Removing layer: %d\n", v472, 8u);
        }

        Espresso::net::remove_layer((Espresso::net *)a2, v259);
        ++v257;
      }
      while (v257 != (int *)v258);
    }
    *(_OWORD *)v472 = 0u;
    long long v473 = 0u;
    int v474 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)buf, (long long **)a2, 0, (uint64_t)v472);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    recompile_fs2((Espresso::net *)a2);
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v486);
    if (v485) {
      nitro::nitro_function::nitro_function(v485);
    }
    if (v484) {
      nitro::nitro_function::nitro_function(v484);
    }
    if (v483) {
      nitro::nitro_function::nitro_function(v483);
    }
    if (v482 < 0) {
      operator delete(v481);
    }
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v476, *((void **)&v476 + 1));
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v497);
    if (v496) {
      nitro::nitro_function::nitro_function(v496);
    }
    if (v495) {
      nitro::nitro_function::nitro_function(v495);
    }
    if (v494) {
      nitro::nitro_function::nitro_function(v494);
    }
    if (v493 < 0) {
      operator delete(v492);
    }
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v488, v489);
    if (*((void *)&__p + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__p + 1));
    }
    if (v465)
    {
      v466 = (std::__shared_weak_count *)v465;
      operator delete(v465);
    }
    if (*((void *)&v470 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v470 + 1));
    }
    std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&v470, (Espresso::net *)a2);
    memset(v472, 0, sizeof(v472));
    *(void *)&long long v473 = 0;
    v465 = 0;
    v466 = 0;
    unint64_t v467 = 0;
    uint64_t v261 = ((unsigned char *)a2[5] - (unsigned char *)a2[4]) >> 4;
    uint64_t v262 = v261 - 1;
    if (v261 != 1)
    {
      int v264 = 1;
      while (1)
      {
        v265 = (uint64_t *)((char *)a2[4] + 16 * v262);
        uint64_t v266 = *v265;
        v267 = (std::__shared_weak_count *)v265[1];
        if (v267) {
          atomic_fetch_add_explicit(&v267->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v268 = *(const void **)(v266 + 64);
        if (!v268
        {
          goto LABEL_570;
        }
        v269 = *(std::__shared_weak_count **)(v266 + 72);
        if (v269) {
          atomic_fetch_add_explicit(&v269->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v415 = v264;
        v424 = v269;
        uint64_t v428 = v262;
        *(_DWORD *)buf = v262;
        v270 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v470 + 16), v262, buf);
        long long __p = 0uLL;
        uint64_t v488 = 0;
        v271 = (std::__shared_weak_count *)std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v270[5], (uint64_t)v270[6], ((char *)v270[6] - (char *)v270[5]) >> 2);
        v274 = (_DWORD *)*((void *)&__p + 1);
        v273 = (_DWORD *)__p;
        v419 = v267;
        if ((void)__p == *((void *)&__p + 1)) {
          goto LABEL_565;
        }
        int v437 = 0;
        int v275 = 0;
        int v276 = 0;
        *(void *)v432 = *((void *)&__p + 1);
        do
        {
          LODWORD(v468) = *v273;
          int v277 = (int)v468;
          v278 = (uint64_t *)((char *)a2[4] + 16 * (int)v468);
          uint64_t v279 = *v278;
          v280 = (std::__shared_weak_count *)v278[1];
          if (v280) {
            atomic_fetch_add_explicit(&v280->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v281 = *(const void **)(v279 + 64);
          if (v281)
          {
            int v443 = v276;
            {
              v282 = *(std::__shared_weak_count **)(v279 + 72);
              if (v282) {
                atomic_fetch_add_explicit(&v282->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v283 = v263;
              v284 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v470 + 16), v277, &v468);
              memset(buf, 0, sizeof(buf));
              *(void *)&long long v476 = 0;
              v271 = (std::__shared_weak_count *)std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, v284[5], (uint64_t)v284[6], ((char *)v284[6] - (char *)v284[5]) >> 2);
              v285 = *(int **)buf;
              v286 = *(int **)&buf[8];
              if (*(void *)buf != *(void *)&buf[8])
              {
                while (1)
                {
                  v287 = (uint64_t *)((char *)a2[4] + 16 * *v285);
                  uint64_t v288 = *v287;
                  v289 = (std::__shared_weak_count *)v287[1];
                  if (v289) {
                    atomic_fetch_add_explicit(&v289->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v271 = *(std::__shared_weak_count **)(v288 + 64);
                  if (v271)
                  {
                    if (v271) {
                      break;
                    }
                  }
                  int v290 = 0;
                  if (v289) {
                    goto LABEL_488;
                  }
LABEL_489:
                  v275 += v290;
                  if (++v285 == v286)
                  {
                    v285 = *(int **)buf;
                    goto LABEL_493;
                  }
                }
                v271 = *(std::__shared_weak_count **)(v288 + 72);
                if (v271)
                {
                  int v290 = 1;
                  atomic_fetch_add_explicit(&v271->__shared_owners_, 1uLL, memory_order_relaxed);
                  nitro::nitro_function::nitro_function(v271);
                  if (!v289) {
                    goto LABEL_489;
                  }
                }
                else
                {
                  int v290 = 1;
                  if (!v289) {
                    goto LABEL_489;
                  }
                }
LABEL_488:
                nitro::nitro_function::nitro_function(v289);
                goto LABEL_489;
              }
LABEL_493:
              if (v285)
              {
                *(void *)&uint8_t buf[8] = v285;
                operator delete(v285);
              }
              ++v437;
              v281 = *(const void **)(v279 + 64);
              v263 = v283;
              if (v281)
              {
                v274 = *(_DWORD **)v432;
                goto LABEL_498;
              }
              int v292 = 0;
              v274 = *(_DWORD **)v432;
LABEL_503:
              int v291 = v443;
            }
            else
            {
              v282 = 0;
LABEL_498:
              if (!v271)
              {
                int v292 = 0;
                goto LABEL_503;
              }
              v271 = *(std::__shared_weak_count **)(v279 + 72);
              int v291 = v443;
              int v292 = 1;
              if (v271)
              {
                atomic_fetch_add_explicit(&v271->__shared_owners_, 1uLL, memory_order_relaxed);
                nitro::nitro_function::nitro_function(v271);
              }
            }
            int v276 = v292 + v291;
            if (v282) {
              nitro::nitro_function::nitro_function(v282);
            }
          }
          if (v280) {
            nitro::nitro_function::nitro_function(v280);
          }
          ++v273;
        }
        while (v273 != v274);
        if (v437 != 3 || v275 != 3)
        {
          int v264 = v415;
LABEL_575:
          v273 = (_DWORD *)__p;
          if ((void)__p) {
            goto LABEL_566;
          }
          goto LABEL_567;
        }
        int v264 = v415;
        if (v276 != 1) {
          goto LABEL_575;
        }
        v293 = Espresso::espresso_os_log_subsystem((Espresso *)v271, v272);
        if (os_log_type_enabled(v293, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v428;
          _os_log_impl(&dword_1920CB000, v293, OS_LOG_TYPE_INFO, "[Extra transpose operations] Found the pattern on layer: %lu\n", buf, 0xCu);
        }

        v294 = (uint64_t **)(v470 + 16);
        *(_DWORD *)buf = v428;
        v295 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v470 + 16), v428, buf);
        if (&__p != (long long *)(v295 + 5)) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, (char *)v295[5], (uint64_t)v295[6], ((char *)v295[6] - (char *)v295[5]) >> 2);
        }
        v296 = (_DWORD *)*((void *)&__p + 1);
        v444 = (_DWORD *)*((void *)&__p + 1);
        v273 = (_DWORD *)__p;
        if ((void)__p != *((void *)&__p + 1))
        {
          while (2)
          {
            LODWORD(v468) = *v273;
            int v297 = (int)v468;
            v298 = (uint64_t *)((char *)a2[4] + 16 * (int)v468);
            uint64_t v299 = *v298;
            v300 = (std::__shared_weak_count *)v298[1];
            if (v300) {
              atomic_fetch_add_explicit(&v300->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v301 = *(const void **)(v299 + 64);
            if (!v301
            {
              goto LABEL_527;
            }
            v302 = *(std::__shared_weak_count **)(v299 + 72);
            if (v302) {
              atomic_fetch_add_explicit(&v302->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v264)
            {
              unint64_t v303 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v294, v297, &v468)[5];
              *(void *)buf = v303;
              v304 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), v303, buf);
              std::string::operator=((std::string *)v472, (const std::string *)v304[3]);
              if (v302) {
                goto LABEL_525;
              }
            }
            else
            {
              LODWORD(v463) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v294, v297, &v468)[5];
              v305 = v294;
              unint64_t v306 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v294, (int)v463, &v463)[5];
              *(void *)buf = v306;
              v307 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 7), v306, buf);
              std::string::operator=((std::string *)v307[3], (const std::string *)v472);
              v308 = v466;
              unint64_t v309 = v467;
              if ((unint64_t)v466 >= v467)
              {
                v311 = (std::__shared_weak_count *)v465;
                int64_t v312 = ((char *)v466 - (unsigned char *)v465) >> 2;
                unint64_t v313 = v312 + 1;
                if ((unint64_t)(v312 + 1) >> 62) {
                  goto LABEL_705;
                }
                if ((uint64_t)(v467 - (void)v465) >> 1 > v313) {
                  unint64_t v313 = (uint64_t)(v467 - (void)v465) >> 1;
                }
                if (v467 - (unint64_t)v465 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v314 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v314 = v313;
                }
                if (v314) {
                  unint64_t v314 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v314);
                }
                else {
                  uint64_t v315 = 0;
                }
                v316 = (int *)(v314 + 4 * v312);
                int *v316 = v297;
                v310 = (std::__shared_weak_count *)(v316 + 1);
                while (v308 != v311)
                {
                  int v317 = HIDWORD(v308[-1].__shared_weak_owners_);
                  v308 = (std::__shared_weak_count *)((char *)v308 - 4);
                  *--v316 = v317;
                }
                unint64_t v309 = v314 + 4 * v315;
                v465 = v316;
                unint64_t v467 = v309;
                if (v311) {
                  operator delete(v311);
                }
              }
              else
              {
                LODWORD(v466->__vftable) = v297;
                v310 = (std::__shared_weak_count *)((char *)&v308->__vftable + 4);
              }
              v466 = v310;
              if ((unint64_t)v310 >= v309)
              {
                v319 = (std::__shared_weak_count *)v465;
                uint64_t v320 = ((char *)v310 - (unsigned char *)v465) >> 2;
                unint64_t v321 = v320 + 1;
                if ((unint64_t)(v320 + 1) >> 62) {
LABEL_705:
                }
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v309 - (void)v465) >> 1 > v321) {
                  unint64_t v321 = (uint64_t)(v309 - (void)v465) >> 1;
                }
                if (v309 - (unint64_t)v465 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v322 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v322 = v321;
                }
                if (v322) {
                  unint64_t v322 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v322);
                }
                else {
                  uint64_t v323 = 0;
                }
                v294 = v305;
                v296 = v444;
                v324 = (_DWORD *)(v322 + 4 * v320);
                _DWORD *v324 = v463;
                v318 = (std::__shared_weak_count *)(v324 + 1);
                while (v310 != v319)
                {
                  int v325 = HIDWORD(v310[-1].__shared_weak_owners_);
                  v310 = (std::__shared_weak_count *)((char *)v310 - 4);
                  *--v324 = v325;
                }
                v465 = v324;
                unint64_t v467 = v322 + 4 * v323;
                if (v319) {
                  operator delete(v319);
                }
              }
              else
              {
                LODWORD(v310->__vftable) = v463;
                v318 = (std::__shared_weak_count *)((char *)&v310->__vftable + 4);
                v294 = v305;
                v296 = v444;
              }
              v466 = v318;
              if (v302) {
LABEL_525:
              }
                nitro::nitro_function::nitro_function(v302);
            }
            int v264 = 0;
LABEL_527:
            if (v300) {
              nitro::nitro_function::nitro_function(v300);
            }
            if (++v273 == v296) {
              goto LABEL_575;
            }
            continue;
          }
        }
LABEL_565:
        if (v273)
        {
LABEL_566:
          *((void *)&__p + 1) = v273;
          operator delete(v273);
        }
LABEL_567:
        v267 = v419;
        if (v424) {
          nitro::nitro_function::nitro_function(v424);
        }
        uint64_t v262 = v428;
LABEL_570:
        if (v267) {
          nitro::nitro_function::nitro_function(v267);
        }
        if (!--v262)
        {
          v326 = (int *)v465;
          v327 = (int *)v466;
          goto LABEL_578;
        }
      }
    }
    v327 = 0;
    v326 = 0;
LABEL_578:
    unint64_t v328 = 126 - 2 * __clz(v327 - v326);
    if (v327 == v326) {
      uint64_t v329 = 0;
    }
    else {
      uint64_t v329 = v328;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v326, v327, v329, 1);
    v330 = (std::__shared_weak_count *)a2[3];
    v468 = (uint64_t *)a2[2];
    v469 = v330;
    if (v330) {
      atomic_fetch_add_explicit(&v330->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v463 = 0;
    v464 = 0;
    v331 = (Espresso *)Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v468, 0, (uint64_t *)&v463);
    if (v330) {
      nitro::nitro_function::nitro_function(v330);
    }
    if (v327 != v326)
    {
      v333 = v326;
      do
      {
        int v334 = *v333;
        v335 = Espresso::espresso_os_log_subsystem(v331, v332);
        if (os_log_type_enabled(v335, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v334;
          _os_log_impl(&dword_1920CB000, v335, OS_LOG_TYPE_INFO, "[Extra transpose operations] Removing layer: %d\n", buf, 8u);
        }

        Espresso::net::remove_layer((Espresso::net *)a2, v334);
        ++v333;
      }
      while (v333 != v327);
    }
    *(_OWORD *)buf = 0u;
    long long v476 = 0u;
    *(_DWORD *)v477 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (long long **)a2, 0, (uint64_t)buf);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    recompile_fs2((Espresso::net *)a2);
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v497);
    if (v496) {
      nitro::nitro_function::nitro_function(v496);
    }
    if (v495) {
      nitro::nitro_function::nitro_function(v495);
    }
    if (v494) {
      nitro::nitro_function::nitro_function(v494);
    }
    if (v493 < 0) {
      operator delete(v492);
    }
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v488, v489);
    if (*((void *)&__p + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__p + 1));
    }
    if (v326) {
      operator delete(v326);
    }
    if (SBYTE7(v473) < 0) {
      operator delete(*(void **)v472);
    }
    if (*((void *)&v470 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v470 + 1));
    }
    std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&v465, (Espresso::net *)a2);
    memset(v472, 0, sizeof(v472));
    *(void *)&long long v473 = 0;
    uint64_t v336 = ((unsigned char *)a2[5] - (unsigned char *)a2[4]) >> 4;
    uint64_t v337 = v336 - 1;
    if (v336 != 1)
    {
      v338 = 0;
      unint64_t v420 = 0;
      v339 = 0;
      v340 = (char *)(a2 + 12);
      while (1)
      {
        v341 = (uint64_t *)((char *)a2[4] + 16 * v337);
        uint64_t v343 = *v341;
        v342 = (std::__shared_weak_count *)v341[1];
        if (v342) {
          atomic_fetch_add_explicit(&v342->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v344 = *(const void **)(v343 + 64);
        if (!v344) {
          goto LABEL_637;
        }
        if (!v345) {
          goto LABEL_637;
        }
        v346 = v345;
        v347 = *(std::__shared_weak_count **)(v343 + 72);
        if (v347) {
          atomic_fetch_add_explicit(&v347->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v433 = v347;
        v348 = (uint64_t **)v465;
        LODWORD(__p) = v337;
        uint64_t v349 = (uint64_t)v340;
        LODWORD(v470) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v465 + 2, v337, &__p)[5];
        int v350 = v470;
        v438 = v338;
        int v445 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v348 + 5, v470, &v470)[5]+ 1);
        v351 = a2[4];
        uint64_t v352 = v351[2 * v350];
        v353 = *(const void **)(v352 + 64);
        if (!v353) {
          break;
        }
        if (!v354) {
          goto LABEL_619;
        }
        uint64_t v355 = *(void *)(v352 + 72);
        if (!v355) {
          goto LABEL_619;
        }
        v429 = *(std::__shared_weak_count **)(v352 + 72);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v355 + 8), 1uLL, memory_order_relaxed);
        v351 = a2[4];
LABEL_620:
        v340 = (char *)v349;
        uint64_t v356 = v351[2 * v445];
        v357 = *(const void **)(v356 + 64);
        if (v357
        {
          v358 = *(std::__shared_weak_count **)(v356 + 72);
          if (v358) {
            atomic_fetch_add_explicit(&v358->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          v358 = 0;
        }
        if (!*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v346 + 320))(v346))
        {
          v359 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v354 + 320))(v354);
          if (*(_DWORD *)v359 == 102)
          {
            v361 = Espresso::espresso_os_log_subsystem(v359, v360);
            if (os_log_type_enabled(v361, OS_LOG_TYPE_INFO))
            {
              LODWORD(__p) = 134217984;
              *(void *)((char *)&__p + 4) = v337;
              _os_log_impl(&dword_1920CB000, v361, OS_LOG_TYPE_INFO, "[Layernormalization extra elementwise] Found the pattern on layer: %lu\n", (uint8_t *)&__p, 0xCu);
            }

            *(void *)&long long __p = v350;
            v362 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v349, v350, &__p)[3];
            *(void *)buf = (int)v337;
            v363 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v349, (int)v337, buf);
            std::string::operator=((std::string *)v363[3], v362);
            *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v346 + 320))(v346) = 1;
            unint64_t v364 = v420;
            if ((unint64_t)v339 >= v420)
            {
              v366 = v438;
              uint64_t v367 = v339 - v438;
              unint64_t v368 = v367 + 1;
              if ((unint64_t)(v367 + 1) >> 62) {
                goto LABEL_707;
              }
              if ((uint64_t)(v420 - (void)v438) >> 1 > v368) {
                unint64_t v368 = (uint64_t)(v420 - (void)v438) >> 1;
              }
              if (v420 - (unint64_t)v438 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v369 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v369 = v368;
              }
              if (v369)
              {
                unint64_t v369 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v369);
                v366 = v438;
              }
              else
              {
                uint64_t v370 = 0;
              }
              v338 = (int *)(v369 + 4 * v367);
              int *v338 = v350;
              v365 = v338 + 1;
              while (v339 != v366)
              {
                int v371 = *--v339;
                *--v338 = v371;
              }
              unint64_t v364 = v369 + 4 * v370;
              *(void *)v472 = v338;
              *(void *)&v472[8] = v365;
              *(void *)&long long v473 = v364;
              if (v366)
              {
                operator delete(v366);
                unint64_t v364 = v473;
              }
            }
            else
            {
              int *v339 = v350;
              v365 = v339 + 1;
              v338 = v438;
            }
            *(void *)&v472[8] = v365;
            unint64_t v420 = v364;
            if ((unint64_t)v365 >= v364)
            {
              uint64_t v372 = v365 - v338;
              unint64_t v373 = v372 + 1;
              if ((unint64_t)(v372 + 1) >> 62) {
LABEL_707:
              }
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v420 - (void)v338) >> 1 > v373) {
                unint64_t v373 = (uint64_t)(v420 - (void)v338) >> 1;
              }
              if (v420 - (unint64_t)v338 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v374 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v374 = v373;
              }
              if (v374) {
                unint64_t v374 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v374);
              }
              else {
                uint64_t v375 = 0;
              }
              v376 = (int *)(v374 + 4 * v372);
              int *v376 = v445;
              v339 = v376 + 1;
              while (v365 != v338)
              {
                int v377 = *--v365;
                *--v376 = v377;
              }
              *(void *)v472 = v376;
              *(void *)&v472[8] = v339;
              unint64_t v420 = v374 + 4 * v375;
              *(void *)&long long v473 = v420;
              if (v338) {
                operator delete(v338);
              }
              v338 = v376;
            }
            else
            {
              _DWORD *v365 = v445;
              v339 = v365 + 1;
            }
            *(void *)&v472[8] = v339;
            if (!v358) {
              goto LABEL_633;
            }
LABEL_632:
            nitro::nitro_function::nitro_function(v358);
            goto LABEL_633;
          }
        }
        v338 = v438;
        if (v358) {
          goto LABEL_632;
        }
LABEL_633:
        if (v429) {
          nitro::nitro_function::nitro_function(v429);
        }
        if (v433) {
          nitro::nitro_function::nitro_function(v433);
        }
LABEL_637:
        if (v342) {
          nitro::nitro_function::nitro_function(v342);
        }
        if (!--v337)
        {
          v378 = *(int **)v472;
          goto LABEL_675;
        }
      }
      v354 = 0;
LABEL_619:
      v429 = 0;
      goto LABEL_620;
    }
    v339 = 0;
    v378 = 0;
LABEL_675:
    unint64_t v379 = 126 - 2 * __clz(v339 - v378);
    if (v339 == v378) {
      uint64_t v380 = 0;
    }
    else {
      uint64_t v380 = v379;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v378, v339, v380, 1);
    v381 = (std::__shared_weak_count *)a2[3];
    *(void *)&long long v470 = a2[2];
    *((void *)&v470 + 1) = v381;
    if (v381) {
      atomic_fetch_add_explicit(&v381->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v468 = 0;
    v469 = 0;
    v382 = (Espresso *)Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v470, 0, (uint64_t *)&v468);
    if (v381) {
      nitro::nitro_function::nitro_function(v381);
    }
    v384 = *(void **)v472;
    v385 = *(int **)&v472[8];
    if (*(void *)v472 != *(void *)&v472[8])
    {
      v386 = *(int **)v472;
      do
      {
        int v387 = *v386;
        v388 = Espresso::espresso_os_log_subsystem(v382, v383);
        if (os_log_type_enabled(v388, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v387;
          _os_log_impl(&dword_1920CB000, v388, OS_LOG_TYPE_INFO, "[Layernormalization extra elementwise] Removing layer: %d\n", buf, 8u);
        }

        Espresso::net::remove_layer((Espresso::net *)a2, v387);
        ++v386;
      }
      while (v386 != v385);
    }
    *(_OWORD *)buf = 0u;
    long long v476 = 0u;
    *(_DWORD *)v477 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (long long **)a2, 0, (uint64_t)buf);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    recompile_fs2((Espresso::net *)a2);
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v497);
    if (v496) {
      nitro::nitro_function::nitro_function(v496);
    }
    if (v495) {
      nitro::nitro_function::nitro_function(v495);
    }
    if (v494) {
      nitro::nitro_function::nitro_function(v494);
    }
    if (v493 < 0) {
      operator delete(v492);
    }
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v488, v489);
    if (*((void *)&__p + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__p + 1));
    }
    if (v384) {
      operator delete(v384);
    }
    if (v466) {
      nitro::nitro_function::nitro_function(v466);
    }
    Espresso::pass_fastspeech::replace_sequence_with_instance_norm((long long **)a2, v389);
  }
  *(unsigned char *)this = 1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (v448 < 0) {
    operator delete(v447);
  }
}

void sub_192AA29E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,std::__shared_weak_count *a41,std::__shared_weak_count *a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v73)
  {
    nitro::nitro_function::nitro_function(v73);
    if (!v72)
    {
LABEL_4:
      if (a40) {
        nitro::nitro_function::nitro_function(a40);
      }
      if (a41) {
        nitro::nitro_function::nitro_function(a41);
      }
      if (a42) {
        nitro::nitro_function::nitro_function(a42);
      }
      if (a43) {
        nitro::nitro_function::nitro_function(a43);
      }
      if (v71) {
        nitro::nitro_function::nitro_function(v71);
      }
      Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x330]);
      if (__p) {
        operator delete(__p);
      }
      if (STACK[0x208]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x208]);
      }
      if (a54 < 0) {
        operator delete(a49);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_4;
  }
  nitro::nitro_function::nitro_function(v72);
  goto LABEL_4;
}

void Espresso::pass_fastspeech::replace_sequence_with_instance_norm(long long **this, Espresso::net *a2)
{
  v201[8] = *MEMORY[0x1E4F143B8];
  int v136 = this;
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&v168, (Espresso::net *)this);
  int64_t v3 = v136[5] - v136[4] - 1;
  int64_t v167 = v3;
  if (v3)
  {
    std::string v135 = v136 + 12;
    int v107 = v136 + 7;
    int v108 = v136 + 17;
    __int32 v105 = (long long *)&v184;
    uint64_t v106 = &v145;
    uint64_t v103 = (long long *)&v182;
    int v104 = &v142;
    uint64_t v102 = &v198;
    uint64_t v100 = v191;
    uint64_t v101 = &v200;
    uint64_t v98 = &v185[16];
    int v99 = v201;
    *(void *)&long long v2 = 134217984;
    long long v97 = v2;
    *(void *)&long long v2 = 134220544;
    long long v96 = v2;
    while (1)
    {
      uint64_t v4 = &v136[4][v3];
      uint64_t v6 = *(void *)v4;
      id v5 = (std::__shared_weak_count *)*((void *)v4 + 1);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = *(const void **)(v6 + 64);
      if (!v7) {
        goto LABEL_191;
      }
      if (!v8) {
        goto LABEL_191;
      }
      int v9 = v8;
      uint64_t v10 = *(std::__shared_weak_count **)(v6 + 72);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v8 + 320))(v8) == 1
        && *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v9 + 320))(v9) + 8) == 1)
      {
        break;
      }
LABEL_189:
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
LABEL_191:
      if (v5) {
        nitro::nitro_function::nitro_function(v5);
      }
      int64_t v3 = v167 - 1;
      int64_t v167 = v3;
      if (!v3) {
        goto LABEL_196;
      }
    }
    uint64_t v11 = v168;
    *(_DWORD *)int v185 = v167;
    uint64_t v125 = v10;
    uint64_t v12 = *(unsigned int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v168 + 2, v167, v185)[5];
    int v166 = v12;
    unsigned int v165 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 2, v12, &v166)[5];
    uint64_t v134 = v165;
    unsigned int v164 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 2, v165, &v165)[5];
    uint64_t v133 = v164;
    unsigned int v163 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 2, v164, &v164)[5];
    uint64_t v132 = v163;
    unsigned int v162 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 2, v163, &v163)[5];
    uint64_t v131 = v162;
    unsigned int v161 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 2, v162, &v162)[5];
    uint64_t v130 = v161;
    uint64_t v13 = *(unsigned int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 2, v161, &v161)[5];
    int v160 = v13;
    int v159 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 2, v13, &v160)[5];
    int v14 = v159;
    int v15 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 5, v13, &v160);
    uint64_t v128 = v13;
    uint64_t v16 = *((unsigned int *)v15[5] + 1);
    uint64_t v129 = *((unsigned int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11 + 5, v14, &v159)[5]+ 1);
    int v18 = v136[4];
    uint64_t v19 = *(void *)&v18[(int)v12];
    __int32 v20 = *(const void **)(v19 + 64);
    if (v20
    {
      int v22 = *(std::__shared_weak_count **)(v19 + 72);
      uint64_t v115 = v21;
      if (v22)
      {
        uint64_t v124 = v22;
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        int v18 = v136[4];
LABEL_17:
        uint64_t v23 = *(void *)&v18[(int)v134];
        uint64_t v24 = *(const void **)(v23 + 64);
        if (v24
        {
          __int32 v26 = *(std::__shared_weak_count **)(v23 + 72);
          unsigned int v114 = v25;
          if (v26)
          {
            uint64_t v123 = v26;
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            int v18 = v136[4];
LABEL_23:
            uint64_t v27 = *(void *)&v18[(int)v133];
            uint64_t v28 = *(const void **)(v27 + 64);
            if (v28
            {
              char v30 = *(std::__shared_weak_count **)(v27 + 72);
              long long v31 = v136;
              uint64_t v113 = (uint64_t)v29;
              if (v30)
              {
                uint64_t v122 = v30;
                atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                int v18 = v31[4];
              }
              else
              {
                uint64_t v122 = 0;
              }
            }
            else
            {
              uint64_t v113 = 0;
              uint64_t v122 = 0;
              long long v31 = v136;
            }
            uint64_t v32 = *(void *)&v18[(int)v132];
            uint64_t v33 = *(const void **)(v32 + 64);
            if (v33
            {
              uint64_t v34 = *(void *)(v32 + 72);
              if (v34)
              {
                uint64_t v121 = *(std::__shared_weak_count **)(v32 + 72);
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
                int v18 = v31[4];
LABEL_34:
                uint64_t v35 = *(void *)&v18[(int)v131];
                uint64_t v36 = *(const void **)(v35 + 64);
                if (v36
                {
                  uint64_t v38 = *(std::__shared_weak_count **)(v35 + 72);
                  int v112 = v37;
                  if (v38)
                  {
                    uint64_t v120 = v38;
                    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
                    int v18 = v31[4];
LABEL_40:
                    uint64_t v39 = *(void *)&v18[(int)v130];
                    uint64_t v40 = *(const void **)(v39 + 64);
                    if (v40
                    {
                      uint64_t v42 = *(std::__shared_weak_count **)(v39 + 72);
                      unint64_t v111 = v41;
                      if (v42)
                      {
                        uint64_t v119 = v42;
                        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
                        int v18 = v31[4];
                        goto LABEL_46;
                      }
                    }
                    else
                    {
                      unint64_t v111 = 0;
                    }
                    uint64_t v119 = 0;
LABEL_46:
                    uint64_t v43 = *(void *)&v18[(int)v128];
                    uint64_t v44 = *(const void **)(v43 + 64);
                    if (v44)
                    {
                      if (v45)
                      {
                        uint64_t v46 = *(void *)(v43 + 72);
                        if (v46)
                        {
                          uint64_t v118 = *(std::__shared_weak_count **)(v43 + 72);
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
                          int v18 = v31[4];
                          goto LABEL_52;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v45 = 0;
                    }
                    uint64_t v118 = 0;
LABEL_52:
                    unint64_t v127 = v14;
                    uint64_t v47 = *(void *)&v18[v14];
                    uint64_t v48 = *(const void **)(v47 + 64);
                    uint64_t v109 = v12;
                    if (v48)
                    {
                      if (v49)
                      {
                        uint64_t v50 = *(void *)(v47 + 72);
                        if (v50)
                        {
                          uint64_t v117 = *(std::__shared_weak_count **)(v47 + 72);
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
                          int v18 = v31[4];
                          goto LABEL_58;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v49 = 0;
                    }
                    uint64_t v117 = 0;
LABEL_58:
                    uint64_t v110 = v16;
                    unint64_t v51 = (int)v16;
                    uint64_t v52 = *(void *)&v18[(int)v16];
                    BOOL v53 = *(const void **)(v52 + 64);
                    if (v53)
                    {
                      if (v54)
                      {
                        uint64_t v55 = *(void *)(v52 + 72);
                        if (v55)
                        {
                          long long v116 = *(std::__shared_weak_count **)(v52 + 72);
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
                          int v18 = v31[4];
                          goto LABEL_64;
                        }
                      }
                    }
                    else
                    {
                      int32x2_t v54 = 0;
                    }
                    long long v116 = 0;
LABEL_64:
                    unint64_t v56 = (int)v129;
                    uint64_t v57 = *(void *)&v18[(int)v129];
                    int8x8_t v58 = *(std::__shared_weak_count **)(v57 + 64);
                    if (v58)
                    {
                      char v59 = v58;
                      if (v58)
                      {
                        int8x8_t v58 = *(std::__shared_weak_count **)(v57 + 72);
                        if (v58) {
                          atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                      }
                    }
                    else
                    {
                      char v59 = 0;
                    }
                    uint64_t v60 = v126;
                    if (!v115 || !v114 || !v113 || !v126 || !v112 || !v111 || !v45 || !v49 || !v54 || !v59) {
                      goto LABEL_169;
                    }
                    uint64_t v126 = v58;
                    uint64_t v61 = Espresso::espresso_os_log_subsystem((Espresso *)v58, v17);
                    if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)int v185 = v97;
                      *(void *)&v185[4] = v167;
                      _os_log_impl(&dword_1920CB000, v61, OS_LOG_TYPE_INFO, "[Replace seq with instancenorm] Found the pattern on layer: %lu\n", v185, 0xCu);
                    }

                    uint64_t v158 = 0;
                    int v157 = 0;
                    uint64_t v156 = 0x358637BD00000001;
                    HIDWORD(v156) = *(_DWORD *)(((uint64_t (*)(std::__shared_weak_count *))v60->__vftable[8].~__shared_weak_count)(v60)
                                              + 8);
                    uint64_t v176 = (std::string *)v51;
                    *(void *)&long long v137 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v135, v51, &v176)[3];
                    int v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v108, (unsigned __int8 *)v137, (long long **)&v137);
                    Espresso::abstract_blob_container::shape(v185, *((void *)v62 + 5));
                    int v63 = *(_DWORD *)v185;
                    int v64 = v109;
                    if (*(void *)&v189[2])
                    {
                      uint64_t v190 = *(void *)&v189[2];
                      operator delete(*(void **)&v189[2]);
                    }
                    uint64_t v176 = (std::string *)v56;
                    *(void *)&long long v137 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v135, v56, &v176)[3];
                    id v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v108, (unsigned __int8 *)v137, (long long **)&v137);
                    Espresso::abstract_blob_container::shape(v185, *((void *)v65 + 5));
                    int v67 = *(_DWORD *)v185;
                    int v68 = v14;
                    if (*(void *)&v189[2])
                    {
                      uint64_t v190 = *(void *)&v189[2];
                      operator delete(*(void **)&v189[2]);
                    }
                    unsigned int v114 = &v96;
                    MEMORY[0x1F4188790](v66);
                    int v70 = (char *)&v96 - ((v69 + 15) & 0x7FFFFFFF0);
                    MEMORY[0x1F4188790](v71);
                    int v73 = (char *)&v96 - ((v72 + 15) & 0x7FFFFFFF0);
                    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v185, &v59[14].__shared_owners_);
                    size_t v74 = 4 * v67;
                    memcpy(v73, *(const void **)(*(void *)v185 + 24), v74);
                    if (*(void *)&v185[8]) {
                      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v185[8]);
                    }
                    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v185, v54 + 43);
                    memcpy(v70, *(const void **)(*(void *)v185 + 24), 4 * v63);
                    if (*(void *)&v185[8]) {
                      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v185[8]);
                    }
                    *(void *)int v185 = &v167;
                    uint64_t v75 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v107, (unint64_t *)&v167, (uint64_t)&std::piecewise_construct, (uint64_t **)v185)[3];
                    if (*((char *)v75 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)v75, *((void *)v75 + 1));
                    }
                    else
                    {
                      long long v76 = *v75;
                      v155.__r_.__value_.__r.__words[2] = *((void *)v75 + 2);
                      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v76;
                    }
                    *(void *)int v185 = v127;
                    uint64_t v77 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v135, v127, v185)[3];
                    if (*((char *)v77 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v154, *(const std::string::value_type **)v77, *((void *)v77 + 1));
                    }
                    else
                    {
                      long long v78 = *v77;
                      v154.__r_.__value_.__r.__words[2] = *((void *)v77 + 2);
                      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v78;
                    }
                    uint64_t v115 = (void *)v74;
                    uint64_t v113 = 4 * v63;
                    *(void *)&long long v137 = v127;
                    uint64_t v79 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v135, v127, &v137)[3];
                    if (*((char *)v79 + 23) >= 0) {
                      size_t v80 = *((unsigned __int8 *)v79 + 23);
                    }
                    else {
                      size_t v80 = (size_t)v79[1];
                    }
                    std::string::basic_string[abi:ne180100]((uint64_t)v185, v80 + 4);
                    if (v185[23] >= 0) {
                      int v81 = v185;
                    }
                    else {
                      int v81 = *(unsigned char **)v185;
                    }
                    if (v80)
                    {
                      if (*((char *)v79 + 23) >= 0) {
                        uint64_t v82 = v79;
                      }
                      else {
                        uint64_t v82 = *v79;
                      }
                      memmove(v81, v82, v80);
                    }
                    strcpy(&v81[v80], "_old");
                    uint64_t v176 = (std::string *)v127;
                    uint64_t v83 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v135, v127, &v176)[3];
                    int v84 = v128;
                    if (*(char *)(v83 + 23) < 0) {
                      operator delete(*(void **)v83);
                    }
                    long long v85 = *(_OWORD *)v185;
                    *(void *)(v83 + 16) = *(void *)&v185[16];
                    *(_OWORD *)uint64_t v83 = v85;
                    long long v86 = (Espresso::net *)v136;
                    Espresso::net::remove_layer((Espresso::net *)v136, v68);
                    Espresso::net::remove_layer(v86, v84);
                    Espresso::net::remove_layer(v86, v129);
                    Espresso::net::remove_layer(v86, v110);
                    Espresso::net::remove_layer(v86, v130);
                    Espresso::net::remove_layer(v86, v131);
                    Espresso::net::remove_layer(v86, v132);
                    Espresso::net::remove_layer(v86, v133);
                    Espresso::net::remove_layer(v86, v134);
                    Espresso::net::remove_layer(v86, v64);
                    Espresso::net::remove_layer(v86, v167);
                    long long v89 = Espresso::espresso_os_log_subsystem(v87, v88);
                    if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)int v185 = v96;
                      *(void *)&v185[4] = v167;
                      *(_WORD *)&v185[12] = 1024;
                      *(_DWORD *)&v185[14] = v64;
                      *(_WORD *)&v185[18] = 1024;
                      *(_DWORD *)&v185[20] = v134;
                      LOWORD(v186) = 1024;
                      *(_DWORD *)((char *)&v186 + 2) = v133;
                      HIWORD(v186) = 1024;
                      int v187 = v132;
                      __int16 v188 = 1024;
                      *(_DWORD *)uint64_t v189 = v131;
                      *(_WORD *)&v189[4] = 1024;
                      *(_DWORD *)&v189[6] = v130;
                      LOWORD(v190) = 1024;
                      *(_DWORD *)((char *)&v190 + 2) = v110;
                      HIWORD(v190) = 1024;
                      *(_DWORD *)uint64_t v191 = v129;
                      *(_WORD *)&v191[4] = 1024;
                      *(_DWORD *)&v191[6] = v84;
                      __int16 v192 = 1024;
                      int v193 = v68;
                      _os_log_impl(&dword_1920CB000, v89, OS_LOG_TYPE_INFO, "[Replace seq with instancenorm] Removing layers:                         %lu %d %d %d %d %d %d %d %d %d %d\n", v185, 0x48u);
                    }

                    long long v90 = (std::__shared_weak_count *)v136[3];
                    v153[0] = (uint64_t)v136[2];
                    v153[1] = (uint64_t)v90;
                    if (v90) {
                      atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    v152[1] = 0;
                    v152[0] = 0;
                    Espresso::sequential_builder::sequential_builder((uint64_t)v185, v153, 0, v152);
                    if (v90) {
                      nitro::nitro_function::nitro_function(v90);
                    }
                    std::string::basic_string[abi:ne180100]<0>(v148, "instancenorm_1d");
                    std::string::basic_string[abi:ne180100]<0>(v146, "instancenorm_test");
                    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v183, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v183 = v155;
                    }
                    unint64_t v143 = 0;
                    std::string::size_type v144 = 0;
                    int v145 = 0;
                    *(void *)&long long v137 = &v143;
                    BYTE8(v137) = 0;
                    unint64_t v143 = (std::string *)operator new(0x18uLL);
                    std::string::size_type v144 = v143;
                    int v145 = v143 + 1;
                    std::string::size_type v144 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v106, (long long *)&v183, v105, v143);
                    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v181, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v181 = v154;
                    }
                    int v140 = 0;
                    uint64_t v141 = 0;
                    long long v142 = 0;
                    *(void *)&long long v137 = &v140;
                    BYTE8(v137) = 0;
                    int v140 = (std::string *)operator new(0x18uLL);
                    uint64_t v141 = v140;
                    long long v142 = v140 + 1;
                    uint64_t v141 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v104, (long long *)&v181, v103, v140);
                    uint64_t v175 = 0;
                    uint64_t v173 = 0;
                    uint64_t v174 = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v173, (uint64_t)v143, (uint64_t)v144, 0xAAAAAAAAAAAAAAABLL * (((char *)v144 - (char *)v143) >> 3));
                    uint64_t v171 = 0;
                    uint64_t v170 = 0;
                    uint64_t v172 = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v170, (uint64_t)v140, (uint64_t)v141, 0xAAAAAAAAAAAAAAABLL * (((char *)v141 - (char *)v140) >> 3));
                    uint64_t v91 = v196;
                    LODWORD(v137) = (***(uint64_t (****)(void))(v198 + 8))(*(void *)(v198 + 8));
                    Espresso::abstract_engine_factory::make_kernel_priv(v91, (uint64_t)v102, (uint64_t)v148, (uint64_t)&v156, (int *)&v137);
                    uint64_t v92 = v151;
                    v179[0] = v150;
                    v179[1] = v151;
                    if (v151) {
                      atomic_fetch_add_explicit(&v151->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    long long v137 = 0uLL;
                    *(void *)&long long v138 = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v137, (uint64_t)v173, v174, 0xAAAAAAAAAAAAAAABLL * ((v174 - (uint64_t)v173) >> 3));
                    id v177 = 0;
                    uint64_t v176 = 0;
                    uint64_t v178 = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v176, v170, v171, 0xAAAAAAAAAAAAAAABLL * ((v171 - v170) >> 3));
                    Espresso::sequential_builder::add_kernel_dbg((uint64_t)v185, v179, (uint64_t)v148, (uint64_t)v146, (uint64_t)v100, (std::string **)&v137, &v176);
                    int v180 = &v176;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v180);
                    int v180 = (std::string **)&v137;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v180);
                    if (v92) {
                      nitro::nitro_function::nitro_function(v92);
                    }
                    if (*(void *)v185) {
                      Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)v185, (uint64_t)v150, &v173, &v170);
                    }
                    *(void *)&long long v137 = &v170;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
                    *(void *)&long long v137 = &v173;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
                    if (v150)
                    {
                      if (v93)
                      {
                        uint64_t v94 = v151;
                        if (!v151)
                        {
LABEL_134:
                          *(void *)&long long v137 = &v140;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
                          if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v181.__r_.__value_.__l.__data_);
                          }
                          *(void *)&long long v137 = &v143;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
                          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v183.__r_.__value_.__l.__data_);
                          }
                          if (v147 < 0) {
                            operator delete(v146[0]);
                          }
                          if (v149 < 0) {
                            operator delete(v148[0]);
                          }
                          id v177 = 0;
                          uint64_t v176 = 0;
                          std::string::basic_string[abi:ne180100]<0>(&v137, "wBeta");
                          (*(void (**)(void *, std::string **, long long *, char *, void *, void))(*(void *)v93 + 168))(v93, &v176, &v137, v73, v115, 0);
                          if (SBYTE7(v138) < 0) {
                            operator delete((void *)v137);
                          }
                          if (v177) {
                            nitro::nitro_function::nitro_function(v177);
                          }
                          id v177 = 0;
                          uint64_t v176 = 0;
                          std::string::basic_string[abi:ne180100]<0>(&v137, "wGamma");
                          (*(void (**)(void *, std::string **, long long *, char *, uint64_t, void))(*(void *)v93 + 168))(v93, &v176, &v137, v70, v113, 0);
                          if (SBYTE7(v138) < 0) {
                            operator delete((void *)v137);
                          }
                          if (v177) {
                            nitro::nitro_function::nitro_function(v177);
                          }
                          long long v137 = 0u;
                          long long v138 = 0u;
                          int v139 = 1065353216;
                          Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)v185, v136, v167, (uint64_t)&v137);
                          std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node((void *)v138);
                          int v95 = (void *)v137;
                          *(void *)&long long v137 = 0;
                          if (v95) {
                            operator delete(v95);
                          }
                          recompile_fs2((Espresso::net *)v136);
                          if (v94) {
                            nitro::nitro_function::nitro_function(v94);
                          }
                          std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v99);
                          if (v199) {
                            nitro::nitro_function::nitro_function(v199);
                          }
                          if (v197) {
                            nitro::nitro_function::nitro_function(v197);
                          }
                          if (v195) {
                            nitro::nitro_function::nitro_function(v195);
                          }
                          if (v194 < 0) {
                            operator delete(*(void **)v191);
                          }
                          std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v98, v186);
                          if (*(void *)&v185[8]) {
                            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v185[8]);
                          }
                          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v154.__r_.__value_.__l.__data_);
                          }
                          if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v155.__r_.__value_.__l.__data_);
                          }
                          int8x8_t v58 = v126;
LABEL_169:
                          if (v58) {
                            nitro::nitro_function::nitro_function(v58);
                          }
                          uint64_t v10 = v125;
                          if (v116) {
                            nitro::nitro_function::nitro_function(v116);
                          }
                          if (v117) {
                            nitro::nitro_function::nitro_function(v117);
                          }
                          if (v118) {
                            nitro::nitro_function::nitro_function(v118);
                          }
                          if (v119) {
                            nitro::nitro_function::nitro_function(v119);
                          }
                          if (v120) {
                            nitro::nitro_function::nitro_function(v120);
                          }
                          if (v121) {
                            nitro::nitro_function::nitro_function(v121);
                          }
                          if (v122) {
                            nitro::nitro_function::nitro_function(v122);
                          }
                          if (v123) {
                            nitro::nitro_function::nitro_function(v123);
                          }
                          if (v124) {
                            nitro::nitro_function::nitro_function(v124);
                          }
                          goto LABEL_189;
                        }
                        atomic_fetch_add_explicit(&v151->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_132:
                        if (v151) {
                          nitro::nitro_function::nitro_function(v151);
                        }
                        goto LABEL_134;
                      }
                    }
                    else
                    {
                      uint64_t v93 = 0;
                    }
                    uint64_t v94 = 0;
                    goto LABEL_132;
                  }
                }
                else
                {
                  int v112 = 0;
                }
                uint64_t v120 = 0;
                goto LABEL_40;
              }
            }
            else
            {
              uint64_t v126 = 0;
            }
            uint64_t v121 = 0;
            goto LABEL_34;
          }
        }
        else
        {
          unsigned int v114 = 0;
        }
        uint64_t v123 = 0;
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v115 = 0;
    }
    uint64_t v124 = 0;
    goto LABEL_17;
  }
LABEL_196:
  if (v169) {
    nitro::nitro_function::nitro_function(v169);
  }
}

void sub_192AA4344(_Unwind_Exception *a1)
{
  *(void *)(v1 + 784) = v1 + 424;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 784));
  if (*(char *)(v1 + 839) < 0) {
    operator delete(*(void **)(v1 + 816));
  }
  if (*(char *)(v1 + 471) < 0) {
    operator delete(*(void **)(v1 + 448));
  }
  if (*(char *)(v1 + 495) < 0) {
    operator delete(*(void **)(v1 + 472));
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)(v1 + 848));
  if (*(char *)(v1 + 567) < 0) {
    operator delete(*(void **)(v1 + 544));
  }
  if (*(char *)(v1 + 599) < 0) {
    operator delete(*(void **)(v1 + 576));
  }
  if (*(void *)(v1 + 264)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 264));
  }
  if (*(void *)(v1 + 184)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 184));
  }
  if (*(void *)(v1 + 192)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 192));
  }
  if (*(void *)(v1 + 200)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 200));
  }
  if (*(void *)(v1 + 208)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 208));
  }
  if (*(void *)(v1 + 216)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 216));
  }
  if (*(void *)(v1 + 224)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 224));
  }
  if (*(void *)(v1 + 232)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 232));
  }
  if (*(void *)(v1 + 240)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 240));
  }
  if (*(void *)(v1 + 248)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 248));
  }
  if (*(void *)(v1 + 256)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v1 + 256));
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 680);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(a1);
}

void sub_192AA4668()
{
  *(void *)(v0 + 256) = v1;
  if (!v1) {
    JUMPOUT(0x192AA4648);
  }
  JUMPOUT(0x192AA4640);
}

Espresso::network_optimization_graph *std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>(Espresso::network_optimization_graph **a1, Espresso::net *a2)
{
  uint64_t v4 = operator new(0x58uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE3885E0;
  uint64_t result = Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Espresso::network_optimization_graph *)v4;
  return result;
}

void sub_192AA46DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void recompile_fs2(Espresso::net *a1)
{
  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)a1);
  v14[0] = 0;
  v14[1] = 0;
  Espresso::net::setup_script((uint64_t)a1, v14, 0);
  long long v2 = (long long *)*((void *)a1 + 80);
  int64_t v3 = (long long *)*((void *)a1 + 81);
  v13[0] = 0;
  v13[1] = 0;
  for (unint64_t i = v13; v2 != v3; v2 = (long long *)((char *)v2 + 24))
  {
    v10[0] = v2;
    uint64_t v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 23, v2, v10);
    v10[0] = v2;
    id v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&i, v2, v10);
    long long v6 = *(_OWORD *)(v4 + 56);
    long long v7 = *(_OWORD *)(v4 + 72);
    *((void *)v5 + 11) = *((void *)v4 + 11);
    *(_OWORD *)(v5 + 72) = v7;
    *(_OWORD *)(v5 + 56) = v6;
    if (v5 != v4) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5 + 96, *((char **)v4 + 12), *((void *)v4 + 13), (uint64_t)(*((void *)v4 + 13) - *((void *)v4 + 12)) >> 2);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)a1 + 184, *((char **)a1 + 24));
  *((void *)a1 + 23) = (char *)a1 + 192;
  *((void *)a1 + 25) = 0;
  *((void *)a1 + 24) = 0;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v8, *(void *)a1, *((std::__shared_weak_count **)a1 + 1));
  Espresso::compute_network_shape_starting_from_data_shapes(&v8, (uint64_t)&i, (uint64_t)v10);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  *((unsigned char *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)v10, 0, 0);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v11, v11[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v10, (char *)v10[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&i, v13[0]);
}

void sub_192AA4858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
}

int *std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                int v40 = *v11;
                if (*v10 > *v11)
                {
                  *uint64_t v11 = *v10;
                  *uint64_t v10 = v40;
                }
                break;
              case 3uLL:
                int v41 = v11[1];
                if (v41 <= *v10) {
                  int v42 = *v10;
                }
                else {
                  int v42 = v11[1];
                }
                if (v41 >= *v10) {
                  int v41 = *v10;
                }
                *uint64_t v10 = v41;
                v11[1] = v42;
                int v43 = *v10;
                if (*v10 <= *v11) {
                  int v44 = *v11;
                }
                else {
                  int v44 = *v10;
                }
                if (v43 >= *v11) {
                  int v43 = *v11;
                }
                *uint64_t v10 = v43;
                int v46 = *v11;
                int v45 = v11[1];
                if (v44 <= v45) {
                  int v46 = v11[1];
                }
                if (v44 < v45) {
                  int v45 = v44;
                }
                *uint64_t v11 = v46;
                v11[1] = v45;
                break;
              case 4uLL:
                int v48 = v11[1];
                int v47 = v11[2];
                if (*v11 <= v47) {
                  int v49 = v11[2];
                }
                else {
                  int v49 = *v11;
                }
                if (*v11 < v47) {
                  int v47 = *v11;
                }
                void v11[2] = v47;
                *uint64_t v11 = v49;
                int v50 = *v10;
                if (v48 <= *v10) {
                  int v51 = *v10;
                }
                else {
                  int v51 = v48;
                }
                if (v48 < v50) {
                  int v50 = v48;
                }
                *uint64_t v10 = v50;
                int v52 = *v11;
                if (*v11 <= v51) {
                  int v53 = v51;
                }
                else {
                  int v53 = *v11;
                }
                if (v52 >= v51) {
                  int v52 = v51;
                }
                *uint64_t v11 = v53;
                v11[1] = v52;
                int v54 = v11[2];
                if (v54 <= *v10) {
                  int v55 = *v10;
                }
                else {
                  int v55 = v11[2];
                }
                if (v54 >= *v10) {
                  int v54 = *v10;
                }
                *uint64_t v10 = v54;
                int v56 = v11[1];
                if (v56 <= v55) {
                  int v57 = v55;
                }
                else {
                  int v57 = v11[1];
                }
                if (v56 >= v55) {
                  int v56 = v55;
                }
                v11[1] = v57;
                void v11[2] = v56;
                break;
              case 5uLL:
                int v58 = *v11;
                int v59 = v11[1];
                if (*v11 <= v59) {
                  int v60 = v11[1];
                }
                else {
                  int v60 = *v11;
                }
                if (v58 >= v59) {
                  int v58 = v11[1];
                }
                *uint64_t v11 = v60;
                v11[1] = v58;
                int v61 = v11[3];
                if (v61 <= *v10) {
                  int v62 = *v10;
                }
                else {
                  int v62 = v11[3];
                }
                if (v61 >= *v10) {
                  int v61 = *v10;
                }
                *uint64_t v10 = v61;
                void v11[3] = v62;
                int v63 = *v10;
                int v64 = v11[2];
                if (*v10 <= v64) {
                  int v65 = v11[2];
                }
                else {
                  int v65 = *v10;
                }
                if (v63 >= v64) {
                  int v63 = v11[2];
                }
                *uint64_t v10 = v63;
                int v67 = v11[2];
                int v66 = v11[3];
                int v68 = v11[1];
                if (v65 <= v66) {
                  int v67 = v11[3];
                }
                if (v65 < v66) {
                  int v66 = v65;
                }
                void v11[2] = v67;
                void v11[3] = v66;
                int v69 = *v10;
                if (v68 <= *v10) {
                  int v70 = *v10;
                }
                else {
                  int v70 = v68;
                }
                if (v68 < v69) {
                  int v69 = v68;
                }
                *uint64_t v10 = v69;
                int v71 = *v11;
                int v73 = v11[2];
                int v72 = v11[3];
                if (v72 <= *v11) {
                  int v74 = *v11;
                }
                else {
                  int v74 = v11[3];
                }
                if (v72 >= v71) {
                  int v72 = *v11;
                }
                if (v74 <= v73) {
                  int v71 = v11[2];
                }
                if (v74 < v73) {
                  int v73 = v74;
                }
                if (v72 <= v70) {
                  int v75 = v70;
                }
                else {
                  int v75 = v72;
                }
                if (v72 >= v70) {
                  int v72 = v70;
                }
                if (v75 <= v73) {
                  int v70 = v73;
                }
                *uint64_t v11 = v71;
                v11[1] = v70;
                if (v75 >= v73) {
                  int v76 = v73;
                }
                else {
                  int v76 = v75;
                }
                void v11[2] = v76;
                void v11[3] = v72;
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            uint64_t v77 = v11 + 1;
            BOOL v79 = v11 == a2 || v77 == a2;
            if (a4)
            {
              if (!v79)
              {
                uint64_t v80 = 4;
                int v81 = v11;
                do
                {
                  int v83 = *v81;
                  int v82 = v81[1];
                  int v81 = v77;
                  if (v82 > v83)
                  {
                    uint64_t v84 = v80;
                    do
                    {
                      *(int *)((char *)v11 + v84) = v83;
                      uint64_t v85 = v84 - 4;
                      if (v84 == 4)
                      {
                        long long v86 = v11;
                        goto LABEL_155;
                      }
                      int v83 = *(int *)((char *)v11 + v84 - 8);
                      v84 -= 4;
                    }
                    while (v82 > v83);
                    long long v86 = (int *)((char *)v11 + v85);
LABEL_155:
                    *long long v86 = v82;
                  }
                  uint64_t v77 = v81 + 1;
                  v80 += 4;
                }
                while (v81 + 1 != a2);
              }
            }
            else if (!v79)
            {
              do
              {
                int v112 = *v9;
                int v111 = v9[1];
                int v9 = v77;
                if (v111 > v112)
                {
                  do
                  {
                    *uint64_t v77 = v112;
                    int v112 = *(v77 - 2);
                    --v77;
                  }
                  while (v111 > v112);
                  *uint64_t v77 = v111;
                }
                uint64_t v77 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v87 = (v13 - 2) >> 1;
              int64_t v88 = v87;
              do
              {
                int64_t v89 = v88;
                if (v87 >= v88)
                {
                  uint64_t v90 = (2 * v88) | 1;
                  uint64_t v91 = &v11[v90];
                  if (2 * v89 + 2 < (uint64_t)v13)
                  {
                    int v93 = v91[1];
                    BOOL v92 = *v91 <= v93;
                    if (*v91 < v93) {
                      int v93 = *v91;
                    }
                    if (!v92)
                    {
                      ++v91;
                      uint64_t v90 = 2 * v89 + 2;
                    }
                  }
                  else
                  {
                    int v93 = *v91;
                  }
                  uint64_t v94 = &v11[v89];
                  int v95 = *v94;
                  if (v93 <= *v94)
                  {
                    do
                    {
                      *uint64_t v94 = v93;
                      uint64_t v94 = v91;
                      if (v87 < v90) {
                        break;
                      }
                      uint64_t v96 = (2 * v90) | 1;
                      uint64_t v91 = &v11[v96];
                      uint64_t v90 = 2 * v90 + 2;
                      if (v90 < (uint64_t)v13)
                      {
                        int v93 = *v91;
                        uint64_t result = v91 + 1;
                        int v97 = v91[1];
                        if (*v91 >= v97) {
                          int v93 = v91[1];
                        }
                        if (*v91 <= v97) {
                          uint64_t v90 = v96;
                        }
                        else {
                          ++v91;
                        }
                      }
                      else
                      {
                        int v93 = *v91;
                        uint64_t v90 = v96;
                      }
                    }
                    while (v93 <= v95);
                    *uint64_t v94 = v95;
                  }
                }
                int64_t v88 = v89 - 1;
              }
              while (v89);
              uint64_t v98 = (unint64_t)v12 >> 2;
              do
              {
                uint64_t v99 = 0;
                int v100 = *v11;
                uint64_t v101 = v11;
                do
                {
                  uint64_t v102 = &v101[v99 + 1];
                  uint64_t v103 = (2 * v99) | 1;
                  uint64_t v99 = 2 * v99 + 2;
                  if (v99 < v98)
                  {
                    int v105 = *v102;
                    int v104 = v102[1];
                    if (*v102 >= v104) {
                      int v105 = v102[1];
                    }
                    if (*v102 <= v104) {
                      uint64_t v99 = v103;
                    }
                    else {
                      ++v102;
                    }
                  }
                  else
                  {
                    int v105 = *v102;
                    uint64_t v99 = v103;
                  }
                  *uint64_t v101 = v105;
                  uint64_t v101 = v102;
                }
                while (v99 <= (uint64_t)((unint64_t)(v98 - 2) >> 1));
                if (v102 == --a2)
                {
                  *uint64_t v102 = v100;
                }
                else
                {
                  *uint64_t v102 = *a2;
                  *a2 = v100;
                  uint64_t v106 = (char *)v102 - (char *)v11 + 4;
                  if (v106 >= 5)
                  {
                    unint64_t v107 = (((unint64_t)v106 >> 2) - 2) >> 1;
                    int v108 = &v11[v107];
                    int v109 = *v108;
                    int v110 = *v102;
                    if (*v108 > *v102)
                    {
                      do
                      {
                        *uint64_t v102 = v109;
                        uint64_t v102 = v108;
                        if (!v107) {
                          break;
                        }
                        unint64_t v107 = (v107 - 1) >> 1;
                        int v108 = &v11[v107];
                        int v109 = *v108;
                      }
                      while (*v108 > v110);
                      *uint64_t v102 = v110;
                    }
                  }
                }
                BOOL v92 = v98-- <= 2;
              }
              while (!v92);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          int v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v15 - 1, v15, &v9[v14 + 1]);
            int v16 = *v9;
            *int v9 = *v15;
            *int v15 = v16;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          int v17 = *v9;
          int v18 = v9;
          if (a4) {
            break;
          }
          int v18 = v9;
          if (*(v9 - 1) > v17) {
            break;
          }
          if (v17 <= *v10)
          {
            uint64_t v32 = v9 + 1;
            do
            {
              uint64_t v11 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 <= *v11);
          }
          else
          {
            uint64_t v11 = v9;
            do
            {
              int v31 = v11[1];
              ++v11;
            }
            while (v17 <= v31);
          }
          uint64_t v33 = a2;
          if (v11 < a2)
          {
            uint64_t v33 = a2;
            do
              int v34 = *--v33;
            while (v17 > v34);
          }
          if (v11 < v33)
          {
            int v35 = *v11;
            int v36 = *v33;
            do
            {
              *uint64_t v11 = v36;
              *uint64_t v33 = v35;
              do
              {
                int v37 = v11[1];
                ++v11;
                int v35 = v37;
              }
              while (v17 <= v37);
              do
              {
                int v38 = *--v33;
                int v36 = v38;
              }
              while (v17 > v38);
            }
            while (v11 < v33);
          }
          uint64_t v39 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *int v9 = *v39;
          }
          a4 = 0;
          *uint64_t v39 = v17;
        }
        do
        {
          uint64_t v19 = v18;
          int v21 = v18[1];
          ++v18;
          int v20 = v21;
        }
        while (v21 > v17);
        int v22 = a2;
        if (v19 == v9)
        {
          int v22 = a2;
          do
          {
            if (v18 >= v22) {
              break;
            }
            int v24 = *--v22;
          }
          while (v24 <= v17);
        }
        else
        {
          do
            int v23 = *--v22;
          while (v23 <= v17);
        }
        if (v18 < v22)
        {
          int v25 = *v22;
          __int32 v26 = v18;
          uint64_t v27 = v22;
          do
          {
            *__int32 v26 = v25;
            *uint64_t v27 = v20;
            do
            {
              uint64_t v19 = v26;
              int v28 = v26[1];
              ++v26;
              int v20 = v28;
            }
            while (v28 > v17);
            do
            {
              int v29 = *--v27;
              int v25 = v29;
            }
            while (v29 <= v17);
          }
          while (v26 < v27);
        }
        if (v19 != v9) {
          *int v9 = *v19;
        }
        *uint64_t v19 = v17;
        if (v18 >= v22) {
          break;
        }
LABEL_30:
        uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v9, v19, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v19 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v9, v19);
      uint64_t v11 = v19 + 1;
      uint64_t result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v19 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v19;
    if (!v30) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(_DWORD *a1, int *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      int v3 = *(a2 - 1);
      int v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      int v20 = a1[1];
      int v21 = *(a2 - 1);
      if (v20 <= v21) {
        int v22 = *(a2 - 1);
      }
      else {
        int v22 = a1[1];
      }
      if (v20 >= v21) {
        int v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      a1[1] = v22;
      int v23 = *(a2 - 1);
      if (v23 <= *a1) {
        int v24 = *a1;
      }
      else {
        int v24 = *(a2 - 1);
      }
      if (v23 >= *a1) {
        int v23 = *a1;
      }
      *(a2 - 1) = v23;
      int v26 = *a1;
      int v25 = a1[1];
      if (v24 <= v25) {
        int v26 = a1[1];
      }
      if (v24 < v25) {
        int v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      int v48 = a1[1];
      int v47 = a1[2];
      if (*a1 <= v47) {
        int v49 = a1[2];
      }
      else {
        int v49 = *a1;
      }
      if (*a1 < v47) {
        int v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      int v50 = *(a2 - 1);
      if (v48 <= v50) {
        int v51 = *(a2 - 1);
      }
      else {
        int v51 = v48;
      }
      if (v48 < v50) {
        int v50 = v48;
      }
      *(a2 - 1) = v50;
      int v52 = *a1;
      if (*a1 <= v51) {
        int v53 = v51;
      }
      else {
        int v53 = *a1;
      }
      if (v52 >= v51) {
        int v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      int v54 = a1[2];
      int v55 = *(a2 - 1);
      if (v54 <= v55) {
        int v56 = *(a2 - 1);
      }
      else {
        int v56 = a1[2];
      }
      if (v54 >= v55) {
        int v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      int v57 = a1[1];
      if (v57 <= v56) {
        int v58 = v56;
      }
      else {
        int v58 = a1[1];
      }
      if (v57 >= v56) {
        int v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      int v27 = *a1;
      int v28 = a1[1];
      if (*a1 <= v28) {
        int v29 = a1[1];
      }
      else {
        int v29 = *a1;
      }
      if (v27 >= v28) {
        int v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      int v30 = a1[3];
      int v31 = *(a2 - 1);
      if (v30 <= v31) {
        int v32 = *(a2 - 1);
      }
      else {
        int v32 = a1[3];
      }
      if (v30 >= v31) {
        int v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      a1[3] = v32;
      int v33 = *(a2 - 1);
      int v34 = a1[2];
      if (v33 <= v34) {
        int v35 = a1[2];
      }
      else {
        int v35 = *(a2 - 1);
      }
      if (v33 >= v34) {
        int v33 = a1[2];
      }
      *(a2 - 1) = v33;
      int v37 = a1[2];
      int v36 = a1[3];
      int v38 = a1[1];
      if (v35 <= v36) {
        int v37 = a1[3];
      }
      if (v35 < v36) {
        int v36 = v35;
      }
      a1[2] = v37;
      a1[3] = v36;
      int v39 = *(a2 - 1);
      if (v38 <= v39) {
        int v40 = *(a2 - 1);
      }
      else {
        int v40 = v38;
      }
      if (v38 < v39) {
        int v39 = v38;
      }
      *(a2 - 1) = v39;
      int v41 = *a1;
      int v43 = a1[2];
      int v42 = a1[3];
      if (v42 <= *a1) {
        int v44 = *a1;
      }
      else {
        int v44 = a1[3];
      }
      if (v42 >= v41) {
        int v42 = *a1;
      }
      if (v44 <= v43) {
        int v41 = a1[2];
      }
      if (v44 < v43) {
        int v43 = v44;
      }
      if (v42 <= v40) {
        int v45 = v40;
      }
      else {
        int v45 = v42;
      }
      if (v42 >= v40) {
        int v42 = v40;
      }
      if (v45 <= v43) {
        int v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43) {
        int v46 = v43;
      }
      else {
        int v46 = v45;
      }
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      long long v6 = a1 + 2;
      int v5 = a1[2];
      int v8 = *a1;
      int v7 = a1[1];
      if (v7 <= v5) {
        int v9 = a1[2];
      }
      else {
        int v9 = a1[1];
      }
      if (v7 < v5) {
        int v5 = a1[1];
      }
      if (v5 <= v8) {
        int v10 = *a1;
      }
      else {
        int v10 = v5;
      }
      if (v5 >= v8) {
        int v5 = *a1;
      }
      *long long v6 = v5;
      if (v10 <= v9) {
        int v11 = v9;
      }
      else {
        int v11 = v8;
      }
      if (v10 >= v9) {
        int v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    int v15 = *v12;
    int v16 = *v6;
    if (*v12 > v16)
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(_DWORD *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 4;
        if (v17 == 4) {
          break;
        }
        int v16 = *(_DWORD *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (v15 <= v16)
        {
          uint64_t v19 = (_DWORD *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      uint64_t v19 = a1;
LABEL_27:
      *uint64_t v19 = v15;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    long long v6 = v12;
    v14 += 4;
    if (++v12 == a2) {
      return 1;
    }
  }
}

void Espresso::pass_fastspeech::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_fastspeech::~pass_fastspeech(Espresso::pass_fastspeech *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_fastspeech>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_fastspeech>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383138;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_fastspeech>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::blob_storage_mmap::pin_unpin_memory(uint64_t this, int a2)
{
  if (a2)
  {
    if (!*(unsigned char *)(this + 88)) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Pinning memory is not supported on this platform.");
    }
  }
  else if (*(unsigned char *)(this + 88))
  {
    uint64_t v2 = this;
    this = munlock(*(const void **)(this + 72), *(void *)(this + 80));
    if (this)
    {
      std::to_string(&v6, this);
      int v3 = std::string::insert(&v6, 0, "Unable to unpin blob storage to system memory due to error = ");
      long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      int64_t v8 = v3->__r_.__value_.__r.__words[2];
      long long v7 = v4;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
      if (v8 >= 0) {
        int v5 = (const char *)&v7;
      }
      else {
        int v5 = (const char *)v7;
      }
      Espresso::throw_exception_selector<Espresso::generic_error>(v5);
    }
    *(unsigned char *)(v2 + 88) = 0;
  }
  return this;
}

void sub_192AA5490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::blob_storage_mmap::check_aligned(Espresso::blob_storage_mmap *this)
{
  uint64_t v1 = (char *)*((void *)this + 1);
  uint64_t v2 = (char *)this + 16;
  if (v1 == (char *)this + 16) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = *((void *)v1 + 4);
    BOOL v5 = ((*(uint64_t (**)(Espresso::blob_storage_mmap *, void))(*(void *)this + 80))(this, (int)v4) & 0x3F) == 0;
    BOOL result = (v4 & 1) == 0 || (unint64_t)v5;
    if (!result) {
      break;
    }
    long long v7 = (char *)*((void *)v1 + 1);
    if (v7)
    {
      do
      {
        int64_t v8 = v7;
        long long v7 = *(char **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        int64_t v8 = (char *)*((void *)v1 + 2);
        BOOL v9 = *(void *)v8 == (void)v1;
        uint64_t v1 = v8;
      }
      while (!v9);
    }
    uint64_t v1 = v8;
    if (v8 == v2) {
      return 1;
    }
  }
  return result;
}

uint64_t Espresso::blob_storage_mmap::owns_file_storage_mmap_alloc(Espresso::blob_storage_mmap *this)
{
  return 1;
}

uint64_t Espresso::blob_storage_mmap::get_file_type(Espresso::blob_storage_mmap *this)
{
  return 1;
}

void Espresso::blob_storage_mmap::get_file_path(Espresso::blob_storage_mmap *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 8);
  }
}

uint64_t Espresso::blob_storage_mmap::get_blob_data_offset(Espresso::blob_storage_mmap *this, unint64_t a2)
{
  uint64_t v4 = (void *)*((void *)this + 2);
  uint64_t v2 = (char *)this + 16;
  int v3 = v4;
  if (!v4) {
    return -1;
  }
  BOOL v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      int64_t v8 = v3;
    }
    else {
      int64_t v8 = v3 + 1;
    }
    if (v7) {
      BOOL v5 = (char *)v3;
    }
    int v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((void *)v5 + 4) <= a2) {
    return *((void *)v5 + 6);
  }
  else {
    return -1;
  }
}

BOOL Espresso::blob_storage_mmap::copy_blob_to(uint64_t **this, uint64_t *a2, void *a3, size_t a4)
{
  uint64_t v12 = a2;
  int64_t v8 = (const void *)((uint64_t (*)(uint64_t **))(*this)[10])(this);
  if (v8)
  {
    BOOL v9 = std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(this + 1, (unint64_t)a2, &v12);
    if ((unint64_t)v9[7] >= a4) {
      size_t v10 = a4;
    }
    else {
      size_t v10 = (size_t)v9[7];
    }
    memcpy(a3, v8, v10);
  }
  return v8 != 0;
}

void Espresso::blob_storage_mmap::~blob_storage_mmap(Espresso::blob_storage_mmap *this)
{
  Espresso::blob_storage_mmap::~blob_storage_mmap(this);

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE34C218;
  Espresso::blob_storage_mmap::pin_unpin_memory((uint64_t)this, 0);
  if (*((unsigned char *)this + 32)) {
    munmap(*((void **)this + 9), *((void *)this + 10));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  std::unique_ptr<encrypted_file>::reset[abi:ne180100]((encrypted_file **)this + 5);
  std::__tree<int>::destroy(*((void **)this + 2));
}

encrypted_file *std::unique_ptr<encrypted_file>::reset[abi:ne180100](encrypted_file **a1)
{
  BOOL result = *a1;
  *a1 = 0;
  if (result)
  {
    encrypted_file::~encrypted_file(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void Espresso::blob_storage_abstract::pin_unpin_memory(Espresso::blob_storage_abstract *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "pin_unpin_memory not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192AA57F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob_storage_mmap_v2::check_aligned(Espresso::blob_storage_mmap_v2 *this)
{
  return 1;
}

double Espresso::blob_storage_mmap_v2::get_blob_file_metadata@<D0>(Espresso::blob_storage_mmap_v2 *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 40))(&v6);
  *(_DWORD *)a3 = 2;
  double result = *(double *)&v6;
  *(_OWORD *)(a3 + 8) = v6;
  *(void *)(a3 + 24) = v7;
  *(void *)(a3 + 32) = a2;
  return result;
}

uint64_t Espresso::blob_storage_mmap_v2::has_blob_file_metadata(Espresso::blob_storage_mmap_v2 *this)
{
  return 1;
}

uint64_t Espresso::blob_storage_mmap_v2::owns_file_storage_mmap_alloc(Espresso::blob_storage_mmap_v2 *this)
{
  return 1;
}

uint64_t Espresso::blob_storage_mmap_v2::get_file_type(Espresso::blob_storage_mmap_v2 *this)
{
  return 2;
}

uint64_t Espresso::blob_storage_mmap_v2::get_blob_data_offset(Espresso::blob_storage_mmap_v2 *this)
{
  return MEMORY[0x1F412BC38](*((void *)this + 1));
}

BOOL Espresso::blob_storage_mmap_v2::copy_blob_to(Espresso::blob_storage_mmap_v2 *this, unint64_t a2, void *a3, size_t a4)
{
  long long v6 = (const void *)(*(uint64_t (**)(Espresso::blob_storage_mmap_v2 *))(*(void *)this + 80))(this);
  if (v6) {
    memcpy(a3, v6, a4);
  }
  return v6 != 0;
}

void Espresso::blob_storage_mmap_v2::~blob_storage_mmap_v2(MIL::Blob::StorageReader **this)
{
  *this = (MIL::Blob::StorageReader *)&unk_1EE350BF8;
  std::unique_ptr<MIL::Blob::StorageReader>::reset[abi:ne180100](this + 1, 0);

  JUMPOUT(0x192FF16B0);
}

{
  *this = (MIL::Blob::StorageReader *)&unk_1EE350BF8;
  std::unique_ptr<MIL::Blob::StorageReader>::reset[abi:ne180100](this + 1, 0);
}

uint64_t Espresso::blob_storage_memory::check_aligned(Espresso::blob_storage_memory *this)
{
  return 1;
}

uint64_t Espresso::blob_storage_abstract::owns_file_storage_mmap_alloc(Espresso::blob_storage_abstract *this)
{
  return 0;
}

void Espresso::blob_storage_abstract::get_file_type(Espresso::blob_storage_abstract *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "get_file_type not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192AA5A18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::blob_storage_memory::get_file_path(Espresso::blob_storage_memory *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 1);
  if (*(char *)(v2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 120), *(void *)(v2 + 128));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 120);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 136);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t Espresso::blob_storage_memory::get_blob_data_offset(Espresso::blob_storage_memory *this, unint64_t a2)
{
  if (Espresso::blob_storage_write_version == 1) {
    unint64_t v2 = (a2 - 1) >> 1;
  }
  else {
    unint64_t v2 = a2;
  }
  uint64_t v3 = *(void *)(*((void *)this + 1) + 72);
  if (v2 >= (*(void *)(*((void *)this + 1) + 80) - v3) >> 3) {
    return -1;
  }
  else {
    return *(void *)(v3 + 8 * v2);
  }
}

BOOL Espresso::blob_storage_memory::copy_blob_to(Espresso::blob_storage_memory *this, unint64_t a2, void *__dst, size_t a4)
{
  if (Espresso::blob_storage_write_version == 1) {
    unint64_t v4 = (a2 - 1) >> 1;
  }
  else {
    unint64_t v4 = a2;
  }
  BOOL v5 = (void *)*((void *)this + 1);
  unint64_t v6 = (uint64_t)(v5[1] - *v5) >> 3;
  if (v6 > v4)
  {
    uint64_t v7 = *(const void **)(*v5 + 8 * v4);
    size_t v8 = *(void *)(v5[3] + 8 * v4);
    if (v8 >= a4) {
      size_t v8 = a4;
    }
    memcpy(__dst, v7, v8);
  }
  return v6 > v4;
}

uint64_t Espresso::blob_storage_abstract::check_aligned(Espresso::blob_storage_abstract *this)
{
  return 0;
}

uint64_t Espresso::blob_storage_abstract::mapped_blob(Espresso::blob_storage_abstract *this)
{
  return 0;
}

void Espresso::blob_storage_abstract::get_blob_file_metadata(Espresso::blob_storage_abstract *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "get_blob_file_metadata not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192AA5BCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob_storage_abstract::has_blob_file_metadata(Espresso::blob_storage_abstract *this)
{
  return 0;
}

void Espresso::blob_storage_abstract::get_file_path(Espresso::blob_storage_abstract *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "get_file_path not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192AA5C30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL Espresso::blob_file_metadata::equals(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  size_t v8 = (const void **)(a1 + 8);
  if (v7 >= 0) {
    BOOL v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    BOOL v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(void *)(a1 + 16))) {
      return *(void *)(a1 + 32) == *(void *)(a2 + 32);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      size_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        return *(void *)(a1 + 32) == *(void *)(a2 + 32);
      }
    }
    return 0;
  }
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

void Espresso::throw_exception_selector<Espresso::io_error,char const*,char *>(const char *a1, const char *a2)
{
}

void Espresso::write_blob_storage_v1_info(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  __src = 0;
  int v39 = 0;
  uint64_t v40 = 0;
  uint64_t v8 = v6 - v7;
  std::vector<int>::size_type v9 = (v6 - v7) >> 2;
  if (v6 == v7)
  {
    int v11 = 0;
  }
  else
  {
    std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](&__src, (v6 - v7) >> 2);
    size_t v10 = (char *)v39;
    bzero(v39, 4 * v8);
    int v11 = &v10[4 * v8];
  }
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::vector<int>::resize((std::vector<int> *)(a1 + 32), v9);
  unint64_t v12 = a3 + 4 * v8 + 8;
  uint64_t v13 = a2[1];
  uint64_t v14 = (char *)__src;
  uint64_t v15 = v13 - *a2;
  if (v13 != *a2)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = v15 >> 3;
    BOOL v19 = (unint64_t)(v15 >> 3) > 1;
    uint64_t v20 = a2[3];
    if (!v19) {
      uint64_t v18 = 1;
    }
    int v21 = (_DWORD *)(*(void *)(a1 + 32) + 4);
    int v22 = (char *)__src + 16;
    do
    {
      unint64_t v23 = *((int *)a2 + 12);
      unint64_t v24 = v12 % v23;
      uint64_t v25 = v23 - v12 % v23;
      if (!v24) {
        uint64_t v25 = 0;
      }
      *(v22 - 2) = v16;
      *(v22 - 1) = v25;
      *(v21 - 1) = -1;
      void *v22 = v16 + 1;
      uint64_t v26 = *(void *)(v20 + 8 * v17);
      v22[1] = v26;
      *int v21 = v17;
      v21 += 2;
      v12 += v25 + v26;
      ++v17;
      v22 += 4;
      v16 += 2;
    }
    while (v18 != v17);
  }
  *(void *)a1 = v9;
  size_t v27 = v11 - v14;
  unint64_t v28 = (v11 - v14) >> 4;
  uint64_t v29 = *(void *)(a1 + 24);
  int v30 = *(char **)(a1 + 8);
  if (v28 > (v29 - (uint64_t)v30) >> 4)
  {
    if (v30)
    {
      *(void *)(a1 + 16) = v30;
      operator delete(v30);
      uint64_t v29 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
    }
    if ((v27 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = v29 >> 3;
    if (v29 >> 3 <= v28) {
      uint64_t v31 = (v11 - v14) >> 4;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100]((void *)(a1 + 8), v32);
    int v30 = *(char **)(a1 + 16);
    goto LABEL_26;
  }
  int v33 = *(unsigned char **)(a1 + 16);
  unint64_t v34 = (v33 - v30) >> 4;
  if (v34 >= v28)
  {
LABEL_26:
    if (v11 == v14) {
      goto LABEL_29;
    }
    int v36 = v30;
    int v37 = v14;
    goto LABEL_28;
  }
  int v35 = &v14[16 * v34];
  if (v33 != v30)
  {
    memmove(*(void **)(a1 + 8), v14, v33 - v30);
    int v30 = *(char **)(a1 + 16);
  }
  size_t v27 = v11 - v35;
  if (v11 != v35)
  {
    int v36 = v30;
    int v37 = v35;
LABEL_28:
    memmove(v36, v37, v27);
  }
LABEL_29:
  *(void *)(a1 + 16) = &v30[v27];
  *(void *)(a1 + 56) = v12;
  if (v14)
  {
    operator delete(v14);
  }
}

void sub_192AA5F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192AA617C(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_rpn_tracker_merge_convs::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  v207[1] = *MEMORY[0x1E4F143B8];
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)v199);
  *(_OWORD *)int v179 = 0u;
  *(_OWORD *)int v180 = 0u;
  LODWORD(v181[0]) = 1065353216;
  Espresso::net::get_consumers_of_blobs(v3, v179, (uint64_t)v198);
  uint64_t v159 = a2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v179);
  int32x2_t v195 = 0;
  uint64_t v196 = 0;
  unint64_t v197 = 0;
  uint64_t v191 = 0;
  uint64_t v5 = *((void *)v3 + 4);
  unsigned int v165 = v3;
  if (*((void *)v3 + 5) == v5)
  {
    int v41 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    unsigned int v163 = 0;
    unint64_t v166 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = (uint64_t)v3 + 56;
    uint64_t v9 = (uint64_t)v3 + 96;
    uint64_t v10 = (uint64_t)v3 + 136;
    do
    {
      uint64_t v12 = *(void *)(v5 + 16 * (void)v7);
      uint64_t v13 = *(const void **)(v12 + 64);
      {
        uint64_t v14 = *(std::__shared_weak_count **)(v12 + 72);
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          nitro::nitro_function::nitro_function(v14);
        }
        v179[0] = &v191;
        uint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v8, (unint64_t *)&v191, (uint64_t)&std::piecewise_construct, (uint64_t **)v179);
        if (v15[4] - v15[3] == 24)
        {
          v179[0] = &v191;
          uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v9, (unint64_t *)&v191, (uint64_t)&std::piecewise_construct, (uint64_t **)v179);
          if (v16[4] - v16[3] == 24)
          {
            uint64_t v17 = v11;
            v179[0] = &v191;
            uint64_t v18 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v8, (unint64_t *)&v191, (uint64_t)&std::piecewise_construct, (uint64_t **)v179)[3];
            v179[0] = &v191;
            std::string::size_type v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v9, (unint64_t *)&v191, (uint64_t)&std::piecewise_construct, (uint64_t **)v179)[3];
            uint64_t v174 = (unint64_t *)v18;
            uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)v18, (long long **)&v174);
            Espresso::abstract_blob_container::shape((char *)v179, *((void *)v20 + 5));
            __str.__r_.__value_.__r.__words[0] = v19;
            int v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)v19, (long long **)&__str);
            Espresso::abstract_blob_container::shape((char *)&v174, *((void *)v21 + 5));
            if (!Espresso::layer_shape::operator==((uint64_t)v179, (uint64_t)&v174) || HIDWORD(v180[0]) != HIDWORD(v175))
            {
              uint64_t v3 = v165;
              int v11 = v17;
              goto LABEL_53;
            }
            *(void *)unsigned int v161 = v10;
            unsigned int v162 = (std::string *)v9;
            __str.__r_.__value_.__r.__words[0] = v19;
            int v22 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v198, (unsigned __int8 *)v19, (long long **)&__str);
            unint64_t v24 = (void **)*((void *)v22 + 5);
            unint64_t v23 = (void **)*((void *)v22 + 6);
LABEL_12:
            if (v24 != v23)
            {
              v172[0] = 0;
              v172[0] = *v24;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v172;
              uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v8, (unint64_t *)v172, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
              uint64_t v27 = v25[3];
              uint64_t v26 = v25[4];
              while (1)
              {
                if (v27 == v26)
                {
                  ++v24;
                  goto LABEL_12;
                }
                uint64_t v28 = *(unsigned __int8 *)(v27 + 23);
                if ((v28 & 0x80u) == 0) {
                  uint64_t v29 = *(unsigned __int8 *)(v27 + 23);
                }
                else {
                  uint64_t v29 = *(void *)(v27 + 8);
                }
                uint64_t v30 = *(unsigned __int8 *)(v19 + 23);
                int v31 = (char)v30;
                if ((v30 & 0x80u) != 0) {
                  uint64_t v30 = *(void *)(v19 + 8);
                }
                if (v29 == v30)
                {
                  if (v31 >= 0) {
                    unint64_t v32 = (unsigned __int8 *)v19;
                  }
                  else {
                    unint64_t v32 = *(unsigned __int8 **)v19;
                  }
                  if ((v28 & 0x80) != 0)
                  {
                    if (memcmp(*(const void **)v27, v32, *(void *)(v27 + 8))) {
                      goto LABEL_32;
                    }
LABEL_31:
                    std::string::operator=((std::string *)v27, v18);
                    goto LABEL_32;
                  }
                  if (!*(unsigned char *)(v27 + 23)) {
                    goto LABEL_31;
                  }
                  uint64_t v33 = 0;
                  while (*(unsigned __int8 *)(v27 + v33) == v32[v33])
                  {
                    if (v28 == ++v33) {
                      goto LABEL_31;
                    }
                  }
                }
LABEL_32:
                v27 += 24;
              }
            }
            if ((unint64_t)v6 >= v166)
            {
              uint64_t v35 = (v6 - v163) >> 3;
              unint64_t v36 = v35 + 1;
              uint64_t v3 = v165;
              if ((unint64_t)(v35 + 1) >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              int v11 = v17;
              if ((uint64_t)(v166 - (void)v163) >> 2 > v36) {
                unint64_t v36 = (uint64_t)(v166 - (void)v163) >> 2;
              }
              if (v166 - (unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v36;
              }
              if (v37) {
                unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v37);
              }
              else {
                uint64_t v38 = 0;
              }
              int v39 = (char *)(v37 + 8 * v35);
              *(void *)int v39 = v191;
              unint64_t v34 = v39 + 8;
              while (v6 != v163)
              {
                uint64_t v40 = *((void *)v6 - 1);
                v6 -= 8;
                *((void *)v39 - 1) = v40;
                v39 -= 8;
              }
              int32x2_t v195 = v39;
              uint64_t v196 = v34;
              unint64_t v166 = v37 + 8 * v38;
              unint64_t v197 = v166;
              if (v163) {
                operator delete(v163);
              }
              unsigned int v163 = v39;
              uint64_t v9 = (uint64_t)v162;
            }
            else
            {
              *(void *)uint64_t v6 = v191;
              unint64_t v34 = v6 + 8;
              uint64_t v3 = v165;
              uint64_t v9 = (uint64_t)v162;
              int v11 = v17;
            }
            uint64_t v196 = v34;
            uint64_t v6 = v34;
            uint64_t v10 = *(void *)v161;
LABEL_53:
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            if (v181[1])
            {
              *(void **)&long long v182 = v181[1];
              operator delete(v181[1]);
            }
          }
        }
      }
      uint64_t v7 = (unint64_t *)((char *)v191 + 1);
      uint64_t v191 = v7;
      uint64_t v5 = *((void *)v3 + 4);
    }
    while ((unint64_t)v7 < (*((void *)v3 + 5) - v5) >> 4);
    int v41 = v195;
  }
  uint64_t v42 = (v6 - v41) >> 3;
  int v43 = v41 - 8;
  while (v42)
  {
    uint64_t v44 = v42 - 1;
    Espresso::net::remove_layer(v3, *(void *)&v43[8 * v42]);
    uint64_t v42 = v44;
  }
  Espresso::net::get_producers_of_blobs(v3, (uint64_t)v179);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)v199, (uint64_t *)v179);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v180[0]);
  int v45 = v179[0];
  v179[0] = 0;
  if (v45) {
    operator delete(v45);
  }
  unint64_t v194 = 0;
  uint64_t v46 = *((void *)v3 + 4);
  if (*((void *)v3 + 5) != v46)
  {
    unint64_t v47 = 0;
    uint64_t v48 = (uint64_t)v3 + 56;
    uint64_t v158 = (uint64_t)v3 + 96;
    uint64_t v160 = (uint64_t)v3 + 136;
    uint64_t v157 = (uint64_t)v3 + 16;
    int64_t v167 = (char *)v3 + 56;
    while (1)
    {
      uint64_t v191 = 0;
      __int16 v192 = 0;
      int v193 = 0;
      unint64_t v190 = 0;
      uint64_t v49 = *(void *)(v46 + 16 * v47);
      int v50 = (uint64_t **)(v49 + 40);
      int v51 = *(char *)(v49 + 63);
      if (v51 < 0)
      {
        if (*(void *)(v49 + 48) != 6) {
          goto LABEL_76;
        }
        int v50 = (uint64_t **)*v50;
      }
      else if (v51 != 6)
      {
        goto LABEL_76;
      }
      int v52 = *(_DWORD *)v50;
      int v53 = *((unsigned __int16 *)v50 + 2);
      if (v52 == 1668181859 && v53 == 29793) {
        break;
      }
LABEL_76:
      v179[0] = &v191;
      std::vector<std::pair<int,std::shared_ptr<Espresso::generic_batchnorm_kernel>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
      unint64_t v47 = v194 + 1;
      unint64_t v194 = v47;
      uint64_t v46 = *((void *)v3 + 4);
      if (v47 >= (*((void *)v3 + 5) - v46) >> 4) {
        goto LABEL_241;
      }
    }
    uint64_t v174 = &v194;
    int v55 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v48, &v194, (uint64_t)&std::piecewise_construct, (uint64_t **)&v174);
    int v57 = (uint64_t *)v55[3];
    int v56 = (uint64_t *)v55[4];
    if (v57 == v56)
    {
      printf("pass_rpn_tracker_merge_convs: merging %zu x-correlations\n", 0xAAAAAAAAAAAAAAABLL * (v192 - v191));
      goto LABEL_140;
    }
    while (1)
    {
      v179[0] = 0;
      uint64_t v174 = (unint64_t *)v57;
      v179[0] = (void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v199, (uint64_t)v57, (uint64_t)&std::piecewise_construct, (long long **)&v174)[5];
      uint64_t v58 = *(void *)(*((void *)v3 + 4) + 16 * (uint64_t)v179[0]);
      int v59 = *(const void **)(v58 + 64);
      if (v59)
      {
        if (v60)
        {
          int v61 = *(std::__shared_weak_count **)(v58 + 72);
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          int v61 = 0;
        }
      }
      else
      {
        int v61 = 0;
        int v60 = 0;
      }
      uint64_t v174 = (unint64_t *)v179;
      int v62 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v48, (unint64_t *)v179, (uint64_t)&std::piecewise_construct, (uint64_t **)&v174);
      char v63 = 0;
      if (v60 && v62[4] - v62[3] == 48)
      {
        uint64_t v174 = (unint64_t *)v179;
        uint64_t v174 = (unint64_t *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v48, (unint64_t *)v179, (uint64_t)&std::piecewise_construct, (uint64_t **)&v174)[3]+ 24);
        uint64_t v64 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v199, (uint64_t)v174, (uint64_t)&std::piecewise_construct, (long long **)&v174)[5];
        uint64_t v65 = *(void *)(*((void *)v3 + 4) + 16 * v64);
        int v66 = *(const void **)(v65 + 64);
        if (v66
        {
          int v67 = *(std::__shared_weak_count **)(v65 + 72);
          if (v67)
          {
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
            nitro::nitro_function::nitro_function(v67);
          }
          int v68 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v60 + 384))(v60) + 116);
          int v69 = v191;
          if (v191 == v192)
          {
            if (v68 == 1) {
              goto LABEL_113;
            }
LABEL_102:
            char v63 = 0;
            uint64_t v3 = v165;
            uint64_t v48 = (uint64_t)v167;
            if (!v61) {
              goto LABEL_107;
            }
          }
          else
          {
            unint64_t v70 = v190;
            int v71 = *(_DWORD *)((*(uint64_t (**)(unint64_t))(*(void *)v191[1] + 384))(v191[1]) + 48);
            int v72 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v60 + 384))(v60) + 48);
            int v73 = *(_DWORD *)((*(uint64_t (**)(unint64_t))(*(void *)v69[1] + 384))(v69[1]) + 52);
            if (v73 != *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v60 + 384))(v60) + 52)
              || v71 != v72
              || v64 != v70
              || v68 != 1)
            {
              goto LABEL_102;
            }
LABEL_113:
            unint64_t v190 = v64;
            long long v78 = v179[0];
            uint64_t v3 = v165;
            uint64_t v48 = (uint64_t)v167;
            if (v61) {
              atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(void *)&long long v79 = v60;
            *((void *)&v79 + 1) = v61;
            uint64_t v80 = v192;
            if (v192 >= v193)
            {
              int v82 = v191;
              unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * (v192 - v191);
              unint64_t v84 = v83 + 1;
              if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              long long v164 = v79;
              if (0x5555555555555556 * (v193 - v191) > v84) {
                unint64_t v84 = 0x5555555555555556 * (v193 - v191);
              }
              if (0xAAAAAAAAAAAAAAABLL * (v193 - v191) >= 0x555555555555555) {
                unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v85 = v84;
              }
              if (v85 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              long long v86 = (char *)operator new(24 * v85);
              int64_t v87 = &v86[24 * v83];
              *(void *)int64_t v87 = v78;
              *(_OWORD *)(v87 + 8) = v164;
              int v81 = (unint64_t *)(v87 + 24);
              if (v80 == v82)
              {
                uint64_t v191 = (unint64_t *)&v86[24 * v83];
                __int16 v192 = (unint64_t *)(v87 + 24);
                int v193 = (unint64_t *)&v86[24 * v85];
                uint64_t v48 = (uint64_t)v167;
                if (!v80) {
                  goto LABEL_133;
                }
              }
              else
              {
                do
                {
                  uint64_t v88 = *(v80 - 3);
                  v80 -= 3;
                  *((void *)v87 - 3) = v88;
                  v87 -= 24;
                  *(_OWORD *)(v87 + 8) = *(_OWORD *)(v80 + 1);
                  v80[1] = 0;
                  v80[2] = 0;
                }
                while (v80 != v82);
                int64_t v89 = v191;
                uint64_t v80 = v192;
                uint64_t v191 = (unint64_t *)v87;
                __int16 v192 = v81;
                int v193 = (unint64_t *)&v86[24 * v85];
                uint64_t v48 = (uint64_t)v167;
                if (v80 != v89)
                {
                  do
                  {
                    uint64_t v90 = (std::__shared_weak_count *)*(v80 - 1);
                    if (v90) {
                      nitro::nitro_function::nitro_function(v90);
                    }
                    v80 -= 3;
                  }
                  while (v80 != v89);
                  uint64_t v80 = v89;
                }
                if (!v80) {
                  goto LABEL_133;
                }
              }
              operator delete(v80);
            }
            else
            {
              *__int16 v192 = (unint64_t)v78;
              *(_OWORD *)(v80 + 1) = v79;
              int v81 = v80 + 3;
            }
LABEL_133:
            __int16 v192 = v81;
            char v63 = 1;
            if (!v61) {
              goto LABEL_107;
            }
          }
LABEL_106:
          nitro::nitro_function::nitro_function(v61);
          goto LABEL_107;
        }
        char v63 = 0;
      }
      if (v61) {
        goto LABEL_106;
      }
LABEL_107:
      v57 += 3;
      if (v57 == v56) {
        char v77 = 0;
      }
      else {
        char v77 = v63;
      }
      if ((v77 & 1) == 0)
      {
        printf("pass_rpn_tracker_merge_convs: merging %zu x-correlations\n", 0xAAAAAAAAAAAAAAABLL * (v192 - v191));
        if (v63)
        {
LABEL_140:
          if (0xAAAAAAAAAAAAAAABLL * (v192 - v191) >= 2)
          {
            uint64_t v174 = &v194;
            uint64_t v91 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v158, &v194, (uint64_t)&std::piecewise_construct, (uint64_t **)&v174)[3];
            uint64_t v174 = v191;
            BOOL v92 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v48, v191, (uint64_t)&std::piecewise_construct, (uint64_t **)&v174)[3];
            uint64_t v174 = &v190;
            int v93 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v48, &v190, (uint64_t)&std::piecewise_construct, (uint64_t **)&v174)[3];
            uint64_t v94 = (*(uint64_t (**)(unint64_t))(*(void *)v191[1] + 384))(v191[1]);
            long long v95 = *(_OWORD *)v94;
            long long v96 = *(_OWORD *)(v94 + 32);
            *(_OWORD *)int v180 = *(_OWORD *)(v94 + 16);
            *(_OWORD *)std::string v181 = v96;
            *(_OWORD *)int v179 = v95;
            long long v97 = *(_OWORD *)(v94 + 48);
            long long v98 = *(_OWORD *)(v94 + 64);
            long long v99 = *(_OWORD *)(v94 + 96);
            long long v184 = *(_OWORD *)(v94 + 80);
            long long v185 = v99;
            long long v182 = v97;
            long long v183 = v98;
            long long v100 = *(_OWORD *)(v94 + 112);
            long long v101 = *(_OWORD *)(v94 + 128);
            long long v102 = *(_OWORD *)(v94 + 144);
            uint64_t v189 = *(void *)(v94 + 160);
            long long v187 = v101;
            long long v188 = v102;
            long long v186 = v100;
            uint64_t v174 = v92;
            HIDWORD(v181[1]) = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v160, (unsigned __int8 *)v92, (long long **)&v174)+ 5)+ 16);
            uint64_t v174 = v91;
            LODWORD(v181[1]) = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v160, (unsigned __int8 *)v91, (long long **)&v174)+ 5)+ 16);
            WORD4(v183) = 0;
            *(void *)&long long v184 = 0;
            LODWORD(v174) = 0;
            long long v175 = 0u;
            long long v176 = 0u;
            long long __p = 0u;
            long long v178 = 0u;
            uint64_t v103 = (char *)operator new(0xF8uLL);
            *((void *)v103 + 1) = 0;
            *((void *)v103 + 2) = 0;
            *(void *)uint64_t v103 = &unk_1EE389DF0;
            *((void *)v103 + 3) = &unk_1EE36C758;
            *(_OWORD *)(v103 + 40) = 0u;
            *(_OWORD *)(v103 + 56) = 0u;
            *(_OWORD *)(v103 + 72) = 0u;
            *(_OWORD *)(v103 + 88) = 0u;
            *(_OWORD *)(v103 + 104) = 0u;
            *(_OWORD *)(v103 + 120) = 0u;
            *(_OWORD *)(v103 + 136) = 0u;
            *(_OWORD *)(v103 + 152) = 0u;
            *(_OWORD *)(v103 + 161) = 0u;
            *((_OWORD *)v103 + 13) = 0u;
            *((_OWORD *)v103 + 14) = 0u;
            *((void *)v103 + 30) = 0;
            *(void *)&long long v175 = v103 + 24;
            *((void *)&v175 + 1) = v103;
            uint64_t v104 = *(void *)(*((void *)v3 + 4) + 16 * v194);
            if (*(char *)(v104 + 39) >= 0) {
              size_t v105 = *(unsigned __int8 *)(v104 + 39);
            }
            else {
              size_t v105 = *(void *)(v104 + 24);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&__str, v105 + 12);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_str = &__str;
            }
            else {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if (v105)
            {
              if (*(char *)(v104 + 39) >= 0) {
                unint64_t v107 = (const void *)(v104 + 16);
              }
              else {
                unint64_t v107 = *(const void **)(v104 + 16);
              }
              memmove(p_str, v107, v105);
            }
            strcpy((char *)p_str + v105, "_single_conv");
            uint64_t v108 = v175;
            uint64_t v109 = v175 + 16;
            if (*(char *)(v175 + 39) < 0)
            {
              operator delete(*(void **)v109);
              uint64_t v108 = v175;
            }
            std::string::size_type v110 = __str.__r_.__value_.__r.__words[2];
            *(_OWORD *)uint64_t v109 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(void *)(v109 + 16) = v110;
            MEMORY[0x192FF0F50](v108 + 40, "convolution");
            *(void *)(v175 + 8) = *(void *)(*(void *)(*((void *)v3 + 4) + 16 * v194) + 8);
            if (*((char *)v92 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)*v92, v92[1]);
            }
            else
            {
              long long v111 = *(_OWORD *)v92;
              __str.__r_.__value_.__r.__words[2] = v92[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v111;
            }
            if (*((char *)v93 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v204, *(const std::string::value_type **)v93, *((void *)v93 + 1));
            }
            else
            {
              long long v112 = *v93;
              v204.__r_.__value_.__r.__words[2] = *((void *)v93 + 2);
              *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v112;
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v176, &__str, &v205, 2uLL);
            for (uint64_t i = 0; i != -6; i -= 3)
            {
              if (SHIBYTE(v204.__r_.__value_.__r.__words[i + 2]) < 0) {
                operator delete(*(void **)((char *)&__str + i * 8 + 24));
              }
            }
            if (*((char *)v91 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)*v91, v91[1]);
            }
            else
            {
              long long v114 = *(_OWORD *)v91;
              __str.__r_.__value_.__r.__words[2] = v91[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v114;
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&__p + 8), &__str, (long long *)&v204, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            Espresso::abstract_engine_factory::shared(&v168);
            uint64_t v115 = v168;
            std::string::basic_string[abi:ne180100]<0>(&__str, "convolution");
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v115, v157, (uint64_t)&__str, (uint64_t)v179, (int *)(v175 + 8));
            long long v116 = *(_OWORD *)v172;
            v172[0] = 0;
            v172[1] = 0;
            uint64_t v117 = *(std::__shared_weak_count **)(v175 + 72);
            *(_OWORD *)(v175 + 64) = v116;
            if (v117)
            {
              nitro::nitro_function::nitro_function(v117);
              if (v172[1]) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v172[1]);
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (v169) {
              nitro::nitro_function::nitro_function(v169);
            }
            LODWORD(v174) = v190;
            v172[0] = 0;
            v172[1] = 0;
            uint64_t v173 = 0;
            std::vector<unsigned long>::reserve(v172, 0xAAAAAAAAAAAAAAABLL * (v192 - v191) + 2);
            uint64_t v118 = (char *)v172[1];
            if (v172[1] < v173)
            {
              *(void *)v172[1] = v194;
              uint64_t v119 = v118 + 8;
              goto LABEL_191;
            }
            uint64_t v120 = (char *)v172[0];
            int64_t v121 = ((char *)v172[1] - (char *)v172[0]) >> 3;
            unint64_t v122 = v121 + 1;
            if ((unint64_t)(v121 + 1) >> 61) {
              goto LABEL_253;
            }
            uint64_t v123 = v173 - (char *)v172[0];
            if ((v173 - (char *)v172[0]) >> 2 > v122) {
              unint64_t v122 = v123 >> 2;
            }
            BOOL v124 = (unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v124) {
              unint64_t v125 = v122;
            }
            if (v125)
            {
              unint64_t v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v125);
              uint64_t v120 = (char *)v172[0];
              uint64_t v118 = (char *)v172[1];
            }
            else
            {
              uint64_t v126 = 0;
            }
            unint64_t v127 = (void *)(v125 + 8 * v121);
            *unint64_t v127 = v194;
            uint64_t v119 = v127 + 1;
            while (v118 != v120)
            {
              uint64_t v128 = *((void *)v118 - 1);
              v118 -= 8;
              *--unint64_t v127 = v128;
            }
            v172[0] = v127;
            v172[1] = v119;
            uint64_t v173 = (unsigned char *)(v125 + 8 * v126);
            if (v120) {
              operator delete(v120);
            }
LABEL_191:
            v172[1] = v119;
            uint64_t v129 = v191;
            uint64_t v130 = v192;
            if (v191 != v192)
            {
              do
              {
                unint64_t v131 = *v129;
                uint64_t v132 = (std::__shared_weak_count *)v129[2];
                if (v132) {
                  atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v133 = (char *)v172[1];
                if (v172[1] >= v173)
                {
                  std::string v135 = (char *)v172[0];
                  int64_t v136 = ((char *)v172[1] - (char *)v172[0]) >> 3;
                  unint64_t v137 = v136 + 1;
                  if ((unint64_t)(v136 + 1) >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v138 = v173 - (char *)v172[0];
                  if ((v173 - (char *)v172[0]) >> 2 > v137) {
                    unint64_t v137 = v138 >> 2;
                  }
                  BOOL v124 = (unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8;
                  unint64_t v139 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v124) {
                    unint64_t v139 = v137;
                  }
                  if (v139)
                  {
                    unint64_t v139 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v139);
                    std::string v135 = (char *)v172[0];
                    uint64_t v133 = (char *)v172[1];
                  }
                  else
                  {
                    uint64_t v140 = 0;
                  }
                  uint64_t v141 = (unint64_t *)(v139 + 8 * v136);
                  unint64_t *v141 = v131;
                  uint64_t v134 = v141 + 1;
                  while (v133 != v135)
                  {
                    unint64_t v142 = *((void *)v133 - 1);
                    v133 -= 8;
                    *--uint64_t v141 = v142;
                  }
                  v172[0] = v141;
                  v172[1] = v134;
                  uint64_t v173 = (unsigned char *)(v139 + 8 * v140);
                  if (v135) {
                    operator delete(v135);
                  }
                }
                else
                {
                  *(void *)v172[1] = v131;
                  uint64_t v134 = v133 + 8;
                }
                v172[1] = v134;
                if (v132) {
                  nitro::nitro_function::nitro_function(v132);
                }
                v129 += 3;
              }
              while (v129 != v130);
              uint64_t v119 = v172[1];
            }
            if (v119 < (void *)v173)
            {
              *uint64_t v119 = v190;
              unint64_t v143 = v119 + 1;
              goto LABEL_228;
            }
            std::string::size_type v144 = v172[0];
            uint64_t v145 = ((char *)v119 - (char *)v172[0]) >> 3;
            unint64_t v146 = v145 + 1;
            if ((unint64_t)(v145 + 1) >> 61) {
LABEL_253:
            }
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            uint64_t v147 = v173 - (char *)v172[0];
            if ((v173 - (char *)v172[0]) >> 2 > v146) {
              unint64_t v146 = v147 >> 2;
            }
            BOOL v124 = (unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v124) {
              unint64_t v148 = v146;
            }
            if (v148)
            {
              unint64_t v148 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v148);
              std::string::size_type v144 = v172[0];
              uint64_t v119 = v172[1];
            }
            else
            {
              uint64_t v149 = 0;
            }
            BOOL v150 = (void *)(v148 + 8 * v145);
            *BOOL v150 = v190;
            unint64_t v143 = v150 + 1;
            while (v119 != v144)
            {
              uint64_t v151 = *--v119;
              *--BOOL v150 = v151;
            }
            v172[0] = v150;
            v172[1] = v143;
            uint64_t v173 = (unsigned char *)(v148 + 8 * v149);
            if (v144) {
              operator delete(v144);
            }
LABEL_228:
            v172[1] = v143;
            std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
            for (int64_t j = (((char *)v172[1] - (char *)v172[0]) >> 3) - 1; j != -1; --j)
            {
              uint64_t v153 = *((void *)v172[0] + j);
              Espresso::net::remove_layer(v3, v153);
            }
            int v171 = v190;
            LODWORD(__str.__r_.__value_.__l.__data_) = v174;
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v175;
            if (*((void *)&v175 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v175 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            memset(&v204, 0, sizeof(v204));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v204, v176, *((uint64_t *)&v176 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v176 + 1) - v176) >> 3));
            long long v205 = 0uLL;
            uint64_t v206 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v205, *((uint64_t *)&__p + 1), v178, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - *((void *)&__p + 1)) >> 3));
            uint64_t v168 = 0;
            unint64_t v169 = 0;
            uint64_t v170 = 0;
            uint64_t v200 = &v168;
            char v201 = 0;
            uint64_t v168 = (std::__shared_weak_count *)operator new(0x48uLL);
            unint64_t v169 = v168;
            uint64_t v170 = v168 + 3;
            unint64_t v169 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v170, (uint64_t)&__str, (uint64_t)v207, (uint64_t)v168);
            Espresso::net::insert_layers((uint64_t)v3, &v171, (uint64_t *)&v168);
            uint64_t v200 = &v168;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
            uint64_t v200 = (std::__shared_weak_count **)&v205;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
            uint64_t v200 = (std::__shared_weak_count **)&v204;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v200);
            if (__str.__r_.__value_.__r.__words[2]) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2]);
            }
            unint64_t v194 = 0;
            Espresso::net::get_producers_of_blobs(v3, (uint64_t)&__str);
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)v199, (uint64_t *)&__str);
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__str.__r_.__value_.__r.__words[2]);
            std::string v154 = (void *)__str.__r_.__value_.__r.__words[0];
            __str.__r_.__value_.__r.__words[0] = 0;
            if (v154) {
              operator delete(v154);
            }
            if (v172[0])
            {
              v172[1] = v172[0];
              operator delete(v172[0]);
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            if (*((void *)&v175 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v175 + 1));
            }
          }
        }
        goto LABEL_76;
      }
    }
  }
LABEL_241:
  *((unsigned char *)v3 + 180) = 0;
  Espresso::shape_network_recursive(v3, (Espresso::net *)((char *)v3 + 184), 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v179, "rpn_tracker_merge_convs");
  v202[3] = 0;
  Espresso::net::pprint((uint64_t)v3, (uint64_t)v179, (uint64_t)v202);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v202);
  if (SHIBYTE(v180[0]) < 0) {
    operator delete(v179[0]);
  }
  *(unsigned char *)uint64_t v159 = 1;
  *(void *)(v159 + 8) = 0;
  *(void *)(v159 + 16) = 0;
  if (v195) {
    operator delete(v195);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v198[2]);
  std::string v155 = v198[0];
  v198[0] = 0;
  if (v155) {
    operator delete(v155);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v199[2]);
  uint64_t v156 = v199[0];
  v199[0] = 0;
  if (v156) {
    operator delete(v156);
  }
}

void sub_192AA75C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a46) {
    operator delete(a46);
  }
  if (a68) {
    operator delete(a68);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a71);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void Espresso::pass_rpn_tracker_merge_convs::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_rpn_tracker_merge_convs::~pass_rpn_tracker_merge_convs(Espresso::pass_rpn_tracker_merge_convs *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_rpn_tracker_merge_convs>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_rpn_tracker_merge_convs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388B58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_rpn_tracker_merge_convs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t espresso_vision_first_layer_number_of_input_blobs(EspressoNetwork *a1)
{
  uint64_t v1 = a1;
  [(EspressoNetwork *)v1 net];
  Espresso::layer_data::shapes((Espresso::layer_data *)v7, *(uint64_t **)(**(void **)(v5 + 32) + 80), *(uint64_t **)(**(void **)(v5 + 32) + 88));
  uint64_t v3 = v7[0];
  uint64_t v2 = v7[1];
  uint64_t v8 = (void **)v7;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }

  return (v2 - v3) >> 6;
}

void sub_192AA79EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }

  _Unwind_Resume(a1);
}

uint64_t espresso_vision_first_layer_first_source_blob_shape(EspressoNetwork *a1)
{
  uint64_t v1 = a1;
  [(EspressoNetwork *)v1 net];
  Espresso::abstract_blob_container::shape((char *)&v6, **(void **)(**(void **)(v4 + 32) + 80));
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v2 = v6;
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }

  return v2;
}

void sub_192AA7A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }

  _Unwind_Resume(a1);
}

uint64_t espresso_vision_last_layer_first_destination_blob_shape(EspressoNetwork *a1)
{
  uint64_t v1 = a1;
  [(EspressoNetwork *)v1 net];
  [(EspressoNetwork *)v1 net];
  uint64_t v2 = *(void *)(v11 + 40) - *(void *)(v11 + 32) + *(void *)(v7 + 32);
  uint64_t v4 = *(void *)(v2 - 16);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 - 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  Espresso::abstract_blob_container::shape((char *)&v7, **(void **)(v4 + 104));
  uint64_t v5 = v7;
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  return v5;
}

void sub_192AA7B80(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  _Unwind_Resume(a1);
}

uint64_t espresso_vision_compute(void *a1, void *a2, uint64_t a3, int a4, void *a5, uint64_t a6, int a7)
{
  void (***v18)(uint64_t *__return_ptr, void);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  void v27[10];
  std::__shared_weak_count *v28;
  uint64_t v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  int v35;
  void (***v36)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v37;
  void v38[2];
  void v39[6];
  void *v40[3];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 (*v44)(__n128 *, __n128 *);
  void (*v45)(uint64_t);
  const char *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void v49[2];
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  __n128 (*v53)(__n128 *, __n128 *);
  void (*v54)(uint64_t);
  const char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void v62[7];
  std::__shared_weak_count *v63;
  unsigned char *v64;
  std::__shared_weak_count *v65;
  _OWORD v66[5];

  id v13 = a1;
  id v14 = a2;
  vimage2espresso_params((uint64_t)v66, v13, a6, a7);
  if (v13)
  {
    [v13 net];
    uint64_t v15 = v64;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
  }
  if (v15[180])
  {
    v15[180] = 0;
    Espresso::shape_network_recursive((Espresso *)v15, (Espresso::net *)(v15 + 184), 0, 0);
    v15[180] = 0;
    uint64_t v15 = v64;
  }
  v62[0] = 0;
  v62[1] = v62;
  v62[2] = 0x4012000000;
  v62[3] = __Block_byref_object_copy__18324;
  v62[4] = __Block_byref_object_dispose__18325;
  v62[5] = "";
  v62[6] = 0;
  char v63 = 0;
  uint64_t v58 = 0;
  int v59 = &v58;
  int v60 = 0x2020000000;
  int v61 = 3712;
  int v50 = 0;
  int v51 = &v50;
  int v52 = 0x4012000000;
  int v53 = __Block_byref_object_copy__25_18326;
  int v54 = __Block_byref_object_dispose__26_18327;
  int v55 = "";
  uint64_t v16 = v65;
  v49[0] = v15;
  v49[1] = v65;
  if (v65)
  {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::get_last_layer_blob((uint64_t)v49, &v56);
    nitro::nitro_function::nitro_function(v16);
  }
  else
  {
    Espresso::get_last_layer_blob((uint64_t)v49, &v56);
  }
  int v41 = 0;
  uint64_t v42 = &v41;
  int v43 = 0x4012000000;
  uint64_t v44 = __Block_byref_object_copy__18324;
  int v45 = __Block_byref_object_dispose__18325;
  uint64_t v46 = "";
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v51[6] + 56))(&v47);
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x4812000000;
  v39[3] = __Block_byref_object_copy__29;
  v39[4] = __Block_byref_object_dispose__30;
  v39[5] = "";
  uint64_t v17 = v65;
  v38[0] = v64;
  v38[1] = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  createEspressoHostBlobs((uint64_t)v40, (uint64_t)v38);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v14)
  {
    [v14 ctx];
    uint64_t v18 = v36;
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v36 = 0;
    unint64_t v37 = 0;
  }
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3321888768;
  v27[2] = ___Z23espresso_vision_computeP15EspressoNetworkP15EspressoContextPK13vImage_BufferiPfPK12VimageParamsbii_block_invoke;
  v27[3] = &unk_1EE38EAD8;
  v27[9] = v64;
  uint64_t v28 = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = a4;
  unint64_t v32 = v66[2];
  uint64_t v33 = v66[3];
  unint64_t v34 = v66[4];
  uint64_t v30 = v66[0];
  int v31 = v66[1];
  v27[4] = v62;
  v27[5] = &v58;
  v27[6] = &v50;
  v27[7] = &v41;
  uint64_t v29 = a3;
  v27[8] = v39;
  Espresso::abstract_context::compute_batch_sync(v18, v27);
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  std::string::size_type v19 = v59;
  uint64_t v20 = v59[3];
  if (v20 == 128)
  {
    int v21 = 0;
    int v22 = v42[6];
    unint64_t v23 = *(const void **)(v22 + 24);
    unint64_t v24 = *(int *)(v22 + 8);
    uint64_t v25 = v22 + 12;
    do
    {
      v24 *= *(int *)(v25 + v21);
      v21 += 4;
    }
    while (v21 != 12);
    memcpy(a5, v23, 4 * v24);
    uint64_t v20 = v19[3];
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  _Block_object_dispose(v39, 8);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v40[1]);
  _Block_object_dispose(&v41, 8);
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  _Block_object_dispose(&v50, 8);
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  _Block_object_dispose(&v58, 8);
  _Block_object_dispose(v62, 8);
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }

  return v20;
}

void sub_192AA7FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62,char a63)
{
  _Block_object_dispose(&a36, 8);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(a43);
  _Block_object_dispose(&a45, 8);
  if (a52) {
    nitro::nitro_function::nitro_function(a52);
  }
  _Block_object_dispose(&a55, 8);
  if (a62) {
    nitro::nitro_function::nitro_function(a62);
  }
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose((const void *)(v65 - 240), 8);
  int v67 = *(std::__shared_weak_count **)(v65 - 184);
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
  int v68 = *(std::__shared_weak_count **)(v65 - 168);
  if (v68) {
    nitro::nitro_function::nitro_function(v68);
  }

  _Unwind_Resume(a1);
}

void vimage2espresso_params(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (*(unsigned char *)(a3 + 28))
  {
LABEL_2:
    int v9 = *(_DWORD *)(a3 + 4);
    int v10 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a1 + 8) = a4;
    *(_DWORD *)(a1 + 12) = v10;
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(a1 + 48) = _D0;
    *(_DWORD *)a1 = *(_DWORD *)a3;
    *(_DWORD *)(a1 + 4) = v9;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 12);
    goto LABEL_3;
  }
  if (!v7)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    goto LABEL_20;
  }
  [v7 net];
  if (!v25 || !*(void *)(v25 + 80))
  {
LABEL_20:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v23 = 0;
  uint64_t v16 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v25 + 56, 0, &v23)[3];
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    v24.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v17;
  }
  uint64_t v18 = v25;
  std::string::size_type v19 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v25 + 328, &v24);
  if ((void *)(v18 + 336) == v19)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    goto LABEL_2;
  }
  long long v20 = *(_OWORD *)(v19 + 9);
  *(_OWORD *)a1 = *(_OWORD *)(v19 + 7);
  *(_OWORD *)(a1 + 16) = v20;
  long long v21 = *(_OWORD *)(v19 + 13);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v19 + 11);
  *(_OWORD *)(a1 + 48) = v21;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v19 + 15);
  *(_DWORD *)(a1 + 8) = a4;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
LABEL_3:
}

void sub_192AA8278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  __cxa_free_exception(v17);
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__18324(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__18325(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 __Block_byref_object_copy__25_18326(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__26_18327(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void *__Block_byref_object_copy__29(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void createEspressoHostBlobs(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v2 = *(void **)(*(void *)a2 + 256);
  uint64_t v3 = *(void *)a2 + 264;
  if (v2 != (void *)v3)
  {
    do
    {
      if (*((char *)v2 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)v2[4], v2[5]);
      }
      else {
        std::string v16 = *(std::string *)(v2 + 4);
      }
      char v17 = *((unsigned char *)v2 + 56);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v15, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
      }
      else {
        std::string v15 = v16;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*(void *)a2 + 136), (unsigned __int8 *)&v15))
      {
        uint64_t v6 = *(void *)a2 + 136;
        uint64_t v18 = &v15;
        id v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)&v15, (long long **)&v18);
        (*(void (**)(long long *__return_ptr))(**((void **)v7 + 5) + 56))(&v14);
        uint64_t v18 = &v16;
        uint64_t v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, &v16, (long long **)&v18);
        long long v9 = v14;
        long long v14 = 0uLL;
        int v10 = (std::__shared_weak_count *)v8[8];
        *(_OWORD *)(v8 + 7) = v9;
        if (v10)
        {
          nitro::nitro_function::nitro_function(v10);
          if (*((void *)&v14 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v14 + 1));
          }
        }
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = (void *)v2[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v2[2];
          BOOL v13 = *v12 == (void)v2;
          uint64_t v2 = v12;
        }
        while (!v13);
      }
      uint64_t v2 = v12;
    }
    while (v12 != (void *)v3);
  }
}

void sub_192AA84F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v23);
  _Unwind_Resume(a1);
}

void ___Z23espresso_vision_computeP15EspressoNetworkP15EspressoContextPK13vImage_BufferiPfPK12VimageParamsbii_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 72);
  Espresso::fill_network_with_image_batch_safe_v2((void **)a2, (uint64_t *)(a1 + 72), *(_OWORD **)(a1 + 88), *(unsigned int *)(a1 + 176), *(void *)(*(void *)(a1 + 32) + 8) + 48, (__n128 *)(a1 + 96));
  if (*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 128) {
    Espresso::net::__forward(*v4, (void *)a2, 0, 0xFFFFFFFFLL);
  }
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 40))(v5, a2, *(void *)(*(void *)(a1 + 56) + 8) + 48);
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  long long v9 = *(void **)a2;
  int v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v7 = *(std::__shared_weak_count **)(a1 + 80);
  v8[0] = *(void *)(a1 + 72);
  v8[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  copyToEspressoHostBlobs((uint64_t)&v9, (uint64_t)v8, (uint64_t **)(*(void *)(*(void *)(a1 + 64) + 8) + 48));
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192AA866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 80);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(void *)(result + 80) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void copyToEspressoHostBlobs(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *(void **)(*(void *)a2 + 256);
  uint64_t v4 = *(void *)a2 + 264;
  if (v3 != (void *)v4)
  {
    do
    {
      if (*((char *)v3 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)v3[4], v3[5]);
      }
      else {
        std::string v15 = *(std::string *)(v3 + 4);
      }
      char v16 = *((unsigned char *)v3 + 56);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v15;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*(void *)a2 + 136), (unsigned __int8 *)&__p))
      {
        uint64_t v8 = *(void *)a2 + 136;
        p_p = &__p;
        uint64_t v9 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)&__p, (long long **)&p_p)+ 5);
        p_p = &__p;
        int v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, &__p, (long long **)&p_p);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v9 + 40))(v9, a1, v10 + 7);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          uint64_t v3 = v12;
        }
        while (!v13);
      }
      uint64_t v3 = v12;
    }
    while (v12 != (void *)v4);
  }
}

void sub_192AA8870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_vision_compute_batch(void *a1, void *a2, int a3, int a4, uint64_t a5, int a6, int a7, char *a8, uint64_t a9, unsigned __int8 a10)
{
  void (***v16)(uint64_t *__return_ptr, void);
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  Espresso *v24;
  Espresso::net *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  long long v35;
  std::__shared_weak_count *v36;
  void (***v37)(uint64_t *__return_ptr, void);
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  int v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _OWORD *v54;
  long long v55;
  uint64_t v56;
  void (***v57)(uint64_t *__return_ptr, void);
  void *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  size_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v69;
  id v71;
  void (***v72)(uint64_t *__return_ptr, void);
  void v74[9];
  std::__shared_weak_count *v75;
  void *__p;
  void *v77;
  uint64_t v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  int v84;
  void (***v85)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v86;
  long long v87;
  _OWORD *v88;
  void v89[10];
  std::__shared_weak_count *v90;
  uint64_t v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  __n128 (*v101)(__n128 *, __n128 *);
  void (*v102)(uint64_t);
  const char *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void v106[2];
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  __n128 (*v110)(__n128 *, __n128 *);
  void (*v111)(uint64_t);
  const char *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  void v119[2];
  void v120[6];
  void *v121[3];
  uint64_t v122;
  std::__shared_weak_count *v123;
  long long v124;
  long long v125;
  long long v126;
  long long v127;
  long long v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;

  id v15 = a1;
  char v16 = a2;
  uint64_t v129 = 0;
  uint64_t v130 = &v129;
  unint64_t v131 = 0x2020000000;
  uint64_t v132 = 3712;
  int v71 = v15;
  int v72 = v16;
  vimage2espresso_params((uint64_t)&v124, v15, a9, a10);
  if (a3 == 1)
  {
    if (v15)
    {
      [v15 net];
      char v17 = a7;
      uint64_t v18 = v122;
      std::string::size_type v19 = v123;
    }
    else
    {
      std::string::size_type v19 = 0;
      uint64_t v18 = 0;
      unint64_t v122 = 0;
      uint64_t v123 = 0;
      char v17 = a7;
    }
    v120[0] = 0;
    v120[1] = v120;
    v120[2] = 0x4812000000;
    v120[3] = __Block_byref_object_copy__29;
    v120[4] = __Block_byref_object_dispose__30;
    v120[5] = "";
    v119[0] = v18;
    v119[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    createEspressoHostBlobs((uint64_t)v121, (uint64_t)v119);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    std::string v24 = (Espresso *)v122;
    if (*(unsigned char *)(v122 + 180))
    {
      uint64_t v25 = (Espresso::net *)(v122 + 184);
      *(unsigned char *)(v122 + 180) = 0;
      Espresso::shape_network_recursive(v24, v25, 0, 0);
      *((unsigned char *)v24 + 180) = 0;
    }
    uint64_t v115 = 0;
    long long v116 = &v115;
    uint64_t v117 = 0x2020000000;
    uint64_t v118 = 0;
    if (a6 < 1)
    {
LABEL_25:
      uint64_t v29 = *(unsigned int *)(**(void **)(**(void **)(v122 + 32) + 80) + 20);
      unint64_t v107 = 0;
      uint64_t v108 = &v107;
      uint64_t v109 = 0x4012000000;
      std::string::size_type v110 = __Block_byref_object_copy__25_18326;
      long long v111 = __Block_byref_object_dispose__26_18327;
      long long v112 = "";
      uint64_t v30 = v123;
      v106[0] = v122;
      v106[1] = v123;
      if (v123)
      {
        atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
        Espresso::get_last_layer_blob((uint64_t)v106, &v113);
        nitro::nitro_function::nitro_function(v30);
      }
      else
      {
        Espresso::get_last_layer_blob((uint64_t)v106, &v113);
      }
      if (v29 == 1)
      {
        long long v98 = 0;
        long long v99 = &v98;
        long long v100 = 0x4812000000;
        long long v101 = __Block_byref_object_copy__38;
        long long v102 = __Block_byref_object_dispose__39;
        uint64_t v103 = "";
        std::vector<std::shared_ptr<Espresso::blob<float,4>>>::vector(&v104, a6);
        if (a6 <= 0)
        {
          *((_DWORD *)v116 + 6) = 0;
        }
        else
        {
          uint64_t v33 = 0;
          do
          {
            (*(void (**)(long long *__return_ptr))(*(void *)v108[6] + 56))(&v87);
            unint64_t v34 = v99[6] + v33;
            uint64_t v35 = v87;
            int64_t v87 = 0uLL;
            unint64_t v36 = *(std::__shared_weak_count **)(v34 + 8);
            *(_OWORD *)unint64_t v34 = v35;
            if (v36) {
              nitro::nitro_function::nitro_function(v36);
            }
            if (*((void *)&v87 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v87 + 1));
            }
            v33 += 16;
          }
          while (16 * a6 != v33);
          *((_DWORD *)v116 + 6) = 0;
          do
          {
            unint64_t v37 = v16;
            if (v16)
            {
              [v16 ctx];
              unint64_t v37 = (void (***)(uint64_t *__return_ptr, void))v87;
            }
            else
            {
              int64_t v87 = 0uLL;
            }
            v89[0] = MEMORY[0x1E4F143A8];
            v89[1] = 3321888768;
            v89[2] = ___Z29espresso_vision_compute_batchP15EspressoNetworkP15EspressoContextiiPK13vImage_BufferiiPfPK12VimageParamsb_block_invoke;
            v89[3] = &unk_1EE38EAD8;
            v89[9] = v122;
            uint64_t v90 = v123;
            if (v123) {
              atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v97 = a7;
            uint64_t v94 = v126;
            long long v95 = v127;
            long long v96 = v128;
            BOOL v92 = v124;
            int v93 = v125;
            v89[4] = &v115;
            v89[5] = &v129;
            v89[6] = &v107;
            v89[7] = &v98;
            uint64_t v91 = a5;
            v89[8] = v120;
            Espresso::abstract_context::compute_batch_sync(v37, v89);
            if (*((void *)&v87 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v87 + 1));
            }
            if (v90) {
              nitro::nitro_function::nitro_function(v90);
            }
            uint64_t v38 = *((_DWORD *)v116 + 6) + 1;
            *((_DWORD *)v116 + 6) = v38;
          }
          while (v38 < a6);
          if (*((unsigned __int8 *)v130 + 24) == 128)
          {
            int v39 = 0;
            do
            {
              uint64_t v40 = (uint64_t *)(v99[6] + 16 * v39);
              int v41 = *v40;
              uint64_t v42 = (std::__shared_weak_count *)v40[1];
              if (v42) {
                atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v43 = 0;
              uint64_t v44 = *(int *)(v41 + 8);
              int v45 = v44;
              do
              {
                v45 *= *(int *)(v41 + 12 + v43);
                v43 += 4;
              }
              while (v43 != 12);
              uint64_t v46 = 0;
              unint64_t v47 = *(const void **)(v41 + 24);
              uint64_t v48 = v41 + 12;
              do
              {
                v44 *= *(int *)(v48 + v46);
                v46 += 4;
              }
              while (v46 != 12);
              memcpy(&a8[4 * v45 * v39], v47, 4 * v44);
              if (v42) {
                nitro::nitro_function::nitro_function(v42);
              }
              ++v39;
            }
            while (v39 != a6);
          }
        }
        _Block_object_dispose(&v98, 8);
        *(void *)&int64_t v87 = &v104;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
      }
      else
      {
        *((_DWORD *)v116 + 6) = 0;
        if (a6 >= 1)
        {
          uint64_t v49 = 0;
          int v69 = 2 * (int)v29;
          do
          {
            int64_t v87 = 0uLL;
            uint64_t v88 = 0;
            if (v29)
            {
              if ((v29 & 0x80000000) != 0) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              int v50 = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>((int)v29);
              *(void *)&int64_t v87 = v50;
              uint64_t v88 = &v50[2 * v51];
              bzero(v50, v69 * 16);
              int v52 = 0;
              *((void *)&v87 + 1) = &v50[v69];
              uint64_t v49 = *((_DWORD *)v116 + 6);
              int v53 = v49;
              while (v53 < a6)
              {
                int v54 = (_OWORD *)(a5 + 32 * v53);
                int v55 = v54[1];
                void *v50 = *v54;
                v50[1] = v55;
                v50 += 2;
                ++v52;
                int v53 = *((_DWORD *)v116 + 6) + 1;
                *((_DWORD *)v116 + 6) = v53;
                if (v29 == v52)
                {
                  LODWORD(v52) = v29;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v52) = 0;
            }
            int v56 = v52;
            std::vector<vImage_Buffer>::resize((char **)&v87, v52);
            long long v98 = 0;
            long long v99 = &v98;
            long long v100 = 0x4012000000;
            long long v101 = __Block_byref_object_copy__18324;
            long long v102 = __Block_byref_object_dispose__18325;
            uint64_t v103 = "";
            (*(void (**)(uint64_t))(*(void *)v108[6] + 56))(v108[6]);
            if (v16)
            {
              [v16 ctx];
              int v57 = v85;
            }
            else
            {
              int v57 = 0;
              unint64_t v85 = 0;
              long long v86 = 0;
            }
            v74[0] = MEMORY[0x1E4F143A8];
            v74[1] = 3321888768;
            v74[2] = ___Z29espresso_vision_compute_batchP15EspressoNetworkP15EspressoContextiiPK13vImage_BufferiiPfPK12VimageParamsb_block_invoke_2;
            v74[3] = &unk_1EE38EB10;
            v74[8] = v122;
            int v75 = v123;
            if (v123) {
              atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string __p = 0;
            char v77 = 0;
            long long v78 = 0;
            uint64_t v58 = (void *)v87;
            std::vector<vImage_Buffer>::__init_with_size[abi:ne180100]<vImage_Buffer*,vImage_Buffer*>(&__p, (const void *)v87, *((uint64_t *)&v87 + 1), (uint64_t)(*((void *)&v87 + 1) - v87) >> 5);
            unint64_t v84 = v17;
            int v81 = v126;
            int v82 = v127;
            unint64_t v83 = v128;
            long long v79 = v124;
            uint64_t v80 = v125;
            v74[4] = &v129;
            v74[5] = &v107;
            v74[6] = &v98;
            v74[7] = v120;
            Espresso::abstract_context::compute_batch_sync(v57, v74);
            if (v86) {
              nitro::nitro_function::nitro_function(v86);
            }
            if (*((unsigned __int8 *)v130 + 24) == 128)
            {
              int v60 = v99[6];
              int v59 = (std::__shared_weak_count *)v99[7];
              if (v59) {
                atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v61 = 0;
              int v62 = *(_DWORD *)(v60 + 8);
              do
              {
                v62 *= *(_DWORD *)(v60 + 12 + v61);
                v61 += 4;
              }
              while (v61 != 12);
              if (v56)
              {
                char v63 = 0;
                uint64_t v64 = v62 / (int)v29;
                uint64_t v65 = 4 * v64;
                int v66 = &a8[4 * v49 * (uint64_t)v64];
                do
                {
                  memcpy(&v66[v63], (const void *)(*(void *)(v60 + 24) + v63), v65);
                  v63 += v65;
                  --v56;
                }
                while (v56);
              }
              id v15 = v71;
              char v16 = v72;
              char v17 = a7;
              if (v59) {
                nitro::nitro_function::nitro_function(v59);
              }
            }
            if (__p)
            {
              char v77 = __p;
              operator delete(__p);
            }
            if (v75) {
              nitro::nitro_function::nitro_function(v75);
            }
            _Block_object_dispose(&v98, 8);
            if (v105) {
              nitro::nitro_function::nitro_function(v105);
            }
            if (v58) {
              operator delete(v58);
            }
            uint64_t v49 = *((_DWORD *)v116 + 6);
          }
          while (v49 < a6);
        }
      }
      _Block_object_dispose(&v107, 8);
      if (v114) {
        nitro::nitro_function::nitro_function(v114);
      }
    }
    else
    {
      uint64_t v26 = a6;
      uint64_t v27 = 3709;
      uint64_t v28 = (void *)a5;
      while (1)
      {
        if (!*v28)
        {
          int v31 = 189;
          unint64_t v32 = -3;
          goto LABEL_98;
        }
        if (v17 != 1 && v17 != 4) {
          break;
        }
        v28 += 4;
        if (!--v26) {
          goto LABEL_25;
        }
      }
      int v31 = 192;
      unint64_t v32 = -4;
      uint64_t v27 = 3708;
LABEL_98:
      v130[3] = v27;
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", v32, "-", "CVML_status espresso_vision_compute_batch(EspressoNetwork *__strong, EspressoContext *__strong, int, int, const vImage_Buffer *, int, const int, float *, const VimageParams *, BOOL)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", v31);
    }
    _Block_object_dispose(&v115, 8);
    _Block_object_dispose(v120, 8);
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v121[1]);
    if (v123) {
      nitro::nitro_function::nitro_function(v123);
    }
  }
  else
  {
    long long v20 = *((unsigned __int8 *)v130 + 24) != 128 || a6 < 1;
    long long v21 = a8;
    if (!v20)
    {
      int v22 = a6;
      while (1)
      {
        uint64_t v23 = espresso_vision_compute(v15, v16, a5, a7, v21, a9, a10);
        v130[3] = v23;
        if (v23 <= 0x7FuLL) {
          break;
        }
        v21 += 4 * a4;
        a5 += 32;
        if (!--v22) {
          goto LABEL_105;
        }
      }
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", v23 - 128, "-", "CVML_status espresso_vision_compute_batch(EspressoNetwork *__strong, EspressoContext *__strong, int, int, const vImage_Buffer *, int, const int, float *, const VimageParams *, BOOL)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 303);
    }
  }
LABEL_105:
  int v67 = v130[3];
  _Block_object_dispose(&v129, 8);

  return v67;
}

void sub_192AA92AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Block_object_dispose((const void *)(v25 - 136), 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__38(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *std::vector<std::shared_ptr<Espresso::blob<float,4>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_192AA94CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ___Z29espresso_vision_compute_batchP15EspressoNetworkP15EspressoContextiiPK13vImage_BufferiiPfPK12VimageParamsb_block_invoke(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = &a1[4].n128_i64[1];
  Espresso::fill_network_with_image_batch_safe_v2((void **)a2, &a1[4].n128_i64[1], (_OWORD *)(a1[5].n128_u64[1] + 32 * *(int *)(*(void *)(a1[2].n128_u64[0] + 8) + 24)), a1[11].n128_u32[0], 0, a1 + 6);
  if (*(unsigned __int8 *)(*(void *)(a1[2].n128_u64[1] + 8) + 24) == 128)
  {
    Espresso::net::__forward(*v4, (void *)a2, 0, 0xFFFFFFFFLL);
    uint64_t v5 = *(void *)(*(void *)(a1[3].n128_u64[0] + 8) + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 40))(v5, a2, *(void *)(*(void *)(a1[3].n128_u64[1] + 8) + 48)+ 16 * *(int *)(*(void *)(a1[2].n128_u64[0] + 8) + 24));
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v9 = *(void **)a2;
  int v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v7 = (std::__shared_weak_count *)a1[5].n128_u64[0];
  v8[0] = a1[4].n128_u64[1];
  v8[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  copyToEspressoHostBlobs((uint64_t)&v9, (uint64_t)v8, (uint64_t **)(*(void *)(a1[4].n128_u64[0] + 8) + 48));
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void ___Z29espresso_vision_compute_batchP15EspressoNetworkP15EspressoContextiiPK13vImage_BufferiiPfPK12VimageParamsb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  Espresso::fill_network_with_images_batch_safe_v2((void **)a2, (uint64_t *)(a1 + 64), (const char ***)(a1 + 80), *(unsigned int *)(a1 + 184), 0, (__n128 *)(a1 + 104));
  if (*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 128)
  {
    Espresso::net::__forward(*(void *)(a1 + 64), (void *)a2, 0, 0xFFFFFFFFLL);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 40))(v4, a2, *(void *)(*(void *)(a1 + 48) + 8) + 48);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v8 = *(void **)a2;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 72);
  v7[0] = *(void *)(a1 + 64);
  v7[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  copyToEspressoHostBlobs((uint64_t)&v8, (uint64_t)v7, (uint64_t **)(*(void *)(*(void *)(a1 + 56) + 8) + 48));
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192AA97FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_64c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE80c55_ZTSNSt3__16vectorI13vImage_BufferNS_9allocatorIS1_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void *__copy_helper_block_ea8_64c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE80c55_ZTSNSt3__16vectorI13vImage_BufferNS_9allocatorIS1_EEEE(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  a1[8] = *(void *)(a2 + 64);
  a1[9] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  return std::vector<vImage_Buffer>::__init_with_size[abi:ne180100]<vImage_Buffer*,vImage_Buffer*>(a1 + 10, *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 5);
}

void sub_192AA9914(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 72);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_vision_compute_dropout_augment(void *a1, void *a2, _DWORD *a3, uint64_t a4, int a5, void *a6, uint64_t a7, int a8)
{
  void (***v20)(uint64_t *__return_ptr, void);
  uint64_t *v21;
  uint64_t v22;
  std::string::size_type size;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  void v30[8];
  std::__shared_weak_count *v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  char *v38;
  int v39;
  std::string v40;
  __n128 (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t);
  const char *v43;
  long long v44;
  long long v45;
  std::string __p;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  Espresso *v51;
  std::__shared_weak_count *v52;
  void v53[7];
  std::__shared_weak_count *v54;
  _OWORD v55[5];
  long long v56;
  char v57;
  uint64_t v58[4];

  id v15 = a1;
  id v16 = a2;
  vimage2espresso_params((uint64_t)v55, v15, a7, a8);
  v53[0] = 0;
  v53[1] = v53;
  void v53[2] = 0x4012000000;
  _OWORD v53[3] = __Block_byref_object_copy__18324;
  v53[4] = __Block_byref_object_dispose__18325;
  v53[5] = "";
  v53[6] = 0;
  int v54 = 0;
  if (v15)
  {
    [v15 net];
    char v17 = v51;
  }
  else
  {
    char v17 = 0;
    int v51 = 0;
    int v52 = 0;
  }
  if (*((unsigned char *)v17 + 180))
  {
    *((unsigned char *)v17 + 180) = 0;
    Espresso::shape_network_recursive(v17, (Espresso *)((char *)v17 + 184), 0, 0);
    *((unsigned char *)v17 + 180) = 0;
  }
  unint64_t v47 = 0;
  uint64_t v48 = &v47;
  uint64_t v49 = 0x2020000000;
  int v50 = 3712;
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv6a");
  uint64_t v18 = (char *)operator new(0xB8uLL);
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = &unk_1EE3877A8;
  std::string::size_type v19 = v52;
  v58[0] = (uint64_t)v51;
  v58[1] = (uint64_t)v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)((char *)&v56 + 4) = 0x7C900000008;
  LODWORD(v56) = 1064514355;
  HIDWORD(v56) = 2;
  int v57 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v40, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    uint64_t v40 = __p;
  }
  Espresso::dropout_augment_lowmem::dropout_augment_lowmem((int *)v18 + 6, v58, &v56, (long long *)&v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  v40.__r_.__value_.__r.__words[0] = 0;
  v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v40;
  v40.__r_.__value_.__r.__words[2] = 0x5012000000;
  int v41 = __Block_byref_object_copy__44;
  uint64_t v42 = __Block_byref_object_dispose__45;
  int v43 = "";
  uint64_t v44 = 0u;
  int v45 = 0u;
  if (v16)
  {
    [v16 ctx];
    long long v20 = (void (***)(uint64_t *__return_ptr, void))v56;
  }
  else
  {
    long long v20 = 0;
    int v56 = 0uLL;
  }
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3321888768;
  v30[2] = ___Z39espresso_vision_compute_dropout_augmentP15EspressoNetworkP15EspressoContextPfPK13vImage_BufferiS3_PK12VimageParamsb_block_invoke;
  v30[3] = &unk_1EE38EAA0;
  v30[7] = v51;
  int v31 = v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = a5;
  uint64_t v35 = v55[2];
  unint64_t v36 = v55[3];
  unint64_t v37 = v55[4];
  uint64_t v33 = v55[0];
  unint64_t v34 = v55[1];
  v30[4] = v53;
  v30[5] = &v47;
  unint64_t v32 = a4;
  v30[6] = &v40;
  uint64_t v38 = v18 + 24;
  Espresso::abstract_context::compute_batch_sync(v20, v30);
  if (*((void *)&v56 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v56 + 1));
  }
  long long v21 = v48;
  int v22 = v48[3];
  std::string::size_type size = v40.__r_.__value_.__l.__size_;
  if (v22 == 128)
  {
    std::string v24 = 0;
    uint64_t v25 = *(void *)(v40.__r_.__value_.__l.__size_ + 48);
    uint64_t v26 = *(const void **)(v25 + 24);
    uint64_t v27 = *(int *)(v25 + 8);
    uint64_t v28 = v25 + 12;
    do
    {
      v27 *= *(int *)(v28 + v24);
      v24 += 4;
    }
    while (v24 != 12);
    memcpy(a6, v26, 4 * v27);
    int v22 = v21[3];
  }
  *a3 = **(_DWORD **)(*(void *)(size + 64) + 24);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  _Block_object_dispose(&v40, 8);
  if (*((void *)&v45 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v45 + 1));
  }
  if (*((void *)&v44 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v44 + 1));
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  _Block_object_dispose(&v47, 8);
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  _Block_object_dispose(v53, 8);
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }

  return v22;
}

void sub_192AA9D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  std::__shared_weak_count::~__shared_weak_count(v65);
  operator delete(v68);
  if (a49 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a50, 8);
  if (a55) {
    nitro::nitro_function::nitro_function(a55);
  }
  _Block_object_dispose(&a56, 8);
  if (a63) {
    nitro::nitro_function::nitro_function(a63);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__44(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  __n128 result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  return result;
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void ___Z39espresso_vision_compute_dropout_augmentP15EspressoNetworkP15EspressoContextPfPK13vImage_BufferiS3_PK12VimageParamsb_block_invoke(uint64_t a1, void **a2)
{
  Espresso::fill_network_with_image_batch_safe_v2(a2, (uint64_t *)(a1 + 56), *(_OWORD **)(a1 + 72), *(unsigned int *)(a1 + 168), *(void *)(*(void *)(a1 + 32) + 8) + 48, (__n128 *)(a1 + 80));
  if (*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 128)
  {
    Espresso::dropout_augment_lowmem::__forward(*(int **)(a1 + 160), (uint64_t *)a2, (uint64_t)&v9);
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    long long v5 = v9;
    long long v9 = 0uLL;
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 56);
    *(_OWORD *)(v4 + 48) = v5;
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    long long v7 = v10;
    long long v10 = 0uLL;
    uint64_t v8 = *(std::__shared_weak_count **)(v4 + 72);
    *(_OWORD *)(v4 + 64) = v7;
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      if (*((void *)&v10 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    if (*((void *)&v9 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
}

void sub_192AA9F4C(void *a1)
{
  __cxa_begin_catch(a1);
  *(void *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = 3708;
  __cxa_end_catch();
  JUMPOUT(0x192AA9EC8);
}

void std::__shared_ptr_emplace<Espresso::dropout_augment_lowmem>::__on_zero_shared(uint64_t a1)
{
  uint64_t v8 = (void **)(a1 + 160);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 120);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 64);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    long long v7 = *(void **)(a1 + 32);
    operator delete(v7);
  }
}

void std::__shared_ptr_emplace<Espresso::dropout_augment_lowmem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3877A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::dropout_augment_lowmem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3877A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void espresso_vision_shape_network(EspressoNetwork *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  long long v9 = a1;
  long long v10 = v9;
  if (v9)
  {
    [(EspressoNetwork *)v9 net];
  }
  else
  {
    uint64_t v19 = 0;
    long long v20 = 0;
  }
  uint64_t v18 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v16 = 0u;
  *(void *)&long long v14 = __PAIR64__(a3, a2);
  *((void *)&v14 + 1) = __PAIR64__(a5, a4);
  unint64_t v15 = 0xFFFFFFFF00000001;
  Espresso::compute_network_shape_starting_from_data_shape(&v19, &v14, (uint64_t)v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v10)
  {
    [(EspressoNetwork *)v10 net];
    uint64_t v11 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    BOOL v13 = 0;
  }
  Espresso::shape_network_recursive(v11, (Espresso::net *)v21, 0, 0);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v23, v23[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v21, v22);
}

void sub_192AAA190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21)
{
  Espresso::network_shape::~network_shape(&a21);

  _Unwind_Resume(a1);
}

uint64_t espresso_vision_classify_descriptor_handler(void *a1, const void *a2, size_t a3)
{
  void (***v16)(uint64_t *__return_ptr, void);
  void *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void (***v23)(uint64_t *__return_ptr, void);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *exception;
  void *v31;
  void *v32;
  void v33[2];
  void v34[5];
  void v35[6];
  void v36[2];
  void v37[5];
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  id v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    uint64_t v40 = 0;
    int v41 = 0;
LABEL_35:
    syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -24, "-", "EspressoVisionBlob espresso_vision_classify_descriptor_handler(EspressoNetwork *__strong, EspressoVisionBlob)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 387);
    exception = __cxa_allocate_exception(8uLL);
    std::runtime_error *exception = 3944;
    __cxa_throw(exception, MEMORY[0x1E4FBA3E0], 0);
  }
  [v5 net];
  uint64_t v7 = v40;
  if (!v40) {
    goto LABEL_35;
  }
  uint64_t v8 = *(void *)(**(void **)(v40 + 32) + 80);
  long long v10 = *(_DWORD **)v8;
  long long v9 = *(std::__shared_weak_count **)(v8 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = v10[2];
  int v12 = v10[3];
  int v13 = v10[4];
  int v14 = v10[5];
  if (*(unsigned char *)(v40 + 180))
  {
    *(unsigned char *)(v40 + 180) = 0;
    Espresso::shape_network_recursive((Espresso *)v7, (Espresso::net *)(v7 + 184), 0, 0);
    *(unsigned char *)(v7 + 180) = 0;
    uint64_t v7 = v40;
  }
  uint64_t v15 = v12 * v11 * v13 * v14;
  if (*(_DWORD *)(**(void **)(v7 + 32) + 8))
  {
    if (a3 != 4 * v15)
    {
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -4, "-", "EspressoVisionBlob espresso_vision_classify_descriptor_handler(EspressoNetwork *__strong, EspressoVisionBlob)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 418);
      int v31 = __cxa_allocate_exception(8uLL);
      void *v31 = 3964;
      __cxa_throw(v31, MEMORY[0x1E4FBA3E0], 0);
    }
    v36[0] = v10;
    v36[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 3221225472;
    v35[2] = ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke_2;
    v35[3] = &__block_descriptor_48_e70_v24__0_shared_ptr_Espresso::blob_float__4____v____shared_weak_count__8l;
    v35[4] = a2;
    v35[5] = a3;
    Espresso::sync_copy_from_host(v36, v35);
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    long long v16 = *(void (****)(uint64_t *__return_ptr, void))(v40 + 16);
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke_3;
    v34[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v34[4] = &v40;
    Espresso::abstract_context::compute_batch_sync(v16, v34);
    char v17 = *(void **)(*(void *)(*(void *)(v40 + 40) - 16) + 104);
    uint64_t v18 = (std::__shared_weak_count *)v17[1];
    v33[0] = *v17;
    v33[1] = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::sync_copy_to_host(&v38, v33);
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    uint64_t v19 = 0;
    long long v20 = *(void *)(v38 + 24);
    long long v21 = *(int *)(v38 + 8);
    do
    {
      v21 *= *(int *)(v38 + 12 + v19);
      v19 += 4;
    }
    while (v19 != 12);
    int v22 = v39;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v38, v10, v9);
    if (a3 != 4 * v15)
    {
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -4, "-", "EspressoVisionBlob espresso_vision_classify_descriptor_handler(EspressoNetwork *__strong, EspressoVisionBlob)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 401);
      unint64_t v32 = __cxa_allocate_exception(8uLL);
      unsigned __int8 *v32 = 3964;
      __cxa_throw(v32, MEMORY[0x1E4FBA3E0], 0);
    }
    memcpy(*(void **)(v38 + 24), a2, a3);
    uint64_t v23 = *(void (****)(uint64_t *__return_ptr, void))(v40 + 16);
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke;
    v37[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v37[4] = &v40;
    Espresso::abstract_context::compute_batch_sync(v23, v37);
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
    std::string v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)(*(void *)(*(void *)(v40 + 40) - 16) + 104), *(void *)(*(void *)(*(void *)(v40 + 40) - 16) + 112), 0);
    uint64_t v25 = *((void *)v24 + 20);
    int v22 = (std::__shared_weak_count *)*((void *)v24 + 21);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = 0;
    long long v20 = *(void *)(v25 + 24);
    uint64_t v27 = *(int *)(v25 + 8);
    uint64_t v28 = v25 + 12;
    do
    {
      v27 *= *(int *)(v28 + v26);
      v26 += 4;
    }
    while (v26 != 12);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }

  return v20;
}

void sub_192AAA640(_Unwind_Exception *a1)
{
  id v5 = *(std::__shared_weak_count **)(v3 - 128);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v3 - 112);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }

  _Unwind_Resume(a1);
}

void ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke(uint64_t a1, void *a2)
{
}

void *___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return memcpy(*(void **)(*(void *)a2 + 24), *(const void **)(a1 + 32), *(void *)(a1 + 40));
}

void ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke_3(uint64_t a1, void *a2)
{
}

id espresso_vision_classify_descriptor_handler_nsdata(EspressoNetwork *a1, NSData *a2)
{
  void (***v14)(uint64_t *__return_ptr, void);
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (***v23)(uint64_t *__return_ptr, void);
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *exception;
  void *v33;
  void *v34;
  void v35[2];
  void v36[5];
  void v37[4];
  NSData *v38;
  void v39[2];
  void v40[5];
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t vars8;

  uint64_t v3 = a1;
  uint64_t v4 = a2;
  if (!v3)
  {
    int v43 = 0;
    uint64_t v44 = 0;
LABEL_39:
    syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -24, "-", "NSData *espresso_vision_classify_descriptor_handler_nsdata(EspressoNetwork *__strong, NSData *__strong)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 439);
    exception = __cxa_allocate_exception(8uLL);
    std::runtime_error *exception = 3944;
    __cxa_throw(exception, MEMORY[0x1E4FBA3E0], 0);
  }
  [(EspressoNetwork *)v3 net];
  uint64_t v5 = v43;
  if (!v43) {
    goto LABEL_39;
  }
  uint64_t v6 = *(void *)(**(void **)(v43 + 32) + 80);
  uint64_t v8 = *(_DWORD **)v6;
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = v8[2];
  int v10 = v8[3];
  int v11 = v8[4];
  int v12 = v8[5];
  if (*(unsigned char *)(v43 + 180))
  {
    *(unsigned char *)(v43 + 180) = 0;
    Espresso::shape_network_recursive((Espresso *)v5, (Espresso::net *)(v5 + 184), 0, 0);
    *(unsigned char *)(v5 + 180) = 0;
    uint64_t v5 = v43;
  }
  uint64_t v13 = v10 * v9 * v11 * v12;
  if (*(_DWORD *)(**(void **)(v5 + 32) + 8))
  {
    if ([(NSData *)v4 length] != 4 * v13)
    {
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -4, "-", "NSData *espresso_vision_classify_descriptor_handler_nsdata(EspressoNetwork *__strong, NSData *__strong)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 471);
      uint64_t v33 = __cxa_allocate_exception(8uLL);
      *uint64_t v33 = 3964;
      __cxa_throw(v33, MEMORY[0x1E4FBA3E0], 0);
    }
    v39[0] = v8;
    v39[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke_2;
    v37[3] = &unk_1E57476A8;
    uint64_t v38 = v4;
    Espresso::sync_copy_from_host(v39, v37);
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    int v14 = *(void (****)(uint64_t *__return_ptr, void))(v43 + 16);
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    v36[2] = ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke_3;
    v36[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v36[4] = &v43;
    Espresso::abstract_context::compute_batch_sync(v14, v36);
    uint64_t v15 = *(void **)(*(void *)(*(void *)(v43 + 40) - 16) + 104);
    long long v16 = (std::__shared_weak_count *)v15[1];
    v35[0] = *v15;
    v35[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::sync_copy_to_host(&v41, v35);
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    char v17 = 0;
    uint64_t v18 = v41;
    *(unsigned char *)(v41 + 32) = 0;
    uint64_t v19 = *(void *)(v18 + 24);
    long long v20 = *(int *)(v18 + 8);
    long long v21 = v18 + 12;
    do
    {
      v20 *= *(int *)(v21 + v17);
      v17 += 4;
    }
    while (v17 != 12);
    int v22 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:v19 length:4 * v20 freeWhenDone:1];
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v41, v8, v7);
    if ([(NSData *)v4 length] != 4 * v13)
    {
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -4, "-", "NSData *espresso_vision_classify_descriptor_handler_nsdata(EspressoNetwork *__strong, NSData *__strong)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 453);
      unint64_t v34 = __cxa_allocate_exception(8uLL);
      *unint64_t v34 = 3964;
      __cxa_throw(v34, MEMORY[0x1E4FBA3E0], 0);
    }
    [(NSData *)v4 getBytes:*(void *)(v41 + 24) length:[(NSData *)v4 length]];
    uint64_t v23 = *(void (****)(uint64_t *__return_ptr, void))(v43 + 16);
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    v40[2] = ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke;
    v40[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v40[4] = &v43;
    Espresso::abstract_context::compute_batch_sync(v23, v40);
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    std::string v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)(*(void *)(*(void *)(v43 + 40) - 16) + 104), *(void *)(*(void *)(*(void *)(v43 + 40) - 16) + 112), 0);
    uint64_t v25 = *((void *)v24 + 20);
    uint64_t v26 = (std::__shared_weak_count *)*((void *)v24 + 21);
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(v25 + 24);
    uint64_t v29 = *(int *)(v25 + 8);
    uint64_t v30 = v25 + 12;
    do
    {
      v29 *= *(int *)(v30 + v27);
      v27 += 4;
    }
    while (v27 != 12);
    int v22 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v28 length:4 * v29];
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }

  return v22;
}

void sub_192AAABD0(_Unwind_Exception *a1)
{
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v5 - 104);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  _Unwind_Resume(a1);
}

void ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke(uint64_t a1, void *a2)
{
}

uint64_t ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)a2 + 24);
  uint64_t v4 = [v2 length];

  return [v2 getBytes:v3 length:v4];
}

void ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke_3(uint64_t a1, void *a2)
{
}

BOOL espresso_vision_util_update_metal_priority(EspressoContext *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    int v11 = 0;
    goto LABEL_9;
  }
  [(EspressoContext *)v5 ctx];
  if (!lpsrc)
  {
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  if (!v7)
  {
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_9:
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v7 && (*((unsigned __int8 *)v7 + 172) != a2 || v7[22] != a3)) {
    (*(void (**)(void *, uint64_t, uint64_t, float))(*v7 + 16))(v7, a2, a3, 4.0);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }

  return v7 != 0;
}

void sub_192AAAE4C(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  _Unwind_Resume(a1);
}

float espresso_vision_compute_pupil_position(EspressoNetwork *a1, vImage_Buffer *a2, const float *a3)
{
  void (***v21)(uint64_t *__return_ptr, void);
  float v22;
  void v24[5];
  uint64_t v25;
  std::__shared_weak_count *v26;

  uint64_t v5 = a1;
  [(EspressoNetwork *)v5 net];
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)(**(void **)(v25 + 32) + 80), *(void *)(**(void **)(v25 + 32) + 88), 0);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 20);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 21);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  int v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)(*(void *)(*(void *)(v25 + 40) - 16) + 104), *(void *)(*(void *)(*(void *)(v25 + 40) - 16) + 112), 0);
  if (v9)
  {
    uint64_t v11 = *((void *)v9 + 20);
    int v10 = (std::__shared_weak_count *)*((void *)v9 + 21);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    int v10 = 0;
  }
  uint64_t v12 = *(unsigned int *)(v8 + 12);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    uint64_t v16 = *(unsigned int *)(v8 + 8);
    do
    {
      if ((int)v16 >= 1)
      {
        uint64_t v15 = (int)v15;
        char v17 = (float *)(*(void *)(v8 + 24) + v13);
        uint64_t v18 = (unsigned __int8 *)a2->data + a2->rowBytes * v14;
        uint64_t v19 = v16;
        do
        {
          unsigned int v20 = *v18++;
          *v17++ = (float)((float)v20 - a3[v15]) / a3[v15 + 2304];
          ++v15;
          --v19;
        }
        while (v19);
      }
      ++v14;
      v13 += 4 * v12;
    }
    while (v14 != v12);
  }
  long long v21 = *(void (****)(uint64_t *__return_ptr, void))(v25 + 16);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  uint64_t v24[2] = ___Z38espresso_vision_compute_pupil_positionP15EspressoNetworkP13vImage_BufferPKf_block_invoke;
  v24[3] = &__block_descriptor_40_e10_v16__0r_v8l;
  v24[4] = &v25;
  Espresso::abstract_context::compute_batch_sync(v21, v24);
  int v22 = **(float **)(v11 + 24);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }

  return v22;
}

void sub_192AAB05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }

  _Unwind_Resume(a1);
}

void ___Z38espresso_vision_compute_pupil_positionP15EspressoNetworkP13vImage_BufferPKf_block_invoke(uint64_t a1, void *a2)
{
}

void sub_192AAB11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *Espresso::zephyr_passes::fuse_conv_batchnorm(void *this, Espresso::zephyr::function_t *a2)
{
  *(void *)&long long v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)this[9];
  for (uint64_t i = this + 8; v2 != i; v2 = (void *)v2[1])
  {
    uint64_t v3 = v2[2];
    v14[0] = &unk_1EE377D08;
    v14[1] = fuse_batchnorm_tx<Espresso::generic_convolution_kernel>;
    _OWORD v14[3] = v14;
    std::string::basic_string[abi:ne180100]<0>(&v15, "convolution");
    std::string::basic_string[abi:ne180100]<0>(v16, "batchnorm");
    uint64_t v8 = 0;
    int v9 = 0;
    int v10 = 0;
    uint64_t v11 = &v8;
    char v12 = 0;
    uint64_t v8 = (std::string *)operator new(0x30uLL);
    int v9 = v8;
    int v10 = v8 + 2;
    uint64_t v4 = 0;
    int v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v10, &v15, &v17, v8);
    do
    {
      if (SHIBYTE(v16[v4 + 2]) < 0) {
        operator delete((void *)v16[v4]);
      }
      v4 -= 3;
    }
    while (v4 != -6);
    *(void *)&long long v15 = &unk_1EE37DCF0;
    *((void *)&v15 + 1) = v14;
    v16[0] = &v15;
    Espresso::zephyr::match_kernel_chain(v3, (uint64_t *)&v8, &v15);
    std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v15);
    uint64_t v11 = &v8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::~__value_func[abi:ne180100](v14);
    uint64_t v5 = v2[2];
    v13[0] = &unk_1EE377DB8;
    v13[1] = fuse_batchnorm_tx<Espresso::generic_deconvolution_kernel>;
    _OWORD v13[3] = v13;
    std::string::basic_string[abi:ne180100]<0>(&v15, "deconvolution");
    std::string::basic_string[abi:ne180100]<0>(v16, "batchnorm");
    uint64_t v8 = 0;
    int v9 = 0;
    int v10 = 0;
    uint64_t v11 = &v8;
    char v12 = 0;
    uint64_t v8 = (std::string *)operator new(0x30uLL);
    int v9 = v8;
    int v10 = v8 + 2;
    uint64_t v6 = 0;
    int v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v10, &v15, &v17, v8);
    do
    {
      if (SHIBYTE(v16[v6 + 2]) < 0) {
        operator delete((void *)v16[v6]);
      }
      v6 -= 3;
    }
    while (v6 != -6);
    *(void *)&long long v15 = &unk_1EE37DDF8;
    *((void *)&v15 + 1) = v13;
    v16[0] = &v15;
    Espresso::zephyr::match_kernel_chain(v5, (uint64_t *)&v8, &v15);
    std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v15);
    uint64_t v11 = &v8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    this = std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::~__value_func[abi:ne180100](v13);
  }
  return this;
}

void sub_192AAB3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  a15 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::~__value_func[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_28generic_deconvolution_kernelENS_24generic_batchnorm_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_batchnorm_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DDF8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37DDF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"PFbN8Espresso6zephyr19match_kernel_info_tINS_28generic_deconvolution_kernelEEENS1_INS_24generic_batchnorm_kernelEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void, void))(a1 + 8))(*a2, a2[1], *a3, a3[1]);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377DB8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE377DB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::~__func()
{
}

uint64_t fuse_batchnorm_tx<Espresso::generic_deconvolution_kernel>(char *a1, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if ((Espresso::zephyr::match_standalone_conv((Espresso::zephyr *)a1, a2) & 1) == 0)
  {
    uint64_t matched = Espresso::zephyr::match_standalone_deconv((Espresso::zephyr *)a1, v8);
    if ((matched & 1) == 0)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v13 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v10);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 347;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "match_standalone_conv(conv.node, true) || match_standalone_deconv(conv.node, true)";
          _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_26;
      }
      return 0;
    }
  }
  uint64_t v11 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 384))(a4);
  if (*((_DWORD *)v11 + 1))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v11, v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 348;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "bn.kernel->get_params().training == 0";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_26:

      return 0;
    }
    return 0;
  }
  uint64_t v14 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 384))(a4);
  if (*((_DWORD *)v14 + 7))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v14, v15);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 349;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "bn.kernel->get_params().fused_relu == 0";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  uint64_t v16 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 384))(a4);
  if (*((_DWORD *)v16 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v16, v17);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 350;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "bn.kernel->get_params().fused_tanh == 0";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  uint64_t v18 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 384))(a4);
  if (*((_DWORD *)v18 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v18, v19);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 351;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "bn.kernel->get_params().training_instancenorm == 0";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  long long v21 = (int *)Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>((uint64_t)a1);
  uint64_t v23 = v21;
  if (v21)
  {
    long long v21 = (int *)(*(uint64_t (**)(int *))(*(void *)v21 + 384))(v21);
    if (v21[29] >= 2)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v13 = Espresso::espresso_os_log_subsystem((Espresso *)v21, v22);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 354;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "!deconv_kernel || deconv_kernel->get_params().n_groups <= 1";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
  }
  std::string v24 = Espresso::espresso_os_log_subsystem((Espresso *)v21, v22);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    int v50 = a1 + 144;
    if (a1[167] < 0) {
      int v50 = (void *)*v50;
    }
    uint64_t v51 = (*(uint64_t (**)(Espresso::zephyr::node_t *))(*(void *)a2 + 272))(a2);
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v50;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v51;
    _os_log_debug_impl(&dword_1920CB000, v24, OS_LOG_TYPE_DEBUG, "fuse_conv_batchnorm: %s kernel_type=%s", buf, 0x16u);
  }

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 408))(&v65, a4);
  Espresso::blob<float,1>::make(&v63, *(_DWORD *)(v65 + 8));
  uint64_t v25 = v63;
  memcpy(*(void **)(v63 + 16), *(const void **)(v65 + 16), 4 * *(int *)(v65 + 8));
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 448))(&v61, a2);
  if (v61)
  {
    uint64_t v26 = 0;
    for (uint64_t i = 0;
          i < *(int *)((*(uint64_t (**)(Espresso::zephyr::node_t *))(*(void *)a2 + 384))(a2) + 40);
          ++i)
    {
      unint64_t v28 = (16 * (((unint64_t)(v26 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 8;
      *(float *)(*(void *)(v25 + 16) + v28) = *(float *)(*(void *)(v65 + 16) + v28)
                                              - *(float *)(*(void *)(v61 + 16) + v26);
      v26 += 4;
    }
  }
  Espresso::scoped_conv_weight_dequantizer::scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v60, a2);
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 488))(&v58, a2);
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 472))(&v56, a2);
  uint64_t v29 = *(uint64_t (**)(Espresso::zephyr::node_t *))(*(void *)a2 + 384);
  if (v23)
  {
    uint64_t v30 = *(unsigned int *)(v29(a2) + 40);
    int v31 = *(_DWORD *)(v56 + 8);
    int v32 = *(_DWORD *)(v56 + 12);
    int v33 = *(_DWORD *)(v56 + 20);
    (*(void (**)(unsigned char *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 456))(buf, a2);
    int v35 = v32 * v31;
    uint64_t v36 = *(void *)(*(void *)buf + 24);
    unint64_t v37 = *(const float **)(v56 + 24);
    uint64_t v38 = *(float **)(v25 + 16);
    int v39 = *(const float **)(v58 + 16);
    uint64_t v40 = v30;
    int v41 = v33;
  }
  else
  {
    uint64_t v42 = *(unsigned int *)(v29(a2) + 40);
    int v43 = *(_DWORD *)(v56 + 8);
    int v44 = *(_DWORD *)(v56 + 12);
    int v45 = *(_DWORD *)(v56 + 16);
    (*(void (**)(unsigned char *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 456))(buf, a2);
    int v35 = v44 * v43 * v45;
    uint64_t v36 = *(void *)(*(void *)buf + 24);
    unint64_t v37 = *(const float **)(v56 + 24);
    uint64_t v38 = *(float **)(v25 + 16);
    int v39 = *(const float **)(v58 + 16);
    uint64_t v40 = v42;
    int v41 = 1;
  }
  Espresso::util_bake_batchnorm_generic(v40, v35, v41, v36, v37, v38, v39, v34);
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v54 = v56;
  int v55 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(Espresso::zephyr::node_t *, uint64_t *))(*(void *)a2 + 400))(a2, &v54);
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  uint64_t v52 = v58;
  int v53 = v59;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(Espresso::zephyr::node_t *, uint64_t *))(*(void *)a2 + 392))(a2, &v52);
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  uint64_t v46 = (Espresso::zephyr::value_t **)*((void *)a3 + 12);
  if (*((Espresso::zephyr::value_t ***)a3 + 13) == v46) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at((uint64_t)a1, 0, *v46);
  unint64_t v47 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(a3);
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v49 = Espresso::espresso_os_log_subsystem(v47, v48);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_"
                           "simple_fusions.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 405;
      _os_log_impl(&dword_1920CB000, v49, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v60);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  return 1;
}

void sub_192AAC298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)&a17);
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  _Unwind_Resume(a1);
}

Espresso::scoped_conv_weight_dequantizer *Espresso::scoped_conv_weight_dequantizer::scoped_conv_weight_dequantizer(Espresso::scoped_conv_weight_dequantizer *this, Espresso::generic_convolution_kernel *a2)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = a2;
  (*(void (**)(vImage_Buffer *__return_ptr, Espresso::generic_convolution_kernel *))(*(void *)a2 + 456))(&src, a2);
  BOOL v3 = 0;
  if (!src.data)
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(**((void **)this + 1) + 552))(&dest);
    BOOL v3 = dest.data != 0;
    if (dest.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.height);
    }
  }
  if (src.height) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
  }
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 472))(&v16);
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 552))(&v14);
    uint64_t v4 = 0;
    uint64_t v5 = *(void **)(v16 + 24);
    vImagePixelCount v6 = *(int *)(v16 + 8);
    do
    {
      v6 *= *(int *)(v16 + 12 + v4);
      v4 += 4;
    }
    while (v4 != 12);
    src.data = *(void **)(v14 + 24);
    src.height = 1;
    src.width = v6;
    src.rowBytes = 2 * v6;
    dest.data = v5;
    dest.height = 1;
    dest.width = v6;
    dest.rowBytes = 4 * v6;
    vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    uint64_t v7 = *((void *)this + 1);
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 400))(v7, &v12);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    uint64_t v8 = *((void *)this + 1);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    src.data = 0;
    src.height = 0;
    (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *))(*(void *)v8 + 544))(v8, &v10, &src);
    if (src.height) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    *(unsigned char *)this = 1;
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  return this;
}

void sub_192AAC5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer(Espresso::scoped_conv_weight_dequantizer *this)
{
  if (*(unsigned char *)this)
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 456))(&v20);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v22, v20 + 8);
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 456))(&v20);
    uint64_t v2 = *(int **)(v20 + 24);
    uint64_t v3 = v22;
    uint64_t v4 = *(_WORD **)(v22 + 24);
    uint64_t v5 = *(int *)(v22 + 8);
    for (uint64_t i = 12; i != 24; i += 4)
      v5 *= *(int *)(v22 + i);
    for (; v5; --v5)
    {
      int v7 = *v2++;
      _S0 = v7;
      __asm { FCVT            H0, S0 }
      *v4++ = _S0;
    }
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    uint64_t v13 = *((void *)this + 1);
    uint64_t v14 = v23;
    uint64_t v18 = v3;
    uint64_t v19 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = 0;
    long long v21 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v13 + 544))(v13, &v18, &v20);
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    uint64_t v15 = *((void *)this + 1);
    uint64_t v16 = 0;
    long long v17 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 400))(v15, &v16);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_26generic_convolution_kernelENS_24generic_batchnorm_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_batchnorm_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DCF0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37DCF0;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

uint64_t fuse_batchnorm_tx<Espresso::generic_convolution_kernel>(char *a1, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3, uint64_t a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if ((Espresso::zephyr::match_standalone_conv((Espresso::zephyr *)a1, a2) & 1) == 0)
  {
    uint64_t matched = Espresso::zephyr::match_standalone_deconv((Espresso::zephyr *)a1, v8);
    if ((matched & 1) == 0)
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v13 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v10);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 347;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = "match_standalone_conv(conv.node, true) || match_standalone_deconv(conv.node, true)";
          _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_26;
      }
      return 0;
    }
  }
  uint64_t v11 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 384))(a4);
  if (*((_DWORD *)v11 + 1))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v11, v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 348;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "bn.kernel->get_params().training == 0";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_26:

      return 0;
    }
    return 0;
  }
  uint64_t v14 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 384))(a4);
  if (*((_DWORD *)v14 + 7))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v14, v15);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 349;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "bn.kernel->get_params().fused_relu == 0";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  uint64_t v16 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 384))(a4);
  if (*((_DWORD *)v16 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v16, v17);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 350;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "bn.kernel->get_params().fused_tanh == 0";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  uint64_t v18 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 384))(a4);
  if (*((_DWORD *)v18 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v13 = Espresso::espresso_os_log_subsystem(v18, v19);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 351;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "bn.kernel->get_params().training_instancenorm == 0";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  long long v21 = (int *)Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>((uint64_t)a1);
  uint64_t v23 = v21;
  if (v21)
  {
    long long v21 = (int *)(*(uint64_t (**)(int *))(*(void *)v21 + 384))(v21);
    if (v21[29] >= 2)
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      uint64_t v13 = Espresso::espresso_os_log_subsystem((Espresso *)v21, v22);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 354;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "!deconv_kernel || deconv_kernel->get_params().n_groups <= 1";
        _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
  }
  std::string v24 = Espresso::espresso_os_log_subsystem((Espresso *)v21, v22);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    int v50 = a1 + 144;
    if (a1[167] < 0) {
      int v50 = (void *)*v50;
    }
    uint64_t v51 = (*(uint64_t (**)(Espresso::zephyr::node_t *))(*(void *)a2 + 272))(a2);
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v50;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v51;
    _os_log_debug_impl(&dword_1920CB000, v24, OS_LOG_TYPE_DEBUG, "fuse_conv_batchnorm: %s kernel_type=%s", buf, 0x16u);
  }

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 408))(&v65, a4);
  Espresso::blob<float,1>::make(&v63, *(_DWORD *)(v65 + 8));
  uint64_t v25 = v63;
  memcpy(*(void **)(v63 + 16), *(const void **)(v65 + 16), 4 * *(int *)(v65 + 8));
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 448))(&v61, a2);
  if (v61)
  {
    uint64_t v26 = 0;
    for (uint64_t i = 0;
          i < *(int *)((*(uint64_t (**)(Espresso::zephyr::node_t *))(*(void *)a2 + 384))(a2) + 40);
          ++i)
    {
      unint64_t v28 = (16 * (((unint64_t)(v26 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 8;
      *(float *)(*(void *)(v25 + 16) + v28) = *(float *)(*(void *)(v65 + 16) + v28)
                                              - *(float *)(*(void *)(v61 + 16) + v26);
      v26 += 4;
    }
  }
  Espresso::scoped_conv_weight_dequantizer::scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v60, a2);
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 488))(&v58, a2);
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 472))(&v56, a2);
  uint64_t v29 = *(uint64_t (**)(Espresso::zephyr::node_t *))(*(void *)a2 + 384);
  if (v23)
  {
    uint64_t v30 = *(unsigned int *)(v29(a2) + 40);
    int v31 = *(_DWORD *)(v56 + 8);
    int v32 = *(_DWORD *)(v56 + 12);
    int v33 = *(_DWORD *)(v56 + 20);
    (*(void (**)(unsigned char *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 456))(buf, a2);
    int v35 = v32 * v31;
    uint64_t v36 = *(void *)(*(void *)buf + 24);
    unint64_t v37 = *(const float **)(v56 + 24);
    uint64_t v38 = *(float **)(v25 + 16);
    int v39 = *(const float **)(v58 + 16);
    uint64_t v40 = v30;
    int v41 = v33;
  }
  else
  {
    uint64_t v42 = *(unsigned int *)(v29(a2) + 40);
    int v43 = *(_DWORD *)(v56 + 8);
    int v44 = *(_DWORD *)(v56 + 12);
    int v45 = *(_DWORD *)(v56 + 16);
    (*(void (**)(unsigned char *__return_ptr, Espresso::zephyr::node_t *))(*(void *)a2 + 456))(buf, a2);
    int v35 = v44 * v43 * v45;
    uint64_t v36 = *(void *)(*(void *)buf + 24);
    unint64_t v37 = *(const float **)(v56 + 24);
    uint64_t v38 = *(float **)(v25 + 16);
    int v39 = *(const float **)(v58 + 16);
    uint64_t v40 = v42;
    int v41 = 1;
  }
  Espresso::util_bake_batchnorm_generic(v40, v35, v41, v36, v37, v38, v39, v34);
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v54 = v56;
  int v55 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(Espresso::zephyr::node_t *, uint64_t *))(*(void *)a2 + 400))(a2, &v54);
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  uint64_t v52 = v58;
  int v53 = v59;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(Espresso::zephyr::node_t *, uint64_t *))(*(void *)a2 + 392))(a2, &v52);
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  uint64_t v46 = (Espresso::zephyr::value_t **)*((void *)a3 + 12);
  if (*((Espresso::zephyr::value_t ***)a3 + 13) == v46) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at((uint64_t)a1, 0, *v46);
  unint64_t v47 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(a3);
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v49 = Espresso::espresso_os_log_subsystem(v47, v48);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_"
                           "simple_fusions.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 405;
      _os_log_impl(&dword_1920CB000, v49, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v60);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  return 1;
}

void sub_192AAD398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)&a17);
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"PFbN8Espresso6zephyr19match_kernel_info_tINS_26generic_convolution_kernelEEENS1_INS_24generic_batchnorm_kernelEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void, void))(a1 + 8))(*a2, a2[1], *a3, a3[1]);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377D08;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE377D08;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::~__func()
{
}

void sub_192AAD5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      uint64_t v6 = operator new(0x28uLL);
      *uint64_t v6 = &unk_1EE37B510;
      v6[1] = &v17;
      v6[2] = &v16;
      v6[3] = &v15;
      v6[4] = &v14;
      uint64_t v19 = v6;
      int v9 = *(void **)(v5 + 120);
      uint64_t v7 = (void *)(v5 + 120);
      uint64_t v8 = v9;
      if (v9 == v7 - 1)
      {
        char v10 = 0;
      }
      else
      {
        char v10 = 0;
        do
        {
          int v11 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v19, v8[2]);
          uint64_t v12 = v8 + 1;
          if (v11) {
            uint64_t v12 = v7;
          }
          v10 |= v11;
          uint64_t v8 = (void *)*v12;
        }
        while ((void *)*v12 != v7 - 1);
      }
      v4 |= v10;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v18);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192AAD6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, void **a2)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  v14[0] = &unk_1EE37B3B0;
  _OWORD v14[3] = v14;
  v13[0] = &unk_1EE37B408;
  _OWORD v13[3] = v13;
  int matched = match_transform_affine_addmul_biaslike(v2, 1u, 1u, (uint64_t)v14, (uint64_t)v13);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v14);
  v12[0] = &unk_1EE37B460;
  v12[3] = v12;
  v11[0] = &unk_1EE37B4B8;
  void v11[3] = v11;
  int v4 = match_transform_affine_addmul_biaslike(v2, 1u, 1u, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v12);
  v10[0] = &unk_1EE37B3B0;
  void v10[3] = v10;
  v9[0] = &unk_1EE37B408;
  v9[3] = v9;
  int v5 = match_transform_affine_addmul_scalar(v2, 3, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v10);
  v8[0] = &unk_1EE37B460;
  v8[3] = v8;
  v7[0] = &unk_1EE37B4B8;
  void v7[3] = v7;
  LODWORD(v2) = match_transform_affine_addmul_scalar(v2, 3, (uint64_t)v8, (uint64_t)v7);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v8);
  return matched | v4 | v5 | v2;
}

void sub_192AAD990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](va1);
  _Unwind_Resume(a1);
}

uint64_t match_transform_affine_addmul_biaslike(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unint64_t v34 = 0;
  int v35 = a1;
  int v33 = 0;
  uint64_t v9 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()(a4, (uint64_t)a1);
  if ((v9 & 1) == 0)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_54;
    }
    uint64_t v30 = Espresso::espresso_os_log_subsystem((Espresso *)v9, v10);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v38 = 1024;
    int v39 = 135;
    __int16 v40 = 2080;
    int v41 = "match_affine(root)";
LABEL_51:
    _os_log_impl(&dword_1920CB000, v30, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    goto LABEL_52;
  }
  if (a1[16] - a1[15] != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_54;
    }
    uint64_t v30 = Espresso::espresso_os_log_subsystem((Espresso *)v9, v10);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v38 = 1024;
    int v39 = 137;
    __int16 v40 = 2080;
    int v41 = "root->inputs().size() == 1";
    goto LABEL_51;
  }
  int v11 = (char *)a1[12];
  uint64_t v12 = (char *)a1[13];
  if (v12 - v11 != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_54;
    }
    uint64_t v30 = Espresso::espresso_os_log_subsystem((Espresso *)v9, v10);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v38 = 1024;
    int v39 = 138;
    __int16 v40 = 2080;
    int v41 = "root->outputs().size() == 1";
    goto LABEL_51;
  }
  if (v12 == v11) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v14 = *(void *)v11 + 56;
  uint64_t v13 = *(uint64_t **)v14;
  if (*(void *)(v14 + 8) - *(void *)v14 != 16)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_54;
    }
    uint64_t v30 = Espresso::espresso_os_log_subsystem((Espresso *)v9, v10);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v38 = 1024;
    int v39 = 139;
    __int16 v40 = 2080;
    int v41 = "root->output()->uses().size() == 1";
    goto LABEL_51;
  }
  char v15 = (Espresso::zephyr::node_t *)*v13;
  unint64_t matched = (unint64_t)Espresso::zephyr::match_simple_eltwise_binop(*v13, a2);
  unint64_t v18 = matched;
  if (a2 == a3)
  {
    if (matched) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
  unint64_t matched = (unint64_t)Espresso::zephyr::match_simple_eltwise_binop((uint64_t)v15, a3);
  if (!(v18 | matched))
  {
LABEL_33:
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_54;
    }
    uint64_t v30 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v17);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v38 = 1024;
    int v39 = 145;
    __int16 v40 = 2080;
    int v41 = "elementwise_match";
    goto LABEL_51;
  }
LABEL_8:
  if (*((void *)v15 + 13) - *((void *)v15 + 12) != 8)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_54;
    }
    uint64_t v30 = Espresso::espresso_os_log_subsystem((Espresso *)matched, v17);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v38 = 1024;
    int v39 = 147;
    __int16 v40 = 2080;
    int v41 = "elementwise->outputs().size() == 1";
    goto LABEL_51;
  }
  uint64_t v19 = (Espresso *)*((void *)v15 + 15);
  uint64_t v20 = (const char *)*((void *)v15 + 16);
  if (v20 - (const char *)v19 != 16)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_54;
    }
    uint64_t v30 = Espresso::espresso_os_log_subsystem(v19, v20);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v38 = 1024;
    int v39 = 148;
    __int16 v40 = 2080;
    int v41 = "elementwise->inputs().size() == 2";
    goto LABEL_51;
  }
  long long v21 = (Espresso *)Espresso::zephyr::match_any_input_of<match_transform_affine_addmul_biaslike(Espresso::zephyr::node_t *,Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>)::$_0>((uint64_t)v19, (uint64_t)v20, &v33, (uint64_t)&v35);
  uint64_t v23 = v21;
  if (!v21)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_54;
    }
    uint64_t v30 = Espresso::espresso_os_log_subsystem(0, v22);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v38 = 1024;
    int v39 = 174;
    __int16 v40 = 2080;
    int v41 = "constant != nullptr";
    goto LABEL_51;
  }
  if (!v33)
  {
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_54;
    }
    uint64_t v30 = Espresso::espresso_os_log_subsystem(v21, v22);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v38 = 1024;
    int v39 = 176;
    __int16 v40 = 2080;
    int v41 = "_constant_blob != nullptr";
    goto LABEL_51;
  }
  uint64_t v24 = std::function<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(*(void *)(a5 + 24), (uint64_t)a1);
  if ((v24 & 1) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v30 = Espresso::espresso_os_log_subsystem((Espresso *)v24, v25);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v38 = 1024;
        int v39 = 178;
        __int16 v40 = 2080;
        int v41 = "transform_affine(affine, _constant_blob)";
        goto LABEL_51;
      }
LABEL_52:
      uint64_t v31 = 0;
LABEL_53:

      goto LABEL_55;
    }
LABEL_54:
    uint64_t v31 = 0;
    goto LABEL_55;
  }
  uint64_t v26 = (Espresso::zephyr::value_t **)*((void *)v15 + 12);
  if (*((Espresso::zephyr::value_t ***)v15 + 13) == v26
    || (Espresso::zephyr::node_t::replace_output_at((uint64_t)a1, 0, *v26),
        uint64_t v27 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v15),
        uint64_t v29 = *((void *)v23 + 12),
        *((void *)v23 + 13) == v29))
  {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if (*(void *)(*(void *)v29 + 56) == *(void *)(*(void *)v29 + 64)) {
    uint64_t v27 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v23);
  }
  if (Espresso::zephyr::match_verbose)
  {
    uint64_t v30 = Espresso::espresso_os_log_subsystem(v27, v28);
    uint64_t v31 = 1;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v38 = 1024;
      int v39 = 186;
      _os_log_impl(&dword_1920CB000, v30, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
    goto LABEL_53;
  }
  uint64_t v31 = 1;
LABEL_55:
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  return v31;
}

void sub_192AAE0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t match_transform_affine_addmul_scalar(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()(a3, (uint64_t)a1);
  if ((v7 & 1) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      unint64_t v28 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        int v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v34 = 1024;
        int v35 = 198;
        __int16 v36 = 2080;
        unint64_t v37 = "match_affine(root)";
        _os_log_impl(&dword_1920CB000, v28, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_41;
    }
    return 0;
  }
  if (a1[16] - a1[15] != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      unint64_t v28 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        int v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v34 = 1024;
        int v35 = 200;
        __int16 v36 = 2080;
        unint64_t v37 = "root->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v28, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_41;
    }
    return 0;
  }
  uint64_t v9 = (char *)a1[12];
  char v10 = (char *)a1[13];
  if (v10 - v9 != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      unint64_t v28 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        int v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v34 = 1024;
        int v35 = 201;
        __int16 v36 = 2080;
        unint64_t v37 = "root->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v28, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_41;
    }
    return 0;
  }
  if (v10 == v9) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v12 = *(void *)v9 + 56;
  int v11 = *(uint64_t **)v12;
  if (*(void *)(v12 + 8) - *(void *)v12 != 16)
  {
    if (Espresso::zephyr::match_verbose)
    {
      unint64_t v28 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        int v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v34 = 1024;
        int v35 = 202;
        __int16 v36 = 2080;
        unint64_t v37 = "root->output()->uses().size() == 1";
        _os_log_impl(&dword_1920CB000, v28, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_41;
    }
    return 0;
  }
  uint64_t v13 = (Espresso::zephyr::node_t *)*v11;
  unint64_t matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_unaryop(*v11, a2);
  if (!matched)
  {
    if (Espresso::zephyr::match_verbose)
    {
      unint64_t v28 = Espresso::espresso_os_log_subsystem(0, v15);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        int v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v34 = 1024;
        int v35 = 206;
        __int16 v36 = 2080;
        unint64_t v37 = "elementwise_match";
        _os_log_impl(&dword_1920CB000, v28, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_41;
    }
    return 0;
  }
  if (*((void *)v13 + 13) - *((void *)v13 + 12) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      unint64_t v28 = Espresso::espresso_os_log_subsystem(matched, v15);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        int v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v34 = 1024;
        int v35 = 207;
        __int16 v36 = 2080;
        unint64_t v37 = "elementwise->outputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v28, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_41;
    }
    return 0;
  }
  if (*((void *)v13 + 16) - *((void *)v13 + 15) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      unint64_t v28 = Espresso::espresso_os_log_subsystem(matched, v15);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        int v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v34 = 1024;
        int v35 = 208;
        __int16 v36 = 2080;
        unint64_t v37 = "elementwise->inputs().size() == 1";
        _os_log_impl(&dword_1920CB000, v28, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_41:

      return 0;
    }
    return 0;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v30, 1, 1, 1, 1);
  char v16 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>((uint64_t)v13);
  uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v16 + 320))(v16);
  **(_DWORD **)(v30 + 24) = *(_DWORD *)(v17 + 8);
  uint64_t v18 = std::function<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(*(void *)(a4 + 24), (uint64_t)a1);
  uint64_t v20 = v18;
  if (v18)
  {
    long long v21 = (Espresso::zephyr::value_t **)*((void *)v13 + 12);
    if (*((Espresso::zephyr::value_t ***)v13 + 13) == v21) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    Espresso::zephyr::node_t::replace_output_at((uint64_t)a1, 0, *v21);
    uint64_t v22 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v13);
    if (!Espresso::zephyr::match_verbose) {
      goto LABEL_49;
    }
    uint64_t v24 = Espresso::espresso_os_log_subsystem(v22, v23);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136315394;
    int v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v34 = 1024;
    int v35 = 217;
    uint64_t v25 = "ZEPHYR_MATCH_PASS %s:%d\n";
    uint64_t v26 = v24;
    uint32_t v27 = 18;
    goto LABEL_47;
  }
  if (!Espresso::zephyr::match_verbose) {
    goto LABEL_49;
  }
  uint64_t v24 = Espresso::espresso_os_log_subsystem((Espresso *)v18, v19);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v33 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v34 = 1024;
    int v35 = 212;
    __int16 v36 = 2080;
    unint64_t v37 = "transform_affine(affine, constant)";
    uint64_t v25 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
    uint64_t v26 = v24;
    uint32_t v27 = 28;
LABEL_47:
    _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, v25, buf, v27);
  }
LABEL_48:

LABEL_49:
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  return v20;
}

void sub_192AAE7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*a2);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 432))(&v30);
  (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v5 + 424))(&v28, v5);
  uint64_t v6 = (Espresso *)(*(void *(**)(uint64_t *__return_ptr, void *))(*(void *)v5 + 416))(&v26, v5);
  uint64_t v8 = 0;
  uint64_t v9 = *(int *)(*(void *)a3 + 8);
  uint64_t v10 = v9;
  do
  {
    v10 *= *(int *)(*(void *)a3 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (((v10 ^ *(int *)(v30 + 8)) & 0x3FFFFFFFFFFFFFFFLL) == 0) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != 12; i += 4)
    v9 *= *(int *)(*(void *)a3 + 12 + i);
  if (v9 != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v21 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 485;
        __int16 v33 = 2080;
        __int16 v34 = "biases->size() == constant->size() || constant->count() == 1";
        _os_log_impl(&dword_1920CB000, v21, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    uint64_t v20 = 0;
  }
  else
  {
LABEL_7:
    uint64_t v12 = Espresso::espresso_os_log_subsystem(v6, v7);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = (void *)(v4 + 144);
      if (*(char *)(v4 + 167) < 0) {
        uint64_t v23 = (void *)*v23;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_debug_impl(&dword_1920CB000, v12, OS_LOG_TYPE_DEBUG, "fuse_affine_scale: inner_product %s", buf, 0xCu);
    }

    uint64_t v13 = 0;
    uint64_t v14 = *(int *)(*(void *)a3 + 8);
    do
    {
      v14 *= *(int *)(*(void *)a3 + 12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    uint64_t v15 = *(int *)(v28 + 12);
    if (v15)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      vDSP_Length v18 = *(int *)(v28 + 8);
      do
      {
        if (v14 == 1) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = v17;
        }
        vDSP_vsmul((const float *)(*(void *)(v26 + 16) + v16), 1, (const float *)(*(void *)(*(void *)a3 + 24) + 4 * v19), (float *)(*(void *)(v28 + 16) + v16), 1, v18);
        ++v17;
        v16 += 4 * v18;
      }
      while (v15 != v17);
    }
    (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v5 + 408))(buf, v5);
    if (*(void *)buf) {
      vDSP_vmul(*(const float **)(*(void *)buf + 16), 1, *(const float **)(*(void *)a3 + 24), v14 != 1, *(float **)(v30 + 16), 1, *(int *)(v30 + 8));
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    *(void *)buf = v30;
    *(void *)&uint8_t buf[8] = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, unsigned char *))(*(void *)v5 + 392))(v5, buf);
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v24 = v28;
    uint64_t v25 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*(void *)v5 + 400))(v5, &v24);
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    uint64_t v20 = 1;
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  return v20;
}

void sub_192AAECD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37B4B8;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EE37B4B8;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*a2);
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v2 + 384))(v2);
    if (*((_DWORD *)v5 + 3))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v7 = Espresso::espresso_os_log_subsystem(v5, v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v12 = 136315650;
          *(void *)&void v12[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          *(_WORD *)&v12[12] = 1024;
          *(_DWORD *)&v12[14] = 472;
          __int16 v13 = 2080;
          uint64_t v14 = "p.has_relu == 0";
LABEL_17:
          _os_log_impl(&dword_1920CB000, v7, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v12, 0x1Cu);
          goto LABEL_18;
        }
        goto LABEL_18;
      }
    }
    else if (*((_DWORD *)v5 + 4))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v7 = Espresso::espresso_os_log_subsystem(v5, v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v12 = 136315650;
          *(void *)&void v12[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          *(_WORD *)&v12[12] = 1024;
          *(_DWORD *)&v12[14] = 473;
          __int16 v13 = 2080;
          uint64_t v14 = "p.has_tanh == 0";
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
    else if (*((_DWORD *)v5 + 13) == -1)
    {
      (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v4 + 416))(v12, v4);
      uint64_t v11 = *(void *)v12;
      uint64_t v10 = *(Espresso **)&v12[8];
      if (*(void *)&v12[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v12[8]);
      }
      if (v11) {
        return 1;
      }
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v7 = Espresso::espresso_os_log_subsystem(v10, v9);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
          goto LABEL_18;
        }
        *(_DWORD *)uint64_t v12 = 136315650;
        *(void *)&void v12[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&v12[12] = 1024;
        *(_DWORD *)&v12[14] = 475;
        __int16 v13 = 2080;
        uint64_t v14 = "k_ip->get_weights()";
        goto LABEL_17;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      uint64_t v7 = Espresso::espresso_os_log_subsystem(v5, v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v12 = 136315650;
        *(void *)&void v12[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&v12[12] = 1024;
        *(_DWORD *)&v12[14] = 474;
        __int16 v13 = 2080;
        uint64_t v14 = "p.fused_activation_mode == ACTIVATION_NONE";
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    uint64_t v7 = Espresso::espresso_os_log_subsystem(0, v3);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v12 = 136315650;
      *(void *)&void v12[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_"
                           "simple_fusions.mm";
      *(_WORD *)&v12[12] = 1024;
      *(_DWORD *)&v12[14] = 470;
      __int16 v13 = 2080;
      uint64_t v14 = "k_ip";
      goto LABEL_17;
    }
LABEL_18:
  }
  return 0;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37B460;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EE37B460;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

uint64_t Espresso::zephyr::match_any_input_of<match_transform_affine_addmul_biaslike(Espresso::zephyr::node_t *,Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>)::$_0>(uint64_t a1, uint64_t a2, int **a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    while (1)
    {
      if (!*(void *)v7) {
        goto LABEL_73;
      }
      uint64_t v8 = *(void *)(*(void *)v7 + 80);
      constant = (uint64_t *)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v8);
      if (!constant)
      {
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v24 = Espresso::espresso_os_log_subsystem(0, v10);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
            __int16 v37 = 1024;
            int v38 = 153;
            __int16 v39 = 2080;
            __int16 v40 = "k_const != nullptr";
            _os_log_impl(&dword_1920CB000, v24, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
        }
        goto LABEL_73;
      }
      uint64_t v11 = (Espresso *)Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v33, constant + 43);
      __int16 v13 = v33;
      if (v33) {
        break;
      }
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v25 = Espresso::espresso_os_log_subsystem(v11, v12);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          __int16 v37 = 1024;
          int v38 = 156;
          __int16 v39 = 2080;
          __int16 v40 = "constant_blob";
          _os_log_impl(&dword_1920CB000, v25, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
      }
      char v23 = 0;
LABEL_70:
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      if (v23) {
        return v8;
      }
LABEL_73:
      v7 += 8;
      if (v7 == a2) {
        return 0;
      }
    }
    uint64_t v14 = *(Espresso::zephyr::value_t ***)(*(void *)a4 + 96);
    if (*(Espresso::zephyr::value_t ***)(*(void *)a4 + 104) == v14) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v31, *v14);
    if (v31)
    {
      int v17 = v31[5];
      uint64_t v18 = v13[2];
      if (v17 == -1 || v17 >= 4)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v13[2];
        do
        {
          v28 *= v13[v27 + 3];
          ++v27;
        }
        while (v27 != 3);
        uint64_t v29 = (int)v31[2];
        if (v28 == v29)
        {
          if (v18 == 1)
          {
            if (v13[3] == 1)
            {
              if (v13[4] == v29)
              {
                if (v13[5] == 1)
                {
LABEL_14:
                  long long v21 = v34;
                  if (v34) {
                    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v22 = (std::__shared_weak_count *)a3[1];
                  *a3 = v13;
                  a3[1] = (int *)v21;
                  if (v22) {
                    nitro::nitro_function::nitro_function(v22);
                  }
                  char v23 = 1;
                  goto LABEL_68;
                }
                if (Espresso::zephyr::match_verbose)
                {
                  uint64_t v26 = Espresso::espresso_os_log_subsystem(v15, v16);
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 136315650;
                    __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_s"
                          "imple_fusions.mm";
                    __int16 v37 = 1024;
                    int v38 = 165;
                    __int16 v39 = 2080;
                    __int16 v40 = "constant_blob->dim[3] == 1";
                    _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                  }
                  goto LABEL_66;
                }
              }
              else if (Espresso::zephyr::match_verbose)
              {
                uint64_t v26 = Espresso::espresso_os_log_subsystem(v15, v16);
                if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315650;
                  __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                  __int16 v37 = 1024;
                  int v38 = 164;
                  __int16 v39 = 2080;
                  __int16 v40 = "constant_blob->dim[2] == shape_ptr->k";
                  _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                }
                goto LABEL_66;
              }
            }
            else if (Espresso::zephyr::match_verbose)
            {
              uint64_t v26 = Espresso::espresso_os_log_subsystem(v15, v16);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                __int16 v37 = 1024;
                int v38 = 163;
                __int16 v39 = 2080;
                __int16 v40 = "constant_blob->dim[1] == 1";
                _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_66;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            uint64_t v26 = Espresso::espresso_os_log_subsystem(v15, v16);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
              __int16 v37 = 1024;
              int v38 = 162;
              __int16 v39 = 2080;
              __int16 v40 = "constant_blob->dim[0] == 1";
              _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_66;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          uint64_t v26 = Espresso::espresso_os_log_subsystem(v15, v16);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
            __int16 v37 = 1024;
            int v38 = 161;
            __int16 v39 = 2080;
            __int16 v40 = "constant_blob->count() == shape_ptr->k";
            _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_66;
        }
      }
      else if (v18 == *v31)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v13[2];
        do
        {
          v20 *= v13[v19 + 3];
          ++v19;
        }
        while (v19 != 3);
        if (v20 == v18) {
          goto LABEL_14;
        }
        if (Espresso::zephyr::match_verbose)
        {
          uint64_t v26 = Espresso::espresso_os_log_subsystem(v15, v16);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
            __int16 v37 = 1024;
            int v38 = 168;
            __int16 v39 = 2080;
            __int16 v40 = "constant_blob->count() == shape_ptr->w";
            _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
LABEL_66:
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        uint64_t v26 = Espresso::espresso_os_log_subsystem(v15, v16);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          __int16 v37 = 1024;
          int v38 = 167;
          __int16 v39 = 2080;
          __int16 v40 = "constant_blob->dim[0] == shape_ptr->w";
          _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_66;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      uint64_t v26 = Espresso::espresso_os_log_subsystem(v15, v16);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v37 = 1024;
        int v38 = 158;
        __int16 v39 = 2080;
        __int16 v40 = "shape_ptr != nullptr";
        _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_66;
    }
    char v23 = 0;
LABEL_68:
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    goto LABEL_70;
  }
  return 0;
}

void sub_192AAF884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = (Espresso::generic_convolution_kernel *)Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(*a2);
  Espresso::scoped_conv_weight_dequantizer::scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v32, v5);
  (*(void (**)(uint64_t *__return_ptr, Espresso::generic_convolution_kernel *))(*(void *)v5 + 488))(&v30, v5);
  (*(void (**)(uint64_t *__return_ptr, Espresso::generic_convolution_kernel *))(*(void *)v5 + 472))(&v28, v5);
  uint64_t v6 = (Espresso *)(*(void *(**)(uint64_t *__return_ptr, Espresso::generic_convolution_kernel *))(*(void *)v5 + 456))(&v26, v5);
  uint64_t v8 = 0;
  uint64_t v9 = *(int *)(*(void *)a3 + 8);
  uint64_t v10 = v9;
  do
  {
    v10 *= *(int *)(*(void *)a3 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (((v10 ^ *(int *)(v30 + 8)) & 0x3FFFFFFFFFFFFFFFLL) == 0) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != 12; i += 4)
    v9 *= *(int *)(*(void *)a3 + 12 + i);
  if (v9 != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      long long v21 = Espresso::espresso_os_log_subsystem(v6, v7);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 435;
        __int16 v34 = 2080;
        uint64_t v35 = "biases->size() == constant->size() || constant->count() == 1";
        _os_log_impl(&dword_1920CB000, v21, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    uint64_t v20 = 0;
  }
  else
  {
LABEL_7:
    uint64_t v12 = Espresso::espresso_os_log_subsystem(v6, v7);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      char v23 = (void *)(v4 + 144);
      if (*(char *)(v4 + 167) < 0) {
        char v23 = (void *)*v23;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_debug_impl(&dword_1920CB000, v12, OS_LOG_TYPE_DEBUG, "fuse_affine_scale: conv %s", buf, 0xCu);
    }

    uint64_t v13 = 0;
    uint64_t v14 = *(int *)(*(void *)a3 + 8);
    do
    {
      v14 *= *(int *)(*(void *)a3 + 12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    uint64_t v15 = *(int *)(v28 + 20);
    if (v15)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      vDSP_Length v18 = *(int *)(v28 + 12) * (uint64_t)*(int *)(v28 + 8) * *(int *)(v28 + 16);
      do
      {
        if (v14 == 1) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = v17;
        }
        vDSP_vsmul((const float *)(*(void *)(v26 + 24) + v16), 1, (const float *)(*(void *)(*(void *)a3 + 24) + 4 * v19), (float *)(*(void *)(v28 + 24) + v16), 1, v18);
        ++v17;
        v16 += 4 * v18;
      }
      while (v15 != v17);
    }
    (*(void (**)(unsigned char *__return_ptr, Espresso::generic_convolution_kernel *))(*(void *)v5 + 448))(buf, v5);
    if (*(void *)buf) {
      vDSP_vmul(*(const float **)(*(void *)buf + 16), 1, *(const float **)(*(void *)a3 + 24), v14 != 1, *(float **)(v30 + 16), 1, *(int *)(v30 + 8));
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    *(void *)buf = v30;
    *(void *)&uint8_t buf[8] = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(Espresso::generic_convolution_kernel *, unsigned char *))(*(void *)v5 + 392))(v5, buf);
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v24 = v28;
    uint64_t v25 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(Espresso::generic_convolution_kernel *, uint64_t *))(*(void *)v5 + 400))(v5, &v24);
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    uint64_t v20 = 1;
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v32);
  return v20;
}

void sub_192AAFD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)&a17);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37B408;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EE37B408;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, Espresso::zephyr **a2)
{
  return Espresso::zephyr::match_standalone_conv(*a2, (Espresso::zephyr::node_t *)a2);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37B3B0;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1EE37B3B0;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

__n128 std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37B510;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE37B510;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void sub_192AB0034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::fuse_pad(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  *(void *)&long long v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)*((void *)this + 9);
  uint64_t v11 = (char *)this + 64;
  if (v2 == (char *)this + 64)
  {
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    do
    {
      uint64_t v4 = *((void *)v2 + 2);
      v18[0] = &unk_1EE37C0C0;
      v18[1] = v2 + 16;
      uint64_t v18[3] = v18;
      std::string::basic_string[abi:ne180100]<0>(&v19, "general_padding");
      std::string::basic_string[abi:ne180100]<0>(v20, "convolution");
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = &v12;
      char v16 = 0;
      uint64_t v12 = (std::string *)operator new(0x30uLL);
      uint64_t v13 = v12;
      uint64_t v14 = v12 + 2;
      uint64_t v5 = 0;
      uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v19, &v21, v12);
      do
      {
        if (SHIBYTE(v20[v5 + 2]) < 0) {
          operator delete((void *)v20[v5]);
        }
        v5 -= 3;
      }
      while (v5 != -6);
      *(void *)&long long v19 = &unk_1EE37DFB0;
      *((void *)&v19 + 1) = v18;
      v20[0] = &v19;
      char matched = Espresso::zephyr::match_kernel_chain(v4, (uint64_t *)&v12, &v19);
      std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v19);
      uint64_t v15 = &v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::~__value_func[abi:ne180100](v18);
      uint64_t v7 = *((void *)v2 + 2);
      v17[0] = &unk_1EE37C118;
      v17[1] = v2 + 16;
      v17[3] = v17;
      std::string::basic_string[abi:ne180100]<0>(&v19, "general_padding");
      std::string::basic_string[abi:ne180100]<0>(v20, "pool");
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = &v12;
      char v16 = 0;
      uint64_t v12 = (std::string *)operator new(0x30uLL);
      uint64_t v13 = v12;
      uint64_t v14 = v12 + 2;
      uint64_t v8 = 0;
      uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v19, &v21, v12);
      do
      {
        if (SHIBYTE(v20[v8 + 2]) < 0) {
          operator delete((void *)v20[v8]);
        }
        v8 -= 3;
      }
      while (v8 != -6);
      *(void *)&long long v19 = &unk_1EE37DF58;
      *((void *)&v19 + 1) = v17;
      v20[0] = &v19;
      char v9 = Espresso::zephyr::match_kernel_chain(v7, (uint64_t *)&v12, &v19);
      std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v19);
      uint64_t v15 = &v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      v3 |= matched | v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::~__value_func[abi:ne180100](v17);
      uint64_t v2 = (char *)*((void *)v2 + 1);
    }
    while (v2 != v11);
  }
  return v3 & 1;
}

void sub_192AB031C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  a15 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::~__value_func[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_30generic_general_padding_kernelENS_19generic_pool_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_general_padding_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0 && (v8 = *(const void **)(v7 + 8)) != 0)
  {
    if (v9)
    {
      uint64_t v10 = *(std::__shared_weak_count **)(v7 + 16);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v10);
      }
    }
  }
  else
  {
    char v9 = 0;
  }
  v14[0] = v4;
  v14[1] = v5;
  v13[0] = v6;
  v13[1] = v9;
  uint64_t v11 = *(void *)(v3 + 24);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v11 + 48))(v11, v14, v13);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_general_padding_kernel>(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(const void **)(v1 + 8);
  if (!v2) {
    return 0;
  }
  if (v3)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v4);
    }
  }
  return v3;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DF58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37DF58;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes8fuse_padERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(Espresso::zephyr::node_t **)a2;
  uint64_t v4 = *(Espresso::zephyr::node_t **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 320))(*(void *)(a2 + 8));
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 384))(v5);
  if (*(_WORD *)(v6 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315650;
        uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v15 = 1024;
        int v16 = 578;
        __int16 v17 = 2080;
        vDSP_Length v18 = "pad_p.pad.fill_mode == padding_fill_mode::CONSTANT";
LABEL_9:
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v13, 0x1Cu);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
    return 0;
  }
  if (*(_WORD *)(v7 + 38))
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315650;
        uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v15 = 1024;
        int v16 = 579;
        __int16 v17 = 2080;
        vDSP_Length v18 = "conv_p.pad.fill_mode == padding_fill_mode::CONSTANT";
        goto LABEL_9;
      }
LABEL_10:
    }
    return 0;
  }
  if (*(unsigned __int16 *)(v7 + 36) - 2 >= 2)
  {
    if (*(_WORD *)(v7 + 36))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 582;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.pad_mode == padding_mode::VALID || conv_p.pad.pad_mode == padding_mode::VALID_LEGACY || conv_p.pa"
            "d.pad_mode == padding_mode::CUSTOM";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 44))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 585;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.l == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 46))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 586;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.r == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 48))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 587;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.t == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 50))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 588;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.b == 0";
      goto LABEL_9;
    }
  }
  long long v11 = *(_OWORD *)v6;
  *(_DWORD *)(v7 + 52) = *(_DWORD *)(v6 + 16);
  *(_OWORD *)(v7 + 36) = v11;
  uint64_t v12 = (Espresso::zephyr::value_t **)*((void *)v3 + 15);
  if (*((Espresso::zephyr::value_t ***)v3 + 16) == v12) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_input_at(v4, 0, *v12);
  Espresso::zephyr::node_t::remove_from_graphs(v3);
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C118;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37C118;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::~__func()
{
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_30generic_general_padding_kernelENS_26generic_convolution_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_general_padding_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DFB0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37DFB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes8fuse_padERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(Espresso::zephyr::node_t **)a2;
  uint64_t v4 = *(Espresso::zephyr::node_t **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 320))(*(void *)(a2 + 8));
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 384))(v5);
  if (*(_WORD *)(v6 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315650;
        uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v15 = 1024;
        int v16 = 552;
        __int16 v17 = 2080;
        vDSP_Length v18 = "pad_p.pad.fill_mode == padding_fill_mode::CONSTANT";
LABEL_9:
        _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v13, 0x1Cu);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
    return 0;
  }
  if (*(_WORD *)(v7 + 74))
  {
    if (Espresso::zephyr::match_verbose)
    {
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315650;
        uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        __int16 v15 = 1024;
        int v16 = 553;
        __int16 v17 = 2080;
        vDSP_Length v18 = "conv_p.pad.fill_mode == padding_fill_mode::CONSTANT";
        goto LABEL_9;
      }
LABEL_10:
    }
    return 0;
  }
  if (*(unsigned __int16 *)(v7 + 72) - 2 >= 2)
  {
    if (*(_WORD *)(v7 + 72))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 556;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.pad_mode == padding_mode::VALID || conv_p.pad.pad_mode == padding_mode::VALID_LEGACY || conv_p.pa"
            "d.pad_mode == padding_mode::CUSTOM";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 80))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 559;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.l == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 82))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 560;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.r == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 84))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 561;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.t == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 86))
    {
      if (!Espresso::zephyr::match_verbose) {
        return 0;
      }
      char v9 = Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
      int v13 = 136315650;
      uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v15 = 1024;
      int v16 = 562;
      __int16 v17 = 2080;
      vDSP_Length v18 = "conv_p.pad.b == 0";
      goto LABEL_9;
    }
  }
  long long v11 = *(_OWORD *)v6;
  *(_DWORD *)(v7 + 88) = *(_DWORD *)(v6 + 16);
  *(_OWORD *)(v7 + 72) = v11;
  uint64_t v12 = (Espresso::zephyr::value_t **)*((void *)v3 + 15);
  if (*((Espresso::zephyr::value_t ***)v3 + 16) == v12) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_input_at(v4, 0, *v12);
  Espresso::zephyr::node_t::remove_from_graphs(v3);
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C0C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37C0C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::~__func()
{
}

uint64_t Espresso::zephyr_passes::fuse_conv_activation(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  *(void *)&long long v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)*((void *)this + 9);
  long long v11 = (char *)this + 64;
  if (v2 == (char *)this + 64)
  {
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    do
    {
      uint64_t v4 = *((void *)v2 + 2);
      v18[0] = &unk_1EE377D60;
      v18[1] = fuse_activation_tx<Espresso::generic_convolution_kernel>;
      uint64_t v18[3] = v18;
      std::string::basic_string[abi:ne180100]<0>(&v19, "convolution");
      std::string::basic_string[abi:ne180100]<0>(v20, "activation");
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v14 = 0;
      __int16 v15 = &v12;
      char v16 = 0;
      uint64_t v12 = (std::string *)operator new(0x30uLL);
      int v13 = v12;
      uint64_t v14 = v12 + 2;
      uint64_t v5 = 0;
      int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v19, &v21, v12);
      do
      {
        if (SHIBYTE(v20[v5 + 2]) < 0) {
          operator delete((void *)v20[v5]);
        }
        v5 -= 3;
      }
      while (v5 != -6);
      *(void *)&long long v19 = &unk_1EE37DD48;
      *((void *)&v19 + 1) = v18;
      v20[0] = &v19;
      char matched = Espresso::zephyr::match_kernel_chain(v4, (uint64_t *)&v12, &v19);
      std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v19);
      __int16 v15 = &v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__value_func[abi:ne180100](v18);
      uint64_t v7 = *((void *)v2 + 2);
      v17[0] = &unk_1EE377E10;
      v17[1] = fuse_activation_tx<Espresso::generic_deconvolution_kernel>;
      v17[3] = v17;
      std::string::basic_string[abi:ne180100]<0>(&v19, "deconvolution");
      std::string::basic_string[abi:ne180100]<0>(v20, "activation");
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v14 = 0;
      __int16 v15 = &v12;
      char v16 = 0;
      uint64_t v12 = (std::string *)operator new(0x30uLL);
      int v13 = v12;
      uint64_t v14 = v12 + 2;
      uint64_t v8 = 0;
      int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v19, &v21, v12);
      do
      {
        if (SHIBYTE(v20[v8 + 2]) < 0) {
          operator delete((void *)v20[v8]);
        }
        v8 -= 3;
      }
      while (v8 != -6);
      *(void *)&long long v19 = &unk_1EE37DE50;
      *((void *)&v19 + 1) = v17;
      v20[0] = &v19;
      char v9 = Espresso::zephyr::match_kernel_chain(v7, (uint64_t *)&v12, &v19);
      std::__function::__value_func<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__value_func[abi:ne180100](&v19);
      __int16 v15 = &v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      v3 |= matched | v9;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__value_func[abi:ne180100](v17);
      uint64_t v2 = (char *)*((void *)v2 + 1);
    }
    while (v2 != v11);
  }
  return v3 & 1;
}

void sub_192AB16EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  a15 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__value_func[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_28generic_deconvolution_kernelENS_25generic_activation_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DE50;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37DE50;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"PFbN8Espresso6zephyr19match_kernel_info_tINS_28generic_deconvolution_kernelEEENS1_INS_25generic_activation_kernelEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void, void))(a1 + 8))(*a2, a2[1], *a3, a3[1]);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377E10;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE377E10;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__func()
{
}

uint64_t fuse_activation_tx<Espresso::generic_deconvolution_kernel>(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (*(uint64_t (**)(void *))(*a2 + 384))(a2);
  uint64_t result = (*(uint64_t (**)(void *))(*a4 + 384))(a4);
  if (*(_DWORD *)(v8 + 60) != -1 || *(_DWORD *)(v8 + 24) || *(_DWORD *)(v8 + 28) || a2[1] != a4[1]) {
    return 0;
  }
  uint64_t v11 = result;
  int v12 = *(_DWORD *)result;
  if ((*(_DWORD *)result - 2) < 2)
  {
    uint64_t result = (uint64_t)getenv("ZEPHYR_FUSE_SIGMOID_LRELU");
    if (!result) {
      return result;
    }
    *(_DWORD *)(v8 + 60) = v12;
    *(void *)(v8 + 64) = *(void *)(v11 + 4);
  }
  else if (v12 == 1)
  {
    *(_DWORD *)(v8 + 28) = 1;
  }
  else
  {
    if (v12) {
      return 0;
    }
    *(_DWORD *)(v8 + 24) = 1;
  }
  int v13 = Espresso::espresso_os_log_subsystem((Espresso *)result, v10);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    __int16 v15 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      __int16 v15 = (void *)*v15;
    }
    char v16 = (void *)(a3 + 144);
    if (*(char *)(a3 + 167) < 0) {
      char v16 = (void *)*v16;
    }
    int v17 = 136315394;
    vDSP_Length v18 = v15;
    __int16 v19 = 2080;
    uint64_t v20 = v16;
    _os_log_debug_impl(&dword_1920CB000, v13, OS_LOG_TYPE_DEBUG, "pass_fuse_activation: fusing at %s %s\n", (uint8_t *)&v17, 0x16u);
  }

  uint64_t v14 = *(Espresso::zephyr::value_t ***)(a3 + 96);
  if (*(Espresso::zephyr::value_t ***)(a3 + 104) == v14) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at(a1, 0, *v14);
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)a3);
  return 1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_26generic_convolution_kernelENS_25generic_activation_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DD48;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37DD48;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

uint64_t fuse_activation_tx<Espresso::generic_convolution_kernel>(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (*(uint64_t (**)(void *))(*a2 + 384))(a2);
  uint64_t result = (*(uint64_t (**)(void *))(*a4 + 384))(a4);
  if (*(_DWORD *)(v8 + 60) != -1 || *(_DWORD *)(v8 + 24) || *(_DWORD *)(v8 + 28) || a2[1] != a4[1]) {
    return 0;
  }
  uint64_t v11 = result;
  int v12 = *(_DWORD *)result;
  if ((*(_DWORD *)result - 2) < 2)
  {
    uint64_t result = (uint64_t)getenv("ZEPHYR_FUSE_SIGMOID_LRELU");
    if (!result) {
      return result;
    }
    *(_DWORD *)(v8 + 60) = v12;
    *(void *)(v8 + 64) = *(void *)(v11 + 4);
  }
  else if (v12 == 1)
  {
    *(_DWORD *)(v8 + 28) = 1;
  }
  else
  {
    if (v12) {
      return 0;
    }
    *(_DWORD *)(v8 + 24) = 1;
  }
  int v13 = Espresso::espresso_os_log_subsystem((Espresso *)result, v10);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    __int16 v15 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      __int16 v15 = (void *)*v15;
    }
    char v16 = (void *)(a3 + 144);
    if (*(char *)(a3 + 167) < 0) {
      char v16 = (void *)*v16;
    }
    int v17 = 136315394;
    vDSP_Length v18 = v15;
    __int16 v19 = 2080;
    uint64_t v20 = v16;
    _os_log_debug_impl(&dword_1920CB000, v13, OS_LOG_TYPE_DEBUG, "pass_fuse_activation: fusing at %s %s\n", (uint8_t *)&v17, 0x16u);
  }

  uint64_t v14 = *(Espresso::zephyr::value_t ***)(a3 + 96);
  if (*(Espresso::zephyr::value_t ***)(a3 + 104) == v14) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at(a1, 0, *v14);
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)a3);
  return 1;
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"PFbN8Espresso6zephyr19match_kernel_info_tINS_26generic_convolution_kernelEEENS1_INS_25generic_activation_kernelEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void, void))(a1 + 8))(*a2, a2[1], *a3, a3[1]);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377D60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE377D60;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__func()
{
}

void *std::__function::__value_func<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_28generic_inner_product_kernelENS_25generic_activation_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(v4);
  uint64_t v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(v6);
  uint64_t v7 = *(void *)(v3 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37DEA8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37DEA8;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes29fuse_inner_product_activationERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = (void *)a2[1];
  uint64_t v5 = *a3;
  uint64_t v6 = (void *)a3[1];
  uint64_t v7 = (_DWORD *)(*(uint64_t (**)(void *))(*v4 + 384))(v4);
  uint64_t v8 = (Espresso *)(*(uint64_t (**)(void *))(*v6 + 384))(v6);
  if (v7[13] != -1) {
    return 0;
  }
  uint64_t v10 = v7 + 3;
  if (v7[3]) {
    return 0;
  }
  int v12 = v7[4];
  uint64_t v11 = v7 + 4;
  if (v12 || v4[1] != v6[1]) {
    return 0;
  }
  if (*(_DWORD *)v8)
  {
    if (*(_DWORD *)v8 != 1) {
      return 0;
    }
    uint64_t v10 = v11;
  }
  *uint64_t v10 = 1;
  uint64_t v14 = Espresso::espresso_os_log_subsystem(v8, v9);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    char v16 = (void *)(v3 + 144);
    if (*(char *)(v3 + 167) < 0) {
      char v16 = (void *)*v16;
    }
    int v17 = (void *)(v5 + 144);
    if (*(char *)(v5 + 167) < 0) {
      int v17 = (void *)*v17;
    }
    int v18 = 136315394;
    __int16 v19 = v16;
    __int16 v20 = 2080;
    uint64_t v21 = v17;
    _os_log_debug_impl(&dword_1920CB000, v14, OS_LOG_TYPE_DEBUG, "pass_fuse_activation: fusing at %s %s\n", (uint8_t *)&v18, 0x16u);
  }

  __int16 v15 = *(Espresso::zephyr::value_t ***)(v5 + 96);
  if (*(Espresso::zephyr::value_t ***)(v5 + 104) == v15) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::zephyr::node_t::replace_output_at(v3, 0, *v15);
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v5);
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B9E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37B9E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__func()
{
}

uint64_t Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 64;
  uint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = *((void *)v3 + 2);
      uint64_t v6 = operator new(0x28uLL);
      *uint64_t v6 = &unk_1EE37B300;
      v6[1] = &v17;
      v6[2] = &v16;
      v6[3] = &v15;
      v6[4] = &v14;
      __int16 v19 = v6;
      char v9 = *(void **)(v5 + 120);
      uint64_t v7 = (void *)(v5 + 120);
      uint64_t v8 = v9;
      if (v9 == v7 - 1)
      {
        char v10 = 0;
      }
      else
      {
        char v10 = 0;
        do
        {
          int v11 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v19, v8[2]);
          int v12 = v8 + 1;
          if (v11) {
            int v12 = v7;
          }
          v10 |= v11;
          uint64_t v8 = (void *)*v12;
        }
        while ((void *)*v12 != v7 - 1);
      }
      v4 |= v10;
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v18);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

void sub_192AB27B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, void **a2)
{
  void v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  v14[0] = &unk_1EE37B1A0;
  _OWORD v14[3] = v14;
  v13[0] = &unk_1EE37B1F8;
  _OWORD v13[3] = v13;
  int matched = match_transform_affine_addmul_biaslike(v2, 0, 5u, (uint64_t)v14, (uint64_t)v13);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v14);
  v12[0] = &unk_1EE37B250;
  v12[3] = v12;
  v11[0] = &unk_1EE37B2A8;
  void v11[3] = v11;
  int v4 = match_transform_affine_addmul_biaslike(v2, 0, 5u, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v12);
  v10[0] = &unk_1EE37B1A0;
  void v10[3] = v10;
  v9[0] = &unk_1EE37B1F8;
  v9[3] = v9;
  int v5 = match_transform_affine_addmul_scalar(v2, 2, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v10);
  v8[0] = &unk_1EE37B250;
  v8[3] = v8;
  v7[0] = &unk_1EE37B2A8;
  void v7[3] = v7;
  LODWORD(v2) = match_transform_affine_addmul_scalar(v2, 2, (uint64_t)v8, (uint64_t)v7);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v8);
  return matched | v4 | v5 | v2;
}

void sub_192AB2A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](va1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*a2);
  uint64_t v6 = (Espresso *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v5 + 432))(&v29);
  uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = (void *)(v4 + 144);
    if (*(char *)(v4 + 167) < 0) {
      uint64_t v26 = (void *)*v26;
    }
    int v27 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
    uint64_t v28 = (const char *)*(int *)(v29 + 8);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = v26;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v27;
    __int16 v32 = 2048;
    __int16 v33 = v28;
    __int16 v34 = 2048;
    uint64_t v35 = 4 * (void)v28;
    _os_log_debug_impl(&dword_1920CB000, v8, OS_LOG_TYPE_DEBUG, "fuse_affine_bias: inner_product %s nC=%d %zu %zu", buf, 0x26u);
  }

  uint64_t v11 = 0;
  uint64_t v12 = *(int *)(v29 + 8);
  uint64_t v13 = *a3;
  uint64_t v14 = *(int *)(*a3 + 8);
  uint64_t v15 = v14;
  do
  {
    v15 *= *(int *)(*a3 + 12 + v11);
    v11 += 4;
  }
  while (v11 != 12);
  if (4 * v12 == 4 * v15) {
    goto LABEL_8;
  }
  uint64_t v16 = 0;
  uint64_t v17 = *(int *)(*a3 + 8);
  do
  {
    v17 *= *(int *)(v13 + 12 + v16);
    v16 += 4;
  }
  while (v16 != 12);
  if (v17 == 1)
  {
LABEL_8:
    for (uint64_t i = 0; i != 12; i += 4)
      v14 *= *(int *)(v13 + 12 + i);
    if (v14 == 1)
    {
      if ((int)v12 >= 1)
      {
        __int16 v19 = *(_DWORD **)(v13 + 24);
        uint64_t v20 = *(_DWORD **)(v29 + 16);
        unint64_t v21 = (v12 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v20++ = *v19;
          --v21;
        }
        while (v21 > 1);
      }
    }
    else
    {
      memcpy(*(void **)(v29 + 16), *(const void **)(v13 + 24), 4 * v12);
    }
    (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v5 + 408))(buf, v5);
    if (*(void *)buf) {
      vDSP_vadd(*(const float **)(*(void *)buf + 16), 1, *(const float **)(v29 + 16), 1, *(float **)(v29 + 16), 1, *(int *)(v29 + 8));
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    *(void *)buf = v29;
    *(void *)&uint8_t buf[8] = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, unsigned char *))(*(void *)v5 + 392))(v5, buf);
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v5 + 384))(v5);
    uint64_t v23 = 1;
    *(_DWORD *)(v22 + 8) = 1;
  }
  else
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v24 = Espresso::espresso_os_log_subsystem(v9, v10);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 276;
        __int16 v32 = 2080;
        __int16 v33 = "biases->size() == constant->size() || constant->count() == 1";
        _os_log_impl(&dword_1920CB000, v24, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    uint64_t v23 = 0;
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  return v23;
}

void sub_192AB2EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37B2A8;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EE37B2A8;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*a2);
  if (v2)
  {
    uint64_t v4 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v2 + 384))(v2);
    if (*((_DWORD *)v4 + 3))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v6 = Espresso::espresso_os_log_subsystem(v4, v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v8 = 136315650;
          char v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          __int16 v10 = 1024;
          int v11 = 260;
          __int16 v12 = 2080;
          uint64_t v13 = "p.has_relu == 0";
LABEL_17:
          _os_log_impl(&dword_1920CB000, v6, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v8, 0x1Cu);
          goto LABEL_18;
        }
        goto LABEL_18;
      }
    }
    else if (*((_DWORD *)v4 + 4))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v6 = Espresso::espresso_os_log_subsystem(v4, v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v8 = 136315650;
          char v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          __int16 v10 = 1024;
          int v11 = 261;
          __int16 v12 = 2080;
          uint64_t v13 = "p.has_tanh == 0";
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
    else
    {
      if (*((_DWORD *)v4 + 13) == -1) {
        return 1;
      }
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v6 = Espresso::espresso_os_log_subsystem(v4, v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v8 = 136315650;
          char v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          __int16 v10 = 1024;
          int v11 = 262;
          __int16 v12 = 2080;
          uint64_t v13 = "p.fused_activation_mode == ACTIVATION_NONE";
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    uint64_t v6 = Espresso::espresso_os_log_subsystem(0, v3);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315650;
      char v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v10 = 1024;
      int v11 = 258;
      __int16 v12 = 2080;
      uint64_t v13 = "k_ip";
      goto LABEL_17;
    }
LABEL_18:
  }
  return 0;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37B250;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EE37B250;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(Espresso *a1, const char *a2, uint64_t *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = Espresso::espresso_os_log_subsystem(a1, a2);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = (void *)(v4 + 144);
    if (*(char *)(v4 + 167) < 0) {
      uint64_t v24 = (void *)*v24;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v24;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "fuse_affine_bias: conv %s", buf, 0xCu);
  }

  uint64_t v6 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v4);
  uint64_t v7 = (Espresso *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v6 + 488))(&v25);
  uint64_t v9 = 0;
  uint64_t v10 = *(int *)(v25 + 8);
  uint64_t v11 = *a3;
  uint64_t v12 = *(int *)(*a3 + 8);
  uint64_t v13 = v12;
  do
  {
    v13 *= *(int *)(*a3 + 12 + v9);
    v9 += 4;
  }
  while (v9 != 12);
  if (4 * v10 == 4 * v13) {
    goto LABEL_8;
  }
  uint64_t v14 = 0;
  uint64_t v15 = *(int *)(*a3 + 8);
  do
  {
    v15 *= *(int *)(v11 + 12 + v14);
    v14 += 4;
  }
  while (v14 != 12);
  if (v15 == 1)
  {
LABEL_8:
    for (uint64_t i = 0; i != 12; i += 4)
      v12 *= *(int *)(v11 + 12 + i);
    if (v12 == 1)
    {
      if ((int)v10 >= 1)
      {
        uint64_t v17 = *(_DWORD **)(v11 + 24);
        int v18 = *(_DWORD **)(v25 + 16);
        unint64_t v19 = (v10 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v18++ = *v17;
          --v19;
        }
        while (v19 > 1);
      }
    }
    else
    {
      memcpy(*(void **)(v25 + 16), *(const void **)(v11 + 24), 4 * v10);
    }
    (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v6 + 448))(buf, v6);
    if (*(void *)buf) {
      vDSP_vadd(*(const float **)(*(void *)buf + 16), 1, *(const float **)(v25 + 16), 1, *(float **)(v25 + 16), 1, *(int *)(v25 + 8));
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    *(void *)buf = v25;
    *(void *)&uint8_t buf[8] = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, unsigned char *))(*(void *)v6 + 392))(v6, buf);
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v6 + 384))(v6);
    uint64_t v21 = 1;
    *(_DWORD *)(v20 + 32) = 1;
  }
  else
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v22 = Espresso::espresso_os_log_subsystem(v7, v8);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 240;
        __int16 v28 = 2080;
        uint64_t v29 = "biases->size() == constant->size() || constant->count() == 1";
        _os_log_impl(&dword_1920CB000, v22, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
    }
    uint64_t v21 = 0;
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  return v21;
}

void sub_192AB366C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37B1F8;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EE37B1F8;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(*a2);
  if (v2)
  {
    uint64_t v4 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v2 + 384))(v2);
    if (*((_DWORD *)v4 + 6))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v6 = Espresso::espresso_os_log_subsystem(v4, v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v8 = 136315650;
          uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          __int16 v10 = 1024;
          int v11 = 228;
          __int16 v12 = 2080;
          uint64_t v13 = "p.fused_relu == 0";
LABEL_21:
          _os_log_impl(&dword_1920CB000, v6, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v8, 0x1Cu);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
    }
    else if (*((_DWORD *)v4 + 28))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v6 = Espresso::espresso_os_log_subsystem(v4, v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v8 = 136315650;
          uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          __int16 v10 = 1024;
          int v11 = 229;
          __int16 v12 = 2080;
          uint64_t v13 = "p.has_batch_norm == 0";
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    else if (*((_DWORD *)v4 + 7))
    {
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v6 = Espresso::espresso_os_log_subsystem(v4, v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v8 = 136315650;
          uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          __int16 v10 = 1024;
          int v11 = 230;
          __int16 v12 = 2080;
          uint64_t v13 = "p.fused_tanh == 0";
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*((_DWORD *)v4 + 15) == -1) {
        return 1;
      }
      if (Espresso::zephyr::match_verbose)
      {
        uint64_t v6 = Espresso::espresso_os_log_subsystem(v4, v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          int v8 = 136315650;
          uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          __int16 v10 = 1024;
          int v11 = 231;
          __int16 v12 = 2080;
          uint64_t v13 = "p.fused_activation_mode == ACTIVATION_NONE";
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    uint64_t v6 = Espresso::espresso_os_log_subsystem(0, v3);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315650;
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      __int16 v10 = 1024;
      int v11 = 226;
      __int16 v12 = 2080;
      uint64_t v13 = "k_conv";
      goto LABEL_21;
    }
LABEL_22:
  }
  return 0;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37B1A0;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EE37B1A0;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

__n128 std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37B300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE37B300;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

uint64_t Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE37B148;
  v4[1] = this;
  v4[3] = v4;
  uint64_t v2 = Espresso::zephyr::function_t::foreach_block((uint64_t)this, (uint64_t)v4);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__value_func[abi:ne180100](v4);
  return v2;
}

void sub_192AB3C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes15fuse_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a2;
  v10[0] = &unk_1EE37E6E8;
  v10[1] = &v9;
  int v11 = v10;
  uint64_t v2 = v9 + 112;
  uint64_t v3 = (uint64_t *)(v9 + 120);
  uint64_t v4 = *(void *)(v9 + 120);
  if (v4 == v9 + 112)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      int v6 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v11, *(void *)(v4 + 16));
      uint64_t v7 = (uint64_t *)(v4 + 8);
      if (v6) {
        uint64_t v7 = v3;
      }
      v5 |= v6;
      uint64_t v4 = *v7;
    }
    while (*v7 != v2);
  }
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v10);
  return v5 & 1;
}

void sub_192AB3D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes15fuse_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_15ordered_block_tEEUlPNS1_6node_tEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*a2);
  uint64_t v48 = v4;
  if (v4)
  {
    int v6 = *(uint64_t **)(v3 + 96);
    unint64_t v47 = (Espresso::zephyr::node_t *)v3;
    if (*(uint64_t **)(v3 + 104) == v6) {
LABEL_62:
    }
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    uint64_t v7 = *v6;
    uint64_t v9 = *(uint64_t **)(v7 + 56);
    int v8 = *(uint64_t **)(v7 + 64);
    if (v9 != v8)
    {
      char v10 = 0;
      uint64_t v46 = *(uint64_t **)(v7 + 64);
      do
      {
        while (!v9[1])
        {
          int v11 = (Espresso::zephyr::node_t *)*v9;
          uint64_t v4 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*v9);
          if (!v4) {
            break;
          }
          uint64_t v12 = v4;
          uint64_t v4 = (Espresso *)Espresso::zephyr::graph_t::live_outputs(**(Espresso::zephyr::graph_t ***)(a1 + 8));
          uint64_t v13 = (unint64_t **)*((void *)v11 + 12);
          if (*((unint64_t ***)v11 + 13) == v13) {
            goto LABEL_62;
          }
          uint64_t v14 = (void *)*((void *)v4 + 1);
          if (v14)
          {
            uint64_t v15 = *v13;
            do
            {
              if (v15) {
                unint64_t v16 = *v15;
              }
              else {
                unint64_t v16 = 0;
              }
              uint64_t v17 = (void *)v14[4];
              if (!v17 || (uint64_t v17 = (void *)*v17, v16 >= (unint64_t)v17))
              {
                if (v15) {
                  unint64_t v18 = *v15;
                }
                else {
                  unint64_t v18 = 0;
                }
                if ((unint64_t)v17 >= v18) {
                  goto LABEL_6;
                }
                ++v14;
              }
              uint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          uint64_t v19 = (*(uint64_t (**)(Espresso *))(*(void *)v48 + 320))(v48);
          int v20 = *(_DWORD *)(v19 + 16);
          long long v49 = *(_OWORD *)v19;
          uint64_t v21 = (int *)(*(uint64_t (**)(Espresso *))(*(void *)v12 + 320))(v12);
          uint64_t v22 = *v21;
          uint64_t v23 = v21[1];
          uint64_t v24 = v21[2];
          uint64_t v25 = v21[3];
          uint64_t v26 = v21[4];
          *(_OWORD *)buf = v49;
          *(_DWORD *)&uint8_t buf[16] = v20;
          int v27 = *(_DWORD *)&buf[4 * v22];
          int v28 = *(_DWORD *)&buf[4 * v23];
          int v29 = *(_DWORD *)&buf[4 * v24];
          int v30 = *(_DWORD *)&buf[4 * v25];
          int v31 = *(_DWORD *)&buf[4 * v26];
          BOOL v32 = !v27 && v28 == 1;
          BOOL v33 = v32 && v29 == 2;
          BOOL v34 = v33 && v30 == 3;
          BOOL v35 = v34 && v31 == 4;
          BOOL v36 = v35;
          __int16 v37 = (Espresso::zephyr::value_t **)*((void *)v47 + 15);
          if (*((Espresso::zephyr::value_t ***)v47 + 16) == v37) {
            goto LABEL_62;
          }
          if (*((void *)v47 + 13) == *((void *)v47 + 12)) {
            goto LABEL_62;
          }
          int v38 = (Espresso::zephyr::value_t **)*((void *)v11 + 12);
          if (*((Espresso::zephyr::value_t ***)v11 + 13) == v38) {
            goto LABEL_62;
          }
          __int16 v39 = *v37;
          if (v36)
          {
            Espresso::zephyr::value_t::replace_uses(*v38, *v37);
            uint64_t v4 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused(v11);
          }
          else
          {
            __int16 v40 = (_DWORD *)(*(uint64_t (**)(Espresso *))(*(void *)v12 + 320))(v12);
            *__int16 v40 = v27;
            v40[1] = v28;
            v40[2] = v29;
            v40[3] = v30;
            v40[4] = v31;
            Espresso::zephyr::node_t::replace_input_at(v11, 0, v39);
          }
          v9 += 2;
          char v10 = 1;
          int v8 = v46;
          if (v9 == v46) {
            goto LABEL_50;
          }
        }
LABEL_6:
        v9 += 2;
      }
      while (v9 != v8);
      if (v10)
      {
LABEL_50:
        uint64_t v42 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused(v47);
        if (!Espresso::zephyr::match_verbose) {
          return 1;
        }
        uint64_t v41 = Espresso::espresso_os_log_subsystem(v42, v43);
        uint64_t v44 = 1;
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 674;
          _os_log_impl(&dword_1920CB000, v41, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
        }
        goto LABEL_58;
      }
    }
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v41 = Espresso::espresso_os_log_subsystem(v4, v5);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 672;
        *(_WORD *)&unsigned char buf[18] = 2080;
        uint64_t v51 = "any_change";
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    return 0;
  }
  if (!Espresso::zephyr::match_verbose) {
    return 0;
  }
  uint64_t v41 = Espresso::espresso_os_log_subsystem(0, v5);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 609;
    *(_WORD *)&unsigned char buf[18] = 2080;
    uint64_t v51 = "t0_kernel";
LABEL_56:
    _os_log_impl(&dword_1920CB000, v41, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
  }
LABEL_57:
  uint64_t v44 = 0;
LABEL_58:

  return v44;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37E6E8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37E6E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B148;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37B148;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes19remove_no_op_copiesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a2;
  v10[0] = &unk_1EE37E7F0;
  v10[1] = &v9;
  int v11 = v10;
  uint64_t v2 = v9 + 112;
  uint64_t v3 = (uint64_t *)(v9 + 120);
  uint64_t v4 = *(void *)(v9 + 120);
  if (v4 == v9 + 112)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      int v6 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v11, *(void *)(v4 + 16));
      uint64_t v7 = (uint64_t *)(v4 + 8);
      if (v6) {
        uint64_t v7 = v3;
      }
      v5 |= v6;
      uint64_t v4 = *v7;
    }
    while (*v7 != v2);
  }
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v10);
  return v5 & 1;
}

void sub_192AB442C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes19remove_no_op_copiesERNS_6zephyr10function_tEENK3$_0clEPNS1_15ordered_block_tEEUlPNS1_6node_tEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(void **a1, const char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(void *)a2)
  {
    uint64_t v3 = *((void *)v2 + 1);
    if (v3)
    {
      uint64_t v4 = a1;
      a1 = *(void ***)(v3 + 8);
      if (a1)
      {
        if (a1)
        {
          char v5 = *(std::__shared_weak_count **)(v3 + 16);
          if (v5)
          {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            nitro::nitro_function::nitro_function(v5);
          }
          int v6 = (Espresso::zephyr::value_t **)*((void *)v2 + 12);
          uint64_t v7 = (Espresso::zephyr::value_t **)*((void *)v2 + 13);
          if ((char *)v7 - (char *)v6 != 8)
          {
            if (Espresso::zephyr::match_verbose)
            {
              int v11 = Espresso::espresso_os_log_subsystem((Espresso *)v5, a2);
              if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
                goto LABEL_18;
              }
              int v17 = 136315650;
              unint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
              __int16 v19 = 1024;
              int v20 = 683;
              __int16 v21 = 2080;
              uint64_t v22 = "copy_node->outputs().size() == 1";
              goto LABEL_17;
            }
            return 0;
          }
          int v8 = (uint64_t *)*((void *)v2 + 15);
          if (*((uint64_t **)v2 + 16) != v8)
          {
            uint64_t v9 = *v8;
            char v10 = *(Espresso::zephyr::node_t ***)(*v8 + 56);
            if (*(void *)(v9 + 64) - (void)v10 != 16)
            {
              if (Espresso::zephyr::match_verbose)
              {
                int v11 = Espresso::espresso_os_log_subsystem((Espresso *)v5, a2);
                if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
                  goto LABEL_18;
                }
                int v17 = 136315650;
                unint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                __int16 v19 = 1024;
                int v20 = 691;
                __int16 v21 = 2080;
                uint64_t v22 = "copy_node->input()->has_one_use()";
                goto LABEL_17;
              }
              return 0;
            }
            if (*v10 != v2)
            {
              if (Espresso::zephyr::match_verbose)
              {
                int v11 = Espresso::espresso_os_log_subsystem((Espresso *)v5, a2);
                if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
                {
                  int v17 = 136315650;
                  unint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                  __int16 v19 = 1024;
                  int v20 = 693;
                  __int16 v21 = 2080;
                  uint64_t v22 = "copy_node->input()->uses()[0].user_node == copy_node";
LABEL_17:
                  _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v17, 0x1Cu);
                  goto LABEL_18;
                }
                goto LABEL_18;
              }
              return 0;
            }
            uint64_t v13 = *(Espresso::zephyr::node_t **)(v9 + 80);
            if (!v13
              || (char v5 = (std::__shared_weak_count *)std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*(void *)(*v4[1] + 96), *(unint64_t **)(v9 + 80))) == 0)
            {
              if (Espresso::zephyr::match_verbose)
              {
                int v11 = Espresso::espresso_os_log_subsystem((Espresso *)v5, a2);
                if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
                  goto LABEL_18;
                }
                int v17 = 136315650;
                unint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                __int16 v19 = 1024;
                int v20 = 696;
                __int16 v21 = 2080;
                uint64_t v22 = "input_def && block->nodes().count(input_def)";
                goto LABEL_17;
              }
              return 0;
            }
            if (v7 != v6)
            {
              Espresso::zephyr::node_t::replace_output_with(v13, (Espresso::zephyr::value_t *)v9, *v6);
              uint64_t v14 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v2);
              if (!Espresso::zephyr::match_verbose) {
                return 1;
              }
              int v11 = Espresso::espresso_os_log_subsystem(v14, v15);
              uint64_t v12 = 1;
              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                int v17 = 136315394;
                unint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                __int16 v19 = 1024;
                int v20 = 702;
                _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)&v17, 0x12u);
              }
              goto LABEL_19;
            }
          }
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
      }
    }
  }
  if (!Espresso::zephyr::match_verbose) {
    return 0;
  }
  int v11 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    int v17 = 136315650;
    unint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    __int16 v19 = 1024;
    int v20 = 682;
    __int16 v21 = 2080;
    uint64_t v22 = "zephyr::cast_kernel<generic_copy_kernel>(copy_node)";
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v12 = 0;
LABEL_19:

  return v12;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37E7F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37E7F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B720;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37B720;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__func()
{
}

uint64_t is_ane(_DWORD *a1)
{
  return ((*a1 - 10006) < 6) & (0x2Fu >> (*(unsigned char *)a1 - 22));
}

void sub_192AB4BC8(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_transform_static_quantize_kernel::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  v72[0] = *MEMORY[0x1E4F143B8];
  Espresso::run_pass_on_network<Espresso::pass_transform_quantize_kernel>((uint64_t)a1);
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 3221225472;
  unint64_t v47 = ___ZN8Espresso37pass_transform_static_quantize_kernel14run_on_networkERNS_3netE_block_invoke;
  uint64_t v48 = &__block_descriptor_40_e9_v16__0_v8l;
  long long v49 = a1;
  char v5 = v46;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v57, a1);
  memset(v55, 0, 28);
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v56 = a1;
  uint64_t v6 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      LODWORD(v55[3]) = v7;
      long long v8 = *(_OWORD *)(v6 + 16 * v7);
      uint64_t v9 = *(void *)(v6 + 16 * v7 + 8);
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      char v10 = (std::__shared_weak_count *)*((void *)&v54 + 1);
      long long v54 = v8;
      if (v10)
      {
        nitro::nitro_function::nitro_function(v10);
        uint64_t v11 = v54;
      }
      else
      {
        uint64_t v11 = v8;
      }
      uint64_t v12 = *(void **)(v11 + 64);
      if (v12
      {
        uint64_t v13 = *(void *)(v11 + 72);
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (std::__shared_weak_count *)*((void *)&v53 + 1);
      *(void *)&long long v53 = v12;
      *((void *)&v53 + 1) = v13;
      if (v14)
      {
        nitro::nitro_function::nitro_function(v14);
        uint64_t v12 = (void *)v53;
      }
      if (v12) {
        v47((uint64_t)v5, (int64x2_t *)&v53);
      }
      ++v7;
      uint64_t v6 = *((void *)a1 + 4);
    }
    while (v7 < (*((void *)a1 + 5) - v6) >> 4);
    uint64_t v15 = (uint64_t *)v55[1];
    if (v55[0] != v55[1])
    {
      uint64_t v41 = a2;
      int v16 = 0;
      int v17 = (uint64_t *)(v55[0] + 32);
      do
      {
        unint64_t v18 = v17 - 4;
        int v19 = *((_DWORD *)v17 - 8) + v16;
        *((_DWORD *)v17 - 8) = v19;
        uint64_t v20 = *(v17 - 3);
        if (v20)
        {
          LODWORD(v63) = v19;
          uint64_t v64 = v20;
          __int16 v21 = (std::__shared_weak_count *)*(v17 - 2);
          uint64_t v65 = v21;
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          uint64_t v68 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v66, *(v17 - 1), *v17, 0xAAAAAAAAAAAAAAABLL * ((*v17 - *(v17 - 1)) >> 3));
          uint64_t v69 = 0;
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v69, v17[2], v17[3], 0xAAAAAAAAAAAAAAABLL * ((v17[3] - v17[2]) >> 3));
          int v50 = 0;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          uint64_t v61 = (void **)&v50;
          char v62 = 0;
          int v50 = (uint64_t *)operator new(0x48uLL);
          uint64_t v51 = v50;
          uint64_t v52 = v50 + 9;
          uint64_t v51 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v52, (uint64_t)&v63, (uint64_t)v72, (uint64_t)v50);
          Espresso::net::insert_layers((uint64_t)a1, &v50);
          uint64_t v61 = (void **)&v50;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v61);
          uint64_t v61 = (void **)&v69;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v61);
          uint64_t v61 = (void **)&v66;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v61);
          if (v65) {
            nitro::nitro_function::nitro_function(v65);
          }
          int v22 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v19);
          int v22 = -1;
        }
        v16 += v22;
        v17 += 9;
      }
      while (v18 + 9 != v15);
      a2 = v41;
    }
  }
  uint64_t v63 = (void **)v55;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v63);
  if (*((void *)&v54 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v54 + 1));
  }
  if (*((void *)&v53 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v53 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v60);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v59);
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }

  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  int v43 = ___ZN8Espresso37pass_transform_static_quantize_kernel14run_on_networkERNS_3netE_block_invoke_2;
  uint64_t v44 = &__block_descriptor_40_e9_v16__0_v8l;
  int v45 = a1;
  uint64_t v23 = v42;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v57, a1);
  memset(v55, 0, 28);
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v56 = a1;
  uint64_t v24 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v24)
  {
    unint64_t v25 = 0;
    do
    {
      LODWORD(v55[3]) = v25;
      long long v26 = *(_OWORD *)(v24 + 16 * v25);
      uint64_t v27 = *(void *)(v24 + 16 * v25 + 8);
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      int v28 = (std::__shared_weak_count *)*((void *)&v54 + 1);
      long long v54 = v26;
      if (v28)
      {
        nitro::nitro_function::nitro_function(v28);
        uint64_t v29 = v54;
      }
      else
      {
        uint64_t v29 = v26;
      }
      int v30 = *(void **)(v29 + 64);
      if (v30
      {
        uint64_t v31 = *(void *)(v29 + 72);
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      BOOL v32 = (std::__shared_weak_count *)*((void *)&v53 + 1);
      *(void *)&long long v53 = v30;
      *((void *)&v53 + 1) = v31;
      if (v32)
      {
        nitro::nitro_function::nitro_function(v32);
        int v30 = (void *)v53;
      }
      if (v30) {
        v43((uint64_t)v23, (int64x2_t *)&v53);
      }
      ++v25;
      uint64_t v24 = *((void *)a1 + 4);
    }
    while (v25 < (*((void *)a1 + 5) - v24) >> 4);
    BOOL v33 = (uint64_t *)v55[1];
    if (v55[0] != v55[1])
    {
      int v34 = 0;
      BOOL v35 = (uint64_t *)(v55[0] + 32);
      do
      {
        BOOL v36 = v35 - 4;
        int v37 = *((_DWORD *)v35 - 8) + v34;
        *((_DWORD *)v35 - 8) = v37;
        uint64_t v38 = *(v35 - 3);
        if (v38)
        {
          LODWORD(v63) = v37;
          uint64_t v64 = v38;
          __int16 v39 = (std::__shared_weak_count *)*(v35 - 2);
          uint64_t v65 = v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          uint64_t v68 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v66, *(v35 - 1), *v35, 0xAAAAAAAAAAAAAAABLL * ((*v35 - *(v35 - 1)) >> 3));
          uint64_t v69 = 0;
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v69, v35[2], v35[3], 0xAAAAAAAAAAAAAAABLL * ((v35[3] - v35[2]) >> 3));
          int v50 = 0;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          uint64_t v61 = (void **)&v50;
          char v62 = 0;
          int v50 = (uint64_t *)operator new(0x48uLL);
          uint64_t v51 = v50;
          uint64_t v52 = v50 + 9;
          uint64_t v51 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v52, (uint64_t)&v63, (uint64_t)v72, (uint64_t)v50);
          Espresso::net::insert_layers((uint64_t)a1, &v50);
          uint64_t v61 = (void **)&v50;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v61);
          uint64_t v61 = (void **)&v69;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v61);
          uint64_t v61 = (void **)&v66;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v61);
          if (v65) {
            nitro::nitro_function::nitro_function(v65);
          }
          int v40 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v37);
          int v40 = -1;
        }
        v34 += v40;
        v35 += 9;
      }
      while (v36 + 9 != v33);
    }
  }
  uint64_t v63 = (void **)v55;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v63);
  if (*((void *)&v54 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v54 + 1));
  }
  if (*((void *)&v53 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v53 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v60);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v59);
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }

  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)a2 = 1;
}

void sub_192AB52E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso37pass_transform_static_quantize_kernel14run_on_networkERNS_3netE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  memset(v50, 0, 32);
  *(_DWORD *)&v50[32] = 1065353216;
  Espresso::net::get_consumers_of_blobs(v4, v50, (uint64_t)v49);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v50);
  Espresso::net::get_producers_of_blobs(*(Espresso::net **)(a1 + 32), (uint64_t)v48);
  uint64_t v5 = *(void *)(a1 + 32) + 96;
  unint64_t v6 = a2[3].i32[2];
  *(void *)int v50 = v6;
  unint64_t v7 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5, v6, v50)[3];
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v8 = *v7;
    __str.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = *(void *)(a1 + 32) + 56;
  unint64_t v10 = a2[3].i32[2];
  *(void *)int v50 = v10;
  uint64_t v11 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, v50)[3];
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v12 = *v11;
    __p.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  }
  *(_DWORD *)int v50 = a2[3].i32[2];
  memset(&v50[8], 0, 64);
  unint64_t v13 = a2[2].u64[1];
  if (v13 >= a2[3].i64[0])
  {
    uint64_t v14 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v50);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v50);
    uint64_t v14 = v13 + 72;
    a2[2].i64[1] = v13 + 72;
  }
  a2[2].i64[1] = v14;
  uint64_t v51 = (void **)&v50[48];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  uint64_t v51 = (void **)&v50[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  if (*(void *)&v50[16]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v50[16]);
  }
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*(void *)(a1 + 32) + 240), &__p))
  {
    *(void *)int v50 = &__p;
    uint64_t v51 = (void **)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v48, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (long long **)v50)[5];
    uint64_t v31 = *(void *)(a1 + 32) + 96;
    *(void *)int v50 = &v51;
    BOOL v32 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v31, (unint64_t *)&v51, (uint64_t)&std::piecewise_construct, (uint64_t **)v50);
    uint64_t v33 = v32[3];
    uint64_t v34 = v32[4];
    if (v33 == v34) {
      goto LABEL_59;
    }
    while (1)
    {
      uint64_t v35 = *(unsigned __int8 *)(v33 + 23);
      if ((v35 & 0x80u) == 0) {
        uint64_t v36 = *(unsigned __int8 *)(v33 + 23);
      }
      else {
        uint64_t v36 = *(void *)(v33 + 8);
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (v36 != size) {
        goto LABEL_58;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((v35 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v33, p_p, *(void *)(v33 + 8)))
        {
LABEL_55:
          int v40 = (uint64_t **)(*(void *)(a1 + 32) + 352);
          *(void *)int v50 = v33;
          uint64_t v41 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, (void *)v33, (uint64_t)&std::piecewise_construct, (long long **)v50);
          uint64_t v42 = (uint64_t **)(*(void *)(a1 + 32) + 352);
          *(void *)int v50 = &__str;
          int v43 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v42, &__str, (uint64_t)&std::piecewise_construct, (long long **)v50);
          *(_OWORD *)(v43 + 56) = *(_OWORD *)(v41 + 56);
          if (v43 != v41) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v43 + 72, *((char **)v41 + 9), *((void *)v41 + 10), (uint64_t)(*((void *)v41 + 10) - *((void *)v41 + 9)) >> 2);
          }
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>((uint64_t **)(*(void *)(a1 + 32) + 352), (void *)v33);
          std::string::operator=((std::string *)v33, &__str);
        }
      }
      else
      {
        if (!*(unsigned char *)(v33 + 23)) {
          goto LABEL_55;
        }
        uint64_t v39 = 0;
        while (*(unsigned __int8 *)(v33 + v39) == p_p->__r_.__value_.__s.__data_[v39])
        {
          if (v35 == ++v39) {
            goto LABEL_55;
          }
        }
      }
LABEL_58:
      v33 += 24;
      if (v33 == v34) {
        goto LABEL_59;
      }
    }
  }
  *(void *)int v50 = &__str;
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v49, (unsigned __int8 *)&__str, (long long **)v50);
  int v16 = (unint64_t *)*((void *)v15 + 5);
  int v17 = (unint64_t *)*((void *)v15 + 6);
  if (v16 == v17) {
    goto LABEL_59;
  }
  do
  {
    uint64_t v18 = *(void *)(a1 + 32) + 56;
    *(void *)int v50 = v16;
    int v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, v16, (uint64_t)&std::piecewise_construct, (uint64_t **)v50);
    uint64_t v20 = v19[3];
    uint64_t v21 = v19[4];
    while (v20 != v21)
    {
      uint64_t v22 = *(unsigned __int8 *)(v20 + 23);
      if ((v22 & 0x80u) == 0) {
        uint64_t v23 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        uint64_t v23 = *(void *)(v20 + 8);
      }
      std::string::size_type v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v24 = __str.__r_.__value_.__l.__size_;
      }
      if (v23 == v24)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((v22 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v20, p_str, *(void *)(v20 + 8))) {
            goto LABEL_35;
          }
LABEL_32:
          uint64_t v27 = (uint64_t **)(*(void *)(a1 + 32) + 352);
          *(void *)int v50 = v20;
          int v28 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (void *)v20, (uint64_t)&std::piecewise_construct, (long long **)v50);
          uint64_t v29 = (uint64_t **)(*(void *)(a1 + 32) + 352);
          *(void *)int v50 = &__p;
          int v30 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, &__p, (uint64_t)&std::piecewise_construct, (long long **)v50);
          *(_OWORD *)(v30 + 56) = *(_OWORD *)(v28 + 56);
          if (v30 != v28) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30 + 72, *((char **)v28 + 9), *((void *)v28 + 10), (uint64_t)(*((void *)v28 + 10) - *((void *)v28 + 9)) >> 2);
          }
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>((uint64_t **)(*(void *)(a1 + 32) + 352), (void *)v20);
          std::string::operator=((std::string *)v20, &__p);
          goto LABEL_35;
        }
        if (!*(unsigned char *)(v20 + 23)) {
          goto LABEL_32;
        }
        uint64_t v26 = 0;
        while (*(unsigned __int8 *)(v20 + v26) == p_str->__r_.__value_.__s.__data_[v26])
        {
          if (v22 == ++v26) {
            goto LABEL_32;
          }
        }
      }
LABEL_35:
      v20 += 24;
    }
    ++v16;
  }
  while (v16 != v17);
LABEL_59:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v48[2]);
  uint64_t v44 = v48[0];
  v48[0] = 0;
  if (v44) {
    operator delete(v44);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v49[2]);
  int v45 = v49[0];
  v49[0] = 0;
  if (v45) {
    operator delete(v45);
  }
}

void sub_192AB58B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso37pass_transform_static_quantize_kernel14run_on_networkERNS_3netE_block_invoke_2(uint64_t a1, int64x2_t *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  memset(v50, 0, 32);
  *(_DWORD *)&v50[32] = 1065353216;
  Espresso::net::get_consumers_of_blobs(v4, v50, (uint64_t)v49);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v50);
  Espresso::net::get_producers_of_blobs(*(Espresso::net **)(a1 + 32), (uint64_t)v48);
  uint64_t v5 = *(void *)(a1 + 32) + 96;
  unint64_t v6 = a2[3].i32[2];
  *(void *)int v50 = v6;
  unint64_t v7 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5, v6, v50)[3];
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v8 = *v7;
    __str.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = *(void *)(a1 + 32) + 56;
  unint64_t v10 = a2[3].i32[2];
  *(void *)int v50 = v10;
  uint64_t v11 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, v50)[3];
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v12 = *v11;
    __p.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  }
  *(_DWORD *)int v50 = a2[3].i32[2];
  memset(&v50[8], 0, 64);
  unint64_t v13 = a2[2].u64[1];
  if (v13 >= a2[3].i64[0])
  {
    uint64_t v14 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v50);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v50);
    uint64_t v14 = v13 + 72;
    a2[2].i64[1] = v13 + 72;
  }
  a2[2].i64[1] = v14;
  uint64_t v51 = (void **)&v50[48];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  uint64_t v51 = (void **)&v50[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v51);
  if (*(void *)&v50[16]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v50[16]);
  }
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*(void *)(a1 + 32) + 240), &__p))
  {
    *(void *)int v50 = &__p;
    uint64_t v51 = (void **)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v48, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (long long **)v50)[5];
    uint64_t v31 = *(void *)(a1 + 32) + 96;
    *(void *)int v50 = &v51;
    BOOL v32 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v31, (unint64_t *)&v51, (uint64_t)&std::piecewise_construct, (uint64_t **)v50);
    uint64_t v33 = v32[3];
    uint64_t v34 = v32[4];
    if (v33 == v34) {
      goto LABEL_59;
    }
    while (1)
    {
      uint64_t v35 = *(unsigned __int8 *)(v33 + 23);
      if ((v35 & 0x80u) == 0) {
        uint64_t v36 = *(unsigned __int8 *)(v33 + 23);
      }
      else {
        uint64_t v36 = *(void *)(v33 + 8);
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (v36 != size) {
        goto LABEL_58;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((v35 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v33, p_p, *(void *)(v33 + 8)))
        {
LABEL_55:
          int v40 = (uint64_t **)(*(void *)(a1 + 32) + 352);
          *(void *)int v50 = v33;
          uint64_t v41 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, (void *)v33, (uint64_t)&std::piecewise_construct, (long long **)v50);
          uint64_t v42 = (uint64_t **)(*(void *)(a1 + 32) + 352);
          *(void *)int v50 = &__str;
          int v43 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v42, &__str, (uint64_t)&std::piecewise_construct, (long long **)v50);
          *(_OWORD *)(v43 + 56) = *(_OWORD *)(v41 + 56);
          if (v43 != v41) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v43 + 72, *((char **)v41 + 9), *((void *)v41 + 10), (uint64_t)(*((void *)v41 + 10) - *((void *)v41 + 9)) >> 2);
          }
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>((uint64_t **)(*(void *)(a1 + 32) + 352), (void *)v33);
          std::string::operator=((std::string *)v33, &__str);
        }
      }
      else
      {
        if (!*(unsigned char *)(v33 + 23)) {
          goto LABEL_55;
        }
        uint64_t v39 = 0;
        while (*(unsigned __int8 *)(v33 + v39) == p_p->__r_.__value_.__s.__data_[v39])
        {
          if (v35 == ++v39) {
            goto LABEL_55;
          }
        }
      }
LABEL_58:
      v33 += 24;
      if (v33 == v34) {
        goto LABEL_59;
      }
    }
  }
  *(void *)int v50 = &__str;
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v49, (unsigned __int8 *)&__str, (long long **)v50);
  int v16 = (unint64_t *)*((void *)v15 + 5);
  int v17 = (unint64_t *)*((void *)v15 + 6);
  if (v16 == v17) {
    goto LABEL_59;
  }
  do
  {
    uint64_t v18 = *(void *)(a1 + 32) + 56;
    *(void *)int v50 = v16;
    int v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, v16, (uint64_t)&std::piecewise_construct, (uint64_t **)v50);
    uint64_t v20 = v19[3];
    uint64_t v21 = v19[4];
    while (v20 != v21)
    {
      uint64_t v22 = *(unsigned __int8 *)(v20 + 23);
      if ((v22 & 0x80u) == 0) {
        uint64_t v23 = *(unsigned __int8 *)(v20 + 23);
      }
      else {
        uint64_t v23 = *(void *)(v20 + 8);
      }
      std::string::size_type v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v24 = __str.__r_.__value_.__l.__size_;
      }
      if (v23 == v24)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((v22 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v20, p_str, *(void *)(v20 + 8))) {
            goto LABEL_35;
          }
LABEL_32:
          uint64_t v27 = (uint64_t **)(*(void *)(a1 + 32) + 352);
          *(void *)int v50 = v20;
          int v28 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (void *)v20, (uint64_t)&std::piecewise_construct, (long long **)v50);
          uint64_t v29 = (uint64_t **)(*(void *)(a1 + 32) + 352);
          *(void *)int v50 = &__p;
          int v30 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, &__p, (uint64_t)&std::piecewise_construct, (long long **)v50);
          *(_OWORD *)(v30 + 56) = *(_OWORD *)(v28 + 56);
          if (v30 != v28) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30 + 72, *((char **)v28 + 9), *((void *)v28 + 10), (uint64_t)(*((void *)v28 + 10) - *((void *)v28 + 9)) >> 2);
          }
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>((uint64_t **)(*(void *)(a1 + 32) + 352), (void *)v20);
          std::string::operator=((std::string *)v20, &__p);
          goto LABEL_35;
        }
        if (!*(unsigned char *)(v20 + 23)) {
          goto LABEL_32;
        }
        uint64_t v26 = 0;
        while (*(unsigned __int8 *)(v20 + v26) == p_str->__r_.__value_.__s.__data_[v26])
        {
          if (v22 == ++v26) {
            goto LABEL_32;
          }
        }
      }
LABEL_35:
      v20 += 24;
    }
    ++v16;
  }
  while (v16 != v17);
LABEL_59:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v48[2]);
  uint64_t v44 = v48[0];
  v48[0] = 0;
  if (v44) {
    operator delete(v44);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v49[2]);
  int v45 = v49[0];
  v49[0] = 0;
  if (v45) {
    operator delete(v45);
  }
}

void sub_192AB5E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>(uint64_t **a1, void *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    uint64_t v4 = v3;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(a1, v3);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void Espresso::pass_transform_static_quantize_kernel::~pass_transform_static_quantize_kernel(Espresso::pass_transform_static_quantize_kernel *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_transform_static_quantize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_transform_static_quantize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389530;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_transform_static_quantize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double non-virtual thunk to'Espresso::ANECompilerEngine::inner_product_kernel::weights_helper_weights_shape@<D0>(Espresso::ANECompilerEngine::inner_product_kernel *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  int32x2_t v2 = vrev64_s32(*(int32x2_t *)((char *)this - 240));
  *(void *)a2 = 0x100000001;
  *(int32x2_t *)(a2 + 8) = v2;
  double result = NAN;
  *(void *)(a2 + 16) = 0xFFFFFFFF00000001;
  return result;
}

void non-virtual thunk to'Espresso::ANECompilerEngine::inner_product_kernel::clear_weights(Espresso::ANECompilerEngine::inner_product_kernel *this)
{
}

void Espresso::ANECompilerEngine::inner_product_kernel::clear_weights(Espresso::ANECompilerEngine::inner_product_kernel *this)
{
  int32x2_t v2 = (char *)this + 760;
  Espresso::generic_inner_product_kernel::clear_weights(this);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 96);
  *(_OWORD *)int32x2_t v2 = 0u;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 98);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void non-virtual thunk to'Espresso::ANECompilerEngine::inner_product_kernel::~inner_product_kernel(Espresso::ANECompilerEngine::inner_product_kernel *this)
{
}

{
  Espresso::generic_inner_product_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  int32x2_t v2 = (Espresso::ANECompilerEngine::inner_product_kernel *)((char *)this - 544);
  *((void *)this - 68) = &unk_1EE344278;
  *(void *)this = &unk_1EE3444A8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
}

void Espresso::ANECompilerEngine::inner_product_kernel::~inner_product_kernel(Espresso::ANECompilerEngine::inner_product_kernel *this)
{
  *(void *)this = &unk_1EE344278;
  int32x2_t v2 = (Espresso::ANECompilerEngine::inner_product_kernel *)((char *)this + 544);
  *((void *)this + 68) = &unk_1EE3444A8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE344278;
  int32x2_t v2 = (Espresso::ANECompilerEngine::inner_product_kernel *)((char *)this + 544);
  *((void *)this + 68) = &unk_1EE3444A8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::inner_product_kernel::compile(Espresso::ANECompilerEngine::inner_product_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::inner_product_kernel::compile(Espresso::ANECompilerEngine::inner_product_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  *((void *)&v183[0] + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4
    || (uint64_t v117 = std::__shared_weak_count::lock(v4)) == 0
    || (unint64_t v7 = (const Espresso::net *)*((void *)a2 + 1)) == 0)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*((void *)v7 + 72)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v139.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  long long v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)v139.__r_.__value_.__l.__data_, (long long **)&v139);
  unint64_t v10 = (_DWORD *)*((void *)v8 + 5);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v116 = v9;
  v139.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)a3, (long long **)&v139);
  unint64_t v13 = (_DWORD *)*((void *)v11 + 5);
  long long v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((void *)a3 + 7) - *((void *)a3 + 6) != 24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v13[3] == 1 && v13[2] == 1)
  {
    int v14 = v10[3] * v10[4] * v10[2];
    if (v14 == *((_DWORD *)this + 77))
    {
      int v15 = *((_DWORD *)this + 76);
      int v16 = *((_DWORD *)this + 78);
      int v17 = *((_DWORD *)this + 89);
      v180[0] = v7;
      v180[1] = (const Espresso::net *)v117;
      uint64_t v18 = *((void *)this + 45);
      uint64_t v19 = *(void *)((char *)this + 316);
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
      memset(v156, 0, 24);
      v156[3] = v19;
      int v157 = v16;
      int v158 = 0;
      int v159 = v15;
      int v160 = v14;
      uint64_t v161 = 0x100000001;
      int v162 = 0;
      int v163 = v17;
      uint64_t v164 = v18;
      uint64_t v166 = 0;
      uint64_t v165 = 0;
      uint64_t v168 = 0x1000100010001;
      uint64_t v170 = 0;
      uint64_t v169 = 0;
      uint64_t v171 = 0x100000001;
      uint64_t v172 = 0;
      int v167 = 0;
      int v173 = 0x10000;
      int v176 = 0;
      uint64_t v174 = 0;
      uint64_t v175 = 0;
      __int16 v177 = 1;
      int v178 = 0;
      char v179 = 0;
      if (v20)
      {
        std::string v154 = v20;
        uint64_t v21 = v116;
        std::string v155 = v116;
        if (v116) {
          atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v21 = 0;
        std::string v155 = 0;
        std::string v154 = 0;
      }
      if (v53)
      {
        uint64_t v152 = v53;
        uint64_t v153 = v12;
        if (v12)
        {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v54 = v12;
        }
        else
        {
          long long v54 = 0;
        }
      }
      else
      {
        long long v54 = 0;
        uint64_t v153 = 0;
        uint64_t v152 = 0;
      }
      Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::inner_product_kernel *>(this, (uint64_t)a2, v180, (uint64_t)v156, (id *)a3, (uint64_t *)&v154, (uint64_t *)&v152);
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      if (v21) {
        nitro::nitro_function::nitro_function(v21);
      }
      nitro::nitro_function::nitro_function(v117);
      if (!v12) {
        goto LABEL_281;
      }
LABEL_280:
      nitro::nitro_function::nitro_function(v12);
      goto LABEL_281;
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v139, (uint64_t)v13);
  BOOL v23 = HIDWORD(v139.__r_.__value_.__r.__words[2]) == -1 || SHIDWORD(v139.__r_.__value_.__r.__words[2]) > 1;
  if (__p)
  {
    unint64_t v142 = (std::string *)__p;
    operator delete(__p);
  }
  if (v23)
  {
    Espresso::abstract_blob_container::shape((char *)&v139, (uint64_t)v13);
    BOOL v24 = HIDWORD(v139.__r_.__value_.__r.__words[0]) == 1;
    if (__p)
    {
      unint64_t v142 = (std::string *)__p;
      operator delete(__p);
    }
  }
  else
  {
    BOOL v24 = 1;
  }
  Espresso::abstract_blob_container::shape((char *)&v139, (uint64_t)v13);
  BOOL v26 = HIDWORD(v139.__r_.__value_.__r.__words[2]) == -1 || SHIDWORD(v139.__r_.__value_.__r.__words[2]) > 2;
  if (__p)
  {
    unint64_t v142 = (std::string *)__p;
    operator delete(__p);
  }
  if (v26)
  {
    Espresso::abstract_blob_container::shape((char *)&v139, (uint64_t)v13);
    if (LODWORD(v139.__r_.__value_.__r.__words[1]) != 1) {
      BOOL v24 = 0;
    }
    if (__p)
    {
      unint64_t v142 = (std::string *)__p;
      operator delete(__p);
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v139, (uint64_t)v13);
  BOOL v28 = HIDWORD(v139.__r_.__value_.__r.__words[2]) == -1 || SHIDWORD(v139.__r_.__value_.__r.__words[2]) > 3;
  if (__p)
  {
    unint64_t v142 = (std::string *)__p;
    operator delete(__p);
  }
  if (v28)
  {
    Espresso::abstract_blob_container::shape((char *)&v139, (uint64_t)v13);
    if (HIDWORD(v139.__r_.__value_.__r.__words[1]) != 1) {
      BOOL v24 = 0;
    }
    if (__p)
    {
      unint64_t v142 = (std::string *)__p;
      operator delete(__p);
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v139, (uint64_t)v13);
  if (LODWORD(v139.__r_.__value_.__r.__words[2]) == 1) {
    int v29 = 4;
  }
  else {
    int v29 = 5;
  }
  if (HIDWORD(v139.__r_.__value_.__r.__words[2]) == -1) {
    int v30 = v29;
  }
  else {
    int v30 = HIDWORD(v139.__r_.__value_.__r.__words[2]);
  }
  if (__p)
  {
    unint64_t v142 = (std::string *)__p;
    operator delete(__p);
  }
  if (v30 >= 5)
  {
    Espresso::abstract_blob_container::shape((char *)&v139, (uint64_t)v13);
    if (LODWORD(v139.__r_.__value_.__r.__words[2]) != 1) {
      BOOL v24 = 0;
    }
    if (__p)
    {
      unint64_t v142 = (std::string *)__p;
      operator delete(__p);
    }
  }
  if (*((_DWORD *)this + 78))
  {
    if ((*((unsigned char *)this + 308) & 0x1F) != 0) {
      BOOL v24 = 0;
    }
  }
  else
  {
    BOOL v24 = 0;
  }
  memset(v151, 0, sizeof(v151));
  obunint64_t j = (id)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v139.__r_.__value_.__l.__data_, (id *)a3);
  uint64_t v31 = v148;
  unint64_t v148 = @"MatrixMultiplication";

  int v150 = 1;
  if (*((char *)a3 + 23) >= 0) {
    size_t v32 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v32 = *((void *)a3 + 1);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v32 + 3);
  BOOL v118 = v24;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v32)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v34 = a3;
    }
    else {
      uint64_t v34 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
    }
    memmove(p_str, v34, v32);
  }
  *(_DWORD *)((char *)&p_str->__r_.__value_.__l.__data_ + v32) = 7823199;
  size_t v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  LOBYTE(v36) = *((unsigned char *)&__str.__r_.__value_.__s + 23);
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v38 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v38 = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v39 = &__str;
  }
  else {
    uint64_t v39 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v38 >= 8)
  {
    uint64_t v115 = v12;
    int v40 = (char *)v39 + v38;
    uint64_t v41 = v39;
    while (1)
    {
      uint64_t v42 = (char *)memchr(v41, 95, v38 - 7);
      if (!v42)
      {
LABEL_94:
        long long v12 = v115;
        goto LABEL_95;
      }
      if (*(void *)v42 == 0x5F6C6C6F726E755FLL) {
        break;
      }
      uint64_t v41 = (std::string *)(v42 + 1);
      int64_t v38 = v40 - (char *)v41;
      if (v40 - (char *)v41 < 8) {
        goto LABEL_94;
      }
    }
    if (v42 == v40)
    {
      long long v12 = v115;
    }
    else
    {
      long long v12 = v115;
      if (v42 - (char *)v39 != -1)
      {
        std::string::basic_string((std::string *)&v120, &__str, 0, v42 - (char *)v39, (std::allocator<char> *)&dest);
        uint64_t v51 = std::string::append((std::string *)&v120, "__w");
        std::string::size_type v52 = v51->__r_.__value_.__r.__words[0];
        v182[0].__r_.__value_.__r.__words[0] = v51->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v182[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
        unsigned int v36 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        __str.__r_.__value_.__r.__words[0] = v52;
        __str.__r_.__value_.__l.__size_ = v182[0].__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v182[0].__r_.__value_.__r.__words + 7);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v36;
        if (SHIBYTE(v120.width) < 0)
        {
          operator delete(v120.data);
          unsigned int v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        size_t v35 = v36;
      }
    }
  }
LABEL_95:
  if ((v36 & 0x80u) == 0) {
    size_t v43 = v35;
  }
  else {
    size_t v43 = size;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v137, v43 + 3);
  if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v44 = &v137;
  }
  else {
    uint64_t v44 = (std::string *)v137.__r_.__value_.__r.__words[0];
  }
  int v45 = v118;
  if (v43)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v46 = &__str;
    }
    else {
      uint64_t v46 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    memmove(v44, v46, v43);
  }
  *(_DWORD *)((char *)&v44->__r_.__value_.__l.__data_ + v43) = 6446943;
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 35), &__str))
  {
    memset(v182, 0, 40);
    (*(void (**)(long long *__return_ptr, Espresso::ANECompilerEngine::inner_product_kernel *))(*(void *)this + 416))(&v136, this);
    if (!(void)v136)
    {
      uint64_t v47 = *((void *)this + 97);
      uint64_t v48 = (std::__shared_weak_count *)*((void *)this + 98);
      if (v48) {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v47) {
        Espresso::throw_exception_selector<Espresso::generic_error>("InnerProduct kernel has no weights");
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v120, (int *)(v47 + 8));
      long long v49 = (std::__shared_weak_count *)*((void *)&v136 + 1);
      long long v136 = *(_OWORD *)&v120.data;
      if (v49)
      {
        nitro::nitro_function::nitro_function(v49);
        data = (void *)v136;
      }
      else
      {
        data = v120.data;
      }
      int v55 = (void *)data[2];
      vImagePixelCount v56 = *(int *)(v47 + 12) * (uint64_t)*(int *)(v47 + 8);
      v120.data = *(void **)(v47 + 16);
      v120.std::string::size_type height = 1;
      v120.width = v56;
      v120.rowBytes = 2 * v56;
      dest.data = v55;
      dest.std::string::size_type height = 1;
      dest.width = v56;
      dest.rowBytes = 4 * v56;
      vImageConvert_Planar16FtoPlanarF(&v120, &dest, 0);
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v134, *((_DWORD *)this + 76), 1, *((_DWORD *)this + 77) + v118, 1);
    if (*((void *)this + 78))
    {
      int v57 = (std::__shared_weak_count *)*((void *)this + 79);
      uint64_t v132 = *((void *)this + 78);
      uint64_t v133 = v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v132, *((_DWORD *)this + 76), 1, 1, 1);
    }
    std::string::operator=(v182, &__str);
    std::string::size_type v58 = v134;
    int v59 = v135;
    if (v135) {
      atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v60 = (std::__shared_weak_count *)v182[1].__r_.__value_.__l.__size_;
    v182[1].__r_.__value_.__r.__words[0] = v58;
    v182[1].__r_.__value_.__l.__size_ = (std::string::size_type)v59;
    if (v60) {
      nitro::nitro_function::nitro_function(v60);
    }
    int v61 = *((_DWORD *)this + 77);
    if (v61 + v118)
    {
      unsigned int v62 = 0;
      unsigned int v63 = 0;
      uint64_t v64 = v136;
      uint64_t v65 = v132;
      uint64_t v66 = *((unsigned int *)this + 76);
      do
      {
        if (v63 == v61)
        {
          if (v66)
          {
            uint64_t v67 = *(int **)(v65 + 16);
            uint64_t v68 = *(void *)(v58 + 24);
            unsigned int v69 = v66 * v61;
            uint64_t v70 = v66;
            do
            {
              int v71 = *v67++;
              *(_DWORD *)(v68 + 4 * v69++) = v71;
              --v70;
            }
            while (v70);
          }
        }
        else if (v66)
        {
          uint64_t v72 = *(void *)(v64 + 16);
          uint64_t v73 = *(void *)(v58 + 24);
          unsigned int v74 = v63;
          unsigned int v75 = v62;
          uint64_t v76 = v66;
          do
          {
            *(_DWORD *)(v73 + 4 * v75++) = *(_DWORD *)(v72 + 4 * v74);
            v74 += v61;
            --v76;
          }
          while (v76);
        }
        ++v63;
        v62 += v66;
      }
      while (v63 != v61 + v118);
    }
    v120.data = &__str;
    char v77 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &__str, (long long **)&v120);
    std::string::operator=((std::string *)(v77 + 56), v182);
    long long v78 = *(_OWORD *)&v182[1].__r_.__value_.__l.__data_;
    if (v182[1].__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v182[1].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    long long v79 = (std::__shared_weak_count *)*((void *)v77 + 11);
    *((_OWORD *)v77 + 5) = v78;
    if (v79) {
      nitro::nitro_function::nitro_function(v79);
    }
    if (!*((_DWORD *)this + 78)) {
      goto LABEL_177;
    }
    if (v118)
    {
      uint64_t v121 = 0;
      memset(&v120, 0, sizeof(v120));
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&dest, 1, 1, 1, 1);
      uint64_t v80 = dest.data;
      **((_DWORD **)dest.data + 3) = 1065353216;
      std::string::operator=(v182, &v137);
      std::string::size_type height = dest.height;
      if (dest.height) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(dest.height + 8), 1uLL, memory_order_relaxed);
      }
      int v82 = (std::__shared_weak_count *)v182[1].__r_.__value_.__l.__size_;
      v182[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      v182[1].__r_.__value_.__l.__size_ = height;
      if (v82) {
        nitro::nitro_function::nitro_function(v82);
      }
      std::string v181 = &v137;
      unint64_t v83 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &v137, (long long **)&v181);
      std::string::operator=((std::string *)(v83 + 56), v182);
      long long v84 = *(_OWORD *)&v182[1].__r_.__value_.__l.__data_;
      if (v182[1].__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v182[1].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v85 = (std::__shared_weak_count *)*((void *)v83 + 11);
      *((_OWORD *)v83 + 5) = v84;
      if (v85) {
        nitro::nitro_function::nitro_function(v85);
      }
      if (!height) {
        goto LABEL_177;
      }
    }
    else
    {
      uint64_t v131 = 0;
      memset(&dest, 0, sizeof(dest));
      int v86 = *(_DWORD *)(*((void *)this + 78) + 8);
      Espresso::abstract_blob_container::shape((char *)&v120, (uint64_t)v13);
      int data_high = HIDWORD(v120.data);
      std::string::size_type height = (std::string::size_type)operator new(0x60uLL);
      *(void *)(height + 8) = 0;
      *(void *)(height + 16) = 0;
      *(void *)std::string::size_type height = &unk_1EE3899C8;
      *(void *)(height + 24) = &unk_1EE36BF10;
      *(_OWORD *)(height + 64) = 0u;
      *(_OWORD *)(height + 80) = 0u;
      *(_DWORD *)(height + 32) = v86;
      *(_DWORD *)(height + 36) = data_high;
      *(void *)(height + 40) = 0x100000001;
      uint64_t v88 = (Espresso *)(4 * v86 * (uint64_t)data_high);
      int64_t v89 = Espresso::kern_alloc_uninitialized(v88);
      bzero(v89, (size_t)v88);
      *(void *)(height + 48) = v89;
      *(unsigned char *)(height + 56) = 1;
      if (v122)
      {
        v123.__begin_ = (std::vector<std::string>::pointer)v122;
        operator delete(v122);
      }
      for (int i = 0; ; ++i)
      {
        Espresso::abstract_blob_container::shape((char *)&v120, (uint64_t)v13);
        int v91 = HIDWORD(v120.data);
        if (v122)
        {
          v123.__begin_ = (std::vector<std::string>::pointer)v122;
          operator delete(v122);
        }
        if (i >= v91) {
          break;
        }
        memcpy((void *)(*(void *)(height + 48) + 4 * *(_DWORD *)(*((void *)this + 78) + 8) * i), *(const void **)(*((void *)this + 78) + 16), 4 * *(int *)(*((void *)this + 78) + 8));
      }
      std::string::operator=(v182, &v137);
      int v45 = v118;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(height + 8), 1uLL, memory_order_relaxed);
      BOOL v92 = (std::__shared_weak_count *)v182[1].__r_.__value_.__l.__size_;
      v182[1].__r_.__value_.__r.__words[0] = height + 24;
      v182[1].__r_.__value_.__l.__size_ = height;
      if (v92) {
        nitro::nitro_function::nitro_function(v92);
      }
      v120.data = &v137;
      int v93 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &v137, (long long **)&v120);
      std::string::operator=((std::string *)(v93 + 56), v182);
      long long v94 = *(_OWORD *)&v182[1].__r_.__value_.__l.__data_;
      if (v182[1].__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v182[1].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v95 = (std::__shared_weak_count *)*((void *)v93 + 11);
      *((_OWORD *)v93 + 5) = v94;
      if (v95) {
        nitro::nitro_function::nitro_function(v95);
      }
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)height);
LABEL_177:
    if (v133) {
      nitro::nitro_function::nitro_function(v133);
    }
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    if (*((void *)&v136 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v136 + 1));
    }
    if (v182[1].__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v182[1].__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v182[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v182[0].__r_.__value_.__l.__data_);
    }
  }
  if (*((_DWORD *)this + 78) && v45)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v120.data, (id *)a3);
    long long v96 = objc_opt_new();
    [v96 setObject:@"Width" forKeyedSubscript:@"Dimension"];
    long long v97 = v127;
    unint64_t v127 = @"Concat";

    int v129 = 1;
    objc_storeStrong(&v128, v96);
    if ((v120.width & 0x8000000000000000) == 0) {
      vImagePixelCount width_high = HIBYTE(v120.width);
    }
    else {
      vImagePixelCount width_high = v120.height;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v182, width_high + 12);
    if ((v182[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v99 = v182;
    }
    else {
      long long v99 = (std::string *)v182[0].__r_.__value_.__r.__words[0];
    }
    if (width_high)
    {
      if ((v120.width & 0x8000000000000000) == 0) {
        long long v100 = &v120;
      }
      else {
        long long v100 = v120.data;
      }
      memmove(v99, v100, width_high);
    }
    strcpy((char *)v99 + width_high, "__concat_one");
    if (SHIBYTE(v120.width) < 0) {
      operator delete(v120.data);
    }
    *(_OWORD *)&v120.data = *(_OWORD *)&v182[0].__r_.__value_.__l.__data_;
    v120.width = v182[0].__r_.__value_.__r.__words[2];
    if (SHIBYTE(v142->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v182, v142->__r_.__value_.__l.__data_, v142->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v101 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
      v182[0].__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v182[0].__r_.__value_.__l.__data_ = v101;
    }
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v182[1], v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
    }
    else {
      v182[1] = v137;
    }
    long long v102 = v12;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v123, v182, v183, 2uLL);
    for (unint64_t j = 0; j != 0x1FFFFFFFFFFFFFFALL; j -= 3)
    {
      if (SHIBYTE(v182[1].__r_.__value_.__r.__words[j + 2]) < 0) {
        operator delete(v182[j / 3 + 1].__r_.__value_.__l.__data_);
      }
    }
    long long v12 = v102;
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v120);
    int v45 = v118;
    std::string::operator=(v142, (const std::string *)&v120);

    if (v125 < 0) {
      operator delete(v124);
    }
    v182[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v182);
    v182[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v120.rowBytes;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v182);
    if (SHIBYTE(v120.width) < 0) {
      operator delete(v120.data);
    }
  }
  uint64_t v104 = v143;
  if ((unint64_t)v143 >= v144)
  {
    uint64_t v106 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v142, (uint64_t)&__str);
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v143, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v105 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      v143->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v105;
    }
    uint64_t v106 = v104 + 1;
  }
  unint64_t v143 = v106;
  objc_storeStrong(&v149, obj);
  if (*((_DWORD *)this + 78)) {
    int v107 = v45;
  }
  else {
    int v107 = 1;
  }
  if (v107 != 1 || *((_DWORD *)this + 79) || *((_DWORD *)this + 80)) {
    std::string::append(&v139, "__matmul");
  }
  Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v139);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&dest, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&dest.data = *(_OWORD *)&v139.__r_.__value_.__l.__data_;
    dest.width = v139.__r_.__value_.__r.__words[2];
  }
  if (*((_DWORD *)this + 78) && (v45 & 1) == 0)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v120.data, (id *)a3);
    uint64_t v108 = objc_opt_new();
    [v108 setObject:@"Add" forKeyedSubscript:@"Type"];
    uint64_t v109 = v127;
    unint64_t v127 = @"ElementWise";

    objc_storeStrong(&v128, v108);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(v182, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
    }
    else {
      v182[0] = v139;
    }
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v182[1], v137.__r_.__value_.__l.__data_, v137.__r_.__value_.__l.__size_);
    }
    else {
      v182[1] = v137;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v123, v182, v183, 2uLL);
    for (unint64_t k = 0; k != 0x1FFFFFFFFFFFFFFALL; k -= 3)
    {
      if (SHIBYTE(v182[1].__r_.__value_.__r.__words[k + 2]) < 0) {
        operator delete(v182[k / 3 + 1].__r_.__value_.__l.__data_);
      }
    }
    if (*((_DWORD *)this + 79) || *((_DWORD *)this + 80)) {
      std::string::append((std::string *)&v120, "__bias");
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v120);
    std::string::operator=((std::string *)&dest, (const std::string *)&v120);

    if (v125 < 0) {
      operator delete(v124);
    }
    v182[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v182);
    v182[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v120.rowBytes;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v182);
    if (SHIBYTE(v120.width) < 0) {
      operator delete(v120.data);
    }
  }
  if (*((_DWORD *)this + 79))
  {
    long long v111 = objc_opt_new();
    [v111 setObject:@"ReLU" forKeyedSubscript:@"Type"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v120.data, (id *)a3);
    long long v112 = v127;
    unint64_t v127 = @"Neuron";

    objc_storeStrong(&v128, v111);
    if (SHIBYTE(dest.width) < 0)
    {
      std::string::__init_copy_ctor_external(v182, (const std::string::value_type *)dest.data, dest.height);
    }
    else
    {
      *(_OWORD *)&v182[0].__r_.__value_.__l.__data_ = *(_OWORD *)&dest.data;
      v182[0].__r_.__value_.__r.__words[2] = dest.width;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v123, v182, (long long *)&v182[1], 1uLL);
    if (SHIBYTE(v182[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v182[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (!*((_DWORD *)this + 80)) {
      goto LABEL_269;
    }
    long long v111 = objc_opt_new();
    [v111 setObject:@"Tanh" forKeyedSubscript:@"Type"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v120.data, (id *)a3);
    uint64_t v113 = v127;
    unint64_t v127 = @"Neuron";

    objc_storeStrong(&v128, v111);
    if (SHIBYTE(dest.width) < 0)
    {
      std::string::__init_copy_ctor_external(v182, (const std::string::value_type *)dest.data, dest.height);
    }
    else
    {
      *(_OWORD *)&v182[0].__r_.__value_.__l.__data_ = *(_OWORD *)&dest.data;
      v182[0].__r_.__value_.__r.__words[2] = dest.width;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v123, v182, (long long *)&v182[1], 1uLL);
    if (SHIBYTE(v182[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v182[0].__r_.__value_.__l.__data_);
    }
  }
  Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v120);

  if (v125 < 0) {
    operator delete(v124);
  }
  v182[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v182);
  v182[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v120.rowBytes;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v182);
  if (SHIBYTE(v120.width) < 0) {
    operator delete(v120.data);
  }

LABEL_269:
  if (SHIBYTE(dest.width) < 0) {
    operator delete(dest.data);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

  if (v146 < 0) {
    operator delete(v145);
  }
  v120.data = &v142;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  v120.data = &v140;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }

  v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
  if (v12) {
    goto LABEL_280;
  }
LABEL_281:
  if (v116) {
    nitro::nitro_function::nitro_function(v116);
  }
  nitro::nitro_function::nitro_function(v117);
}

void sub_192AB7614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a58);

  a58 = (uint64_t)&a72;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::inner_product_kernel *>(void *a1, uint64_t a2, const Espresso::net **a3, uint64_t a4, id *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v517 = *MEMORY[0x1E4F143B8];
  int v418 = *(unsigned __int8 *)(a2 + 552);
  memset(v484, 0, sizeof(v484));
  uint64_t v11 = *a3;
  unint64_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape(v480, *a6);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v483, v11, (const Espresso::layer_shape *)v480, 1);
  if (__p)
  {
    char v482 = __p;
    operator delete(__p);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  unint64_t v13 = *a3;
  long long v12 = (std::__shared_weak_count *)a3[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape(v476, *a7);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v479, v13, (const Espresso::layer_shape *)v476, 1);
  if (v477)
  {
    __int16 v478 = v477;
    operator delete(v477);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  int v14 = *a3;
  int v15 = a5[6];
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)*a3 + 45), v15))
  {
    *(void *)buf = v15;
    int v16 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v14 + 44, v15, (uint64_t)&std::piecewise_construct, (long long **)buf);
    *(_OWORD *)&v495.__r_.__value_.__l.__data_ = *(_OWORD *)(v16 + 56);
    v496[1] = 0;
    v495.__r_.__value_.__r.__words[2] = 0;
    v496[0] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v495.__r_.__value_.__r.__words[2], *((const void **)v16 + 9), *((void *)v16 + 10), (uint64_t)(*((void *)v16 + 10) - *((void *)v16 + 9)) >> 2);
    if (LODWORD(v495.__r_.__value_.__r.__words[1]) == -1) {
      int v17 = 1;
    }
    else {
      int v17 = v495.__r_.__value_.__r.__words[1];
    }
    if (v495.__r_.__value_.__r.__words[2])
    {
      v496[0] = *((void *)&v495.__r_.__value_.__l + 2);
      operator delete((void *)v495.__r_.__value_.__r.__words[2]);
    }
    int v14 = *a3;
  }
  else
  {
    int v17 = 1;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v14 + 472);
  v419 = __int16 v475 = 0;
  Espresso::ANECompilerEngine::query_dilation_options(a4, 0, v17, (char *)&v475 + 1, &v475, v419);
  int v19 = *(_DWORD *)(a4 + 48);
  int v18 = *(_DWORD *)(a4 + 52);
  int v20 = *(__int16 *)(a4 + 96);
  BOOL v21 = v20 < 2;
  int v22 = *(__int16 *)(a4 + 98);
  if (HIBYTE(v475))
  {
    BOOL v23 = v22 < 2;
  }
  else
  {
    BOOL v21 = 1;
    BOOL v23 = 1;
  }
  if (v21) {
    uint64_t v24 = v19;
  }
  else {
    uint64_t v24 = ((v19 - 1) * v20 + 1);
  }
  if (v23) {
    uint64_t v25 = v18;
  }
  else {
    uint64_t v25 = ((v18 - 1) * v22 + 1);
  }
  BOOL v26 = v20 >= 2 && v19 > 1 || v22 > 1 && v18 > 1;
  BOOL v421 = v26;
  BOOL v28 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  v423 = [v28 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse((uint64_t)*a3 + 472, v423);
  uint64_t v29 = (uint64_t)a5[6];
  if ((char *)a5[7] - v29 != (unsigned char *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v30 = *a6;
  if (!*a6)
  {
    if (*(char *)(v29 + 23) < 0) {
      uint64_t v29 = *(void *)v29;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v29);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v375 = (uint64_t)a5;
    }
    else {
      uint64_t v375 = (uint64_t)*a5;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v375);
  }
  long long v473 = 0;
  uint64_t v472 = 0;
  unint64_t v474 = 0;
  if (a1 && *((unsigned char *)a1 + 840) && (*(int *)(v30 + 8) > 1 || *(int *)(v30 + 12) >= 2))
  {
    uint64_t v31 = objc_opt_new();
    [v31 setObject:@"NCHW" forKeyedSubscript:@"Mode"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
    size_t v32 = v503;
    v503 = @"Flatten";

    objc_storeStrong(&v504, v31);
    unint64_t v33 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
    if (v33 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v34 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
    if (v34 <= v33 + 1) {
      unint64_t v34 = v33 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v35 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v35 = v34;
    }
    *((void *)&v508 + 1) = &v474;
    if (v35) {
      unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v35);
    }
    else {
      uint64_t v36 = 0;
    }
    *(void *)buf = v35;
    *(void *)&uint8_t buf[8] = v35 + 16 * (((uint64_t)v473 - v472) >> 4);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v508 = v35 + 144 * v36;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
    int v37 = v473;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    long long v473 = v37;

    if (v501 < 0) {
      operator delete(v500);
    }
    *(void *)buf = &v497;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)buf = v496;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v495.__r_.__value_.__l.__data_);
    }
  }
  int64_t v38 = objc_opt_new();
  [v38 setObject:@"Dense" forKeyedSubscript:@"KernelMode"];
  if (*((unsigned char *)a1 + 754))
  {
    [v38 setObject:@"Unity" forKeyedSubscript:@"KernelMode"];
    [v38 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  }
  uint64_t v39 = [NSNumber numberWithInt:v24];
  [v38 setObject:v39 forKeyedSubscript:@"KernelWidth"];

  int v40 = [NSNumber numberWithInt:v25];
  [v38 setObject:v40 forKeyedSubscript:@"KernelHeight"];

  int v41 = *(_DWORD *)(a4 + 116);
  if (v41 >= 2 && v41 == *(_DWORD *)(a4 + 44) && v41 == *(_DWORD *)(a4 + 40))
  {
    [v38 setObject:@"ChannelWiseConv" forKeyedSubscript:@"Type"];
    uint64_t v42 = @"ChannelWiseDilatedConv";
  }
  else
  {
    [v38 setObject:@"Conv" forKeyedSubscript:@"Type"];
    uint64_t v42 = @"DilatedConv";
  }
  obuint64_t j = v42;
  int v420 = *(_DWORD *)(a4 + 116);
  [v38 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"KernelGroupReuse"];
  if (*((unsigned char *)a1 + 753)) {
    [v38 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"KernelGroupReuse"];
  }
  if (*((unsigned char *)a1 + 754)) {
    goto LABEL_196;
  }
  uint64_t v44 = (std::__shared_weak_count *)a3[1];
  long long v470 = *a3;
  v471 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "post_scale");
  BOOL v45 = ((*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v470, a1, &v495) & 0x80000000) == 0|| a1[76] != 0;
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v471) {
    nitro::nitro_function::nitro_function(v471);
  }
  uint64_t v46 = (std::__shared_weak_count *)a3[1];
  v468 = *a3;
  v469 = v46;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "W_S8");
  uint64_t v47 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v468, a1, &v495);
  if ((int)v47 < 0) {
    BOOL v45 = 0;
  }
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v469) {
    nitro::nitro_function::nitro_function(v469);
  }
  if (v45)
  {
    uint64_t v48 = (std::__shared_weak_count *)a3[1];
    v466 = *a3;
    unint64_t v467 = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "W_S8");
    (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v466, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v467) {
      nitro::nitro_function::nitro_function(v467);
    }
    long long v49 = [NSNumber numberWithInt:v47];
    [v38 setObject:v49 forKeyedSubscript:@"KernelOffset"];

    int v50 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__l.__data_, (const void *)v495.__r_.__value_.__r.__words[2]));
    [v38 setObject:v50 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
    if (a1) {
      uint64_t v51 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      uint64_t v51 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v51, v495.__r_.__value_.__l.__data_);
    goto LABEL_196;
  }
  std::string::size_type v52 = (std::__shared_weak_count *)a3[1];
  v464 = *a3;
  v465 = v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "W_int8");
  uint64_t v53 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v464, a1, &v495);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v465) {
    nitro::nitro_function::nitro_function(v465);
  }
  if ((v53 & 0x80000000) == 0)
  {
    long long v54 = (std::__shared_weak_count *)a3[1];
    v462 = *a3;
    v463 = v54;
    if (v54) {
      atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "W_int8");
    (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v462, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v463) {
      nitro::nitro_function::nitro_function(v463);
    }
    int v55 = [NSNumber numberWithInt:v53];
    [v38 setObject:v55 forKeyedSubscript:@"KernelOffset"];

    vImagePixelCount v56 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__l.__data_, (const void *)v495.__r_.__value_.__r.__words[2]));
    [v38 setObject:v56 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
    if (a1) {
      int v57 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      int v57 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v57, v495.__r_.__value_.__l.__data_);
    goto LABEL_196;
  }
  std::string::size_type v58 = (std::__shared_weak_count *)a3[1];
  v460 = *a3;
  v461 = v58;
  if (v58) {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "blob_weights");
  uint64_t v59 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v460, a1, &v495);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v461) {
    nitro::nitro_function::nitro_function(v461);
  }
  if ((v59 & 0x80000000) == 0)
  {
    int v60 = (std::__shared_weak_count *)a3[1];
    v458 = *a3;
    uint64_t v459 = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
    (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v458, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v459) {
      nitro::nitro_function::nitro_function(v459);
    }
    int v61 = [NSNumber numberWithInt:v59];
    [v38 setObject:v61 forKeyedSubscript:@"KernelOffset"];

    unsigned int v62 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__l.__data_, (const void *)v495.__r_.__value_.__r.__words[2]));
    [v38 setObject:v62 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
    if (a1) {
      unsigned int v63 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      unsigned int v63 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v63, v495.__r_.__value_.__l.__data_);
    goto LABEL_196;
  }
  uint64_t v64 = (std::__shared_weak_count *)a3[1];
  v456 = *a3;
  v457 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "blob_weights_f16");
  uint64_t v65 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v456, a1, &v495);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v457) {
    nitro::nitro_function::nitro_function(v457);
  }
  if ((v65 & 0x80000000) == 0)
  {
    uint64_t v66 = (std::__shared_weak_count *)a3[1];
    uint64_t v454 = *a3;
    v455 = v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
    (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v454, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v455) {
      nitro::nitro_function::nitro_function(v455);
    }
    uint64_t v67 = [NSNumber numberWithInt:v65];
    [v38 setObject:v67 forKeyedSubscript:@"KernelOffset"];

    uint64_t v68 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__l.__data_, (const void *)v495.__r_.__value_.__r.__words[2]));
    [v38 setObject:v68 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
    if (a1) {
      unsigned int v69 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      unsigned int v69 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v69, v495.__r_.__value_.__l.__data_);
    goto LABEL_196;
  }
  if (a1[97])
  {
    uint64_t v70 = (std::__shared_weak_count *)a1[98];
    if (a1) {
      int v71 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      int v71 = 0;
    }
    v453[0] = a1[97];
    v453[1] = v70;
    if (v70) {
      atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v71, v453);
    if (v70) {
      nitro::nitro_function::nitro_function(v70);
    }
    std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,unsigned short *&,int,void>(&v495, *(void *)(a1[97] + 16), 2 * *(_DWORD *)(a1[97] + 8) * *(_DWORD *)(a1[97] + 12));
    std::string::size_type size = (std::__shared_weak_count *)v495.__r_.__value_.__l.__size_;
    std::string::size_type v72 = v495.__r_.__value_.__r.__words[0];
    if (v495.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v495.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v74 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v72 + 16), *(int *)(v72 + 8));
    if (size) {
      nitro::nitro_function::nitro_function(size);
    }
    unsigned int v75 = [NSNumber numberWithInt:v74];
    [v38 setObject:v75 forKeyedSubscript:@"KernelOffset"];

    uint64_t v76 = NSNumber;
    if (v418) {
      uint64_t weights_file_index = 0;
    }
    else {
    int v86 = [v76 numberWithUnsignedLong:weights_file_index];
    }
    [v38 setObject:v86 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
    goto LABEL_177;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&v495, a1);
  std::string::size_type v78 = v495.__r_.__value_.__r.__words[0];
  if (v495.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v495.__r_.__value_.__l.__size_);
  }
  if (v78)
  {
    (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&v495, a1);
    if (a1) {
      long long v79 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      long long v79 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v79, &v495);
    std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,unsigned short *&,int,void>(buf, *(void *)(v495.__r_.__value_.__r.__words[0] + 16), 4 * *(_DWORD *)(v495.__r_.__value_.__r.__words[0] + 8) * *(_DWORD *)(v495.__r_.__value_.__r.__words[0] + 12));
    uint64_t v80 = *(void *)buf;
    int v81 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v82 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v80 + 16), *(int *)(v80 + 8));
    if (v81) {
      nitro::nitro_function::nitro_function(v81);
    }
    unint64_t v83 = [NSNumber numberWithInt:v82];
    [v38 setObject:v83 forKeyedSubscript:@"KernelOffset"];

    long long v84 = NSNumber;
    if (v418) {
      uint64_t v85 = 0;
    }
    else {
    uint64_t v90 = [v84 numberWithUnsignedLong:v85];
    }
    [v38 setObject:v90 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
    if (v81) {
      nitro::nitro_function::nitro_function(v81);
    }
    int64_t v87 = (std::__shared_weak_count *)v495.__r_.__value_.__l.__size_;
    if (!v495.__r_.__value_.__l.__size_) {
      goto LABEL_196;
    }
    goto LABEL_195;
  }
  uint64_t v88 = (Espresso::quantized_weights_helper *)a1[55];
  if (!v88
    || !*(void *)v88
    || !*((void *)v88 + 4) && !*((void *)v88 + 6) && !*((void *)v88 + 8) && !*((void *)v88 + 10))
  {
    uint64_t v326 = *a1;
    if (!v327)
    {
      char v334 = 0;
      goto LABEL_663;
    }
    unint64_t v328 = v327;
    (*(void (**)(std::string *__return_ptr))(*(void *)v327 + 568))(&v495);
    std::string::size_type v329 = v495.__r_.__value_.__r.__words[0];
    if (!v495.__r_.__value_.__r.__words[0]) {
      goto LABEL_658;
    }
    v330 = v328 + 536;
    if (v328[559] < 0)
    {
      uint64_t v335 = *((void *)v328 + 68);
      if (v335 != 4)
      {
        if (v335 != 6) {
          goto LABEL_658;
        }
        if (**(_DWORD **)v330 != 1852399447 || *(_WORD *)(*(void *)v330 + 4) != 14452) {
          goto LABEL_658;
        }
        goto LABEL_652;
      }
      v332 = *(_DWORD **)v330;
    }
    else
    {
      int v331 = v328[559];
      v332 = v328 + 536;
      if (v331 != 4)
      {
        if (v331 != 6) {
          goto LABEL_658;
        }
        if (*(_DWORD *)v330 != 1852399447 || *((_WORD *)v328 + 270) != 14452) {
          goto LABEL_658;
        }
        goto LABEL_652;
      }
    }
    if (*v332 != 947216215)
    {
LABEL_658:
      char v334 = 0;
LABEL_659:
      if (v495.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v495.__r_.__value_.__l.__size_);
      }
      if (!a1) {
        goto LABEL_694;
      }
      uint64_t v326 = *a1;
LABEL_663:
      v346 = (unsigned int *)(*(uint64_t (**)(void *))(v326 + 384))(a1);
      if (v346[9] == 1)
      {
        vDSP_Length v347 = v346[1];
        uint64_t v402 = *v346;
        v348 = (std::__shared_weak_count *)a3[1];
        int v449 = *a3;
        int v450 = v348;
        if (v348) {
          atomic_fetch_add_explicit(&v348->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_8bit");
        (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v449, a1, buf);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v450) {
          nitro::nitro_function::nitro_function(v450);
        }
        uint64_t v349 = (std::__shared_weak_count *)a3[1];
        v447 = *a3;
        char v448 = v349;
        if (v349) {
          atomic_fetch_add_explicit(&v349->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "Qscale");
        (*(void (**)(unsigned char *__return_ptr, void *, const Espresso::net **, void *, std::string *))(a1[68] + 120))(buf, a1 + 68, &v447, a1, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v448) {
          nitro::nitro_function::nitro_function(v448);
        }
        int v350 = (std::__shared_weak_count *)a3[1];
        int v445 = *a3;
        v446 = v350;
        if (v350) {
          atomic_fetch_add_explicit(&v350->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v489, "Qbias");
        (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, void **))(a1[68] + 120))(&__str, a1 + 68, &v445, a1, &v489);
        if (SHIBYTE(v491) < 0) {
          operator delete(v489);
        }
        vDSP_Length v414 = v347;
        if (v446) {
          nitro::nitro_function::nitro_function(v446);
        }
        std::string::size_type v351 = v495.__r_.__value_.__r.__words[0];
        if (v495.__r_.__value_.__r.__words[0])
        {
          uint64_t v352 = *(void *)buf;
          if (*(void *)buf)
          {
            std::string::size_type v353 = __str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__r.__words[0])
            {
              v354 = (char *)operator new(0x58uLL);
              *((void *)v354 + 1) = 0;
              *((void *)v354 + 2) = 0;
              *(void *)v354 = &unk_1EE389AA8;
              *((void *)v354 + 3) = &unk_1EE36BF90;
              *(_OWORD *)(v354 + 56) = 0u;
              *(_OWORD *)(v354 + 72) = 0u;
              *((_DWORD *)v354 + 8) = v402;
              *((_DWORD *)v354 + 9) = v414;
              *((void *)v354 + 5) = v351;
              v411 = (std::__shared_weak_count *)v354;
              v354[48] = 0;
              uint64_t v355 = (char *)operator new(0x58uLL);
              *((void *)v355 + 1) = 0;
              *((void *)v355 + 2) = 0;
              *(void *)uint64_t v355 = &unk_1EE389920;
              *((void *)v355 + 3) = &unk_1EE36BEB0;
              *(_OWORD *)(v355 + 56) = 0u;
              *(_OWORD *)(v355 + 72) = 0u;
              *((_DWORD *)v355 + 8) = v402;
              *((void *)v355 + 5) = v352;
              v408 = (std::__shared_weak_count *)v355;
              v355[48] = 0;
              uint64_t v356 = (char *)operator new(0x58uLL);
              *((void *)v356 + 1) = 0;
              *((void *)v356 + 2) = 0;
              *(void *)uint64_t v356 = &unk_1EE389920;
              *((void *)v356 + 3) = &unk_1EE36BEB0;
              *(_OWORD *)(v356 + 56) = 0u;
              *(_OWORD *)(v356 + 72) = 0u;
              *((_DWORD *)v356 + 8) = v402;
              *((void *)v356 + 5) = v353;
              v406 = (std::__shared_weak_count *)v356;
              v356[48] = 0;
              vDSP_Length v357 = v414;
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v489, 4 * v402 * v414, 1, 1, 1);
              v405 = (int *)v489;
              if (v402)
              {
                unsigned int v358 = 0;
                uint64_t v359 = 0;
                uint64_t v360 = 0;
                uint64_t v403 = 4 * v402;
                uint64_t v404 = 4 * v414;
                do
                {
                  unsigned int v415 = v358;
                  v361 = (float *)(*((void *)v405 + 2) + v359);
                  vDSP_vfltu8((const unsigned __int8 *)(v411[1].__shared_weak_owners_ + v358), 1, v361, 1, v357);
                  vDSP_vsmul(v361, 1, (const float *)(v408[1].__shared_weak_owners_ + v360), v361, 1, v357);
                  vDSP_vsadd(v361, 1, (const float *)(v406[1].__shared_weak_owners_ + v360), v361, 1, v357);
                  v360 += 4;
                  v359 += v404;
                  unsigned int v358 = v415 + v357;
                }
                while (v403 != v360);
              }
              v362 = v490;
              if (v490) {
                atomic_fetch_add_explicit(&v490->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v363 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v405 + 2), v405[2]);
              if (v362) {
                nitro::nitro_function::nitro_function(v362);
              }
              unint64_t v364 = [NSNumber numberWithInt:v363];
              [v38 setObject:v364 forKeyedSubscript:@"KernelOffset"];

              v365 = NSNumber;
              if (v418) {
                uint64_t v366 = 0;
              }
              else {
              uint64_t v367 = [v365 numberWithUnsignedLong:v366];
              }
              [v38 setObject:v367 forKeyedSubscript:@"KernelIndex"];

              [v38 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
              if (v362) {
                nitro::nitro_function::nitro_function(v362);
              }
              nitro::nitro_function::nitro_function(v406);
              nitro::nitro_function::nitro_function(v408);
              int64_t v87 = v411;
              goto LABEL_195;
            }
          }
        }
      }
LABEL_694:
      if ((v334 & 1) == 0) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
      }
      goto LABEL_196;
    }
LABEL_652:
    v410 = v328 + 536;
    uint64_t v337 = 0;
    int v338 = *(_DWORD *)(v495.__r_.__value_.__r.__words[0] + 8);
    do
    {
      v338 *= *(_DWORD *)(v495.__r_.__value_.__r.__words[0] + 12 + v337);
      v337 += 4;
    }
    while (v337 != 12);
    v339 = (char *)operator new(0x58uLL);
    *((void *)v339 + 1) = 0;
    *((void *)v339 + 2) = 0;
    *(void *)v339 = &unk_1EE389A70;
    v340 = *(const unsigned __int8 **)(v329 + 24);
    *((void *)v339 + 3) = &unk_1EE36BF70;
    *(_OWORD *)(v339 + 72) = 0u;
    *(_OWORD *)(v339 + 56) = 0u;
    *((_DWORD *)v339 + 8) = v338;
    *((void *)v339 + 5) = v340;
    v339[48] = 0;
    v341 = (std::__shared_weak_count *)v339;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v339 + 1, 1uLL, memory_order_relaxed);
    v413 = (std::__shared_weak_count *)v339;
    uint64_t v342 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v340, v338);
    nitro::nitro_function::nitro_function(v341);
    uint64_t v343 = [NSNumber numberWithInt:v342];
    [v38 setObject:v343 forKeyedSubscript:@"KernelOffset"];

    v344 = NSNumber;
    if (v418) {
      uint64_t v345 = 0;
    }
    else {
    unint64_t v368 = [v344 numberWithUnsignedLong:v345];
    }
    [v38 setObject:v368 forKeyedSubscript:@"KernelIndex"];

    if (v328[559] < 0)
    {
      uint64_t v371 = *((void *)v328 + 68);
      if (v371 != 4)
      {
        if (v371 != 6) {
          goto LABEL_720;
        }
        if (**(_DWORD **)v410 != 1852399447 || *(_WORD *)(*(void *)v410 + 4) != 14452) {
          goto LABEL_720;
        }
LABEL_717:
        unint64_t v373 = @"Int8";
        goto LABEL_722;
      }
      v410 = *(char **)v410;
    }
    else
    {
      int v369 = v328[559];
      if (v369 != 4)
      {
        if (v369 != 6) {
          goto LABEL_720;
        }
        if (*(_DWORD *)v410 != 1852399447 || *((_WORD *)v328 + 270) != 14452) {
          goto LABEL_720;
        }
        goto LABEL_717;
      }
    }
    if (*(_DWORD *)v410 != 947216215)
    {
LABEL_720:
      char v334 = 0;
LABEL_723:
      nitro::nitro_function::nitro_function(v413);
      goto LABEL_659;
    }
    unint64_t v373 = @"UInt8";
LABEL_722:
    [v38 setObject:v373 forKeyedSubscript:@"KernelType"];
    char v334 = 1;
    goto LABEL_723;
  }
  std::string::size_type size = (std::__shared_weak_count *)a3[1];
  v452[0] = (uint64_t)*a3;
  v452[1] = (uint64_t)size;
  if (size)
  {
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v88 = (Espresso::quantized_weights_helper *)a1[55];
  }
  int64_t v89 = (atomic_ullong *)a1[56];
  v451[0] = v88;
  v451[1] = (Espresso::quantized_weights_helper *)v89;
  if (v89) {
    atomic_fetch_add_explicit(v89 + 1, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>((char *)a1, a2, v452, v451, v38, (uint64_t *)v484);
  if (v89) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v89);
  }
LABEL_177:
  if (size)
  {
    int64_t v87 = size;
LABEL_195:
    nitro::nitro_function::nitro_function(v87);
  }
LABEL_196:
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v423, v43);
  int v91 = [NSNumber numberWithInt:*(__int16 *)(a4 + 92)];
  v506[0] = v91;
  BOOL v92 = [NSNumber numberWithInt:*(__int16 *)(a4 + 94)];
  v506[1] = v92;
  int v93 = [MEMORY[0x1E4F1C978] arrayWithObjects:v506 count:2];
  [v38 setObject:v93 forKeyedSubscript:@"Step"];

  int v94 = HIBYTE(v475);
  BOOL v95 = v421;
  if (HIBYTE(v475)) {
    BOOL v95 = 0;
  }
  if (v95 && !(_BYTE)v475)
  {
    LODWORD(v24) = (v24 - 1) * *(__int16 *)(a4 + 96) + 1;
    LODWORD(v25) = (v25 - 1) * *(__int16 *)(a4 + 98) + 1;
  }
  int v96 = *(__int16 *)(a4 + 72);
  switch(v96)
  {
    case 4:
      goto LABEL_204;
    case 2:
      goto LABEL_239;
    case 1:
LABEL_204:
      int v97 = v25 + (*(_DWORD *)(*a7 + 12) - 1) * *(__int16 *)(a4 + 94) - *(_DWORD *)(*a6 + 12);
      unsigned int v98 = v97 & ~(v97 >> 31);
      int v99 = v24 + (*(_DWORD *)(*a7 + 8) - 1) * *(__int16 *)(a4 + 92) - *(_DWORD *)(*a6 + 8);
      unsigned int v100 = v99 & ~(v99 >> 31);
      uint64_t v101 = v100 - (v100 >> 1);
      unsigned int v102 = v98 - (v98 >> 1);
      if (*(_WORD *)(a4 + 72) == 1)
      {
        uint64_t v103 = v98 - (v98 >> 1);
        unsigned int v102 = v98 >> 1;
        uint64_t v104 = v100 - (v100 >> 1);
        uint64_t v101 = v100 >> 1;
        if (v98 >> 1) {
          goto LABEL_214;
        }
      }
      else
      {
        uint64_t v103 = v98 >> 1;
        uint64_t v104 = v100 >> 1;
        if (v102) {
          goto LABEL_214;
        }
      }
      break;
    default:
      uint64_t v101 = *(__int16 *)(a4 + 80);
      uint64_t v104 = *(__int16 *)(a4 + 82);
      unsigned int v102 = *(__int16 *)(a4 + 84);
      uint64_t v103 = *(__int16 *)(a4 + 86);
      if (*(_WORD *)(a4 + 84)) {
        goto LABEL_214;
      }
      break;
  }
  if (!v103 && !v101)
  {
    if (!v104) {
      goto LABEL_239;
    }
    uint64_t v103 = 0;
    uint64_t v101 = 0;
    goto LABEL_215;
  }
LABEL_214:
  if ((v102 & 0x80000000) == 0)
  {
LABEL_215:
    long long v105 = objc_msgSend(NSNumber, "numberWithInt:");
    int v106 = 1;
    goto LABEL_217;
  }
  int v106 = 0;
  long long v105 = &unk_1EE3AEF68;
LABEL_217:
  [v38 setObject:v105 forKeyedSubscript:@"PadTop"];
  if (v106) {

  }
  if ((v103 & 0x80000000) != 0)
  {
    int v107 = &unk_1EE3AEF68;
  }
  else
  {
    int v107 = [NSNumber numberWithInt:v103];
  }
  [v38 setObject:v107 forKeyedSubscript:@"PadBot"];
  if ((v103 & 0x80000000) == 0) {

  }
  if ((v101 & 0x80000000) != 0)
  {
    uint64_t v108 = &unk_1EE3AEF68;
  }
  else
  {
    uint64_t v108 = [NSNumber numberWithInt:v101];
  }
  [v38 setObject:v108 forKeyedSubscript:@"PadLeft"];
  if ((v101 & 0x80000000) == 0) {

  }
  if ((v104 & 0x80000000) != 0)
  {
    uint64_t v109 = &unk_1EE3AEF68;
  }
  else
  {
    uint64_t v109 = [NSNumber numberWithInt:v104];
  }
  [v38 setObject:v109 forKeyedSubscript:@"PadRight"];
  if ((v104 & 0x80000000) == 0) {

  }
  if (*(_WORD *)(a4 + 74))
  {
    if (*(_WORD *)(a4 + 74) != 1) {
      goto LABEL_239;
    }
    std::string::size_type v110 = @"Replication";
  }
  else
  {
    std::string::size_type v110 = @"Zero";
  }
  [v38 setObject:v110 forKeyedSubscript:@"PaddingMode"];
LABEL_239:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
  char v111 = !v421;
  if (v94) {
    char v111 = 1;
  }
  if ((v111 & 1) == 0)
  {
    long long v112 = [NSNumber numberWithShort:*(__int16 *)(a4 + 96)];
    [v38 setObject:v112 forKeyedSubscript:@"KernelDilationX"];

    uint64_t v113 = [NSNumber numberWithShort:*(__int16 *)(a4 + 98)];
    [v38 setObject:v113 forKeyedSubscript:@"KernelDilationY"];

    [v38 setObject:obj forKeyedSubscript:@"Type"];
  }
  long long v114 = v503;
  v503 = @"Conv";

  objc_storeStrong(&v504, v38);
  uint64_t v115 = (uint64_t)*a3 + 136;
  *(void *)buf = &v495;
  long long v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v115, (unsigned __int8 *)&v495, (long long **)buf);
  BOOL v118 = (std::__shared_weak_count *)*((void *)v116 + 6);
  if (v118) {
    atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(v505) = v117[41];
  HIDWORD(v505) = v420;
  uint64_t v119 = v473;
  if ((unint64_t)v473 >= v474)
  {
    unint64_t v121 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
    if (v121 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v122 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
    if (v122 <= v121 + 1) {
      unint64_t v122 = v121 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v123 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v123 = v122;
    }
    *((void *)&v508 + 1) = &v474;
    if (v123) {
      unint64_t v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v123);
    }
    else {
      uint64_t v124 = 0;
    }
    *(void *)buf = v123;
    *(void *)&uint8_t buf[8] = v123 + 144 * v121;
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v508 = v123 + 144 * v124;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
    vImage_Buffer v120 = v473;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
    vImage_Buffer v120 = v119 + 6;
  }
  long long v473 = v120;
  if (v118) {
    nitro::nitro_function::nitro_function(v118);
  }

  if (v501 < 0) {
    operator delete(v500);
  }
  *(void *)buf = &v497;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v496;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }

  char v125 = (std::__shared_weak_count *)a3[1];
  if (v125) {
    atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v422 = v125;
  uint64_t v126 = *a7;
  unint64_t v127 = (std::__shared_weak_count *)a7[1];
  if (v127) {
    atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v495);
  id v504 = 0;
  v503 = 0;
  uint64_t v505 = 0x100000000;
  uint64_t v128 = a1[76];
  int v129 = (std::__shared_weak_count *)a1[77];
  if (v129) {
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v128 || *(unsigned char *)((*(uint64_t (**)(void))(a1[68] + 104))() + 40))
  {
    char v130 = 0;
    if (!v129) {
      goto LABEL_273;
    }
    goto LABEL_272;
  }
  float v162 = *(float *)(v126 + 112);
  v488[0] = v128;
  v488[1] = v129;
  if (v129) {
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v163 = (std::__shared_weak_count *)a1[79];
  v487[0] = a1[78];
  v487[1] = (uint64_t)v163;
  if (v163) {
    atomic_fetch_add_explicit(&v163->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ane_style_post_scale_bias((uint64_t)v488, v487, (uint64_t)&v489, v162);
  if (v163) {
    nitro::nitro_function::nitro_function(v163);
  }
  if (v129) {
    nitro::nitro_function::nitro_function(v129);
  }
  uint64_t v164 = *(unsigned int *)(v128 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v485, 2 * v164, 1, 1, 1);
  uint64_t v165 = (int)v164;
  uint64_t v166 = a1[78];
  int v167 = v164;
  if (v166) {
    int v167 = *(_DWORD *)(v166 + 8);
  }
  if (!*(unsigned char *)(a2 + 384))
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v164);
    v376 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    if ((int)v164 >= 1)
    {
      for (uint64_t i = 0; i != v164; ++i)
      {
        float v378 = *(float *)(*(void *)(v128 + 16) + i * 4);
        *(float *)&int v379 = ldexp(1.0, -v493) * v378;
        v376[i] = v379;
      }
    }
    if (v164)
    {
      uint64_t v380 = *(_WORD **)(v485 + 16);
      do
      {
        int v381 = *v376++;
        _S0 = v381;
        __asm { FCVT            H0, S0 }
        *v380++ = _S0;
        --v165;
      }
      while (v165);
    }
    if (a1[78])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v167);
      uint64_t v384 = *(void *)buf;
      Espresso::blob<unsigned char,1>::make(buf, 2 * v167);
      v425 = *(Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)buf;
      v385 = *(int **)(v384 + 16);
      if (v167 >= 1)
      {
        for (uint64_t j = 0; j != v167; ++j)
        {
          int v387 = v164 - 1;
          if ((int)v164 - 1 >= (int)j) {
            int v387 = j;
          }
          *(float *)&int v388 = *(float *)(*(void *)(v491 + 16) + 4 * j) * *(float *)(*((void *)v489 + 2) + 4 * v387);
          v385[j] = v388;
          unsigned int v389 = v494;
          unsigned int v390 = v493;
          *(float *)&int v391 = ldexp(1.0, v494 - v493) * *(float *)&v388;
          v385[j] = v391;
          float v394 = ldexp(1.0, v390 - v389) * *(float *)&v391;
          if (v394 < -127.0 || v394 > 255.0)
          {
            int v396 = Espresso::espresso_os_log_subsystem(v392, v393);
            if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
            {
              double v397 = *(float *)&v385[j];
              *(_DWORD *)buf = 134218752;
              *(double *)&uint8_t buf[4] = v394;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v494;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v493;
              LOWORD(v508) = 2048;
              *(double *)((char *)&v508 + 2) = v397;
              _os_log_error_impl(&dword_1920CB000, v396, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }
          }
        }
      }
      if (v167)
      {
        uint64_t v398 = v167;
        uint64_t v399 = (_WORD *)*((void *)v425 + 2);
        do
        {
          int v400 = *v385++;
          _S0 = v400;
          __asm { FCVT            H0, S0 }
          *v399++ = _S0;
          --v398;
        }
        while (v398);
      }
    }
    v383 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v383);
  }
  unsigned int v168 = v494;
  uint64_t v169 = v485;
  if (v164)
  {
    uint64_t v170 = (int *)*((void *)v489 + 2);
    uint64_t v171 = *(_WORD **)(v485 + 16);
    do
    {
      int v172 = *v170++;
      _S0 = v172;
      __asm { FCVT            H0, S0 }
      *v171++ = _S0;
      --v165;
    }
    while (v165);
  }
  unsigned int v407 = v168;
  if (v166)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v167, 1, 1, 1);
    uint64_t v409 = *(void *)buf;
    uint64_t v412 = *(std::__shared_weak_count **)&buf[8];
    if (v167)
    {
      uint64_t v174 = v167;
      uint64_t v175 = *(_WORD **)(*(void *)buf + 16);
      int v176 = *(int **)(v491 + 16);
      do
      {
        int v177 = *v176++;
        _S0 = v177;
        __asm { FCVT            H0, S0 }
        *v175++ = _S0;
        --v174;
      }
      while (v174);
    }
  }
  else
  {
    uint64_t v409 = 0;
    uint64_t v412 = 0;
  }
  int v195 = *(unsigned __int8 *)(a2 + 552);
  uint64_t v196 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  unint64_t v197 = v486;
  if (v486) {
    atomic_fetch_add_explicit(&v486->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v198 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v196, *(const unsigned __int8 **)(v169 + 16), *(int *)(v169 + 8));
  if (v197) {
    nitro::nitro_function::nitro_function(v197);
  }
  id obja = (id)objc_opt_new();
  if (*(unsigned char *)(a2 + 121))
  {
    id v199 = *(id *)(v472 + 128);

    id obja = v199;
  }
  uint64_t v200 = objc_opt_new();
  char v201 = [NSNumber numberWithInt:v164];
  [v200 setObject:v201 forKeyedSubscript:@"ScaleCount"];

  uint64_t v202 = [NSNumber numberWithInt:v198];
  [v200 setObject:v202 forKeyedSubscript:@"ScaleOffset"];

  v203 = NSNumber;
  if (v195) {
    uint64_t v204 = 0;
  }
  else {
  long long v205 = [v203 numberWithUnsignedLong:v204];
  }
  [v200 setObject:v205 forKeyedSubscript:@"ScaleIndex"];

  [v200 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
  uint64_t v206 = [NSNumber numberWithInt:v493];
  [obja setObject:v206 forKeyedSubscript:@"ScaleShift"];

  if (a1[78])
  {
    if (v412) {
      atomic_fetch_add_explicit(&v412->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v207 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v196, *(const unsigned __int8 **)(v409 + 16), *(int *)(v409 + 8));
    if (v412) {
      nitro::nitro_function::nitro_function(v412);
    }
    std::string v208 = [NSNumber numberWithInt:*(unsigned int *)(a1[78] + 8)];
    [v200 setObject:v208 forKeyedSubscript:@"BiasCount"];

    uint64_t v209 = [NSNumber numberWithInt:v207];
    [v200 setObject:v209 forKeyedSubscript:@"BiasOffset"];

    uint64_t v210 = NSNumber;
    if (v195) {
      uint64_t v211 = 0;
    }
    else {
    uint64_t v212 = [v210 numberWithUnsignedLong:v211];
    }
    [v200 setObject:v212 forKeyedSubscript:@"BiasIndex"];

    [v200 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    uint64_t v213 = [NSNumber numberWithInt:v407];
    [obja setObject:v213 forKeyedSubscript:@"BiasShift"];
  }
  [obja setObject:v200 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  std::string v214 = v473;
  if (v473 != (std::string *)v472)
  {
    v215 = v473 - 6;
    uint64_t v216 = HIBYTE(v473[-6].__r_.__value_.__r.__words[2]);
    char v217 = v216;
    std::string::size_type v218 = v473[-6].__r_.__value_.__l.__size_;
    if ((v216 & 0x80u) == 0) {
      std::string::size_type v219 = HIBYTE(v473[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v219 = v473[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v220 = buf[23];
    if (buf[23] < 0) {
      uint64_t v220 = *(void *)&buf[8];
    }
    if (v219 == v220)
    {
      if (buf[23] >= 0) {
        int v221 = buf;
      }
      else {
        int v221 = *(unsigned __int8 **)buf;
      }
      if ((char)v216 < 0)
      {
        data = (const std::string::value_type *)v215->__r_.__value_.__r.__words[0];
        if (memcmp(v215->__r_.__value_.__l.__data_, v221, v473[-6].__r_.__value_.__l.__size_)) {
          goto LABEL_451;
        }
      }
      else if ((_BYTE)v216)
      {
        uint64_t v222 = v473 - 6;
        while (v222->__r_.__value_.__s.__data_[0] == *v221)
        {
          uint64_t v222 = (std::string *)((char *)v222 + 1);
          ++v221;
          if (!--v216) {
            goto LABEL_447;
          }
        }
        goto LABEL_448;
      }
LABEL_447:
      std::string::append(v214 - 6, "__@pre_scale_bias");
      char v217 = HIBYTE(v214[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_448:
    if ((v217 & 0x80) == 0)
    {
      long long v261 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v214[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v261;
      goto LABEL_452;
    }
    data = v214[-6].__r_.__value_.__l.__data_;
    std::string::size_type v218 = v214[-6].__r_.__value_.__l.__size_;
LABEL_451:
    std::string::__init_copy_ctor_external(&__str, data, v218);
LABEL_452:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v509, &__str, &v516, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v262 = v513;
  v513 = @"GOC";

  objc_storeStrong(&v514, obja);
  if (!*(unsigned char *)(a2 + 121))
  {
    v263 = v473;
    if ((unint64_t)v473 >= v474)
    {
      unint64_t v265 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
      if (v265 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v266 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
      if (v266 <= v265 + 1) {
        unint64_t v266 = v265 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v267 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v267 = v266;
      }
      *((void *)&v516 + 1) = &v474;
      if (v267) {
        unint64_t v267 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v267);
      }
      else {
        uint64_t v268 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v267;
      __str.__r_.__value_.__l.__size_ = v267 + 144 * v265;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(void *)&long long v516 = v267 + 144 * v268;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, &__str);
      int v264 = v473;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)buf);
      int v264 = v263 + 6;
    }
    long long v473 = v264;
  }

  if (v511 < 0) {
    operator delete(v510);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v508;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }

  if (v412) {
    nitro::nitro_function::nitro_function(v412);
  }
  if (v486) {
    nitro::nitro_function::nitro_function(v486);
  }
  if (v492) {
    nitro::nitro_function::nitro_function(v492);
  }
  if (v490) {
    nitro::nitro_function::nitro_function(v490);
  }
  char v130 = 1;
  if (v129) {
LABEL_272:
  }
    nitro::nitro_function::nitro_function(v129);
LABEL_273:

  if (v501 < 0) {
    operator delete(v500);
  }
  *(void *)buf = &v497;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v496;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v127) {
    nitro::nitro_function::nitro_function(v127);
  }
  if (v422) {
    nitro::nitro_function::nitro_function(v422);
  }
  if (v130)
  {
    if (*(_DWORD *)(a4 + 112)) {
LABEL_732:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
    goto LABEL_474;
  }
  uint64_t v131 = (void *)a1[55];
  if (v131 && *v131 && (v131[4] || v131[6] || v131[8] || v131[10]))
  {
    uint64_t v132 = v131[10];
    if (v132)
    {
      uint64_t v133 = *(int *)(v132 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v495, 2 * v133, 1, 1, 1);
      long long v134 = *(_OWORD *)&v495.__r_.__value_.__l.__data_;
      std::string v135 = *(const unsigned __int8 **)(v495.__r_.__value_.__r.__words[0] + 16);
      if (v133)
      {
        long long v136 = *(int **)(*(void *)(a1[55] + 80) + 16);
        std::string v137 = *(_WORD **)(v495.__r_.__value_.__r.__words[0] + 16);
        uint64_t v138 = v133;
        do
        {
          int v139 = *v136++;
          _S0 = v139;
          __asm { FCVT            H0, S0 }
          *v137++ = _S0;
          --v138;
        }
        while (v138);
      }
      unint64_t v144 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      if (*((void *)&v134 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 1uLL, memory_order_relaxed);
        std::string v135 = *(const unsigned __int8 **)(v134 + 16);
      }
      uint64_t v145 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v144, v135, *(int *)(v134 + 8));
      if (*((void *)&v134 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v134 + 1));
      }
      char v146 = objc_opt_new();
      id v147 = [NSNumber numberWithUnsignedLong:v133];
      [v146 setObject:v147 forKeyedSubscript:@"ScaleCount"];

      unint64_t v148 = [NSNumber numberWithInt:v145];
      [v146 setObject:v148 forKeyedSubscript:@"ScaleOffset"];

      id v149 = NSNumber;
      if (v418) {
        uint64_t v150 = 0;
      }
      else {
      unsigned int v223 = [v149 numberWithUnsignedLong:v150];
      }
      [v146 setObject:v223 forKeyedSubscript:@"ScaleIndex"];

      [v146 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
      if (*(_DWORD *)((*(uint64_t (**)(void *))(*a1 + 384))(a1) + 8))
      {
        (*(void (**)(std::string *__return_ptr, void *))(*a1 + 408))(&__str, a1);
        if (!__str.__r_.__value_.__r.__words[0])
        {
          uint64_t v224 = (std::__shared_weak_count *)a3[1];
          int v443 = *a3;
          v444 = v224;
          if (v224) {
            atomic_fetch_add_explicit(&v224->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr))(a1[68] + 120))(&v495);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (v444) {
            nitro::nitro_function::nitro_function(v444);
          }
          unint64_t v225 = v495.__r_.__value_.__r.__words[2];
          uint64_t v226 = (char *)operator new(0x58uLL);
          *((void *)v226 + 1) = 0;
          *((void *)v226 + 2) = 0;
          *(void *)uint64_t v226 = &unk_1EE389920;
          std::string::size_type v227 = v495.__r_.__value_.__r.__words[0];
          *((void *)v226 + 3) = &unk_1EE36BEB0;
          *(_OWORD *)(v226 + 56) = 0u;
          *(_OWORD *)(v226 + 72) = 0u;
          *((_DWORD *)v226 + 8) = v225 >> 2;
          *((void *)v226 + 5) = v227;
          v226[48] = 0;
          uint64_t v228 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v226 + 24);
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v226;
          if (v228)
          {
            nitro::nitro_function::nitro_function(v228);
            if (!__str.__r_.__value_.__r.__words[0]) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
            }
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v495, 4 * v133, 1, 1, 1);
        std::string::size_type v229 = v495.__r_.__value_.__r.__words[0];
        if (v133)
        {
          uint64_t v230 = *(float **)(v495.__r_.__value_.__r.__words[0] + 16);
          unint64_t v231 = *(float **)(__str.__r_.__value_.__r.__words[0] + 16);
          uint64_t v232 = *(float **)(*(void *)(a1[55] + 80) + 16);
          uint64_t v233 = v133;
          do
          {
            float v234 = *v231++;
            float v235 = v234;
            float v236 = *v232++;
            *v230++ = v235 / v236;
            --v233;
          }
          while (v233);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v133, 1, 1, 1);
        uint64_t v237 = *(void *)buf;
        unint64_t v238 = *(const unsigned __int8 **)(*(void *)buf + 16);
        if (v133)
        {
          uint64_t v239 = *(int **)(v229 + 16);
          long long v240 = *(_WORD **)(*(void *)buf + 16);
          uint64_t v241 = v133;
          do
          {
            int v242 = *v239++;
            _S0 = v242;
            __asm { FCVT            H0, S0 }
            *v240++ = _S0;
            --v241;
          }
          while (v241);
        }
        uint64_t v244 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          unint64_t v238 = *(const unsigned __int8 **)(v237 + 16);
        }
        uint64_t v245 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v144, v238, *(int *)(v237 + 8));
        if (v244) {
          nitro::nitro_function::nitro_function(v244);
        }
        uint64_t v246 = [NSNumber numberWithUnsignedLong:v133];
        [v146 setObject:v246 forKeyedSubscript:@"BiasCount"];

        unint64_t v247 = [NSNumber numberWithInt:v245];
        [v146 setObject:v247 forKeyedSubscript:@"BiasOffset"];

        uint64_t v248 = NSNumber;
        if (v418) {
          uint64_t v249 = 0;
        }
        else {
        v251 = [v248 numberWithUnsignedLong:v249];
        }
        [v146 setObject:v251 forKeyedSubscript:@"BiasIndex"];

        [v146 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
        if (v244) {
          nitro::nitro_function::nitro_function(v244);
        }
        if (v495.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v495.__r_.__value_.__l.__size_);
        }
        if (__str.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
      }
      unint64_t v252 = objc_opt_new();
      [v252 setObject:v146 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
      uint64_t v253 = v503;
      v503 = @"GOC";

      objc_storeStrong(&v504, v252);
      v254 = v473;
      if ((unint64_t)v473 >= v474)
      {
        unint64_t v256 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
        if (v256 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v257 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
        if (v257 <= v256 + 1) {
          unint64_t v257 = v256 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v258 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v258 = v257;
        }
        *((void *)&v508 + 1) = &v474;
        if (v258) {
          unint64_t v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v258);
        }
        else {
          uint64_t v259 = 0;
        }
        *(void *)buf = v258;
        *(void *)&uint8_t buf[8] = v258 + 144 * v256;
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        *(void *)&long long v508 = v258 + 144 * v259;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
        *(void *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
        v255 = v473;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
        v255 = v254 + 6;
      }
      long long v473 = v255;

      if (v501 < 0) {
        operator delete(v500);
      }
      *(void *)buf = &v497;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)buf = v496;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v495.__r_.__value_.__l.__data_);
      }

      if (!*((void *)&v134 + 1)) {
        goto LABEL_474;
      }
      int v250 = (std::__shared_weak_count *)*((void *)&v134 + 1);
LABEL_473:
      nitro::nitro_function::nitro_function(v250);
      goto LABEL_474;
    }
  }
  if (!*(_DWORD *)(a4 + 112))
  {
    if (!*(_DWORD *)(a4 + 32)) {
      goto LABEL_474;
    }
    (*(void (**)(std::string *__return_ptr, void *))(*a1 + 408))(&v495, a1);
    std::string::size_type v179 = v495.__r_.__value_.__r.__words[0];
    if (v495.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v495.__r_.__value_.__l.__size_);
    }
    if (!v179) {
      goto LABEL_474;
    }
    if (*(unsigned char *)(a2 + 121))
    {
      id v180 = *(id *)(v472 + 128);
    }
    else
    {
      id v180 = (id)objc_opt_new();
    }
    v294 = objc_opt_new();
    v295 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
    [v294 setObject:v295 forKeyedSubscript:@"BiasCount"];

    v296 = (std::__shared_weak_count *)a3[1];
    uint64_t v439 = *a3;
    int v440 = v296;
    if (v296) {
      atomic_fetch_add_explicit(&v296->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v495, "blob_biases_f16");
    int v297 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v439, a1, &v495);
    if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v495.__r_.__value_.__l.__data_);
    }
    if (v440) {
      nitro::nitro_function::nitro_function(v440);
    }
    if (v297 < 0)
    {
      unint64_t v309 = (std::__shared_weak_count *)a3[1];
      v433 = *a3;
      int v434 = v309;
      if (v309) {
        atomic_fetch_add_explicit(&v309->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v495, "blob_biases");
      uint64_t v299 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v433, a1, &v495);
      if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v495.__r_.__value_.__l.__data_);
      }
      if (v434) {
        nitro::nitro_function::nitro_function(v434);
      }
      v310 = (std::__shared_weak_count *)a3[1];
      v431 = *a3;
      v432 = v310;
      if (v310) {
        atomic_fetch_add_explicit(&v310->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
      (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v431, a1, buf);
      v301 = (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__r.__words[0];
      unint64_t v302 = v495.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      unint64_t v303 = v432;
      if (!v432) {
        goto LABEL_551;
      }
    }
    else
    {
      v298 = (std::__shared_weak_count *)a3[1];
      int v437 = *a3;
      v438 = v298;
      if (v298) {
        atomic_fetch_add_explicit(&v298->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v495, "blob_biases_f16");
      uint64_t v299 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v437, a1, &v495);
      if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v495.__r_.__value_.__l.__data_);
      }
      if (v438) {
        nitro::nitro_function::nitro_function(v438);
      }
      v300 = (std::__shared_weak_count *)a3[1];
      int v435 = *a3;
      int v436 = v300;
      if (v300) {
        atomic_fetch_add_explicit(&v300->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
      (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v435, a1, buf);
      v301 = (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__r.__words[0];
      unint64_t v302 = v495.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      unint64_t v303 = v436;
      if (!v436) {
        goto LABEL_551;
      }
    }
    nitro::nitro_function::nitro_function(v303);
LABEL_551:
    (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 408))(buf, a1);
    if (!*(void *)buf)
    {
      v304 = (char *)operator new(0x58uLL);
      *((void *)v304 + 1) = 0;
      *((void *)v304 + 2) = 0;
      *(void *)v304 = &unk_1EE389920;
      *((void *)v304 + 3) = &unk_1EE36BEB0;
      *(_OWORD *)(v304 + 56) = 0u;
      *(_OWORD *)(v304 + 72) = 0u;
      *((_DWORD *)v304 + 8) = v302 >> 2;
      *((void *)v304 + 5) = v301;
      v304[48] = 0;
      v305 = *(std::__shared_weak_count **)&buf[8];
      *(void *)buf = v304 + 24;
      *(void *)&uint8_t buf[8] = v304;
      if (v305)
      {
        nitro::nitro_function::nitro_function(v305);
        if (!*(void *)buf) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
      }
    }
    unint64_t v306 = (std::__shared_weak_count *)a3[1];
    v429 = *a3;
    int v430 = v306;
    if (v306) {
      atomic_fetch_add_explicit(&v306->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v495, "blob_biases_f16");
    int v307 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v429, a1, &v495);
    if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v495.__r_.__value_.__l.__data_);
    }
    if (v430) {
      nitro::nitro_function::nitro_function(v430);
    }
    if (v307 < 0)
    {
      v311 = *(int **)(*(void *)buf + 16);
      uint64_t v312 = *(int *)(*(void *)buf + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v495, 2 * v312, 1, 1, 1);
      std::string::size_type v313 = v495.__r_.__value_.__r.__words[0];
      unint64_t v314 = *(const unsigned __int8 **)(v495.__r_.__value_.__r.__words[0] + 16);
      if (v312)
      {
        uint64_t v315 = *(_WORD **)(v495.__r_.__value_.__r.__words[0] + 16);
        do
        {
          int v316 = *v311++;
          _S0 = v316;
          __asm { FCVT            H0, S0 }
          *v315++ = _S0;
          --v312;
        }
        while (v312);
      }
      v318 = (std::__shared_weak_count *)v495.__r_.__value_.__l.__size_;
      if (v495.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v495.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        unint64_t v314 = *(const unsigned __int8 **)(v313 + 16);
      }
      uint64_t v299 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v314, *(int *)(v313 + 8));
      if (v318) {
        nitro::nitro_function::nitro_function(v318);
      }
      v319 = NSNumber;
      if (v418) {
        uint64_t v320 = 0;
      }
      else {
      unint64_t v321 = [v319 numberWithUnsignedLong:v320];
      }
      [v294 setObject:v321 forKeyedSubscript:@"BiasIndex"];

      if (v318) {
        nitro::nitro_function::nitro_function(v318);
      }
    }
    else
    {
      v308 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, v301, (const void *)v302));
      [v294 setObject:v308 forKeyedSubscript:@"BiasIndex"];
    }
    unint64_t v322 = [NSNumber numberWithInt:v299];
    [v294 setObject:v322 forKeyedSubscript:@"BiasOffset"];

    [v294 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    [v180 setObject:v294 forKeyedSubscript:@"BiasScaleGroupData"];
    if (!*(unsigned char *)(a2 + 121))
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
      uint64_t v323 = v503;
      v503 = @"GOC";

      objc_storeStrong(&v504, v180);
      v324 = v473;
      if ((unint64_t)v473 >= v474)
      {
        int v325 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v472, (uint64_t)&v495);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
        int v325 = v324 + 6;
      }
      long long v473 = v325;

      if (v501 < 0) {
        operator delete(v500);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v497;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v496;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v495.__r_.__value_.__l.__data_);
      }
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }

    goto LABEL_474;
  }
  if (*(unsigned char *)(a2 + 121)) {
    goto LABEL_732;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 408))(&v441, a1);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias((uint64_t)&__str, (uint64_t)&v441, *(_DWORD *)(*a7 + 16), *(unsigned __int8 *)(a2 + 384), 0, 0.0);
  if (v442) {
    nitro::nitro_function::nitro_function(v442);
  }
  long long v151 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v153 = __str.__r_.__value_.__r.__words[2];
  uint64_t v152 = (std::__shared_weak_count *)v516;
  if ((void)v516) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v516 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v154 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  if (*((void *)&v151 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v151 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v155 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v154, *(const unsigned __int8 **)(v151 + 16), *(int *)(v151 + 8));
  if (*((void *)&v151 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v151 + 1));
  }
  if (v152) {
    atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v156 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v154, *(const unsigned __int8 **)(v153 + 16), *(int *)(v153 + 8));
  if (v152) {
    nitro::nitro_function::nitro_function(v152);
  }
  int v157 = objc_opt_new();
  int v158 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
  [v157 setObject:v158 forKeyedSubscript:@"BiasCount"];

  int v159 = [NSNumber numberWithInt:v156];
  [v157 setObject:v159 forKeyedSubscript:@"BiasOffset"];

  int v160 = NSNumber;
  if (v418) {
    uint64_t v161 = 0;
  }
  else {
  std::string v181 = [v160 numberWithUnsignedLong:v161];
  }
  [v157 setObject:v181 forKeyedSubscript:@"BiasIndex"];

  [v157 setObject:@"Float32" forKeyedSubscript:@"BiasType"];
  long long v182 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
  [v157 setObject:v182 forKeyedSubscript:@"ScaleCount"];

  long long v183 = [NSNumber numberWithInt:v155];
  [v157 setObject:v183 forKeyedSubscript:@"ScaleOffset"];

  long long v184 = NSNumber;
  if (v418) {
    uint64_t v185 = 0;
  }
  else {
  long long v186 = [v184 numberWithUnsignedLong:v185];
  }
  [v157 setObject:v186 forKeyedSubscript:@"ScaleIndex"];

  [v157 setObject:@"Float32" forKeyedSubscript:@"ScaleType"];
  long long v187 = objc_opt_new();
  [v187 setObject:v157 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
  long long v188 = v503;
  v503 = @"GOC";

  objc_storeStrong(&v504, v187);
  uint64_t v189 = v473;
  if ((unint64_t)v473 >= v474)
  {
    unint64_t v191 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
    if (v191 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v192 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
    if (v192 <= v191 + 1) {
      unint64_t v192 = v191 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v193 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v193 = v192;
    }
    *((void *)&v508 + 1) = &v474;
    if (v193) {
      unint64_t v193 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v193);
    }
    else {
      uint64_t v194 = 0;
    }
    *(void *)buf = v193;
    *(void *)&uint8_t buf[8] = v193 + 144 * v191;
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v508 = v193 + 144 * v194;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
    unint64_t v190 = v473;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
    unint64_t v190 = v189 + 6;
  }
  long long v473 = v190;

  if (v501 < 0) {
    operator delete(v500);
  }
  *(void *)buf = &v497;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v496;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }

  if (v152) {
    nitro::nitro_function::nitro_function(v152);
  }
  if (*((void *)&v151 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v151 + 1));
  }
  if ((void)v516) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v516);
  }
  int v250 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_) {
    goto LABEL_473;
  }
LABEL_474:
  if (*(_DWORD *)(a4 + 24))
  {
    if (*(unsigned char *)(a2 + 121))
    {
      id v269 = *(id *)(v472 + 128);
    }
    else
    {
      id v269 = (id)objc_opt_new();
    }
    [v269 setObject:@"ReLU" forKeyedSubscript:@"Type"];
    if (*(unsigned char *)(a2 + 121)) {
      goto LABEL_615;
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
    v270 = v503;
    v503 = @"Neuron";

    objc_storeStrong(&v504, v269);
    v271 = v473;
    if ((unint64_t)v473 >= v474)
    {
      unint64_t v273 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
      if (v273 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v274 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
      if (v274 <= v273 + 1) {
        unint64_t v274 = v273 + 1;
      }
      int v275 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v274);
      *((void *)&v508 + 1) = &v474;
      if (v275) {
        int v275 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v275);
      }
      else {
        uint64_t v276 = 0;
      }
      *(void *)buf = v275;
      *(void *)&uint8_t buf[8] = &v275[144 * v273];
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v508 = &v275[144 * v276];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
      v272 = v473;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
      v272 = v271 + 6;
    }
    long long v473 = v272;

    if (v501 < 0) {
      operator delete(v500);
    }
    *(void *)buf = &v497;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)buf = v496;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(v495.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_615;
    }
    v282 = (void *)v495.__r_.__value_.__r.__words[0];
    goto LABEL_509;
  }
  if (!*(_DWORD *)(a4 + 28))
  {
    if (*(_DWORD *)(a4 + 60) != -1) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    }
    goto LABEL_616;
  }
  if (*(unsigned char *)(a2 + 121))
  {
    id v269 = *(id *)(v472 + 128);
  }
  else
  {
    id v269 = (id)objc_opt_new();
  }
  [v269 setObject:@"Tanh" forKeyedSubscript:@"Type"];
  if (*(unsigned char *)(a2 + 121))
  {
LABEL_615:

LABEL_616:
    (*(void (**)(void *, uint64_t, uint64_t *))(a1[68] + 32))(a1 + 68, a2, &v472);
    goto LABEL_617;
  }
  int v277 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v495, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v277 + 472, (uint64_t)&v495, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)*a3 + 472);
  v278 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v280 = v278;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_513;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_513;
    }
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_519:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
    v286 = v503;
    v503 = @"Neuron";

    objc_storeStrong(&v504, v269);
    v287 = v473;
    if ((unint64_t)v473 >= v474)
    {
      unint64_t v290 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
      if (v290 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v291 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
      if (v291 <= v290 + 1) {
        unint64_t v291 = v290 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v292 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v292 = v291;
      }
      *((void *)&v508 + 1) = &v474;
      if (v292) {
        unint64_t v292 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v292);
      }
      else {
        uint64_t v293 = 0;
      }
      *(void *)buf = v292;
      *(void *)&uint8_t buf[8] = v292 + 144 * v290;
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v508 = v292 + 144 * v293;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
      uint64_t v288 = v473;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
      uint64_t v288 = v287 + 6;
    }
    long long v473 = v288;

    if (v501 < 0) {
      operator delete(v500);
    }
    *(void *)buf = &v497;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)buf = v496;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v495.__r_.__value_.__l.__data_);
    }

    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_615;
    }
    v282 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_509:
    operator delete(v282);
    goto LABEL_615;
  }
LABEL_513:
  if (!Espresso::ANECompilerEngine::is_mix(v278, v279)) {
    goto LABEL_519;
  }
  v283 = (long long *)&v473[-6];
  std::string::append(v473 - 6, "_pre_tanh");
  (*(void (**)(void *, uint64_t, uint64_t *))(a1[68] + 32))(a1 + 68, a2, &v472);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v495, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v284 = v497;
  for (unint64_t k = (char *)v498; k != v284; k -= 24)
  {
    if (*(k - 1) < 0) {
      operator delete(*((void **)k - 3));
    }
  }
  v498 = (std::string *)v284;
  if ((unint64_t)v284 >= v499)
  {
    v289 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v497, (uint64_t)v283);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v497, v283);
    v289 = (std::string *)(v284 + 24);
  }
  v498 = v289;
  (*(void (**)(void *, uint64_t, std::string *))(a1[68] + 48))(a1 + 68, a2, &v495);

  if (v501 < 0) {
    operator delete(v500);
  }
  *(void *)buf = &v497;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v496;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

LABEL_617:
  v495.__r_.__value_.__r.__words[0] = (std::string::size_type)&v472;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v495);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)v484);
}

void sub_192ABBCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  nitro::nitro_function::nitro_function(a16);
  if (STACK[0x418]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x418]);
  }

  STACK[0x3B0] = (unint64_t)&STACK[0x210];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(char *a1, uint64_t a2, uint64_t *a3, Espresso::quantized_weights_helper **a4, void *a5, uint64_t *a6)
{
  v112[4] = *MEMORY[0x1E4F143B8];
  uint64_t v108 = (id *)a2;
  uint64_t v109 = a1;
  id v107 = a5;
  char v106 = *(unsigned char *)(a2 + 552);
  v105[0] = (uint64_t *)&v109;
  v105[1] = a6;
  v105[2] = (uint64_t *)&v108;
  v105[3] = (uint64_t *)&v107;
  v105[4] = (uint64_t *)&v106;
  unint64_t v10 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v11 = [v10 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  long long v12 = [v11 objectForKeyedSubscript:@"espresso.anecompiler.always_bloat"];
  int v13 = [v12 BOOLValue];

  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<rdar://problem/39402422> 257a: \"Illegal cog size\" or \"NE kernel blob too large \" assertion when using large convolutions with int8 weights");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
    goto LABEL_11;
  }
  int v14 = *a4;
  if (*((void *)*a4 + 4) || *((void *)v14 + 6) || *((void *)v14 + 8))
  {
    if (!v109
    {
      int v18 = v108;
      Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
      int v19 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
      char is_mix = Espresso::ANECompilerEngine::is_mix(v19, v20);
      int v22 = *a4;
      if (*((void *)*a4 + 4))
      {
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        int v91 = v23;
        int v24 = Espresso::ANECompilerEngine::is_mix(v19, (NSString *)&v23->__vftable);
        int v26 = Espresso::ANECompilerEngine::is_mix(v19, v25);
        if (v24) {
          uint64_t v27 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_fp16_palettes;
        }
        else {
          uint64_t v27 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_fp16_palettes;
        }
        uint64_t v28 = (uint64_t)*a4;
        v112[0] = &unk_1EE37C3D8;
        v112[1] = v18;
        v112[3] = v112;
        if (v26) {
          uint64_t v29 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_fp16_palettes;
        }
        else {
          uint64_t v29 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_fp16_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_f16_weights(v28, v107, (uint64_t)v112, v27, v29, is_mix, (uint64_t)&__p);
        uint64_t v30 = v112;
      }
      else if (*((void *)v22 + 8))
      {
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        int v91 = v31;
        int v32 = Espresso::ANECompilerEngine::is_mix(v19, (NSString *)&v31->__vftable);
        int v34 = Espresso::ANECompilerEngine::is_mix(v19, v33);
        if (v32) {
          unint64_t v35 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_uint8_palettes;
        }
        else {
          unint64_t v35 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_uint8_palettes;
        }
        uint64_t v36 = (uint64_t)*a4;
        v111[0] = &unk_1EE37C3D8;
        v111[1] = v18;
        v111[3] = v111;
        if (v34) {
          int v37 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_uint8_palettes;
        }
        else {
          int v37 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_uint8_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_uint8_weights(v36, v107, (uint64_t)v111, v35, v37, is_mix, (uint64_t)&__p);
        uint64_t v30 = v111;
      }
      else
      {
        if (!*((void *)v22 + 6)) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown lookup table type.");
        }
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        int v91 = v38;
        int v39 = Espresso::ANECompilerEngine::is_mix(v19, (NSString *)&v38->__vftable);
        int v41 = Espresso::ANECompilerEngine::is_mix(v19, v40);
        if (v39) {
          uint64_t v42 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_int8_palettes;
        }
        else {
          uint64_t v42 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_int8_palettes;
        }
        uint64_t v43 = (uint64_t)*a4;
        v110[0] = &unk_1EE37C3D8;
        v110[1] = v18;
        v110[3] = v110;
        if (v41) {
          uint64_t v44 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_int8_palettes;
        }
        else {
          uint64_t v44 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_int8_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_int8_weights(v43, v107, (uint64_t)v110, v42, v44, is_mix, (uint64_t)&__p);
        uint64_t v30 = v110;
      }
      std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](v30);

      goto LABEL_39;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Dilated + LUT");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
    goto LABEL_11;
  }
  if (*((_DWORD *)v14 + 39) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Not 8 bits");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
LABEL_11:
    if (SHIBYTE(v92) < 0)
    {
      int v17 = __p;
LABEL_13:
      operator delete(v17);
      goto LABEL_39;
    }
    goto LABEL_39;
  }
  if (*((unsigned char *)v14 + 164))
  {
    if (Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(v14))
    {
      uint64_t v45 = *((void *)v109 + 55);
      uint64_t v46 = *(void *)(v45 + 80);
      uint64_t v47 = *(std::__shared_weak_count **)(v45 + 88);
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v48 = 0;
      if (v46)
      {
        LODWORD(__p) = 0;
        vDSP_minmgv(*(const float **)(v46 + 16), 1, (float *)&__p, *(int *)(v46 + 8));
        if (*(float *)&__p < 0.000061035) {
          BOOL v48 = 1;
        }
      }
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      if (!v48)
      {
        int v60 = v109;
        int v61 = (std::__shared_weak_count *)a3[1];
        uint64_t v103 = *a3;
        uint64_t v104 = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        uint64_t v62 = (*(uint64_t (**)(char *, uint64_t *, char *, void **))(*((void *)v60 + 68) + 88))(v60 + 544, &v103, v60, &__p);
        if (SHIBYTE(v92) < 0) {
          operator delete(__p);
        }
        if (v104) {
          nitro::nitro_function::nitro_function(v104);
        }
        if ((v62 & 0x80000000) != 0)
        {
          uint64_t v68 = *(void *)*a4;
          uint64_t v67 = (std::__shared_weak_count *)*((void *)*a4 + 1);
          if (v67)
          {
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
            unsigned int v69 = v108;
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v70 = v67;
          }
          else
          {
            uint64_t v70 = 0;
            unsigned int v69 = v108;
          }
          uint64_t v62 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(v69 + 16), *(const unsigned __int8 **)(v68 + 16), *(int *)(v68 + 8));
          if (v70) {
            nitro::nitro_function::nitro_function(v70);
          }
          if (v106) {
            uint64_t weights_file_index = 0;
          }
          else {
          if (v109) {
            uint64_t v82 = (Espresso::ANECompilerEngine::ane_kernel *)(v109 + 544);
          }
          else {
            uint64_t v82 = 0;
          }
          v102[0] = v68;
          v102[1] = v67;
          if (v67) {
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v82, v102);
          if (v67)
          {
            nitro::nitro_function::nitro_function(v67);
            nitro::nitro_function::nitro_function(v67);
          }
        }
        else
        {
          unsigned int v63 = v109;
          uint64_t v64 = (std::__shared_weak_count *)a3[1];
          uint64_t v100 = *a3;
          uint64_t v101 = v64;
          if (v64) {
            atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v99, "W_S8");
          (*(void (**)(void **__return_ptr))(*((void *)v63 + 68) + 120))(&__p);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v99.__r_.__value_.__l.__data_);
          }
          if (v101) {
            nitro::nitro_function::nitro_function(v101);
          }
          uint64_t weights_file_index = Espresso::ANECompilerEngine::get_primary_weights_file_index(v108, (Espresso::ANECompilerEngine::compiler *)__p, v92);
          if (v109) {
            uint64_t v66 = (Espresso::ANECompilerEngine::ane_kernel *)(v109 + 544);
          }
          else {
            uint64_t v66 = 0;
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v66, __p);
        }
        unint64_t v83 = [NSNumber numberWithInt:v62];
        [v107 setObject:v83 forKeyedSubscript:@"KernelOffset"];

        long long v84 = [NSNumber numberWithUnsignedLong:weights_file_index];
        [v107 setObject:v84 forKeyedSubscript:@"KernelIndex"];

        [v107 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
        goto LABEL_39;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Overflowing");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Not symmetric");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
    }
    goto LABEL_11;
  }
  uint64_t v49 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat");
  std::string::basic_string[abi:ne180100]<0>(&v98, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v49 + 472, (uint64_t)&__p, (uint64_t)&v98, &v99);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v99.__r_.__value_.__l.__size_ == 1)
    {
      int v50 = (std::string *)v99.__r_.__value_.__r.__words[0];
      goto LABEL_59;
    }
  }
  else if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) == 1)
  {
    int v50 = &v99;
LABEL_59:
    BOOL v51 = v50->__r_.__value_.__s.__data_[0] == 49;
    goto LABEL_61;
  }
  BOOL v51 = 0;
LABEL_61:
  uint64_t v52 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat_v2");
  std::string::basic_string[abi:ne180100]<0>(v96, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v52 + 472, (uint64_t)&__p, (uint64_t)v96, &v98);
  if (v97 < 0) {
    operator delete(v96[0]);
  }
  if (SHIBYTE(v92) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v98.__r_.__value_.__l.__size_ == 1)
    {
      uint64_t v53 = (std::string *)v98.__r_.__value_.__r.__words[0];
      goto LABEL_70;
    }
LABEL_71:
    BOOL v54 = 0;
    goto LABEL_72;
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) != 1) {
    goto LABEL_71;
  }
  uint64_t v53 = &v98;
LABEL_70:
  BOOL v54 = v53->__r_.__value_.__s.__data_[0] == 49;
LABEL_72:
  Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(*a4, v51, v54, (uint64_t)&__p);
  if (!__p) {
    goto LABEL_83;
  }
  int v55 = v95;
  v89[0] = v94;
  v89[1] = (uint64_t)v95;
  if (v95) {
    atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v89);
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  if (!is_qbias_zero)
  {
LABEL_83:
    std::string::basic_string[abi:ne180100]<0>(v96, "Unsigned / Not symmetric");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)v96);
LABEL_84:
    if (v97 < 0) {
      operator delete(v96[0]);
    }
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    if (v93) {
      nitro::nitro_function::nitro_function(v93);
    }
    if (v91) {
      nitro::nitro_function::nitro_function(v91);
    }
    goto LABEL_154;
  }
  int v57 = (const float **)v92;
  std::string::size_type v58 = v93;
  if (v93) {
    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v59 = 0;
  if (v57)
  {
    LODWORD(v96[0]) = 0;
    vDSP_minmgv(v57[2], 1, (float *)v96, *((int *)v57 + 2));
    if (*(float *)v96 < 0.000061035) {
      BOOL v59 = 1;
    }
  }
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  if (v59)
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "Unsigned / Overflowing");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)v96);
    goto LABEL_84;
  }
  uint64_t v71 = *((void *)v109 + 55);
  uint64_t v73 = v92;
  std::string::size_type v72 = v93;
  if (v93) {
    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v74 = *(std::__shared_weak_count **)(v71 + 88);
  *(void *)(v71 + 80) = v73;
  *(void *)(v71 + 88) = v72;
  if (v74) {
    nitro::nitro_function::nitro_function(v74);
  }
  unsigned int v75 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(v108 + 16);
  uint64_t v76 = (const unsigned __int8 **)__p;
  char v77 = v91;
  if (v91) {
    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v78 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v75, v76[2], *((int *)v76 + 2));
  if (v77) {
    nitro::nitro_function::nitro_function(v77);
  }
  long long v79 = [NSNumber numberWithInt:v78];
  [v107 setObject:v79 forKeyedSubscript:@"KernelOffset"];

  [v107 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
  uint64_t v80 = NSNumber;
  if (v106) {
    uint64_t v81 = 0;
  }
  else {
  uint64_t v85 = [v80 numberWithUnsignedLong:v81];
  }
  [v107 setObject:v85 forKeyedSubscript:@"KernelIndex"];

  if (v109) {
    int v86 = (Espresso::ANECompilerEngine::ane_kernel *)(v109 + 544);
  }
  else {
    int v86 = 0;
  }
  int64_t v87 = v91;
  v88[0] = __p;
  v88[1] = v91;
  if (v91) {
    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v86, v88);
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
LABEL_154:
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    int v17 = (void *)v99.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
LABEL_39:
}

void sub_192ABD5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(uint64_t **a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **a1;
  if (v4) {
    Espresso::quantized_weights_helper::dequantize_to_float16_2d(*(Espresso::quantized_weights_helper **)(v4 + 440), buf);
  }
  else {
    Espresso::quantized_weights_helper::dequantize_to_float16_4d(MEMORY[0x1B8], buf);
  }
  uint64_t v6 = *(void *)buf;
  uint64_t v5 = *(std::__shared_weak_count **)&buf[8];
  unint64_t v7 = (Espresso::ANECompilerEngine::final_anec_weights_t *)a1[1];
  uint64_t v8 = **a1;
  if (v8) {
    uint64_t v9 = (Espresso::ANECompilerEngine::ane_kernel *)(v8 + 544);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v23 = *(void *)buf;
  uint64_t v24 = *(void *)&buf[8];
  if (*(void *)&buf[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(v7, v9, &v23);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  long long v12 = Espresso::espresso_os_log_subsystem(v10, v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v21 = a2;
    }
    else {
      BOOL v21 = (uint64_t *)*a2;
    }
    uint64_t v22 = *(int *)(v6 + 8);
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v22;
    _os_log_debug_impl(&dword_1920CB000, v12, OS_LOG_TYPE_DEBUG, "[ANEC/handle_quantized_weights] Bloating (%s) W: %zu", buf, 0x16u);
  }

  int v13 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(*a1[2] + 128);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v13, *(const unsigned __int8 **)(v6 + 16), *(int *)(v6 + 8));
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  int v15 = objc_msgSend(NSNumber, "numberWithInt:", v14, v23, v24);
  [(id)*a1[3] setObject:v15 forKeyedSubscript:@"KernelOffset"];

  [(id)*a1[3] setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  int v16 = NSNumber;
  if (*(unsigned char *)a1[4]) {
    uint64_t weights_file_index = 0;
  }
  else {
  int v18 = [v16 numberWithUnsignedLong:weights_file_index];
  }
  [(id)*a1[3] setObject:v18 forKeyedSubscript:@"KernelIndex"];

  uint64_t v19 = *(void *)(**a1 + 440);
  int v20 = *(std::__shared_weak_count **)(v19 + 88);
  *(void *)(v19 + 80) = 0;
  *(void *)(v19 + 88) = 0;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192ABDA90(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine24handle_quantized_weightsIPNS0_20inner_product_kernelEEEvT_PNS0_8compilerENSt3__110shared_ptrINS_3netEEENS8_INS_24quantized_weights_helperEEEP19NSMutableDictionaryRNS0_20final_anec_weights_tEEUlPKhmE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, const unsigned __int8 **a2, size_t *a3)
{
  unsigned int v4 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(*(void *)(a1 + 8) + 128), *a2, *a3);
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 552)) {
  return v4;
  }
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C3D8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37C3D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__func()
{
}

double Espresso::ANECompilerEngine::inner_product_kernel::weights_helper_weights_shape@<D0>(int32x2_t *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  int32x2_t v2 = vrev64_s32(this[38]);
  *(void *)a2 = 0x100000001;
  *(int32x2_t *)(a2 + 8) = v2;
  double result = NAN;
  *(void *)(a2 + 16) = 0xFFFFFFFF00000001;
  return result;
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::get_f16_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 784);
  *a2 = *(void *)(this + 776);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::ANECompilerEngine::inner_product_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 776) = v2;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 784);
  *(void *)(a1 + 784) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 768);
  *a2 = *(void *)(this + 760);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 632);
  *a2 = *(void *)(this + 624);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::ANECompilerEngine::inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 760) = v2;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 768);
  *(void *)(a1 + 768) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::ANECompilerEngine::inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 624) = v2;
  unsigned int v4 = *(std::__shared_weak_count **)(a1 + 632);
  *(void *)(a1 + 632) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  int v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != (unsigned __int8 *)7) {
      goto LABEL_18;
    }
    uint64_t v5 = (int *)*a2;
    if (*(_DWORD *)*a2 == 828792695 && *(_DWORD *)(*a2 + 3) == 1952396849) {
      return 1;
    }
  }
  else
  {
    if (v3 != 7) {
      goto LABEL_18;
    }
    BOOL v4 = *(_DWORD *)a2 == 828792695 && *(_DWORD *)((char *)a2 + 3) == 1952396849;
    uint64_t v5 = (int *)a2;
    if (v4) {
      return 1;
    }
  }
  int v7 = *v5;
  int v8 = *(int *)((char *)v5 + 3);
  if (v7 == 862347127 && v8 == 1952395827) {
    return 1;
  }
LABEL_18:
  if ((Espresso::generic_inner_product_kernel::supports_weight_key(a1, a2) & 1) != 0
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }

  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key((uint64_t *)a2);
}

void Espresso::ANECompilerEngine::inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v11 = 0;
    goto LABEL_6;
  }
  uint64_t v11 = *a6;
  if (!*a6)
  {
LABEL_6:
    long long v12 = 0;
    goto LABEL_7;
  }
  long long v12 = (std::__shared_weak_count *)a6[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  int v13 = (void *)(a1 + 760);
  if (*((char *)a3 + 23) < 0)
  {
    int v16 = a3[1];
    if (v16 != (unsigned __int8 *)1)
    {
      if (v16 != (unsigned __int8 *)7)
      {
        if (v16 != (unsigned __int8 *)8) {
          goto LABEL_76;
        }
        if (*(void *)*a3 == 0x38746E695F745F57) {
          goto LABEL_32;
        }
        int v15 = *a3;
        goto LABEL_18;
      }
      uint64_t v30 = (int *)*a3;
      if (*(_DWORD *)*a3 != 828792695 || *(_DWORD *)(*a3 + 3) != 1952396849)
      {
        int v32 = *v30;
        int v33 = *(int *)((char *)v30 + 3);
        if (v32 != 862347127 || v33 != 1952395827) {
          goto LABEL_76;
        }
        goto LABEL_58;
      }
LABEL_64:
      v117[0] = v11;
      v117[1] = (uint64_t)v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v93, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v117, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(&v115, (uint64_t *)&v93);
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = 0uLL;
      (*(void (**)(uint64_t, uint64_t *, std::string *))(*(void *)a1 + 464))(a1, &v115, &v110);
      if (v110.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v110.__r_.__value_.__l.__size_);
      }
      uint64_t v29 = v116;
      if (v116) {
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    int v22 = **a3;
  }
  else
  {
    int v14 = *((unsigned __int8 *)a3 + 23);
    if (v14 != 1)
    {
      if (v14 != 7)
      {
        if (v14 != 8) {
          goto LABEL_76;
        }
        int v15 = a3;
        if (*a3 == (unsigned __int8 *)0x38746E695F745F57)
        {
LABEL_32:
          uint64_t v23 = *(std::__shared_weak_count **)(a1 + 768);
          *int v13 = 0;
          *(void *)(a1 + 768) = 0;
          if (v23) {
            nitro::nitro_function::nitro_function(v23);
          }
          v111[0] = v11;
          v111[1] = (uint64_t)v12;
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(&v93, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v111, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
          if (v12) {
            nitro::nitro_function::nitro_function(v12);
          }
          std::string::size_type v24 = v93.__r_.__value_.__r.__words[0];
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(&v110, *(_DWORD *)(v93.__r_.__value_.__r.__words[0] + 12), *(_DWORD *)(v93.__r_.__value_.__r.__words[0] + 8), 1, 1);
          std::string::size_type v25 = v110.__r_.__value_.__r.__words[0];
          if (*(int *)(v110.__r_.__value_.__r.__words[0] + 12) >= 1)
          {
            int v26 = 0;
            do
            {
              int v27 = *(_DWORD *)(v25 + 8);
              if (v27 >= 1)
              {
                uint64_t v28 = 0;
                do
                {
                  *(unsigned char *)(*(void *)(v25 + 16) + v26 * (uint64_t)v27 + v28) = *(unsigned char *)(*(void *)(v24 + 16)
                                                                                          + *(int *)(v25 + 12)
                                                                                          * (uint64_t)(int)v28
                                                                                          + v26);
                  int v27 = *(_DWORD *)(v25 + 8);
                  ++v28;
                }
                while ((int)v28 < v27);
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(v25 + 12));
          }
          uint64_t v29 = *(std::__shared_weak_count **)(a1 + 816);
          *(_OWORD *)(a1 + 808) = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
          if (v29) {
LABEL_45:
          }
            nitro::nitro_function::nitro_function(v29);
LABEL_46:
          if (v93.__r_.__value_.__l.__size_)
          {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v93.__r_.__value_.__l.__size_);
            if (!v12) {
              return;
            }
            goto LABEL_84;
          }
LABEL_83:
          if (!v12) {
            return;
          }
          goto LABEL_84;
        }
LABEL_18:
        if (*v15 == 0x745F656C61637351)
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v93, *(_DWORD *)(a1 + 308), 1, 1, 1);
          std::string::size_type v17 = v93.__r_.__value_.__r.__words[0];
          int v18 = *(std::__shared_weak_count **)(a1 + 832);
          *(_OWORD *)(a1 + 824) = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
          if (v18)
          {
            nitro::nitro_function::nitro_function(v18);
            std::string::size_type v19 = *(void *)(a1 + 824);
          }
          else
          {
            std::string::size_type v19 = v17;
          }
          if (a5 != 4 * *(int *)(v19 + 8))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            unint64_t v68 = a5;
            unsigned int v69 = exception;
            std::to_string(&v104, v68);
            uint64_t v70 = std::string::insert(&v104, 0, "Unexpected size s=");
            long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v105.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            std::string::size_type v72 = std::string::append(&v105, "/blob=");
            long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v106.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v103, 4 * *(int *)(*(void *)(a1 + 824) + 8));
            if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v74 = &v103;
            }
            else {
              uint64_t v74 = (std::string *)v103.__r_.__value_.__r.__words[0];
            }
            if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v103.__r_.__value_.__l.__size_;
            }
            uint64_t v76 = std::string::append(&v106, (const std::string::value_type *)v74, size);
            long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            v107.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v100, " @ ");
            if ((v102 & 0x80u) == 0) {
              uint64_t v78 = (const std::string::value_type *)&v100;
            }
            else {
              uint64_t v78 = v100;
            }
            if ((v102 & 0x80u) == 0) {
              std::string::size_type v79 = v102;
            }
            else {
              std::string::size_type v79 = v101;
            }
            uint64_t v80 = std::string::append(&v107, v78, v79);
            long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
            v108.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v81;
            v80->__r_.__value_.__l.__size_ = 0;
            v80->__r_.__value_.__r.__words[2] = 0;
            v80->__r_.__value_.__r.__words[0] = 0;
            uint64_t v82 = std::string::append(&v108, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANECompilerEngine/Layers/ANECompilerInnerProduct.mm");
            long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
            v109.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v83;
            v82->__r_.__value_.__l.__size_ = 0;
            v82->__r_.__value_.__r.__words[2] = 0;
            v82->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v97, ":");
            if ((v99 & 0x80u) == 0) {
              long long v84 = (const std::string::value_type *)&v97;
            }
            else {
              long long v84 = v97;
            }
            if ((v99 & 0x80u) == 0) {
              std::string::size_type v85 = v99;
            }
            else {
              std::string::size_type v85 = v98;
            }
            int v86 = std::string::append(&v109, v84, v85);
            long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
            v110.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v87;
            v86->__r_.__value_.__l.__size_ = 0;
            v86->__r_.__value_.__r.__words[2] = 0;
            v86->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v96, 83);
            if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v88 = &v96;
            }
            else {
              uint64_t v88 = (std::string *)v96.__r_.__value_.__r.__words[0];
            }
            if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v89 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v89 = v96.__r_.__value_.__l.__size_;
            }
            uint64_t v90 = std::string::append(&v110, (const std::string::value_type *)v88, v89);
            long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            v93.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v69, &v93);
            __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          goto LABEL_115;
        }
LABEL_76:
        Espresso::generic_inner_product_kernel::__set_weight_raw_blob(a1, a2, (unsigned __int8 *)a3, a4, a5, a6);
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 536))(&v93, a1);
        int v37 = *(std::__shared_weak_count **)(a1 + 16);
        v92[0] = *(void *)(a1 + 8);
        v92[1] = (uint64_t)v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 544) + 136))(a1 + 544);
        Espresso::set_conv_quantized_weight_helper(v39, v40, v41, v38, a3, (char *)a4, a5, a6, (uint64_t *)(a1 + 440), (long long *)&v93, v92, v38, 1);
        if (v37) {
          nitro::nitro_function::nitro_function(v37);
        }
        if (__p)
        {
          BOOL v95 = __p;
          operator delete(__p);
        }
        Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((void *)(a1 + 544), (uint64_t *)a3, a4, a5);
        goto LABEL_83;
      }
      if (*(_DWORD *)a3 != 828792695 || *(_DWORD *)((char *)a3 + 3) != 1952396849)
      {
        if (*(_DWORD *)a3 != 862347127 || *(_DWORD *)((char *)a3 + 3) != 1952395827) {
          goto LABEL_76;
        }
LABEL_58:
        v114[0] = v11;
        v114[1] = (uint64_t)v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v93, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v114, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
        if (v12) {
          nitro::nitro_function::nitro_function(v12);
        }
        Espresso::transposed_blob_2d<Espresso::blob<float,2>>(&v112, (uint64_t *)&v93);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 400))(a1, &v112);
        uint64_t v29 = v113;
        if (v113) {
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_64;
    }
    int v22 = *(unsigned __int8 *)a3;
  }
  if (v22 != 81) {
    goto LABEL_76;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v93, 2, 1, 1, 1);
  std::string::size_type v35 = v93.__r_.__value_.__r.__words[0];
  uint64_t v36 = *(std::__shared_weak_count **)(a1 + 800);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
  if (v36)
  {
    nitro::nitro_function::nitro_function(v36);
    std::string::size_type v19 = *(void *)(a1 + 792);
  }
  else
  {
    std::string::size_type v19 = v35;
  }
  if (a5 != 4 * *(int *)(v19 + 8))
  {
    uint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v43 = a5;
    uint64_t v44 = v42;
    std::to_string(&v104, v43);
    uint64_t v45 = std::string::insert(&v104, 0, "Unexpected size s=");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = std::string::append(&v105, "/blob=");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v103, 4 * *(int *)(*(void *)(a1 + 792) + 8));
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v49 = &v103;
    }
    else {
      uint64_t v49 = (std::string *)v103.__r_.__value_.__r.__words[0];
    }
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v50 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v50 = v103.__r_.__value_.__l.__size_;
    }
    BOOL v51 = std::string::append(&v106, (const std::string::value_type *)v49, v50);
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v107.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v100, " @ ");
    if ((v102 & 0x80u) == 0) {
      uint64_t v53 = (const std::string::value_type *)&v100;
    }
    else {
      uint64_t v53 = v100;
    }
    if ((v102 & 0x80u) == 0) {
      std::string::size_type v54 = v102;
    }
    else {
      std::string::size_type v54 = v101;
    }
    int v55 = std::string::append(&v107, v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v108.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    int v57 = std::string::append(&v108, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANECompilerEngine/Layers/ANECompilerInnerProduct.mm");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v109.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v97, ":");
    if ((v99 & 0x80u) == 0) {
      BOOL v59 = (const std::string::value_type *)&v97;
    }
    else {
      BOOL v59 = v97;
    }
    if ((v99 & 0x80u) == 0) {
      std::string::size_type v60 = v99;
    }
    else {
      std::string::size_type v60 = v98;
    }
    int v61 = std::string::append(&v109, v59, v60);
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v110.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v96, 80);
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v63 = &v96;
    }
    else {
      unsigned int v63 = (std::string *)v96.__r_.__value_.__r.__words[0];
    }
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v64 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v64 = v96.__r_.__value_.__l.__size_;
    }
    uint64_t v65 = std::string::append(&v110, (const std::string::value_type *)v63, v64);
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v44, &v93);
    __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_115:
  memcpy(*(void **)(v19 + 16), a4, a5);
  if (v12) {
LABEL_84:
  }
    nitro::nitro_function::nitro_function(v12);
}

void sub_192ABE7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v75 - 169) < 0) {
    operator delete(*(void **)(v75 - 192));
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v75 - 201) < 0) {
    operator delete(*(void **)(v75 - 224));
  }
  if (*(char *)(v75 - 233) < 0) {
    operator delete(*(void **)(v75 - 256));
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a54 < 0)
  {
    operator delete(a49);
    if ((v74 & 1) == 0)
    {
LABEL_28:
      if (v72) {
        nitro::nitro_function::nitro_function(v72);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v74)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v73);
  goto LABEL_28;
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, char a9)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a6;
  int v15 = (std::__shared_weak_count *)a6[1];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (v16 && (a9 & 1) == 0)
    {
      if (!*(unsigned char *)(a2 + 123)) {
        goto LABEL_9;
      }
LABEL_13:
      int v18 = (char *)operator new(0x58uLL);
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      *(void *)int v18 = &unk_1EE389AA8;
      *((void *)v18 + 3) = &unk_1EE36BF90;
      *(_OWORD *)(v18 + 56) = 0u;
      *(_OWORD *)(v18 + 72) = 0u;
      *((_DWORD *)v18 + 8) = a7;
      *((_DWORD *)v18 + 9) = a8;
      *((void *)v18 + 5) = a4;
      v18[48] = 0;
      *a1 = v18 + 24;
      a1[1] = v18;
      if (!v15)
      {
        *((void *)v18 + 7) = v16;
        *((void *)v18 + 8) = 0;
        if (!a3) {
          return;
        }
        goto LABEL_17;
      }
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)v18 + 7) = v16;
      *((void *)v18 + 8) = v15;
      goto LABEL_15;
    }
    if (v16) {
      goto LABEL_13;
    }
  }
LABEL_9:
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(&v32, a7, a8, 1, 1);
  long long v17 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  if (*(int *)(v17 + 12) * (uint64_t)*(int *)(v17 + 8) != a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v29, a5);
    int v20 = std::string::insert(&v29, 0, "Unexpected size s=");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int v22 = std::string::append(&v30, "/blob=");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, *(int *)(v17 + 12) * (uint64_t)*(int *)(v17 + 8));
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = &v28;
    }
    else {
      std::string::size_type v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    int v26 = std::string::append(&v31, (const std::string::value_type *)v24, size);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v32);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(v17 + 16), a4, a5);
  if (v15) {
LABEL_15:
  }
    nitro::nitro_function::nitro_function(v15);
  if (!a3) {
    return;
  }
LABEL_17:

  nitro::nitro_function::nitro_function(a3);
}

void sub_192ABECC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a10)
      {
        nitro::nitro_function::nitro_function(a10);
        if (!v36)
        {
LABEL_16:
          if (!v35) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      else if (!v36)
      {
        goto LABEL_16;
      }
      nitro::nitro_function::nitro_function(v36);
      if (!v35) {
LABEL_18:
      }
        _Unwind_Resume(a1);
LABEL_17:
      nitro::nitro_function::nitro_function(v35);
      goto LABEL_18;
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_inner_product_kernel::~mix_inner_product_kernel(Espresso::ANECompilerEngine::mix_inner_product_kernel *this)
{
}

{
  Espresso::generic_inner_product_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::mix_inner_product_kernel *)((char *)this - 544);
  *((void *)this - 68) = &unk_1EE344278;
  *(void *)this = &unk_1EE3444A8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
}

void Espresso::ANECompilerEngine::mix_inner_product_kernel::~mix_inner_product_kernel(Espresso::ANECompilerEngine::mix_inner_product_kernel *this)
{
  *(void *)this = &unk_1EE344278;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_inner_product_kernel *)((char *)this + 544);
  *((void *)this + 68) = &unk_1EE3444A8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE344278;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_inner_product_kernel *)((char *)this + 544);
  *((void *)this + 68) = &unk_1EE3444A8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_inner_product_kernel::compile(Espresso::ANECompilerEngine::mix_inner_product_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_inner_product_kernel::compile(Espresso::ANECompilerEngine::mix_inner_product_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v234 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4
    || (int v7 = std::__shared_weak_count::lock(v4)) == 0
    || (int v8 = (const Espresso::net *)*((void *)a2 + 1)) == 0)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*((void *)v8 + 72)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  __str.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
  uint64_t v11 = (const void *)*((void *)v9 + 5);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  long long v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)a3, (long long **)&__str);
  int v14 = (const void *)*((void *)v12 + 5);
  int v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v156 = v13;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  uint64_t v155 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v155, v15))
  {
    Espresso::ANECompilerEngine::inner_product_kernel::compile(this, a2, a3);
    goto LABEL_315;
  }
  if (*((void *)a3 + 7) - *((void *)a3 + 6) != 24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::abstract_blob_container::shape(v204, (uint64_t)v11);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v207, v8, (const Espresso::layer_shape *)v204, 1);
  if (__p)
  {
    uint64_t v206 = __p;
    operator delete(__p);
  }
  nitro::nitro_function::nitro_function(v7);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::abstract_blob_container::shape(v199, (uint64_t)v14);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v202, v8, (const Espresso::layer_shape *)v199, 1);
  if (v200)
  {
    char v201 = v200;
    operator delete(v200);
  }
  nitro::nitro_function::nitro_function(v7);
  std::string::basic_string[abi:ne180100]<0>(&v198, "");
  if (v210 > 3 || (long long v17 = (void *)*((void *)this + 55)) != 0 && *v17 && (v17[4] || v17[6] || v17[8] || v17[10]))
  {
    if (*((unsigned char *)this + 840)) {
      int v16 = v208 * v209 * *((_DWORD *)this + 77);
    }
    else {
      int v16 = *((_DWORD *)this + 77);
    }
    int v40 = *((_DWORD *)this + 76);
    int v41 = *((_DWORD *)this + 78);
    int v42 = *((_DWORD *)this + 89);
    v197[0] = v8;
    v197[1] = (const Espresso::net *)v7;
    uint64_t v43 = *((void *)this + 45);
    uint64_t v44 = *(void *)((char *)this + 316);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    memset(v173, 0, 24);
    v173[3] = v44;
    int v174 = v41;
    int v175 = 0;
    int v176 = v40;
    int v177 = v16;
    uint64_t v178 = 0x100000001;
    int v179 = 0;
    int v180 = v42;
    uint64_t v181 = v43;
    uint64_t v182 = 0;
    uint64_t v183 = 0;
    uint64_t v185 = 0x1000100010001;
    uint64_t v187 = 0;
    uint64_t v186 = 0;
    uint64_t v188 = 0x100000001;
    uint64_t v189 = 0;
    int v184 = 0;
    int v190 = 0x10000;
    int v193 = 0;
    uint64_t v191 = 0;
    uint64_t v192 = 0;
    __int16 v194 = 1;
    int v195 = 0;
    char v196 = 0;
    if (v11
    {
      uint64_t v171 = v45;
      int v172 = v10;
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v46 = v10;
        if (!v14) {
          goto LABEL_105;
        }
      }
      else
      {
        long long v46 = 0;
        if (!v14) {
          goto LABEL_105;
        }
      }
    }
    else
    {
      long long v46 = 0;
      uint64_t v171 = 0;
      int v172 = 0;
      if (!v14) {
        goto LABEL_105;
      }
    }
    if (v47)
    {
      long long v48 = v156;
      uint64_t v169 = v47;
      uint64_t v170 = v156;
      if (v156) {
        atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_106;
    }
LABEL_105:
    long long v48 = 0;
    uint64_t v169 = 0;
    uint64_t v170 = 0;
LABEL_106:
    Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(this, (uint64_t)a2, v197, (uint64_t)v173, (id *)a3, (uint64_t *)&v171, (uint64_t *)&v169);
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    nitro::nitro_function::nitro_function(v7);
    goto LABEL_313;
  }
  if ((v210 & 0xFFFFFFFE) == 2)
  {
    obuint64_t j = (id)objc_opt_new();
    std::string v154 = objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    int v18 = v166;
    uint64_t v166 = @"Transpose";

    unint64_t v148 = objc_opt_new();
    [v148 setObject:@"Height" forKeyedSubscript:@"TransposeSourceDimension"];
    [v148 setObject:@"Channel" forKeyedSubscript:@"TransposeDestinationDimension"];
    [v154 addObject:v148];
    id v147 = objc_opt_new();
    [v147 setObject:@"Channel" forKeyedSubscript:@"TransposeSourceDimension"];
    [v147 setObject:@"Batch" forKeyedSubscript:@"TransposeDestinationDimension"];
    [v154 addObject:v147];
    uint64_t v152 = objc_opt_new();
    id v149 = v10;
    [v152 setObject:@"Batch" forKeyedSubscript:@"TransposeSourceDimension"];
    [v152 setObject:@"Height" forKeyedSubscript:@"TransposeDestinationDimension"];
    [v154 addObject:v152];
    [obj setObject:v154 forKeyedSubscript:@"TransposeDimensions"];
    objc_storeStrong(&v167, obj);
    std::vector<std::string>::pointer begin = v162.__begin_;
    if ((v162.__begin_->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v162.__begin_->__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v162.__begin_->__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v224, size + 17);
    if ((v224[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v21 = v224;
    }
    else {
      long long v21 = (std::string *)v224[0].__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::vector<std::string>::pointer v22 = begin;
      }
      else {
        std::vector<std::string>::pointer v22 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
      }
      memmove(v21, v22, size);
    }
    strcpy((char *)v21 + size, "_input_transpose_");
    int v23 = *((char *)a3 + 23);
    if (v23 >= 0) {
      std::string::size_type v24 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v24 = *(const std::string::value_type **)a3;
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      std::string::size_type v25 = *((void *)a3 + 1);
    }
    int v26 = std::string::append(v224, v24, v25);
    std::string::size_type v27 = v26->__r_.__value_.__r.__words[0];
    v214[0].__r_.__value_.__r.__words[0] = v26->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v214[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
    char v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = v27;
    __str.__r_.__value_.__l.__size_ = v214[0].__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v214[0].__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = v28;
    if (SHIBYTE(v224[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v224[0].__r_.__value_.__l.__data_);
    }
    std::string::operator=(&v198, &__str);
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
    id v151 = (id)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v224[0].__r_.__value_.__l.__data_, (id *)a3);
    std::string v29 = v231;
    unint64_t v231 = @"MatrixMultiplication";

    int v233 = v203;
    if (*((char *)a3 + 23) >= 0) {
      size_t v30 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v30 = *((void *)a3 + 1);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v223, v30 + 3);
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v31 = &v223;
    }
    else {
      std::string v31 = (std::string *)v223.__r_.__value_.__r.__words[0];
    }
    if (v30)
    {
      if (*((char *)a3 + 23) >= 0) {
        std::string v32 = a3;
      }
      else {
        std::string v32 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
      }
      memmove(v31, v32, v30);
    }
    *(_DWORD *)((char *)&v31->__r_.__value_.__l.__data_ + v30) = 7823199;
    size_t v33 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
    LOBYTE(v30) = *((unsigned char *)&v223.__r_.__value_.__s + 23);
    std::string::size_type v34 = v223.__r_.__value_.__l.__size_;
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v35 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v35 = v223.__r_.__value_.__l.__size_;
    }
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v36 = &v223;
    }
    else {
      uint64_t v36 = (std::string *)v223.__r_.__value_.__r.__words[0];
    }
    if (v35 >= 8)
    {
      int v37 = (char *)v36 + v35;
      int v38 = v36;
      do
      {
        uint64_t v39 = (char *)memchr(v38, 95, v35 - 7);
        if (!v39) {
          break;
        }
        if (*(void *)v39 == 0x5F6C6C6F726E755FLL)
        {
          if (v39 != v37 && v39 - (char *)v36 != -1)
          {
            std::string::basic_string(v214, &v223, 0, v39 - (char *)v36, (std::allocator<char> *)&v212);
            int v61 = std::string::append(v214, "__w");
            std::string::size_type v62 = v61->__r_.__value_.__r.__words[0];
            v221[0] = (void *)v61->__r_.__value_.__l.__size_;
            *(void **)((char *)v221 + 7) = *(void **)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
            LODWORD(v30) = HIBYTE(v61->__r_.__value_.__r.__words[2]);
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v223.__r_.__value_.__l.__data_);
            }
            v223.__r_.__value_.__r.__words[0] = v62;
            v223.__r_.__value_.__l.__size_ = (std::string::size_type)v221[0];
            *(std::string::size_type *)((char *)&v223.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v221 + 7);
            *((unsigned char *)&v223.__r_.__value_.__s + 23) = v30;
            if (SHIBYTE(v214[0].__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v214[0].__r_.__value_.__l.__data_);
              LODWORD(v30) = HIBYTE(v223.__r_.__value_.__r.__words[2]);
            }
            std::string::size_type v34 = v223.__r_.__value_.__l.__size_;
            size_t v33 = v30;
          }
          break;
        }
        int v38 = (std::string *)(v39 + 1);
        int64_t v35 = v37 - (char *)v38;
      }
      while (v37 - (char *)v38 >= 8);
    }
    if ((v30 & 0x80u) == 0) {
      size_t v63 = v33;
    }
    else {
      size_t v63 = v34;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v221, v63 + 3);
    if (v222 >= 0) {
      std::string::size_type v64 = v221;
    }
    else {
      std::string::size_type v64 = (void **)v221[0];
    }
    if (v63)
    {
      if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v65 = &v223;
      }
      else {
        uint64_t v65 = (std::string *)v223.__r_.__value_.__r.__words[0];
      }
      memmove(v64, v65, v63);
    }
    *(_DWORD *)((char *)v64 + v63) = 6446943;
    unint64_t v10 = v149;
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 35), &v223))
    {
      memset(v214, 0, 40);
      (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::mix_inner_product_kernel *))(*(void *)this + 416))(&v212, this);
      if (!v212.__r_.__value_.__r.__words[0])
      {
        uint64_t v66 = *((void *)this + 97);
        uint64_t v67 = (std::__shared_weak_count *)*((void *)this + 98);
        if (v67) {
          atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v66) {
          Espresso::throw_exception_selector<Espresso::generic_error>("InnerProduct kernel has no weights");
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v159, (int *)(v66 + 8));
        unint64_t v68 = (std::__shared_weak_count *)v212.__r_.__value_.__l.__size_;
        *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v159;
        if (v68)
        {
          nitro::nitro_function::nitro_function(v68);
          std::string::size_type v69 = v212.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v69 = v159;
        }
        Espresso::CPUFP16Engine::f16_to_fp32(*(Espresso::CPUFP16Engine **)(v66 + 16), *(unsigned __int16 **)(v69 + 16), *(int *)(v66 + 12) * (uint64_t)*(int *)(v66 + 8));
        if (v67) {
          nitro::nitro_function::nitro_function(v67);
        }
      }
      if (*((_DWORD *)this + 78)) {
        int v81 = *((_DWORD *)this + 77) + 1;
      }
      else {
        int v81 = *((_DWORD *)this + 77);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v159, *((_DWORD *)this + 76), 1, v81, 1);
      if (*((void *)this + 78))
      {
        uint64_t v82 = (std::__shared_weak_count *)*((void *)this + 79);
        int v157 = (std::string *)*((void *)this + 78);
        int v158 = v82;
        if (v82) {
          atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        Espresso::blob<float,1>::make(&v157, *((_DWORD *)this + 76));
      }
      std::string::operator=(v214, &v223);
      long long v83 = v159;
      if (*((void *)&v159 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v159 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v84 = (std::__shared_weak_count *)v214[1].__r_.__value_.__l.__size_;
      *(_OWORD *)&v214[1].__r_.__value_.__l.__data_ = v83;
      if (v84) {
        nitro::nitro_function::nitro_function(v84);
      }
      int v85 = *((_DWORD *)this + 77);
      if (*((_DWORD *)this + 78)) {
        int v86 = v85 + 1;
      }
      else {
        int v86 = *((_DWORD *)this + 77);
      }
      if (v86)
      {
        unsigned int v87 = 0;
        unsigned int v88 = 0;
        std::string::size_type v89 = v212.__r_.__value_.__r.__words[0];
        uint64_t v90 = v157;
        uint64_t v91 = *((unsigned int *)this + 76);
        do
        {
          if (v88 == v85)
          {
            if (v91)
            {
              BOOL v92 = (int *)v90->__r_.__value_.__r.__words[2];
              uint64_t v93 = *(void *)(v83 + 24);
              unsigned int v94 = v91 * v85;
              uint64_t v95 = v91;
              do
              {
                int v96 = *v92++;
                *(_DWORD *)(v93 + 4 * v94++) = v96;
                --v95;
              }
              while (v95);
            }
          }
          else if (v91)
          {
            uint64_t v97 = *(void *)(v89 + 16);
            uint64_t v98 = *(void *)(v83 + 24);
            unsigned int v99 = v88;
            unsigned int v100 = v87;
            uint64_t v101 = v91;
            do
            {
              *(_DWORD *)(v98 + 4 * v100++) = *(_DWORD *)(v97 + 4 * v99);
              v99 += v85;
              --v101;
            }
            while (v101);
          }
          ++v88;
          v87 += v91;
        }
        while (v88 != v86);
      }
      uint64_t v211 = &v223;
      unsigned __int8 v102 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &v223, (long long **)&v211);
      std::string::operator=((std::string *)(v102 + 56), v214);
      unsigned long long v105 = *(_OWORD *)&v214[1].__r_.__value_.__l.__data_;
      uint64_t v103 = v105 >> 64;
      uint64_t v104 = v105;
      if (v214[1].__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v214[1].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      std::string v106 = (std::__shared_weak_count *)*((void *)v102 + 11);
      *((void *)v102 + 10) = v104;
      *((void *)v102 + 11) = v103;
      if (v106) {
        nitro::nitro_function::nitro_function(v106);
      }
      if (v158) {
        nitro::nitro_function::nitro_function(v158);
      }
      if (*((void *)&v83 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v83 + 1));
      }
      if (v212.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v212.__r_.__value_.__l.__size_);
      }
      if (v214[1].__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v214[1].__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v214[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v214[0].__r_.__value_.__l.__data_);
      }
    }
    if (*((_DWORD *)this + 78))
    {
      std::string v107 = [NSNumber numberWithShort:15360];
      [v151 setObject:v107 forKeyedSubscript:@"Bias"];
    }
    std::string::operator=(v225, &v198);
    std::string v108 = v226;
    if ((unint64_t)v226 >= v227)
    {
      std::string v110 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v225, (uint64_t)&v223);
    }
    else
    {
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v226, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v109 = *(_OWORD *)&v223.__r_.__value_.__l.__data_;
        v226->__r_.__value_.__r.__words[2] = v223.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v108->__r_.__value_.__l.__data_ = v109;
      }
      std::string v110 = v108 + 1;
    }
    uint64_t v226 = v110;
    objc_storeStrong(&v232, v151);
    std::string::append(v224, "__matmul");
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v224);
    std::string::operator=(&v198, v224);
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v214[0].__r_.__value_.__l.__data_, (id *)a3);
    char v111 = v219;
    std::string::size_type v219 = @"Transpose";

    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v212, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
    }
    else {
      std::string v212 = v198;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v215, &v212, (long long *)&v213, 1uLL);
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v212.__r_.__value_.__l.__data_);
    }
    uint64_t v112 = objc_opt_new();
    uint64_t v113 = objc_opt_new();
    long long v114 = objc_opt_new();
    [v113 setObject:@"Height" forKeyedSubscript:@"TransposeSourceDimension"];
    [v113 setObject:@"Batch" forKeyedSubscript:@"TransposeDestinationDimension"];
    [v112 addObject:v113];
    uint64_t v115 = objc_opt_new();
    [v115 setObject:@"Channel" forKeyedSubscript:@"TransposeSourceDimension"];
    [v115 setObject:@"Height" forKeyedSubscript:@"TransposeDestinationDimension"];
    [v112 addObject:v115];
    long long v116 = objc_opt_new();
    [v116 setObject:@"Batch" forKeyedSubscript:@"TransposeSourceDimension"];
    [v116 setObject:@"Channel" forKeyedSubscript:@"TransposeDestinationDimension"];
    [v112 addObject:v116];
    [v114 setObject:v112 forKeyedSubscript:@"TransposeDimensions"];
    objc_storeStrong(&v220, v114);
    if (*((_DWORD *)this + 79) || *((_DWORD *)this + 80))
    {
      std::string::append(v214, "_matmul_transpose");
      std::string::operator=(&v198, v214);
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v214);

    if (v217 < 0) {
      operator delete(v216);
    }
    v212.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
    v212.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
    if (SHIBYTE(v214[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v214[0].__r_.__value_.__l.__data_);
    }
    if (v222 < 0) {
      operator delete(v221[0]);
    }
    if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v223.__r_.__value_.__l.__data_);
    }

    if (v229 < 0) {
      operator delete(v228);
    }
    v214[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v214);
    v214[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v224[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v214);
    if (SHIBYTE(v224[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v224[0].__r_.__value_.__l.__data_);
    }

    if (v164 < 0) {
      operator delete(v163);
    }
    v224[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
    v224[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (v210 != 1) {
      goto LABEL_291;
    }
    obuint64_t j = (id)objc_opt_new();
    uint64_t v150 = v10;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    uint64_t v49 = v166;
    uint64_t v166 = @"MatrixMultiplication";

    int v168 = v203;
    if (*((char *)a3 + 23) >= 0) {
      size_t v50 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v50 = *((void *)a3 + 1);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v214, v50 + 3);
    if ((v214[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v51 = v214;
    }
    else {
      BOOL v51 = (std::string *)v214[0].__r_.__value_.__r.__words[0];
    }
    if (v50)
    {
      if (*((char *)a3 + 23) >= 0) {
        long long v52 = a3;
      }
      else {
        long long v52 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
      }
      memmove(v51, v52, v50);
    }
    *(_DWORD *)((char *)&v51->__r_.__value_.__l.__data_ + v50) = 7823199;
    size_t v53 = HIBYTE(v214[0].__r_.__value_.__r.__words[2]);
    LOBYTE(v54) = *((unsigned char *)&v214[0].__r_.__value_.__s + 23);
    std::string::size_type v55 = v214[0].__r_.__value_.__l.__size_;
    if ((v214[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v56 = HIBYTE(v214[0].__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v56 = v214[0].__r_.__value_.__l.__size_;
    }
    if ((v214[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v57 = v214;
    }
    else {
      int v57 = (std::string *)v214[0].__r_.__value_.__r.__words[0];
    }
    if (v56 >= 8)
    {
      long long v58 = (char *)v57 + v56;
      BOOL v59 = v57;
      do
      {
        std::string::size_type v60 = (char *)memchr(v59, 95, v56 - 7);
        if (!v60) {
          break;
        }
        if (*(void *)v60 == 0x5F6C6C6F726E755FLL)
        {
          if (v60 != v58 && v60 - (char *)v57 != -1)
          {
            uint64_t v70 = std::string::basic_string(v224, v214, 0, v60 - (char *)v57, (std::allocator<char> *)v221);
            long long v71 = std::string::append(v70, "__w");
            std::string::size_type v72 = v71->__r_.__value_.__r.__words[0];
            v223.__r_.__value_.__r.__words[0] = v71->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v223.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v71->__r_.__value_.__r.__words[1] + 7);
            unsigned int v73 = HIBYTE(v71->__r_.__value_.__r.__words[2]);
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v214[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v214[0].__r_.__value_.__l.__data_);
            }
            v214[0].__r_.__value_.__r.__words[0] = v72;
            v214[0].__r_.__value_.__l.__size_ = v223.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v214[0].__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v223.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v214[0].__r_.__value_.__s + 23) = v73;
            unsigned int v54 = v73;
            if (SHIBYTE(v224[0].__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v224[0].__r_.__value_.__l.__data_);
              unsigned int v54 = HIBYTE(v214[0].__r_.__value_.__r.__words[2]);
            }
            std::string::size_type v55 = v214[0].__r_.__value_.__l.__size_;
            size_t v53 = v54;
          }
          break;
        }
        BOOL v59 = (std::string *)(v60 + 1);
        int64_t v56 = v58 - (char *)v59;
      }
      while (v58 - (char *)v59 >= 8);
    }
    if ((v54 & 0x80u) == 0) {
      size_t v74 = v53;
    }
    else {
      size_t v74 = v55;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v223, v74 + 3);
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v75 = &v223;
    }
    else {
      uint64_t v75 = (std::string *)v223.__r_.__value_.__r.__words[0];
    }
    if (v74)
    {
      if ((v214[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v76 = v214;
      }
      else {
        uint64_t v76 = (std::string *)v214[0].__r_.__value_.__r.__words[0];
      }
      memmove(v75, v76, v74);
    }
    *(_DWORD *)((char *)&v75->__r_.__value_.__l.__data_ + v74) = 6446943;
    unint64_t v10 = v150;
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 35), v214))
    {
      memset(v224, 0, 40);
      (*(void (**)(void **__return_ptr, Espresso::ANECompilerEngine::mix_inner_product_kernel *))(*(void *)this + 416))(v221, this);
      if (!v221[0])
      {
        uint64_t v77 = *((void *)this + 97);
        uint64_t v78 = (std::__shared_weak_count *)*((void *)this + 98);
        if (v78) {
          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v77) {
          Espresso::throw_exception_selector<Espresso::generic_error>("InnerProduct kernel has no weights");
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v212, (int *)(v77 + 8));
        std::string::size_type v79 = (std::__shared_weak_count *)v221[1];
        *(_OWORD *)int v221 = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
        if (v79)
        {
          nitro::nitro_function::nitro_function(v79);
          uint64_t v80 = (unsigned __int16 **)v221[0];
        }
        else
        {
          uint64_t v80 = (unsigned __int16 **)v212.__r_.__value_.__r.__words[0];
        }
        Espresso::CPUFP16Engine::f16_to_fp32(*(Espresso::CPUFP16Engine **)(v77 + 16), v80[2], *(int *)(v77 + 12) * (uint64_t)*(int *)(v77 + 8));
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
      }
      if (*((_DWORD *)this + 78)) {
        int v117 = *((_DWORD *)this + 77) + 1;
      }
      else {
        int v117 = *((_DWORD *)this + 77);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v212, *((_DWORD *)this + 76), 1, v117, 1);
      if (*((void *)this + 78))
      {
        uint64_t v118 = *((void *)this + 79);
        *(void *)&long long v159 = *((void *)this + 78);
        *((void *)&v159 + 1) = v118;
        if (v118) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v118 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        Espresso::blob<float,1>::make(&v159, *((_DWORD *)this + 76));
      }
      std::string::operator=(v224, v214);
      long long v119 = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
      if (v212.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v212.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      vImage_Buffer v120 = (std::__shared_weak_count *)v224[1].__r_.__value_.__l.__size_;
      *(_OWORD *)&v224[1].__r_.__value_.__l.__data_ = v119;
      if (v120) {
        nitro::nitro_function::nitro_function(v120);
      }
      int v121 = *((_DWORD *)this + 77);
      if (*((_DWORD *)this + 78)) {
        int v122 = v121 + 1;
      }
      else {
        int v122 = *((_DWORD *)this + 77);
      }
      if (v122)
      {
        unsigned int v123 = 0;
        unsigned int v124 = 0;
        char v125 = v221[0];
        uint64_t v126 = v159;
        uint64_t v127 = *((unsigned int *)this + 76);
        do
        {
          if (v124 == v121)
          {
            if (v127)
            {
              uint64_t v128 = *(int **)(v126 + 16);
              uint64_t v129 = *(void *)(v119 + 24);
              unsigned int v130 = v127 * v121;
              uint64_t v131 = v127;
              do
              {
                int v132 = *v128++;
                *(_DWORD *)(v129 + 4 * v130++) = v132;
                --v131;
              }
              while (v131);
            }
          }
          else if (v127)
          {
            uint64_t v133 = v125[2];
            uint64_t v134 = *(void *)(v119 + 24);
            unsigned int v135 = v124;
            unsigned int v136 = v123;
            uint64_t v137 = v127;
            do
            {
              *(_DWORD *)(v134 + 4 * v136++) = *(_DWORD *)(v133 + 4 * v135);
              v135 += v121;
              --v137;
            }
            while (v137);
          }
          ++v124;
          v123 += v127;
        }
        while (v124 != v122);
      }
      int v157 = v214;
      uint64_t v138 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, v214, (long long **)&v157);
      Espresso::ANECompilerEngine::compiler::build_state_t::constant_t::operator=((std::string *)(v138 + 56), v224);
      if (*((void *)&v159 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v159 + 1));
      }
      if (*((void *)&v119 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v119 + 1));
      }
      if (v221[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v221[1]);
      }
      std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)v224);
    }
    if (*((_DWORD *)this + 78))
    {
      int v139 = [NSNumber numberWithShort:15360];
      [obj setObject:v139 forKeyedSubscript:@"Bias"];
    }
    std::string::operator=(v162.__begin_, *((const std::string **)a3 + 6));
    std::vector<std::string>::pointer end = v162.__end_;
    if (v162.__end_ >= v162.__end_cap_.__value_)
    {
      unint64_t v142 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v162, (uint64_t)v214);
    }
    else
    {
      if (SHIBYTE(v214[0].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v162.__end_, v214[0].__r_.__value_.__l.__data_, v214[0].__r_.__value_.__l.__size_);
      }
      else
      {
        long long v141 = *(_OWORD *)&v214[0].__r_.__value_.__l.__data_;
        v162.__end_->__r_.__value_.__r.__words[2] = v214[0].__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v141;
      }
      unint64_t v142 = end + 1;
    }
    v162.__end_ = v142;
    objc_storeStrong(&v167, obj);
    if (*((_DWORD *)this + 79) || *((_DWORD *)this + 80))
    {
      std::string::append(&__str, "__matmul");
      std::string::operator=(&v198, &__str);
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
    if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v223.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v214[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v214[0].__r_.__value_.__l.__data_);
    }

    if (v164 < 0) {
      operator delete(v163);
    }
    v224[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
    v224[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }

LABEL_291:
  if (*((_DWORD *)this + 79))
  {
    unint64_t v143 = objc_opt_new();
    [v143 setObject:@"ReLU" forKeyedSubscript:@"Type"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    unint64_t v144 = v166;
    uint64_t v166 = @"Neuron";

    objc_storeStrong(&v167, v143);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(v224, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
    }
    else {
      v224[0] = v198;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v162, v224, (long long *)&v224[1], 1uLL);
    if (SHIBYTE(v224[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v224[0].__r_.__value_.__l.__data_);
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

    if (v164 < 0) {
      operator delete(v163);
    }
    v224[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
    v224[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (!*((_DWORD *)this + 80)) {
      goto LABEL_313;
    }
    unint64_t v143 = objc_opt_new();
    [v143 setObject:@"Tanh" forKeyedSubscript:@"Type"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    uint64_t v145 = v166;
    uint64_t v166 = @"Neuron";

    objc_storeStrong(&v167, v143);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(v224, v198.__r_.__value_.__l.__data_, v198.__r_.__value_.__l.__size_);
    }
    else {
      v224[0] = v198;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v162, v224, (long long *)&v224[1], 1uLL);
    if (SHIBYTE(v224[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v224[0].__r_.__value_.__l.__data_);
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

    if (v164 < 0) {
      operator delete(v163);
    }
    v224[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
    v224[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v224);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }

LABEL_313:
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v198.__r_.__value_.__l.__data_);
  }
LABEL_315:

  if (v156) {
    nitro::nitro_function::nitro_function(v156);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192AC079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v72 - 233) < 0) {
    operator delete(*(void **)(v72 - 256));
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a26);

  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a71);
  }

  if (a20)
  {
    nitro::nitro_function::nitro_function(a20);
    if (!a14)
    {
LABEL_9:
      if (!v71) {
LABEL_14:
      }
        _Unwind_Resume(a1);
LABEL_13:
      nitro::nitro_function::nitro_function(v71);
      goto LABEL_14;
    }
  }
  else if (!a14)
  {
    goto LABEL_9;
  }
  nitro::nitro_function::nitro_function(a14);
  if (!v71) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(void *a1, uint64_t a2, const Espresso::net **a3, uint64_t a4, id *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v517 = *MEMORY[0x1E4F143B8];
  int v418 = *(unsigned __int8 *)(a2 + 552);
  memset(v484, 0, sizeof(v484));
  uint64_t v11 = *a3;
  unint64_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape(v480, *a6);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v483, v11, (const Espresso::layer_shape *)v480, 1);
  if (__p)
  {
    char v482 = __p;
    operator delete(__p);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  int v13 = *a3;
  long long v12 = (std::__shared_weak_count *)a3[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape(v476, *a7);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v479, v13, (const Espresso::layer_shape *)v476, 1);
  if (v477)
  {
    __int16 v478 = v477;
    operator delete(v477);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  int v14 = *a3;
  int v15 = a5[6];
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)*a3 + 45), v15))
  {
    *(void *)buf = v15;
    int v16 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v14 + 44, v15, (uint64_t)&std::piecewise_construct, (long long **)buf);
    *(_OWORD *)&v495.__r_.__value_.__l.__data_ = *(_OWORD *)(v16 + 56);
    v496[1] = 0;
    v495.__r_.__value_.__r.__words[2] = 0;
    v496[0] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v495.__r_.__value_.__r.__words[2], *((const void **)v16 + 9), *((void *)v16 + 10), (uint64_t)(*((void *)v16 + 10) - *((void *)v16 + 9)) >> 2);
    if (LODWORD(v495.__r_.__value_.__r.__words[1]) == -1) {
      int v17 = 1;
    }
    else {
      int v17 = v495.__r_.__value_.__r.__words[1];
    }
    if (v495.__r_.__value_.__r.__words[2])
    {
      v496[0] = *((void *)&v495.__r_.__value_.__l + 2);
      operator delete((void *)v495.__r_.__value_.__r.__words[2]);
    }
    int v14 = *a3;
  }
  else
  {
    int v17 = 1;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v14 + 472);
  v419 = __int16 v475 = 0;
  Espresso::ANECompilerEngine::query_dilation_options(a4, 0, v17, (char *)&v475 + 1, &v475, v419);
  int v19 = *(_DWORD *)(a4 + 48);
  int v18 = *(_DWORD *)(a4 + 52);
  int v20 = *(__int16 *)(a4 + 96);
  BOOL v21 = v20 < 2;
  int v22 = *(__int16 *)(a4 + 98);
  if (HIBYTE(v475))
  {
    BOOL v23 = v22 < 2;
  }
  else
  {
    BOOL v21 = 1;
    BOOL v23 = 1;
  }
  if (v21) {
    uint64_t v24 = v19;
  }
  else {
    uint64_t v24 = ((v19 - 1) * v20 + 1);
  }
  if (v23) {
    uint64_t v25 = v18;
  }
  else {
    uint64_t v25 = ((v18 - 1) * v22 + 1);
  }
  BOOL v26 = v20 >= 2 && v19 > 1 || v22 > 1 && v18 > 1;
  BOOL v421 = v26;
  char v28 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  v423 = [v28 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse((uint64_t)*a3 + 472, v423);
  uint64_t v29 = (uint64_t)a5[6];
  if ((char *)a5[7] - v29 != (unsigned char *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v30 = *a6;
  if (!*a6)
  {
    if (*(char *)(v29 + 23) < 0) {
      uint64_t v29 = *(void *)v29;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v29);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v375 = (uint64_t)a5;
    }
    else {
      uint64_t v375 = (uint64_t)*a5;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v375);
  }
  long long v473 = 0;
  uint64_t v472 = 0;
  unint64_t v474 = 0;
  if (a1 && *((unsigned char *)a1 + 840) && (*(int *)(v30 + 8) > 1 || *(int *)(v30 + 12) >= 2))
  {
    std::string v31 = objc_opt_new();
    [v31 setObject:@"NCHW" forKeyedSubscript:@"Mode"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
    std::string v32 = v503;
    v503 = @"Flatten";

    objc_storeStrong(&v504, v31);
    unint64_t v33 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
    if (v33 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v34 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
    if (v34 <= v33 + 1) {
      unint64_t v34 = v33 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v35 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v35 = v34;
    }
    *((void *)&v508 + 1) = &v474;
    if (v35) {
      unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v35);
    }
    else {
      uint64_t v36 = 0;
    }
    *(void *)buf = v35;
    *(void *)&uint8_t buf[8] = v35 + 16 * (((uint64_t)v473 - v472) >> 4);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v508 = v35 + 144 * v36;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
    int v37 = v473;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    long long v473 = v37;

    if (v501 < 0) {
      operator delete(v500);
    }
    *(void *)buf = &v497;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)buf = v496;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v495.__r_.__value_.__l.__data_);
    }
  }
  int v38 = objc_opt_new();
  [v38 setObject:@"Dense" forKeyedSubscript:@"KernelMode"];
  if (*((unsigned char *)a1 + 754))
  {
    [v38 setObject:@"Unity" forKeyedSubscript:@"KernelMode"];
    [v38 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  }
  uint64_t v39 = [NSNumber numberWithInt:v24];
  [v38 setObject:v39 forKeyedSubscript:@"KernelWidth"];

  int v40 = [NSNumber numberWithInt:v25];
  [v38 setObject:v40 forKeyedSubscript:@"KernelHeight"];

  int v41 = *(_DWORD *)(a4 + 116);
  if (v41 >= 2 && v41 == *(_DWORD *)(a4 + 44) && v41 == *(_DWORD *)(a4 + 40))
  {
    [v38 setObject:@"ChannelWiseConv" forKeyedSubscript:@"Type"];
    int v42 = @"ChannelWiseDilatedConv";
  }
  else
  {
    [v38 setObject:@"Conv" forKeyedSubscript:@"Type"];
    int v42 = @"DilatedConv";
  }
  obuint64_t j = v42;
  int v420 = *(_DWORD *)(a4 + 116);
  [v38 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"KernelGroupReuse"];
  if (*((unsigned char *)a1 + 753)) {
    [v38 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"KernelGroupReuse"];
  }
  if (*((unsigned char *)a1 + 754)) {
    goto LABEL_196;
  }
  uint64_t v44 = (std::__shared_weak_count *)a3[1];
  long long v470 = *a3;
  v471 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "post_scale");
  BOOL v45 = ((*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v470, a1, &v495) & 0x80000000) == 0|| a1[76] != 0;
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v471) {
    nitro::nitro_function::nitro_function(v471);
  }
  long long v46 = (std::__shared_weak_count *)a3[1];
  v468 = *a3;
  v469 = v46;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "W_S8");
  uint64_t v47 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v468, a1, &v495);
  if ((int)v47 < 0) {
    BOOL v45 = 0;
  }
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v469) {
    nitro::nitro_function::nitro_function(v469);
  }
  if (v45)
  {
    long long v48 = (std::__shared_weak_count *)a3[1];
    v466 = *a3;
    unint64_t v467 = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "W_S8");
    (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v466, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v467) {
      nitro::nitro_function::nitro_function(v467);
    }
    uint64_t v49 = [NSNumber numberWithInt:v47];
    [v38 setObject:v49 forKeyedSubscript:@"KernelOffset"];

    size_t v50 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__l.__data_, (const void *)v495.__r_.__value_.__r.__words[2]));
    [v38 setObject:v50 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
    if (a1) {
      BOOL v51 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      BOOL v51 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v51, v495.__r_.__value_.__l.__data_);
    goto LABEL_196;
  }
  long long v52 = (std::__shared_weak_count *)a3[1];
  v464 = *a3;
  v465 = v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "W_int8");
  uint64_t v53 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v464, a1, &v495);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v465) {
    nitro::nitro_function::nitro_function(v465);
  }
  if ((v53 & 0x80000000) == 0)
  {
    unsigned int v54 = (std::__shared_weak_count *)a3[1];
    v462 = *a3;
    v463 = v54;
    if (v54) {
      atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "W_int8");
    (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v462, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v463) {
      nitro::nitro_function::nitro_function(v463);
    }
    std::string::size_type v55 = [NSNumber numberWithInt:v53];
    [v38 setObject:v55 forKeyedSubscript:@"KernelOffset"];

    int64_t v56 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__l.__data_, (const void *)v495.__r_.__value_.__r.__words[2]));
    [v38 setObject:v56 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
    if (a1) {
      int v57 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      int v57 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v57, v495.__r_.__value_.__l.__data_);
    goto LABEL_196;
  }
  long long v58 = (std::__shared_weak_count *)a3[1];
  v460 = *a3;
  v461 = v58;
  if (v58) {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "blob_weights");
  uint64_t v59 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v460, a1, &v495);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v461) {
    nitro::nitro_function::nitro_function(v461);
  }
  if ((v59 & 0x80000000) == 0)
  {
    std::string::size_type v60 = (std::__shared_weak_count *)a3[1];
    v458 = *a3;
    uint64_t v459 = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
    (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v458, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v459) {
      nitro::nitro_function::nitro_function(v459);
    }
    int v61 = [NSNumber numberWithInt:v59];
    [v38 setObject:v61 forKeyedSubscript:@"KernelOffset"];

    std::string::size_type v62 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__l.__data_, (const void *)v495.__r_.__value_.__r.__words[2]));
    [v38 setObject:v62 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
    if (a1) {
      size_t v63 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      size_t v63 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v63, v495.__r_.__value_.__l.__data_);
    goto LABEL_196;
  }
  std::string::size_type v64 = (std::__shared_weak_count *)a3[1];
  v456 = *a3;
  v457 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v495, "blob_weights_f16");
  uint64_t v65 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v456, a1, &v495);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v457) {
    nitro::nitro_function::nitro_function(v457);
  }
  if ((v65 & 0x80000000) == 0)
  {
    uint64_t v66 = (std::__shared_weak_count *)a3[1];
    uint64_t v454 = *a3;
    v455 = v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
    (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v454, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v455) {
      nitro::nitro_function::nitro_function(v455);
    }
    uint64_t v67 = [NSNumber numberWithInt:v65];
    [v38 setObject:v67 forKeyedSubscript:@"KernelOffset"];

    unint64_t v68 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__l.__data_, (const void *)v495.__r_.__value_.__r.__words[2]));
    [v38 setObject:v68 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
    if (a1) {
      std::string::size_type v69 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      std::string::size_type v69 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v69, v495.__r_.__value_.__l.__data_);
    goto LABEL_196;
  }
  if (a1[97])
  {
    uint64_t v70 = (std::__shared_weak_count *)a1[98];
    if (a1) {
      long long v71 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      long long v71 = 0;
    }
    v453[0] = a1[97];
    v453[1] = v70;
    if (v70) {
      atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v71, v453);
    if (v70) {
      nitro::nitro_function::nitro_function(v70);
    }
    std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,unsigned short *&,int,void>(&v495, *(void *)(a1[97] + 16), 2 * *(_DWORD *)(a1[97] + 8) * *(_DWORD *)(a1[97] + 12));
    size_t size = (std::__shared_weak_count *)v495.__r_.__value_.__l.__size_;
    std::string::size_type v72 = v495.__r_.__value_.__r.__words[0];
    if (v495.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v495.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v74 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v72 + 16), *(int *)(v72 + 8));
    if (size) {
      nitro::nitro_function::nitro_function(size);
    }
    uint64_t v75 = [NSNumber numberWithInt:v74];
    [v38 setObject:v75 forKeyedSubscript:@"KernelOffset"];

    uint64_t v76 = NSNumber;
    if (v418) {
      uint64_t weights_file_index = 0;
    }
    else {
    int v86 = [v76 numberWithUnsignedLong:weights_file_index];
    }
    [v38 setObject:v86 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
    goto LABEL_177;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&v495, a1);
  std::string::size_type v78 = v495.__r_.__value_.__r.__words[0];
  if (v495.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v495.__r_.__value_.__l.__size_);
  }
  if (v78)
  {
    (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&v495, a1);
    if (a1) {
      std::string::size_type v79 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 68);
    }
    else {
      std::string::size_type v79 = 0;
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)v484, v79, &v495);
    std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,unsigned short *&,int,void>(buf, *(void *)(v495.__r_.__value_.__r.__words[0] + 16), 4 * *(_DWORD *)(v495.__r_.__value_.__r.__words[0] + 8) * *(_DWORD *)(v495.__r_.__value_.__r.__words[0] + 12));
    uint64_t v80 = *(void *)buf;
    int v81 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v82 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v80 + 16), *(int *)(v80 + 8));
    if (v81) {
      nitro::nitro_function::nitro_function(v81);
    }
    long long v83 = [NSNumber numberWithInt:v82];
    [v38 setObject:v83 forKeyedSubscript:@"KernelOffset"];

    long long v84 = NSNumber;
    if (v418) {
      uint64_t v85 = 0;
    }
    else {
    uint64_t v90 = [v84 numberWithUnsignedLong:v85];
    }
    [v38 setObject:v90 forKeyedSubscript:@"KernelIndex"];

    [v38 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
    if (v81) {
      nitro::nitro_function::nitro_function(v81);
    }
    unsigned int v87 = (std::__shared_weak_count *)v495.__r_.__value_.__l.__size_;
    if (!v495.__r_.__value_.__l.__size_) {
      goto LABEL_196;
    }
    goto LABEL_195;
  }
  unsigned int v88 = (Espresso::quantized_weights_helper *)a1[55];
  if (!v88
    || !*(void *)v88
    || !*((void *)v88 + 4) && !*((void *)v88 + 6) && !*((void *)v88 + 8) && !*((void *)v88 + 10))
  {
    uint64_t v326 = *a1;
    if (!v327)
    {
      char v334 = 0;
      goto LABEL_663;
    }
    unint64_t v328 = v327;
    (*(void (**)(std::string *__return_ptr))(*(void *)v327 + 568))(&v495);
    std::string::size_type v329 = v495.__r_.__value_.__r.__words[0];
    if (!v495.__r_.__value_.__r.__words[0]) {
      goto LABEL_658;
    }
    v330 = v328 + 536;
    if (v328[559] < 0)
    {
      uint64_t v335 = *((void *)v328 + 68);
      if (v335 != 4)
      {
        if (v335 != 6) {
          goto LABEL_658;
        }
        if (**(_DWORD **)v330 != 1852399447 || *(_WORD *)(*(void *)v330 + 4) != 14452) {
          goto LABEL_658;
        }
        goto LABEL_652;
      }
      v332 = *(_DWORD **)v330;
    }
    else
    {
      int v331 = v328[559];
      v332 = v328 + 536;
      if (v331 != 4)
      {
        if (v331 != 6) {
          goto LABEL_658;
        }
        if (*(_DWORD *)v330 != 1852399447 || *((_WORD *)v328 + 270) != 14452) {
          goto LABEL_658;
        }
        goto LABEL_652;
      }
    }
    if (*v332 != 947216215)
    {
LABEL_658:
      char v334 = 0;
LABEL_659:
      if (v495.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v495.__r_.__value_.__l.__size_);
      }
      if (!a1) {
        goto LABEL_694;
      }
      uint64_t v326 = *a1;
LABEL_663:
      v346 = (unsigned int *)(*(uint64_t (**)(void *))(v326 + 384))(a1);
      if (v346[9] == 1)
      {
        vDSP_Length v347 = v346[1];
        uint64_t v402 = *v346;
        v348 = (std::__shared_weak_count *)a3[1];
        int v449 = *a3;
        int v450 = v348;
        if (v348) {
          atomic_fetch_add_explicit(&v348->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_8bit");
        (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v449, a1, buf);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v450) {
          nitro::nitro_function::nitro_function(v450);
        }
        uint64_t v349 = (std::__shared_weak_count *)a3[1];
        v447 = *a3;
        char v448 = v349;
        if (v349) {
          atomic_fetch_add_explicit(&v349->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "Qscale");
        (*(void (**)(unsigned char *__return_ptr, void *, const Espresso::net **, void *, std::string *))(a1[68] + 120))(buf, a1 + 68, &v447, a1, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v448) {
          nitro::nitro_function::nitro_function(v448);
        }
        int v350 = (std::__shared_weak_count *)a3[1];
        int v445 = *a3;
        v446 = v350;
        if (v350) {
          atomic_fetch_add_explicit(&v350->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v489, "Qbias");
        (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, void **))(a1[68] + 120))(&__str, a1 + 68, &v445, a1, &v489);
        if (SHIBYTE(v491) < 0) {
          operator delete(v489);
        }
        vDSP_Length v414 = v347;
        if (v446) {
          nitro::nitro_function::nitro_function(v446);
        }
        std::string::size_type v351 = v495.__r_.__value_.__r.__words[0];
        if (v495.__r_.__value_.__r.__words[0])
        {
          uint64_t v352 = *(void *)buf;
          if (*(void *)buf)
          {
            std::string::size_type v353 = __str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__r.__words[0])
            {
              v354 = (char *)operator new(0x58uLL);
              *((void *)v354 + 1) = 0;
              *((void *)v354 + 2) = 0;
              *(void *)v354 = &unk_1EE389AA8;
              *((void *)v354 + 3) = &unk_1EE36BF90;
              *(_OWORD *)(v354 + 56) = 0u;
              *(_OWORD *)(v354 + 72) = 0u;
              *((_DWORD *)v354 + 8) = v402;
              *((_DWORD *)v354 + 9) = v414;
              *((void *)v354 + 5) = v351;
              v411 = (std::__shared_weak_count *)v354;
              v354[48] = 0;
              uint64_t v355 = (char *)operator new(0x58uLL);
              *((void *)v355 + 1) = 0;
              *((void *)v355 + 2) = 0;
              *(void *)uint64_t v355 = &unk_1EE389920;
              *((void *)v355 + 3) = &unk_1EE36BEB0;
              *(_OWORD *)(v355 + 56) = 0u;
              *(_OWORD *)(v355 + 72) = 0u;
              *((_DWORD *)v355 + 8) = v402;
              *((void *)v355 + 5) = v352;
              v408 = (std::__shared_weak_count *)v355;
              v355[48] = 0;
              uint64_t v356 = (char *)operator new(0x58uLL);
              *((void *)v356 + 1) = 0;
              *((void *)v356 + 2) = 0;
              *(void *)uint64_t v356 = &unk_1EE389920;
              *((void *)v356 + 3) = &unk_1EE36BEB0;
              *(_OWORD *)(v356 + 56) = 0u;
              *(_OWORD *)(v356 + 72) = 0u;
              *((_DWORD *)v356 + 8) = v402;
              *((void *)v356 + 5) = v353;
              v406 = (std::__shared_weak_count *)v356;
              v356[48] = 0;
              vDSP_Length v357 = v414;
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v489, 4 * v402 * v414, 1, 1, 1);
              v405 = (int *)v489;
              if (v402)
              {
                unsigned int v358 = 0;
                uint64_t v359 = 0;
                uint64_t v360 = 0;
                uint64_t v403 = 4 * v402;
                uint64_t v404 = 4 * v414;
                do
                {
                  unsigned int v415 = v358;
                  v361 = (float *)(*((void *)v405 + 2) + v359);
                  vDSP_vfltu8((const unsigned __int8 *)(v411[1].__shared_weak_owners_ + v358), 1, v361, 1, v357);
                  vDSP_vsmul(v361, 1, (const float *)(v408[1].__shared_weak_owners_ + v360), v361, 1, v357);
                  vDSP_vsadd(v361, 1, (const float *)(v406[1].__shared_weak_owners_ + v360), v361, 1, v357);
                  v360 += 4;
                  v359 += v404;
                  unsigned int v358 = v415 + v357;
                }
                while (v403 != v360);
              }
              v362 = v490;
              if (v490) {
                atomic_fetch_add_explicit(&v490->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v363 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v405 + 2), v405[2]);
              if (v362) {
                nitro::nitro_function::nitro_function(v362);
              }
              unint64_t v364 = [NSNumber numberWithInt:v363];
              [v38 setObject:v364 forKeyedSubscript:@"KernelOffset"];

              v365 = NSNumber;
              if (v418) {
                uint64_t v366 = 0;
              }
              else {
              uint64_t v367 = [v365 numberWithUnsignedLong:v366];
              }
              [v38 setObject:v367 forKeyedSubscript:@"KernelIndex"];

              [v38 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
              if (v362) {
                nitro::nitro_function::nitro_function(v362);
              }
              nitro::nitro_function::nitro_function(v406);
              nitro::nitro_function::nitro_function(v408);
              unsigned int v87 = v411;
              goto LABEL_195;
            }
          }
        }
      }
LABEL_694:
      if ((v334 & 1) == 0) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
      }
      goto LABEL_196;
    }
LABEL_652:
    v410 = v328 + 536;
    uint64_t v337 = 0;
    int v338 = *(_DWORD *)(v495.__r_.__value_.__r.__words[0] + 8);
    do
    {
      v338 *= *(_DWORD *)(v495.__r_.__value_.__r.__words[0] + 12 + v337);
      v337 += 4;
    }
    while (v337 != 12);
    v339 = (char *)operator new(0x58uLL);
    *((void *)v339 + 1) = 0;
    *((void *)v339 + 2) = 0;
    *(void *)v339 = &unk_1EE389A70;
    v340 = *(const unsigned __int8 **)(v329 + 24);
    *((void *)v339 + 3) = &unk_1EE36BF70;
    *(_OWORD *)(v339 + 72) = 0u;
    *(_OWORD *)(v339 + 56) = 0u;
    *((_DWORD *)v339 + 8) = v338;
    *((void *)v339 + 5) = v340;
    v339[48] = 0;
    v341 = (std::__shared_weak_count *)v339;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v339 + 1, 1uLL, memory_order_relaxed);
    v413 = (std::__shared_weak_count *)v339;
    uint64_t v342 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v340, v338);
    nitro::nitro_function::nitro_function(v341);
    uint64_t v343 = [NSNumber numberWithInt:v342];
    [v38 setObject:v343 forKeyedSubscript:@"KernelOffset"];

    v344 = NSNumber;
    if (v418) {
      uint64_t v345 = 0;
    }
    else {
    unint64_t v368 = [v344 numberWithUnsignedLong:v345];
    }
    [v38 setObject:v368 forKeyedSubscript:@"KernelIndex"];

    if (v328[559] < 0)
    {
      uint64_t v371 = *((void *)v328 + 68);
      if (v371 != 4)
      {
        if (v371 != 6) {
          goto LABEL_720;
        }
        if (**(_DWORD **)v410 != 1852399447 || *(_WORD *)(*(void *)v410 + 4) != 14452) {
          goto LABEL_720;
        }
LABEL_717:
        unint64_t v373 = @"Int8";
        goto LABEL_722;
      }
      v410 = *(char **)v410;
    }
    else
    {
      int v369 = v328[559];
      if (v369 != 4)
      {
        if (v369 != 6) {
          goto LABEL_720;
        }
        if (*(_DWORD *)v410 != 1852399447 || *((_WORD *)v328 + 270) != 14452) {
          goto LABEL_720;
        }
        goto LABEL_717;
      }
    }
    if (*(_DWORD *)v410 != 947216215)
    {
LABEL_720:
      char v334 = 0;
LABEL_723:
      nitro::nitro_function::nitro_function(v413);
      goto LABEL_659;
    }
    unint64_t v373 = @"UInt8";
LABEL_722:
    [v38 setObject:v373 forKeyedSubscript:@"KernelType"];
    char v334 = 1;
    goto LABEL_723;
  }
  size_t size = (std::__shared_weak_count *)a3[1];
  v452[0] = (uint64_t)*a3;
  v452[1] = (uint64_t)size;
  if (size)
  {
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v88 = (Espresso::quantized_weights_helper *)a1[55];
  }
  std::string::size_type v89 = (atomic_ullong *)a1[56];
  v451[0] = v88;
  v451[1] = (Espresso::quantized_weights_helper *)v89;
  if (v89) {
    atomic_fetch_add_explicit(v89 + 1, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>((char *)a1, a2, v452, v451, v38, (uint64_t *)v484);
  if (v89) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v89);
  }
LABEL_177:
  if (size)
  {
    unsigned int v87 = size;
LABEL_195:
    nitro::nitro_function::nitro_function(v87);
  }
LABEL_196:
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v423, v43);
  uint64_t v91 = [NSNumber numberWithInt:*(__int16 *)(a4 + 92)];
  v506[0] = v91;
  BOOL v92 = [NSNumber numberWithInt:*(__int16 *)(a4 + 94)];
  v506[1] = v92;
  uint64_t v93 = [MEMORY[0x1E4F1C978] arrayWithObjects:v506 count:2];
  [v38 setObject:v93 forKeyedSubscript:@"Step"];

  int v94 = HIBYTE(v475);
  BOOL v95 = v421;
  if (HIBYTE(v475)) {
    BOOL v95 = 0;
  }
  if (v95 && !(_BYTE)v475)
  {
    LODWORD(v24) = (v24 - 1) * *(__int16 *)(a4 + 96) + 1;
    LODWORD(v25) = (v25 - 1) * *(__int16 *)(a4 + 98) + 1;
  }
  int v96 = *(__int16 *)(a4 + 72);
  switch(v96)
  {
    case 4:
      goto LABEL_204;
    case 2:
      goto LABEL_239;
    case 1:
LABEL_204:
      int v97 = v25 + (*(_DWORD *)(*a7 + 12) - 1) * *(__int16 *)(a4 + 94) - *(_DWORD *)(*a6 + 12);
      unsigned int v98 = v97 & ~(v97 >> 31);
      int v99 = v24 + (*(_DWORD *)(*a7 + 8) - 1) * *(__int16 *)(a4 + 92) - *(_DWORD *)(*a6 + 8);
      unsigned int v100 = v99 & ~(v99 >> 31);
      uint64_t v101 = v100 - (v100 >> 1);
      unsigned int v102 = v98 - (v98 >> 1);
      if (*(_WORD *)(a4 + 72) == 1)
      {
        uint64_t v103 = v98 - (v98 >> 1);
        unsigned int v102 = v98 >> 1;
        uint64_t v104 = v100 - (v100 >> 1);
        uint64_t v101 = v100 >> 1;
        if (v98 >> 1) {
          goto LABEL_214;
        }
      }
      else
      {
        uint64_t v103 = v98 >> 1;
        uint64_t v104 = v100 >> 1;
        if (v102) {
          goto LABEL_214;
        }
      }
      break;
    default:
      uint64_t v101 = *(__int16 *)(a4 + 80);
      uint64_t v104 = *(__int16 *)(a4 + 82);
      unsigned int v102 = *(__int16 *)(a4 + 84);
      uint64_t v103 = *(__int16 *)(a4 + 86);
      if (*(_WORD *)(a4 + 84)) {
        goto LABEL_214;
      }
      break;
  }
  if (!v103 && !v101)
  {
    if (!v104) {
      goto LABEL_239;
    }
    uint64_t v103 = 0;
    uint64_t v101 = 0;
    goto LABEL_215;
  }
LABEL_214:
  if ((v102 & 0x80000000) == 0)
  {
LABEL_215:
    unsigned long long v105 = objc_msgSend(NSNumber, "numberWithInt:");
    int v106 = 1;
    goto LABEL_217;
  }
  int v106 = 0;
  unsigned long long v105 = &unk_1EE3AEF68;
LABEL_217:
  [v38 setObject:v105 forKeyedSubscript:@"PadTop"];
  if (v106) {

  }
  if ((v103 & 0x80000000) != 0)
  {
    std::string v107 = &unk_1EE3AEF68;
  }
  else
  {
    std::string v107 = [NSNumber numberWithInt:v103];
  }
  [v38 setObject:v107 forKeyedSubscript:@"PadBot"];
  if ((v103 & 0x80000000) == 0) {

  }
  if ((v101 & 0x80000000) != 0)
  {
    std::string v108 = &unk_1EE3AEF68;
  }
  else
  {
    std::string v108 = [NSNumber numberWithInt:v101];
  }
  [v38 setObject:v108 forKeyedSubscript:@"PadLeft"];
  if ((v101 & 0x80000000) == 0) {

  }
  if ((v104 & 0x80000000) != 0)
  {
    long long v109 = &unk_1EE3AEF68;
  }
  else
  {
    long long v109 = [NSNumber numberWithInt:v104];
  }
  [v38 setObject:v109 forKeyedSubscript:@"PadRight"];
  if ((v104 & 0x80000000) == 0) {

  }
  if (*(_WORD *)(a4 + 74))
  {
    if (*(_WORD *)(a4 + 74) != 1) {
      goto LABEL_239;
    }
    std::string v110 = @"Replication";
  }
  else
  {
    std::string v110 = @"Zero";
  }
  [v38 setObject:v110 forKeyedSubscript:@"PaddingMode"];
LABEL_239:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
  char v111 = !v421;
  if (v94) {
    char v111 = 1;
  }
  if ((v111 & 1) == 0)
  {
    uint64_t v112 = [NSNumber numberWithShort:*(__int16 *)(a4 + 96)];
    [v38 setObject:v112 forKeyedSubscript:@"KernelDilationX"];

    uint64_t v113 = [NSNumber numberWithShort:*(__int16 *)(a4 + 98)];
    [v38 setObject:v113 forKeyedSubscript:@"KernelDilationY"];

    [v38 setObject:obj forKeyedSubscript:@"Type"];
  }
  long long v114 = v503;
  v503 = @"Conv";

  objc_storeStrong(&v504, v38);
  uint64_t v115 = (uint64_t)*a3 + 136;
  *(void *)buf = &v495;
  long long v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v115, (unsigned __int8 *)&v495, (long long **)buf);
  uint64_t v118 = (std::__shared_weak_count *)*((void *)v116 + 6);
  if (v118) {
    atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(v505) = v117[41];
  HIDWORD(v505) = v420;
  long long v119 = v473;
  if ((unint64_t)v473 >= v474)
  {
    unint64_t v121 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
    if (v121 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v122 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
    if (v122 <= v121 + 1) {
      unint64_t v122 = v121 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v123 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v123 = v122;
    }
    *((void *)&v508 + 1) = &v474;
    if (v123) {
      unint64_t v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v123);
    }
    else {
      uint64_t v124 = 0;
    }
    *(void *)buf = v123;
    *(void *)&uint8_t buf[8] = v123 + 144 * v121;
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v508 = v123 + 144 * v124;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
    vImage_Buffer v120 = v473;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
    vImage_Buffer v120 = v119 + 6;
  }
  long long v473 = v120;
  if (v118) {
    nitro::nitro_function::nitro_function(v118);
  }

  if (v501 < 0) {
    operator delete(v500);
  }
  *(void *)buf = &v497;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v496;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }

  char v125 = (std::__shared_weak_count *)a3[1];
  if (v125) {
    atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v422 = v125;
  uint64_t v126 = *a7;
  uint64_t v127 = (std::__shared_weak_count *)a7[1];
  if (v127) {
    atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v495);
  id v504 = 0;
  v503 = 0;
  uint64_t v505 = 0x100000000;
  uint64_t v128 = a1[76];
  uint64_t v129 = (std::__shared_weak_count *)a1[77];
  if (v129) {
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v128 || *(unsigned char *)((*(uint64_t (**)(void))(a1[68] + 104))() + 40))
  {
    char v130 = 0;
    if (!v129) {
      goto LABEL_273;
    }
    goto LABEL_272;
  }
  float v162 = *(float *)(v126 + 112);
  v488[0] = v128;
  v488[1] = v129;
  if (v129) {
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v163 = (std::__shared_weak_count *)a1[79];
  v487[0] = a1[78];
  v487[1] = (uint64_t)v163;
  if (v163) {
    atomic_fetch_add_explicit(&v163->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ane_style_post_scale_bias((uint64_t)v488, v487, (uint64_t)&v489, v162);
  if (v163) {
    nitro::nitro_function::nitro_function(v163);
  }
  if (v129) {
    nitro::nitro_function::nitro_function(v129);
  }
  uint64_t v164 = *(unsigned int *)(v128 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v485, 2 * v164, 1, 1, 1);
  uint64_t v165 = (int)v164;
  uint64_t v166 = a1[78];
  int v167 = v164;
  if (v166) {
    int v167 = *(_DWORD *)(v166 + 8);
  }
  if (!*(unsigned char *)(a2 + 384))
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v164);
    v376 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    if ((int)v164 >= 1)
    {
      for (uint64_t i = 0; i != v164; ++i)
      {
        float v378 = *(float *)(*(void *)(v128 + 16) + i * 4);
        *(float *)&int v379 = ldexp(1.0, -v493) * v378;
        v376[i] = v379;
      }
    }
    if (v164)
    {
      uint64_t v380 = *(_WORD **)(v485 + 16);
      do
      {
        int v381 = *v376++;
        _S0 = v381;
        __asm { FCVT            H0, S0 }
        *v380++ = _S0;
        --v165;
      }
      while (v165);
    }
    if (a1[78])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v167);
      uint64_t v384 = *(void *)buf;
      Espresso::blob<unsigned char,1>::make(buf, 2 * v167);
      v425 = *(Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)buf;
      v385 = *(int **)(v384 + 16);
      if (v167 >= 1)
      {
        for (uint64_t j = 0; j != v167; ++j)
        {
          int v387 = v164 - 1;
          if ((int)v164 - 1 >= (int)j) {
            int v387 = j;
          }
          *(float *)&int v388 = *(float *)(*(void *)(v491 + 16) + 4 * j) * *(float *)(*((void *)v489 + 2) + 4 * v387);
          v385[j] = v388;
          unsigned int v389 = v494;
          unsigned int v390 = v493;
          *(float *)&int v391 = ldexp(1.0, v494 - v493) * *(float *)&v388;
          v385[j] = v391;
          float v394 = ldexp(1.0, v390 - v389) * *(float *)&v391;
          if (v394 < -127.0 || v394 > 255.0)
          {
            int v396 = Espresso::espresso_os_log_subsystem(v392, v393);
            if (os_log_type_enabled(v396, OS_LOG_TYPE_ERROR))
            {
              double v397 = *(float *)&v385[j];
              *(_DWORD *)buf = 134218752;
              *(double *)&uint8_t buf[4] = v394;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v494;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v493;
              LOWORD(v508) = 2048;
              *(double *)((char *)&v508 + 2) = v397;
              _os_log_error_impl(&dword_1920CB000, v396, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }
          }
        }
      }
      if (v167)
      {
        uint64_t v398 = v167;
        uint64_t v399 = (_WORD *)*((void *)v425 + 2);
        do
        {
          int v400 = *v385++;
          _S0 = v400;
          __asm { FCVT            H0, S0 }
          *v399++ = _S0;
          --v398;
        }
        while (v398);
      }
    }
    v383 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v383);
  }
  unsigned int v168 = v494;
  uint64_t v169 = v485;
  if (v164)
  {
    uint64_t v170 = (int *)*((void *)v489 + 2);
    uint64_t v171 = *(_WORD **)(v485 + 16);
    do
    {
      int v172 = *v170++;
      _S0 = v172;
      __asm { FCVT            H0, S0 }
      *v171++ = _S0;
      --v165;
    }
    while (v165);
  }
  unsigned int v407 = v168;
  if (v166)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v167, 1, 1, 1);
    uint64_t v409 = *(void *)buf;
    uint64_t v412 = *(std::__shared_weak_count **)&buf[8];
    if (v167)
    {
      uint64_t v174 = v167;
      int v175 = *(_WORD **)(*(void *)buf + 16);
      int v176 = *(int **)(v491 + 16);
      do
      {
        int v177 = *v176++;
        _S0 = v177;
        __asm { FCVT            H0, S0 }
        *v175++ = _S0;
        --v174;
      }
      while (v174);
    }
  }
  else
  {
    uint64_t v409 = 0;
    uint64_t v412 = 0;
  }
  int v195 = *(unsigned __int8 *)(a2 + 552);
  char v196 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  unint64_t v197 = v486;
  if (v486) {
    atomic_fetch_add_explicit(&v486->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v198 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v196, *(const unsigned __int8 **)(v169 + 16), *(int *)(v169 + 8));
  if (v197) {
    nitro::nitro_function::nitro_function(v197);
  }
  id obja = (id)objc_opt_new();
  if (*(unsigned char *)(a2 + 121))
  {
    id v199 = *(id *)(v472 + 128);

    id obja = v199;
  }
  uint64_t v200 = objc_opt_new();
  char v201 = [NSNumber numberWithInt:v164];
  [v200 setObject:v201 forKeyedSubscript:@"ScaleCount"];

  uint64_t v202 = [NSNumber numberWithInt:v198];
  [v200 setObject:v202 forKeyedSubscript:@"ScaleOffset"];

  int v203 = NSNumber;
  if (v195) {
    uint64_t v204 = 0;
  }
  else {
  long long v205 = [v203 numberWithUnsignedLong:v204];
  }
  [v200 setObject:v205 forKeyedSubscript:@"ScaleIndex"];

  [v200 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
  uint64_t v206 = [NSNumber numberWithInt:v493];
  [obja setObject:v206 forKeyedSubscript:@"ScaleShift"];

  if (a1[78])
  {
    if (v412) {
      atomic_fetch_add_explicit(&v412->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v207 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v196, *(const unsigned __int8 **)(v409 + 16), *(int *)(v409 + 8));
    if (v412) {
      nitro::nitro_function::nitro_function(v412);
    }
    int v208 = [NSNumber numberWithInt:*(unsigned int *)(a1[78] + 8)];
    [v200 setObject:v208 forKeyedSubscript:@"BiasCount"];

    int v209 = [NSNumber numberWithInt:v207];
    [v200 setObject:v209 forKeyedSubscript:@"BiasOffset"];

    int v210 = NSNumber;
    if (v195) {
      uint64_t v211 = 0;
    }
    else {
    std::string v212 = [v210 numberWithUnsignedLong:v211];
    }
    [v200 setObject:v212 forKeyedSubscript:@"BiasIndex"];

    [v200 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    uint64_t v213 = [NSNumber numberWithInt:v407];
    [obja setObject:v213 forKeyedSubscript:@"BiasShift"];
  }
  [obja setObject:v200 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  std::string v214 = v473;
  if (v473 != (std::string *)v472)
  {
    std::vector<std::string> v215 = v473 - 6;
    uint64_t v216 = HIBYTE(v473[-6].__r_.__value_.__r.__words[2]);
    char v217 = v216;
    std::string::size_type v218 = v473[-6].__r_.__value_.__l.__size_;
    if ((v216 & 0x80u) == 0) {
      std::string::size_type v219 = HIBYTE(v473[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v219 = v473[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v220 = buf[23];
    if (buf[23] < 0) {
      uint64_t v220 = *(void *)&buf[8];
    }
    if (v219 == v220)
    {
      if (buf[23] >= 0) {
        int v221 = buf;
      }
      else {
        int v221 = *(unsigned __int8 **)buf;
      }
      if ((char)v216 < 0)
      {
        data = (const std::string::value_type *)v215->__r_.__value_.__r.__words[0];
        if (memcmp(v215->__r_.__value_.__l.__data_, v221, v473[-6].__r_.__value_.__l.__size_)) {
          goto LABEL_451;
        }
      }
      else if ((_BYTE)v216)
      {
        char v222 = v473 - 6;
        while (v222->__r_.__value_.__s.__data_[0] == *v221)
        {
          char v222 = (std::string *)((char *)v222 + 1);
          ++v221;
          if (!--v216) {
            goto LABEL_447;
          }
        }
        goto LABEL_448;
      }
LABEL_447:
      std::string::append(v214 - 6, "__@pre_scale_bias");
      char v217 = HIBYTE(v214[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_448:
    if ((v217 & 0x80) == 0)
    {
      long long v261 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v214[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v261;
      goto LABEL_452;
    }
    data = v214[-6].__r_.__value_.__l.__data_;
    std::string::size_type v218 = v214[-6].__r_.__value_.__l.__size_;
LABEL_451:
    std::string::__init_copy_ctor_external(&__str, data, v218);
LABEL_452:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v509, &__str, &v516, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v262 = v513;
  v513 = @"GOC";

  objc_storeStrong(&v514, obja);
  if (!*(unsigned char *)(a2 + 121))
  {
    v263 = v473;
    if ((unint64_t)v473 >= v474)
    {
      unint64_t v265 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
      if (v265 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v266 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
      if (v266 <= v265 + 1) {
        unint64_t v266 = v265 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v267 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v267 = v266;
      }
      *((void *)&v516 + 1) = &v474;
      if (v267) {
        unint64_t v267 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v267);
      }
      else {
        uint64_t v268 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v267;
      __str.__r_.__value_.__l.__size_ = v267 + 144 * v265;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(void *)&long long v516 = v267 + 144 * v268;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, &__str);
      int v264 = v473;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)buf);
      int v264 = v263 + 6;
    }
    long long v473 = v264;
  }

  if (v511 < 0) {
    operator delete(v510);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v508;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }

  if (v412) {
    nitro::nitro_function::nitro_function(v412);
  }
  if (v486) {
    nitro::nitro_function::nitro_function(v486);
  }
  if (v492) {
    nitro::nitro_function::nitro_function(v492);
  }
  if (v490) {
    nitro::nitro_function::nitro_function(v490);
  }
  char v130 = 1;
  if (v129) {
LABEL_272:
  }
    nitro::nitro_function::nitro_function(v129);
LABEL_273:

  if (v501 < 0) {
    operator delete(v500);
  }
  *(void *)buf = &v497;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v496;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  if (v127) {
    nitro::nitro_function::nitro_function(v127);
  }
  if (v422) {
    nitro::nitro_function::nitro_function(v422);
  }
  if (v130)
  {
    if (*(_DWORD *)(a4 + 112)) {
LABEL_732:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
    goto LABEL_474;
  }
  uint64_t v131 = (void *)a1[55];
  if (v131 && *v131 && (v131[4] || v131[6] || v131[8] || v131[10]))
  {
    uint64_t v132 = v131[10];
    if (v132)
    {
      uint64_t v133 = *(int *)(v132 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v495, 2 * v133, 1, 1, 1);
      long long v134 = *(_OWORD *)&v495.__r_.__value_.__l.__data_;
      unsigned int v135 = *(const unsigned __int8 **)(v495.__r_.__value_.__r.__words[0] + 16);
      if (v133)
      {
        unsigned int v136 = *(int **)(*(void *)(a1[55] + 80) + 16);
        uint64_t v137 = *(_WORD **)(v495.__r_.__value_.__r.__words[0] + 16);
        uint64_t v138 = v133;
        do
        {
          int v139 = *v136++;
          _S0 = v139;
          __asm { FCVT            H0, S0 }
          *v137++ = _S0;
          --v138;
        }
        while (v138);
      }
      unint64_t v144 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      if (*((void *)&v134 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 1uLL, memory_order_relaxed);
        unsigned int v135 = *(const unsigned __int8 **)(v134 + 16);
      }
      uint64_t v145 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v144, v135, *(int *)(v134 + 8));
      if (*((void *)&v134 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v134 + 1));
      }
      char v146 = objc_opt_new();
      id v147 = [NSNumber numberWithUnsignedLong:v133];
      [v146 setObject:v147 forKeyedSubscript:@"ScaleCount"];

      unint64_t v148 = [NSNumber numberWithInt:v145];
      [v146 setObject:v148 forKeyedSubscript:@"ScaleOffset"];

      id v149 = NSNumber;
      if (v418) {
        uint64_t v150 = 0;
      }
      else {
      std::string v223 = [v149 numberWithUnsignedLong:v150];
      }
      [v146 setObject:v223 forKeyedSubscript:@"ScaleIndex"];

      [v146 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
      if (*(_DWORD *)((*(uint64_t (**)(void *))(*a1 + 384))(a1) + 8))
      {
        (*(void (**)(std::string *__return_ptr, void *))(*a1 + 408))(&__str, a1);
        if (!__str.__r_.__value_.__r.__words[0])
        {
          uint64_t v224 = (std::__shared_weak_count *)a3[1];
          int v443 = *a3;
          v444 = v224;
          if (v224) {
            atomic_fetch_add_explicit(&v224->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr))(a1[68] + 120))(&v495);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (v444) {
            nitro::nitro_function::nitro_function(v444);
          }
          unint64_t v225 = v495.__r_.__value_.__r.__words[2];
          uint64_t v226 = (char *)operator new(0x58uLL);
          *((void *)v226 + 1) = 0;
          *((void *)v226 + 2) = 0;
          *(void *)uint64_t v226 = &unk_1EE389920;
          std::string::size_type v227 = v495.__r_.__value_.__r.__words[0];
          *((void *)v226 + 3) = &unk_1EE36BEB0;
          *(_OWORD *)(v226 + 56) = 0u;
          *(_OWORD *)(v226 + 72) = 0u;
          *((_DWORD *)v226 + 8) = v225 >> 2;
          *((void *)v226 + 5) = v227;
          v226[48] = 0;
          uint64_t v228 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v226 + 24);
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v226;
          if (v228)
          {
            nitro::nitro_function::nitro_function(v228);
            if (!__str.__r_.__value_.__r.__words[0]) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
            }
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v495, 4 * v133, 1, 1, 1);
        std::string::size_type v229 = v495.__r_.__value_.__r.__words[0];
        if (v133)
        {
          id v230 = *(float **)(v495.__r_.__value_.__r.__words[0] + 16);
          unint64_t v231 = *(float **)(__str.__r_.__value_.__r.__words[0] + 16);
          id v232 = *(float **)(*(void *)(a1[55] + 80) + 16);
          uint64_t v233 = v133;
          do
          {
            float v234 = *v231++;
            float v235 = v234;
            float v236 = *v232++;
            *v230++ = v235 / v236;
            --v233;
          }
          while (v233);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v133, 1, 1, 1);
        uint64_t v237 = *(void *)buf;
        unint64_t v238 = *(const unsigned __int8 **)(*(void *)buf + 16);
        if (v133)
        {
          uint64_t v239 = *(int **)(v229 + 16);
          long long v240 = *(_WORD **)(*(void *)buf + 16);
          uint64_t v241 = v133;
          do
          {
            int v242 = *v239++;
            _S0 = v242;
            __asm { FCVT            H0, S0 }
            *v240++ = _S0;
            --v241;
          }
          while (v241);
        }
        uint64_t v244 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          unint64_t v238 = *(const unsigned __int8 **)(v237 + 16);
        }
        uint64_t v245 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v144, v238, *(int *)(v237 + 8));
        if (v244) {
          nitro::nitro_function::nitro_function(v244);
        }
        uint64_t v246 = [NSNumber numberWithUnsignedLong:v133];
        [v146 setObject:v246 forKeyedSubscript:@"BiasCount"];

        unint64_t v247 = [NSNumber numberWithInt:v245];
        [v146 setObject:v247 forKeyedSubscript:@"BiasOffset"];

        uint64_t v248 = NSNumber;
        if (v418) {
          uint64_t v249 = 0;
        }
        else {
        v251 = [v248 numberWithUnsignedLong:v249];
        }
        [v146 setObject:v251 forKeyedSubscript:@"BiasIndex"];

        [v146 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
        if (v244) {
          nitro::nitro_function::nitro_function(v244);
        }
        if (v495.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v495.__r_.__value_.__l.__size_);
        }
        if (__str.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
      }
      unint64_t v252 = objc_opt_new();
      [v252 setObject:v146 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
      uint64_t v253 = v503;
      v503 = @"GOC";

      objc_storeStrong(&v504, v252);
      v254 = v473;
      if ((unint64_t)v473 >= v474)
      {
        unint64_t v256 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
        if (v256 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v257 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
        if (v257 <= v256 + 1) {
          unint64_t v257 = v256 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v258 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v258 = v257;
        }
        *((void *)&v508 + 1) = &v474;
        if (v258) {
          unint64_t v258 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v258);
        }
        else {
          uint64_t v259 = 0;
        }
        *(void *)buf = v258;
        *(void *)&uint8_t buf[8] = v258 + 144 * v256;
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        *(void *)&long long v508 = v258 + 144 * v259;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
        *(void *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
        v255 = v473;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
        v255 = v254 + 6;
      }
      long long v473 = v255;

      if (v501 < 0) {
        operator delete(v500);
      }
      *(void *)buf = &v497;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)buf = v496;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v495.__r_.__value_.__l.__data_);
      }

      if (!*((void *)&v134 + 1)) {
        goto LABEL_474;
      }
      int v250 = (std::__shared_weak_count *)*((void *)&v134 + 1);
LABEL_473:
      nitro::nitro_function::nitro_function(v250);
      goto LABEL_474;
    }
  }
  if (!*(_DWORD *)(a4 + 112))
  {
    if (!*(_DWORD *)(a4 + 32)) {
      goto LABEL_474;
    }
    (*(void (**)(std::string *__return_ptr, void *))(*a1 + 408))(&v495, a1);
    std::string::size_type v179 = v495.__r_.__value_.__r.__words[0];
    if (v495.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v495.__r_.__value_.__l.__size_);
    }
    if (!v179) {
      goto LABEL_474;
    }
    if (*(unsigned char *)(a2 + 121))
    {
      id v180 = *(id *)(v472 + 128);
    }
    else
    {
      id v180 = (id)objc_opt_new();
    }
    v294 = objc_opt_new();
    v295 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
    [v294 setObject:v295 forKeyedSubscript:@"BiasCount"];

    v296 = (std::__shared_weak_count *)a3[1];
    uint64_t v439 = *a3;
    int v440 = v296;
    if (v296) {
      atomic_fetch_add_explicit(&v296->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v495, "blob_biases_f16");
    int v297 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v439, a1, &v495);
    if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v495.__r_.__value_.__l.__data_);
    }
    if (v440) {
      nitro::nitro_function::nitro_function(v440);
    }
    if (v297 < 0)
    {
      unint64_t v309 = (std::__shared_weak_count *)a3[1];
      v433 = *a3;
      int v434 = v309;
      if (v309) {
        atomic_fetch_add_explicit(&v309->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v495, "blob_biases");
      uint64_t v299 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v433, a1, &v495);
      if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v495.__r_.__value_.__l.__data_);
      }
      if (v434) {
        nitro::nitro_function::nitro_function(v434);
      }
      v310 = (std::__shared_weak_count *)a3[1];
      v431 = *a3;
      v432 = v310;
      if (v310) {
        atomic_fetch_add_explicit(&v310->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
      (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v431, a1, buf);
      v301 = (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__r.__words[0];
      unint64_t v302 = v495.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      unint64_t v303 = v432;
      if (!v432) {
        goto LABEL_551;
      }
    }
    else
    {
      v298 = (std::__shared_weak_count *)a3[1];
      int v437 = *a3;
      v438 = v298;
      if (v298) {
        atomic_fetch_add_explicit(&v298->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v495, "blob_biases_f16");
      uint64_t v299 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v437, a1, &v495);
      if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v495.__r_.__value_.__l.__data_);
      }
      if (v438) {
        nitro::nitro_function::nitro_function(v438);
      }
      v300 = (std::__shared_weak_count *)a3[1];
      int v435 = *a3;
      int v436 = v300;
      if (v300) {
        atomic_fetch_add_explicit(&v300->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
      (*(void (**)(std::string *__return_ptr, void *, const Espresso::net **, void *, unsigned char *))(a1[68] + 120))(&v495, a1 + 68, &v435, a1, buf);
      v301 = (Espresso::ANECompilerEngine::compiler *)v495.__r_.__value_.__r.__words[0];
      unint64_t v302 = v495.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      unint64_t v303 = v436;
      if (!v436) {
        goto LABEL_551;
      }
    }
    nitro::nitro_function::nitro_function(v303);
LABEL_551:
    (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 408))(buf, a1);
    if (!*(void *)buf)
    {
      v304 = (char *)operator new(0x58uLL);
      *((void *)v304 + 1) = 0;
      *((void *)v304 + 2) = 0;
      *(void *)v304 = &unk_1EE389920;
      *((void *)v304 + 3) = &unk_1EE36BEB0;
      *(_OWORD *)(v304 + 56) = 0u;
      *(_OWORD *)(v304 + 72) = 0u;
      *((_DWORD *)v304 + 8) = v302 >> 2;
      *((void *)v304 + 5) = v301;
      v304[48] = 0;
      v305 = *(std::__shared_weak_count **)&buf[8];
      *(void *)buf = v304 + 24;
      *(void *)&uint8_t buf[8] = v304;
      if (v305)
      {
        nitro::nitro_function::nitro_function(v305);
        if (!*(void *)buf) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
      }
    }
    unint64_t v306 = (std::__shared_weak_count *)a3[1];
    v429 = *a3;
    int v430 = v306;
    if (v306) {
      atomic_fetch_add_explicit(&v306->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v495, "blob_biases_f16");
    int v307 = (*(uint64_t (**)(void *, const Espresso::net **, void *, std::string *))(a1[68] + 88))(a1 + 68, &v429, a1, &v495);
    if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v495.__r_.__value_.__l.__data_);
    }
    if (v430) {
      nitro::nitro_function::nitro_function(v430);
    }
    if (v307 < 0)
    {
      v311 = *(int **)(*(void *)buf + 16);
      uint64_t v312 = *(int *)(*(void *)buf + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v495, 2 * v312, 1, 1, 1);
      std::string::size_type v313 = v495.__r_.__value_.__r.__words[0];
      unint64_t v314 = *(const unsigned __int8 **)(v495.__r_.__value_.__r.__words[0] + 16);
      if (v312)
      {
        uint64_t v315 = *(_WORD **)(v495.__r_.__value_.__r.__words[0] + 16);
        do
        {
          int v316 = *v311++;
          _S0 = v316;
          __asm { FCVT            H0, S0 }
          *v315++ = _S0;
          --v312;
        }
        while (v312);
      }
      v318 = (std::__shared_weak_count *)v495.__r_.__value_.__l.__size_;
      if (v495.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v495.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        unint64_t v314 = *(const unsigned __int8 **)(v313 + 16);
      }
      uint64_t v299 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v314, *(int *)(v313 + 8));
      if (v318) {
        nitro::nitro_function::nitro_function(v318);
      }
      v319 = NSNumber;
      if (v418) {
        uint64_t v320 = 0;
      }
      else {
      unint64_t v321 = [v319 numberWithUnsignedLong:v320];
      }
      [v294 setObject:v321 forKeyedSubscript:@"BiasIndex"];

      if (v318) {
        nitro::nitro_function::nitro_function(v318);
      }
    }
    else
    {
      v308 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((id *)a2, v301, (const void *)v302));
      [v294 setObject:v308 forKeyedSubscript:@"BiasIndex"];
    }
    unint64_t v322 = [NSNumber numberWithInt:v299];
    [v294 setObject:v322 forKeyedSubscript:@"BiasOffset"];

    [v294 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    [v180 setObject:v294 forKeyedSubscript:@"BiasScaleGroupData"];
    if (!*(unsigned char *)(a2 + 121))
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
      uint64_t v323 = v503;
      v503 = @"GOC";

      objc_storeStrong(&v504, v180);
      v324 = v473;
      if ((unint64_t)v473 >= v474)
      {
        int v325 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v472, (uint64_t)&v495);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
        int v325 = v324 + 6;
      }
      long long v473 = v325;

      if (v501 < 0) {
        operator delete(v500);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v497;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v496;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v495.__r_.__value_.__l.__data_);
      }
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }

    goto LABEL_474;
  }
  if (*(unsigned char *)(a2 + 121)) {
    goto LABEL_732;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 408))(&v441, a1);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias((uint64_t)&__str, (uint64_t)&v441, *(_DWORD *)(*a7 + 16), *(unsigned __int8 *)(a2 + 384), 0, 0.0);
  if (v442) {
    nitro::nitro_function::nitro_function(v442);
  }
  long long v151 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v153 = __str.__r_.__value_.__r.__words[2];
  uint64_t v152 = (std::__shared_weak_count *)v516;
  if ((void)v516) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v516 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v154 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  if (*((void *)&v151 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v151 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v155 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v154, *(const unsigned __int8 **)(v151 + 16), *(int *)(v151 + 8));
  if (*((void *)&v151 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v151 + 1));
  }
  if (v152) {
    atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v156 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v154, *(const unsigned __int8 **)(v153 + 16), *(int *)(v153 + 8));
  if (v152) {
    nitro::nitro_function::nitro_function(v152);
  }
  int v157 = objc_opt_new();
  int v158 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
  [v157 setObject:v158 forKeyedSubscript:@"BiasCount"];

  long long v159 = [NSNumber numberWithInt:v156];
  [v157 setObject:v159 forKeyedSubscript:@"BiasOffset"];

  int v160 = NSNumber;
  if (v418) {
    uint64_t v161 = 0;
  }
  else {
  uint64_t v181 = [v160 numberWithUnsignedLong:v161];
  }
  [v157 setObject:v181 forKeyedSubscript:@"BiasIndex"];

  [v157 setObject:@"Float32" forKeyedSubscript:@"BiasType"];
  uint64_t v182 = [NSNumber numberWithInt:*(unsigned int *)(*a7 + 16)];
  [v157 setObject:v182 forKeyedSubscript:@"ScaleCount"];

  uint64_t v183 = [NSNumber numberWithInt:v155];
  [v157 setObject:v183 forKeyedSubscript:@"ScaleOffset"];

  int v184 = NSNumber;
  if (v418) {
    uint64_t v185 = 0;
  }
  else {
  uint64_t v186 = [v184 numberWithUnsignedLong:v185];
  }
  [v157 setObject:v186 forKeyedSubscript:@"ScaleIndex"];

  [v157 setObject:@"Float32" forKeyedSubscript:@"ScaleType"];
  uint64_t v187 = objc_opt_new();
  [v187 setObject:v157 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
  uint64_t v188 = v503;
  v503 = @"GOC";

  objc_storeStrong(&v504, v187);
  uint64_t v189 = v473;
  if ((unint64_t)v473 >= v474)
  {
    unint64_t v191 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
    if (v191 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v192 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
    if (v192 <= v191 + 1) {
      unint64_t v192 = v191 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v193 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v193 = v192;
    }
    *((void *)&v508 + 1) = &v474;
    if (v193) {
      unint64_t v193 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v193);
    }
    else {
      uint64_t v194 = 0;
    }
    *(void *)buf = v193;
    *(void *)&uint8_t buf[8] = v193 + 144 * v191;
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v508 = v193 + 144 * v194;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
    int v190 = v473;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
    int v190 = v189 + 6;
  }
  long long v473 = v190;

  if (v501 < 0) {
    operator delete(v500);
  }
  *(void *)buf = &v497;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v496;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }

  if (v152) {
    nitro::nitro_function::nitro_function(v152);
  }
  if (*((void *)&v151 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v151 + 1));
  }
  if ((void)v516) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v516);
  }
  int v250 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_) {
    goto LABEL_473;
  }
LABEL_474:
  if (*(_DWORD *)(a4 + 24))
  {
    if (*(unsigned char *)(a2 + 121))
    {
      id v269 = *(id *)(v472 + 128);
    }
    else
    {
      id v269 = (id)objc_opt_new();
    }
    [v269 setObject:@"ReLU" forKeyedSubscript:@"Type"];
    if (*(unsigned char *)(a2 + 121)) {
      goto LABEL_615;
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
    v270 = v503;
    v503 = @"Neuron";

    objc_storeStrong(&v504, v269);
    v271 = v473;
    if ((unint64_t)v473 >= v474)
    {
      unint64_t v273 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
      if (v273 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v274 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
      if (v274 <= v273 + 1) {
        unint64_t v274 = v273 + 1;
      }
      int v275 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v274);
      *((void *)&v508 + 1) = &v474;
      if (v275) {
        int v275 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v275);
      }
      else {
        uint64_t v276 = 0;
      }
      *(void *)buf = v275;
      *(void *)&uint8_t buf[8] = &v275[144 * v273];
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v508 = &v275[144 * v276];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
      v272 = v473;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
      v272 = v271 + 6;
    }
    long long v473 = v272;

    if (v501 < 0) {
      operator delete(v500);
    }
    *(void *)buf = &v497;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)buf = v496;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(v495.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_615;
    }
    v282 = (void *)v495.__r_.__value_.__r.__words[0];
    goto LABEL_509;
  }
  if (!*(_DWORD *)(a4 + 28))
  {
    if (*(_DWORD *)(a4 + 60) != -1) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    }
    goto LABEL_616;
  }
  if (*(unsigned char *)(a2 + 121))
  {
    id v269 = *(id *)(v472 + 128);
  }
  else
  {
    id v269 = (id)objc_opt_new();
  }
  [v269 setObject:@"Tanh" forKeyedSubscript:@"Type"];
  if (*(unsigned char *)(a2 + 121))
  {
LABEL_615:

LABEL_616:
    (*(void (**)(void *, uint64_t, uint64_t *))(a1[68] + 32))(a1 + 68, a2, &v472);
    goto LABEL_617;
  }
  int v277 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v495, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v277 + 472, (uint64_t)&v495, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)*a3 + 472);
  v278 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v280 = v278;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_513;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_513;
    }
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_519:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v495.__r_.__value_.__l.__data_, a5);
    v286 = v503;
    v503 = @"Neuron";

    objc_storeStrong(&v504, v269);
    v287 = v473;
    if ((unint64_t)v473 >= v474)
    {
      unint64_t v290 = 0x8E38E38E38E38E39 * (((uint64_t)v473 - v472) >> 4);
      if (v290 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v291 = 0x1C71C71C71C71C72 * ((uint64_t)(v474 - v472) >> 4);
      if (v291 <= v290 + 1) {
        unint64_t v291 = v290 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v474 - v472) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v292 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v292 = v291;
      }
      *((void *)&v508 + 1) = &v474;
      if (v292) {
        unint64_t v292 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v292);
      }
      else {
        uint64_t v293 = 0;
      }
      *(void *)buf = v292;
      *(void *)&uint8_t buf[8] = v292 + 144 * v290;
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v508 = v292 + 144 * v293;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v495);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v472, buf);
      uint64_t v288 = v473;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v473, (uint64_t)&v495);
      uint64_t v288 = v287 + 6;
    }
    long long v473 = v288;

    if (v501 < 0) {
      operator delete(v500);
    }
    *(void *)buf = &v497;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)buf = v496;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v495.__r_.__value_.__l.__data_);
    }

    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_615;
    }
    v282 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_509:
    operator delete(v282);
    goto LABEL_615;
  }
LABEL_513:
  if (!Espresso::ANECompilerEngine::is_mix(v278, v279)) {
    goto LABEL_519;
  }
  v283 = (long long *)&v473[-6];
  std::string::append(v473 - 6, "_pre_tanh");
  (*(void (**)(void *, uint64_t, uint64_t *))(a1[68] + 32))(a1 + 68, a2, &v472);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v495, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v284 = v497;
  for (unint64_t k = (char *)v498; k != v284; k -= 24)
  {
    if (*(k - 1) < 0) {
      operator delete(*((void **)k - 3));
    }
  }
  v498 = (std::string *)v284;
  if ((unint64_t)v284 >= v499)
  {
    v289 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v497, (uint64_t)v283);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v497, v283);
    v289 = (std::string *)(v284 + 24);
  }
  v498 = v289;
  (*(void (**)(void *, uint64_t, std::string *))(a1[68] + 48))(a1 + 68, a2, &v495);

  if (v501 < 0) {
    operator delete(v500);
  }
  *(void *)buf = &v497;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v496;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v495.__r_.__value_.__l.__data_);
  }

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

LABEL_617:
  v495.__r_.__value_.__r.__words[0] = (std::string::size_type)&v472;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v495);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)v484);
}

void sub_192AC4ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  nitro::nitro_function::nitro_function(a16);
  if (STACK[0x418]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x418]);
  }

  STACK[0x3B0] = (unint64_t)&STACK[0x210];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3B0]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

std::string *Espresso::ANECompilerEngine::compiler::build_state_t::constant_t::operator=(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1, a2);
  std::string::pointer data = a2[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a2[1].__r_.__value_.__l.__size_;
  if (size) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1].__r_.__value_.__l.__size_;
  a1[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  a1[1].__r_.__value_.__l.__size_ = size;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return a1;
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(char *a1, uint64_t a2, uint64_t *a3, Espresso::quantized_weights_helper **a4, void *a5, uint64_t *a6)
{
  v112[4] = *MEMORY[0x1E4F143B8];
  std::string v108 = (id *)a2;
  long long v109 = a1;
  id v107 = a5;
  char v106 = *(unsigned char *)(a2 + 552);
  v105[0] = (uint64_t *)&v109;
  v105[1] = a6;
  v105[2] = (uint64_t *)&v108;
  v105[3] = (uint64_t *)&v107;
  v105[4] = (uint64_t *)&v106;
  unint64_t v10 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v11 = [v10 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  long long v12 = [v11 objectForKeyedSubscript:@"espresso.anecompiler.always_bloat"];
  int v13 = [v12 BOOLValue];

  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<rdar://problem/39402422> 257a: \"Illegal cog size\" or \"NE kernel blob too large \" assertion when using large convolutions with int8 weights");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
    goto LABEL_11;
  }
  int v14 = *a4;
  if (*((void *)*a4 + 4) || *((void *)v14 + 6) || *((void *)v14 + 8))
  {
    if (!v109
    {
      int v18 = v108;
      Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
      int v19 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
      char is_mix = Espresso::ANECompilerEngine::is_mix(v19, v20);
      int v22 = *a4;
      if (*((void *)*a4 + 4))
      {
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        uint64_t v91 = v23;
        int v24 = Espresso::ANECompilerEngine::is_mix(v19, (NSString *)&v23->__vftable);
        int v26 = Espresso::ANECompilerEngine::is_mix(v19, v25);
        if (v24) {
          std::string::size_type v27 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_fp16_palettes;
        }
        else {
          std::string::size_type v27 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_fp16_palettes;
        }
        uint64_t v28 = (uint64_t)*a4;
        v112[0] = &unk_1EE37C430;
        v112[1] = v18;
        v112[3] = v112;
        if (v26) {
          uint64_t v29 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_fp16_palettes;
        }
        else {
          uint64_t v29 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_fp16_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_f16_weights(v28, v107, (uint64_t)v112, v27, v29, is_mix, (uint64_t)&__p);
        uint64_t v30 = v112;
      }
      else if (*((void *)v22 + 8))
      {
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        uint64_t v91 = v31;
        int v32 = Espresso::ANECompilerEngine::is_mix(v19, (NSString *)&v31->__vftable);
        int v34 = Espresso::ANECompilerEngine::is_mix(v19, v33);
        if (v32) {
          unint64_t v35 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_uint8_palettes;
        }
        else {
          unint64_t v35 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_uint8_palettes;
        }
        uint64_t v36 = (uint64_t)*a4;
        v111[0] = &unk_1EE37C430;
        v111[1] = v18;
        v111[3] = v111;
        if (v34) {
          int v37 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_uint8_palettes;
        }
        else {
          int v37 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_uint8_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_uint8_weights(v36, v107, (uint64_t)v111, v35, v37, is_mix, (uint64_t)&__p);
        uint64_t v30 = v111;
      }
      else
      {
        if (!*((void *)v22 + 6)) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown lookup table type.");
        }
        std::string __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
        uint64_t v91 = v38;
        int v39 = Espresso::ANECompilerEngine::is_mix(v19, (NSString *)&v38->__vftable);
        int v41 = Espresso::ANECompilerEngine::is_mix(v19, v40);
        if (v39) {
          int v42 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_int8_palettes;
        }
        else {
          int v42 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_int8_palettes;
        }
        uint64_t v43 = (uint64_t)*a4;
        v110[0] = &unk_1EE37C430;
        v110[1] = v18;
        v110[3] = v110;
        if (v41) {
          uint64_t v44 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_int8_palettes;
        }
        else {
          uint64_t v44 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_int8_palettes;
        }
        Espresso::ANECompilerEngine::add_lut_to_int8_weights(v43, v107, (uint64_t)v110, v42, v44, is_mix, (uint64_t)&__p);
        uint64_t v30 = v110;
      }
      std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](v30);

      goto LABEL_39;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Dilated + LUT");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
    goto LABEL_11;
  }
  if (*((_DWORD *)v14 + 39) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Not 8 bits");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
LABEL_11:
    if (SHIBYTE(v92) < 0)
    {
      int v17 = __p;
LABEL_13:
      operator delete(v17);
      goto LABEL_39;
    }
    goto LABEL_39;
  }
  if (*((unsigned char *)v14 + 164))
  {
    if (Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(v14))
    {
      uint64_t v45 = *((void *)v109 + 55);
      uint64_t v46 = *(void *)(v45 + 80);
      uint64_t v47 = *(std::__shared_weak_count **)(v45 + 88);
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v48 = 0;
      if (v46)
      {
        LODWORD(__p) = 0;
        vDSP_minmgv(*(const float **)(v46 + 16), 1, (float *)&__p, *(int *)(v46 + 8));
        if (*(float *)&__p < 0.000061035) {
          BOOL v48 = 1;
        }
      }
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      if (!v48)
      {
        std::string::size_type v60 = v109;
        int v61 = (std::__shared_weak_count *)a3[1];
        uint64_t v103 = *a3;
        uint64_t v104 = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        uint64_t v62 = (*(uint64_t (**)(char *, uint64_t *, char *, void **))(*((void *)v60 + 68) + 88))(v60 + 544, &v103, v60, &__p);
        if (SHIBYTE(v92) < 0) {
          operator delete(__p);
        }
        if (v104) {
          nitro::nitro_function::nitro_function(v104);
        }
        if ((v62 & 0x80000000) != 0)
        {
          uint64_t v68 = *(void *)*a4;
          uint64_t v67 = (std::__shared_weak_count *)*((void *)*a4 + 1);
          if (v67)
          {
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
            std::string::size_type v69 = v108;
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v70 = v67;
          }
          else
          {
            uint64_t v70 = 0;
            std::string::size_type v69 = v108;
          }
          uint64_t v62 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(v69 + 16), *(const unsigned __int8 **)(v68 + 16), *(int *)(v68 + 8));
          if (v70) {
            nitro::nitro_function::nitro_function(v70);
          }
          if (v106) {
            uint64_t weights_file_index = 0;
          }
          else {
          if (v109) {
            uint64_t v82 = (Espresso::ANECompilerEngine::ane_kernel *)(v109 + 544);
          }
          else {
            uint64_t v82 = 0;
          }
          v102[0] = v68;
          v102[1] = v67;
          if (v67) {
            atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v82, v102);
          if (v67)
          {
            nitro::nitro_function::nitro_function(v67);
            nitro::nitro_function::nitro_function(v67);
          }
        }
        else
        {
          size_t v63 = v109;
          std::string::size_type v64 = (std::__shared_weak_count *)a3[1];
          uint64_t v100 = *a3;
          uint64_t v101 = v64;
          if (v64) {
            atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v99, "W_S8");
          (*(void (**)(void **__return_ptr))(*((void *)v63 + 68) + 120))(&__p);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v99.__r_.__value_.__l.__data_);
          }
          if (v101) {
            nitro::nitro_function::nitro_function(v101);
          }
          uint64_t weights_file_index = Espresso::ANECompilerEngine::get_primary_weights_file_index(v108, (Espresso::ANECompilerEngine::compiler *)__p, v92);
          if (v109) {
            uint64_t v66 = (Espresso::ANECompilerEngine::ane_kernel *)(v109 + 544);
          }
          else {
            uint64_t v66 = 0;
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v66, __p);
        }
        long long v83 = [NSNumber numberWithInt:v62];
        [v107 setObject:v83 forKeyedSubscript:@"KernelOffset"];

        long long v84 = [NSNumber numberWithUnsignedLong:weights_file_index];
        [v107 setObject:v84 forKeyedSubscript:@"KernelIndex"];

        [v107 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
        goto LABEL_39;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Overflowing");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Not symmetric");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)&__p);
    }
    goto LABEL_11;
  }
  uint64_t v49 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat");
  std::string::basic_string[abi:ne180100]<0>(&v98, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v49 + 472, (uint64_t)&__p, (uint64_t)&v98, &v99);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v99.__r_.__value_.__l.__size_ == 1)
    {
      size_t v50 = (std::string *)v99.__r_.__value_.__r.__words[0];
      goto LABEL_59;
    }
  }
  else if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) == 1)
  {
    size_t v50 = &v99;
LABEL_59:
    BOOL v51 = v50->__r_.__value_.__s.__data_[0] == 49;
    goto LABEL_61;
  }
  BOOL v51 = 0;
LABEL_61:
  uint64_t v52 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat_v2");
  std::string::basic_string[abi:ne180100]<0>(v96, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v52 + 472, (uint64_t)&__p, (uint64_t)v96, &v98);
  if (v97 < 0) {
    operator delete(v96[0]);
  }
  if (SHIBYTE(v92) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v98.__r_.__value_.__l.__size_ == 1)
    {
      uint64_t v53 = (std::string *)v98.__r_.__value_.__r.__words[0];
      goto LABEL_70;
    }
LABEL_71:
    BOOL v54 = 0;
    goto LABEL_72;
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) != 1) {
    goto LABEL_71;
  }
  uint64_t v53 = &v98;
LABEL_70:
  BOOL v54 = v53->__r_.__value_.__s.__data_[0] == 49;
LABEL_72:
  Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(*a4, v51, v54, (uint64_t)&__p);
  if (!__p) {
    goto LABEL_83;
  }
  std::string::size_type v55 = v95;
  v89[0] = v94;
  v89[1] = (uint64_t)v95;
  if (v95) {
    atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v89);
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  if (!is_qbias_zero)
  {
LABEL_83:
    std::string::basic_string[abi:ne180100]<0>(v96, "Unsigned / Not symmetric");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)v96);
LABEL_84:
    if (v97 < 0) {
      operator delete(v96[0]);
    }
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    if (v93) {
      nitro::nitro_function::nitro_function(v93);
    }
    if (v91) {
      nitro::nitro_function::nitro_function(v91);
    }
    goto LABEL_154;
  }
  int v57 = (const float **)v92;
  long long v58 = v93;
  if (v93) {
    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v59 = 0;
  if (v57)
  {
    LODWORD(v96[0]) = 0;
    vDSP_minmgv(v57[2], 1, (float *)v96, *((int *)v57 + 2));
    if (*(float *)v96 < 0.000061035) {
      BOOL v59 = 1;
    }
  }
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  if (v59)
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "Unsigned / Overflowing");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v105, (uint64_t *)v96);
    goto LABEL_84;
  }
  uint64_t v71 = *((void *)v109 + 55);
  unsigned int v73 = v92;
  std::string::size_type v72 = v93;
  if (v93) {
    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v74 = *(std::__shared_weak_count **)(v71 + 88);
  *(void *)(v71 + 80) = v73;
  *(void *)(v71 + 88) = v72;
  if (v74) {
    nitro::nitro_function::nitro_function(v74);
  }
  uint64_t v75 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(v108 + 16);
  uint64_t v76 = (const unsigned __int8 **)__p;
  uint64_t v77 = v91;
  if (v91) {
    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v78 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v75, v76[2], *((int *)v76 + 2));
  if (v77) {
    nitro::nitro_function::nitro_function(v77);
  }
  std::string::size_type v79 = [NSNumber numberWithInt:v78];
  [v107 setObject:v79 forKeyedSubscript:@"KernelOffset"];

  [v107 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
  uint64_t v80 = NSNumber;
  if (v106) {
    uint64_t v81 = 0;
  }
  else {
  uint64_t v85 = [v80 numberWithUnsignedLong:v81];
  }
  [v107 setObject:v85 forKeyedSubscript:@"KernelIndex"];

  if (v109) {
    int v86 = (Espresso::ANECompilerEngine::ane_kernel *)(v109 + 544);
  }
  else {
    int v86 = 0;
  }
  unsigned int v87 = v91;
  v88[0] = __p;
  v88[1] = v91;
  if (v91) {
    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v86, v88);
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
LABEL_154:
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    int v17 = (void *)v99.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
LABEL_39:
}

void sub_192AC6718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(uint64_t **a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = **a1;
  if (v4) {
    Espresso::quantized_weights_helper::dequantize_to_float16_2d(*(Espresso::quantized_weights_helper **)(v4 + 440), buf);
  }
  else {
    Espresso::quantized_weights_helper::dequantize_to_float16_4d(MEMORY[0x1B8], buf);
  }
  uint64_t v6 = *(void *)buf;
  uint64_t v5 = *(std::__shared_weak_count **)&buf[8];
  int v7 = (Espresso::ANECompilerEngine::final_anec_weights_t *)a1[1];
  uint64_t v8 = **a1;
  if (v8) {
    uint64_t v9 = (Espresso::ANECompilerEngine::ane_kernel *)(v8 + 544);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v23 = *(void *)buf;
  uint64_t v24 = *(void *)&buf[8];
  if (*(void *)&buf[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(v7, v9, &v23);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  long long v12 = Espresso::espresso_os_log_subsystem(v10, v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v21 = a2;
    }
    else {
      BOOL v21 = (uint64_t *)*a2;
    }
    uint64_t v22 = *(int *)(v6 + 8);
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v22;
    _os_log_debug_impl(&dword_1920CB000, v12, OS_LOG_TYPE_DEBUG, "[ANEC/handle_quantized_weights] Bloating (%s) W: %zu", buf, 0x16u);
  }

  int v13 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(*a1[2] + 128);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v13, *(const unsigned __int8 **)(v6 + 16), *(int *)(v6 + 8));
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  int v15 = objc_msgSend(NSNumber, "numberWithInt:", v14, v23, v24);
  [(id)*a1[3] setObject:v15 forKeyedSubscript:@"KernelOffset"];

  [(id)*a1[3] setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  int v16 = NSNumber;
  if (*(unsigned char *)a1[4]) {
    uint64_t weights_file_index = 0;
  }
  else {
  int v18 = [v16 numberWithUnsignedLong:weights_file_index];
  }
  [(id)*a1[3] setObject:v18 forKeyedSubscript:@"KernelIndex"];

  uint64_t v19 = *(void *)(**a1 + 440);
  int v20 = *(std::__shared_weak_count **)(v19 + 88);
  *(void *)(v19 + 80) = 0;
  *(void *)(v19 + 88) = 0;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192AC6BE8(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine24handle_quantized_weightsIPNS0_24mix_inner_product_kernelEEEvT_PNS0_8compilerENSt3__110shared_ptrINS_3netEEENS8_INS_24quantized_weights_helperEEEP19NSMutableDictionaryRNS0_20final_anec_weights_tEEUlPKhmE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, const unsigned __int8 **a2, size_t *a3)
{
  unsigned int v4 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(*(void *)(a1 + 8) + 128), *a2, *a3);
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 552)) {
  return v4;
  }
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C430;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37C430;
  result[1] = v3;
  return result;
}

void std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::mix_inner_product_kernel *>(Espresso::ANECompilerEngine::mix_inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__func()
{
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::~mix_non_maximum_suppression_kernel(Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *)((char *)this - 336);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_non_maximum_suppression_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *)((char *)this - 336);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::compile(Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::compile(Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  unsigned int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (int v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  unsigned int v88 = (char *)(a3 + 6);
  v147[0] = a3[6];
  uint64_t v92 = v8 + 136;
  uint64_t v93 = a2;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v147[0], (long long **)v147);
  uint64_t v10 = *((void *)v9 + 5);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v91 = v8;
  v147[0] = a3;
  std::string __str = (std::string *)a3;
  long long v12 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v92, (unsigned __int8 *)a3, (long long **)v147)+ 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = objc_opt_new();
  uint64_t v14 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
  [v13 setObject:v14 forKeyedSubscript:@"NMSRounds"];

  LODWORD(v15) = *((_DWORD *)this + 71);
  int v16 = [NSNumber numberWithFloat:v15];
  [v13 setObject:v16 forKeyedSubscript:@"IoUThreshold"];

  if (*((unsigned char *)this + 292)) {
    uint64_t v17 = MEMORY[0x1E4F1CC38];
  }
  else {
    uint64_t v17 = MEMORY[0x1E4F1CC28];
  }
  [v13 setObject:v17 forKeyedSubscript:@"PerClassSuppression"];
  [v13 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"ReturnPerClassResults"];
  int v18 = *(long long **)v88;
  if (*(char *)(*(void *)v88 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)v18, *((void *)v18 + 1));
    int v18 = *(long long **)v88;
  }
  else
  {
    long long v19 = *v18;
    v161.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
    *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v19;
  }
  if (*((char *)v18 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v160, *((const std::string::value_type **)v18 + 3), *((void *)v18 + 4));
  }
  else {
    std::string v160 = *(std::string *)((unsigned char *)v18 + 1);
  }
  if (!*((unsigned char *)this + 307))
  {
    int v20 = operator new(0x20uLL);
    v130.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 + 2);
    _OWORD *v20 = xmmword_192DCA790;
    v20[1] = xmmword_192DCA7A0;
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    v130.__r_.__value_.__l.__size_ = (std::string::size_type)(v20 + 2);
    std::string::append(&v161, "__transpose_fwd");
    std::string::append(&v160, "__transpose_fwd");
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)v147, (uint64_t)__str[2].__r_.__value_.__l.__data_, &v161, (int)__str[3].__r_.__value_.__l.__data_, __str[4].__r_.__value_.__r.__words[1], (void *)__str[4].__r_.__value_.__r.__words[2], (unsigned int **)&v130, (std::string *)((char *)__str + 80));
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v139, __str[2].__r_.__value_.__r.__words[0] + 24, &v160, (int)__str[3].__r_.__value_.__l.__data_, __str[4].__r_.__value_.__r.__words[1], (void *)__str[4].__r_.__value_.__r.__words[2], (unsigned int **)&v130, (std::string *)((char *)__str + 80));
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v147);
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v139);

    if (v143 < 0) {
      operator delete(__p);
    }
    v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v139.__r_.__value_.__l.__data_);
    }

    if (v155 < 0) {
      operator delete(v154);
    }
    v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
    v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
    if (v148 < 0) {
      operator delete(v147[0]);
    }
    operator delete(v20);
  }
  BOOL v21 = (void *)[v13 mutableCopy];
  obuint64_t j = (id)[v13 mutableCopy];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v147, (id *)&__str->__r_.__value_.__l.__data_);
  uint64_t v22 = v151;
  for (uint64_t i = v152; i != v22; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i[-1].__r_.__value_.__l.__data_);
    }
  }
  uint64_t v152 = v22;
  uint64_t v24 = v149;
  uint64_t v25 = v150;
  if (v150 != v149)
  {
    do
    {
      if (*(char *)(v25 - 1) < 0) {
        operator delete(*(void **)(v25 - 24));
      }
      v25 -= 24;
    }
    while (v25 != v24);
    uint64_t v22 = v152;
  }
  uint64_t v150 = v24;
  if ((unint64_t)v22 >= v153)
  {
    std::string::size_type v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v151, (uint64_t)&v161);
  }
  else
  {
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v22, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v26 = *(_OWORD *)&v161.__r_.__value_.__l.__data_;
      v22->__r_.__value_.__r.__words[2] = v161.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v26;
    }
    std::string::size_type v27 = v22 + 1;
  }
  uint64_t v152 = v27;
  if ((unint64_t)v27 >= v153)
  {
    uint64_t v29 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v151, (uint64_t)&v160);
  }
  else
  {
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v27, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v28 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
      v27->__r_.__value_.__r.__words[2] = v160.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
    }
    uint64_t v29 = v27 + 1;
  }
  uint64_t v30 = v157;
  uint64_t v152 = v29;
  int v157 = @"NMS";

  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v139, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v147);
  uint64_t v145 = v157;
  v146[0] = v158;
  v146[1] = v159;
  std::string::operator=(&v139, __str);
  if (!*((unsigned char *)this + 307)) {
    std::string::append(&v139, "__pre_transpose_bwd");
  }
  [v21 setObject:@"Boxes" forKeyedSubscript:@"Type"];
  objc_storeStrong(v146, v21);
  Espresso::ANECompilerEngine::compiler::add_unit(v93, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v139);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v130, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v147);
  uint64_t v137 = v157;
  v138[0] = v158;
  v138[1] = v159;
  int v31 = *((unsigned __int8 *)this + 304);
  if (*((unsigned char *)this + 306))
  {
    if (*((void *)this + 40) == *((void *)this + 39)) {
      goto LABEL_65;
    }
    if (*((unsigned char *)this + 307))
    {
      int v32 = "__pre_gather_indices";
LABEL_59:
      std::string::append(&v130, v32);
      goto LABEL_60;
    }
LABEL_58:
    int v32 = "__pre_transpose_indices";
    goto LABEL_59;
  }
  if (!*((unsigned char *)this + 307)) {
    goto LABEL_58;
  }
  std::string::operator=(&v130, (const std::string *)(__str[1].__r_.__value_.__r.__words[0] + 24 * (v31 == 0)));
LABEL_60:
  uint64_t v33 = 8;
  if (!*((unsigned char *)this + 307)) {
    uint64_t v33 = 12;
  }
  if (*(int *)(v10 + v33) >= 2049)
  {
    int v34 = v136;
    unsigned int v136 = @"UInt16";

    int v135 = 5;
  }
  [obj setObject:@"Indices" forKeyedSubscript:@"Type"];
  objc_storeStrong(v138, obj);
  Espresso::ANECompilerEngine::compiler::add_unit(v93, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v130);
LABEL_65:
  uint64_t v85 = v12;
  int v86 = v11;
  unsigned int v87 = v7;
  unint64_t v35 = __str;
  uint64_t v36 = v93;
  if (!*((unsigned char *)this + 307))
  {
    int v37 = operator new(0x20uLL);
    v129.__r_.__value_.__r.__words[2] = (std::string::size_type)(v37 + 2);
    _OWORD *v37 = xmmword_192DCA7B0;
    v37[1] = xmmword_192DCA7C0;
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    v129.__r_.__value_.__l.__size_ = (std::string::size_type)(v37 + 2);
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v118, (uint64_t)&v139, __str, (int)__str[3].__r_.__value_.__l.__data_, __str[4].__r_.__value_.__r.__words[1], (void *)__str[4].__r_.__value_.__r.__words[2], (unsigned int **)&v129, (std::string *)((char *)__str + 80));
    Espresso::ANECompilerEngine::compiler::add_unit(v93, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v118);
    if (!*((unsigned char *)this + 306))
    {
      int v38 = operator new(0x10uLL);
      *int v38 = xmmword_192DCA400;
      v101.__r_.__value_.__l.__size_ = (std::string::size_type)(v38 + 1);
      v101.__r_.__value_.__r.__words[2] = (std::string::size_type)(v38 + 1);
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
      Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v110, (uint64_t)&v130, (const std::string *)(__str[1].__r_.__value_.__r.__words[0] + 24 * (v31 == 0)), (int)__str[3].__r_.__value_.__l.__data_, v135, v136, (unsigned int **)&v101, (std::string *)((char *)__str + 80));
      Espresso::ANECompilerEngine::compiler::add_unit(v93, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v110);

      if (v114 < 0) {
        operator delete(v113);
      }
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      operator delete(v38);
    }
    if (!*((unsigned char *)this + 304))
    {
      Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v110, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v147);
      long long v116 = v157;
      v117[0] = v158;
      v117[1] = v159;
      std::string::pointer data = __str[1].__r_.__value_.__l.__data_;
      if (data[23] >= 0) {
        size_t v40 = data[23];
      }
      else {
        size_t v40 = *((void *)data + 1);
      }
      int v41 = &v101;
      std::string::basic_string[abi:ne180100]((uint64_t)&v101, v40 + 19);
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v41 = (std::string *)v101.__r_.__value_.__r.__words[0];
      }
      if (v40)
      {
        if (data[23] >= 0) {
          std::string::pointer v42 = data;
        }
        else {
          std::string::pointer v42 = *(std::string::pointer *)data;
        }
        memmove(v41, v42, v40);
      }
      strcpy((char *)v41 + v40, "__pre_transpose_bwd");
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      std::string v110 = v101;
      uint64_t v36 = v93;
      uint64_t v43 = (void *)[v13 mutableCopy];
      [v43 setObject:@"Scores" forKeyedSubscript:@"Type"];
      objc_storeStrong(v117, v43);
      Espresso::ANECompilerEngine::compiler::add_unit(v93, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v110);
      Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v101, (uint64_t)&v110, (const std::string *)__str[1].__r_.__value_.__l.__data_, (int)__str[3].__r_.__value_.__l.__data_, __str[4].__r_.__value_.__r.__words[1], (void *)__str[4].__r_.__value_.__r.__words[2], (unsigned int **)&v129, (std::string *)((char *)__str + 80));
      Espresso::ANECompilerEngine::compiler::add_unit(v93, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v101);

      if (v106 < 0) {
        operator delete(v105);
      }
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
      v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }

      if (v114 < 0) {
        operator delete(v113);
      }
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
    }

    if (v125 < 0) {
      operator delete(v124);
    }
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
    v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v118.__r_.__value_.__l.__data_);
    }
    operator delete(v37);
  }
  long long v83 = v21;
  long long v84 = v13;
  if (*((void *)this + 40) != *((void *)this + 39))
  {
    unint64_t v44 = 0;
    BOOL v45 = *((unsigned char *)this + 304) == 0;
    uint64_t v46 = 1;
    if (!*((unsigned char *)this + 304)) {
      uint64_t v46 = 2;
    }
    if (!*((unsigned char *)this + 306)) {
      BOOL v45 = v46;
    }
    if (*((unsigned char *)this + 305)) {
      unint64_t v47 = v45;
    }
    else {
      unint64_t v47 = v45 + 1;
    }
    uint64_t v94 = (std::string *)((char *)__str + 80);
    uint64_t v90 = this;
    while (1)
    {
      std::string::pointer v48 = v35[2].__r_.__value_.__l.__data_;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35[2].__r_.__value_.__l.__size_ - (void)v48) >> 3) <= v44 + 2) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v49 = &v48[24 * v44 + 48];
      if (v49[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v129, *(const std::string::value_type **)v49, *((void *)v49 + 1));
      }
      else
      {
        long long v50 = *(_OWORD *)v49;
        v129.__r_.__value_.__r.__words[2] = *((void *)v49 + 2);
        *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v50;
      }
      int v51 = v35[4].__r_.__value_.__r.__words[1];
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v100, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
      }
      else {
        std::string v100 = v129;
      }
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v91 + 360), &v100))
      {
        int v52 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at(v91 + 352, &v100) + 8);
        if (v52 == -1) {
          int v51 = 1;
        }
        else {
          int v51 = v52;
        }
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      uint64_t v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v92, (unsigned __int8 *)&v129, (long long **)&v118);
      BOOL v54 = (_DWORD *)*((void *)v53 + 5);
      std::string::size_type v55 = (std::__shared_weak_count *)*((void *)v53 + 6);
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v97 = v51;
      if (v54)
      {
        int64_t v56 = 0;
        if (v55 && v54)
        {
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          int64_t v56 = v55;
        }
      }
      else
      {
        int64_t v56 = 0;
      }
      uint64_t v57 = *((void *)this + 39);
      if (v44 >= (*((void *)this + 40) - v57) >> 2) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v58 = *(_DWORD *)(v57 + 4 * v44);
      if ((v58 & 0x80000000) != 0) {
        v58 += v54[46];
      }
      std::string::pointer v59 = v35[1].__r_.__value_.__l.__data_;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35[1].__r_.__value_.__l.__size_ - (void)v59) >> 3) <= v47) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      std::string::size_type v60 = &v59[24 * v47];
      if (v60[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v60, *((void *)v60 + 1));
      }
      else
      {
        long long v61 = *(_OWORD *)v60;
        v99.__r_.__value_.__r.__words[2] = *((void *)v60 + 2);
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v61;
      }
      BOOL v95 = v56;
      uint64_t v62 = (void *)v101.__r_.__value_.__r.__words[0];
      if (v101.__r_.__value_.__l.__size_ != v101.__r_.__value_.__r.__words[0])
      {
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v99.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v110, size + 28);
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v64 = &v110;
        }
        else {
          std::string::size_type v64 = (std::string *)v110.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v65 = &v99;
          }
          else {
            uint64_t v65 = (std::string *)v99.__r_.__value_.__r.__words[0];
          }
          memmove(v64, v65, size);
        }
        strcpy((char *)v64 + size, "__gather_param_pre_transpose");
        Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v118, (uint64_t)&v129, &v110, (int)v35[3].__r_.__value_.__l.__data_, v97, (void *)v35[4].__r_.__value_.__r.__words[2], (unsigned int **)&v101, v94);
        Espresso::ANECompilerEngine::compiler::add_unit(v36, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v118);
        std::string::operator=(&v129, &v110);

        if (v125 < 0) {
          operator delete(v124);
        }
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v66 = v102;
      uint64_t v67 = v103;
      if (v103 == v102)
      {
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v98, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
        }
        else {
          std::string v98 = v99;
        }
        std::string::operator=(&v98, &v99);
      }
      else
      {
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v68 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v68 = v99.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v98, v68 + 18);
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v69 = &v98;
        }
        else {
          std::string::size_type v69 = (std::string *)v98.__r_.__value_.__r.__words[0];
        }
        if (v68)
        {
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v70 = &v99;
          }
          else {
            uint64_t v70 = (std::string *)v99.__r_.__value_.__r.__words[0];
          }
          memmove(v69, v70, v68);
        }
        strcpy((char *)v69 + v68, "__gather_nd_result");
      }
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v118.__r_.__value_.__l.__data_, (id *)&__str->__r_.__value_.__l.__data_);
      uint64_t v71 = objc_opt_new();
      std::string::size_type v72 = objc_opt_new();
      [v72 addObject:@"Width"];
      unsigned int v73 = v127;
      uint64_t v127 = @"Gather";

      [v71 setObject:v72 forKeyedSubscript:@"GatherNDAxes"];
      objc_storeStrong(&v128, v71);
      uint64_t v74 = v121;
      for (uint64_t j = v122; j != v74; --j)
      {
        if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(j[-1].__r_.__value_.__l.__data_);
        }
      }
      unint64_t v122 = v74;
      if ((unint64_t)v74 >= v123)
      {
        uint64_t v77 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v121, (uint64_t)&v129);
      }
      else
      {
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v74, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v76 = *(_OWORD *)&v129.__r_.__value_.__l.__data_;
          v74->__r_.__value_.__r.__words[2] = v129.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v76;
        }
        uint64_t v77 = v74 + 1;
      }
      unint64_t v122 = v77;
      if ((unint64_t)v77 >= v123)
      {
        std::string::size_type v79 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v121, (uint64_t)&v130);
      }
      else
      {
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v77, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v78 = *(_OWORD *)&v130.__r_.__value_.__l.__data_;
          v77->__r_.__value_.__r.__words[2] = v130.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v78;
        }
        std::string::size_type v79 = v77 + 1;
      }
      unint64_t v122 = v79;
      std::string::operator=(&v118, &v98);
      uint64_t v80 = v119;
      for (uint64_t k = v120; k != v80; k -= 24)
      {
        if (*(char *)(k - 1) < 0) {
          operator delete(*(void **)(k - 24));
        }
      }
      uint64_t v120 = v80;
      uint64_t v36 = v93;
      Espresso::ANECompilerEngine::compiler::add_unit(v93, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v118);
      BOOL v82 = v67 == v66;
      unint64_t v35 = __str;
      if (!v82)
      {
        Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v110, (uint64_t)&v98, &v99, (int)__str[3].__r_.__value_.__l.__data_, v97, (void *)__str[4].__r_.__value_.__r.__words[2], &v102, v94);
        Espresso::ANECompilerEngine::compiler::add_unit(v93, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v110);

        if (v114 < 0) {
          operator delete(v113);
        }
        v162[0] = (void **)v112;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v162);
        v162[0] = (void **)v111;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v162);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
      }

      if (v125 < 0) {
        operator delete(v124);
      }
      v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      this = v90;
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v118.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v66) {
        goto LABEL_204;
      }
LABEL_205:
      if (v62) {
        operator delete(v62);
      }
      if (v95) {
        nitro::nitro_function::nitro_function(v95);
      }
      if (v55) {
        nitro::nitro_function::nitro_function(v55);
      }
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v129.__r_.__value_.__l.__data_);
      }
      ++v47;
      if (++v44 >= (uint64_t)(*((void *)v90 + 40) - *((void *)v90 + 39)) >> 2) {
        goto LABEL_217;
      }
    }
    operator delete(v99.__r_.__value_.__l.__data_);
    if (!v66) {
      goto LABEL_205;
    }
LABEL_204:
    operator delete(v66);
    goto LABEL_205;
  }
LABEL_217:

  if (v134 < 0) {
    operator delete(v133);
  }
  v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }

  if (v143 < 0) {
    operator delete(__p);
  }
  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v141;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v139.__r_.__value_.__l.__data_);
  }

  if (v155 < 0) {
    operator delete(v154);
  }
  v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
  v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
  if (v148 < 0) {
    operator delete(v147[0]);
  }

  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }

  if (v85) {
    nitro::nitro_function::nitro_function(v85);
  }
  if (v86) {
    nitro::nitro_function::nitro_function(v86);
  }
  nitro::nitro_function::nitro_function(v87);
}

void sub_192AC8190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a45);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a63);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x240]);
  operator delete(v63);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x2F0]);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x380]);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x410]);

  if (*(char *)(v67 - 137) < 0) {
    operator delete(*(void **)(v67 - 160));
  }
  if (*(char *)(v67 - 105) < 0) {
    operator delete(*(void **)(v67 - 128));
  }

  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::anonymous namespace'::get_inline_gather_plan(__n128 *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5 = (int)a3[6];
  if ((int)v5 > 4)
  {
    if (v5 == 5)
    {
      int v20 = a3[7];
      uint64_t v6 = v20 != 0;
      __n128 v104 = 0u;
      if (v5 - 1 == a2)
      {
        uint64_t v14 = 0;
        BOOL v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        if (!v20) {
          goto LABEL_165;
        }
        goto LABEL_32;
      }
      if (a2 <= 4)
      {
        uint64_t v14 = 0;
        BOOL v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        unsigned int v7 = 3;
        uint64_t v25 = "nms: Can't gather from axis zero.";
        switch(4 - a2)
        {
          case 0u:
            goto LABEL_31;
          case 1u:
            goto LABEL_27;
          case 2u:
            if (v20) {
              unsigned int v7 = 2;
            }
            else {
              unsigned int v7 = 1;
            }
            goto LABEL_27;
          case 3u:
            unsigned int v7 = 2 * (v20 == 0);
            goto LABEL_5;
          case 4u:
            goto LABEL_170;
          default:
            goto LABEL_167;
        }
      }
      goto LABEL_167;
    }
LABEL_166:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("nms: invalid zero axis.");
  }
  if ((v5 - 6) < 0xFFFFFFFB) {
    goto LABEL_166;
  }
  uint64_t v6 = dword_192DF4A68[(v5 - 1)];
  if (v5 - 1 != a2)
  {
    if ((a2 & 0x80000000) == 0 && a2 < v5)
    {
      unsigned int v24 = v5 + ~a2;
      if (v24 <= 4)
      {
        unsigned int v7 = 4;
        switch(v24)
        {
          case 0u:
            goto LABEL_5;
          case 1u:
            unsigned int v7 = 3;
            goto LABEL_5;
          case 2u:
            unsigned int v7 = 2;
            goto LABEL_5;
          case 3u:
            unsigned int v7 = 0;
            goto LABEL_5;
          default:
            break;
        }
      }
    }
LABEL_167:
    uint64_t v25 = "nms: invalid gather axis.";
    goto LABEL_170;
  }
  unsigned int v7 = 4;
LABEL_5:
  if (v6 == v7)
  {
    uint64_t v25 = "nms: Can't gather from axis zero.";
    goto LABEL_170;
  }
  if (v6 == 4)
  {
    uint64_t v25 = "nms: Can't gather from rank one tensor.";
LABEL_170:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v25);
  }
  if (v7 == 4)
  {
    uint64_t v14 = 0;
    BOOL v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    __n128 v104 = 0u;
LABEL_31:
    if (!v6) {
      goto LABEL_165;
    }
  }
  else
  {
    if (!v7)
    {
      uint64_t v8 = operator new(8uLL);
      void *v8 = 0x400000000;
      uint64_t v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(2uLL);
      uint64_t v10 = v9;
      uint64_t v12 = v11;
      uint64_t v13 = 0;
      uint64_t v14 = (char *)&v9[v11];
      uint64_t v15 = v6;
      uint64_t v99 = v6 << 32;
      v9[1] = ((unint64_t)v6 << 32) | 4;
      int v16 = (char *)(v9 + 2);
      uint64_t v17 = 1;
      do
      {
        --v17;
        v9[v13] = v8[v13];
        --v13;
      }
      while (v13 != -1);
      int v18 = (char *)&v9[v17];
      operator delete(v8);
      uint64_t v103 = &v10[v17];
      if (v12 < 3)
      {
        uint64_t v40 = (16 - 8 * v17) >> 3;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((v14 - v18) >> 2 > v41) {
          unint64_t v41 = (v14 - v18) >> 2;
        }
        if ((unint64_t)(v14 - v18) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42) {
          unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v42);
        }
        else {
          uint64_t v43 = 0;
        }
        uint64_t v77 = (void *)(v42 + 8 * v40);
        uint64_t v14 = (char *)(v42 + 8 * v43);
        *uint64_t v77 = v15;
        long long v19 = v77 + 1;
        if (v17 == 2)
        {
          uint64_t v103 = v77;
          int v18 = v16;
        }
        else
        {
          uint64_t v78 = -16;
          std::string::size_type v79 = v10 + 1;
          do
          {
            uint64_t v80 = *v79--;
            *--uint64_t v77 = v80;
            v78 += 8;
          }
          while (v78);
          uint64_t v103 = v77;
          if (!v18) {
            goto LABEL_137;
          }
        }
        operator delete(v18);
      }
      else
      {
        void v10[2] = v15;
        long long v19 = v10 + 3;
      }
LABEL_137:
      v81.n128_u64[0] = (unint64_t)v103;
      v81.n128_u64[1] = (unint64_t)v19;
      __n128 v104 = v81;
      BOOL v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
      BOOL v21 = v82;
      uint64_t v23 = &v82[8 * v83];
      *(void *)BOOL v82 = 4;
      if (v83 < 2)
      {
        uint64_t v85 = 2;
        if ((unint64_t)((8 * v83) >> 2) > 2) {
          uint64_t v85 = (8 * v83) >> 2;
        }
        if ((unint64_t)(8 * v83) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86) {
          unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v86);
        }
        else {
          uint64_t v87 = 0;
        }
        uint64_t v88 = 0;
        uint64_t v23 = (char *)(v86 + 8 * v87);
        *(void *)(v86 + 8) = v15 | 0x400000000;
        long long v84 = (char *)(v86 + 16);
        do
        {
          *(void *)(v86 + v88) = *(void *)&v21[v88];
          v88 -= 8;
        }
        while (v88 != -8);
        std::string::size_type v89 = (char *)v86;
        operator delete(v21);
        BOOL v21 = v89;
      }
      else
      {
        *((void *)v82 + 1) = v15 | 0x400000000;
        long long v84 = v82 + 16;
      }
      if (v84 >= v23)
      {
        uint64_t v90 = (v84 - v21) >> 3;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((v23 - v21) >> 2 > v91) {
          unint64_t v91 = (v23 - v21) >> 2;
        }
        if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        if (v92) {
          unint64_t v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v92);
        }
        else {
          uint64_t v93 = 0;
        }
        uint64_t v94 = (char *)(v92 + 8 * v90);
        uint64_t v23 = (char *)(v92 + 8 * v93);
        *(void *)uint64_t v94 = v99;
        uint64_t v22 = v94 + 8;
        while (v84 != v21)
        {
          uint64_t v95 = *((void *)v84 - 1);
          v84 -= 8;
          *((void *)v94 - 1) = v95;
          v94 -= 8;
        }
        operator delete(v21);
        BOOL v21 = v94;
      }
      else
      {
        *(void *)long long v84 = v99;
        uint64_t v22 = v84 + 8;
      }
      goto LABEL_165;
    }
LABEL_27:
    long long v26 = operator new(8uLL);
    uint64_t v27 = v7;
    uint64_t v28 = v7 | 0x400000000;
    *long long v26 = v28;
    BOOL v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(1uLL);
    uint64_t v30 = v29;
    std::string v98 = a1;
    uint64_t v100 = v6;
    *(void *)BOOL v21 = v28;
    int v31 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(2uLL);
    uint64_t v23 = &v21[8 * v30];
    uint64_t v33 = (char *)&v31[v32];
    uint64_t v34 = (v27 << 32) | 4;
    v31[1] = v34;
    void *v31 = *v26;
    operator delete(v26);
    v35.n128_u64[0] = (unint64_t)v31;
    v35.n128_u64[1] = (unint64_t)(v31 + 2);
    __n128 v104 = v35;
    if (v30 < 2)
    {
      uint64_t v37 = 2;
      if ((unint64_t)((8 * v30) >> 2) > 2) {
        uint64_t v37 = (8 * v30) >> 2;
      }
      if ((unint64_t)(8 * v30) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      uint64_t v14 = v33;
      if (v38) {
        unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v38);
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v6 = v100;
      uint64_t v75 = 0;
      uint64_t v23 = (char *)(v38 + 8 * v39);
      *(void *)(v38 + 8) = v34;
      uint64_t v22 = (char *)(v38 + 16);
      do
      {
        *(void *)(v38 + v75) = *(void *)&v21[v75];
        v75 -= 8;
      }
      while (v75 != -8);
      long long v76 = (char *)v38;
      operator delete(v21);
      BOOL v21 = v76;
      a1 = v98;
      if (!v100) {
        goto LABEL_165;
      }
    }
    else
    {
      *((void *)v21 + 1) = v34;
      uint64_t v22 = v21 + 16;
      uint64_t v14 = v33;
      uint64_t v6 = v100;
      if (!v100) {
        goto LABEL_165;
      }
    }
  }
LABEL_32:
  if (*a3 != 1) {
    goto LABEL_55;
  }
  switch(v6)
  {
    case 3:
      uint64_t v36 = a3 + 3;
      break;
    case 2:
      uint64_t v36 = a3 + 1;
      break;
    case 1:
      uint64_t v36 = a3 + 2;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::invalid_state_error::invalid_state_error(exception, "Bad axis.");
  }
  if (*v36 != 1)
  {
LABEL_55:
    unint64_t v44 = (char *)v104.n128_u64[1];
    BOOL v45 = (char *)v104.n128_u64[0];
    if (v104.n128_u64[1] >= (unint64_t)v14)
    {
      uint64_t v47 = (uint64_t)(v104.n128_u64[1] - v104.n128_u64[0]) >> 3;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)&v14[-v104.n128_u64[0]] >> 2 > v48) {
        unint64_t v48 = (uint64_t)&v14[-v104.n128_u64[0]] >> 2;
      }
      if ((unint64_t)&v14[-v104.n128_u64[0]] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49) {
        unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v49);
      }
      else {
        uint64_t v50 = 0;
      }
      int v51 = (char *)(v49 + 8 * v47);
      uint64_t v14 = (char *)(v49 + 8 * v50);
      *(void *)int v51 = v6;
      uint64_t v46 = v51 + 8;
      if (v104.n128_u64[1] != v104.n128_u64[0])
      {
        do
        {
          uint64_t v52 = *((void *)v44 - 1);
          v44 -= 8;
          *((void *)v51 - 1) = v52;
          v51 -= 8;
        }
        while (v44 != (char *)v104.n128_u64[0]);
        unint64_t v44 = (char *)v104.n128_u64[0];
      }
      BOOL v45 = v51;
      if (v44)
      {
        std::string v101 = v51;
        operator delete(v44);
        BOOL v45 = v101;
      }
    }
    else
    {
      *(void *)v104.n128_u64[1] = v6;
      uint64_t v46 = (char *)(v104.n128_u64[1] + 8);
    }
    unsigned int v102 = v45;
    unsigned long long v105 = v45;
    if (v22 >= v23)
    {
      uint64_t v54 = (v22 - v21) >> 3;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((v23 - v21) >> 2 > v55) {
        unint64_t v55 = (v23 - v21) >> 2;
      }
      if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v55;
      }
      if (v56) {
        unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v56);
      }
      else {
        uint64_t v57 = 0;
      }
      unsigned int v58 = (char *)(v56 + 8 * v54);
      uint64_t v23 = (char *)(v56 + 8 * v57);
      *(void *)unsigned int v58 = v6;
      uint64_t v53 = v58 + 8;
      while (v22 != v21)
      {
        uint64_t v59 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v58 - 1) = v59;
        v58 -= 8;
      }
      if (v21) {
        operator delete(v21);
      }
      BOOL v21 = v58;
    }
    else
    {
      *(void *)uint64_t v22 = v6;
      uint64_t v53 = v22 + 8;
    }
    if (v46 < v14)
    {
      *(void *)uint64_t v46 = v6 << 32;
      std::string::size_type v60 = v46 + 8;
      goto LABEL_105;
    }
    long long v61 = v102;
    uint64_t v62 = (v46 - v102) >> 3;
    unint64_t v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v14 - v102) >> 2 > v63) {
      unint64_t v63 = (v14 - v102) >> 2;
    }
    if ((unint64_t)(v14 - v102) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v64 = v63;
    }
    if (v64) {
      unint64_t v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v64);
    }
    else {
      uint64_t v65 = 0;
    }
    uint64_t v66 = (void *)(v64 + 8 * v62);
    uint64_t v14 = (char *)(v64 + 8 * v65);
    void *v66 = v6 << 32;
    std::string::size_type v60 = v66 + 1;
    if (v46 == v102)
    {
      unsigned long long v105 = (char *)v66;
      long long v61 = v46;
    }
    else
    {
      do
      {
        uint64_t v67 = *((void *)v46 - 1);
        v46 -= 8;
        *--uint64_t v66 = v67;
      }
      while (v46 != v102);
      unsigned long long v105 = (char *)v66;
      if (!v102)
      {
LABEL_105:
        v68.n128_u64[0] = (unint64_t)v105;
        v68.n128_u64[1] = (unint64_t)v60;
        __n128 v104 = v68;
        if (v53 >= v23)
        {
          uint64_t v69 = (v53 - v21) >> 3;
          unint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if ((v23 - v21) >> 2 > v70) {
            unint64_t v70 = (v23 - v21) >> 2;
          }
          if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v70;
          }
          if (v71) {
            unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v71);
          }
          else {
            uint64_t v72 = 0;
          }
          unsigned int v73 = (char *)(v71 + 8 * v69);
          uint64_t v23 = (char *)(v71 + 8 * v72);
          *(void *)unsigned int v73 = v6 << 32;
          uint64_t v22 = v73 + 8;
          while (v53 != v21)
          {
            uint64_t v74 = *((void *)v53 - 1);
            v53 -= 8;
            *((void *)v73 - 1) = v74;
            v73 -= 8;
          }
          if (v21) {
            operator delete(v21);
          }
          BOOL v21 = v73;
        }
        else
        {
          *(void *)uint64_t v53 = v6 << 32;
          uint64_t v22 = v53 + 8;
        }
        goto LABEL_165;
      }
    }
    operator delete(v61);
    goto LABEL_105;
  }
LABEL_165:
  __n128 result = v104;
  *a1 = v104;
  a1[1].n128_u64[0] = (unint64_t)v14;
  a1[1].n128_u64[1] = (unint64_t)v21;
  a1[2].n128_u64[0] = (unint64_t)v22;
  a1[2].n128_u64[1] = (unint64_t)v23;
  return result;
}

void sub_192AC8E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13)
{
  __cxa_free_exception(v14);
  if (v13) {
    operator delete(v13);
  }
  if ((void)a13) {
    operator delete((void *)a13);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::supported_by_hw(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v11 = a2;
  unsigned int v7 = *(_DWORD **)a3;
  uint64_t v8 = *(_DWORD **)(a3 + 8);
  while (v7 != v8)
  {
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v7, v11))
    {
LABEL_10:
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
      goto LABEL_11;
    }
    v7 += 8;
  }
  uint64_t v10 = *(_DWORD **)a4;
  uint64_t v9 = *(_DWORD **)(a4 + 8);
  while (v10 != v9)
  {
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v10, v11)) {
      goto LABEL_10;
    }
    v10 += 8;
  }
  *(unsigned char *)a1 = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
LABEL_11:
}

void sub_192AC8FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::vector<__CFString const*>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * v7];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_192AC9098(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECNMSLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 560 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        uint64_t v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 70;
    }
    while (v6 != a2);
  }
}

void sub_192AC9164(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *Espresso::ANECompilerEngine::anonymous namespace'::update_tensor_desc_axes_from_transpose_axes(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  __n128 result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  uint64_t v6 = result[1];
  uint64_t v15 = v6;
  uint64_t v16 = v5;
  uint64_t v7 = result[2];
  uint64_t v8 = result[3];
  uint64_t v13 = v8;
  uint64_t v14 = v7;
  uint64_t v9 = result[4];
  uint64_t v12 = v9;
  if (a2 != a3)
  {
    do
    {
      switch(a2[1])
      {
        case 0:
          uint64_t v10 = &v16;
          break;
        case 1:
          uint64_t v10 = &v12;
          break;
        case 2:
          uint64_t v10 = &v15;
          break;
        case 3:
          uint64_t v10 = &v14;
          break;
        case 4:
          uint64_t v10 = &v13;
          break;
        default:
          uint64_t v10 = 0;
          break;
      }
      id v11 = result + 3;
      switch(*a2)
      {
        case 1:
          id v11 = result + 4;
          break;
        case 2:
          id v11 = result + 1;
          break;
        case 3:
          id v11 = result + 2;
          break;
        case 4:
          break;
        default:
          id v11 = result;
          break;
      }
      *uint64_t v10 = *v11;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v6 = v15;
    uint64_t v4 = v16;
    uint64_t v8 = v13;
    uint64_t v7 = v14;
    uint64_t v9 = v12;
  }
  uint64_t *result = v4;
  result[1] = v6;
  result[2] = v7;
  result[3] = v8;
  result[4] = v9;
  return result;
}

void Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::~mix_non_maximum_suppression_kernel(Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *)((char *)this + 336));
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel *)((char *)this + 336));

  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(this);
}

uint64_t Espresso::pass_reset_pre_ssa::run_on_network@<X0>(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v18 = 0;
  uint64_t v5 = *((void *)a1 + 5) - *((void *)a1 + 4);
  if (v5)
  {
    do
    {
      long long v19 = &v18;
      uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 96, &v18, (uint64_t)&std::piecewise_construct, (uint64_t **)&v19);
      uint64_t v7 = (std::string *)v6[3];
      uint64_t v8 = (std::string *)v6[4];
      while (v7 != v8)
      {
        Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v19, (uint64_t)v7);
        if ((_BYTE)v19)
        {
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)a1 + 23, v7);
          std::string::operator=(v7, &__p);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v7;
      }
      long long v19 = &v18;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, &v18, (uint64_t)&std::piecewise_construct, (uint64_t **)&v19);
      uint64_t v10 = (std::string *)v9[3];
      id v11 = (std::string *)v9[4];
      while (v10 != v11)
      {
        Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v19, (uint64_t)v10);
        if ((_BYTE)v19)
        {
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)a1 + 23, v10);
          std::string::operator=(v10, &__p);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v10;
      }
      ++v18;
      uint64_t v5 = *((void *)a1 + 5) - *((void *)a1 + 4);
    }
    while (v18 < v5 >> 4);
  }
  uint64_t v12 = v5 >> 4;
  if (v5 >> 4)
  {
    uint64_t v13 = 16 * v12 - 16;
    do
    {
      uint64_t v14 = *(void *)(*((void *)a1 + 4) + v13);
      uint64_t v15 = *(const void **)(v14 + 64);
      if (v15
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v14 + 72);
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          nitro::nitro_function::nitro_function(v16);
        }
        Espresso::net::remove_layer(a1, v12 - 1);
      }
      v13 -= 16;
      --v12;
    }
    while (v12);
  }
  uint64_t result = Espresso::net::_tag_inputs_and_outputs(a1);
  *(unsigned char *)a2 = 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return result;
}

void sub_192AC9578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_reset_pre_ssa::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_reset_pre_ssa::~pass_reset_pre_ssa(Espresso::pass_reset_pre_ssa *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::~mix_crop_and_resize_kernel(Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *)((char *)this - 360);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *)((char *)this - 360);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::compile(Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::compile(Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = (const Espresso::net *)*((void *)a2 + 1);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 0;
LABEL_6:
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)a3, (long long **)&v209);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  uint64_t v163 = *((void *)v8 + 5);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v167 = v9;
  unint64_t v191 = 0;
  uint64_t v190 = 0;
  unint64_t v192 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v182, (id *)a3);
  obuint64_t j = (id)objc_opt_new();
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  uint64_t v181 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v179, *((void *)a3 + 6), *((void *)a3 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 7) - *((void *)a3 + 6)) >> 3));
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v180 - v179) >> 3);
  if (v10 == 2)
  {
    v209.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
    unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)v209.__r_.__value_.__l.__data_, (long long **)&v209);
    uint64_t v20 = *((void *)v18 + 5);
    long long v19 = (std::__shared_weak_count *)*((void *)v18 + 6);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v161 = v19;
    v209.__r_.__value_.__r.__words[0] = *((void *)a3 + 6) + 24;
    BOOL v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7 + 136, (unsigned __int8 *)v209.__r_.__value_.__l.__data_, (long long **)&v209);
    uint64_t v23 = *((void *)v21 + 5);
    uint64_t v22 = (std::__shared_weak_count *)*((void *)v21 + 6);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v159 = v22;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::abstract_blob_container::shape(v175, v20);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v195, v7, (const Espresso::layer_shape *)v175, 1);
    if (__p)
    {
      int v177 = __p;
      operator delete(__p);
    }
    if (v6)
    {
      nitro::nitro_function::nitro_function(v6);
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::abstract_blob_container::shape(v171, v23);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v174, v7, (const Espresso::layer_shape *)v171, 1);
    if (v172)
    {
      int v173 = v172;
      operator delete(v172);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    BOOL v24 = HIDWORD(v174[0]) == 5;
    if (v195 == 1 && SLODWORD(v174[0]) >= 2 && HIDWORD(v174[0]) == 4)
    {
      memset(v219, 0, sizeof(v219));
      if (*((char *)a3 + 23) >= 0) {
        size_t v25 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v25 = *((void *)a3 + 1);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v25 + 17);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v25)
      {
        if (*((char *)a3 + 23) >= 0) {
          uint64_t v27 = a3;
        }
        else {
          uint64_t v27 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
        }
        memmove(p_str, v27, v25);
      }
      strcpy((char *)p_str + v25, "@__implicit_batch");
      std::string::operator=((std::string *)v219, &__str);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v209, 1, 1, 1, 1);
      uint64_t v28 = *(std::__shared_weak_count **)&v219[32];
      *(_OWORD *)&v219[24] = *(_OWORD *)&v209.__r_.__value_.__l.__data_;
      if (v28)
      {
        nitro::nitro_function::nitro_function(v28);
        std::string::size_type v29 = *(void *)&v219[24];
      }
      else
      {
        std::string::size_type v29 = v209.__r_.__value_.__r.__words[0];
      }
      **(_DWORD **)(v29 + 24) = 0;
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      uint64_t v34 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &__str, (long long **)&v209);
      std::string::operator=((std::string *)(v34 + 56), (const std::string *)v219);
      uint64_t v36 = *(void *)&v219[24];
      uint64_t v35 = *(void *)&v219[32];
      if (*(void *)&v219[32]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v219[32] + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = (std::__shared_weak_count *)*((void *)v34 + 11);
      *((void *)v34 + 10) = v36;
      *((void *)v34 + 11) = v35;
      if (v37) {
        nitro::nitro_function::nitro_function(v37);
      }
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v209.__r_.__value_.__l.__data_, (id *)a3);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v201, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v201 = __str;
      }
      uint64_t v38 = *((void *)a3 + 6);
      if (*(char *)(v38 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)(v38 + 24), *(void *)(v38 + 32));
      }
      else
      {
        long long v39 = *(_OWORD *)(v38 + 24);
        v202.__r_.__value_.__r.__words[2] = *(void *)(v38 + 40);
        *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v39;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v212, &v201, (long long *)&v203, 2uLL);
      for (uint64_t i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v202.__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(*(void **)((char *)&v201 + i * 8 + 24));
        }
      }
      if (*((char *)a3 + 23) >= 0) {
        size_t v41 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v41 = *((void *)a3 + 1);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v201, v41 + 9);
      if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v42 = &v201;
      }
      else {
        unint64_t v42 = (std::string *)v201.__r_.__value_.__r.__words[0];
      }
      if (v41)
      {
        if (*((char *)a3 + 23) >= 0) {
          uint64_t v43 = a3;
        }
        else {
          uint64_t v43 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
        }
        memmove(v42, v43, v41);
      }
      strcpy((char *)v42 + v41, "@__concat");
      if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v209.__r_.__value_.__l.__data_);
      }
      std::string v209 = v201;
      unint64_t v44 = objc_opt_new();
      BOOL v45 = v216;
      uint64_t v216 = @"Concat";

      [v44 setObject:@"Channel" forKeyedSubscript:@"Dimension"];
      LODWORD(v218) = 5;
      objc_storeStrong(&v217, v44);
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v209);
      std::string::operator=((std::string *)(v185[0] + 24), &v209);

      if (v214 < 0) {
        operator delete(v213);
      }
      v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
      v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
      if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v209.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (*(void *)&v219[32]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v219[32]);
      }
      if ((v219[23] & 0x80000000) != 0) {
        operator delete(*(void **)v219);
      }
      BOOL v24 = 1;
    }
    uint64_t v46 = v188;
    uint64_t v188 = @"CropResize";

    uint64_t v47 = [NSNumber numberWithInt:*((unsigned int *)this + 72)];
    [obj setObject:v47 forKeyedSubscript:@"OutputHeight"];

    unint64_t v48 = [NSNumber numberWithInt:*((unsigned int *)this + 71)];
    [obj setObject:v48 forKeyedSubscript:@"OutputWidth"];

    objc_msgSend(obj, "setObject:forKeyedSubscript:", get_crop_resize_mode_string(*((_DWORD *)this + 76), v24), @"CoordinateMode");
    int v49 = *((unsigned __int8 *)this + 296);
    id v50 = obj;
    int v51 = objc_opt_new();
    [v51 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
    if (v49)
    {
      [v51 setObject:@"NormalizedReflect" forKeyedSubscript:@"CoordinateMode"];
      uint64_t v52 = @"CoordinateRange";
      uint64_t v53 = @"RangeZeroToOne";
    }
    else
    {
      uint64_t v52 = @"CoordinateMode";
      uint64_t v53 = @"NonNormalized";
    }
    [v51 setObject:v53 forKeyedSubscript:v52];
    uint64_t v54 = objc_opt_new();
    [v54 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
    if (v49)
    {
      [v54 setObject:@"NormalizedReflect" forKeyedSubscript:@"CoordinateMode"];
      unint64_t v55 = @"CoordinateRange";
      unint64_t v56 = @"RangeZeroToOne";
    }
    else
    {
      unint64_t v55 = @"CoordinateMode";
      unint64_t v56 = @"NonNormalized";
    }
    [v54 setObject:v56 forKeyedSubscript:v55];
    v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    v209.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
    uint64_t v57 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v209 count:2];
    [v50 setObject:v57 forKeyedSubscript:@"CoordinateInfo"];

    long long v58 = *(_OWORD *)((char *)this + 328);
    v169[2] = *(_OWORD *)((char *)this + 312);
    v169[3] = v58;
    v169[4] = *(_OWORD *)((char *)this + 344);
    long long v59 = *(_OWORD *)((char *)this + 296);
    v169[0] = *(_OWORD *)((char *)this + 280);
    v169[1] = v59;
    set_sampling_info(v50, (uint64_t)v169);
    id v60 = v50;
    long long v61 = objc_opt_new();
    [v61 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
    [v61 setObject:@"Replication" forKeyedSubscript:@"PaddingMode"];
    uint64_t v62 = objc_opt_new();
    [v62 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
    [v62 setObject:@"Replication" forKeyedSubscript:@"PaddingMode"];
    v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    v209.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
    unint64_t v63 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v209 count:2];
    [v60 setObject:v63 forKeyedSubscript:@"PaddingInfo"];
    unint64_t v64 = [NSNumber numberWithShort:0];
    [v60 setObject:v64 forKeyedSubscript:@"BackgroundValue"];

    objc_storeStrong(v189, obj);
    uint64_t v65 = v191;
    if ((unint64_t)v191 >= v192)
    {
      unint64_t v67 = 0x8E38E38E38E38E39 * (((uint64_t)v191 - v190) >> 4);
      if (v67 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v68 = 0x1C71C71C71C71C72 * ((uint64_t)(v192 - v190) >> 4);
      if (v68 <= v67 + 1) {
        unint64_t v68 = v67 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v192 - v190) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v69 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v69 = v68;
      }
      uint64_t v211 = &v192;
      if (v69) {
        unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v69);
      }
      else {
        uint64_t v70 = 0;
      }
      v209.__r_.__value_.__r.__words[0] = v69;
      v209.__r_.__value_.__l.__size_ = v69 + 144 * v67;
      v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__l.__size_;
      unint64_t v210 = v69 + 144 * v70;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v209.__r_.__value_.__l.__size_, (uint64_t)v182);
      v209.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v190, &v209);
      uint64_t v66 = v191;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v209);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v191, (uint64_t)v182);
      uint64_t v66 = v65 + 6;
    }
    unint64_t v191 = v66;
    if (v159) {
      nitro::nitro_function::nitro_function(v159);
    }
    if (v161) {
      nitro::nitro_function::nitro_function(v161);
    }
  }
  else
  {
    if (v10 != 1) {
      Espresso::throw_exception_selector<Espresso::generic_error>("crop_and_resize_kernel: can only take input size of either 1 or 2.");
    }
    id v11 = v188;
    uint64_t v188 = @"Resize";

    uint64_t v12 = [NSNumber numberWithInt:*((unsigned int *)this + 72)];
    [obj setObject:v12 forKeyedSubscript:@"OutputHeight"];

    uint64_t v13 = [NSNumber numberWithInt:*((unsigned int *)this + 71)];
    [obj setObject:v13 forKeyedSubscript:@"OutputWidth"];

    long long v14 = *(_OWORD *)((char *)this + 328);
    v178[2] = *(_OWORD *)((char *)this + 312);
    v178[3] = v14;
    v178[4] = *(_OWORD *)((char *)this + 344);
    long long v15 = *(_OWORD *)((char *)this + 296);
    v178[0] = *(_OWORD *)((char *)this + 280);
    v178[1] = v15;
    set_sampling_info(obj, (uint64_t)v178);
    objc_storeStrong(v189, obj);
    uint64_t v16 = v191;
    if ((unint64_t)v191 >= v192)
    {
      unint64_t v30 = 0x8E38E38E38E38E39 * (((uint64_t)v191 - v190) >> 4);
      if (v30 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v31 = 0x1C71C71C71C71C72 * ((uint64_t)(v192 - v190) >> 4);
      if (v31 <= v30 + 1) {
        unint64_t v31 = v30 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v192 - v190) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v32 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v32 = v31;
      }
      uint64_t v211 = &v192;
      if (v32) {
        unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v32);
      }
      else {
        uint64_t v33 = 0;
      }
      v209.__r_.__value_.__r.__words[0] = v32;
      v209.__r_.__value_.__l.__size_ = v32 + 144 * v30;
      v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__l.__size_;
      unint64_t v210 = v32 + 144 * v33;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v209.__r_.__value_.__l.__size_, (uint64_t)v182);
      v209.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v190, &v209);
      uint64_t v17 = v191;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v209);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v191, (uint64_t)v182);
      uint64_t v17 = v16 + 6;
    }
    unint64_t v191 = v17;
  }
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v167) {
    atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v209);
  id v217 = 0;
  uint64_t v216 = 0;
  uint64_t v218 = 0x100000000;
  uint64_t v71 = *((void *)this + 53);
  uint64_t v72 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v72) {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v71 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 45) + 104))() + 40))
  {
    float v73 = *(float *)(v163 + 112);
    v174[0] = v71;
    v174[1] = v72;
    if (v72) {
      atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v74 = (std::__shared_weak_count *)*((void *)this + 56);
    __str.__r_.__value_.__r.__words[0] = *((void *)this + 55);
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
    if (v74) {
      atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v174, (uint64_t *)&__str, (uint64_t)&v195, v73);
    if (v74) {
      nitro::nitro_function::nitro_function(v74);
    }
    if (v72) {
      nitro::nitro_function::nitro_function(v72);
    }
    uint64_t v75 = *(unsigned int *)(v71 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v193, 2 * v75, 1, 1, 1);
    uint64_t v76 = (int)v75;
    uint64_t v77 = *((void *)this + 55);
    int v78 = v75;
    if (v77) {
      int v78 = *(_DWORD *)(v77 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(v219, 4 * v75);
      std::string v130 = *(int **)(*(void *)v219 + 16);
      int v166 = v75 - 1;
      if ((int)v75 >= 1)
      {
        for (uint64_t j = 0; j != v75; ++j)
        {
          float v132 = *(float *)(*(void *)(v71 + 16) + j * 4);
          *(float *)&int v133 = ldexp(1.0, -v199) * v132;
          v130[j] = v133;
        }
      }
      if (v75)
      {
        char v134 = *(_WORD **)(v193 + 16);
        do
        {
          int v135 = *v130++;
          _S0 = v135;
          __asm { FCVT            H0, S0 }
          *v134++ = _S0;
          --v76;
        }
        while (v76);
      }
      if (*((void *)this + 55))
      {
        Espresso::blob<unsigned char,1>::make(&v201, 4 * v78);
        long long v138 = *(_OWORD *)&v201.__r_.__value_.__l.__data_;
        Espresso::blob<unsigned char,1>::make(&v201, 2 * v78);
        std::string::size_type v158 = v201.__r_.__value_.__r.__words[0];
        std::string v139 = *(int **)(v138 + 16);
        if (v78 >= 1)
        {
          for (uint64_t k = 0; k != v78; ++k)
          {
            int v141 = v166;
            if (v166 >= (int)k) {
              int v141 = k;
            }
            *(float *)&int v142 = *(float *)(*(void *)(v197 + 16) + 4 * k)
                            * *(float *)(*(void *)(v195 + 16) + 4 * v141);
            v139[k] = v142;
            unsigned int v143 = v200;
            unsigned int v144 = v199;
            *(float *)&int v145 = ldexp(1.0, v200 - v199) * *(float *)&v142;
            v139[k] = v145;
            float v148 = ldexp(1.0, v144 - v143) * *(float *)&v145;
            if (v148 < -127.0 || v148 > 255.0)
            {
              uint64_t v150 = Espresso::espresso_os_log_subsystem(v146, v147);
              if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
              {
                double v151 = *(float *)&v139[k];
                LODWORD(v201.__r_.__value_.__l.__data_) = 134218752;
                *(double *)((char *)v201.__r_.__value_.__r.__words + 4) = v148;
                WORD2(v201.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v201.__r_.__value_.__r.__words[1] + 6) = v200;
                WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v201.__r_.__value_.__r.__words[2]) = v199;
                LOWORD(v202.__r_.__value_.__l.__data_) = 2048;
                *(double *)((char *)v202.__r_.__value_.__r.__words + 2) = v151;
                _os_log_error_impl(&dword_1920CB000, v150, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", (uint8_t *)&v201, 0x22u);
              }
            }
          }
        }
        if (v78)
        {
          uint64_t v152 = v78;
          unint64_t v153 = *(_WORD **)(v158 + 16);
          do
          {
            int v154 = *v139++;
            _S0 = v154;
            __asm { FCVT            H0, S0 }
            *v153++ = _S0;
            --v152;
          }
          while (v152);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v79 = v200;
    uint64_t v80 = v193;
    if (v75)
    {
      __n128 v81 = *(int **)(v195 + 16);
      BOOL v82 = *(_WORD **)(v193 + 16);
      do
      {
        int v83 = *v81++;
        _S0 = v83;
        __asm { FCVT            H0, S0 }
        *v82++ = _S0;
        --v76;
      }
      while (v76);
    }
    unsigned int v156 = v79;
    if (v77)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v201, 2 * v78, 1, 1, 1);
      size_t size = (std::__shared_weak_count *)v201.__r_.__value_.__l.__size_;
      std::string::size_type v157 = v201.__r_.__value_.__r.__words[0];
      if (v78)
      {
        uint64_t v89 = v78;
        uint64_t v90 = *(_WORD **)(v201.__r_.__value_.__r.__words[0] + 16);
        unint64_t v91 = *(int **)(v197 + 16);
        do
        {
          int v92 = *v91++;
          _S0 = v92;
          __asm { FCVT            H0, S0 }
          *v90++ = _S0;
          --v89;
        }
        while (v89);
      }
    }
    else
    {
      size_t size = 0;
      std::string::size_type v157 = 0;
    }
    int v160 = *((unsigned __int8 *)a2 + 552);
    uint64_t v94 = (Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128);
    uint64_t v95 = v194;
    if (v194) {
      atomic_fetch_add_explicit(&v194->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v96 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v94, *(const unsigned __int8 **)(v80 + 16), *(int *)(v80 + 8));
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    uint64_t v164 = objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v97 = *(id *)(v190 + 128);

      uint64_t v164 = v97;
    }
    std::string v98 = objc_opt_new();
    uint64_t v99 = [NSNumber numberWithInt:v75];
    [v98 setObject:v99 forKeyedSubscript:@"ScaleCount"];

    uint64_t v100 = [NSNumber numberWithInt:v96];
    [v98 setObject:v100 forKeyedSubscript:@"ScaleOffset"];

    std::string v101 = NSNumber;
    if (v160) {
      uint64_t weights_file_index = 0;
    }
    else {
    uint64_t v103 = [v101 numberWithUnsignedLong:weights_file_index];
    }
    [v98 setObject:v103 forKeyedSubscript:@"ScaleIndex"];

    [v98 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    __n128 v104 = [NSNumber numberWithInt:v199];
    [v164 setObject:v104 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 55))
    {
      if (size) {
        atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v105 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v94, *(const unsigned __int8 **)(v157 + 16), *(int *)(v157 + 8));
      if (size) {
        nitro::nitro_function::nitro_function(size);
      }
      char v106 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 55) + 8)];
      [v98 setObject:v106 forKeyedSubscript:@"BiasCount"];

      id v107 = [NSNumber numberWithInt:v105];
      [v98 setObject:v107 forKeyedSubscript:@"BiasOffset"];

      id v108 = NSNumber;
      if (v160) {
        uint64_t v109 = 0;
      }
      else {
      std::string v110 = [v108 numberWithUnsignedLong:v109];
      }
      [v98 setObject:v110 forKeyedSubscript:@"BiasIndex"];

      [v98 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      char v111 = [NSNumber numberWithInt:v156];
      [v164 setObject:v111 forKeyedSubscript:@"BiasShift"];
    }
    [v164 setObject:v98 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v201.__r_.__value_.__l.__data_, (id *)a3);
    uint64_t v112 = v191;
    if (v191 == (std::string *)v190) {
      goto LABEL_184;
    }
    uint64_t v113 = v191 - 6;
    uint64_t v114 = HIBYTE(v191[-6].__r_.__value_.__r.__words[2]);
    char v115 = v114;
    std::string::size_type v116 = v191[-6].__r_.__value_.__l.__size_;
    if ((v114 & 0x80u) == 0) {
      std::string::size_type v117 = HIBYTE(v191[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v117 = v191[-6].__r_.__value_.__l.__size_;
    }
    std::string::size_type v118 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
    if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v118 = v201.__r_.__value_.__l.__size_;
    }
    if (v117 != v118) {
      goto LABEL_178;
    }
    if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v119 = &v201;
    }
    else {
      uint64_t v119 = (std::string *)v201.__r_.__value_.__r.__words[0];
    }
    if ((char)v114 < 0)
    {
      std::string::pointer data = (const std::string::value_type *)v113->__r_.__value_.__r.__words[0];
      if (memcmp(v113->__r_.__value_.__l.__data_, v119, v191[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_181;
      }
    }
    else if ((_BYTE)v114)
    {
      uint64_t v120 = v191 - 6;
      while (v120->__r_.__value_.__s.__data_[0] == v119->__r_.__value_.__s.__data_[0])
      {
        uint64_t v120 = (std::string *)((char *)v120 + 1);
        uint64_t v119 = (std::string *)((char *)v119 + 1);
        if (!--v114) {
          goto LABEL_177;
        }
      }
      goto LABEL_178;
    }
LABEL_177:
    std::string::append(v112 - 6, "__@pre_scale_bias");
    char v115 = HIBYTE(v112[-6].__r_.__value_.__r.__words[2]);
LABEL_178:
    if ((v115 & 0x80) == 0)
    {
      long long v122 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
      *(void *)&v219[16] = *((void *)&v112[-6].__r_.__value_.__l + 2);
      *(_OWORD *)std::string::size_type v219 = v122;
      goto LABEL_182;
    }
    std::string::pointer data = v112[-6].__r_.__value_.__l.__data_;
    std::string::size_type v116 = v112[-6].__r_.__value_.__l.__size_;
LABEL_181:
    std::string::__init_copy_ctor_external((std::string *)v219, data, v116);
LABEL_182:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v203, (std::string *)v219, (long long *)&v219[24], 1uLL);
    if ((v219[23] & 0x80000000) != 0) {
      operator delete(*(void **)v219);
    }
LABEL_184:
    unint64_t v123 = v207;
    uint64_t v207 = @"GOC";

    objc_storeStrong(&v208, v164);
    if (!*((unsigned char *)a2 + 121))
    {
      uint64_t v124 = v191;
      if ((unint64_t)v191 >= v192)
      {
        unint64_t v126 = 0x8E38E38E38E38E39 * (((uint64_t)v191 - v190) >> 4);
        if (v126 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v127 = 0x1C71C71C71C71C72 * ((uint64_t)(v192 - v190) >> 4);
        if (v127 <= v126 + 1) {
          unint64_t v127 = v126 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v192 - v190) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v128 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v128 = v127;
        }
        *(void *)&v219[32] = &v192;
        if (v128) {
          unint64_t v128 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v128);
        }
        else {
          uint64_t v129 = 0;
        }
        *(void *)std::string::size_type v219 = v128;
        *(void *)&v219[8] = v128 + 144 * v126;
        *(void *)&v219[16] = *(void *)&v219[8];
        *(void *)&v219[24] = v128 + 144 * v129;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&v219[8], (uint64_t)&v201);
        *(void *)&v219[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v190, v219);
        char v125 = v191;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)v219);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v191, (uint64_t)&v201);
        char v125 = v124 + 6;
      }
      unint64_t v191 = v125;
    }

    if (v205 < 0) {
      operator delete(v204);
    }
    *(void *)std::string::size_type v219 = &v203;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v219);
    *(void *)std::string::size_type v219 = &v202;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v219);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v201.__r_.__value_.__l.__data_);
    }

    if (size) {
      nitro::nitro_function::nitro_function(size);
    }
    if (v194) {
      nitro::nitro_function::nitro_function(v194);
    }
    if (v198) {
      nitro::nitro_function::nitro_function(v198);
    }
    if (v196) {
      nitro::nitro_function::nitro_function(v196);
    }
  }
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }

  if (v214 < 0) {
    operator delete(v213);
  }
  v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
  v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&v210;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  if (v167) {
    nitro::nitro_function::nitro_function(v167);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 45) + 32))((char *)this + 360, a2, &v190);
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v179;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);

  if (v186 < 0) {
    operator delete((void *)v185[4]);
  }
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
  if (v183 < 0) {
    operator delete(v182[0]);
  }
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
  if (v167) {
    nitro::nitro_function::nitro_function(v167);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192ACAD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
  STACK[0x2B0] = (unint64_t)&a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B0]);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a67);
  STACK[0x2B0] = (unint64_t)&STACK[0x260];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B0]);
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
  _Unwind_Resume(a1);
}

void set_sampling_info(void *a1, uint64_t a2)
{
  void v13[2] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = objc_opt_new();
  [v4 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  [v4 setObject:@"Linear" forKeyedSubscript:@"SamplingMethod"];
  uint64_t v5 = objc_opt_new();
  [v5 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  [v5 setObject:@"Linear" forKeyedSubscript:@"SamplingMethod"];
  v13[0] = v4;
  v13[1] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:2];
  [v3 setObject:v6 forKeyedSubscript:@"SamplingMethodInfo"];

  uint64_t v7 = objc_opt_new();
  [v7 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  uint64_t v8 = objc_opt_new();
  [v8 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  uint64_t v9 = *(unsigned int *)(a2 + 20);
  if (v9 >= 5) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unrecognized grid sampling mode");
  }
  unint64_t v10 = off_1E5747748[v9];
  [v7 setObject:v10 forKeyedSubscript:@"SamplingGridMode"];
  [v8 setObject:v10 forKeyedSubscript:@"SamplingGridMode"];
  v12[0] = v7;
  v12[1] = v8;
  id v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:2];
  [v3 setObject:v11 forKeyedSubscript:@"SamplingGridInfo"];
}

void sub_192ACB398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *get_crop_resize_mode_string(unsigned int a1, int a2)
{
  if (!a2)
  {
    if (a1 < 4)
    {
      uint64_t v2 = off_1E5747728;
      return v2[a1];
    }
LABEL_7:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unrecognized crop index mode");
  }
  if (a1 >= 4) {
    goto LABEL_7;
  }
  uint64_t v2 = off_1E5747708;
  return v2[a1];
}

BOOL Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, long long **a3)
{
  uint64_t v6 = a3[6];
  int v172 = 0;
  int v173 = 0;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7 && (int v173 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v8 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((void *)v6 + 9);
    int v172 = v8;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  if (!Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v9, v10)
    || (char *)a3[1] - (char *)*a3 == 64)
  {
    id v11 = v173;
    if (v173) {
      atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = a3[3];
    uint64_t v13 = *((void *)v12 + 4);
    long long v14 = v12[1];
    v165[0] = *v12;
    v165[1] = v14;
    uint64_t v166 = v13;
    int v167 = 0;
    unsigned int v168 = 0;
    uint64_t v169 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v167, *((const void **)v12 + 5), *((void *)v12 + 6), (uint64_t)(*((void *)v12 + 6) - *((void *)v12 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v170, v8, (const Espresso::layer_shape *)v165, 1);
    if (v167)
    {
      unsigned int v168 = v167;
      operator delete(v167);
    }
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v15 = *a3;
    uint64_t v16 = *((void *)*a3 + 4);
    long long v17 = (*a3)[1];
    v154[0] = **a3;
    v154[1] = v17;
    uint64_t v155 = v16;
    std::string __p = 0;
    uint64_t v158 = 0;
    std::string::size_type v157 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v15 + 5), *((void *)v15 + 6), (uint64_t)(*((void *)v15 + 6) - *((void *)v15 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v159, v8, (const Espresso::layer_shape *)v154, 1);
    if (__p)
    {
      std::string::size_type v157 = __p;
      operator delete(__p);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    id v18 = v9;
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v159, v18))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v170, v18))
      {
        char v151 = 1;
        std::string::basic_string[abi:ne180100]<0>(v152, "Success");
      }
      else
      {
        char v151 = 0;
        std::string::basic_string[abi:ne180100]<0>(v152, "crop_and_resize_kernel: output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      char v151 = 0;
      std::string::basic_string[abi:ne180100]<0>(v152, "crop_and_resize_kernel: input blob dimensions exceed ANE limit.");
    }

    if (!v151)
    {
      BOOL v24 = *a2;
      uint64_t v23 = a2[1];
      v150[0] = v24;
      v150[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)v152, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v150, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
      if (v103) {
        nitro::nitro_function::nitro_function(v103);
      }
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_55;
      }
      size_t v25 = (void *)v100.__r_.__value_.__r.__words[0];
      goto LABEL_54;
    }
    if (*(float *)(a1 + 308) != 1.0)
    {
      uint64_t v22 = *a2;
      uint64_t v23 = a2[1];
      v149[0] = v22;
      v149[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: only spatial scale == 1.0 is supported");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v149, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
LABEL_48:
      if (v103) {
        nitro::nitro_function::nitro_function(v103);
      }
      uint64_t v96 = (__CFString *)v102;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      uint64_t v96 = (__CFString *)v101;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      goto LABEL_52;
    }
    if (*(unsigned char *)(a1 + 312))
    {
      long long v26 = *a2;
      uint64_t v23 = a2[1];
      v148[0] = v26;
      v148[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: position sensitive is not supported");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v148, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
      goto LABEL_48;
    }
    uint64_t v28 = *a3;
    uint64_t v29 = ((char *)a3[1] - (char *)*a3) >> 6;
    if (v29 == 2)
    {
      if (*(_DWORD *)(a1 + 304) >= 2u)
      {
        uint64_t v37 = *a2;
        uint64_t v23 = a2[1];
        v131[0] = v37;
        v131[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: CENTER_SIZE modes achieve less PSNR ranging between 30 and 60 than CORNER modes. Falling back as a precaution.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v131, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
      }
      else if (*(_DWORD *)(a1 + 300))
      {
        uint64_t v35 = *a2;
        uint64_t v23 = a2[1];
        v130[0] = v35;
        v130[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: have not tested and enabled other sampling modes than TF_CROP_RESIZE");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v130, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
      }
      else
      {
        if (v11)
        {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v28 = *a3;
        }
        long long v47 = v28[5];
        v119[0] = v28[4];
        v119[1] = v47;
        unint64_t v48 = (const void *)*((void *)v28 + 13);
        uint64_t v120 = *((void *)v28 + 12);
        unint64_t v121 = 0;
        uint64_t v123 = 0;
        long long v122 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v121, v48, *((void *)v28 + 14), (uint64_t)(*((void *)v28 + 14) - (void)v48) >> 2);
        Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v124, v8, (const Espresso::layer_shape *)v119, 1);
        if (v121)
        {
          long long v122 = v121;
          operator delete(v121);
        }
        if (v11) {
          nitro::nitro_function::nitro_function(v11);
        }
        uint64_t v49 = v161;
        BOOL v51 = v159 <= 1 && v161 <= 1 && v160 <= 1;
        if (v51 || v164)
        {
          if (v129)
          {
            int v53 = v125;
            BOOL v56 = v159 == 1 && v124 > 1 && v125 == 4;
            int v57 = v125 == 5 || v56;
            uint64_t v58 = *(unsigned int *)(a1 + 300);
            if (v58 < 5)
            {
              uint64_t v82 = v124;
              long long v59 = off_1E5747748[v58];
              Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v114, (NSString *)(a1 + 360), v18);
              ANECCropResizeLayerDescInitialize();
              crop_resize_mode_string = get_crop_resize_mode_string(*(_DWORD *)(a1 + 304), v57);
              uint64_t v113 = *(void *)(a1 + 284);
              int v112 = 0;
              v100.__r_.__value_.__r.__words[0] = (std::string::size_type)crop_resize_mode_string;
              v100.__r_.__value_.__l.__size_ = (std::string::size_type)@"Height";
              v100.__r_.__value_.__r.__words[2] = (std::string::size_type)v59;
              v101[0] = @"Width";
              v101[1] = v59;
              v101[2] = @"Height";
              v102[0] = @"Linear";
              v102[1] = @"Width";
              void v102[2] = @"Linear";
              v102[3] = @"Height";
              uint64_t v103 = (std::__shared_weak_count *)@"Replication";
              __n128 v104 = @"Width";
              uint64_t v105 = @"Replication";
              char v106 = @"Height";
              uint64_t v109 = @"Width";
              if (*(unsigned char *)(a1 + 296))
              {
                id v107 = @"RangeZeroToOne";
                std::string v110 = @"RangeZeroToOne";
                long long v61 = @"NormalizedReflect";
              }
              else
              {
                long long v61 = @"NonNormalized";
              }
              id v108 = v61;
              char v111 = v61;
              ANECTensorDescInitialize();
              ANECTensorDescInitialize();
              unint64_t v64 = v172;
              unsigned int v65 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v172, 0);
              unsigned int v66 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v64, (const Espresso::net *)1);
              if (v65 <= 7 && ((0x97u >> v65) & 1) != 0)
              {
                unint64_t v67 = off_1E5747770[v65];
                char v68 = 1;
              }
              else
              {
                unint64_t v67 = 0;
                char v68 = 0;
              }
              if (v66 <= 7 && ((0x97u >> v66) & 1) != 0 && (v68 & 1) != 0)
              {
                unint64_t v69 = (int64x2_t *)off_1E5747770[v66];
                if (v56)
                {
                  int v53 = 5;
                  int v125 = 5;
                }
                *(void *)&long long v70 = v162;
                *((void *)&v70 + 1) = v163;
                long long v98 = v70;
                uint64_t v96 = v67;
                uint64_t v99 = v49;
                *(void *)&long long v70 = v159;
                *((void *)&v70 + 1) = v160;
                long long v97 = v70;
                *(void *)&long long v70 = v127;
                *((void *)&v70 + 1) = v128;
                long long v94 = v70;
                uint64_t v95 = v126;
                v91[2] = v69;
                uint64_t v92 = v82;
                uint64_t v93 = v53;
                if (v126 >= 2)
                {
                  uint64_t v71 = a3[6];
                  uint64_t v72 = *(void *)(*(void *)v71 + 224 * (void)a3[9] + 136);
                  if (*(char *)(v72 + 47) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)(v72 + 24), *(void *)(v72 + 32));
                    uint64_t v71 = a3[6];
                  }
                  else
                  {
                    std::string v90 = *(std::string *)(v72 + 24);
                  }
                  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
                  uint64_t v75 = *(void *)a3[6]
                      + 224
                      * std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v71 + 24, &v90, (long long **)&v85)[7];
                  if (*(char *)(v75 + 71) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v75 + 48), *(void *)(v75 + 56));
                  }
                  else
                  {
                    long long v76 = *(_OWORD *)(v75 + 48);
                    v85.__r_.__value_.__r.__words[2] = *(void *)(v75 + 64);
                    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v76;
                  }
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v85, "load_constant"))
                  {
                    uint64_t v92 = v95;
                    uint64_t v95 = 1;
                  }
                  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v85.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v90.__r_.__value_.__l.__data_);
                  }
                }
                uint64_t v88 = 0;
                uint64_t v89 = 0;
                int v77 = ANECValidateCropResizeLayer();
                BOOL v21 = v77 == 0;
                if (v77)
                {
                  int v78 = a2[1];
                  v87[0] = *a2;
                  v87[1] = v78;
                  if (v78) {
                    atomic_fetch_add_explicit(&v78->i64[1], 1uLL, memory_order_relaxed);
                  }
                  std::to_string(&v86, v77);
                  unsigned int v79 = std::string::insert(&v86, 0, "crop_and_resize_kernel: ANECValidateCropResizeLayer failed with status ");
                  std::string v85 = *v79;
                  v79->__r_.__value_.__l.__size_ = 0;
                  v79->__r_.__value_.__r.__words[2] = 0;
                  v79->__r_.__value_.__r.__words[0] = 0;
                  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v90, (long long *)&v85, (uint64_t)a3, 0);
                  Espresso::emit_kernel_validation_warning(v87, (Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
                  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
                  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v85.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v86.__r_.__value_.__l.__data_);
                  }
                  if (v78) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v78);
                  }
                  Espresso::ANECompilerEngine::violations_from_alternates<ANECCropResizeLayerDescAlternate>((uint64_t)&v85, v88, v89);
                  uint64_t v80 = (uint64_t **)v85.__r_.__value_.__r.__words[2];
                  if (v85.__r_.__value_.__r.__words[2])
                  {
                    do
                    {
                      __n128 v81 = a2[1];
                      v84[0] = *a2;
                      v84[1] = v81;
                      if (v81) {
                        atomic_fetch_add_explicit(&v81->i64[1], 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v86, (char *)[v80[2] UTF8String]);
                      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v90, (long long *)&v86, (uint64_t)a3, 0);
                      Espresso::emit_kernel_validation_warning(v84, (Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
                      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
                      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v86.__r_.__value_.__l.__data_);
                      }
                      if (v81) {
                        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v81);
                      }
                      uint64_t v80 = (uint64_t **)*v80;
                    }
                    while (v80);
                  }
                  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v85);
                }
              }
              else
              {
                float v73 = *a2;
                uint64_t v74 = a2[1];
                v91[0] = v73;
                v91[1] = v74;
                if (v74) {
                  atomic_fetch_add_explicit(&v74->i64[1], 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v85, "crop_and_resize_kernel: ANECValidateCropResizeLayer invalid compute path.");
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v90, (long long *)&v85, (uint64_t)a3, 0);
                Espresso::emit_kernel_validation_warning(v91, (Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
                Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
                if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v85.__r_.__value_.__l.__data_);
                }
                if (v74) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v74);
                }
                BOOL v21 = 0;
              }
              if (v115) {
                nitro::nitro_function::nitro_function(v115);
              }
              goto LABEL_58;
            }
            unint64_t v63 = *a2;
            uint64_t v23 = a2[1];
            v116[0] = v63;
            v116[1] = v23;
            if (v23) {
              atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: crop resize unsupported sampling grid.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v116, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
          }
          else
          {
            uint64_t v62 = *a2;
            uint64_t v23 = a2[1];
            v117[0] = v62;
            v117[1] = v23;
            if (v23) {
              atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: unimplemented bottom 1 layout NCDHW for crop and resize. Transposes required to match ANE expectations");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v117, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
          }
        }
        else
        {
          uint64_t v52 = *a2;
          uint64_t v23 = a2[1];
          v118[0] = v52;
          v118[1] = v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: unimplemented bottom 0 layout NCDHW for crop and resize. Transposes required to match ANE expectations");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v118, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
        }
      }
    }
    else
    {
      if (v29 != 1)
      {
        uint64_t v36 = *a2;
        uint64_t v23 = a2[1];
        v83[0] = v36;
        v83[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: unsupported bottom count.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
        goto LABEL_48;
      }
      long long v30 = v28[1];
      uint64_t v31 = *((void *)v28 + 4);
      v143[0] = *v28;
      v143[1] = v30;
      uint64_t v144 = v31;
      int v145 = 0;
      uint64_t v147 = 0;
      char v146 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v145, *((const void **)v28 + 5), *((void *)v28 + 6), (uint64_t)(*((void *)v28 + 6) - *((void *)v28 + 5)) >> 2);
      uint64_t v32 = *(void *)a3[6] + 224 * (void)a3[9];
      uint64_t v33 = *(void *)(v32 + 136);
      if (*(void *)(v32 + 144) == v33) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      BOOL v34 = Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::single_input_mode_supported_by_anec(a1, (uint64_t)v8, (uint64_t)v143, v33);
      if (v145)
      {
        char v146 = v145;
        operator delete(v145);
      }
      if (v34)
      {
LABEL_69:
        BOOL v21 = 1;
LABEL_58:
        if (v153 < 0) {
          operator delete(v152[0]);
        }
        goto LABEL_60;
      }
      uint64_t v38 = *a3;
      uint64_t v39 = *((void *)*a3 + 4);
      long long v40 = (*a3)[1];
      v138[0] = **a3;
      v138[1] = v40;
      uint64_t v139 = v39;
      uint64_t v140 = 0;
      uint64_t v142 = 0;
      int v141 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v140, *((const void **)v38 + 5), *((void *)v38 + 6), (uint64_t)(*((void *)v38 + 6) - *((void *)v38 + 5)) >> 2);
      size_t v41 = a3[3];
      uint64_t v42 = *((void *)v41 + 4);
      long long v43 = v41[1];
      v133[0] = *v41;
      v133[1] = v43;
      uint64_t v134 = v42;
      int v135 = 0;
      uint64_t v137 = 0;
      unsigned int v136 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v135, *((const void **)v41 + 5), *((void *)v41 + 6), (uint64_t)(*((void *)v41 + 6) - *((void *)v41 + 5)) >> 2);
      if (Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::should_use_workaround(a1, (uint64_t)&v172, v138, v133))
      {
        char is_mix = Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v18, v44);
        if (v135)
        {
          unsigned int v136 = v135;
          operator delete(v135);
        }
        if (v140)
        {
          int v141 = v140;
          operator delete(v140);
        }
        if ((is_mix & 1) == 0) {
          goto LABEL_69;
        }
      }
      else
      {
        if (v135)
        {
          unsigned int v136 = v135;
          operator delete(v135);
        }
        if (v140)
        {
          int v141 = v140;
          operator delete(v140);
        }
      }
      uint64_t v46 = *a2;
      uint64_t v23 = a2[1];
      v132[0] = v46;
      v132[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: ANECValidateResizeLayer failed");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v132, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
LABEL_52:
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      if (v23) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v23);
      }
      BOOL v21 = 0;
      goto LABEL_58;
    }
    size_t v25 = (void *)v90.__r_.__value_.__r.__words[0];
LABEL_54:
    operator delete(v25);
    goto LABEL_55;
  }
  long long v19 = *a2;
  uint64_t v20 = a2[1];
  v171[0] = v19;
  v171[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v90, "crop_and_resize_kernel: not enabled on requested architecture.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v100, (long long *)&v90, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v171, (Espresso::base_kernel::validate_for_engine_warning_t *)&v100);
  if (v103) {
    nitro::nitro_function::nitro_function(v103);
  }
  uint64_t v96 = (__CFString *)v102;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  uint64_t v96 = (__CFString *)v101;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (v20) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v20);
  }
  BOOL v21 = 0;
LABEL_60:

  if (v173) {
    nitro::nitro_function::nitro_function(v173);
  }
  return v21;
}

void sub_192ACC1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (STACK[0x248]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x41F]) < 0) {
    operator delete((void *)STACK[0x408]);
  }

  uint64_t v35 = *(std::__shared_weak_count **)(v33 - 104);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::single_input_mode_supported_by_anec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v41, *(void *)a2, *(std::__shared_weak_count **)(a2 + 8));
  long long v8 = *(_OWORD *)(a3 + 16);
  v36[0] = *(_OWORD *)a3;
  v36[1] = v8;
  uint64_t v9 = *(const void **)(a3 + 40);
  uint64_t v37 = *(void *)(a3 + 32);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v38, v9, *(void *)(a3 + 48), (uint64_t)(*(void *)(a3 + 48) - (void)v9) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v43, v41, (const Espresso::layer_shape *)v36, 1);
  if (v38)
  {
    uint64_t v39 = v38;
    operator delete(v38);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  unint64_t v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(a2 + 472);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v34, (NSString *)(a1 + 360), v10);
  ANECResizeLayerDescInitialize();
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  ANECTensorDescInitialize();
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a2 + 360), &__p))
  {
    unsigned int v11 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at(a2 + 352, &__p) + 8);
    if (v11 == -1) {
      unsigned int v12 = 1;
    }
    else {
      unsigned int v12 = v11;
    }
  }
  else
  {
    unsigned int v12 = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v12 >= 8) {
    goto LABEL_19;
  }
  if (((0x97u >> v12) & 1) == 0) {
    goto LABEL_19;
  }
  long long v19 = off_1E5747770[v12];
  *(void *)&long long v13 = v43[3];
  *((void *)&v13 + 1) = v43[4];
  long long v21 = v13;
  uint64_t v22 = v43[2];
  *(void *)&long long v13 = v43[0];
  *((void *)&v13 + 1) = v43[1];
  long long v20 = v13;
  uint64_t v25 = *(void *)(a1 + 284);
  uint64_t v14 = *(unsigned int *)(a1 + 300);
  if (v14 <= 4)
  {
    long long v15 = off_1E5747748[v14];
    long long v26 = @"Width";
    uint64_t v27 = @"Linear";
    uint64_t v28 = @"Height";
    uint64_t v29 = @"Linear";
    long long v30 = @"Width";
    uint64_t v31 = v15;
    uint64_t v32 = @"Height";
    uint64_t v33 = v15;
    BOOL v16 = ANECValidateResizeLayer() == 0;
  }
  else
  {
LABEL_19:
    BOOL v16 = 0;
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }

  return v16;
}

void sub_192ACC70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  long long v17 = *(std::__shared_weak_count **)(v15 - 168);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }

  _Unwind_Resume(a1);
}

void sub_192ACC754()
{
  uint64_t v1 = *(void **)(v0 - 120);
  if (v1)
  {
    *(void *)(v0 - 112) = v1;
    operator delete(v1);
  }
  uint64_t v2 = *(std::__shared_weak_count **)(v0 - 88);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  JUMPOUT(0x192ACC74CLL);
}

uint64_t Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::should_use_workaround(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4)
{
  if (!Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(*(Espresso::ANECompilerEngine **)a2, (Espresso::net *)a2))return 0; {
  long long v8 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(void *)a2 + 472);
  }
  long long v9 = a3[1];
  long long v66 = *a3;
  long long v67 = v9;
  unint64_t v10 = (const void *)*((void *)a3 + 5);
  uint64_t v68 = *((void *)a3 + 4);
  unint64_t v69 = 0;
  long long v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v69, v10, *((void *)a3 + 6), (uint64_t)(*((void *)a3 + 6) - (void)v10) >> 2);
  int v11 = v66;
  LODWORD(v66) = DWORD2(v66);
  DWORD2(v66) = v11;
  long long v13 = *(const Espresso::net **)a2;
  unsigned int v12 = *(std::__shared_weak_count **)(a2 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v60[0] = v66;
  v60[1] = v67;
  uint64_t v61 = v68;
  uint64_t v62 = 0;
  unint64_t v63 = 0;
  uint64_t v64 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, v69, (uint64_t)v70, (v70 - (unsigned char *)v69) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v65, v13, (const Espresso::layer_shape *)v60, 1);
  BOOL v14 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v65, v8);
  if (v62)
  {
    unint64_t v63 = v62;
    operator delete(v62);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (!v14) {
    goto LABEL_47;
  }
  DWORD2(v66) = *a4;
  BOOL v16 = *(const Espresso::net **)a2;
  uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v55[0] = v66;
  v55[1] = v67;
  uint64_t v56 = v68;
  std::string __p = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v69, (uint64_t)v70, (v70 - (unsigned char *)v69) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v65, v16, (const Espresso::layer_shape *)v55, 1);
  BOOL v17 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v65, v8);
  if (__p)
  {
    uint64_t v58 = __p;
    operator delete(__p);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (!v17) {
    goto LABEL_47;
  }
  int v18 = v66;
  LODWORD(v66) = DWORD2(v66);
  DWORD2(v66) = v18;
  long long v20 = *(const Espresso::net **)a2;
  long long v19 = *(std::__shared_weak_count **)(a2 + 8);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v50[0] = v66;
  v50[1] = v67;
  uint64_t v51 = v68;
  uint64_t v52 = 0;
  int v53 = 0;
  uint64_t v54 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v52, v69, (uint64_t)v70, (v70 - (unsigned char *)v69) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v65, v20, (const Espresso::layer_shape *)v50, 1);
  BOOL v21 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v65, v8);
  if (v52)
  {
    int v53 = v52;
    operator delete(v52);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (!v21) {
    goto LABEL_47;
  }
  *(int32x2_t *)((char *)&v66 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v66 + 4));
  uint64_t v23 = *(const Espresso::net **)a2;
  uint64_t v22 = *(std::__shared_weak_count **)(a2 + 8);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v45[0] = v66;
  v45[1] = v67;
  uint64_t v46 = v68;
  long long v47 = 0;
  unint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, v69, (uint64_t)v70, (v70 - (unsigned char *)v69) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v65, v23, (const Espresso::layer_shape *)v45, 1);
  BOOL v24 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v65, v8);
  if (v47)
  {
    unint64_t v48 = v47;
    operator delete(v47);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (!v24) {
    goto LABEL_47;
  }
  DWORD2(v66) = a4[1];
  long long v26 = *(const Espresso::net **)a2;
  uint64_t v25 = *(std::__shared_weak_count **)(a2 + 8);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v40[0] = v66;
  v40[1] = v67;
  uint64_t v41 = v68;
  uint64_t v42 = 0;
  long long v43 = 0;
  uint64_t v44 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v42, v69, (uint64_t)v70, (v70 - (unsigned char *)v69) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v65, v26, (const Espresso::layer_shape *)v40, 1);
  BOOL v27 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v65, v8);
  if (v42)
  {
    long long v43 = v42;
    operator delete(v42);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (!v27) {
    goto LABEL_47;
  }
  *(int32x2_t *)((char *)&v66 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v66 + 4));
  uint64_t v29 = *(const Espresso::net **)a2;
  uint64_t v28 = *(std::__shared_weak_count **)(a2 + 8);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v35[0] = v66;
  v35[1] = v67;
  uint64_t v36 = v68;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v37, v69, (uint64_t)v70, (v70 - (unsigned char *)v69) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v65, v29, (const Espresso::layer_shape *)v35, 1);
  BOOL v30 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(v65, v8);
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (v30
    && (*(_DWORD *)(a1 + 300) - 1) <= 1
    && !*(_DWORD *)(a1 + 304)
    && !*(unsigned char *)(a1 + 312)
    && ((int v33 = a4[5], v33 == 4) || v33 == -1 && a4[4] == 1)
    && ((int v34 = *((_DWORD *)a3 + 5), v34 == 4) || v34 == -1 && *((_DWORD *)a3 + 4) == 1)
    && *(int *)a3 <= 128
    && *((int *)a3 + 1) <= 128
    && (int)*a4 <= 256
    && (int)a4[1] < 257)
  {
    uint64_t v31 = 1;
  }
  else
  {
LABEL_47:
    uint64_t v31 = 0;
  }
  if (v69)
  {
    long long v70 = v69;
    operator delete(v69);
  }

  return v31;
}

void sub_192ACCC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  uint64_t v51 = *(void **)(v49 - 104);
  if (v51)
  {
    *(void *)(v49 - 96) = v51;
    operator delete(v51);
  }

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECCropResizeLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      long long v8 = (unint64_t *)(a3 + 712 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        unint64_t v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 89;
    }
    while (v6 != a2);
  }
}

void sub_192ACCDC0(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::~mix_crop_and_resize_kernel(Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *)((char *)this + 360));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_crop_and_resize_kernel *)((char *)this + 360));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::~stir_resize_nearest_neighbor_kernel(Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::compile(Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::compile(Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  v48[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v29 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v8 = v7 + 136;
  v30[0] = a3[6];
  unint64_t v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v30[0], (long long **)v30)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = v9;
  v30[0] = a3;
  unint64_t v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (long long **)v30)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v27 = v10;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  unint64_t v41 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v30, a3);
  int v11 = objc_opt_new();
  unsigned int v12 = v37;
  uint64_t v37 = @"Resize";

  long long v13 = [NSNumber numberWithInt:*((unsigned int *)this + 72)];
  [v11 setObject:v13 forKeyedSubscript:@"OutputHeight"];

  BOOL v14 = [NSNumber numberWithInt:*((unsigned int *)this + 71)];
  [v11 setObject:v14 forKeyedSubscript:@"OutputWidth"];

  uint64_t v15 = objc_opt_new();
  [v15 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  [v15 setObject:@"NearestNeighbor" forKeyedSubscript:@"SamplingMethod"];
  BOOL v16 = objc_opt_new();
  [v16 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  [v16 setObject:@"NearestNeighbor" forKeyedSubscript:@"SamplingMethod"];
  v48[0] = v15;
  v48[1] = v16;
  BOOL v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v48 count:2];
  [v11 setObject:v17 forKeyedSubscript:@"SamplingMethodInfo"];
  int v18 = objc_opt_new();
  [v18 setObject:@"Height" forKeyedSubscript:@"Coordinate"];
  [v18 setObject:@"UnalignedCorners" forKeyedSubscript:@"SamplingGridMode"];
  long long v19 = objc_opt_new();
  [v19 setObject:@"Width" forKeyedSubscript:@"Coordinate"];
  [v19 setObject:@"UnalignedCorners" forKeyedSubscript:@"SamplingGridMode"];
  v47[0] = v18;
  v47[1] = v19;
  long long v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:v47 count:2];
  [v11 setObject:v20 forKeyedSubscript:@"SamplingGridInfo"];
  objc_storeStrong(&v38, v11);
  BOOL v21 = v40;
  if ((unint64_t)v40 >= v41)
  {
    unint64_t v23 = 0x8E38E38E38E38E39 * (((uint64_t)v40 - v39) >> 4);
    if (v23 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = 0x1C71C71C71C71C72 * ((uint64_t)(v41 - v39) >> 4);
    if (v24 <= v23 + 1) {
      unint64_t v24 = v23 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v41 - v39) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v25 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v25 = v24;
    }
    uint64_t v46 = &v41;
    if (v25) {
      unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v42 = (void **)v25;
    long long v43 = (std::string *)(v25 + 144 * v23);
    uint64_t v44 = v43;
    unint64_t v45 = v25 + 144 * v26;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v43, (uint64_t)v30);
    v44 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v39, &v42);
    uint64_t v22 = v40;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v42);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v40, (uint64_t)v30);
    uint64_t v22 = v21 + 6;
  }
  uint64_t v40 = v22;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 37) + 32))((char *)this + 296, a2, &v39);

  if (v35 < 0) {
    operator delete(__p);
  }
  uint64_t v42 = (void **)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v42);
  uint64_t v42 = (void **)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v42);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  v30[0] = &v39;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  nitro::nitro_function::nitro_function(v29);
}

void sub_192ACD3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v38 - 168);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a13);
  a13 = (void **)&a31;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  nitro::nitro_function::nitro_function(a12);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6 = *((void *)a3 + 6);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      unint64_t v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      unint64_t v9 = 0;
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  unint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v10, v11))
  {
    unsigned int v12 = *a2;
    long long v13 = a2[1];
    v83[0] = v12;
    v83[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "resize_nearest_neighbor_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    if (v82) {
      nitro::nitro_function::nitro_function(v82);
    }
    uint64_t v46 = (__CFString *)v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
    uint64_t v46 = (__CFString *)v80;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)__p);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    uint64_t v14 = 0;
    goto LABEL_76;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *((void *)a3 + 3);
  uint64_t v16 = *(void *)(v15 + 32);
  long long v17 = *(_OWORD *)(v15 + 16);
  v73[0] = *(_OWORD *)v15;
  v73[1] = v17;
  uint64_t v74 = v16;
  uint64_t v75 = 0;
  uint64_t v77 = 0;
  long long v76 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v75, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v78, v9, (const Espresso::layer_shape *)v73, 1);
  if (v75)
  {
    long long v76 = v75;
    operator delete(v75);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(void *)a3;
  uint64_t v19 = *(void *)(*(void *)a3 + 32);
  long long v20 = *(_OWORD *)(*(void *)a3 + 16);
  v67[0] = *(_OWORD *)*(void *)a3;
  v67[1] = v20;
  uint64_t v68 = v19;
  unint64_t v69 = 0;
  long long v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v69, *(const void **)(v18 + 40), *(void *)(v18 + 48), (uint64_t)(*(void *)(v18 + 48) - *(void *)(v18 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v72, v9, (const Espresso::layer_shape *)v67, 1);
  if (v69)
  {
    long long v70 = v69;
    operator delete(v69);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  BOOL v21 = v10;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v72, v21))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v78, v21))
    {
      char v64 = 1;
      std::string::basic_string[abi:ne180100]<0>(v65, "Success");
    }
    else
    {
      char v64 = 0;
      std::string::basic_string[abi:ne180100]<0>(v65, "resize_nearest_neighbor_kernel: output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    char v64 = 0;
    std::string::basic_string[abi:ne180100]<0>(v65, "resize_nearest_neighbor_kernel: input blob dimensions exceed ANE limit.");
  }

  if (!v64)
  {
    char v35 = *a2;
    id v36 = a2[1];
    v63[0] = v35;
    v63[1] = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)v65, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v63, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    if (v82) {
      nitro::nitro_function::nitro_function(v82);
    }
    *(void *)&long long __p = v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(void *)&long long __p = v80;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (v36) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v36);
    }
    uint64_t v14 = 0;
    goto LABEL_74;
  }
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v61, (NSString *)(a1 + 296), v21);
  ANECResizeLayerDescInitialize();
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  ANECTensorDescInitialize();
  unsigned int v22 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, 0);
  if (v22 >= 8 || ((0x97u >> v22) & 1) == 0) {
    goto LABEL_62;
  }
  unint64_t v23 = off_1E5747770[v22];
  *(void *)&long long v24 = v72[3];
  *((void *)&v24 + 1) = v72[4];
  long long v48 = v24;
  uint64_t v46 = v23;
  uint64_t v49 = v72[2];
  *(void *)&long long v24 = v72[0];
  *((void *)&v24 + 1) = v72[1];
  long long v47 = v24;
  *(void *)&long long __p = *(void *)(a1 + 284);
  int v53 = @"Width";
  uint64_t v54 = @"NearestNeighbor";
  unint64_t v55 = @"Height";
  uint64_t v56 = @"NearestNeighbor";
  int v57 = @"Width";
  uint64_t v58 = @"UnalignedCorners";
  uint64_t v59 = @"Height";
  id v60 = @"UnalignedCorners";
  int v25 = ANECValidateResizeLayer();
  if (v25)
  {
    Espresso::ANECompilerEngine::violations_from_alternates<ANECResizeLayerDescAlternate>((uint64_t)v45, v51, v50);
    uint64_t v26 = *a2;
    BOOL v27 = a2[1];
    v44[0] = v26;
    v44[1] = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v40, v25);
    uint64_t v28 = std::string::insert(&v40, 0, "resize_nearest_neighbor_kernel: ANECValidateResizeLayer failed with status ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    BOOL v30 = std::string::append(&v41, ". ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v38, (uint64_t)v45);
    if ((v39 & 0x80u) == 0) {
      uint64_t v32 = v38;
    }
    else {
      uint64_t v32 = (void **)v38[0];
    }
    if ((v39 & 0x80u) == 0) {
      std::string::size_type v33 = v39;
    }
    else {
      std::string::size_type v33 = (std::string::size_type)v38[1];
    }
    int v34 = std::string::append(&v42, (const std::string::value_type *)v32, v33);
    std::string v43 = *v34;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)&v43, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    if (v82) {
      nitro::nitro_function::nitro_function(v82);
    }
    long long v84 = (void **)v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v84);
    long long v84 = (void **)v80;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v84);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if ((char)v39 < 0) {
      operator delete(v38[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (v27) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v27);
    }
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v45);
LABEL_62:
    uint64_t v14 = 0;
    goto LABEL_63;
  }
  uint64_t v14 = 1;
LABEL_63:
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
LABEL_74:
  if (v66 < 0) {
    operator delete(v65[0]);
  }
LABEL_76:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v14;
}

void sub_192ACDAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v76 - 200));
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v75) {
    nitro::nitro_function::nitro_function(v75);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a43);
  if (a69) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a69);
  }
  if (a73 < 0) {
    operator delete(a72);
  }

  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  _Unwind_Resume(a1);
}

void sub_192ACDC94()
{
  if (!v0) {
    JUMPOUT(0x192ACDC8CLL);
  }
  JUMPOUT(0x192ACDC84);
}

void Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::~stir_resize_nearest_neighbor_kernel(Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

__n128 Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::mix_crop_and_resize_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 300) = 0;
  *(_OWORD *)(v5 + 280) = 0u;
  *(unsigned char *)(v5 + 296) = 0;
  *(_DWORD *)(v5 + 308) = 1065353216;
  *(unsigned char *)(v5 + 312) = 0;
  *(_DWORD *)(v5 + 316) = 2;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_DWORD *)(v5 + 352) = 1;
  *(unsigned char *)(v5 + 356) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(unsigned char *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(unsigned char *)(v5 + 488) = 0;
  *(_DWORD *)(v5 + 528) = 1065353216;
  *(_WORD *)(v5 + 536) = 0;
  *(unsigned char *)(v5 + 538) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 540) = _D1;
  *(unsigned char *)(v5 + 548) = 0;
  *(_OWORD *)(v5 + 552) = 0u;
  *(unsigned char *)(v5 + 568) = v6;
  *(void *)uint64_t v5 = &unk_1EE3472D8;
  *(void *)(v5 + 360) = &unk_1EE347438;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 16);
  long long v13 = *(_OWORD *)(a3 + 32);
  long long v14 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 341) = *(_OWORD *)(a3 + 61);
  *(_OWORD *)(v5 + 312) = v13;
  *(_OWORD *)(v5 + 328) = v14;
  *(__n128 *)(v5 + 296) = result;
  return result;
}

__n128 Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::stir_resize_nearest_neighbor_kernel(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(unsigned char *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(unsigned char *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(unsigned char *)(v5 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v5 + 476) = _D0;
  *(unsigned char *)(v5 + 484) = 0;
  *(void *)(v5 + 488) = 0;
  *(void *)(v5 + 496) = 0;
  *(unsigned char *)(v5 + 504) = v6;
  *(void *)uint64_t v5 = &unk_1EE347CD8;
  *(void *)(v5 + 296) = &unk_1EE347E38;
  __n128 result = *a3;
  *(__n128 *)(v5 + 280) = *a3;
  return result;
}

uint64_t Espresso::MPSGraphEngine::Kernels::load_random_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  if (a3[1] != *a3 || *(unsigned char *)(a1 + 324))
  {
    uint64_t v4 = a2[1];
    v20[0] = *a2;
    v20[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::load_random_kernel] unsupported: static inputs only;");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v20, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_6:
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    BOOL v21 = (void **)&v18;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v21);
    BOOL v21 = (void **)&v17;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_10;
  }
  if (*(int *)(a1 + 316) >= 2)
  {
    uint64_t v4 = a2[1];
    v13[0] = *a2;
    v13[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::load_random_kernel] unsupported: only one output permitted");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 325))
  {
    uint64_t v4 = a2[1];
    v12[0] = *a2;
    v12[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::load_random_kernel] unsupported: reseed_each_launch must be false");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_6;
  }
  int v6 = *(_DWORD *)(a1 + 280);
  if (!v6)
  {
    if (*(float *)(a1 + 284) < *(float *)(a1 + 288))
    {
      uint64_t v4 = a2[1];
      v9[0] = *a2;
      v9[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::load_random_kernel] unsupported: random_uniform: alpha must be less than beta");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v9, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_42;
    }
    return 1;
  }
  if (v6 == 2)
  {
    float v7 = *(float *)(a1 + 284);
    if (v7 < 0.0 || v7 > 1.0)
    {
      uint64_t v4 = a2[1];
      v10[0] = *a2;
      v10[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::load_random_kernel] unsupported: random_bernoulli p.alpha must be within [0.f, 1.f]");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v10, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_42;
    }
    return 1;
  }
  if (v6 != 1 || *(float *)(a1 + 288) > 0.0) {
    return 1;
  }
  uint64_t v4 = a2[1];
  v11[0] = *a2;
  v11[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::load_random_kernel] unsupported: cannot have negative std deviation (beta) for random_normal");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_42:
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_10:
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v4) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
  }
  return 0;
}

void sub_192ACE1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a25);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::load_random_kernel::~load_random_kernel(Espresso::MPSGraphEngine::Kernels::load_random_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::blob_cpu::set_reference_to(uint64_t a1, uint64_t *a2)
{
  int v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v4 == v5)
  {
    uint64_t v6 = *a2;
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(v6 + 240);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v6 + 8);
    *(void *)(a1 + 24) = *(void *)(v6 + 24);
    uint64_t v8 = *(void *)(v6 + 160);
    uint64_t v7 = *(void *)(v6 + 168);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = *(std::__shared_weak_count **)(a1 + 168);
    *(void *)(a1 + 160) = v8;
    *(void *)(a1 + 168) = v7;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    uint64_t v11 = *(void *)(v6 + 176);
    uint64_t v10 = *(void *)(v6 + 184);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v12 = *(std::__shared_weak_count **)(a1 + 184);
    *(void *)(a1 + 176) = v11;
    *(void *)(a1 + 184) = v10;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    uint64_t v14 = *(void *)(v6 + 192);
    uint64_t v13 = *(void *)(v6 + 200);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    char v15 = *(std::__shared_weak_count **)(a1 + 200);
    *(void *)(a1 + 192) = v14;
    *(void *)(a1 + 200) = v13;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    uint64_t v17 = *(void *)(v6 + 208);
    uint64_t v16 = *(void *)(v6 + 216);
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 216);
    *(void *)(a1 + 208) = v17;
    *(void *)(a1 + 216) = v16;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    uint64_t v20 = *(void *)(v6 + 224);
    uint64_t v19 = *(void *)(v6 + 232);
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v21 = *(std::__shared_weak_count **)(a1 + 232);
    *(void *)(a1 + 224) = v20;
    *(void *)(a1 + 232) = v19;
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
  }
  return v4 == v5;
}

uint64_t Espresso::blob_cpu::resize_without_realloc(uint64_t a1, Espresso::layer_shape *this)
{
  unint64_t v2 = *(void *)(a1 + 248);
  if (!v2 || Espresso::layer_shape::total_dim(this) - 1 >= v2) {
    return 0;
  }
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, this);
  switch(*(_DWORD *)(a1 + 240))
  {
    case 0:
      int v5 = (void *)(a1 + 160);
      goto LABEL_9;
    case 1:
      int v5 = (void *)(a1 + 176);
      goto LABEL_9;
    case 2:
    case 4:
      int v5 = (void *)(a1 + 192);
      goto LABEL_9;
    case 3:
      int v5 = (void *)(a1 + 208);
LABEL_9:
      uint64_t v7 = (_DWORD *)*v5;
      void v7[2] = *(_DWORD *)(a1 + 8);
      void v7[3] = *(_DWORD *)(a1 + 12);
      void v7[4] = *(_DWORD *)(a1 + 16);
      v7[5] = *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 20);
      break;
    default:
      return 1;
  }
  return 1;
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,Espresso::blob<int,4>::UnitializedBlobType,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = operator new(0x60uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *uint64_t v10 = &unk_1EE389BF8;
  void v10[3] = &unk_1EE36C050;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  __n128 result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  v10[6] = result;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_192ACE5CC(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  int v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob_cpu::__copy_to_CVPixelBuffer(uint64_t a1, int a2, int a3, CVPixelBufferRef pixelBuffer)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  OSType v9 = PixelFormatType;
  if (!*(void *)(a1 + 160) && !*(void *)(a1 + 176)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: blob must be float16 or float32 for copy to CVPixelBuffer.");
  }
  if (PixelFormatType == 1278226536 || PixelFormatType == 1278226488)
  {
    IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
    uint64_t v11 = IOSurface;
    if (IOSurface)
    {
      IOSurfaceLock(IOSurface, 4u, 0);
      BaseAddress = (unsigned __int8 *)IOSurfaceGetBaseAddress(v11);
    }
    else
    {
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(pixelBuffer);
    }
    uint64_t v13 = BaseAddress;
    Espresso::abstract_blob_container::shape(v42, a1);
    size_t v14 = *(int *)v42;
    if (__p)
    {
      uint64_t v44 = __p;
      operator delete(__p);
    }
    size_t Height = CVPixelBufferGetHeight(pixelBuffer);
    uint64_t v16 = *(void *)(a1 + 160);
    if (v16)
    {
      if (v9 == 1278226488)
      {
        std::string::size_type v33 = *(const float **)(v16 + 24);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        if (Height)
        {
          size_t v35 = BytesPerRow;
          uint64_t v36 = 4 * v14;
          unsigned int v37 = 1;
          do
          {
            vDSP_vfixru8(v33, 1, v13, 1, *(int *)(*(void *)(a1 + 160) + 8));
            v13 += v35;
            BOOL v32 = Height > v37;
            std::string::size_type v33 = (const float *)((char *)v33 + v36);
            ++v37;
          }
          while (v32);
        }
      }
      else if (v9 == 1278226536)
      {
        uint64_t v17 = *(void *)(v16 + 24);
        size_t v18 = CVPixelBufferGetBytesPerRow(pixelBuffer);
        if (Height)
        {
          LODWORD(v19) = 0;
          do
          {
            if (v14)
            {
              for (uint64_t i = 0; i != v14; ++i)
              {
                _S0 = *(_DWORD *)(v17 + 4 * i);
                __asm { FCVT            H0, S0 }
                *(_WORD *)&v13[2 * i] = _S0;
              }
            }
            size_t v19 = (v19 + 1);
            v13 += 2 * (v18 >> 1);
            v17 += 4 * v14;
          }
          while (Height > v19);
        }
      }
    }
    else
    {
      uint64_t v26 = *(void *)(a1 + 176);
      if (v26)
      {
        if (v9 == 1278226488)
        {
          uint64_t v38 = *(char **)(v26 + 24);
          size_t v39 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          if (Height)
          {
            size_t v40 = v39;
            unsigned int v41 = 1;
            do
            {
              memcpy(v13, v38, v14);
              v13 += v40;
              BOOL v32 = Height > v41++;
              v38 += 2 * v14;
            }
            while (v32);
          }
        }
        else if (v9 == 1278226536)
        {
          BOOL v27 = *(char **)(v26 + 24);
          size_t v28 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          if (Height)
          {
            size_t v29 = 2 * v14;
            uint64_t v30 = 2 * (v28 >> 1);
            unsigned int v31 = 1;
            do
            {
              memcpy(v13, v27, v29);
              BOOL v32 = Height > v31++;
              v13 += v30;
              v27 += v29;
            }
            while (v32);
          }
        }
      }
    }
    if (v11) {
      IOSurfaceUnlock(v11, 4u, 0);
    }
    else {
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    }
  }
  else
  {
    if (PixelFormatType != 1111970369) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: must be kCVPixelFormatType_OneComponent8, kCVPixelFormatType_32BGRA, or kCVPixelFormatType_OneComponent16Half");
    }
    Espresso::blob_cpu::__copy_to_interleaved_CVPixelBuffer(a1, v7, v8, pixelBuffer);
  }
}

void Espresso::blob_cpu::__copy_to_interleaved_CVPixelBuffer(uint64_t a1, int a2, int a3, CVPixelBufferRef pixelBuffer)
{
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1111970369) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: must be kCVPixelFormatType_OneComponent8, kCVPixelFormatType_32BGRA, or kCVPixelFormatType_OneComponent16Half");
  }
  if (*(int *)(a1 + 16) >= 5) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: blob may not have more than 4 channels for bgra buffer binding.");
  }
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  int v7 = IOSurface;
  if (IOSurface)
  {
    IOSurfaceLock(IOSurface, 4u, 0);
    BaseAddress = IOSurfaceGetBaseAddress(v7);
  }
  else
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  }
  OSType v9 = BaseAddress;
  uint64_t v10 = *(void *)(a1 + 176);
  if (v10)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v10 + 8);
    uint64_t v11 = 0;
    std::string::pointer data = (int *)src.data;
    std::string::size_type height = (std::__shared_weak_count *)src.height;
    uint64_t v14 = *(void *)(a1 + 176);
    char v15 = *(void **)(v14 + 24);
    uint64_t v16 = (void *)*((void *)src.data + 3);
    vImagePixelCount v17 = *(int *)(v14 + 8);
    uint64_t v18 = v14 + 12;
    do
    {
      v17 *= *(int *)(v18 + v11);
      v11 += 4;
    }
    while (v11 != 12);
    src.std::string::pointer data = v15;
    src.std::string::size_type height = 1;
    src.width = v17;
    src.rowBytes = 2 * v17;
    v39.std::string::pointer data = v16;
    v39.std::string::size_type height = 1;
    v39.width = v17;
    v39.rowBytes = 4 * v17;
    vImageConvert_Planar16FtoPlanarF(&src, &v39, 0);
  }
  else
  {
    std::string::size_type height = 0;
    std::string::pointer data = 0;
  }
  uint64_t v19 = *(void *)(a1 + 160);
  if (v19) {
    uint64_t v20 = *(int **)(a1 + 160);
  }
  else {
    uint64_t v20 = data;
  }
  BOOL v21 = height;
  if (v19) {
    BOOL v21 = *(std::__shared_weak_count **)(a1 + 168);
  }
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v22 = v20[4];
  uint64_t v23 = v20[5];
  int v25 = v20[2];
  int v24 = v20[3];
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (v23)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = v25 * (uint64_t)v24;
    if (v22 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v22;
    }
    do
    {
      if (v22)
      {
        uint64_t v31 = 0;
        unint64_t v32 = v20[3];
        uint64_t v33 = v27;
        unint64_t v34 = v32;
        do
        {
          if (v34)
          {
            unint64_t v35 = 0;
            LODWORD(v36) = v20[2];
            do
            {
              if (v36)
              {
                uint64_t v37 = 0;
                unint64_t v38 = 0;
                do
                {
                  v9[v31 + (v37 & 0xFFFFFFFC) + (v35 + v28 * v20[3]) * BytesPerRow] = (int)*(float *)(*((void *)v20 + 3) + 4 * (v33 + v38++ + (v35 * v36)));
                  unint64_t v36 = v20[2];
                  v37 += 4;
                }
                while (v38 < v36);
                unint64_t v32 = v20[3];
              }
              ++v35;
              unint64_t v34 = v32;
            }
            while (v35 < v32);
          }
          ++v31;
          v33 += v29;
        }
        while (v31 != v30);
      }
      ++v28;
      v27 += v22 * v29;
    }
    while (v28 != v23);
  }
  if (v7) {
    IOSurfaceUnlock(v7, 4u, 0);
  }
  else {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (height) {
    nitro::nitro_function::nitro_function(height);
  }
}

void sub_192ACEB78(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::blob_cpu::__copy_from_CVPixelBuffer(uint64_t a1, uint64_t a2, int a3, CVPixelBufferRef pixelBuffer, __n128 *a5, uint64_t a6)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType == 1111970369)
  {
LABEL_4:
    Espresso::abstract_blob_container::__copy_from_CVPixelBuffer((int *)a1, a2, v12, pixelBuffer, a5, a6);
    return;
  }
  if (PixelFormatType != 1278226536)
  {
    if (PixelFormatType != 1278226488) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: must be kCVPixelFormatType_OneComponent8, kCVPixelFormatType_32BGRA, or kCVPixelFormatType_OneComponent16Half");
    }
    goto LABEL_4;
  }
  if (!*(void *)(a1 + 160) && !*(void *)(a1 + 176)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported format: blob must be float16 or float32 for copy from kCVPixelFormatType_OneComponent16Half");
  }
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  buffer = IOSurface;
  if (IOSurface)
  {
    uint64_t v14 = IOSurface;
    IOSurfaceLock(IOSurface, 5u, 0);
    BaseAddress = (char *)IOSurfaceGetBaseAddress(v14);
  }
  else
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  }
  uint64_t v16 = BaseAddress;
  Espresso::abstract_blob_container::shape((char *)&src, a1);
  vImagePixelCount data_low = SLODWORD(src.data);
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t v19 = CVPixelBufferGetBytesPerRow(pixelBuffer) >> 1;
  uint64_t v20 = *(void *)(a1 + 160);
  if (v20)
  {
    if (Height)
    {
      BOOL v21 = *(char **)(v20 + 24);
      unsigned int v22 = 1;
      uint64_t v23 = 2 * v19;
      do
      {
        src.std::string::pointer data = v16;
        src.std::string::size_type height = 1;
        src.width = data_low;
        src.rowBytes = 2 * data_low;
        dest.std::string::pointer data = v21;
        dest.std::string::size_type height = 1;
        dest.width = data_low;
        dest.rowBytes = 4 * data_low;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        BOOL v24 = Height > v22++;
        v21 += 4 * data_low;
        v16 += v23;
      }
      while (v24);
    }
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 176);
    if (v25 && Height)
    {
      uint64_t v26 = *(char **)(v25 + 24);
      size_t v27 = 2 * data_low;
      uint64_t v28 = 2 * v19;
      unsigned int v29 = 1;
      do
      {
        memcpy(v26, v16, v27);
        BOOL v24 = Height > v29++;
        v26 += v27;
        v16 += v28;
      }
      while (v24);
    }
  }
  if (buffer) {
    IOSurfaceUnlock(buffer, 4u, 0);
  }
  else {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
}

void Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(void *a1, void *lpsrc, std::__shared_weak_count *a3)
{
  if (!lpsrc
  {
    a3 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v5;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(unsigned int (**)(void *))(*v5 + 32))(v5))
  {
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    if (!a3) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v7 = v6[21];
  *a1 = v6[20];
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (a3)
  {
LABEL_9:
    nitro::nitro_function::nitro_function(a3);
  }
}

void sub_192ACEF30(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(void *a1, void *lpsrc, std::__shared_weak_count *a3)
{
  if (!lpsrc
  {
    a3 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v5;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(unsigned int (**)(void *))(*v5 + 32))(v5) != 1)
  {
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    if (!a3) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v7 = v6[23];
  *a1 = v6[22];
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (a3)
  {
LABEL_9:
    nitro::nitro_function::nitro_function(a3);
  }
}

void sub_192ACF054(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::layer_data::get_blob<Espresso::blob_cpu>(uint64_t a1, uint64_t a2, int a3)
{
  if ((int)((unint64_t)(a2 - a1) >> 4) > a3 && (id v3 = *(const void **)(a1 + 16 * a3)) != 0) {
  else
  }
    return 0;
}

void *Espresso::get_cpu_blob@<X0>(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  __n128 result = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a1, a1[1], a2);
  if (result)
  {
    uint64_t v5 = result[21];
    *a3 = result[20];
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void Espresso::get_cpu_blob(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void Espresso::get_cpu_blob_h(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void Espresso::get_cpu_blob_8(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(const void **)a1;
  if (!v4
  {
    uint64_t v7 = 0;
    goto LABEL_14;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(unsigned int (**)(void *))(*v5 + 32))(v5) != 2
    && (*(unsigned int (**)(void *))(*v6 + 32))(v6) != 4)
  {
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v8 = v6[25];
  *a2 = v6[24];
  a2[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
LABEL_10:
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192ACF278(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::get_cpu_blob_i(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v4 = *(const void **)a1;
  if (!v4
  {
    uint64_t v7 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(unsigned int (**)(void *))(*v5 + 32))(v5) != 3)
  {
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    if (!v7) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v8 = v6[27];
  *a2 = v6[26];
  a2[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
LABEL_9:
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192ACF39C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::MPSGraphEngine::Kernels::dev_op_kernel::is_valid_for_engine(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 280);
  return v1 == 50005 || v1 == 50008;
}

void Espresso::MPSGraphEngine::Kernels::dev_op_kernel::~dev_op_kernel(void **this)
{
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::V9Engine::batch::~batch(id *this)
{
  Espresso::batch_metal::~batch_metal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::V9Engine::context::is_valid_for_submit(uint64_t a1, uint64_t *a2)
{
  int v3 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v4 = *a2;
LABEL_2:
  if (v4 == a2[1]) {
    return 1;
  }
  for (uint64_t i = *(void *)(*(void *)v4 + 32); ; i += 16)
  {
    if (i == *(void *)(*(void *)v4 + 40))
    {
      v4 += 16;
      goto LABEL_2;
    }
    if (*(_DWORD *)(*(void *)i + 8) != v3) {
      break;
    }
  }
  return 0;
}

void Espresso::V9Engine::context::network_transform_pre_allocation(Espresso::V9Engine::context *this, Espresso::net *a2)
{
  uint64_t v345 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a2 + 568))
  {
    BOOL v2 = 1;
    *((unsigned char *)a2 + 568) = 1;
    int v4 = *((_DWORD *)this + 57);
    if (v4 <= 0) {
      BOOL v2 = getenv("DOWG") != 0;
    }
    if (v4 < 0) {
      BOOL v2 = 0;
    }
    BOOL v281 = v2;
    v287 = this;
    uint64_t v5 = a2;
    if (*((unsigned char *)this + 220))
    {
      id v6 = &__block_literal_global_19427;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, a2);
      long long v327 = 0u;
      long long v328 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v324 = 0u;
      memset(v325, 0, sizeof(v325));
      long long v323 = 0u;
      uint64_t v329 = 0;
      v330 = a2;
      LODWORD(v333.__r_.__value_.__l.__data_) = 0;
      uint64_t v7 = *((void *)a2 + 4);
      if (*((void *)a2 + 5) != v7)
      {
        unint64_t v8 = 0;
        do
        {
          LODWORD(v329) = v8;
          long long v9 = *(_OWORD *)(v7 + 16 * v8);
          uint64_t v10 = *(void *)(v7 + 16 * v8 + 8);
          if (v10) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v11 = (std::__shared_weak_count *)*((void *)&v325[0] + 1);
          v325[0] = v9;
          if (v11) {
            nitro::nitro_function::nitro_function(v11);
          }
          int v12 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v8, &v333);
          if ((char *)v12[6] - (char *)v12[5] == 4)
          {
            HIDWORD(v329) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v329, &v329)[5];
            uint64_t v13 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v343, SHIDWORD(v329), (_DWORD *)&v329 + 1);
            if ((char *)v13[6] - (char *)v13[5] == 4)
            {
              uint64_t v14 = *((void *)v5 + 4);
              long long v15 = *(_OWORD *)(v14 + 16 * SHIDWORD(v329));
              uint64_t v16 = *(void *)(v14 + 16 * SHIDWORD(v329) + 8);
              if (v16) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
              }
              vImagePixelCount v17 = (std::__shared_weak_count *)*((void *)&v325[1] + 1);
              v325[1] = v15;
              if (v17) {
                nitro::nitro_function::nitro_function(v17);
              }
              uint64_t v18 = *(void *)&v325[0];
              size_t v19 = *(void **)(*(void *)&v325[0] + 64);
              if (v19
              {
                uint64_t v20 = *(void *)(v18 + 72);
                if (v20) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v20 = 0;
              }
              BOOL v21 = (std::__shared_weak_count *)*((void *)&v323 + 1);
              *(void *)&long long v323 = v19;
              *((void *)&v323 + 1) = v20;
              if (v21) {
                nitro::nitro_function::nitro_function(v21);
              }
              uint64_t v22 = *(void *)&v325[1];
              uint64_t v23 = *(void **)(*(void *)&v325[1] + 64);
              if (v23
              {
                uint64_t v24 = *(void *)(v22 + 72);
                if (v24) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v24 = 0;
              }
              uint64_t v5 = a2;
              uint64_t v25 = (std::__shared_weak_count *)*((void *)&v324 + 1);
              *(void *)&long long v324 = v23;
              *((void *)&v324 + 1) = v24;
              if (v25)
              {
                nitro::nitro_function::nitro_function(v25);
                uint64_t v23 = (void *)v324;
              }
              if ((void)v323 && v23) {
                ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke((uint64_t)&__block_literal_global_19427, &v323);
              }
            }
          }
          LODWORD(v333.__r_.__value_.__l.__data_) = ++v8;
          uint64_t v7 = *((void *)v5 + 4);
        }
        while (v8 < (*((void *)v5 + 5) - v7) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      uint64_t v26 = __p[0];
      size_t v27 = __p[1];
      if (__p[0] != __p[1])
      {
        int v28 = 0;
        do
        {
          Espresso::net::remove_layer(a2, v28 + *v26++);
          --v28;
        }
        while (v26 != v27);
      }
      unsigned int v29 = (int *)*((void *)&v327 + 1);
      uint64_t v30 = (int *)v328;
      if (*((void *)&v327 + 1) != (void)v328)
      {
        int v31 = 0;
        do
        {
          int v32 = *v29;
          LODWORD(v313) = v31 + *v29;
          LODWORD(v333.__r_.__value_.__l.__data_) = v32;
          v333.__r_.__value_.__l.__size_ = *((void *)v29 + 1);
          std::string::size_type v33 = *((void *)v29 + 2);
          v333.__r_.__value_.__r.__words[2] = v33;
          if (v33) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          uint64_t v336 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v334, *((void *)v29 + 3), *((void *)v29 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v29 + 4) - *((void *)v29 + 3)) >> 3));
          uint64_t v337 = 0;
          uint64_t v338 = 0;
          uint64_t v339 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v337, *((void *)v29 + 6), *((void *)v29 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v29 + 7) - *((void *)v29 + 6)) >> 3));
          uint64_t v320 = 0;
          unint64_t v321 = 0;
          unint64_t v322 = 0;
          int v331 = &v320;
          LOBYTE(v332) = 0;
          uint64_t v320 = (std::__shared_weak_count *)operator new(0x48uLL);
          unint64_t v321 = v320;
          unint64_t v322 = (uint64_t *)&v320[3];
          unint64_t v321 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v322, (uint64_t)&v333, (uint64_t)&v340, (uint64_t)v320);
          Espresso::net::insert_layers((uint64_t)a2, (int *)&v313, (uint64_t *)&v320);
          int v331 = &v320;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v337;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v334;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          if (v333.__r_.__value_.__r.__words[2]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v333.__r_.__value_.__r.__words[2]);
          }
          ++v31;
          v29 += 18;
        }
        while (v29 != v30);
      }
      v333.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      unint64_t v34 = a2;
      if (*((void *)&v325[1] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[1] + 1));
      }
      if (*((void *)&v325[0] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[0] + 1));
      }
      if (*((void *)&v324 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v324 + 1));
      }
      if (*((void *)&v323 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v323 + 1));
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v344);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v342);
      if (__str.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }

      id v35 = &__block_literal_global_28_19428;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, a2);
      long long v327 = 0u;
      long long v328 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v324 = 0u;
      memset(v325, 0, sizeof(v325));
      long long v323 = 0u;
      uint64_t v329 = 0;
      v330 = a2;
      LODWORD(v333.__r_.__value_.__l.__data_) = 0;
      uint64_t v36 = *((void *)a2 + 4);
      if (*((void *)a2 + 5) != v36)
      {
        unint64_t v37 = 0;
        do
        {
          LODWORD(v329) = v37;
          long long v38 = *(_OWORD *)(v36 + 16 * v37);
          uint64_t v39 = *(void *)(v36 + 16 * v37 + 8);
          if (v39) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
          }
          size_t v40 = (std::__shared_weak_count *)*((void *)&v325[0] + 1);
          v325[0] = v38;
          if (v40) {
            nitro::nitro_function::nitro_function(v40);
          }
          unsigned int v41 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v37, &v333);
          if ((char *)v41[6] - (char *)v41[5] == 4)
          {
            HIDWORD(v329) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v329, &v329)[5];
            std::string v42 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v343, SHIDWORD(v329), (_DWORD *)&v329 + 1);
            if ((char *)v42[6] - (char *)v42[5] == 4)
            {
              uint64_t v43 = *((void *)v34 + 4);
              long long v44 = *(_OWORD *)(v43 + 16 * SHIDWORD(v329));
              uint64_t v45 = *(void *)(v43 + 16 * SHIDWORD(v329) + 8);
              if (v45) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v46 = (std::__shared_weak_count *)*((void *)&v325[1] + 1);
              v325[1] = v44;
              if (v46) {
                nitro::nitro_function::nitro_function(v46);
              }
              uint64_t v47 = *(void *)&v325[0];
              long long v48 = *(void **)(*(void *)&v325[0] + 64);
              if (v48
              {
                uint64_t v49 = *(void *)(v47 + 72);
                if (v49) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v49 = 0;
              }
              uint64_t v50 = (std::__shared_weak_count *)*((void *)&v323 + 1);
              *(void *)&long long v323 = v48;
              *((void *)&v323 + 1) = v49;
              if (v50) {
                nitro::nitro_function::nitro_function(v50);
              }
              uint64_t v51 = *(void *)&v325[1];
              uint64_t v52 = *(void **)(*(void *)&v325[1] + 64);
              if (v52
              {
                uint64_t v53 = *(void *)(v51 + 72);
                if (v53) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v53 = 0;
              }
              unint64_t v34 = a2;
              uint64_t v54 = (std::__shared_weak_count *)*((void *)&v324 + 1);
              *(void *)&long long v324 = v52;
              *((void *)&v324 + 1) = v53;
              if (v54)
              {
                nitro::nitro_function::nitro_function(v54);
                uint64_t v52 = (void *)v324;
              }
              if ((void)v323 && v52) {
                ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2((uint64_t)&__block_literal_global_28_19428, &v323);
              }
            }
          }
          LODWORD(v333.__r_.__value_.__l.__data_) = ++v37;
          uint64_t v36 = *((void *)v34 + 4);
        }
        while (v37 < (*((void *)v34 + 5) - v36) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      unint64_t v55 = __p[0];
      uint64_t v56 = __p[1];
      if (__p[0] != __p[1])
      {
        int v57 = 0;
        do
        {
          Espresso::net::remove_layer(a2, v57 + *v55++);
          --v57;
        }
        while (v55 != v56);
      }
      uint64_t v58 = (int *)*((void *)&v327 + 1);
      uint64_t v59 = (int *)v328;
      if (*((void *)&v327 + 1) != (void)v328)
      {
        int v60 = 0;
        do
        {
          int v61 = *v58;
          LODWORD(v313) = v60 + *v58;
          LODWORD(v333.__r_.__value_.__l.__data_) = v61;
          v333.__r_.__value_.__l.__size_ = *((void *)v58 + 1);
          std::string::size_type v62 = *((void *)v58 + 2);
          v333.__r_.__value_.__r.__words[2] = v62;
          if (v62) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          uint64_t v336 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v334, *((void *)v58 + 3), *((void *)v58 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v58 + 4) - *((void *)v58 + 3)) >> 3));
          uint64_t v337 = 0;
          uint64_t v338 = 0;
          uint64_t v339 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v337, *((void *)v58 + 6), *((void *)v58 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v58 + 7) - *((void *)v58 + 6)) >> 3));
          uint64_t v320 = 0;
          unint64_t v321 = 0;
          unint64_t v322 = 0;
          int v331 = &v320;
          LOBYTE(v332) = 0;
          uint64_t v320 = (std::__shared_weak_count *)operator new(0x48uLL);
          unint64_t v321 = v320;
          unint64_t v322 = (uint64_t *)&v320[3];
          unint64_t v321 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v322, (uint64_t)&v333, (uint64_t)&v340, (uint64_t)v320);
          Espresso::net::insert_layers((uint64_t)a2, (int *)&v313, (uint64_t *)&v320);
          int v331 = &v320;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v337;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v334;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          if (v333.__r_.__value_.__r.__words[2]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v333.__r_.__value_.__r.__words[2]);
          }
          ++v60;
          v58 += 18;
        }
        while (v58 != v59);
      }
      v333.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t v5 = a2;
      if (*((void *)&v325[1] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[1] + 1));
      }
      if (*((void *)&v325[0] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[0] + 1));
      }
      if (*((void *)&v324 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v324 + 1));
      }
      if (*((void *)&v323 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v323 + 1));
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v344);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v342);
      if (__str.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
    }
    if (*((unsigned char *)v287 + 221))
    {
      id v63 = &__block_literal_global_30;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, v5);
      long long v327 = 0u;
      long long v328 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v324 = 0u;
      memset(v325, 0, sizeof(v325));
      long long v323 = 0u;
      uint64_t v329 = 0;
      v330 = v5;
      LODWORD(v333.__r_.__value_.__l.__data_) = 0;
      uint64_t v64 = *((void *)v5 + 4);
      if (*((void *)v5 + 5) != v64)
      {
        unint64_t v65 = 0;
        do
        {
          LODWORD(v329) = v65;
          long long v66 = *(_OWORD *)(v64 + 16 * v65);
          uint64_t v67 = *(void *)(v64 + 16 * v65 + 8);
          if (v67) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v68 = (std::__shared_weak_count *)*((void *)&v325[0] + 1);
          v325[0] = v66;
          if (v68) {
            nitro::nitro_function::nitro_function(v68);
          }
          unint64_t v69 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v65, &v333);
          if ((char *)v69[6] - (char *)v69[5] == 4)
          {
            HIDWORD(v329) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v329, &v329)[5];
            long long v70 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v343, SHIDWORD(v329), (_DWORD *)&v329 + 1);
            if ((char *)v70[6] - (char *)v70[5] == 4)
            {
              uint64_t v71 = *((void *)v5 + 4);
              long long v72 = *(_OWORD *)(v71 + 16 * SHIDWORD(v329));
              uint64_t v73 = *(void *)(v71 + 16 * SHIDWORD(v329) + 8);
              if (v73) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v74 = (std::__shared_weak_count *)*((void *)&v325[1] + 1);
              v325[1] = v72;
              if (v74) {
                nitro::nitro_function::nitro_function(v74);
              }
              uint64_t v75 = *(void *)&v325[0];
              uint64_t v76 = *(void **)(*(void *)&v325[0] + 64);
              if (v76
              {
                uint64_t v77 = *(void *)(v75 + 72);
                if (v77) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v77 = 0;
              }
              int v78 = (std::__shared_weak_count *)*((void *)&v323 + 1);
              *(void *)&long long v323 = v76;
              *((void *)&v323 + 1) = v77;
              if (v78) {
                nitro::nitro_function::nitro_function(v78);
              }
              uint64_t v79 = *(void *)&v325[1];
              uint64_t v80 = *(void **)(*(void *)&v325[1] + 64);
              if (v80
              {
                uint64_t v81 = *(void *)(v79 + 72);
                if (v81) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v81 = 0;
              }
              uint64_t v5 = a2;
              uint64_t v82 = (std::__shared_weak_count *)*((void *)&v324 + 1);
              *(void *)&long long v324 = v80;
              *((void *)&v324 + 1) = v81;
              if (v82)
              {
                nitro::nitro_function::nitro_function(v82);
                uint64_t v80 = (void *)v324;
              }
              if ((void)v323 && v80) {
                ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3((uint64_t)&__block_literal_global_30, &v323);
              }
            }
          }
          LODWORD(v333.__r_.__value_.__l.__data_) = ++v65;
          uint64_t v64 = *((void *)v5 + 4);
        }
        while (v65 < (*((void *)v5 + 5) - v64) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      int v83 = __p[0];
      long long v84 = __p[1];
      if (__p[0] != __p[1])
      {
        int v85 = 0;
        do
        {
          Espresso::net::remove_layer(a2, v85 + *v83++);
          --v85;
        }
        while (v83 != v84);
      }
      std::string v86 = (int *)*((void *)&v327 + 1);
      uint64_t v87 = (int *)v328;
      if (*((void *)&v327 + 1) != (void)v328)
      {
        int v88 = 0;
        do
        {
          int v89 = *v86;
          LODWORD(v313) = v88 + *v86;
          LODWORD(v333.__r_.__value_.__l.__data_) = v89;
          v333.__r_.__value_.__l.__size_ = *((void *)v86 + 1);
          std::string::size_type v90 = *((void *)v86 + 2);
          v333.__r_.__value_.__r.__words[2] = v90;
          if (v90) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          uint64_t v336 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v334, *((void *)v86 + 3), *((void *)v86 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v86 + 4) - *((void *)v86 + 3)) >> 3));
          uint64_t v337 = 0;
          uint64_t v338 = 0;
          uint64_t v339 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v337, *((void *)v86 + 6), *((void *)v86 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v86 + 7) - *((void *)v86 + 6)) >> 3));
          uint64_t v320 = 0;
          unint64_t v321 = 0;
          unint64_t v322 = 0;
          int v331 = &v320;
          LOBYTE(v332) = 0;
          uint64_t v320 = (std::__shared_weak_count *)operator new(0x48uLL);
          unint64_t v321 = v320;
          unint64_t v322 = (uint64_t *)&v320[3];
          unint64_t v321 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v322, (uint64_t)&v333, (uint64_t)&v340, (uint64_t)v320);
          Espresso::net::insert_layers((uint64_t)a2, (int *)&v313, (uint64_t *)&v320);
          int v331 = &v320;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v337;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v334;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          if (v333.__r_.__value_.__r.__words[2]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v333.__r_.__value_.__r.__words[2]);
          }
          ++v88;
          v86 += 18;
        }
        while (v86 != v87);
      }
      v333.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t v5 = a2;
      if (*((void *)&v325[1] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[1] + 1));
      }
      if (*((void *)&v325[0] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[0] + 1));
      }
      if (*((void *)&v324 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v324 + 1));
      }
      if (*((void *)&v323 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v323 + 1));
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v344);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v342);
      if (__str.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
    }
    if (*((unsigned char *)v287 + 224))
    {
      id v91 = &__block_literal_global_32_19429;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, v5);
      long long v327 = 0u;
      long long v328 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v324 = 0u;
      memset(v325, 0, sizeof(v325));
      long long v323 = 0u;
      uint64_t v329 = 0;
      v330 = v5;
      LODWORD(v333.__r_.__value_.__l.__data_) = 0;
      uint64_t v92 = *((void *)v5 + 4);
      if (*((void *)v5 + 5) != v92)
      {
        unint64_t v93 = 0;
        do
        {
          LODWORD(v329) = v93;
          long long v94 = *(_OWORD *)(v92 + 16 * v93);
          uint64_t v95 = *(void *)(v92 + 16 * v93 + 8);
          if (v95) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v95 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v96 = (std::__shared_weak_count *)*((void *)&v325[0] + 1);
          v325[0] = v94;
          if (v96) {
            nitro::nitro_function::nitro_function(v96);
          }
          long long v97 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v93, &v333);
          if ((char *)v97[6] - (char *)v97[5] == 4)
          {
            HIDWORD(v329) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v329, &v329)[5];
            long long v98 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v343, SHIDWORD(v329), (_DWORD *)&v329 + 1);
            if ((char *)v98[6] - (char *)v98[5] == 4)
            {
              uint64_t v99 = *((void *)v5 + 4);
              long long v100 = *(_OWORD *)(v99 + 16 * SHIDWORD(v329));
              uint64_t v101 = *(void *)(v99 + 16 * SHIDWORD(v329) + 8);
              if (v101) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
              }
              unsigned int v102 = (std::__shared_weak_count *)*((void *)&v325[1] + 1);
              v325[1] = v100;
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              uint64_t v103 = *(void *)&v325[0];
              __n128 v104 = *(void **)(*(void *)&v325[0] + 64);
              if (v104
              {
                uint64_t v105 = *(void *)(v103 + 72);
                if (v105) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v105 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v105 = 0;
              }
              char v106 = (std::__shared_weak_count *)*((void *)&v323 + 1);
              *(void *)&long long v323 = v104;
              *((void *)&v323 + 1) = v105;
              if (v106) {
                nitro::nitro_function::nitro_function(v106);
              }
              uint64_t v107 = *(void *)&v325[1];
              id v108 = *(void **)(*(void *)&v325[1] + 64);
              if (v108
              {
                uint64_t v109 = *(void *)(v107 + 72);
                if (v109) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v109 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v109 = 0;
              }
              uint64_t v5 = a2;
              std::string v110 = (std::__shared_weak_count *)*((void *)&v324 + 1);
              *(void *)&long long v324 = v108;
              *((void *)&v324 + 1) = v109;
              if (v110)
              {
                nitro::nitro_function::nitro_function(v110);
                id v108 = (void *)v324;
              }
              if ((void)v323 && v108) {
                ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_4((uint64_t)&__block_literal_global_32_19429, &v323);
              }
            }
          }
          LODWORD(v333.__r_.__value_.__l.__data_) = ++v93;
          uint64_t v92 = *((void *)v5 + 4);
        }
        while (v93 < (*((void *)v5 + 5) - v92) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      char v111 = __p[0];
      int v112 = __p[1];
      if (__p[0] != __p[1])
      {
        int v113 = 0;
        do
        {
          Espresso::net::remove_layer(a2, v113 + *v111++);
          --v113;
        }
        while (v111 != v112);
      }
      uint64_t v114 = (int *)*((void *)&v327 + 1);
      char v115 = (int *)v328;
      if (*((void *)&v327 + 1) != (void)v328)
      {
        int v116 = 0;
        do
        {
          int v117 = *v114;
          LODWORD(v313) = v116 + *v114;
          LODWORD(v333.__r_.__value_.__l.__data_) = v117;
          v333.__r_.__value_.__l.__size_ = *((void *)v114 + 1);
          std::string::size_type v118 = *((void *)v114 + 2);
          v333.__r_.__value_.__r.__words[2] = v118;
          if (v118) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v118 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          uint64_t v336 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v334, *((void *)v114 + 3), *((void *)v114 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v114 + 4) - *((void *)v114 + 3)) >> 3));
          uint64_t v337 = 0;
          uint64_t v338 = 0;
          uint64_t v339 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v337, *((void *)v114 + 6), *((void *)v114 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v114 + 7) - *((void *)v114 + 6)) >> 3));
          uint64_t v320 = 0;
          unint64_t v321 = 0;
          unint64_t v322 = 0;
          int v331 = &v320;
          LOBYTE(v332) = 0;
          uint64_t v320 = (std::__shared_weak_count *)operator new(0x48uLL);
          unint64_t v321 = v320;
          unint64_t v322 = (uint64_t *)&v320[3];
          unint64_t v321 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v322, (uint64_t)&v333, (uint64_t)&v340, (uint64_t)v320);
          Espresso::net::insert_layers((uint64_t)a2, (int *)&v313, (uint64_t *)&v320);
          int v331 = &v320;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v337;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v334;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          if (v333.__r_.__value_.__r.__words[2]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v333.__r_.__value_.__r.__words[2]);
          }
          ++v116;
          v114 += 18;
        }
        while (v114 != v115);
      }
      v333.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t v5 = a2;
      if (*((void *)&v325[1] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[1] + 1));
      }
      if (*((void *)&v325[0] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[0] + 1));
      }
      if (*((void *)&v324 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v324 + 1));
      }
      if (*((void *)&v323 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v323 + 1));
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v344);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v342);
      if (__str.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
    }
    if (*((unsigned char *)v287 + 222))
    {
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v323, v5);
      int v319 = 0;
      if (*((void *)v5 + 5) != *((void *)v5 + 4))
      {
        uint64_t v119 = 0;
        unint64_t v120 = 0;
        uint64_t v121 = (uint64_t)v5 + 96;
        uint64_t v288 = (uint64_t)v5 + 56;
        while (1)
        {
          uint64_t v122 = *(void *)(*((void *)v5 + 4) + v119);
          uint64_t v123 = *(const void **)(v122 + 64);
          if (v123)
          {
            if (v124) {
              break;
            }
          }
          uint64_t v5 = a2;
LABEL_275:
          int v319 = ++v120;
          v119 += 16;
          if (v120 >= (uint64_t)(*((void *)v5 + 5) - *((void *)v5 + 4)) >> 4) {
            goto LABEL_304;
          }
        }
        int v125 = v124;
        int v126 = *(std::__shared_weak_count **)(v122 + 72);
        if (v126) {
          atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __str.__r_.__value_.__r.__words[0] = v120;
        int v127 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v121, v120, &__str)[3];
        if (*((char *)v127 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v333, *(const std::string::value_type **)v127, *((void *)v127 + 1));
        }
        else
        {
          long long v128 = *v127;
          v333.__r_.__value_.__r.__words[2] = *((void *)v127 + 2);
          *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v128;
        }
        if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v125 + 320))(v125)
          || (int v129 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v120, &v319), (char *)v129[6] - (char *)v129[5] != 8))
        {
          int v133 = 4;
        }
        else
        {
          int v130 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v120, &v319)[5];
          int v318 = v130;
          int v131 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v120, &v319)[5]+ 1);
          int v317 = v131;
          Espresso::match_if_type<Espresso::V9Engine::v9_batchnorm_kernel>(&v320, (uint64_t)a2, v130);
          Espresso::match_if_type<Espresso::V9Engine::v9_batchnorm_kernel>(&v331, (uint64_t)a2, v131);
          float v132 = v320;
          int v133 = 4;
          if (v320)
          {
            uint64_t v134 = (void **)v331;
            if (v331)
            {
              int v135 = *(_DWORD *)(((uint64_t (*)(std::__shared_weak_count *))v320->__vftable[9].__get_deleter)(v320)
                               + 28);
              if (v135 != *(_DWORD *)((*((uint64_t (**)(void **))*v134 + 48))(v134) + 28)) {
                goto LABEL_279;
              }
              int v136 = *(_DWORD *)(((uint64_t (*)(std::__shared_weak_count *))v132->__vftable[9].__get_deleter)(v132)
                               + 24);
              if (v136 != *(_DWORD *)((*((uint64_t (**)(void **))*v134 + 48))(v134) + 24)) {
                goto LABEL_279;
              }
              float v137 = *(float *)(((uint64_t (*)(std::__shared_weak_count *))v132->__vftable[9].__get_deleter)(v132)
                              + 12);
              if (vabds_f32(v137, *(float *)((*((uint64_t (**)(void **))*v134 + 48))(v134) + 12)) > 0.00001) {
                goto LABEL_279;
              }
              float v138 = *(float *)(((uint64_t (*)(std::__shared_weak_count *))v132->__vftable[9].__get_deleter)(v132)
                              + 36);
              if (vabds_f32(v138, *(float *)((*((uint64_t (**)(void **))*v134 + 48))(v134) + 36)) > 0.00001) {
                goto LABEL_279;
              }
              uint64_t v139 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v324, v130, &v318);
              if ((char *)v139[6] - (char *)v139[5] != 4) {
                goto LABEL_279;
              }
              uint64_t v140 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v324, v131, &v317);
              if ((char *)v140[6] - (char *)v140[5] != 4) {
                goto LABEL_279;
              }
              int v141 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v130, &v318);
              if ((char *)v141[6] - (char *)v141[5] != 4) {
                goto LABEL_279;
              }
              uint64_t v142 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v131, &v317);
              if ((char *)v142[6] - (char *)v142[5] != 4) {
                goto LABEL_279;
              }
              int v316 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v130, &v318)[5];
              unint64_t v284 = v316;
              unsigned int v143 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v131, &v317)[5];
              unint64_t v144 = *(int *)v143;
              int v315 = *(_DWORD *)v143;
              int v145 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v324, v284, &v316);
              if ((char *)v145[6] - (char *)v145[5] != 4) {
                goto LABEL_279;
              }
              char v146 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v324, v144, &v315);
              unint64_t v282 = v144;
              if ((char *)v146[6] - (char *)v146[5] == 4)
              {
                Espresso::match_if_type<Espresso::V9Engine::v9_conv_kernel>(&v313, (uint64_t)a2, v284);
                Espresso::match_if_type<Espresso::V9Engine::v9_conv_kernel>(&v311, (uint64_t)a2, v144);
                int v133 = 4;
                uint64_t v279 = v313;
                if (v313)
                {
                  *(void *)int v277 = v311;
                  if (v311)
                  {
                    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_pre_instancenorm", (const void **)&v333.__r_.__value_.__l.__data_, &__str);
                    unint64_t v309 = v284;
                    uint64_t v147 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v121, v284, &v309);
                    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v147 + 1, &__str, &v342, 1uLL);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__str.__r_.__value_.__l.__data_);
                    }
                    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_pre_instancenorm", (const void **)&v333.__r_.__value_.__l.__data_, &__str);
                    unint64_t v309 = v282;
                    float v148 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v121, v282, &v309);
                    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v148 + 1, &__str, &v342, 1uLL);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__str.__r_.__value_.__l.__data_);
                    }
                    uint64_t v285 = *(int *)((*(uint64_t (**)(uint64_t))(*(void *)v279 + 384))(v279) + 40);
                    uint64_t v283 = *(int *)((*(uint64_t (**)(int *))(**(void **)v277 + 384))(*(int **)v277) + 40);
                    if (((v285 | v283) & 3) == 0)
                    {
                      *(_WORD *)((*(uint64_t (**)(uint64_t))(*(void *)v279 + 384))(v279) + 126) = 0;
                      *(_WORD *)((*(uint64_t (**)(int *))(**(void **)v277 + 384))(*(int **)v277) + 126) = v285;
                      int v276 = v283 + v285;
                      *(_WORD *)((*(uint64_t (**)(uint64_t))(*(void *)v279 + 384))(v279) + 130) = v283 + v285;
                      *(_WORD *)((*(uint64_t (**)(int *))(**(void **)v277 + 384))(*(int **)v277) + 130) = v283 + v285;
                      *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v279 + 384))(v279) + 148) = -1;
                      *(_DWORD *)((*(uint64_t (**)(int *))(**(void **)v277 + 384))(*(int **)v277) + 148) = -1;
                      if (v131 >= v130) {
                        int v149 = v130;
                      }
                      else {
                        int v149 = v131;
                      }
                      int v278 = v149;
                      BOOL v150 = v130 < v131;
                      if (v130 <= v131) {
                        int v151 = v131;
                      }
                      else {
                        int v151 = v130;
                      }
                      if (v130 >= v131) {
                        uint64_t v152 = v132;
                      }
                      else {
                        uint64_t v152 = (std::__shared_weak_count *)v134;
                      }
                      char v153 = &v332;
                      if (!v150) {
                        char v153 = &v321;
                      }
                      v280 = *v153;
                      if (*v153) {
                        atomic_fetch_add_explicit(&v280->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_pre_instancenorm", (const void **)&v333.__r_.__value_.__l.__data_, &__str);
                      unint64_t v309 = v151;
                      int v154 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v288, v151, &v309);
                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v154 + 1, &__str, &v342, 1uLL);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
                        std::string::__init_copy_ctor_external(&__str, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
                      }
                      else {
                        std::string __str = v333;
                      }
                      unint64_t v309 = v151;
                      uint64_t v155 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v121, v151, &v309);
                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v155 + 1, &__str, &v342, 1uLL);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v132->__vftable[10].~__shared_weak_count_0)(&__str, v132);
                      (*((void (**)(unint64_t *__return_ptr, void **))*v134 + 51))(&v309, v134);
                      Espresso::blob<float,1>::make(&v307, 4 * v276);
                      uint64_t v156 = v307;
                      memcpy(*(void **)(v307 + 16), *(const void **)(__str.__r_.__value_.__r.__words[0] + 16), 16 * v285);
                      memcpy((void *)(*(void *)(v156 + 16) + 16 * v285), *(const void **)(v309 + 16), 16 * v283);
                      *(_DWORD *)((uint64_t (*)(std::__shared_weak_count *))v152->__vftable[9].__get_deleter)(v152) = v276;
                      std::string::size_type v157 = v308;
                      uint64_t v305 = v156;
                      unint64_t v306 = v308;
                      if (v308) {
                        atomic_fetch_add_explicit(&v308->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      ((void (*)(std::__shared_weak_count *, uint64_t *))v152->__vftable[9].__on_zero_shared_weak)(v152, &v305);
                      if (v306) {
                        nitro::nitro_function::nitro_function(v306);
                      }
                      Espresso::net::remove_layer(a2, v120);
                      Espresso::net::remove_layer(a2, v278);
                      if (v157) {
                        nitro::nitro_function::nitro_function(v157);
                      }
                      if (v310) {
                        nitro::nitro_function::nitro_function(v310);
                      }
                      if (__str.__r_.__value_.__l.__size_) {
                        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
                      }
                      if (v280) {
                        nitro::nitro_function::nitro_function(v280);
                      }
                      int v133 = 2;
                    }
                  }
                }
                if (v312) {
                  nitro::nitro_function::nitro_function(v312);
                }
                if (v314) {
                  nitro::nitro_function::nitro_function(v314);
                }
              }
              else
              {
LABEL_279:
                int v133 = 4;
              }
            }
          }
          if (v332) {
            nitro::nitro_function::nitro_function(v332);
          }
          if (v321) {
            nitro::nitro_function::nitro_function(v321);
          }
        }
        if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v333.__r_.__value_.__l.__data_);
          if (!v126)
          {
LABEL_273:
            BOOL v208 = v133 == 4;
            uint64_t v5 = a2;
            if (!v208) {
              goto LABEL_304;
            }
            goto LABEL_275;
          }
        }
        else if (!v126)
        {
          goto LABEL_273;
        }
        nitro::nitro_function::nitro_function(v126);
        goto LABEL_273;
      }
LABEL_304:
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&v325[1]);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)&v324 + 1));
      if (*((void *)&v323 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v323 + 1));
      }
      if (*((unsigned char *)v287 + 222))
      {
        Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v323, v5);
        uint64_t v158 = (*((void *)v5 + 5) - *((void *)v5 + 4)) >> 4;
        int v159 = v158 - 2;
        LODWORD(v331) = v158 - 2;
        if (v158 == 1) {
          goto LABEL_396;
        }
        *(void *)v289 = (char *)v5 + 96;
        while (1)
        {
          int v160 = (uint64_t *)(*((void *)v5 + 4) + 16 * v159);
          uint64_t v161 = *v160;
          uint64_t i = (std::__shared_weak_count *)v160[1];
          if (i) {
            atomic_fetch_add_explicit(&i->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v163 = *(const void **)(v161 + 64);
          if (!v163
          {
            goto LABEL_393;
          }
          int v164 = *(std::__shared_weak_count **)(v161 + 72);
          if (v164)
          {
            atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
            nitro::nitro_function::nitro_function(v164);
          }
          memset(&v333, 0, sizeof(v333));
          v286 = i;
          uint64_t v165 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v159, &v331);
          int v167 = v165[5];
          uint64_t v166 = v165[6];
          unsigned int v168 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v159, &v331);
          LOBYTE(v169) = v166 != v167;
          uint64_t v170 = v168[5];
          uint64_t v171 = v168[6];
          if (v170 == v171)
          {
            uint64_t v203 = *(void *)v289;
            if (v166 == v167) {
              goto LABEL_393;
            }
            std::string v201 = 0;
            __int16 v290 = 0;
LABEL_369:
            int v209 = (int)v331;
            unint64_t v210 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, (int)v331, &v331);
            uint64_t v211 = (int *)v210[5];
            std::vector<std::string> v212 = (int *)v210[6];
            if (v211 != v212)
            {
              int v213 = 0;
              char v214 = v201;
              do
              {
                id v215 = (uint64_t *)(*((void *)a2 + 4) + 16 * *v211);
                uint64_t v216 = *v215;
                id v217 = (std::__shared_weak_count *)v215[1];
                if (v217) {
                  atomic_fetch_add_explicit(&v217->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v218 = *(const void **)(v216 + 64);
                if (v218
                {
                  uint64_t v220 = v219;
                  int v221 = *(std::__shared_weak_count **)(v216 + 72);
                  if (v221) {
                    atomic_fetch_add_explicit(&v221->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v219 + 384))(v219) + 126) = v213;
                  *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v220 + 384))(v220) + 130) = v290;
                  v213 += *v214;
                  uint64_t v203 = *(void *)v289;
                  if (v221) {
                    nitro::nitro_function::nitro_function(v221);
                  }
                }
                else
                {
                  uint64_t v203 = *(void *)v289;
                }
                if (v217) {
                  nitro::nitro_function::nitro_function(v217);
                }
                ++v211;
                ++v214;
              }
              while (v211 != v212);
            }
            char v222 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v325 + 1, v209, &v331);
            std::string v223 = (int *)v222[5];
            uint64_t v224 = (int *)v222[6];
            for (uint64_t i = v286; v223 != v224; ++v223)
            {
              unint64_t v225 = *v223;
              uint64_t v226 = *(std::__shared_weak_count **)(*((void *)a2 + 4) + 16 * v225 + 8);
              if (v226) {
                atomic_fetch_add_explicit(&v226->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              __str.__r_.__value_.__r.__words[0] = v209;
              std::string::size_type v227 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v203, v209, &__str);
              uint64_t v320 = (std::__shared_weak_count *)v225;
              uint64_t v228 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v203, v225, &v320);
              if (v228 != v227) {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v228 + 3), (std::string *)v227[3], (std::string *)v227[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v227[4] - v227[3]) >> 3));
              }
              if (v226) {
                nitro::nitro_function::nitro_function(v226);
              }
            }
            Espresso::net::remove_layer(a2, v209);
            if (v201) {
              goto LABEL_392;
            }
            goto LABEL_393;
          }
          int v172 = 0;
          std::string::size_type v173 = 0;
          uint64_t v174 = 0;
          __int16 v290 = 0;
          int v175 = a2;
          do
          {
            LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v170;
            int data = (int)__str.__r_.__value_.__l.__data_;
            int v177 = (uint64_t *)(*((void *)v175 + 4) + 16 * SLODWORD(__str.__r_.__value_.__l.__data_));
            uint64_t v178 = *v177;
            uint64_t v179 = (std::__shared_weak_count *)v177[1];
            if (v179) {
              atomic_fetch_add_explicit(&v179->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v180 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v324, data, &__str);
            if ((char *)v180[6] - (char *)v180[5] == 4 {
              && (uint64_t v181 = *(const void **)(v178 + 64)) != 0
            }
            {
              char v183 = v182;
              unsigned __int8 v291 = v169;
              uint64_t v184 = *(std::__shared_weak_count **)(v178 + 72);
              if (v184) {
                atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v185 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v182 + 384))(v182) + 40);
              uint64_t v186 = (*(uint64_t (**)(void *))(*(void *)v183 + 384))(v183);
              uint64_t v187 = v186;
              if ((unint64_t)v174 >= v173)
              {
                std::string::size_type v190 = v173;
                uint64_t v191 = (v174 - v172) >> 2;
                unint64_t v192 = v191 + 1;
                if ((unint64_t)(v191 + 1) >> 62) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v193 = v190 - (void)v172;
                unint64_t v194 = (uint64_t)(v190 - (void)v172) >> 1;
                if (v194 > v192) {
                  unint64_t v192 = v194;
                }
                if (v193 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v195 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v195 = v192;
                }
                if (v195) {
                  unint64_t v195 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v195);
                }
                else {
                  uint64_t v196 = 0;
                }
                uint64_t v197 = (char *)(v195 + 4 * v191);
                *(_DWORD *)uint64_t v197 = *(_DWORD *)(v187 + 40);
                std::string::size_type v188 = (std::string::size_type)(v197 + 4);
                while (v174 != v172)
                {
                  int v198 = *((_DWORD *)v174 - 1);
                  v174 -= 4;
                  *((_DWORD *)v197 - 1) = v198;
                  v197 -= 4;
                }
                v333.__r_.__value_.__r.__words[0] = (std::string::size_type)v197;
                v333.__r_.__value_.__l.__size_ = v188;
                std::string::size_type v199 = v195 + 4 * v196;
                v333.__r_.__value_.__r.__words[2] = v199;
                if (v172) {
                  operator delete(v172);
                }
                int v172 = v197;
                std::string::size_type v173 = v199;
              }
              else
              {
                *(_DWORD *)uint64_t v174 = *(_DWORD *)(v186 + 40);
                std::string::size_type v188 = (std::string::size_type)(v174 + 4);
              }
              v333.__r_.__value_.__l.__size_ = v188;
              if (*(_WORD *)((*(uint64_t (**)(void *))(*(void *)v183 + 384))(v183) + 126))
              {
                int v292 = 0;
                int v189 = 7;
              }
              else
              {
                uint64_t v200 = (*(uint64_t (**)(void *))(*(void *)v183 + 384))(v183);
                int v292 = (*(_WORD *)(v200 + 130) == 0) & v291;
                if (*(_WORD *)(v200 + 130)) {
                  int v189 = 7;
                }
                else {
                  int v189 = 0;
                }
              }
              v290 += v185;
              if (v184) {
                nitro::nitro_function::nitro_function(v184);
              }
              uint64_t v174 = (char *)v188;
              int v175 = a2;
              int v169 = v292;
              if (v179) {
LABEL_327:
              }
                nitro::nitro_function::nitro_function(v179);
            }
            else
            {
              int v169 = 0;
              int v189 = 7;
              int v175 = a2;
              if (v179) {
                goto LABEL_327;
              }
            }
            if (v189) {
              break;
            }
            uint64_t v170 = (uint64_t *)((char *)v170 + 4);
          }
          while (v170 != v171);
          std::string v201 = (_DWORD *)v333.__r_.__value_.__r.__words[0];
          uint64_t v202 = (uint64_t)&v174[-v333.__r_.__value_.__r.__words[0]];
          BOOL v208 = v174 == v333.__r_.__value_.__l.__data_;
          uint64_t i = v286;
          uint64_t v203 = *(void *)v289;
          if (v208)
          {
LABEL_364:
            if (!v169)
            {
              if (v333.__r_.__value_.__r.__words[0]) {
                goto LABEL_392;
              }
              goto LABEL_393;
            }
            goto LABEL_369;
          }
          uint64_t v204 = 0;
          uint64_t v205 = v202 >> 2;
          BOOL v206 = v202 >> 2 != 0;
          uint64_t v207 = (v202 >> 2) - 1;
          if (v207 == 0 || !v206) {
            uint64_t v205 = 1;
          }
          while (1)
          {
            BOOL v208 = (*(_DWORD *)(v333.__r_.__value_.__r.__words[0] + 4 * v204) & 3) == 0 || v207 == v204;
            if (!v208) {
              break;
            }
            if (v205 == ++v204) {
              goto LABEL_364;
            }
          }
LABEL_392:
          operator delete(v201);
LABEL_393:
          if (i) {
            nitro::nitro_function::nitro_function(i);
          }
          int v229 = (int)v331;
          int v159 = v331 - 1;
          LODWORD(v331) = v331 - 1;
          uint64_t v5 = a2;
          if (!v229)
          {
LABEL_396:
            std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&v325[1]);
            std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)&v324 + 1));
            if (*((void *)&v323 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v323 + 1));
            }
            break;
          }
        }
      }
    }
    v299[0] = MEMORY[0x1E4F143A8];
    v299[1] = 3221225472;
    v300 = ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_6;
    v301 = &__block_descriptor_49_e9_v16__0_v8l;
    BOOL v304 = v281;
    unint64_t v302 = v287;
    unint64_t v303 = v5;
    id v230 = v299;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, v5);
    long long v324 = 0u;
    memset(v325, 0, 28);
    long long v323 = 0u;
    __p[0] = v5;
    uint64_t v231 = *((void *)v5 + 4);
    if (*((void *)v5 + 5) != v231)
    {
      unint64_t v232 = 0;
      do
      {
        DWORD2(v325[1]) = v232;
        long long v233 = *(_OWORD *)(v231 + 16 * v232);
        uint64_t v234 = *(void *)(v231 + 16 * v232 + 8);
        if (v234) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v234 + 8), 1uLL, memory_order_relaxed);
        }
        float v235 = (std::__shared_weak_count *)*((void *)&v324 + 1);
        long long v324 = v233;
        if (v235)
        {
          nitro::nitro_function::nitro_function(v235);
          uint64_t v236 = v324;
        }
        else
        {
          uint64_t v236 = v233;
        }
        uint64_t v237 = *(void **)(v236 + 64);
        if (v237
        {
          uint64_t v238 = *(void *)(v236 + 72);
          if (v238) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v238 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v238 = 0;
        }
        uint64_t v239 = (std::__shared_weak_count *)*((void *)&v323 + 1);
        *(void *)&long long v323 = v237;
        *((void *)&v323 + 1) = v238;
        if (v239)
        {
          nitro::nitro_function::nitro_function(v239);
          uint64_t v237 = (void *)v323;
        }
        if (v237) {
          v300((uint64_t)v230, (int64x2_t *)&v323);
        }
        ++v232;
        uint64_t v231 = *((void *)a2 + 4);
      }
      while (v232 < (*((void *)a2 + 5) - v231) >> 4);
      long long v240 = (uint64_t *)*((void *)&v325[0] + 1);
      if (*(void *)&v325[0] != *((void *)&v325[0] + 1))
      {
        int v241 = 0;
        int v242 = (uint64_t *)(*(void *)&v325[0] + 32);
        do
        {
          uint64_t v243 = v242 - 4;
          int v244 = *((_DWORD *)v242 - 8) + v241;
          *((_DWORD *)v242 - 8) = v244;
          std::string::size_type v245 = *(v242 - 3);
          if (v245)
          {
            LODWORD(v333.__r_.__value_.__l.__data_) = v244;
            v333.__r_.__value_.__l.__size_ = v245;
            std::string::size_type v246 = *(v242 - 2);
            v333.__r_.__value_.__r.__words[2] = v246;
            if (v246) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v246 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v334 = 0;
            uint64_t v335 = 0;
            uint64_t v336 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v334, *(v242 - 1), *v242, 0xAAAAAAAAAAAAAAABLL * ((*v242 - *(v242 - 1)) >> 3));
            uint64_t v337 = 0;
            uint64_t v338 = 0;
            uint64_t v339 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v337, v242[2], v242[3], 0xAAAAAAAAAAAAAAABLL * ((v242[3] - v242[2]) >> 3));
            uint64_t v320 = 0;
            unint64_t v321 = 0;
            unint64_t v322 = 0;
            int v331 = &v320;
            LOBYTE(v332) = 0;
            uint64_t v320 = (std::__shared_weak_count *)operator new(0x48uLL);
            unint64_t v321 = v320;
            unint64_t v322 = (uint64_t *)&v320[3];
            unint64_t v321 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v322, (uint64_t)&v333, (uint64_t)&v340, (uint64_t)v320);
            Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v320);
            int v331 = &v320;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
            int v331 = (std::__shared_weak_count **)&v337;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
            int v331 = (std::__shared_weak_count **)&v334;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
            if (v333.__r_.__value_.__r.__words[2]) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v333.__r_.__value_.__r.__words[2]);
            }
            int v247 = 1;
          }
          else
          {
            Espresso::net::remove_layer(a2, v244);
            int v247 = -1;
          }
          v241 += v247;
          v242 += 9;
        }
        while (v243 + 9 != v240);
      }
    }
    v333.__r_.__value_.__r.__words[0] = (std::string::size_type)v325;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
    uint64_t v248 = a2;
    if (*((void *)&v324 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v324 + 1));
    }
    if (*((void *)&v323 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v323 + 1));
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v344);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v342);
    if (__str.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }

    if (*((unsigned char *)v287 + 223))
    {
      v295[0] = MEMORY[0x1E4F143A8];
      v295[1] = 3221225472;
      v296 = (void (*)(uint64_t, long long *))___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_7;
      int v297 = &__block_descriptor_40_e9_v16__0_v8l;
      v298 = a2;
      uint64_t v293 = v295;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&__str, a2);
      long long v327 = 0u;
      long long v328 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v324 = 0u;
      memset(v325, 0, sizeof(v325));
      long long v323 = 0u;
      uint64_t v329 = 0;
      v330 = a2;
      LODWORD(v333.__r_.__value_.__l.__data_) = 0;
      uint64_t v249 = *((void *)a2 + 4);
      if (*((void *)a2 + 5) != v249)
      {
        unint64_t v250 = 0;
        do
        {
          LODWORD(v329) = v250;
          long long v251 = *(_OWORD *)(v249 + 16 * v250);
          uint64_t v252 = *(void *)(v249 + 16 * v250 + 8);
          if (v252) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v252 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v253 = (std::__shared_weak_count *)*((void *)&v325[0] + 1);
          v325[0] = v251;
          if (v253) {
            nitro::nitro_function::nitro_function(v253);
          }
          v254 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v250, &v333);
          if ((char *)v254[6] - (char *)v254[5] == 4)
          {
            HIDWORD(v329) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__str.__r_.__value_.__r.__words[2], v329, &v329)[5];
            v255 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v343, SHIDWORD(v329), (_DWORD *)&v329 + 1);
            if ((char *)v255[6] - (char *)v255[5] == 4)
            {
              uint64_t v256 = *((void *)v248 + 4);
              long long v257 = *(_OWORD *)(v256 + 16 * SHIDWORD(v329));
              uint64_t v258 = *(void *)(v256 + 16 * SHIDWORD(v329) + 8);
              if (v258) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v258 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v259 = (std::__shared_weak_count *)*((void *)&v325[1] + 1);
              v325[1] = v257;
              if (v259) {
                nitro::nitro_function::nitro_function(v259);
              }
              uint64_t v260 = *(void *)&v325[0];
              long long v261 = *(void **)(*(void *)&v325[0] + 64);
              if (v261
              {
                uint64_t v262 = *(void *)(v260 + 72);
                if (v262) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v262 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v262 = 0;
              }
              v263 = (std::__shared_weak_count *)*((void *)&v323 + 1);
              *(void *)&long long v323 = v261;
              *((void *)&v323 + 1) = v262;
              if (v263) {
                nitro::nitro_function::nitro_function(v263);
              }
              uint64_t v264 = *(void *)&v325[1];
              unint64_t v265 = *(void **)(*(void *)&v325[1] + 64);
              if (v265
              {
                uint64_t v266 = *(void *)(v264 + 72);
                if (v266) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v266 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v266 = 0;
              }
              uint64_t v248 = a2;
              unint64_t v267 = (std::__shared_weak_count *)*((void *)&v324 + 1);
              *(void *)&long long v324 = v265;
              *((void *)&v324 + 1) = v266;
              if (v267)
              {
                nitro::nitro_function::nitro_function(v267);
                unint64_t v265 = (void *)v324;
              }
              if ((void)v323 && v265) {
                v296((uint64_t)v293, &v323);
              }
            }
          }
          LODWORD(v333.__r_.__value_.__l.__data_) = ++v250;
          uint64_t v249 = *((void *)v248 + 4);
        }
        while (v250 < (*((void *)v248 + 5) - v249) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      uint64_t v268 = __p[0];
      id v269 = __p[1];
      if (__p[0] != __p[1])
      {
        int v270 = 0;
        do
        {
          Espresso::net::remove_layer(a2, v270 + *v268++);
          --v270;
        }
        while (v268 != v269);
      }
      v271 = (int *)*((void *)&v327 + 1);
      v272 = (int *)v328;
      if (*((void *)&v327 + 1) != (void)v328)
      {
        int v273 = 0;
        do
        {
          int v274 = *v271;
          LODWORD(v313) = v273 + *v271;
          LODWORD(v333.__r_.__value_.__l.__data_) = v274;
          v333.__r_.__value_.__l.__size_ = *((void *)v271 + 1);
          std::string::size_type v275 = *((void *)v271 + 2);
          v333.__r_.__value_.__r.__words[2] = v275;
          if (v275) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v275 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          uint64_t v336 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v334, *((void *)v271 + 3), *((void *)v271 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v271 + 4) - *((void *)v271 + 3)) >> 3));
          uint64_t v337 = 0;
          uint64_t v338 = 0;
          uint64_t v339 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v337, *((void *)v271 + 6), *((void *)v271 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v271 + 7) - *((void *)v271 + 6)) >> 3));
          uint64_t v320 = 0;
          unint64_t v321 = 0;
          unint64_t v322 = 0;
          int v331 = &v320;
          LOBYTE(v332) = 0;
          uint64_t v320 = (std::__shared_weak_count *)operator new(0x48uLL);
          unint64_t v321 = v320;
          unint64_t v322 = (uint64_t *)&v320[3];
          unint64_t v321 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v322, (uint64_t)&v333, (uint64_t)&v340, (uint64_t)v320);
          Espresso::net::insert_layers((uint64_t)a2, (int *)&v313, (uint64_t *)&v320);
          int v331 = &v320;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v337;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          int v331 = (std::__shared_weak_count **)&v334;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
          if (v333.__r_.__value_.__r.__words[2]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v333.__r_.__value_.__r.__words[2]);
          }
          ++v273;
          v271 += 18;
        }
        while (v271 != v272);
      }
      v333.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (*((void *)&v325[1] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[1] + 1));
      }
      if (*((void *)&v325[0] + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v325[0] + 1));
      }
      if (*((void *)&v324 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v324 + 1));
      }
      if (*((void *)&v323 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v323 + 1));
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v344);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v342);
      if (__str.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
    }
  }
}

void sub_192AD1FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a36) {
    nitro::nitro_function::nitro_function(a36);
  }
  if (a38) {
    nitro::nitro_function::nitro_function(a38);
  }
  unint64_t v69 = *(std::__shared_weak_count **)(v67 - 168);
  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a40) {
    nitro::nitro_function::nitro_function(a40);
  }
  if (a42) {
    nitro::nitro_function::nitro_function(a42);
  }
  if (a66) {
    nitro::nitro_function::nitro_function(a66);
  }
  if (a47) {
    nitro::nitro_function::nitro_function(a47);
  }
  if (*(char *)(v67 - 233) < 0) {
    operator delete(*(void **)(v67 - 256));
  }
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a49);
  _Unwind_Resume(a1);
}

void Espresso::match_if_type<Espresso::V9Engine::v9_batchnorm_kernel>(void *a1, uint64_t a2, int a3)
{
  id v6 = &__block_literal_global_35_19430;
  uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 16 * a3);
  unint64_t v8 = *(const void **)(v7 + 64);
  if (v8
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(std::__shared_weak_count **)(v7 + 72);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v9 + 384))(v9) + 8) == 1)
    {
      *a1 = v10;
      a1[1] = v11;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_192AD2644(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  _Unwind_Resume(a1);
}

void Espresso::match_if_type<Espresso::V9Engine::v9_conv_kernel>(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 32) + 16 * a3);
  uint64_t v5 = *(const void **)(v4 + 64);
  if (v5
  {
    uint64_t v7 = *(void *)(v4 + 72);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    *a1 = v6;
    a1[1] = v7;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_6(uint64_t a1, int64x2_t *a2)
{
  uint64_t v217 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = a2[3].i32[2];
  uint64_t v7 = (void *)a2->i64[0];
  id v6 = (std::__shared_weak_count *)a2->i64[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v103 = v6;
  uint64_t v8 = (*(uint64_t (**)(void *))(*v7 + 384))(v7);
  std::string v211 = *(std::string *)v8;
  int v9 = *(_DWORD *)(v8 + 24);
  uint64_t v209 = *(void *)(v8 + 28);
  int v210 = *(_DWORD *)(v8 + 36);
  int32x2_t v94 = *(int32x2_t *)(v8 + 40);
  int v102 = *(_DWORD *)(v8 + 48);
  int v98 = *(_DWORD *)(v8 + 52);
  int v10 = *(_DWORD *)(v8 + 64);
  int v11 = *(_DWORD *)(v8 + 68);
  int v12 = *(__int16 *)(v8 + 72);
  int v92 = *(_DWORD *)(v8 + 56);
  __int16 v93 = *(_WORD *)(v8 + 74);
  int v13 = *(_DWORD *)(v8 + 76);
  __int16 v88 = *(_WORD *)(v8 + 82);
  __int16 v89 = *(_WORD *)(v8 + 80);
  __int16 v87 = *(_WORD *)(v8 + 84);
  int v85 = *(_DWORD *)(v8 + 60);
  __int16 v86 = *(_WORD *)(v8 + 86);
  __int16 v90 = *(_WORD *)(v8 + 90);
  __int16 v91 = *(_WORD *)(v8 + 88);
  int v14 = *(__int16 *)(v8 + 92);
  int v15 = *(__int16 *)(v8 + 94);
  int v100 = *(unsigned __int16 *)(v8 + 94);
  int v101 = *(unsigned __int16 *)(v8 + 92);
  int v99 = *(__int16 *)(v8 + 96);
  int v16 = *(__int16 *)(v8 + 98);
  long long v208 = *(_OWORD *)(v8 + 100);
  int v96 = *(_DWORD *)(v8 + 116);
  __int16 v97 = v16;
  uint64_t v206 = *(void *)(v8 + 120);
  __int16 v207 = *(_WORD *)(v8 + 128);
  int v17 = *(unsigned __int16 *)(v8 + 130);
  long long v205 = *(_OWORD *)(v8 + 132);
  int v18 = *(_DWORD *)(v8 + 148);
  long long v204 = *(_OWORD *)(v8 + 152);
  __int16 v95 = v17;
  if (v18 <= 0)
  {
    if (v18
      || !*(unsigned char *)(a1 + 48)
      || v102 != 3
      || v98 != 3
      || v101 != 1
      || v100 != 1
      || v99 > 1
      || v16 > 1
      || v96 > 1
      || v17)
    {
      goto LABEL_188;
    }
  }
  else if (v17)
  {
    goto LABEL_188;
  }
  uint64_t v19 = *(void *)(a1 + 40) + 96;
  __p.__r_.__value_.__r.__words[0] = v5;
  uint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v19, v5, &__p);
  if (v20[4] - v20[3] != 24) {
    goto LABEL_188;
  }
  uint64_t v21 = *(void *)(a1 + 40) + 56;
  __p.__r_.__value_.__r.__words[0] = v5;
  uint64_t v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v21, v5, &__p);
  if (v22[4] - v22[3] != 24) {
    goto LABEL_188;
  }
  uint64_t v23 = *(void *)(a1 + 40);
  uint64_t v24 = *(void *)(*(void *)(v23 + 32) + 16 * v5);
  if (*(char *)(v24 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)(v24 + 16), *(void *)(v24 + 24));
    uint64_t v23 = *(void *)(a1 + 40);
  }
  else
  {
    std::string v203 = *(std::string *)(v24 + 16);
  }
  __p.__r_.__value_.__r.__words[0] = v5;
  uint64_t v25 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v23 + 96, v5, &__p)[3];
  if (*((char *)v25 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)v25, *((void *)v25 + 1));
  }
  else
  {
    long long v26 = *v25;
    v202.__r_.__value_.__r.__words[2] = *((void *)v25 + 2);
    *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v26;
  }
  uint64_t v27 = *(void *)(a1 + 40) + 56;
  __p.__r_.__value_.__r.__words[0] = v5;
  int v28 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, v5, &__p)[3];
  if (*((char *)v28 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v201.__r_.__value_.__r.__words[2] = *((void *)v28 + 2);
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v29;
  }
  int v84 = v9;
  uint64_t v30 = *(void *)(a1 + 40);
  int v31 = *(void **)(v30 + 192);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v31, &v201)&& std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v31, &v202))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v201;
    int v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v30 + 184), &v201, (long long **)&__p);
    long long v33 = *(_OWORD *)(v32 + 72);
    long long v195 = *(_OWORD *)(v32 + 56);
    long long v196 = v33;
    unint64_t v34 = (const void *)*((void *)v32 + 12);
    uint64_t v197 = *((void *)v32 + 11);
    int v198 = 0;
    std::string::size_type v199 = 0;
    uint64_t v200 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v198, v34, *((void *)v32 + 13), (uint64_t)(*((void *)v32 + 13) - (void)v34) >> 2);
    id v35 = (uint64_t **)(*(void *)(a1 + 40) + 184);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
    uint64_t v36 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, &v202, (long long **)&__p);
    long long v37 = *(_OWORD *)(v36 + 72);
    long long v189 = *(_OWORD *)(v36 + 56);
    long long v190 = v37;
    long long v38 = (const void *)*((void *)v36 + 12);
    uint64_t v191 = *((void *)v36 + 11);
    unint64_t v192 = 0;
    unint64_t v193 = 0;
    uint64_t v194 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v192, v38, *((void *)v36 + 13), (uint64_t)(*((void *)v36 + 13) - (void)v38) >> 2);
    if (v18 < 1)
    {
      *(int32x2_t *)v40.i8 = v94;
      v40.i64[1] = v195;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA7D0, v40))) & 1) != 0
        || vmul_lane_s32(v94, v94, 1).i32[0] < 256)
      {
        goto LABEL_178;
      }
      int v39 = HIDWORD(v195);
    }
    else
    {
      int v39 = HIDWORD(v195);
    }
    if (v39 <= 1 && (int)v196 <= 1)
    {
      Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::remove_layer(a2);
      __int16 v83 = v12;
      int v41 = v189;
      switch(v12)
      {
        case 4:
          goto LABEL_39;
        case 2:
          __int16 v48 = 0;
          LOWORD(v44) = 0;
          __int16 v49 = 0;
          LOWORD(v46) = 0;
          break;
        case 1:
LABEL_39:
          unsigned int v42 = (v98 - DWORD1(v195) + (DWORD1(v189) - 1) * v15) & ~((v98 - DWORD1(v195) + (DWORD1(v189) - 1) * v15) >> 31);
          unsigned int v43 = (v102 - v195 + (v189 - 1) * v14) & ~((v102 - (int)v195 + ((int)v189 - 1) * v14) >> 31);
          unsigned int v44 = v43 >> 1;
          unsigned int v45 = v43 - (v43 >> 1);
          unsigned int v46 = v42 >> 1;
          unsigned int v47 = v42 - (v42 >> 1);
          if ((unsigned __int16)v12 == 1)
          {
            __int16 v48 = v44;
            LOWORD(v44) = v45;
            __int16 v49 = v46;
            LOWORD(v46) = v47;
          }
          else
          {
            __int16 v48 = v45;
            __int16 v49 = v47;
          }
          break;
        default:
          LOWORD(v44) = v88;
          __int16 v48 = v89;
          LOWORD(v46) = v86;
          __int16 v49 = v87;
          break;
      }
      *((void *)&v186 + 1) = 0x10000000000001;
      DWORD2(v187) = 0;
      LODWORD(v186) = v102;
      HIWORD(v188) = v93;
      HIWORD(v187) = v48;
      LOWORD(v188) = v44;
      WORD1(v188) = v49;
      WORD2(v188) = v46;
      *(void *)&long long v187 = v189;
      WORD6(v187) = v84;
      if (v85 == 2)
      {
        WORD6(v187) = 2;
        DWORD2(v187) = v10;
      }
      int v50 = v94.i32[1];
      if (v94.i32[1] >= v94.i32[0]) {
        int v50 = v94.i32[0];
      }
      if (SDWORD1(v189) < (int)v189) {
        int v41 = DWORD1(v189);
      }
      if (v41 < 160 || v50 < 32) {
        int v52 = 4;
      }
      else {
        int v52 = 6;
      }
      if (SDWORD1(v195) < 17 || (int)v195 < 17) {
        int v54 = 2;
      }
      else {
        int v54 = v52;
      }
      DWORD1(v186) = v54;
      unint64_t v55 = getenv("WGWIN");
      if (v55)
      {
        int v54 = atoi(v55);
        DWORD1(v186) = v54;
      }
      if (v18)
      {
        DWORD1(v186) = v18;
        int v54 = v18;
      }
      int v56 = *(_DWORD *)(v4 + 228);
      if (v56 >= 2)
      {
        DWORD1(v186) = *(_DWORD *)(v4 + 228);
        int v54 = v56;
      }
      Espresso::blob<float,1>::make(&v184, v94.i32[0]);
      int v57 = v54;
      uint64_t v58 = v184;
      uint64_t v59 = *(int *)(v184 + 8);
      if (v59) {
        bzero(*(void **)(v184 + 16), 4 * v59);
      }
      uint64_t v78 = v58;
      uint64_t v60 = v7[83];
      int v61 = (std::__shared_weak_count *)v7[84];
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v62 = v7[85];
      id v63 = (std::__shared_weak_count *)v7[86];
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v60)
      {
        (*(void (**)(std::string *__return_ptr, void *))(*v7 + 472))(&__p, v7);
        long long v64 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        if (v61)
        {
          nitro::nitro_function::nitro_function(v61);
          if (__p.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
        int v61 = (std::__shared_weak_count *)*((void *)&v64 + 1);
        uint64_t v60 = v64;
      }
      uint64_t v79 = v60;
      if (!v62)
      {
        (*(void (**)(std::string *__return_ptr, void *))(*v7 + 488))(&__p, v7);
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        std::string::size_type v62 = __p.__r_.__value_.__r.__words[0];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        if (v63)
        {
          nitro::nitro_function::nitro_function(v63);
          if (__p.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
        id v63 = (std::__shared_weak_count *)size;
      }
      uint64_t v66 = *(void *)(a1 + 40);
      uint64_t v67 = *(void *)(v66 + 24);
      v183[0] = *(void *)(v66 + 16);
      v183[1] = v67;
      if (v67) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v80 = (std::__shared_weak_count *)v67;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_tx", (const void **)&v201.__r_.__value_.__l.__data_, &__sz);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_1x1", (const void **)&v201.__r_.__value_.__l.__data_, &__s);
      std::string::size_type v77 = v62;
      std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_wg_transform_in_kernel,std::allocator<Espresso::V9Engine::v9_wg_transform_in_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::wg_transform_params &,void>(v180, v183, &v186);
      uint64_t v68 = v180[0];
      unint64_t v69 = (std::__shared_weak_count *)v180[1];
      uint64_t v70 = v180[0] + 336;
      *(void *)(v180[0] + 352) = *((void *)&v211.__r_.__value_.__l + 2);
      *(_DWORD *)(v68 + 372) = v210;
      *(void *)(v70 + 28) = v209;
      *(void *)(v68 + 456) = v206;
      *(_WORD *)(v68 + 464) = v207;
      *(void *)(v68 + 488) = v204;
      *(void *)(v70 + 157) = *(void *)((char *)&v204 + 5);
      *(_OWORD *)(v68 + 336) = *(_OWORD *)&v211.__r_.__value_.__l.__data_;
      *(_DWORD *)(v68 + 360) = v84;
      *(int32x2_t *)(v68 + 376) = v94;
      *(_DWORD *)(v68 + 384) = v102;
      *(_DWORD *)(v68 + 388) = v98;
      *(_DWORD *)(v68 + 392) = v92;
      *(_DWORD *)(v68 + 396) = v85;
      *(_DWORD *)(v68 + 400) = v10;
      *(_DWORD *)(v68 + 404) = v11;
      *(_WORD *)(v68 + 408) = v83;
      *(_WORD *)(v68 + 410) = v93;
      *(_DWORD *)(v68 + 412) = v13;
      *(_WORD *)(v68 + 416) = v89;
      *(_WORD *)(v68 + 418) = v88;
      *(_WORD *)(v68 + 420) = v87;
      *(_WORD *)(v68 + 422) = v86;
      *(_WORD *)(v68 + 424) = v91;
      *(_WORD *)(v68 + 426) = v90;
      *(_WORD *)(v68 + 428) = v101;
      *(_WORD *)(v68 + 430) = v100;
      *(_WORD *)(v68 + 432) = v99;
      *(_WORD *)(v68 + 434) = v97;
      *(_OWORD *)(v70 + 100) = v208;
      *(_DWORD *)(v68 + 452) = v96;
      *(_WORD *)(v68 + 466) = v95;
      *(_OWORD *)(v70 + 132) = v205;
      *(_DWORD *)(v68 + 484) = v18;
      *(unsigned char *)(v68 + 504) = 1;
      *(void *)(v68 + 536) = v7[101];
      v179[0] = v68;
      v179[1] = v69;
      if (v69) {
        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v82 = v69;
      std::string::basic_string[abi:ne180100]<0>(&__p, "wg_tx_in");
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v216, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
      }
      else {
        std::string v216 = v201;
      }
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v178, (long long *)&v216, 1uLL);
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v214, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      }
      else {
        std::string v214 = __sz;
      }
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v215, (long long *)&v214, 1uLL);
      Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::add_kernel(a2, v179, &__p, &__sz, (std::string **)&v178, (std::string **)&v215);
      v213.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v213);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v214.__r_.__value_.__l.__data_);
      }
      v215.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
      if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v216.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v69) {
        nitro::nitro_function::nitro_function(v69);
      }
      std::string __p = v211;
      int v156 = v10;
      int v157 = v11;
      int v159 = v13;
      __int16 v161 = v91;
      __int16 v162 = v90;
      __int16 v163 = v101;
      __int16 v164 = v100;
      __int16 v165 = v99;
      __int16 v166 = v97;
      uint64_t v168 = *(void *)((char *)&v208 + 4);
      int v172 = HIDWORD(v206);
      __int16 v173 = v207;
      __int16 v174 = v95;
      long long v175 = v205;
      int v176 = v18;
      long long v177 = v204;
      int v171 = (v57 + 2) * (v57 + 2);
      int v158 = 2;
      uint64_t v160 = 0;
      int32x2_t v152 = v94;
      uint64_t v153 = 0x100000001;
      int v151 = v210;
      int v150 = 1;
      int v170 = v96;
      int v169 = 0;
      uint64_t v149 = 0;
      int v167 = 0;
      int v154 = v92;
      int v155 = -1;
      LODWORD(v178.__r_.__value_.__l.__data_) = 1;
      std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_conv_kernel,std::allocator<Espresso::V9Engine::v9_conv_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>(&v146, v183, &v178, (long long *)&__p);
      uint64_t v71 = v146;
      long long v72 = v147;
      v145[0] = v146;
      v145[1] = v147;
      if (v147) {
        atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v178, "convolution");
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v215, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      }
      else {
        std::string v215 = __sz;
      }
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v216, (long long *)&v215, 1uLL);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v213, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string v213 = __s;
      }
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v214, (long long *)&v213, 1uLL);
      Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::add_kernel(a2, v145, &v178, &__s, (std::string **)&v216, (std::string **)&v214);
      unsigned int v143 = &v214;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v213.__r_.__value_.__l.__data_);
      }
      v214.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v214);
      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v215.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v178.__r_.__value_.__l.__data_);
      }
      if (v72) {
        nitro::nitro_function::nitro_function(v72);
      }
      std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_wg_transform_out_kernel,std::allocator<Espresso::V9Engine::v9_wg_transform_out_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::wg_transform_params &,void>((uint64_t *)&v143, v183, &v186);
      uint64_t v73 = v143;
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int data = (std::__shared_weak_count *)v73[17].__r_.__value_.__l.__data_;
      v73[16].__r_.__value_.__r.__words[2] = v68;
      v73[17].__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
      if (data) {
        nitro::nitro_function::nitro_function(data);
      }
      uint64_t v75 = v144;
      v142[0] = v73;
      v142[1] = v144;
      if (v144) {
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v81 = v75;
      std::string::basic_string[abi:ne180100]<0>(&v178, "wg_tx_out");
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v215, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string v215 = __s;
      }
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v216, (long long *)&v215, 1uLL);
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v213, v202.__r_.__value_.__l.__data_, v202.__r_.__value_.__l.__size_);
      }
      else {
        std::string v213 = v202;
      }
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v214, (long long *)&v213, 1uLL);
      Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::add_kernel(a2, v142, &v178, &v203, (std::string **)&v216, (std::string **)&v214);
      std::vector<std::string> v212 = &v214;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v213.__r_.__value_.__l.__data_);
      }
      v214.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v214);
      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v215.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v178.__r_.__value_.__l.__data_);
      }
      if (v81) {
        nitro::nitro_function::nitro_function(v81);
      }
      v141[0] = v71;
      v141[1] = v72;
      if (v72) {
        atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v109 = v211;
      int v110 = v84;
      uint64_t v111 = v209;
      int v112 = v210;
      int32x2_t v113 = v94;
      int v114 = v102;
      int v115 = v98;
      int v116 = v92;
      int v117 = v85;
      int v118 = v10;
      int v119 = v11;
      __int16 v120 = v83;
      __int16 v121 = v93;
      int v122 = v13;
      __int16 v123 = v89;
      __int16 v124 = v88;
      __int16 v125 = v87;
      __int16 v126 = v86;
      __int16 v127 = v91;
      __int16 v128 = v90;
      __int16 v129 = v101;
      __int16 v130 = v100;
      __int16 v131 = v99;
      __int16 v132 = v97;
      long long v133 = v208;
      int v134 = v96;
      __int16 v136 = v207;
      uint64_t v135 = v206;
      __int16 v137 = v95;
      long long v138 = v205;
      int v139 = v18;
      long long v140 = v204;
      v107[0] = v186;
      v107[1] = v187;
      uint64_t v108 = v188;
      Espresso::MetalLowmemEngine::wg_transform_weights_cpu((uint64_t *)&v216, v141, v79, v61, &v109, (uint64_t)v107);
      if (v61) {
        nitro::nitro_function::nitro_function(v61);
      }
      if (v72) {
        nitro::nitro_function::nitro_function(v72);
      }
      uint64_t v76 = v185;
      uint64_t v105 = v78;
      char v106 = v185;
      if (v185) {
        atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v71 + 392))(v71, &v105);
      if (v106) {
        nitro::nitro_function::nitro_function(v106);
      }
      long long v104 = *(_OWORD *)&v216.__r_.__value_.__l.__data_;
      if (v216.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v216.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v71 + 400))(v71, &v104);
      if (*((void *)&v104 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v104 + 1));
      }
      *(_OWORD *)&v215.__r_.__value_.__l.__data_ = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(&v178, "bias");
      (*(void (**)(std::string *, std::string *, std::string *, void, uint64_t, void))(v73->__r_.__value_.__r.__words[0] + 168))(v73, &v215, &v178, *(void *)(v77 + 16), 4 * *(int *)(v77 + 8), 0);
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v178.__r_.__value_.__l.__data_);
      }
      if (v215.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v215.__r_.__value_.__l.__size_);
      }
      if (v216.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v216.__r_.__value_.__l.__size_);
      }
      if (v81) {
        nitro::nitro_function::nitro_function(v81);
      }
      if (v72) {
        nitro::nitro_function::nitro_function(v72);
      }
      if (v82) {
        nitro::nitro_function::nitro_function(v82);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__sz.__r_.__value_.__l.__data_);
      }
      if (v80) {
        nitro::nitro_function::nitro_function(v80);
      }
      if (v63) {
        nitro::nitro_function::nitro_function(v63);
      }
      if (v61) {
        nitro::nitro_function::nitro_function(v61);
      }
      if (v76) {
        nitro::nitro_function::nitro_function(v76);
      }
    }
LABEL_178:
    if (v192)
    {
      unint64_t v193 = v192;
      operator delete(v192);
    }
    if (v198)
    {
      std::string::size_type v199 = v198;
      operator delete(v198);
    }
  }
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v202.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v203.__r_.__value_.__l.__data_);
  }
LABEL_188:
  if (v103) {
    nitro::nitro_function::nitro_function(v103);
  }
}

void sub_192AD37DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  *(void *)(v31 - 224) = v31 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 224));
  if (*(char *)(v31 - 169) < 0) {
    operator delete(*(void **)(v31 - 192));
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (a13)
  {
    nitro::nitro_function::nitro_function(a13);
    nitro::nitro_function::nitro_function(a13);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (STACK[0x320]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x320]);
  }
  long long v33 = (void *)STACK[0x378];
  if (STACK[0x378])
  {
    STACK[0x380] = (unint64_t)v33;
    operator delete(v33);
  }
  unint64_t v34 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v34;
    operator delete(v34);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_7(uint64_t a1, void *a2)
{
  if (*(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2) + 8) == 1
    && *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2) + 8) == 1
    && !*(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2) + 24))
  {
    uint64_t v4 = *a2;
    unint64_t v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = a2[2];
    uint64_t v7 = (std::__shared_weak_count *)a2[3];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(v4 + 520) = 1;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(v6 + 544) = v4;
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 552);
    *(void *)(v6 + 552) = v5;
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    uint64_t v9 = *(void *)(a1 + 32) + 56;
    unint64_t v10 = *((int *)a2 + 28);
    unint64_t v16 = v10;
    int v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v16);
    uint64_t v12 = *(void *)(a1 + 32) + 56;
    unint64_t v13 = *((int *)a2 + 29);
    unint64_t v15 = v13;
    int v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v13, &v15);
    if (v14 != v11) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v14 + 3), (std::string *)v11[3], (std::string *)v11[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[4] - v11[3]) >> 3));
    }
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

void sub_192AD3D78(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::remove_layer(int64x2_t *a1)
{
  memset(v7, 0, sizeof(v7));
  __int32 v4 = a1[3].i32[2];
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    uint64_t v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v4);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v4);
    uint64_t v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  uint64_t v8 = (void **)&v7[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192AD3E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_wg_transform_in_kernel,std::allocator<Espresso::V9Engine::v9_wg_transform_in_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::wg_transform_params &,void>(uint64_t *a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = (char *)operator new(0x248uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C470;
  uint64_t v7 = Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::generic_wg_transform_4_in_kernel((uint64_t)(v6 + 24), a2, a3);
  *((void *)v6 + 3) = &unk_1EE371438;
  double result = 0.0;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_192AD3F0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::V9Engine::v9_conv_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  uint64_t v24 = v12 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    unint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  unint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  int v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_192AD41B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_conv_kernel,std::allocator<Espresso::V9Engine::v9_conv_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>(uint64_t *a1, uint64_t *a2, _DWORD *a3, long long *a4)
{
  uint64_t v8 = operator new(0x348uLL);
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = &unk_1EE38C128;
  uint64_t result = Espresso::V9Engine::v9_conv_kernel::v9_conv_kernel((uint64_t)(v8 + 3), a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_192AD4270(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_wg_transform_out_kernel,std::allocator<Espresso::V9Engine::v9_wg_transform_out_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::wg_transform_params &,void>(uint64_t *a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = (char *)operator new(0x1D0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C4A8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 46) = 0;
  *((void *)v6 + 47) = 0;
  *((void *)v6 + 45) = *((void *)a3 + 4);
  long long v8 = *a3;
  long long v9 = a3[1];
  *((void *)v6 + 3) = &unk_1EE371590;
  *(_OWORD *)(v6 + 328) = v8;
  *(_OWORD *)(v6 + 344) = v9;
  double result = 0.0;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((void *)v6 + 54) = 0;
  *((void *)v6 + 55) = 0;
  *((void *)v6 + 56) = 0;
  *((void *)v6 + 57) = 0;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_192AD4344(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_out_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_out_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_out_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_conv_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_conv_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C128;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_conv_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_in_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_in_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C470;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_wg_transform_in_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_5(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 384))(a2) + 8) == 1;
}

void ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_4(uint64_t a1, void *a2)
{
  int v3 = *(_DWORD *)(*(uint64_t (**)(void))(*(void *)a2[2] + 384))(a2[2]);
  int v4 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 24);
  int v5 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 28) | v4;
  int v6 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 60);
  if (v3 == 2 && v5 == 0 && v6 == -1)
  {
    *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))(*a2) + 60) = 2;
    int v9 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)a2[2] + 384))() + 4);
    *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 384))() + 64) = v9;
    uint64_t v10 = *(void *)(a2[15] + 32);
    int v11 = *(char **)(*(void *)(v10 + 16 * *((int *)a2 + 28)) + 64);
    uint64_t v12 = *(void *)(*(void *)(v10 + 16 * *((int *)a2 + 29)) + 64);
    uint64_t v13 = operator new(8uLL);
    *uint64_t v13 = v12;
    v34[1] = (uint64_t)(v13 + 1);
    v34[2] = (uint64_t)(v13 + 1);
    v34[0] = (uint64_t)v13;
    Espresso::merge_kernel_attributes(v11, v34);
    operator delete(v13);
    uint64_t v14 = a2[15] + 96;
    unint64_t v15 = *((int *)a2 + 29);
    v34[0] = v15;
    unint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, v34);
    uint64_t v17 = a2[15] + 96;
    unint64_t v18 = *((int *)a2 + 28);
    unint64_t v33 = v18;
    uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v18, &v33);
    if (v19 != v16) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v19 + 3), (std::string *)v16[3], (std::string *)v16[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[4] - v16[3]) >> 3));
    }
    unint64_t v20 = (char *)a2[9];
    unint64_t v21 = a2[10];
    if ((unint64_t)v20 >= v21)
    {
      __int32 v23 = (char *)a2[8];
      uint64_t v24 = (v20 - v23) >> 2;
      if ((unint64_t)(v24 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = v21 - (void)v23;
      unint64_t v26 = (uint64_t)(v21 - (void)v23) >> 1;
      if (v26 <= v24 + 1) {
        unint64_t v26 = v24 + 1;
      }
      BOOL v27 = v25 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v27) {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v28);
        __int32 v23 = (char *)a2[8];
        unint64_t v20 = (char *)a2[9];
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v30 = (_DWORD *)(v28 + 4 * v24);
      unint64_t v31 = v28 + 4 * v29;
      *uint64_t v30 = *((_DWORD *)a2 + 29);
      uint64_t v22 = v30 + 1;
      while (v20 != v23)
      {
        int v32 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *--uint64_t v30 = v32;
      }
      a2[8] = v30;
      a2[9] = v22;
      a2[10] = v31;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v20 = *((_DWORD *)a2 + 29);
      uint64_t v22 = v20 + 4;
    }
    a2[9] = v22;
  }
}

void sub_192AD48E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2) + 12)
    && *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2) + 4) == 2
    && *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2) + 8) == 2)
  {
    uint64_t v4 = *(void *)(a2[15] + 32);
    int v5 = *(char **)(*(void *)(v4 + 16 * *((int *)a2 + 29)) + 64);
    uint64_t v6 = *(void *)(*(void *)(v4 + 16 * *((int *)a2 + 28)) + 64);
    uint64_t v7 = operator new(8uLL);
    *uint64_t v7 = v6;
    v28[1] = (uint64_t)(v7 + 1);
    void v28[2] = (uint64_t)(v7 + 1);
    v28[0] = (uint64_t)v7;
    Espresso::merge_kernel_attributes(v5, v28);
    operator delete(v7);
    uint64_t v8 = a2[15] + 56;
    unint64_t v9 = *((int *)a2 + 28);
    v28[0] = v9;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v9, v28);
    uint64_t v11 = a2[15] + 56;
    unint64_t v12 = *((int *)a2 + 29);
    unint64_t v27 = v12;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, &v27);
    if (v13 != v10) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v13 + 3), (std::string *)v10[3], (std::string *)v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    }
    uint64_t v14 = (char *)a2[9];
    unint64_t v15 = a2[10];
    if ((unint64_t)v14 >= v15)
    {
      uint64_t v17 = (char *)a2[8];
      uint64_t v18 = (v14 - v17) >> 2;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = v15 - (void)v17;
      unint64_t v20 = (uint64_t)(v15 - (void)v17) >> 1;
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      BOOL v21 = v19 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v21) {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
        uint64_t v17 = (char *)a2[8];
        uint64_t v14 = (char *)a2[9];
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = (_DWORD *)(v22 + 4 * v18);
      unint64_t v25 = v22 + 4 * v23;
      _DWORD *v24 = *((_DWORD *)a2 + 28);
      unint64_t v16 = v24 + 1;
      while (v14 != v17)
      {
        int v26 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--uint64_t v24 = v26;
      }
      a2[8] = v24;
      a2[9] = v16;
      a2[10] = v25;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v14 = *((_DWORD *)a2 + 28);
      unint64_t v16 = v14 + 4;
    }
    a2[9] = v16;
    *(void *)&double result = 0x200000002;
    *(void *)(a2[2] + 808) = 0x200000002;
  }
  return result;
}

void sub_192AD4B48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2(uint64_t a1, void *a2)
{
  if (*(_WORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2) + 2) == 2)
  {
    uint64_t v4 = *(void *)(a2[15] + 32);
    int v5 = *(char **)(*(void *)(v4 + 16 * *((int *)a2 + 29)) + 64);
    uint64_t v6 = *(void *)(*(void *)(v4 + 16 * *((int *)a2 + 28)) + 64);
    uint64_t v7 = operator new(8uLL);
    *uint64_t v7 = v6;
    v30[1] = (uint64_t)(v7 + 1);
    v30[2] = (uint64_t)(v7 + 1);
    v30[0] = (uint64_t)v7;
    Espresso::merge_kernel_attributes(v5, v30);
    operator delete(v7);
    uint64_t v8 = a2[15] + 56;
    unint64_t v9 = *((int *)a2 + 28);
    v30[0] = v9;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v9, v30);
    uint64_t v11 = a2[15] + 56;
    unint64_t v12 = *((int *)a2 + 29);
    unint64_t v29 = v12;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, &v29);
    if (v13 != v10) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v13 + 3), (std::string *)v10[3], (std::string *)v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    }
    uint64_t v14 = (char *)a2[9];
    unint64_t v15 = a2[10];
    if ((unint64_t)v14 >= v15)
    {
      uint64_t v17 = (char *)a2[8];
      uint64_t v18 = (v14 - v17) >> 2;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = v15 - (void)v17;
      unint64_t v20 = (uint64_t)(v15 - (void)v17) >> 1;
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      BOOL v21 = v19 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v21) {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
        uint64_t v17 = (char *)a2[8];
        uint64_t v14 = (char *)a2[9];
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = (_DWORD *)(v22 + 4 * v18);
      unint64_t v25 = v22 + 4 * v23;
      _DWORD *v24 = *((_DWORD *)a2 + 28);
      unint64_t v16 = v24 + 1;
      while (v14 != v17)
      {
        int v26 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--uint64_t v24 = v26;
      }
      a2[8] = v24;
      a2[9] = v16;
      a2[10] = v25;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v14 = *((_DWORD *)a2 + 28);
      unint64_t v16 = v14 + 4;
    }
    a2[9] = v16;
    unint64_t v27 = (__n128 *)(*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2);
    uint64_t v28 = a2[2];
    __n128 result = *v27;
    *(_DWORD *)(v28 + 392) = v27[1].n128_u32[0];
    *(__n128 *)(v28 + 376) = result;
  }
  return result;
}

void sub_192AD4D78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso8V9Engine7context32network_transform_pre_allocationEPNS_3netE_block_invoke(uint64_t a1, void *a2)
{
  if (*(_WORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2) + 2) == 2)
  {
    uint64_t v4 = *(void *)(a2[15] + 32);
    int v5 = *(char **)(*(void *)(v4 + 16 * *((int *)a2 + 29)) + 64);
    uint64_t v6 = *(void *)(*(void *)(v4 + 16 * *((int *)a2 + 28)) + 64);
    uint64_t v7 = operator new(8uLL);
    *uint64_t v7 = v6;
    v31[1] = (uint64_t)(v7 + 1);
    v31[2] = (uint64_t)(v7 + 1);
    v31[0] = (uint64_t)v7;
    Espresso::merge_kernel_attributes(v5, v31);
    operator delete(v7);
    uint64_t v8 = a2[15] + 56;
    unint64_t v9 = *((int *)a2 + 28);
    v31[0] = v9;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v9, v31);
    uint64_t v11 = a2[15] + 56;
    unint64_t v12 = *((int *)a2 + 29);
    unint64_t v30 = v12;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, &v30);
    if (v13 != v10) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v13 + 3), (std::string *)v10[3], (std::string *)v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    }
    uint64_t v14 = (char *)a2[9];
    unint64_t v15 = a2[10];
    if ((unint64_t)v14 >= v15)
    {
      uint64_t v17 = (char *)a2[8];
      uint64_t v18 = (v14 - v17) >> 2;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = v15 - (void)v17;
      unint64_t v20 = (uint64_t)(v15 - (void)v17) >> 1;
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      BOOL v21 = v19 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v21) {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
        uint64_t v17 = (char *)a2[8];
        uint64_t v14 = (char *)a2[9];
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = (_DWORD *)(v22 + 4 * v18);
      unint64_t v25 = v22 + 4 * v23;
      _DWORD *v24 = *((_DWORD *)a2 + 28);
      unint64_t v16 = v24 + 1;
      while (v14 != v17)
      {
        int v26 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--uint64_t v24 = v26;
      }
      a2[8] = v24;
      a2[9] = v16;
      a2[10] = v25;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v14 = *((_DWORD *)a2 + 28);
      unint64_t v16 = v14 + 4;
    }
    a2[9] = v16;
    unint64_t v27 = (__n128 *)(*(uint64_t (**)(void))(*(void *)*a2 + 320))(*a2);
    uint64_t v28 = (*(uint64_t (**)(void))(*(void *)a2[2] + 384))();
    unsigned __int32 v29 = v27[1].n128_u32[0];
    __n128 result = *v27;
    *(__n128 *)(v28 + 72) = *v27;
    *(_DWORD *)(v28 + 88) = v29;
  }
  return result;
}

void sub_192AD4FE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::context::~context(id *this)
{
  Espresso::context_metal::~context_metal(this);

  JUMPOUT(0x192FF16B0);
}

__n128 Espresso::V9Engine::context::begin_batch@<Q0>(id *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x120uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE38C4E0;
  Espresso::batch_metal::batch_metal((Espresso::batch_metal *)(v4 + 24), this);
  *((void *)v4 + 3) = &unk_1EE371728;
  [*((id *)v4 + 22) endEncoding];
  int v5 = (void *)*((void *)v4 + 22);
  *((void *)v4 + 22) = 0;

  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  char v7 = *((unsigned char *)this + 184);
  int v8 = *((_DWORD *)this + 42);
  v4[240] = *((unsigned char *)this + 172);
  *((_DWORD *)v4 + 59) = v8;
  v4[256] = v7;
  *a2 = result;
  return result;
}

void sub_192AD50EC(_Unwind_Exception *a1)
{
  Espresso::batch_metal::~batch_metal(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C4E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C4E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1B0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C1D0;
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 44) = 0;
  *((void *)v6 + 45) = 0;
  *((void *)v6 + 46) = 0;
  *((void *)v6 + 47) = 0;
  v6[384] = 1;
  *((void *)v6 + 49) = 0;
  v6[400] = 1;
  *((void *)v6 + 3) = &unk_1EE370148;
  *((void *)v6 + 51) = 0;
  *((void *)v6 + 43) = v10;
  *(_OWORD *)(v6 + 328) = v9;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD5290(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_noise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_noise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C1D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_noise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C1D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x180uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE38C3C8;
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 12);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE370F68;
  v6[45] = 0;
  v6[46] = 0;
  v6[47] = 1065353216;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD5418(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE38C278;
  uint64_t v7 = *a2;
  uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE370590;
  v6[38] = v7;
  v6[39] = 0;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD5560(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_flatten_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C278;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x228uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C320;
  long long v11 = a2[2];
  *(_OWORD *)int v12 = a2[3];
  *(_OWORD *)&v12[12] = *(long long *)((char *)a2 + 60);
  long long v9 = *a2;
  long long v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 51) = 0;
  *((void *)v6 + 52) = 0;
  *((void *)v6 + 3) = &unk_1EE370998;
  *((void *)v6 + 57) = 0x358637BD00000000;
  *((void *)v6 + 58) = 0;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *((_DWORD *)v6 + 118) = 0;
  *((_OWORD *)v6 + 30) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((void *)v6 + 64) = 0;
  *((_DWORD *)v6 + 130) = 1065353216;
  *((void *)v6 + 67) = 0;
  *((void *)v6 + 66) = 0;
  v6[544] = 0;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)&v12[12];
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD5718(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_batchnorm_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C320;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE38C208;
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 12);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE3702E0;
  v6[45] = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD5894(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C208;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE38C160;
  uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[38] = 0;
  v4[39] = 0;
  v4[3] = &unk_1EE36FE58;
  v4[40] = 0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_192AD59D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_crop_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C160;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x188uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C438;
  long long v11 = a2[2];
  *(_OWORD *)int v12 = a2[3];
  *(_OWORD *)&v12[12] = *(long long *)((char *)a2 + 60);
  long long v9 = *a2;
  long long v10 = a2[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE3712E0;
  *((void *)v6 + 48) = 0;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = *(_OWORD *)v12;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)&v12[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD5B58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_general_padding_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C438;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_activation_kernel,std::allocator<Espresso::V9Engine::v9_activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_activation_kernel,std::allocator<Espresso::V9Engine::v9_activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x1A8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C390;
  __n128 v9 = *(__n128 *)a3;
  long long v10 = *(_OWORD *)(a3 + 16);
  int v11 = *(_DWORD *)(a3 + 32);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((void *)v6 + 3) = &unk_1EE370DC8;
  *((void *)v6 + 52) = 0;
  *((_DWORD *)v6 + 90) = v11;
  __n128 result = v9;
  *(__n128 *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_192AD5D80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C390;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::V9Engine::v9_activation_kernel,std::allocator<Espresso::V9Engine::v9_activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1B8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C2E8;
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v13 = *((void *)a2 + 8);
  long long v9 = *a2;
  long long v10 = a2[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE370840;
  *((_DWORD *)v6 + 106) = 0;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(void *)(v6 + 428) = 1065353216;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = v12;
  *((void *)v6 + 46) = v13;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD5F50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1B8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C240;
  long long v9 = *a2;
  long long v10 = a2[1];
  *(_OWORD *)long long v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE370438;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_DWORD *)v6 + 108) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD60D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C240;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x2D0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C400;
  long long v16 = a2[6];
  long long v17 = a2[7];
  int v18 = *((_DWORD *)a2 + 32);
  long long v12 = a2[2];
  long long v13 = a2[3];
  long long v14 = a2[4];
  long long v15 = a2[5];
  long long v10 = *a2;
  long long v11 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE3710C0;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  v6[480] = 0;
  *((void *)v6 + 71) = 0;
  *((_OWORD *)v6 + 36) = 0u;
  *((void *)v6 + 74) = -1;
  *((void *)v6 + 75) = 0;
  *((void *)v6 + 76) = -1;
  *((void *)v6 + 77) = -1;
  *((void *)v6 + 78) = -1;
  *((_WORD *)v6 + 316) = -1;
  *((void *)v6 + 80) = 0;
  int64x2_t v7 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v6 + 648) = v7;
  *(int64x2_t *)(v6 + 664) = v7;
  *(int64x2_t *)(v6 + 680) = v7;
  *((void *)v6 + 87) = -1;
  *((_OWORD *)v6 + 44) = 0u;
  *(_OWORD *)(v6 + 424) = v16;
  *(_OWORD *)(v6 + 440) = v17;
  *((_DWORD *)v6 + 114) = v18;
  *(_OWORD *)(v6 + 360) = v12;
  *(_OWORD *)(v6 + 376) = v13;
  *(_OWORD *)(v6 + 392) = v14;
  *(_OWORD *)(v6 + 408) = v15;
  *(_OWORD *)(v6 + 328) = v10;
  *(_OWORD *)(v6 + 344) = v11;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD62D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 576);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C400;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C2B0;
  *(_OWORD *)long long v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 83) = 0;
  *((void *)v6 + 3) = &unk_1EE3706E8;
  *((void *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD6488(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C0B8;
  *(_OWORD *)long long v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE36F9A0;
  *((void *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD65F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_lrn_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C0B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C0B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x210uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C198;
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[6];
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  long long v12 = a2[3];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 56) = 0;
  *((void *)v6 + 57) = 0;
  *((void *)v6 + 55) = 0;
  *((void *)v6 + 3) = &unk_1EE36FFB0;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD6798(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::v9_pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C198;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso8V9Engine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  int v26 = a3;
  int v7 = *(_DWORD *)(a2 + 44);
  if (v7 >= 2 && v7 == *(_DWORD *)(a2 + 116))
  {
    long long v9 = (char *)operator new(0x2E8uLL);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)long long v9 = &unk_1EE38C358;
    long long v11 = *(_OWORD *)(a2 + 144);
    long long v35 = *(_OWORD *)(a2 + 128);
    v36[0] = v11;
    *(void *)&v36[1] = *(void *)(a2 + 160);
    long long v12 = *(_OWORD *)(a2 + 80);
    long long v31 = *(_OWORD *)(a2 + 64);
    long long v32 = v12;
    long long v13 = *(_OWORD *)(a2 + 112);
    long long v33 = *(_OWORD *)(a2 + 96);
    long long v34 = v13;
    long long v14 = *(_OWORD *)(a2 + 16);
    long long v27 = *(_OWORD *)a2;
    long long v28 = v14;
    long long v15 = *(_OWORD *)(a2 + 48);
    long long v29 = *(_OWORD *)(a2 + 32);
    long long v30 = v15;
    unint64_t v10 = (unint64_t)Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v9 + 3, a1);
    *((void *)v9 + 3) = &unk_1EE370B48;
    *((_OWORD *)v9 + 35) = 0u;
    *((_OWORD *)v9 + 34) = 0u;
    *((_OWORD *)v9 + 33) = 0u;
    *((_OWORD *)v9 + 32) = 0u;
    *((_OWORD *)v9 + 36) = 0u;
    v9[608] = 0;
    *((_OWORD *)v9 + 37) = 0u;
    *((void *)v9 + 77) = -1;
    *((void *)v9 + 78) = 0;
    *((void *)v9 + 84) = 0;
    int64x2_t v16 = vdupq_n_s64(1uLL);
    *(int64x2_t *)(v9 + 680) = v16;
    *(int64x2_t *)(v9 + 696) = v16;
    *(int64x2_t *)(v9 + 712) = v16;
    *(_OWORD *)(v9 + 728) = 0u;
    long long v17 = v28;
    *(_OWORD *)(v9 + 328) = v27;
    *(_OWORD *)(v9 + 344) = v17;
    long long v18 = v29;
    long long v19 = v30;
    long long v20 = v32;
    *(_OWORD *)(v9 + 392) = v31;
    *(_OWORD *)(v9 + 408) = v20;
    *(_OWORD *)(v9 + 360) = v18;
    *(_OWORD *)(v9 + 376) = v19;
    long long v21 = v33;
    long long v22 = v34;
    long long v23 = v35;
    long long v24 = v36[0];
    *(void *)(v9 + 485) = *(void *)((char *)v36 + 13);
    *(_OWORD *)(v9 + 456) = v23;
    *(_OWORD *)(v9 + 472) = v24;
    *(_OWORD *)(v9 + 424) = v21;
    *(_OWORD *)(v9 + 440) = v22;
  }
  else
  {
    long long v9 = (char *)operator new(0x348uLL);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)long long v9 = &unk_1EE38C128;
    unint64_t v10 = Espresso::V9Engine::v9_conv_kernel::v9_conv_kernel((uint64_t)(v9 + 24), a1, &v26, (long long *)a2);
  }
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v9;
  *a4 = result;
  return result;
}

void sub_192AD6A0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_depthwise_kernel>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 592);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_depthwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C358;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::v9_depthwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::V9Engine::engine::~engine(Espresso::V9Engine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  int v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::V9Engine::engine::create_context@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x108uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C550;
  Espresso::context_metal::context_metal((uint64_t)(v6 + 24), a1, a2);
  *((void *)v6 + 3) = &unk_1EE3717E0;
  *((_DWORD *)v6 + 61) = 16843009;
  v6[248] = 1;
  *(void *)(v6 + 252) = 0xFFFFFFFF00000000;
  v6[68] = 1;
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v9);
  int v7 = (std::__shared_weak_count *)*((void *)v6 + 7);
  *((_OWORD *)v6 + 3) = v9;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  [*((id *)v6 + 23) setKernelPrefix:@"V9_"];
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192AD6CB0(_Unwind_Exception *a1)
{
  Espresso::context_metal::~context_metal(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<Espresso::wisdom_kernel_key const,std::map<std::string,int>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 104, *(char **)(a1 + 112));
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::wisdom_manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::wisdom_manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 Espresso::V9Engine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x128uLL);
  unint64_t v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE38C0F0;
  unint64_t v8 = (unint64_t)(v6 + 3);
  uint64_t v9 = *a1;
  unint64_t v10 = (std::__shared_weak_count *)a1[1];
  v12[0] = v9;
  v12[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::MetalLowmemEngine::blob_container::blob_container(v6 + 3, v12, a2);
  *(void *)(v7 + 24) = &unk_1EE36FAF8;
  *(_OWORD *)(v7 + 256) = 0u;
  *(_OWORD *)(v7 + 272) = 0u;
  *(void *)(v7 + 288) = 0;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

void sub_192AD6E9C(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::V9Engine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::V9Engine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::V9Engine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

id Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::transformkname(uint64_t a1, void *a2)
{
  id v2 = a2;

  return v2;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 600) && *(void *)(a1 + 624))
  {
    if (!*(void *)a2
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v5 = v4;
    uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v4[72]) {
      uint64_t v7 = 72;
    }
    else {
      uint64_t v7 = 74;
    }
    objc_storeStrong((id *)(a1 + 576), (id)v4[v7]);
    if (v5[74]) {
      uint64_t v8 = 74;
    }
    else {
      uint64_t v8 = 72;
    }
    objc_storeStrong((id *)(a1 + 592), (id)v5[v8]);
    if (v6)
    {
      nitro::nitro_function::nitro_function(v6);
    }
  }
}

void sub_192AD70C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::tmp_aux_buffer_create(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 600) && *(void *)(a1 + 624))
  {
    int v3 = *(const void **)(a1 + 8);
    if (!v3
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = [v5[18] newBufferWithLength:a2 options:0];
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    uint64_t v8 = 576;
    if ((*(_DWORD *)(a1 + 560) - 1) < 2) {
      uint64_t v8 = 592;
    }
    uint64_t v9 = *(void **)(a1 + v8);
    *(void *)(a1 + v8) = v7;
  }
}

void sub_192AD722C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::tmp_aux_buffer_size(uint64_t a1)
{
  if (!*(void *)(a1 + 600) || !*(void *)(a1 + 624)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 752);
  if ((*(_DWORD *)(a1 + 560) - 1) > 1) {
    unint64_t v2 = 4 * v1;
  }
  else {
    unint64_t v2 = 2 * v1;
  }
  if (v2 <= 0x10) {
    return 16;
  }
  else {
    return v2;
  }
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::load_wisdom_parameterset(uint64_t a1)
{
  *(void *)(a1 + 672) = *(void *)(a1 + 648);
  unint64_t v2 = (id *)(a1 + 680);
  objc_storeStrong((id *)(a1 + 680), *(id *)(a1 + 632));
  *(_DWORD *)(a1 + 720) = 1;
  uint64_t v5 = *(void *)(a1 + 8);
  __int32 v6 = *(_DWORD *)(a1 + 304);
  if (v6 <= *(_DWORD *)(a1 + 308)) {
    __int32 v6 = *(_DWORD *)(a1 + 308);
  }
  v3.i32[0] = 200;
  v4.i32[0] = v6;
  *(int8x8_t *)(a1 + 696) = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_s32(v3, v4), 0), (int8x8_t)0x800000004, (int8x8_t)0x80000000CLL);
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a1 + 656) == 1;
  if (!*(unsigned char *)(*(void *)(v5 + 24) + 152))
  {
    BOOL v15 = 0;
    goto LABEL_91;
  }
  uint64_t v105 = 0;
  *(_OWORD *)long long v104 = 0u;
  long long v102 = 0u;
  memset(v103, 0, sizeof(v103));
  *(_OWORD *)int v100 = 0u;
  *(_OWORD *)int v101 = 0u;
  MEMORY[0x192FF0F50](v100, "convolution");
  int32x2_t v7 = *(int32x2_t *)(a1 + 312);
  *(int32x2_t *)&long long v8 = v7;
  *((void *)&v8 + 1) = *(void *)(a1 + 344);
  *(_OWORD *)((char *)v103 + 4) = v8;
  DWORD1(v103[1]) = *(__int16 *)(a1 + 438);
  BYTE8(v103[1]) = *(_DWORD *)(a1 + 352);
  BYTE9(v103[1]) = *(_DWORD *)(a1 + 356);
  BYTE10(v103[1]) = *(unsigned char *)(a1 + 396);
  BYTE11(v103[1]) = *(unsigned char *)(a1 + 376);
  BYTE12(v103[1]) = *(_DWORD *)(a1 + 420);
  BYTE13(v103[1]) = *(_DWORD *)(a1 + 764);
  HIWORD(v103[1]) = 0;
  if (*(_DWORD *)(a1 + 132)) {
    *(int32x2_t *)((char *)v103 + 4) = vrev64_s32(v7);
  }
  unint64_t v10 = *(Espresso::wisdom_manager **)(v5 + 24);
  uint64_t v9 = *(std::__shared_weak_count **)(v5 + 32);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v92 = v9;
  std::string::operator=((std::string *)&v101[1], (const std::string *)(a1 + 104));
  LODWORD(v103[0]) = *(_DWORD *)(a1 + 128);
  Espresso::wisdom_manager::get_parameters(v10, (const Espresso::wisdom_kernel_key *)v100, v99);
  if (v99[2])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_4chan");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    *(_DWORD *)(a1 + 724) = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_elements_per_thread");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    int v11 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "block_size_x");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    int v12 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "block_size_y");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    int v13 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_manypar");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    BOOL v14 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14) != 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "cost");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_smem");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    BOOL v91 = v14;
  }
  else
  {
    BOOL v91 = 0;
    int v11 = *(_DWORD *)(a1 + 652) * *(_DWORD *)(a1 + 648);
    int v12 = *(_DWORD *)(a1 + 696);
    int v13 = *(_DWORD *)(a1 + 700);
  }
  int v16 = *(_DWORD *)(a1 + 132);
  if (v16) {
    int v17 = v12;
  }
  else {
    int v17 = v13;
  }
  if (!v16) {
    int v13 = v12;
  }
  __int16 v18 = *(_WORD *)(a1 + 376);
  BOOL v19 = !v18 && !*(_WORD *)(a1 + 384) && !*(_WORD *)(a1 + 386) && !*(_WORD *)(a1 + 388) && *(_WORD *)(a1 + 390) == 0;
  int v20 = *(_DWORD *)(a1 + 352);
  if (v20 <= *(_DWORD *)(a1 + 356)) {
    int v20 = *(_DWORD *)(a1 + 356);
  }
  unsigned int v21 = v20 - 1;
  if (v21 < 0xB && ((0x5DFu >> v21) & 1) != 0)
  {
    id v23 = *v2;
    *unint64_t v2 = off_1E57478A0[v21];

    long long v22 = 0;
  }
  else
  {
    long long v22 = (void *)[*v2 copy];
  }
  if ((v18 & 0xFFFE) == 2 || v19)
  {
    uint64_t v24 = [*v2 stringByAppendingString:@"_nopad"];
    id v25 = *v2;
    *unint64_t v2 = (id)v24;
  }
  if (*(int *)(a1 + 420) >= 2)
  {
    uint64_t v26 = [*v2 stringByAppendingString:@"_groups"];
    id v27 = *v2;
    *unint64_t v2 = (id)v26;
  }
  int v28 = *(_DWORD *)(a1 + 724);
  switch(v28)
  {
    case 4:
      *(_DWORD *)(a1 + 656) = 4;
      id v30 = *(id *)(a1 + 680);
      long long v31 = @"err(4z)";
      goto LABEL_53;
    case 3:
      *(_DWORD *)(a1 + 656) = 3;
      id v30 = *(id *)(a1 + 680);
      long long v31 = @"err(3z)";
LABEL_53:
      *(void *)(a1 + 680) = v31;
      goto LABEL_54;
    case 1:
      *(_DWORD *)(a1 + 656) = 1;
      uint64_t v29 = [@"fourchan_" stringByAppendingString:*(void *)(a1 + 680)];
      id v30 = *v2;
      *unint64_t v2 = (id)v29;
LABEL_54:

      goto LABEL_56;
  }
  *(_DWORD *)(a1 + 656) = 2;
LABEL_56:
  if (*(__int16 *)(a1 + 396) > 1 || *(__int16 *)(a1 + 398) >= 2) {
    int v11 = 2;
  }
  if (*(_DWORD *)(a1 + 412)) {
    long long v32 = @"_ncc";
  }
  else {
    long long v32 = @"_";
  }
  int v33 = *(_DWORD *)(a1 + 352);
  int v34 = *(_DWORD *)(a1 + 356);
  long long v35 = @"xy";
  if (v33 <= 1)
  {
    if (v34 > 1 && v33 == 1) {
      long long v35 = @"y";
    }
  }
  else if (v34 == 1)
  {
    long long v35 = @"x";
  }
  switch(v11)
  {
    case 1:
      uint64_t v37 = [NSString stringWithFormat:@"morechan_t1x1%@%@_%@", v32, v35, *v2];
      long long v38 = *(void **)(a1 + 680);
      *(void *)(a1 + 680) = v37;

      uint64_t v39 = 0x100000001;
      goto LABEL_77;
    case 2:
      uint64_t v44 = [NSString stringWithFormat:@"morechan_t1x2%@%@_%@", v32, v35, *v2];
      unsigned int v45 = *(void **)(a1 + 680);
      *(void *)(a1 + 680) = v44;

      uint64_t v39 = 0x200000001;
      goto LABEL_77;
    case 4:
      uint64_t v40 = [NSString stringWithFormat:@"morechan_t2x2%@%@_%@", v32, v35, *v2];
      int v41 = *(void **)(a1 + 680);
      *(void *)(a1 + 680) = v40;

      uint64_t v39 = 0x200000002;
      goto LABEL_77;
    case 6:
      uint64_t v46 = [NSString stringWithFormat:@"morechan_t2x3%@%@_%@", v32, v35, *v2];
      unsigned int v47 = *(void **)(a1 + 680);
      *(void *)(a1 + 680) = v46;

      uint64_t v39 = 0x300000002;
LABEL_77:
      *(void *)(a1 + 672) = v39;
      break;
    case 8:
      *(void *)(a1 + 672) = 0x400000002;
      unsigned int v42 = *(void **)(a1 + 680);
      unsigned int v43 = @"err(ket8)";
      goto LABEL_79;
    case 9:
      *(void *)(a1 + 672) = 0x300000003;
      unsigned int v42 = *(void **)(a1 + 680);
      unsigned int v43 = @"err(ket9)";
LABEL_79:
      *(void *)(a1 + 680) = v43;

      break;
    default:
      break;
  }
  *(_DWORD *)(a1 + 696) = v13;
  *(_DWORD *)(a1 + 700) = v17;
  BOOL v15 = v91;
  if ([v22 length] && (objc_msgSend(v22, "isEqualToString:", *v2) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v97, "load_wisdom_parameterset: kernel name was not reset: ");
    __int16 v89 = std::string::append(&v97, (const std::string::value_type *)[*v2 UTF8String]);
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::__tree<std::string>::destroy((uint64_t)v99, (char *)v99[1]);
  if (v92) {
    nitro::nitro_function::nitro_function(v92);
  }
  if (SHIBYTE(v105) < 0) {
    operator delete(v104[0]);
  }
  if (SHIBYTE(v102) < 0) {
    operator delete(v101[1]);
  }
  if (SHIBYTE(v101[0]) < 0) {
    operator delete(v100[0]);
  }

LABEL_91:
  *(void *)(a1 + 696) = 0x400000004;
  int v48 = *(_DWORD *)(a1 + 764);
  if (v48 == 2)
  {
    id v49 = *v2;
    int v50 = @"quantized_range8bit_";
  }
  else
  {
    if (v48 != 1)
    {
      if (v15 && *(int *)(a1 + 348) >= 16 && !(*(_DWORD *)(a1 + 348) & 7 | v48))
      {
        uint64_t v67 = [@"moreparallelism_" stringByAppendingString:*(void *)(a1 + 680)];
        uint64_t v68 = *(void **)(a1 + 680);
        *(void *)(a1 + 680) = v67;

        *(_DWORD *)(a1 + 720) = 2;
      }
      goto LABEL_96;
    }
    id v49 = *v2;
    int v50 = @"quantized_lut_";
  }
  uint64_t v51 = [(__CFString *)v50 stringByAppendingString:v49];
  id v52 = *v2;
  *unint64_t v2 = (id)v51;

LABEL_96:
  uint64_t v53 = (*(void (**)(uint64_t, void))(*(void *)a1 + 624))(a1, *(void *)(a1 + 680));
  int v54 = *(void **)(a1 + 680);
  *(void *)(a1 + 680) = v53;

  uint64_t v55 = [*(id *)(a1 + 680) stringByReplacingOccurrencesOfString:@"f32" withString:@"f16"];
  int v56 = *(void **)(a1 + 688);
  *(void *)(a1 + 688) = v55;

  *(_DWORD *)(a1 + 736) = 1;
  int v57 = *(_DWORD *)(a1 + 420);
  if (v57 <= 1) {
    int v57 = 1;
  }
  int v58 = (*(_DWORD *)(a1 + 348) - 1) / v57 / 4 + 1;
  if (*(unsigned char *)(a1 + 848)) {
    int v59 = 8 * v58 * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
  }
  else {
    int v59 = v58 * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
  }
  unsigned __int16 v60 = [*(id *)(v5 + 144) supportsFeatureSet:11];
  int v61 = *(_DWORD *)(a1 + 352);
  int v62 = *(_DWORD *)(a1 + 356);
  if (v62 * v61 >= 3) {
    int v63 = 200;
  }
  else {
    int v63 = 100;
  }
  if (!*(unsigned char *)(a1 + 760)) {
    int v63 = v63 >> (*(_DWORD *)(a1 + 764) == 2);
  }
  if (v59 > v63)
  {
    int v64 = 0;
    int v65 = v59 >> 1;
    if (v59 >> 1 >= 0x40) {
      int v65 = 64;
    }
    int v66 = 1;
    while (1)
    {
      if (!(v58 % v66))
      {
        int v64 = v66;
        if (v59 / v66 < v63) {
          break;
        }
      }
      if (v65 == ++v66) {
        goto LABEL_119;
      }
    }
    int v64 = v66;
LABEL_119:
    *(_DWORD *)(a1 + 736) = v64;
  }
  int v69 = *(__int16 *)(a1 + 376);
  switch(v69)
  {
    case 4:
      goto LABEL_123;
    case 2:
      unsigned __int16 v79 = 0;
      unsigned __int16 v80 = 0;
      break;
    case 1:
LABEL_123:
      int v70 = v62 - *(_DWORD *)(a1 + 316) + (*(_DWORD *)(a1 + 308) - 1) * *(__int16 *)(a1 + 398);
      int v71 = v61 - *(_DWORD *)(a1 + 312) + (*(_DWORD *)(a1 + 304) - 1) * *(__int16 *)(a1 + 396);
      unsigned int v72 = v70 & ~(v70 >> 31);
      unsigned int v73 = v71 & ~(v71 >> 31);
      int v74 = *(unsigned __int16 *)(a1 + 376);
      unsigned int v75 = v73 >> 1;
      unsigned int v76 = v73 - (v73 >> 1);
      unsigned int v77 = v72 >> 1;
      unsigned int v78 = v72 - (v72 >> 1);
      if (v74 == 1) {
        unsigned __int16 v79 = v75;
      }
      else {
        unsigned __int16 v79 = v76;
      }
      if (v74 == 1) {
        unsigned __int16 v80 = v77;
      }
      else {
        unsigned __int16 v80 = v78;
      }
      break;
    default:
      unsigned __int16 v79 = *(_WORD *)(a1 + 384);
      unsigned __int16 v80 = *(_WORD *)(a1 + 388);
      break;
  }
  uint64_t v81 = (MTLFunctionConstantValues *)objc_opt_new();
  uint64_t v82 = v81;
  LOWORD(v100[0]) = *(_DWORD *)(a1 + 348);
  int v83 = *(_DWORD *)(a1 + 344);
  LOWORD(v99[0]) = v83;
  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 396);
  LOWORD(v97.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 420);
  if (*(unsigned char *)(a1 + 848)) {
    LOWORD(v97.__r_.__value_.__l.__data_) = v83 / 8;
  }
  unsigned __int16 v96 = *(_DWORD *)(a1 + 736);
  unsigned __int16 v95 = v60;
  [(MTLFunctionConstantValues *)v81 setConstantValue:v100 type:37 atIndex:0];
  [(MTLFunctionConstantValues *)v82 setConstantValue:v99 type:37 atIndex:1];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&__p type:37 atIndex:2];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v97 type:41 atIndex:3];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v96 type:41 atIndex:4];
  unsigned __int16 v94 = v79;
  unsigned __int16 v93 = v80;
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v94 type:41 atIndex:5];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v93 type:41 atIndex:6];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v95 type:41 atIndex:7];
  objc_msgSend(NSString, "stringWithFormat:", @"k%d_c%d_s%d_g%d_s%d_px%d_py%d_d%d", SLOWORD(v100[0]), SLOWORD(v99[0]), SLOWORD(__p.__r_.__value_.__l.__data_), LOWORD(v97.__r_.__value_.__l.__data_), v96, v94, v93, v95);
  int v84 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (*(_DWORD *)(a1 + 560))
  {
    uint64_t v85 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v5, *(NSString **)(a1 + 688), v84, v82);
    __int16 v86 = *(void **)(a1 + 712);
    *(void *)(a1 + 712) = v85;
  }
  else
  {
    uint64_t v87 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v5, (NSString *)*v2, v84, v82);
    __int16 v86 = *(void **)(a1 + 704);
    *(void *)(a1 + 704) = v87;
  }
}

void sub_192AD7E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,char *a33,uint64_t a34,void *a35)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v35 & 1) == 0)
    {
LABEL_8:
      std::__tree<std::string>::destroy((uint64_t)&a32, a33);
      if (a18) {
        nitro::nitro_function::nitro_function(a18);
      }
      Espresso::wisdom_kernel_key::~wisdom_kernel_key(&a35);

      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void Espresso::wisdom_kernel_key::~wisdom_kernel_key(void **this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::__launch(uint64_t a1, id **a2, _DWORD ***a3, const void ***a4)
{
  int32x2_t v7 = *a4;
  long long v8 = **a4;
  if (v8
  {
    uint64_t v9 = (std::__shared_weak_count *)v7[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v134 = 0;
  }
  unint64_t v10 = *a3;
  int v11 = **a3;
  if (v12)
  {
    int v13 = (std::__shared_weak_count *)v10[1];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      int v11 = **a3;
    }
  }
  else
  {
    int v13 = 0;
  }
  int v135 = v11[5];
  BOOL v14 = *a2;
  uint64_t v136 = *(void *)(a1 + 8);
  [(*a2)[19] endEncoding];
  (*((void (**)(id *))*v14 + 9))(v14);
  *(unsigned char *)(a1 + 728) = *((unsigned char *)v14 + 216);
  *(_DWORD *)(a1 + 732) = *((_DWORD *)v14 + 53);
  id v15 = v14[19];
  int v17 = v12[2];
  int v16 = v12[3];
  int v127 = [*(id *)(v136 + 144) supportsFeatureSet:11];
  __int16 v18 = (_DWORD *)(a1 + 304);
  BOOL v19 = *(void **)(a1 + 568);
  int v132 = v17;
  int v133 = v16;
  __int16 v129 = v13;
  __int16 v130 = v9;
  __int16 v131 = v14;
  if (v19 && v135 == *(__int16 *)(a1 + 438) && v17 == *v18 && v16 == *(_DWORD *)(a1 + 308))
  {
    BOOL v128 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 304) = v17;
    *(_DWORD *)(a1 + 308) = v16;
    *(void *)(a1 + 312) = v134[1];
    *(_WORD *)(a1 + 438) = v135;
    *(_DWORD *)(a1 + 324) = v12[51];
    *(void *)(a1 + 568) = 0;

    uint64_t v20 = [*(id *)(v136 + 144) newBufferWithBytes:a1 + 304 length:168 options:0];
    unsigned int v21 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = v20;

    (*(void (**)(uint64_t, id **))(*(void *)a1 + 88))(a1, a2);
    BOOL v128 = *(_DWORD *)(a1 + 736) > 1;
  }
  id v138 = *(id *)(a1 + 576);
  id v137 = *(id *)(a1 + 584);
  long long v22 = (void *)(a1 + 664);
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v12 + 32))(v12) == 1)
  {
    objc_storeStrong((id *)(a1 + 664), *(id *)(a1 + 712));
    id v23 = *(id *)(a1 + 592);

    id v24 = *(id *)(a1 + 608);
    if (v24)
    {
      id v137 = v24;
      id v138 = v23;
    }
    else
    {
      uint64_t v25 = *(int *)(a1 + 344);
      *(void *)(a1 + 744) = v25;
      uint64_t v26 = *(const void **)(a1 + 8);
      if (!v26
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
      }
      int v28 = *(std::__shared_weak_count **)(a1 + 16);
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v25 = *(void *)(a1 + 744);
      }
      uint64_t v29 = (void *)v27[18];
      if ((unint64_t)(2 * v25) <= 0x10) {
        uint64_t v30 = 16;
      }
      else {
        uint64_t v30 = 2 * v25;
      }
      uint64_t v31 = [v29 newBufferWithLength:v30 options:0];
      long long v32 = *(void **)(a1 + 608);
      *(void *)(a1 + 608) = v31;

      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      bzero((void *)[*(id *)(a1 + 608) contents], objc_msgSend(*(id *)(a1 + 608), "length"));
      id v137 = *(id *)(a1 + 608);
      id v138 = v23;
    }
    long long v22 = (void *)(a1 + 664);
  }
  else
  {
    objc_storeStrong((id *)(a1 + 664), *(id *)(a1 + 704));
  }
  if (*(void *)(a1 + 600) && *(void *)(a1 + 624))
  {
    __int16 v124 = v22;
    int v33 = *a2;
    int v34 = *(void **)(*(void *)(a1 + 8) + 160);
    if (*(_DWORD *)(a1 + 560))
    {
      __int16 v125 = [v34 kernelForFunction:"dequantize_range_f16" cacheString:0 withConstants:0];
      int v35 = (id *)(a1 + 592);
    }
    else
    {
      __int16 v125 = [v34 kernelForFunction:"dequantize_range_f32" cacheString:0 withConstants:0];
      int v35 = (id *)(a1 + 576);
    }
    id v126 = *v35;
    id v36 = v33[19];
    uint64_t v37 = v36;
    if (!v125)
    {
      __int16 v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v121, "Kernel not found");
      __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    objc_msgSend(v36, "setComputePipelineState:");
    if (*(int *)(a1 + 348) <= 4) {
      int v38 = 4;
    }
    else {
      int v38 = *(_DWORD *)(a1 + 348);
    }
    if (*(int *)(a1 + 420) <= 1) {
      int v39 = 1;
    }
    else {
      int v39 = *(_DWORD *)(a1 + 420);
    }
    if (!v126)
    {
      int v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v122, "Inconsistent state");
      __cxa_throw(v122, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v40 = *(_DWORD *)(a1 + 352);
    int v41 = *(_DWORD *)(a1 + 356);
    int v42 = *(_DWORD *)(a1 + 344);
    [v37 setBuffer:*(void *)(a1 + 600) offset:0 atIndex:0];
    [v37 setBuffer:*(void *)(a1 + 624) offset:0 atIndex:1];
    [v37 setBuffer:v126 offset:0 atIndex:2];
    [v37 setBuffer:*(void *)(a1 + 568) offset:0 atIndex:3];
    int v43 = v42 * (v38 * v40 * v41 / v39) / 4;
    int v45 = v43 - 1;
    BOOL v44 = v43 < 1;
    int v46 = v43 + 62;
    if (!v44) {
      int v46 = v45;
    }
    uint64_t v149 = (v46 >> 6) + 1;
    int64x2_t v150 = vdupq_n_s64(1uLL);
    long long v147 = xmmword_192DCA430;
    uint64_t v148 = 1;
    [v37 dispatchThreadgroups:&v149 threadsPerThreadgroup:&v147];

    long long v22 = v124;
  }
  if (v128)
  {
    unsigned int v47 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = 0;
  }
  if (!*v22)
  {
    int v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v119, "Kernel not found");
    __cxa_throw(v119, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  objc_msgSend(v15, "setComputePipelineState:");
  [v15 setTexture:v134[21] atIndex:0];
  [v15 setBuffer:*((void *)v12 + 20) offset:0 atIndex:3];
  [v15 setBuffer:*(void *)(a1 + 568) offset:0 atIndex:0];
  [v15 setBuffer:v138 offset:0 atIndex:1];
  [v15 setBuffer:v137 offset:0 atIndex:2];
  int v48 = *(_DWORD *)(a1 + 764);
  switch(v48)
  {
    case 2:
      [v15 setBuffer:*(void *)(a1 + 624) offset:0 atIndex:4];
      break;
    case 3:
      id v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v49, "not supported");
LABEL_159:
      __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    case 1:
      [v15 setBuffer:*(void *)(a1 + 616) offset:0 atIndex:4];
      id v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v49, "shaders disabled");
      goto LABEL_159;
  }
  int v50 = *(_DWORD *)(a1 + 344);
  int v51 = v50 - 1;
  BOOL v44 = v50 < 1;
  int v52 = v50 + 2;
  if (v44) {
    int v53 = v52;
  }
  else {
    int v53 = v51;
  }
  if (v127) {
    unsigned int v54 = -1;
  }
  else {
    unsigned int v54 = 0;
  }
  int8x8_t v55 = (int8x8_t)vdup_n_s32(v54);
  int8x8_t v56 = vbsl_s8(v55, (int8x8_t)0x800000008, (int8x8_t)0x400000004);
  if (v127) {
    unsigned int v57 = 8;
  }
  else {
    unsigned int v57 = 4;
  }
  v55.i32[0] = -1110651699;
  if (v127) {
    *(float *)v55.i32 = 0.001;
  }
  *(int8x8_t *)(a1 + 696) = v56;
  int v58 = *(_DWORD *)(a1 + 672);
  if (v127) {
    char v59 = 3;
  }
  else {
    char v59 = 2;
  }
  int v60 = v132 % (v58 << v59);
  unsigned int v61 = v57;
  if (v60)
  {
    float v62 = (float)v132;
    unsigned int v61 = v57;
    if ((float)((float)v60 / (float)v132) > *(float *)v55.i32)
    {
      unsigned int v61 = v57 >> 1;
      *(_DWORD *)(a1 + 696) = v57 >> 1;
      int v60 = v132 % (int)((v57 >> 1) * v58);
    }
    if (v60)
    {
      if ((float)((float)v60 / v62) > *(float *)v55.i32)
      {
        v61 >>= 1;
        *(_DWORD *)(a1 + 696) = v61;
        int v60 = v132 % (int)(v61 * v58);
      }
      if (v60 && v61 >= 2 && (float)((float)v60 / v62) > *(float *)v55.i32)
      {
        v61 >>= 1;
        *(_DWORD *)(a1 + 696) = v61;
      }
    }
  }
  int v63 = v53 >> 2;
  int v64 = *(_DWORD *)(a1 + 676);
  int v65 = v133 % (v64 << v59);
  if (v65)
  {
    float v66 = (float)v133;
    if ((float)((float)v65 / (float)v133) > *(float *)v55.i32)
    {
      v57 >>= 1;
      *(_DWORD *)(a1 + 700) = v57;
      int v65 = v133 % (int)(v57 * v64);
    }
    if (v65)
    {
      if ((float)((float)v65 / v66) > *(float *)v55.i32)
      {
        v57 >>= 1;
        *(_DWORD *)(a1 + 700) = v57;
        int v65 = v133 % (int)(v57 * v64);
      }
      if (v65 && v57 >= 2 && (float)((float)v65 / v66) > *(float *)v55.i32)
      {
        v57 >>= 1;
        *(_DWORD *)(a1 + 700) = v57;
      }
    }
  }
  int v67 = v135 + v135 * v63;
  if (*(_DWORD *)(a1 + 784))
  {
    int v68 = 1;
    goto LABEL_91;
  }
  unsigned int v91 = v57 * v61;
  int v68 = 1;
  if (v127)
  {
    if (v91 <= 0x20)
    {
      int v92 = *(_DWORD *)(a1 + 656);
      int v68 = v67 % (2 * v92) ? 1 : 2;
      if (v91 <= 0x10)
      {
        if (!(v67 % (4 * v92))) {
          int v68 = 4;
        }
        if (v91 <= 8)
        {
          if (!(v67 % (8 * v92))) {
            int v68 = 8;
          }
          if (v91 <= 4)
          {
            if (!(v67 % (16 * v92))) {
              int v68 = 16;
            }
            if (v91 <= 2)
            {
              BOOL v93 = v67 % (32 * v92) == 0;
              int v94 = 32;
              goto LABEL_136;
            }
          }
        }
      }
    }
  }
  else if (v91 <= 8)
  {
    int v95 = *(_DWORD *)(a1 + 656);
    int v68 = v67 % (2 * v95) ? 1 : 2;
    if (v91 <= 4)
    {
      if (!(v67 % (4 * v95))) {
        int v68 = 4;
      }
      if (v91 <= 2)
      {
        BOOL v93 = v67 % (8 * v95) == 0;
        int v94 = 8;
LABEL_136:
        if (v93) {
          int v68 = v94;
        }
      }
    }
  }
LABEL_91:
  uint64_t v69 = *(void *)(v136 + 24);
  if (*(unsigned char *)(v69 + 152) && *(_DWORD *)(v69 + 156) && *(int *)(a1 + 736) <= 1)
  {
    int v70 = v67 - 1;
    int v71 = 10;
    do
    {
      uint64_t v72 = *(int *)(a1 + 696);
      uint64_t v73 = *(int *)(a1 + 700);
      uint64_t v74 = (v133 - 1) / (*(_DWORD *)(a1 + 676) * (int)v73) + 1;
      uint64_t v75 = v70 / (*(_DWORD *)(a1 + 656) * v68) + 1;
      v146[0] = (v132 - 1) / (*(_DWORD *)(a1 + 672) * (int)v72) + 1;
      v146[1] = v74;
      id v146[2] = v75;
      uint64_t v76 = *(int *)(a1 + 720) * (uint64_t)v68;
      v145[0] = v72;
      v145[1] = v73;
      void v145[2] = v76;
      objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", v146, v145, *(double *)&v55);
      --v71;
    }
    while (v71);
    [v131[19] endEncoding];
    (*((void (**)(void))*v131 + 9))();
    id v77 = v131[19];

    id v15 = v77;
    goto LABEL_152;
  }
  int v78 = *(_DWORD *)(a1 + 736);
  if (v78 >= 2)
  {
    int v79 = *(_DWORD *)(a1 + 420);
    if (v79 <= 1) {
      int v79 = 1;
    }
    if (*(_DWORD *)(a1 + 348) / v79 % (4 * v78))
    {
      __int16 v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v120, "Invalid parameter");
      __cxa_throw(v120, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(void *)(a1 + 568))
    {
      if (*(unsigned char *)(v69 + 152)) {
        goto LABEL_103;
      }
    }
    else
    {
      unsigned __int16 v96 = (char *)malloc_type_malloc(168 * v78, 0x10000405D2726C3uLL);
      std::string v97 = v96;
      LODWORD(v98) = *(_DWORD *)(a1 + 736);
      if ((int)v98 >= 1)
      {
        uint64_t v99 = 0;
        int v100 = v96;
        do
        {
          long long v101 = *(_OWORD *)(a1 + 336);
          long long v102 = *(_OWORD *)v18;
          *((_OWORD *)v100 + 1) = *(_OWORD *)(a1 + 320);
          *((_OWORD *)v100 + 2) = v101;
          *(_OWORD *)int v100 = v102;
          long long v103 = *(_OWORD *)(a1 + 352);
          long long v104 = *(_OWORD *)(a1 + 368);
          long long v105 = *(_OWORD *)(a1 + 400);
          *((_OWORD *)v100 + 5) = *(_OWORD *)(a1 + 384);
          *((_OWORD *)v100 + 6) = v105;
          *((_OWORD *)v100 + 3) = v103;
          *((_OWORD *)v100 + 4) = v104;
          long long v106 = *(_OWORD *)(a1 + 416);
          long long v107 = *(_OWORD *)(a1 + 432);
          long long v108 = *(_OWORD *)(a1 + 448);
          *(void *)(v100 + 157) = *(void *)(a1 + 461);
          *((_OWORD *)v100 + 8) = v107;
          *((_OWORD *)v100 + 9) = v108;
          *((_OWORD *)v100 + 7) = v106;
          *((_DWORD *)v100 + 4) = v99;
          uint64_t v98 = *(int *)(a1 + 736);
          *((_WORD *)v100 + 66) = v98;
          if (v99 < v98 - 1)
          {
            *((_DWORD *)v100 + 8) = 0;
            *((_DWORD *)v100 + 28) = 0;
            *((_DWORD *)v100 + 6) = 0;
          }
          ++v99;
          v100 += 168;
        }
        while (v99 < v98);
      }
      uint64_t v109 = [*(id *)(v136 + 144) newBufferWithBytes:v96 length:168 * (int)v98 options:0];
      int v110 = *(void **)(a1 + 568);
      *(void *)(a1 + 568) = v109;

      free(v97);
      uint64_t v69 = *(void *)(v136 + 24);
      if (*(unsigned char *)(v69 + 152))
      {
LABEL_103:
        LODWORD(v80) = *(_DWORD *)(a1 + 736);
        if (*(_DWORD *)(v69 + 156))
        {
          int v81 = 0;
          int v82 = v67 - 1;
          do
          {
            if ((int)v80 >= 1)
            {
              uint64_t v83 = 0;
              uint64_t v84 = 0;
              do
              {
                objc_msgSend(v15, "setBuffer:offset:atIndex:", *(void *)(a1 + 568), v83, 0, *(double *)&v55);
                uint64_t v85 = *(int *)(a1 + 696);
                uint64_t v86 = *(int *)(a1 + 700);
                uint64_t v87 = (v133 - 1) / (*(_DWORD *)(a1 + 676) * (int)v86) + 1;
                int v88 = *(_DWORD *)(a1 + 656) * v68;
                v144[0] = (v132 - 1) / (*(_DWORD *)(a1 + 672) * (int)v85) + 1;
                v144[1] = v87;
                v144[2] = v82 / v88 + 1;
                v143[0] = v85;
                v143[1] = v86;
                _OWORD v143[2] = v68;
                [v15 dispatchThreadgroups:v144 threadsPerThreadgroup:v143];
                ++v84;
                uint64_t v80 = *(int *)(a1 + 736);
                v83 += 168;
              }
              while (v84 < v80);
            }
            ++v81;
          }
          while (v81 != 10);
          goto LABEL_149;
        }
LABEL_146:
        if ((int)v80 >= 1)
        {
          uint64_t v111 = 0;
          uint64_t v112 = 0;
          int v113 = v67 - 1;
          do
          {
            objc_msgSend(v15, "setBuffer:offset:atIndex:", *(void *)(a1 + 568), v111, 0, *(double *)&v55);
            uint64_t v114 = *(int *)(a1 + 696);
            uint64_t v115 = *(int *)(a1 + 700);
            uint64_t v116 = (v133 - 1) / (*(_DWORD *)(a1 + 676) * (int)v115) + 1;
            int v117 = *(_DWORD *)(a1 + 656) * v68;
            v142[0] = (v132 - 1) / (*(_DWORD *)(a1 + 672) * (int)v114) + 1;
            v142[1] = v116;
            void v142[2] = v113 / v117 + 1;
            v141[0] = v114;
            v141[1] = v115;
            void v141[2] = v68;
            [v15 dispatchThreadgroups:v142 threadsPerThreadgroup:v141];
            ++v112;
            v111 += 168;
          }
          while (v112 < *(int *)(a1 + 736));
        }
        goto LABEL_149;
      }
    }
    LODWORD(v80) = *(_DWORD *)(a1 + 736);
    goto LABEL_146;
  }
  uint64_t v89 = (v67 - 1) / (*(_DWORD *)(a1 + 656) * v68) + 1;
  v140[0] = (v132 - 1) / (int)(v61 * v58) + 1;
  v140[1] = (v133 - 1) / (int)(v57 * v64) + 1;
  v140[2] = v89;
  uint64_t v90 = *(int *)(a1 + 720) * (uint64_t)v68;
  v139[0] = v61;
  v139[1] = v57;
  v139[2] = v90;
  objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", v140, v139, *(double *)&v55);
LABEL_149:
  int v118 = *(_DWORD *)(a1 + 420);
  if (v118 <= 1) {
    int v118 = 1;
  }
  Espresso::batch_metal::recreate_command_buffer_after_flops((uint64_t)v131, (double)*(int *)(a1 + 344) * (double)*(__int16 *)(a1 + 438) * (double)v132 * (double)v133+ (double)(*(_DWORD *)(a1 + 348) / v118)* (double)*(int *)(a1 + 344)* (double)*(int *)(a1 + 352)* (double)*(int *)(a1 + 356)* (double)*(__int16 *)(a1 + 438)* (double)v132* (double)v133* 2.0);
LABEL_152:

  if (v129) {
    nitro::nitro_function::nitro_function(v129);
  }
  if (v130) {
    nitro::nitro_function::nitro_function(v130);
  }
}

void sub_192AD8F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  __cxa_free_exception(v22);

  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  _Unwind_Resume(a1);
}

id Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::transformkname(uint64_t a1, void *a2)
{
  id v2 = a2;

  return v2;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 512) && *(void *)(a1 + 536))
  {
    if (!*(void *)a2
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v5 = v4;
    __int32 v6 = *(std::__shared_weak_count **)(a2 + 8);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v4[61]) {
      uint64_t v7 = 61;
    }
    else {
      uint64_t v7 = 63;
    }
    objc_storeStrong((id *)(a1 + 488), (id)v4[v7]);
    if (v5[63]) {
      uint64_t v8 = 63;
    }
    else {
      uint64_t v8 = 61;
    }
    objc_storeStrong((id *)(a1 + 504), (id)v5[v8]);
    if (v6)
    {
      nitro::nitro_function::nitro_function(v6);
    }
  }
}

void sub_192AD9184(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::tmp_aux_buffer_create(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 512) && *(void *)(a1 + 536))
  {
    int32x2_t v3 = *(const void **)(a1 + 8);
    if (!v3
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    __int32 v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = [v5[18] newBufferWithLength:a2 options:0];
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    uint64_t v8 = 488;
    if ((*(_DWORD *)(a1 + 472) - 1) < 2) {
      uint64_t v8 = 504;
    }
    uint64_t v9 = *(void **)(a1 + v8);
    *(void *)(a1 + v8) = v7;
  }
}

void sub_192AD92E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::tmp_aux_buffer_size(uint64_t a1)
{
  if (!*(void *)(a1 + 512) || !*(void *)(a1 + 536)) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 664);
  if ((*(_DWORD *)(a1 + 472) - 1) > 1) {
    unint64_t v2 = 4 * v1;
  }
  else {
    unint64_t v2 = 2 * v1;
  }
  if (v2 <= 0x10) {
    return 16;
  }
  else {
    return v2;
  }
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::load_wisdom_parameterset(uint64_t a1)
{
  *(void *)(a1 + 584) = *(void *)(a1 + 560);
  unint64_t v2 = (id *)(a1 + 592);
  objc_storeStrong((id *)(a1 + 592), *(id *)(a1 + 544));
  *(_DWORD *)(a1 + 632) = 1;
  uint64_t v5 = *(void *)(a1 + 8);
  __int32 v6 = *(_DWORD *)(a1 + 304);
  if (v6 <= *(_DWORD *)(a1 + 308)) {
    __int32 v6 = *(_DWORD *)(a1 + 308);
  }
  v3.i32[0] = 200;
  v4.i32[0] = v6;
  *(int8x8_t *)(a1 + 608) = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_s32(v3, v4), 0), (int8x8_t)0x800000004, (int8x8_t)0x80000000CLL);
  *(_DWORD *)(a1 + 636) = *(_DWORD *)(a1 + 568) == 1;
  if (!*(unsigned char *)(*(void *)(v5 + 24) + 152))
  {
    BOOL v15 = 0;
    goto LABEL_91;
  }
  uint64_t v105 = 0;
  *(_OWORD *)long long v104 = 0u;
  long long v102 = 0u;
  memset(v103, 0, sizeof(v103));
  *(_OWORD *)int v100 = 0u;
  *(_OWORD *)long long v101 = 0u;
  MEMORY[0x192FF0F50](v100, "convolution");
  int32x2_t v7 = *(int32x2_t *)(a1 + 312);
  *(int32x2_t *)&long long v8 = v7;
  *((void *)&v8 + 1) = *(void *)(a1 + 344);
  *(_OWORD *)((char *)v103 + 4) = v8;
  DWORD1(v103[1]) = *(__int16 *)(a1 + 438);
  BYTE8(v103[1]) = *(_DWORD *)(a1 + 352);
  BYTE9(v103[1]) = *(_DWORD *)(a1 + 356);
  BYTE10(v103[1]) = *(unsigned char *)(a1 + 396);
  BYTE11(v103[1]) = *(unsigned char *)(a1 + 376);
  BYTE12(v103[1]) = *(_DWORD *)(a1 + 420);
  BYTE13(v103[1]) = *(_DWORD *)(a1 + 676);
  HIWORD(v103[1]) = 0;
  if (*(_DWORD *)(a1 + 132)) {
    *(int32x2_t *)((char *)v103 + 4) = vrev64_s32(v7);
  }
  unint64_t v10 = *(Espresso::wisdom_manager **)(v5 + 24);
  uint64_t v9 = *(std::__shared_weak_count **)(v5 + 32);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v92 = v9;
  std::string::operator=((std::string *)&v101[1], (const std::string *)(a1 + 104));
  LODWORD(v103[0]) = *(_DWORD *)(a1 + 128);
  Espresso::wisdom_manager::get_parameters(v10, (const Espresso::wisdom_kernel_key *)v100, v99);
  if (v99[2])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_4chan");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    *(_DWORD *)(a1 + 636) = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_elements_per_thread");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    int v11 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "block_size_x");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    int v12 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "block_size_y");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    int v13 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_manypar");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    BOOL v14 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97)+ 14) != 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "cost");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_smem");
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v99, &__p, &v97);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    BOOL v91 = v14;
  }
  else
  {
    BOOL v91 = 0;
    int v11 = *(_DWORD *)(a1 + 564) * *(_DWORD *)(a1 + 560);
    int v12 = *(_DWORD *)(a1 + 608);
    int v13 = *(_DWORD *)(a1 + 612);
  }
  int v16 = *(_DWORD *)(a1 + 132);
  if (v16) {
    int v17 = v12;
  }
  else {
    int v17 = v13;
  }
  if (!v16) {
    int v13 = v12;
  }
  __int16 v18 = *(_WORD *)(a1 + 376);
  BOOL v19 = !v18 && !*(_WORD *)(a1 + 384) && !*(_WORD *)(a1 + 386) && !*(_WORD *)(a1 + 388) && *(_WORD *)(a1 + 390) == 0;
  int v20 = *(_DWORD *)(a1 + 352);
  if (v20 <= *(_DWORD *)(a1 + 356)) {
    int v20 = *(_DWORD *)(a1 + 356);
  }
  unsigned int v21 = v20 - 1;
  if (v21 < 0xB && ((0x5DFu >> v21) & 1) != 0)
  {
    id v23 = *v2;
    *unint64_t v2 = off_1E57478A0[v21];

    long long v22 = 0;
  }
  else
  {
    long long v22 = (void *)[*v2 copy];
  }
  if ((v18 & 0xFFFE) == 2 || v19)
  {
    uint64_t v24 = [*v2 stringByAppendingString:@"_nopad"];
    id v25 = *v2;
    *unint64_t v2 = (id)v24;
  }
  if (*(int *)(a1 + 420) >= 2)
  {
    uint64_t v26 = [*v2 stringByAppendingString:@"_groups"];
    id v27 = *v2;
    *unint64_t v2 = (id)v26;
  }
  int v28 = *(_DWORD *)(a1 + 636);
  switch(v28)
  {
    case 4:
      *(_DWORD *)(a1 + 568) = 4;
      id v30 = *(id *)(a1 + 592);
      uint64_t v31 = @"err(4z)";
      goto LABEL_53;
    case 3:
      *(_DWORD *)(a1 + 568) = 3;
      id v30 = *(id *)(a1 + 592);
      uint64_t v31 = @"err(3z)";
LABEL_53:
      *(void *)(a1 + 592) = v31;
      goto LABEL_54;
    case 1:
      *(_DWORD *)(a1 + 568) = 1;
      uint64_t v29 = [@"fourchan_" stringByAppendingString:*(void *)(a1 + 592)];
      id v30 = *v2;
      *unint64_t v2 = (id)v29;
LABEL_54:

      goto LABEL_56;
  }
  *(_DWORD *)(a1 + 568) = 2;
LABEL_56:
  if (*(__int16 *)(a1 + 396) > 1 || *(__int16 *)(a1 + 398) >= 2) {
    int v11 = 2;
  }
  if (*(_DWORD *)(a1 + 412)) {
    long long v32 = @"_ncc";
  }
  else {
    long long v32 = @"_";
  }
  int v33 = *(_DWORD *)(a1 + 352);
  int v34 = *(_DWORD *)(a1 + 356);
  int v35 = @"xy";
  if (v33 <= 1)
  {
    if (v34 > 1 && v33 == 1) {
      int v35 = @"y";
    }
  }
  else if (v34 == 1)
  {
    int v35 = @"x";
  }
  switch(v11)
  {
    case 1:
      uint64_t v37 = [NSString stringWithFormat:@"morechan_t1x1%@%@_%@", v32, v35, *v2];
      int v38 = *(void **)(a1 + 592);
      *(void *)(a1 + 592) = v37;

      uint64_t v39 = 0x100000001;
      goto LABEL_77;
    case 2:
      uint64_t v44 = [NSString stringWithFormat:@"morechan_t1x2%@%@_%@", v32, v35, *v2];
      int v45 = *(void **)(a1 + 592);
      *(void *)(a1 + 592) = v44;

      uint64_t v39 = 0x200000001;
      goto LABEL_77;
    case 4:
      uint64_t v40 = [NSString stringWithFormat:@"morechan_t2x2%@%@_%@", v32, v35, *v2];
      int v41 = *(void **)(a1 + 592);
      *(void *)(a1 + 592) = v40;

      uint64_t v39 = 0x200000002;
      goto LABEL_77;
    case 6:
      uint64_t v46 = [NSString stringWithFormat:@"morechan_t2x3%@%@_%@", v32, v35, *v2];
      unsigned int v47 = *(void **)(a1 + 592);
      *(void *)(a1 + 592) = v46;

      uint64_t v39 = 0x300000002;
LABEL_77:
      *(void *)(a1 + 584) = v39;
      break;
    case 8:
      *(void *)(a1 + 584) = 0x400000002;
      int v42 = *(void **)(a1 + 592);
      int v43 = @"err(ket8)";
      goto LABEL_79;
    case 9:
      *(void *)(a1 + 584) = 0x300000003;
      int v42 = *(void **)(a1 + 592);
      int v43 = @"err(ket9)";
LABEL_79:
      *(void *)(a1 + 592) = v43;

      break;
    default:
      break;
  }
  *(_DWORD *)(a1 + 608) = v13;
  *(_DWORD *)(a1 + 612) = v17;
  BOOL v15 = v91;
  if ([v22 length] && (objc_msgSend(v22, "isEqualToString:", *v2) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v97, "load_wisdom_parameterset: kernel name was not reset: ");
    uint64_t v89 = std::string::append(&v97, (const std::string::value_type *)[*v2 UTF8String]);
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::__tree<std::string>::destroy((uint64_t)v99, (char *)v99[1]);
  if (v92) {
    nitro::nitro_function::nitro_function(v92);
  }
  if (SHIBYTE(v105) < 0) {
    operator delete(v104[0]);
  }
  if (SHIBYTE(v102) < 0) {
    operator delete(v101[1]);
  }
  if (SHIBYTE(v101[0]) < 0) {
    operator delete(v100[0]);
  }

LABEL_91:
  *(void *)(a1 + 608) = 0x400000004;
  int v48 = *(_DWORD *)(a1 + 676);
  if (v48 == 2)
  {
    id v49 = *v2;
    int v50 = @"quantized_range8bit_";
  }
  else
  {
    if (v48 != 1)
    {
      if (v15 && *(int *)(a1 + 348) >= 16 && !(*(_DWORD *)(a1 + 348) & 7 | v48))
      {
        uint64_t v67 = [@"moreparallelism_" stringByAppendingString:*(void *)(a1 + 592)];
        int v68 = *(void **)(a1 + 592);
        *(void *)(a1 + 592) = v67;

        *(_DWORD *)(a1 + 632) = 2;
      }
      goto LABEL_96;
    }
    id v49 = *v2;
    int v50 = @"quantized_lut_";
  }
  uint64_t v51 = [(__CFString *)v50 stringByAppendingString:v49];
  id v52 = *v2;
  *unint64_t v2 = (id)v51;

LABEL_96:
  uint64_t v53 = (*(void (**)(uint64_t, void))(*(void *)a1 + 336))(a1, *(void *)(a1 + 592));
  unsigned int v54 = *(void **)(a1 + 592);
  *(void *)(a1 + 592) = v53;

  uint64_t v55 = [*(id *)(a1 + 592) stringByReplacingOccurrencesOfString:@"f32" withString:@"f16"];
  int8x8_t v56 = *(void **)(a1 + 600);
  *(void *)(a1 + 600) = v55;

  *(_DWORD *)(a1 + 648) = 1;
  int v57 = *(_DWORD *)(a1 + 420);
  if (v57 <= 1) {
    int v57 = 1;
  }
  int v58 = (*(_DWORD *)(a1 + 348) - 1) / v57 / 4 + 1;
  if (*(unsigned char *)(a1 + 760)) {
    int v59 = 8 * v58 * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
  }
  else {
    int v59 = v58 * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
  }
  unsigned __int16 v60 = [*(id *)(v5 + 144) supportsFeatureSet:11];
  int v61 = *(_DWORD *)(a1 + 352);
  int v62 = *(_DWORD *)(a1 + 356);
  if (v62 * v61 >= 3) {
    int v63 = 200;
  }
  else {
    int v63 = 100;
  }
  if (!*(unsigned char *)(a1 + 672)) {
    int v63 = v63 >> (*(_DWORD *)(a1 + 676) == 2);
  }
  if (v59 > v63)
  {
    int v64 = 0;
    int v65 = v59 >> 1;
    if (v59 >> 1 >= 0x40) {
      int v65 = 64;
    }
    int v66 = 1;
    while (1)
    {
      if (!(v58 % v66))
      {
        int v64 = v66;
        if (v59 / v66 < v63) {
          break;
        }
      }
      if (v65 == ++v66) {
        goto LABEL_119;
      }
    }
    int v64 = v66;
LABEL_119:
    *(_DWORD *)(a1 + 648) = v64;
  }
  int v69 = *(__int16 *)(a1 + 376);
  switch(v69)
  {
    case 4:
      goto LABEL_123;
    case 2:
      unsigned __int16 v79 = 0;
      unsigned __int16 v80 = 0;
      break;
    case 1:
LABEL_123:
      int v70 = v62 - *(_DWORD *)(a1 + 316) + (*(_DWORD *)(a1 + 308) - 1) * *(__int16 *)(a1 + 398);
      int v71 = v61 - *(_DWORD *)(a1 + 312) + (*(_DWORD *)(a1 + 304) - 1) * *(__int16 *)(a1 + 396);
      unsigned int v72 = v70 & ~(v70 >> 31);
      unsigned int v73 = v71 & ~(v71 >> 31);
      int v74 = *(unsigned __int16 *)(a1 + 376);
      unsigned int v75 = v73 >> 1;
      unsigned int v76 = v73 - (v73 >> 1);
      unsigned int v77 = v72 >> 1;
      unsigned int v78 = v72 - (v72 >> 1);
      if (v74 == 1) {
        unsigned __int16 v79 = v75;
      }
      else {
        unsigned __int16 v79 = v76;
      }
      if (v74 == 1) {
        unsigned __int16 v80 = v77;
      }
      else {
        unsigned __int16 v80 = v78;
      }
      break;
    default:
      unsigned __int16 v79 = *(_WORD *)(a1 + 384);
      unsigned __int16 v80 = *(_WORD *)(a1 + 388);
      break;
  }
  int v81 = (MTLFunctionConstantValues *)objc_opt_new();
  int v82 = v81;
  LOWORD(v100[0]) = *(_DWORD *)(a1 + 348);
  int v83 = *(_DWORD *)(a1 + 344);
  LOWORD(v99[0]) = v83;
  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)(a1 + 396);
  LOWORD(v97.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 420);
  if (*(unsigned char *)(a1 + 760)) {
    LOWORD(v97.__r_.__value_.__l.__data_) = v83 / 8;
  }
  unsigned __int16 v96 = *(_DWORD *)(a1 + 648);
  unsigned __int16 v95 = v60;
  [(MTLFunctionConstantValues *)v81 setConstantValue:v100 type:37 atIndex:0];
  [(MTLFunctionConstantValues *)v82 setConstantValue:v99 type:37 atIndex:1];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&__p type:37 atIndex:2];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v97 type:41 atIndex:3];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v96 type:41 atIndex:4];
  unsigned __int16 v94 = v79;
  unsigned __int16 v93 = v80;
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v94 type:41 atIndex:5];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v93 type:41 atIndex:6];
  [(MTLFunctionConstantValues *)v82 setConstantValue:&v95 type:41 atIndex:7];
  objc_msgSend(NSString, "stringWithFormat:", @"k%d_c%d_s%d_g%d_s%d_px%d_py%d_d%d", SLOWORD(v100[0]), SLOWORD(v99[0]), SLOWORD(__p.__r_.__value_.__l.__data_), LOWORD(v97.__r_.__value_.__l.__data_), v96, v94, v93, v95);
  uint64_t v84 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (*(_DWORD *)(a1 + 472))
  {
    uint64_t v85 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v5, *(NSString **)(a1 + 600), v84, v82);
    uint64_t v86 = *(void **)(a1 + 624);
    *(void *)(a1 + 624) = v85;
  }
  else
  {
    uint64_t v87 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v5, (NSString *)*v2, v84, v82);
    uint64_t v86 = *(void **)(a1 + 616);
    *(void *)(a1 + 616) = v87;
  }
}

void sub_192AD9EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,char *a33,uint64_t a34,void *a35)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v35 & 1) == 0)
    {
LABEL_8:
      std::__tree<std::string>::destroy((uint64_t)&a32, a33);
      if (a18) {
        nitro::nitro_function::nitro_function(a18);
      }
      Espresso::wisdom_kernel_key::~wisdom_kernel_key(&a35);

      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::__launch(uint64_t a1, id **a2, _DWORD ***a3, const void ***a4)
{
  int32x2_t v7 = *a4;
  long long v8 = **a4;
  if (v8
  {
    uint64_t v9 = (std::__shared_weak_count *)v7[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v134 = 0;
  }
  unint64_t v10 = *a3;
  int v11 = **a3;
  if (v12)
  {
    int v13 = (std::__shared_weak_count *)v10[1];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      int v11 = **a3;
    }
  }
  else
  {
    int v13 = 0;
  }
  int v135 = v11[5];
  BOOL v14 = *a2;
  uint64_t v136 = *(void *)(a1 + 8);
  [(*a2)[19] endEncoding];
  (*((void (**)(id *))*v14 + 9))(v14);
  *(unsigned char *)(a1 + 640) = *((unsigned char *)v14 + 216);
  *(_DWORD *)(a1 + 644) = *((_DWORD *)v14 + 53);
  id v15 = v14[19];
  int v17 = v12[2];
  int v16 = v12[3];
  int v127 = [*(id *)(v136 + 144) supportsFeatureSet:11];
  __int16 v18 = (_DWORD *)(a1 + 304);
  BOOL v19 = *(void **)(a1 + 480);
  int v132 = v17;
  int v133 = v16;
  __int16 v129 = v13;
  __int16 v130 = v9;
  __int16 v131 = v14;
  if (v19 && v135 == *(__int16 *)(a1 + 438) && v17 == *v18 && v16 == *(_DWORD *)(a1 + 308))
  {
    BOOL v128 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 304) = v17;
    *(_DWORD *)(a1 + 308) = v16;
    *(void *)(a1 + 312) = v134[1];
    *(_WORD *)(a1 + 438) = v135;
    *(_DWORD *)(a1 + 324) = v12[51];
    *(void *)(a1 + 480) = 0;

    uint64_t v20 = [*(id *)(v136 + 144) newBufferWithBytes:a1 + 304 length:168 options:0];
    unsigned int v21 = *(void **)(a1 + 480);
    *(void *)(a1 + 480) = v20;

    (*(void (**)(uint64_t, id **))(*(void *)a1 + 88))(a1, a2);
    BOOL v128 = *(_DWORD *)(a1 + 648) > 1;
  }
  id v138 = *(id *)(a1 + 488);
  id v137 = *(id *)(a1 + 496);
  long long v22 = (void *)(a1 + 576);
  if ((*(unsigned int (**)(_DWORD *))(*(void *)v12 + 32))(v12) == 1)
  {
    objc_storeStrong((id *)(a1 + 576), *(id *)(a1 + 624));
    id v23 = *(id *)(a1 + 504);

    id v24 = *(id *)(a1 + 520);
    if (v24)
    {
      id v137 = v24;
      id v138 = v23;
    }
    else
    {
      uint64_t v25 = *(int *)(a1 + 344);
      *(void *)(a1 + 656) = v25;
      uint64_t v26 = *(const void **)(a1 + 8);
      if (!v26
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
      }
      int v28 = *(std::__shared_weak_count **)(a1 + 16);
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v25 = *(void *)(a1 + 656);
      }
      uint64_t v29 = (void *)v27[18];
      if ((unint64_t)(2 * v25) <= 0x10) {
        uint64_t v30 = 16;
      }
      else {
        uint64_t v30 = 2 * v25;
      }
      uint64_t v31 = [v29 newBufferWithLength:v30 options:0];
      long long v32 = *(void **)(a1 + 520);
      *(void *)(a1 + 520) = v31;

      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      bzero((void *)[*(id *)(a1 + 520) contents], objc_msgSend(*(id *)(a1 + 520), "length"));
      id v137 = *(id *)(a1 + 520);
      id v138 = v23;
    }
    long long v22 = (void *)(a1 + 576);
  }
  else
  {
    objc_storeStrong((id *)(a1 + 576), *(id *)(a1 + 616));
  }
  if (*(void *)(a1 + 512) && *(void *)(a1 + 536))
  {
    __int16 v124 = v22;
    int v33 = *a2;
    int v34 = *(void **)(*(void *)(a1 + 8) + 160);
    if (*(_DWORD *)(a1 + 472))
    {
      __int16 v125 = [v34 kernelForFunction:"dequantize_range_f16" cacheString:0 withConstants:0];
      int v35 = (id *)(a1 + 504);
    }
    else
    {
      __int16 v125 = [v34 kernelForFunction:"dequantize_range_f32" cacheString:0 withConstants:0];
      int v35 = (id *)(a1 + 488);
    }
    id v126 = *v35;
    id v36 = v33[19];
    uint64_t v37 = v36;
    if (!v125)
    {
      __int16 v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v121, "Kernel not found");
      __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    objc_msgSend(v36, "setComputePipelineState:");
    if (*(int *)(a1 + 348) <= 4) {
      int v38 = 4;
    }
    else {
      int v38 = *(_DWORD *)(a1 + 348);
    }
    if (*(int *)(a1 + 420) <= 1) {
      int v39 = 1;
    }
    else {
      int v39 = *(_DWORD *)(a1 + 420);
    }
    if (!v126)
    {
      int v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v122, "Inconsistent state");
      __cxa_throw(v122, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v40 = *(_DWORD *)(a1 + 352);
    int v41 = *(_DWORD *)(a1 + 356);
    int v42 = *(_DWORD *)(a1 + 344);
    [v37 setBuffer:*(void *)(a1 + 512) offset:0 atIndex:0];
    [v37 setBuffer:*(void *)(a1 + 536) offset:0 atIndex:1];
    [v37 setBuffer:v126 offset:0 atIndex:2];
    [v37 setBuffer:*(void *)(a1 + 480) offset:0 atIndex:3];
    int v43 = v42 * (v38 * v40 * v41 / v39) / 4;
    int v45 = v43 - 1;
    BOOL v44 = v43 < 1;
    int v46 = v43 + 62;
    if (!v44) {
      int v46 = v45;
    }
    uint64_t v149 = (v46 >> 6) + 1;
    int64x2_t v150 = vdupq_n_s64(1uLL);
    long long v147 = xmmword_192DCA430;
    uint64_t v148 = 1;
    [v37 dispatchThreadgroups:&v149 threadsPerThreadgroup:&v147];

    long long v22 = v124;
  }
  if (v128)
  {
    unsigned int v47 = *(void **)(a1 + 480);
    *(void *)(a1 + 480) = 0;
  }
  if (!*v22)
  {
    int v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v119, "Kernel not found");
    __cxa_throw(v119, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  objc_msgSend(v15, "setComputePipelineState:");
  [v15 setTexture:v134[21] atIndex:0];
  [v15 setBuffer:*((void *)v12 + 20) offset:0 atIndex:3];
  [v15 setBuffer:*(void *)(a1 + 480) offset:0 atIndex:0];
  [v15 setBuffer:v138 offset:0 atIndex:1];
  [v15 setBuffer:v137 offset:0 atIndex:2];
  int v48 = *(_DWORD *)(a1 + 676);
  switch(v48)
  {
    case 2:
      [v15 setBuffer:*(void *)(a1 + 536) offset:0 atIndex:4];
      break;
    case 3:
      id v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v49, "not supported");
LABEL_159:
      __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    case 1:
      [v15 setBuffer:*(void *)(a1 + 528) offset:0 atIndex:4];
      id v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v49, "shaders disabled");
      goto LABEL_159;
  }
  int v50 = *(_DWORD *)(a1 + 344);
  int v51 = v50 - 1;
  BOOL v44 = v50 < 1;
  int v52 = v50 + 2;
  if (v44) {
    int v53 = v52;
  }
  else {
    int v53 = v51;
  }
  if (v127) {
    unsigned int v54 = -1;
  }
  else {
    unsigned int v54 = 0;
  }
  int8x8_t v55 = (int8x8_t)vdup_n_s32(v54);
  int8x8_t v56 = vbsl_s8(v55, (int8x8_t)0x800000008, (int8x8_t)0x400000004);
  if (v127) {
    unsigned int v57 = 8;
  }
  else {
    unsigned int v57 = 4;
  }
  v55.i32[0] = -1110651699;
  if (v127) {
    *(float *)v55.i32 = 0.001;
  }
  *(int8x8_t *)(a1 + 608) = v56;
  int v58 = *(_DWORD *)(a1 + 584);
  if (v127) {
    char v59 = 3;
  }
  else {
    char v59 = 2;
  }
  int v60 = v132 % (v58 << v59);
  unsigned int v61 = v57;
  if (v60)
  {
    float v62 = (float)v132;
    unsigned int v61 = v57;
    if ((float)((float)v60 / (float)v132) > *(float *)v55.i32)
    {
      unsigned int v61 = v57 >> 1;
      *(_DWORD *)(a1 + 608) = v57 >> 1;
      int v60 = v132 % (int)((v57 >> 1) * v58);
    }
    if (v60)
    {
      if ((float)((float)v60 / v62) > *(float *)v55.i32)
      {
        v61 >>= 1;
        *(_DWORD *)(a1 + 608) = v61;
        int v60 = v132 % (int)(v61 * v58);
      }
      if (v60 && v61 >= 2 && (float)((float)v60 / v62) > *(float *)v55.i32)
      {
        v61 >>= 1;
        *(_DWORD *)(a1 + 608) = v61;
      }
    }
  }
  int v63 = v53 >> 2;
  int v64 = *(_DWORD *)(a1 + 588);
  int v65 = v133 % (v64 << v59);
  if (v65)
  {
    float v66 = (float)v133;
    if ((float)((float)v65 / (float)v133) > *(float *)v55.i32)
    {
      v57 >>= 1;
      *(_DWORD *)(a1 + 612) = v57;
      int v65 = v133 % (int)(v57 * v64);
    }
    if (v65)
    {
      if ((float)((float)v65 / v66) > *(float *)v55.i32)
      {
        v57 >>= 1;
        *(_DWORD *)(a1 + 612) = v57;
        int v65 = v133 % (int)(v57 * v64);
      }
      if (v65 && v57 >= 2 && (float)((float)v65 / v66) > *(float *)v55.i32)
      {
        v57 >>= 1;
        *(_DWORD *)(a1 + 612) = v57;
      }
    }
  }
  int v67 = v135 + v135 * v63;
  if (*(_DWORD *)(a1 + 696))
  {
    int v68 = 1;
    goto LABEL_91;
  }
  unsigned int v91 = v57 * v61;
  int v68 = 1;
  if (v127)
  {
    if (v91 <= 0x20)
    {
      int v92 = *(_DWORD *)(a1 + 568);
      int v68 = v67 % (2 * v92) ? 1 : 2;
      if (v91 <= 0x10)
      {
        if (!(v67 % (4 * v92))) {
          int v68 = 4;
        }
        if (v91 <= 8)
        {
          if (!(v67 % (8 * v92))) {
            int v68 = 8;
          }
          if (v91 <= 4)
          {
            if (!(v67 % (16 * v92))) {
              int v68 = 16;
            }
            if (v91 <= 2)
            {
              BOOL v93 = v67 % (32 * v92) == 0;
              int v94 = 32;
              goto LABEL_136;
            }
          }
        }
      }
    }
  }
  else if (v91 <= 8)
  {
    int v95 = *(_DWORD *)(a1 + 568);
    int v68 = v67 % (2 * v95) ? 1 : 2;
    if (v91 <= 4)
    {
      if (!(v67 % (4 * v95))) {
        int v68 = 4;
      }
      if (v91 <= 2)
      {
        BOOL v93 = v67 % (8 * v95) == 0;
        int v94 = 8;
LABEL_136:
        if (v93) {
          int v68 = v94;
        }
      }
    }
  }
LABEL_91:
  uint64_t v69 = *(void *)(v136 + 24);
  if (*(unsigned char *)(v69 + 152) && *(_DWORD *)(v69 + 156) && *(int *)(a1 + 648) <= 1)
  {
    int v70 = v67 - 1;
    int v71 = 10;
    do
    {
      uint64_t v72 = *(int *)(a1 + 608);
      uint64_t v73 = *(int *)(a1 + 612);
      uint64_t v74 = (v133 - 1) / (*(_DWORD *)(a1 + 588) * (int)v73) + 1;
      uint64_t v75 = v70 / (*(_DWORD *)(a1 + 568) * v68) + 1;
      v146[0] = (v132 - 1) / (*(_DWORD *)(a1 + 584) * (int)v72) + 1;
      v146[1] = v74;
      id v146[2] = v75;
      uint64_t v76 = *(int *)(a1 + 632) * (uint64_t)v68;
      v145[0] = v72;
      v145[1] = v73;
      void v145[2] = v76;
      objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", v146, v145, *(double *)&v55);
      --v71;
    }
    while (v71);
    [v131[19] endEncoding];
    (*((void (**)(void))*v131 + 9))();
    id v77 = v131[19];

    id v15 = v77;
    goto LABEL_152;
  }
  int v78 = *(_DWORD *)(a1 + 648);
  if (v78 >= 2)
  {
    int v79 = *(_DWORD *)(a1 + 420);
    if (v79 <= 1) {
      int v79 = 1;
    }
    if (*(_DWORD *)(a1 + 348) / v79 % (4 * v78))
    {
      __int16 v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v120, "Invalid parameter");
      __cxa_throw(v120, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(void *)(a1 + 480))
    {
      if (*(unsigned char *)(v69 + 152)) {
        goto LABEL_103;
      }
    }
    else
    {
      unsigned __int16 v96 = (char *)malloc_type_malloc(168 * v78, 0x10000405D2726C3uLL);
      std::string v97 = v96;
      LODWORD(v98) = *(_DWORD *)(a1 + 648);
      if ((int)v98 >= 1)
      {
        uint64_t v99 = 0;
        int v100 = v96;
        do
        {
          long long v101 = *(_OWORD *)(a1 + 336);
          long long v102 = *(_OWORD *)v18;
          *((_OWORD *)v100 + 1) = *(_OWORD *)(a1 + 320);
          *((_OWORD *)v100 + 2) = v101;
          *(_OWORD *)int v100 = v102;
          long long v103 = *(_OWORD *)(a1 + 352);
          long long v104 = *(_OWORD *)(a1 + 368);
          long long v105 = *(_OWORD *)(a1 + 400);
          *((_OWORD *)v100 + 5) = *(_OWORD *)(a1 + 384);
          *((_OWORD *)v100 + 6) = v105;
          *((_OWORD *)v100 + 3) = v103;
          *((_OWORD *)v100 + 4) = v104;
          long long v106 = *(_OWORD *)(a1 + 416);
          long long v107 = *(_OWORD *)(a1 + 432);
          long long v108 = *(_OWORD *)(a1 + 448);
          *(void *)(v100 + 157) = *(void *)(a1 + 461);
          *((_OWORD *)v100 + 8) = v107;
          *((_OWORD *)v100 + 9) = v108;
          *((_OWORD *)v100 + 7) = v106;
          *((_DWORD *)v100 + 4) = v99;
          uint64_t v98 = *(int *)(a1 + 648);
          *((_WORD *)v100 + 66) = v98;
          if (v99 < v98 - 1)
          {
            *((_DWORD *)v100 + 8) = 0;
            *((_DWORD *)v100 + 28) = 0;
            *((_DWORD *)v100 + 6) = 0;
          }
          ++v99;
          v100 += 168;
        }
        while (v99 < v98);
      }
      uint64_t v109 = [*(id *)(v136 + 144) newBufferWithBytes:v96 length:168 * (int)v98 options:0];
      int v110 = *(void **)(a1 + 480);
      *(void *)(a1 + 480) = v109;

      free(v97);
      uint64_t v69 = *(void *)(v136 + 24);
      if (*(unsigned char *)(v69 + 152))
      {
LABEL_103:
        LODWORD(v80) = *(_DWORD *)(a1 + 648);
        if (*(_DWORD *)(v69 + 156))
        {
          int v81 = 0;
          int v82 = v67 - 1;
          do
          {
            if ((int)v80 >= 1)
            {
              uint64_t v83 = 0;
              uint64_t v84 = 0;
              do
              {
                objc_msgSend(v15, "setBuffer:offset:atIndex:", *(void *)(a1 + 480), v83, 0, *(double *)&v55);
                uint64_t v85 = *(int *)(a1 + 608);
                uint64_t v86 = *(int *)(a1 + 612);
                uint64_t v87 = (v133 - 1) / (*(_DWORD *)(a1 + 588) * (int)v86) + 1;
                int v88 = *(_DWORD *)(a1 + 568) * v68;
                v144[0] = (v132 - 1) / (*(_DWORD *)(a1 + 584) * (int)v85) + 1;
                v144[1] = v87;
                v144[2] = v82 / v88 + 1;
                v143[0] = v85;
                v143[1] = v86;
                _OWORD v143[2] = v68;
                [v15 dispatchThreadgroups:v144 threadsPerThreadgroup:v143];
                ++v84;
                uint64_t v80 = *(int *)(a1 + 648);
                v83 += 168;
              }
              while (v84 < v80);
            }
            ++v81;
          }
          while (v81 != 10);
          goto LABEL_149;
        }
LABEL_146:
        if ((int)v80 >= 1)
        {
          uint64_t v111 = 0;
          uint64_t v112 = 0;
          int v113 = v67 - 1;
          do
          {
            objc_msgSend(v15, "setBuffer:offset:atIndex:", *(void *)(a1 + 480), v111, 0, *(double *)&v55);
            uint64_t v114 = *(int *)(a1 + 608);
            uint64_t v115 = *(int *)(a1 + 612);
            uint64_t v116 = (v133 - 1) / (*(_DWORD *)(a1 + 588) * (int)v115) + 1;
            int v117 = *(_DWORD *)(a1 + 568) * v68;
            v142[0] = (v132 - 1) / (*(_DWORD *)(a1 + 584) * (int)v114) + 1;
            v142[1] = v116;
            void v142[2] = v113 / v117 + 1;
            v141[0] = v114;
            v141[1] = v115;
            void v141[2] = v68;
            [v15 dispatchThreadgroups:v142 threadsPerThreadgroup:v141];
            ++v112;
            v111 += 168;
          }
          while (v112 < *(int *)(a1 + 648));
        }
        goto LABEL_149;
      }
    }
    LODWORD(v80) = *(_DWORD *)(a1 + 648);
    goto LABEL_146;
  }
  uint64_t v89 = (v67 - 1) / (*(_DWORD *)(a1 + 568) * v68) + 1;
  v140[0] = (v132 - 1) / (int)(v61 * v58) + 1;
  v140[1] = (v133 - 1) / (int)(v57 * v64) + 1;
  v140[2] = v89;
  uint64_t v90 = *(int *)(a1 + 632) * (uint64_t)v68;
  v139[0] = v61;
  v139[1] = v57;
  v139[2] = v90;
  objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", v140, v139, *(double *)&v55);
LABEL_149:
  int v118 = *(_DWORD *)(a1 + 420);
  if (v118 <= 1) {
    int v118 = 1;
  }
  Espresso::batch_metal::recreate_command_buffer_after_flops((uint64_t)v131, (double)*(int *)(a1 + 344) * (double)*(__int16 *)(a1 + 438) * (double)v132 * (double)v133+ (double)(*(_DWORD *)(a1 + 348) / v118)* (double)*(int *)(a1 + 344)* (double)*(int *)(a1 + 352)* (double)*(int *)(a1 + 356)* (double)*(__int16 *)(a1 + 438)* (double)v132* (double)v133* 2.0);
LABEL_152:

  if (v129) {
    nitro::nitro_function::nitro_function(v129);
  }
  if (v130) {
    nitro::nitro_function::nitro_function(v130);
  }
}

void sub_192ADAF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  __cxa_free_exception(v22);

  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::~convolution_kernel_metal_base(uint64_t a1)
{
  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_grad_kernel>::~convolution_kernel_metal_base(a1);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE34B408;
  if (*(char *)(a1 + 759) < 0) {
    operator delete(*(void **)(a1 + 736));
  }
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }

  *(void *)a1 = &unk_1EE368A88;
  unint64_t v2 = (void **)(a1 + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)(a1 + 764) = 0;
  int32x2_t v4 = *(void **)(a1 + 624);
  *(void *)(a1 + 624) = 0;

  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    if (!*(unsigned char *)(a1 + 760)) {
      *(_DWORD *)(a1 + 764) = 2;
    }
    int v7 = *(_DWORD *)(v6 + 8);
    int v9 = v7 - 1;
    BOOL v8 = v7 < 1;
    int v10 = v7 + 254;
    if (!v8) {
      int v10 = v9;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v14, (v10 & 0xFFFFFF00) + 256, 1, 1, 1);
    memcpy(*(void **)(v14 + 16), *(const void **)(*a2 + 16), 4 * *(int *)(*a2 + 8));
    uint64_t v11 = Espresso::bufferFromBlobReadOnly<std::shared_ptr<Espresso::blob<float,1>>>(*(void **)(*(void *)(a1 + 8) + 144), (uint64_t)&v14);
    int v12 = *(void **)(a1 + 624);
    *(void *)(a1 + 624) = v11;

    int v13 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = 0;

    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
}

void sub_192ADB2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

id Espresso::bufferFromBlobReadOnly<std::shared_ptr<Espresso::blob<float,1>>>(void *a1, uint64_t a2)
{
  id v3 = a1;
  int32x2_t v4 = v3;
  if ((unint64_t)(4 * *(int *)(*(void *)a2 + 8)) > 0x1F)
  {
    uint64_t v6 = objc_msgSend(v3, "newBufferWithBytes:length:options:", *(void *)(*(void *)a2 + 16));
  }
  else
  {
    uint64_t v5 = malloc_type_malloc(0x20uLL, 0xD7789F2EuLL);
    memcpy(v5, *(const void **)(*(void *)a2 + 16), 4 * *(int *)(*(void *)a2 + 8));
    uint64_t v6 = (void *)[v4 newBufferWithBytes:*(void *)(*(void *)a2 + 16) length:32 options:0];
    free(v5);
  }

  return v6;
}

void sub_192ADB38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_quantization_lut_blob(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_quantization_lut_blob(uint64_t a1, void *a2)
{
  int32x2_t v4 = *(void **)(a1 + 616);
  *(void *)(a1 + 616) = 0;

  *(_DWORD *)(a1 + 764) = 0;
  if (*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "kernel disabled");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_192ADB420(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_quantized_weights_blob(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  int32x2_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v23 = *a2;
  id v24 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::shuffle_to_gpu_conv_weights_8(&v23, &v25);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  id v5 = *(id *)(*(void *)(a1 + 8) + 144);
  uint64_t v6 = v5;
  uint64_t v7 = v25;
  unint64_t v8 = *(int *)(v25 + 8);
  uint64_t v9 = 12;
  unint64_t v10 = v8;
  do
  {
    v10 *= *(int *)(v25 + v9);
    v9 += 4;
  }
  while (v9 != 32);
  if (v10 > 0x1F)
  {
    for (uint64_t i = 12; i != 32; i += 4)
      v8 *= *(int *)(v25 + i);
    uint64_t v15 = objc_msgSend(v5, "newBufferWithBytes:length:options:", *(void *)(v25 + 32), v8, 0, v23, v24);
  }
  else
  {
    uint64_t v11 = malloc_type_malloc(0x20uLL, 0xD7789F2EuLL);
    int v12 = v11;
    size_t v13 = *(int *)(v7 + 8);
    for (uint64_t j = 12; j != 32; j += 4)
      v13 *= *(int *)(v7 + j);
    memcpy(v11, *(const void **)(v7 + 32), v13);
    uint64_t v15 = objc_msgSend(v6, "newBufferWithBytes:length:options:", *(void *)(v7 + 32), 32, 0, v23, v24);
    free(v12);
  }

  int v17 = *(void **)(a1 + 592);
  *(void *)(a1 + 592) = v15;

  objc_storeStrong((id *)(a1 + 576), *(id *)(a1 + 592));
  uint64_t v18 = *(int *)(v7 + 8);
  for (uint64_t k = 12; k != 32; k += 4)
    v18 *= *(int *)(v7 + k);
  uint64_t v20 = 0;
  *(void *)(a1 + 752) = v18;
  uint64_t v21 = *(int *)(*a2 + 8);
  do
  {
    v21 *= *(int *)(*a2 + 12 + v20);
    v20 += 4;
  }
  while (v20 != 12);
  *(unsigned char *)(a1 + 760) = (v21 & 0x7FFFFFFFFFFC0000) == 0;
  if ((v21 & 0x7FFFFFFFFFFC0000) == 0) {
    objc_storeStrong((id *)(a1 + 600), *(id *)(a1 + 592));
  }
  long long v22 = v26;
  if (v26)
  {
    nitro::nitro_function::nitro_function(v22);
  }
}

void sub_192ADB630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

void sub_192ADB658()
{
  if (!v0) {
    JUMPOUT(0x192ADB650);
  }
  JUMPOUT(0x192ADB648);
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_biases@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 864);
  *a2 = *(void *)(result + 856);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_shuffled_weights@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 880);
  *a2 = *(void *)(result + 872);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = (const void **)(a1 + 8);
  uint64_t v9 = (void **)(a1 + 592);
  unint64_t v10 = (void *)(a1 + 752);
  *(void *)(a1 + 872) = v7;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 880);
  *(void *)(a1 + 880) = v6;
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  int v12 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = 0;

  size_t v13 = *(void **)(a1 + 592);
  *(void *)(a1 + 592) = 0;

  uint64_t v14 = *(int *)(*a2 + 8);
  for (uint64_t i = 12; i != 32; i += 4)
    v14 *= *(int *)(*a2 + i);
  *(void *)(a1 + 752) = v14;
  if ((*(_DWORD *)(a1 + 560) - 1) > 1)
  {
    id v29 = *((id *)*v8 + 18);
    uint64_t v30 = v29;
    uint64_t v31 = *a2;
    uint64_t v32 = *(int *)(*a2 + 8);
    uint64_t v33 = 12;
    uint64_t v34 = v32;
    do
    {
      v34 *= *(int *)(v31 + v33);
      v33 += 4;
    }
    while (v33 != 32);
    if ((v34 & 0x3FFFFFFFFFFFFFF8) != 0)
    {
      for (uint64_t j = 12; j != 32; j += 4)
        v32 *= *(int *)(v31 + j);
      uint64_t v36 = [v29 newBufferWithBytes:*(void *)(v31 + 32) length:4 * v32 options:0];
    }
    else
    {
      uint64_t v37 = malloc_type_malloc(0x20uLL, 0xD7789F2EuLL);
      int v38 = v37;
      uint64_t v39 = *(int *)(*a2 + 8);
      for (uint64_t k = 12; k != 32; k += 4)
        v39 *= *(int *)(*a2 + k);
      memcpy(v37, *(const void **)(*a2 + 32), 4 * v39);
      uint64_t v36 = [v30 newBufferWithBytes:*(void *)(*a2 + 32) length:32 options:0];
      free(v38);
    }

    int v41 = *(void **)(a1 + 576);
    *(void *)(a1 + 576) = v36;
  }
  else
  {
    unint64_t v16 = 2 * v14;
    if (v16 <= 8) {
      uint64_t v17 = 8;
    }
    else {
      uint64_t v17 = v16;
    }
    Espresso::on_alloc(0, (void *)v17);
    if (!*v8) {
      goto LABEL_43;
    }
    if (!v18) {
      goto LABEL_43;
    }
    BOOL v19 = *(std::__shared_weak_count **)(a1 + 16);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = (void *)v18[18];
    if ((unint64_t)(2 * *v10) <= 0x10) {
      uint64_t v21 = 16;
    }
    else {
      uint64_t v21 = 2 * *v10;
    }
    uint64_t v22 = [v20 newBufferWithLength:v21 options:0];
    uint64_t v23 = *v9;
    *uint64_t v9 = (void *)v22;

    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (!*v8
    {
LABEL_43:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 16);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 3321888768;
    v44[2] = ___ZN8Espresso17MetalLowmemEngine42convolution_kernel_metal_base_with_weightsINS_26generic_convolution_kernelEE11set_weightsENSt3__110shared_ptrINS_4blobIfLi6EEEEENS5_INS_14abstract_batchEEE_block_invoke;
    v44[3] = &__block_descriptor_80_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi6EEEEE_e10_v16__0r_v8l;
    uint64_t v27 = *a2;
    uint64_t v26 = (std::__shared_weak_count *)a2[1];
    v44[4] = a1;
    v44[5] = v27;
    int v45 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v46 = a1 + 8;
    uint64_t v47 = a1 + 592;
    uint64_t v48 = a1 + 752;
    (*(void (**)(void *, uint64_t, void *))(*(void *)v24 + 40))(v24, a3, v44);
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    int v28 = *(std::__shared_weak_count **)(a1 + 880);
    *(void *)(a1 + 872) = 0;
    *(void *)(a1 + 880) = 0;
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
  }
  int v42 = *(void **)(a1 + 568);
  *(void *)(a1 + 568) = 0;
}

void sub_192ADBAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17MetalLowmemEngine42convolution_kernel_metal_base_with_weightsINS_26generic_convolution_kernelEE11set_weightsENSt3__110shared_ptrINS_4blobIfLi6EEEEENS5_INS_14abstract_batchEEE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (void *)*a2;
  long long v6 = *(_OWORD *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = v5[22];
  uint64_t v9 = (_OWORD *)v5[21];
  if ((unint64_t)v9 >= v8)
  {
    long long v41 = v6;
    uint64_t v11 = v5[20];
    uint64_t v12 = ((uint64_t)v9 - v11) >> 4;
    if ((unint64_t)(v12 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - v11;
    uint64_t v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v46 = v5 + 22;
    unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v15);
    uint64_t v17 = &v16[16 * v12];
    int v42 = v16;
    int v43 = v17;
    int v45 = &v16[16 * v18];
    *(_OWORD *)uint64_t v17 = v41;
    BOOL v44 = v17 + 16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v5 + 20, &v42);
    unint64_t v10 = (_OWORD *)v5[21];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v42);
  }
  else
  {
    *uint64_t v9 = v6;
    unint64_t v10 = v9 + 1;
    v5[21] = v10;
  }
  v5[21] = v10;
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = (void *)*a2;
  uint64_t v21 = *(void *)(a1 + 40);
  if (*a2)
  {
    uint64_t v22 = *(void *)(a1 + 48);
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v23 = v20[22];
    id v24 = (void *)v20[21];
    if ((unint64_t)v24 >= v23)
    {
      uint64_t v26 = v20[20];
      uint64_t v27 = ((uint64_t)v24 - v26) >> 4;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v23 - v26;
      if (v29 >> 3 > v28) {
        unint64_t v28 = v29 >> 3;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      uint64_t v46 = v20 + 22;
      uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v30);
      uint64_t v32 = &v31[16 * v27];
      int v42 = v31;
      int v43 = v32;
      int v45 = &v31[16 * v33];
      *(void *)uint64_t v32 = v21;
      *((void *)v32 + 1) = v22;
      BOOL v44 = v32 + 16;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v20 + 20, &v42);
      uint64_t v25 = (void *)v20[21];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v42);
    }
    else
    {
      void *v24 = v21;
      v24[1] = v22;
      uint64_t v25 = v24 + 2;
      v20[21] = v24 + 2;
    }
    v20[21] = v25;
    uint64_t v21 = *(void *)(a1 + 40);
  }
  uint64_t v34 = *(int *)(v21 + 8);
  for (uint64_t i = 12; i != 32; i += 4)
    v34 *= *(int *)(v21 + i);
  uint64_t v36 = (void *)[*(id *)(*(void *)v19 + 144) newBufferWithBytesNoCopy:*(void *)(v21 + 32) length:(4 * v34 + 4095) & 0xFFFFFFFFFFFFF000 options:0 deallocator:0];
  uint64_t v37 = *(const void **)(v4 + 8);
  if (!v37
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v39 = *(std::__shared_weak_count **)(v4 + 16);
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::convert_float32_to_float16((uint64_t)v38, *a2, v36, **(void ***)(a1 + 64), **(void **)(a1 + 72), 0, 0);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
}

void sub_192ADBE04(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi6EEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi6EEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = *a2;
  long long v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)(a1 + 848))
  {
    uint64_t v8 = *(unsigned int *)(v7 + 8);
    uint64_t v9 = *(unsigned int *)(v7 + 12);
    int v11 = *(_DWORD *)(v7 + 16);
    uint64_t v10 = *(unsigned int *)(v7 + 20);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v36, *(_DWORD *)(v7 + 8), *(_DWORD *)(v7 + 12), 8 * v11, *(_DWORD *)(v7 + 20));
    if ((int)v10 >= 1)
    {
      int v12 = 0;
      int v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(v7 + 24);
      uint64_t v16 = *(void *)(v36 + 24);
      int v17 = v9 * v8 * v11;
      uint64_t v18 = 4 * (int)v8;
      do
      {
        if ((int)v9 >= 1)
        {
          uint64_t v19 = 0;
          uint64_t v20 = (_DWORD *)(v16 + 4 * (int)(v13 + v9 * v8 * (v14 & 7)));
          uint64_t v21 = (int *)(v15 + 4 * v12);
          do
          {
            uint64_t v22 = v21;
            unint64_t v23 = v20;
            uint64_t v24 = v8;
            if ((int)v8 >= 1)
            {
              do
              {
                int v25 = *v22++;
                *v23++ = v25;
                --v24;
              }
              while (v24);
            }
            ++v19;
            uint64_t v20 = (_DWORD *)((char *)v20 + v18);
            uint64_t v21 = (int *)((char *)v21 + v18);
          }
          while (v19 != v9);
        }
        ++v14;
        v13 += 8 * v17;
        v12 += v17;
      }
      while (v14 != v10);
    }
    uint64_t v26 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = 0;
  }
  else
  {
    *(void *)&long long v36 = v7;
    *((void *)&v36 + 1) = v6;
    long long v6 = 0;
  }
  uint64_t v27 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = v36;
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v28 = *a2;
  uint64_t v29 = (std::__shared_weak_count *)a2[1];
  v33[0] = v28;
  v33[1] = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::shuffle_to_gpu_conv_weights(v33, &v34);
  unint64_t v30 = (std::__shared_weak_count *)a3[1];
  uint64_t v31 = *a3;
  uint64_t v32 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 432))(a1, &v34, &v31);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
}

void sub_192ADC074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_biases(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 856) = v7;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 864);
  *(void *)(a1 + 864) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (*a2)
  {
    uint64_t v9 = *(void **)(a1 + 584);
    *(void *)(a1 + 584) = 0;

    uint64_t v10 = *(void **)(a1 + 608);
    *(void *)(a1 + 608) = 0;

    uint64_t v11 = *(int *)(*a2 + 8);
    *(void *)(a1 + 744) = v11;
    if ((*(_DWORD *)(a1 + 560) - 1) > 1)
    {
      uint64_t v29 = Espresso::bufferFromBlobReadOnly<std::shared_ptr<Espresso::blob<float,1>>>(*(void **)(*(void *)(a1 + 8) + 144), (uint64_t)a2);
      unint64_t v30 = *(void **)(a1 + 584);
      *(void *)(a1 + 584) = v29;
    }
    else
    {
      int v12 = (const void **)(a1 + 8);
      unint64_t v13 = 2 * v11;
      if (v13 <= 8) {
        uint64_t v14 = 8;
      }
      else {
        uint64_t v14 = v13;
      }
      Espresso::on_alloc(0, (void *)v14);
      if (!*v12) {
        goto LABEL_36;
      }
      if (!v15) {
        goto LABEL_36;
      }
      uint64_t v16 = (void *)(a1 + 744);
      int v17 = *(std::__shared_weak_count **)(a1 + 16);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = (void *)v15[18];
      if ((unint64_t)(2 * *v16) <= 0x10) {
        uint64_t v19 = 16;
      }
      else {
        uint64_t v19 = 2 * *v16;
      }
      uint64_t v20 = [v18 newBufferWithLength:v19 options:0];
      uint64_t v21 = *(void **)(a1 + 608);
      *(void *)(a1 + 608) = v20;

      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (!*v12
      {
LABEL_36:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
      }
      unint64_t v23 = *(std::__shared_weak_count **)(a1 + 16);
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 3321888768;
      void v33[2] = ___ZN8Espresso17MetalLowmemEngine42convolution_kernel_metal_base_with_weightsINS_26generic_convolution_kernelEE10set_biasesENSt3__110shared_ptrINS_4blobIfLi1EEEEENS5_INS_14abstract_batchEEE_block_invoke;
      v33[3] = &__block_descriptor_80_ea8_48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi1EEEEE_e10_v16__0r_v8l;
      v33[4] = a1;
      v33[5] = a1 + 8;
      uint64_t v24 = (std::__shared_weak_count *)a2[1];
      v33[6] = *a2;
      uint64_t v34 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = a1 + 608;
      uint64_t v36 = a1 + 744;
      (*(void (**)(void *, uint64_t, void *))(*(void *)v22 + 40))(v22, a3, v33);
      if (v23) {
        nitro::nitro_function::nitro_function(v23);
      }
      int v25 = *(std::__shared_weak_count **)(a1 + 864);
      *(void *)(a1 + 856) = 0;
      *(void *)(a1 + 864) = 0;
      if (v25) {
        nitro::nitro_function::nitro_function(v25);
      }
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
    }
    *(_DWORD *)(a1 + 336) = 1;
    uint64_t v31 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 336) = 0;
    *(void *)(a1 + 744) = 0;
    uint64_t v26 = *(void **)(a1 + 584);
    *(void *)(a1 + 584) = 0;

    uint64_t v27 = *(void **)(a1 + 568);
    *(void *)(a1 + 568) = 0;

    uint64_t v28 = *(void **)(a1 + 608);
    *(void *)(a1 + 608) = 0;
  }
}

void sub_192ADC43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17MetalLowmemEngine42convolution_kernel_metal_base_with_weightsINS_26generic_convolution_kernelEE10set_biasesENSt3__110shared_ptrINS_4blobIfLi1EEEEENS5_INS_14abstract_batchEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  if (*(unsigned char *)(v5 + 24))
  {
    if (!*(void *)a2
    {
      Espresso::throw_exception_selector<Espresso::generic_error>("Provided batch is not a Metal batch.");
    }
    uint64_t v9 = v8;
    uint64_t v10 = *(std::__shared_weak_count **)(a2 + 8);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *v4;
    }
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v12 = v8[22];
    unint64_t v13 = (void *)v8[21];
    if ((unint64_t)v13 >= v12)
    {
      id v41 = v7;
      uint64_t v15 = v8[20];
      uint64_t v16 = ((uint64_t)v13 - v15) >> 4;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v12 - v15;
      if (v18 >> 3 > v17) {
        unint64_t v17 = v18 >> 3;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      uint64_t v47 = v9 + 22;
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v19);
      uint64_t v21 = &v20[16 * v16];
      int v43 = v20;
      BOOL v44 = v21;
      uint64_t v46 = &v20[16 * v22];
      *(void *)uint64_t v21 = v5;
      *((void *)v21 + 1) = v11;
      int v45 = v21 + 16;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v9 + 20, &v43);
      uint64_t v14 = (void *)v9[21];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v43);
      id v7 = v41;
    }
    else
    {
      *unint64_t v13 = v5;
      v13[1] = v11;
      uint64_t v14 = v13 + 2;
      v8[21] = v13 + 2;
    }
    v9[21] = v14;
    unint64_t v23 = *(void **)a2;
    uint64_t v24 = *v4;
    if (*(void *)a2)
    {
      uint64_t v25 = *(void *)(a1 + 56);
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v26 = v23[22];
      uint64_t v27 = (void *)v23[21];
      if ((unint64_t)v27 >= v26)
      {
        id v41 = v7;
        uint64_t v29 = v23[20];
        uint64_t v30 = ((uint64_t)v27 - v29) >> 4;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = v26 - v29;
        if (v32 >> 3 > v31) {
          unint64_t v31 = v32 >> 3;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        uint64_t v47 = v23 + 22;
        uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v33);
        uint64_t v35 = &v34[16 * v30];
        int v43 = v34;
        BOOL v44 = v35;
        uint64_t v46 = &v34[16 * v36];
        *(void *)uint64_t v35 = v24;
        *((void *)v35 + 1) = v25;
        int v45 = v35 + 16;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v23 + 20, &v43);
        uint64_t v28 = (void *)v23[21];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v43);
        id v7 = v41;
      }
      else
      {
        *uint64_t v27 = v24;
        v27[1] = v25;
        uint64_t v28 = v27 + 2;
        v23[21] = v27 + 2;
      }
      v23[21] = v28;
      uint64_t v24 = *v4;
    }
    id v42 = (id)objc_msgSend(*(id *)(*(void *)v7 + 144), "newBufferWithBytesNoCopy:length:options:deallocator:", *(void *)(v24 + 16), (4 * *(int *)(v24 + 8) + 4095) & 0xFFFFFFFFFFFFF000, 0, 0, v41);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    Espresso::bufferFromBlobReadOnly<std::shared_ptr<Espresso::blob<float,1>>>(*(void **)(*(void *)v7 + 144), (uint64_t)v4);
    id v42 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v37 = *(const void **)(v6 + 8);
  if (!v37
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v39 = *(std::__shared_weak_count **)(v6 + 16);
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::convert_float32_to_float16((uint64_t)v38, *(void *)a2, v42, **(void ***)(a1 + 64), **(void **)(a1 + 72), 0, 0);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
}

void sub_192ADC834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi1EEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi1EEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 432))(a1, &v5, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 424))(a1, &v5, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192ADC95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_192ADCA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 416))(a1, &v5, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192ADCABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::num_weights_blob()
{
  return 2;
}

uint64_t Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::get_weights_blob@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  if (a2 == 1)
  {
    uint64_t v9 = 608;
    if (!*(void *)(result + 608)) {
      uint64_t v9 = 584;
    }
    int v6 = *(_DWORD *)(result + 560);
    id v7 = *(void **)(result + v9);
    uint64_t v8 = *(void *)(result + 744);
    goto LABEL_9;
  }
  long long v4 = 0uLL;
  if (!a2)
  {
    uint64_t v5 = 592;
    if (!*(void *)(result + 592)) {
      uint64_t v5 = 576;
    }
    int v6 = *(_DWORD *)(result + 560);
    id v7 = *(void **)(result + v5);
    uint64_t v8 = *(void *)(result + 752);
LABEL_9:
    __n128 result = std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::blob_container,std::allocator<Espresso::MetalLowmemEngine::blob_container>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path &,objc_object  {objcproto9MTLBuffer}* {__strong}&,unsigned long &,int,int,int,void>((uint64_t *)&v10, (void *)(result + 8), v6, v7, v8, 1, 1, 1);
    long long v4 = v10;
  }
  *a3 = v4;
  return result;
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::share_weights(uint64_t a1, const void **a2)
{
  if (*a2)
  {
    if (v3)
    {
      long long v4 = v3;
      objc_storeStrong((id *)(a1 + 576), v3[72]);
      objc_storeStrong((id *)(a1 + 584), v4[73]);
      objc_storeStrong((id *)(a1 + 592), v4[74]);
      objc_storeStrong((id *)(a1 + 608), v4[76]);
      id v5 = v4[107];
      int v6 = (atomic_ullong *)v4[108];
      if (v6) {
        atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 856) = v5;
      id v7 = *(std::__shared_weak_count **)(a1 + 864);
      *(void *)(a1 + 864) = v6;
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      id v8 = v4[109];
      uint64_t v9 = (atomic_ullong *)v4[110];
      if (v9) {
        atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 872) = v8;
      long long v10 = *(std::__shared_weak_count **)(a1 + 880);
      *(void *)(a1 + 880) = v9;
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      *(_DWORD *)(a1 + 336) = *((_DWORD *)v4 + 84);
      uint64_t v11 = *(void **)(a1 + 568);
      *(void *)(a1 + 568) = 0;
    }
  }
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base_with_weights<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base_with_weights(void *a1)
{
  *a1 = &unk_1EE34BDD8;
  uint64_t v2 = (std::__shared_weak_count *)a1[110];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[108];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base((uint64_t)a1);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *a1 = &unk_1EE34BDD8;
  uint64_t v2 = (std::__shared_weak_count *)a1[110];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[108];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base((uint64_t)a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base(uint64_t a1)
{
  *(void *)a1 = &unk_1EE34B180;
  if (*(char *)(a1 + 847) < 0) {
    operator delete(*(void **)(a1 + 824));
  }
  if (*(char *)(a1 + 823) < 0) {
    operator delete(*(void **)(a1 + 800));
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)a1);
}

void Espresso::MetalLowmemEngine::convolution_kernel_metal::~convolution_kernel_metal(Espresso::MetalLowmemEngine::convolution_kernel_metal *this)
{
  Espresso::MetalLowmemEngine::convolution_kernel_metal::~convolution_kernel_metal(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE34BDD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 110);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 108);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::MetalLowmemEngine::convolution_kernel_metal_base<Espresso::generic_convolution_kernel>::~convolution_kernel_metal_base((uint64_t)this);
}

float Espresso::sanitize_nan(Espresso *this, float result)
{
  if ((LODWORD(result) & 0x7FFFFFFFu) >= 0x7F800000) {
    return -10000000.0;
  }
  return result;
}

void Espresso::get_top_pred(Espresso *this@<X0>, float *a2@<X1>, float *a3@<X2>, int a4@<W3>, unint64_t *a5@<X8>)
{
  if ((int)a3 < 1)
  {
    id v8 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    id v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = a3;
    do
    {
      if (a2) {
        float v13 = a2[v11];
      }
      else {
        float v13 = 1.0;
      }
      float v14 = v13;
      unint64_t v15 = v11 | ((unint64_t)*((unsigned int *)this + v11) << 32);
      if (v9 >= v10)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v8) >> 2) + 1;
        if (v16 > 0x1555555555555555) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v10 - (void)v8) >> 2) > v16) {
          unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v10 - (void)v8) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v8) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v17 = 0x1555555555555555;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,float>>>(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v19 = v17 + 4 * ((uint64_t)(v9 - (void)v8) >> 2);
        *(void *)unint64_t v19 = v15;
        *(float *)(v19 + 8) = v14;
        uint64_t v20 = (char *)v19;
        while ((char *)v9 != v8)
        {
          uint64_t v21 = *(void *)(v9 - 12);
          v9 -= 12;
          int v22 = *(_DWORD *)(v9 + 8);
          *(void *)(v20 - 12) = v21;
          v20 -= 12;
          *((_DWORD *)v20 + 2) = v22;
        }
        unint64_t v10 = v17 + 12 * v18;
        unint64_t v9 = v19 + 12;
        if (v8) {
          operator delete(v8);
        }
        id v8 = v20;
      }
      else
      {
        *(void *)unint64_t v9 = v15;
        *(float *)(v9 + 8) = v13;
        v9 += 12;
      }
      ++v11;
    }
    while (v11 != v12);
  }
  unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v8) >> 2);
  unint64_t v24 = 126 - 2 * __clz(v23);
  if ((char *)v9 == v8) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v24;
  }
  std::__introsort<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *,false>((unint64_t)v8, v9, v25, 1);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  int v26 = a4;
  if ((int)v23 < a4) {
    int v26 = -1431655765 * ((uint64_t)(v9 - (void)v8) >> 2);
  }
  if (v26 >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = v26;
    do
    {
      uint64_t v30 = &v8[12 * v28];
      unint64_t v31 = a5[2];
      if ((unint64_t)v27 >= v31)
      {
        uint64_t v34 = (_DWORD *)*a5;
        unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v27 - *a5) >> 2);
        unint64_t v36 = v35 + 1;
        if (v35 + 1 > 0x1555555555555555) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)v34) >> 2);
        if (2 * v37 > v36) {
          unint64_t v36 = 2 * v37;
        }
        if (v37 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v38 = 0x1555555555555555;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38) {
          unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,float>>>(v38);
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t v40 = *(void *)v30;
        unint64_t v41 = v38 + 12 * v35;
        *(_DWORD *)(v41 + 8) = *((_DWORD *)v30 + 2);
        *(void *)unint64_t v41 = v40;
        unint64_t v42 = v41;
        if (v27 != v34)
        {
          do
          {
            uint64_t v43 = *(void *)(v27 - 3);
            v27 -= 3;
            int v44 = v27[2];
            *(void *)(v42 - 12) = v43;
            v42 -= 12;
            *(_DWORD *)(v42 + 8) = v44;
          }
          while (v27 != v34);
          uint64_t v27 = (_DWORD *)*a5;
        }
        unint64_t v33 = (_DWORD *)(v41 + 12);
        *a5 = v42;
        a5[1] = v41 + 12;
        a5[2] = v38 + 12 * v39;
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        uint64_t v32 = *(void *)v30;
        v27[2] = *((_DWORD *)v30 + 2);
        *(void *)uint64_t v27 = v32;
        unint64_t v33 = v27 + 3;
      }
      a5[1] = (unint64_t)v33;
      ++v28;
      uint64_t v27 = v33;
    }
    while (v28 != v29);
  }
  if (v8)
  {
    operator delete(v8);
  }
}