void sub_1922F25C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F2610(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_execution_stream_set_config_optionsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_execution_stream_set_config_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_execution_stream_set_config_optionsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_execution_stream_set_config_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F2680()
{
  return &unk_1EE3934F8;
}

uint64_t sub_1922F268C(uint64_t a1)
{
  return a1;
}

void sub_1922F26B8(uint64_t a1)
{
  JUMPOUT(0x192FF16B0);
}

void *sub_1922F2704(uint64_t a1)
{
  v2 = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *v2 = &unk_1EE393518;
  v2[1] = v4;
  v2[2] = MEMORY[0x192FF2250](v3);
  return v2;
}

uint64_t sub_1922F275C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *a2 = &unk_1EE393518;
  a2[1] = v4;
  uint64_t result = MEMORY[0x192FF2250](v3);
  a2[2] = result;
  return result;
}

void sub_1922F27A4(uint64_t a1)
{
}

void sub_1922F27AC(id *a1)
{
  operator delete(a1);
}

uint64_t sub_1922F27E8(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v5 = *v1;
      uint64_t v4 = (std::__shared_weak_count *)v1[1];
      uint64_t v8 = v5;
      v9 = v4;
      if (v4)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v3 = *(void *)(a1 + 16);
        v14 = 0;
        if (!v3)
        {
LABEL_8:
          E5RT_Private::StepStreamSync(&v8, &v12);
          if (v14 == &v12)
          {
            (*((void (**)(void **))v12 + 4))(&v12);
            v6 = v9;
            if (!v9) {
              return 0;
            }
          }
          else
          {
            if (v14) {
              (*((void (**)(void **))*v14 + 5))(v14);
            }
            v6 = v9;
            if (!v9) {
              return 0;
            }
          }
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return 0;
        }
      }
      else
      {
        v14 = 0;
      }
      v12 = &unk_1EE379678;
      *(void *)&long long v13 = MEMORY[0x192FF2250](v3);
      v14 = &v12;
      goto LABEL_8;
    }
    v12 = operator new(0x30uLL);
    long long v13 = xmmword_192DAA4A0;
    strcpy((char *)v12, "Invalid Function Argument: callback is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
  }
  else
  {
    v12 = operator new(0x30uLL);
    long long v13 = xmmword_192DA88D0;
    strcpy((char *)v12, "Invalid Function Argument: handle is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return 1;
}

void sub_1922F2A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F2AFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_execution_stream_step_execute_syncE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z39e5rt_execution_stream_step_execute_syncE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_execution_stream_step_execute_syncE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_execution_stream_step_execute_syncE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F2B6C()
{
  return &unk_1EE393578;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x192FF16B0);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE379678;
  uint64_t result = MEMORY[0x192FF2250](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAB47BLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAB47BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAB47BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAB47BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>,void ()(void)>::target_type()
{
}

void sub_1922F2CF0()
{
}

__n128 sub_1922F2D04(uint64_t a1)
{
  v2 = (char *)operator new(0x18uLL);
  *(void *)v2 = &unk_1EE393598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922F2D50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922F2D80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v3 = *(void **)v1;
    v2 = *(atomic_ullong **)(v1 + 8);
    __p[0] = v3;
    __p[1] = v2;
    if (v2) {
      atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
    }
    E5RT_Private::SetANEExecutionPriorityForStream((uint64_t *)__p, *(_DWORD *)(a1 + 16));
    uint64_t v4 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    return 0;
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
}

void sub_1922F2EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F2F08(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_execution_stream_set_ane_execution_priorityE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z48e5rt_execution_stream_set_ane_execution_priorityE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_execution_stream_set_ane_execution_priorityE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_execution_stream_set_ane_execution_priorityE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F2F78()
{
  return &unk_1EE3935F8;
}

void sub_1922F2F88()
{
}

__n128 sub_1922F2F9C(uint64_t a1)
{
  v2 = (char *)operator new(0x18uLL);
  *(void *)v2 = &unk_1EE393618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922F2FE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922F3018(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(void **)v1;
    v2 = *(atomic_ullong **)(v1 + 8);
    __p[0] = v3;
    __p[1] = v2;
    if (v2) {
      atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
    }
    E5RT_Private::SetQualityOfServiceForStream((uint64_t *)__p, *(qos_class_t *)(a1 + 16));
    uint64_t v4 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    return 0;
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
}

void sub_1922F314C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F31A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_execution_stream_set_quality_of_serviceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z44e5rt_execution_stream_set_quality_of_serviceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_execution_stream_set_quality_of_serviceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_execution_stream_set_quality_of_serviceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F3210()
{
  return &unk_1EE393678;
}

uint64_t OUTLINED_FUNCTION_3(uint64_t result)
{
  return result;
}

void OUTLINED_FUNCTION_5()
{
  *(void *)uint64_t v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

uint64_t sub_1922F3244()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1922F3278(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_3(a1);
  if (!v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v1;
    OUTLINED_FUNCTION_0();
    (*(void (**)(void))(v4 + 16))();
    std::__shared_weak_count::__release_weak(v3);
  }
  OUTLINED_FUNCTION_5();
}

uint64_t sub_1922F32D4()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_1922F3308()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1922F333C()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 32))();
}

void sub_1922F3370(std::__shared_weak_count **a1)
{
  uint64_t v1 = *a1;
  if (*a1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  OUTLINED_FUNCTION_5();
}

uint64_t sub_1922F33EC(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

void E5RT::ExecutionStreamOperationConfigOptions::ExecutionStreamOperationConfigOptions(E5RT::ExecutionStreamOperationConfigOptions *this)
{
}

void sub_1922F3580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = v4;
  MEMORY[0x192FF16B0](v5, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v3);
  _Unwind_Resume(a1);
}

void sub_1922F35B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v3);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      v6 = (void (*)(void, void *, void, void, void))v2[4];
      if (v6) {
        v6(0, v2 + 4, 0, 0, 0);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void E5RT::ExecutionStreamOperationConfigOptions::~ExecutionStreamOperationConfigOptions(E5RT::ExecutionStreamOperationConfigOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::ExecutionStreamOperationConfigOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

uint64_t E5RT::ExecutionStreamOperationConfigOptions::GetPrewireModelMemory(E5RT::ExecutionStreamOperationConfigOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "prewireModelMemory<BOOL>", 24);
  }
  if (!*v2
    || (unint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecutionStreamOperationConfigOptions::SetPrewireModelMemory(E5RT::ExecutionStreamOperationConfigOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "prewireModelMemory<BOOL>", 24, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F3894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void E5RT::ExecutionStreamOperationConfigOptions::Create(E5RT::ExecutionStreamOperationConfigOptions *this)
{
}

void sub_1922F391C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  uint64_t result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x1E4FBA4C0] + 16);
  return result;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string_view,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string_view,std::any>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void (*)(void, void *, void, void, void))v2[4];
      if (v3) {
        v3(0, v2 + 4, 0, 0, 0);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_1922F39F4(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);

  JUMPOUT(0x192FF16B0);
}

void sub_1922F3A2C(std::__fs::filesystem::path *a1, std::string *a2)
{
  a1->__pn_.__r_.__value_.__r.__words[0] = 0;
  a1->__pn_.__r_.__value_.__l.__size_ = 0;
  a1->__pn_.__r_.__value_.__r.__words[2] = 0;
  std::string::size_type v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type v3 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(&a1->__pn_, a2, (std::string *)((char *)a2 + v3));
  memset(&__replacement, 0, sizeof(__replacement));
  std::string::append[abi:ne180100]<char const*,0>(&__replacement.__pn_, (std::string *)".weights", (std::string *)"");
  uint64_t v5 = std::__fs::filesystem::path::replace_extension(a1, &__replacement);
  std::string::operator=(&a1->__pn_, &v5->__pn_);
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1922F3AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

double sub_1922F3B08()
{
  E5RT::GetPlatformBuildVersion(&v1);
  if (byte_1E9301B4F < 0) {
    operator delete((void *)xmmword_1E9301B38);
  }
  double result = *(double *)&v1;
  xmmword_1E9301B38 = v1;
  unk_1E9301B48 = v2;
  return result;
}

double sub_1922F3B5C()
{
  E5RT::GetPlatformBuildVersion(&v1);
  if (byte_1E9301B67 < 0) {
    operator delete((void *)xmmword_1E9301B50);
  }
  double result = *(double *)&v1;
  xmmword_1E9301B50 = v1;
  unk_1E9301B60 = v2;
  return result;
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  long long v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    std::string::size_type v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t E5RT::E5CompilerOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

uint64_t E5RT::E5CompilerOptions::SetEnableProfiling(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "enableProfiling<BOOL>", 21, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F3DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetForceRecompilation(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "forceRecompilation<BOOL>", 24, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F3F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetForceFetchFromCache(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "forceFetchFromCache<BOOL>", 25, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F4084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void E5RT::E5CompilerOptions::SetExperimentalForceClassicCpuBackend(E5RT::E5CompilerOptions *this, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (const void *)*((void *)this + 1);
  if (v3) {
  else
  }
    uint64_t v4 = 0;
  uint64_t v5 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v4 + 16))(v4, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!*v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  char v7 = *v6;
  if ((char *)v6[1] - (char *)*v6 != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(void *)&v28[0] = operator new(0x28uLL);
    *(_OWORD *)((char *)v28 + 8) = xmmword_192DAB6C0;
    strcpy(*(char **)&v28[0], "SetExperimentalForceClassicCpuBackend");
    __p = operator new(0x60uLL);
    long long v25 = xmmword_192DAB6D0;
    strcpy((char *)__p, "SetExperimentalForceClassicCpuBackend is not supported when multiple CPU backends are set.");
    E5RT::Status::Status(v26, 2, &__p);
    E5RT::E5RTError::E5RTError(exception, v28, v26);
  }
  uint64_t v8 = *((unsigned __int8 *)v7 + 23);
  if (!a2)
  {
    if ((v8 & 0x80) != 0)
    {
      v10 = (unsigned __int16 **)*v7;
      if (v7[1] != (unsigned __int16 *)11) {
        goto LABEL_27;
      }
    }
    else
    {
      v10 = *v6;
      if (v8 != 11) {
        goto LABEL_27;
      }
    }
    v14 = *v10;
    uint64_t v15 = *(uint64_t *)((char *)v10 + 3);
    if (v14 == (unsigned __int16 *)0x5F63697373616C63 && v15 == 0x7570635F63697373)
    {
      char v27 = 3;
      strcpy((char *)v26, "mlc");
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
      memset(v28, 0, sizeof(v28));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)__p) >> 3));
      *(void *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
      if (*(void *)&v28[0]) {
        (*(void (**)(void, _OWORD *, void, void, void))&v28[0])(0, v28, 0, 0, 0);
      }
      v17 = (void **)__p;
      if (!__p) {
        goto LABEL_68;
      }
      v22 = (void **)v25;
      v19 = __p;
      if ((void *)v25 == __p) {
        goto LABEL_67;
      }
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v17);
      goto LABEL_66;
    }
LABEL_27:
    if ((v8 & 0x80) != 0)
    {
      char v7 = (unsigned __int16 **)*v7;
      if ((*v6)[1] != (unsigned __int16 *)4) {
        return;
      }
    }
    else if (v8 != 4)
    {
      return;
    }
    if (*(_DWORD *)v7 == 1936617058)
    {
      char v27 = 8;
      strcpy((char *)v26, "mlc/bnns");
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
      memset(v28, 0, sizeof(v28));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)__p) >> 3));
      *(void *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
      if (*(void *)&v28[0]) {
        (*(void (**)(void, _OWORD *, void, void, void))&v28[0])(0, v28, 0, 0, 0);
      }
      v17 = (void **)__p;
      if (!__p) {
        goto LABEL_68;
      }
      v20 = (void **)v25;
      v19 = __p;
      if ((void *)v25 == __p) {
        goto LABEL_67;
      }
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v17);
      goto LABEL_66;
    }
    return;
  }
  if ((v8 & 0x80) != 0)
  {
    long long v9 = (unsigned __int16 **)*v7;
    if (v7[1] != (unsigned __int16 *)3) {
      goto LABEL_19;
    }
LABEL_15:
    int v11 = *(unsigned __int16 *)v9;
    int v12 = *((unsigned __int8 *)v9 + 2);
    if (v11 == 27757 && v12 == 99)
    {
      char v27 = 11;
      strcpy((char *)v26, "classic_cpu");
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
      memset(v28, 0, sizeof(v28));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)__p) >> 3));
      *(void *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
      if (*(void *)&v28[0]) {
        (*(void (**)(void, _OWORD *, void, void, void))&v28[0])(0, v28, 0, 0, 0);
      }
      v17 = (void **)__p;
      if (!__p) {
        goto LABEL_68;
      }
      v21 = (void **)v25;
      v19 = __p;
      if ((void *)v25 == __p) {
        goto LABEL_67;
      }
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v17);
      goto LABEL_66;
    }
    goto LABEL_19;
  }
  long long v9 = *v6;
  if (v8 == 3) {
    goto LABEL_15;
  }
LABEL_19:
  if ((v8 & 0x80) != 0)
  {
    char v7 = (unsigned __int16 **)*v7;
    if ((*v6)[1] != (unsigned __int16 *)8) {
      return;
    }
  }
  else if (v8 != 8)
  {
    return;
  }
  if (*v7 == (unsigned __int16 *)0x736E6E622F636C6DLL)
  {
    char v27 = 4;
    strcpy((char *)v26, "bnns");
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
    memset(v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)__p) >> 3));
    *(void *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
    if (*(void *)&v28[0]) {
      (*(void (**)(void, _OWORD *, void, void, void))&v28[0])(0, v28, 0, 0, 0);
    }
    v17 = (void **)__p;
    if (!__p) {
      goto LABEL_68;
    }
    v18 = (void **)v25;
    v19 = __p;
    if ((void *)v25 == __p)
    {
LABEL_67:
      *(void *)&long long v25 = v17;
      operator delete(v19);
LABEL_68:
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      return;
    }
    do
    {
      if (*((char *)v18 - 1) < 0) {
        operator delete(*(v18 - 3));
      }
      v18 -= 3;
    }
    while (v18 != v17);
LABEL_66:
    v19 = __p;
    goto LABEL_67;
  }
}

void sub_1922F47D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1922F4A2C(_Unwind_Exception *a1)
{
  std::string::size_type v3 = v1;
  operator delete(v3);
  __cxa_free_exception(v2);
  _Unwind_Resume(a1);
}

BOOL E5RT::E5CompilerOptions::GetExperimentalForceClassicCpuBackend(E5RT::E5CompilerOptions *this)
{
  long long v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "preferredCpuBackends<std::vector<std::string>>", 46);
  }
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  uint64_t v4 = *v3;
  if ((char *)v3[1] - (char *)*v3 != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v15 = (char *)operator new(0x28uLL);
    long long v16 = xmmword_192DAB6C0;
    strcpy(v15, "GetExperimentalForceClassicCpuBackend");
    int v12 = (char *)operator new(0x60uLL);
    long long v13 = xmmword_192DAB6D0;
    strcpy(v12, "GetExperimentalForceClassicCpuBackend is not supported when multiple CPU backends are set.");
    E5RT::Status::Status(v14, 2, &v12);
    E5RT::E5RTError::E5RTError(exception, &v15, v14);
  }
  uint64_t v5 = *((unsigned __int8 *)v4 + 23);
  if (*((char *)v4 + 23) < 0)
  {
    v6 = (uint64_t *)*v4;
    if (v4[1] != 11) {
      goto LABEL_14;
    }
  }
  else
  {
    v6 = *v3;
    if (v5 != 11) {
      goto LABEL_14;
    }
  }
  uint64_t v7 = *v6;
  uint64_t v8 = *(uint64_t *)((char *)v6 + 3);
  if (v7 == 0x5F63697373616C63 && v8 == 0x7570635F63697373) {
    return 1;
  }
LABEL_14:
  if ((v5 & 0x80) != 0)
  {
    uint64_t v4 = (uint64_t *)*v4;
    if ((*v3)[1] == 4) {
      return *(_DWORD *)v4 == 1936617058;
    }
  }
  else if (v5 == 4)
  {
    return *(_DWORD *)v4 == 1936617058;
  }
  return 0;
}

void sub_1922F4CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::E5CompilerOptions::SetForceBNNSGraph(E5RT::E5CompilerOptions *this, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (const void *)*((void *)this + 1);
  if (v3) {
  else
  }
    uint64_t v4 = 0;
  uint64_t v5 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v4 + 16))(v4, "preferredCpuBackends<std::vector<std::string>>", 46);
  if (!*v5
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  uint64_t v7 = *v6;
  if ((char *)v6[1] - (char *)*v6 != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    BYTE7(v28[1]) = 17;
    strcpy((char *)v28, "SetForceBNNSGraph");
    __p = operator new(0x48uLL);
    long long v25 = xmmword_192DAB6E0;
    strcpy((char *)__p, "SetForceBNNSGraph is not supported when multiple CPU backends are set.");
    E5RT::Status::Status(v26, 2, &__p);
    E5RT::E5RTError::E5RTError(exception, v28, v26);
  }
  uint64_t v8 = *((unsigned __int8 *)v7 + 23);
  if (a2)
  {
    if ((v8 & 0x80) != 0)
    {
      long long v9 = (unsigned __int16 **)*v7;
      if (v7[1] != (unsigned __int16 *)3) {
        goto LABEL_19;
      }
    }
    else
    {
      long long v9 = *v6;
      if (v8 != 3) {
        goto LABEL_19;
      }
    }
    int v11 = *(unsigned __int16 *)v9;
    int v12 = *((unsigned __int8 *)v9 + 2);
    if (v11 == 27757 && v12 == 99)
    {
      char v27 = 8;
      strcpy((char *)v26, "mlc/bnns");
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
      memset(v28, 0, sizeof(v28));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)__p) >> 3));
      *(void *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
      if (*(void *)&v28[0]) {
        (*(void (**)(void, _OWORD *, void, void, void))&v28[0])(0, v28, 0, 0, 0);
      }
      v17 = (void **)__p;
      if (!__p) {
        goto LABEL_69;
      }
      v21 = (void **)v25;
      v19 = __p;
      if ((void *)v25 == __p) {
        goto LABEL_68;
      }
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v17);
      goto LABEL_67;
    }
LABEL_19:
    if ((v8 & 0x80) != 0)
    {
      uint64_t v7 = (unsigned __int16 **)*v7;
      if ((*v6)[1] != (unsigned __int16 *)11) {
        return;
      }
    }
    else if (v8 != 11)
    {
      return;
    }
    v14 = (unsigned __int16 **)*v7;
    uint64_t v15 = *(uint64_t *)((char *)v7 + 3);
    if (v14 != (unsigned __int16 **)0x5F63697373616C63 || v15 != 0x7570635F63697373) {
      return;
    }
    char v27 = 4;
    strcpy((char *)v26, "bnns");
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
    memset(v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)__p) >> 3));
    *(void *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
    if (*(void *)&v28[0]) {
      (*(void (**)(void, _OWORD *, void, void, void))&v28[0])(0, v28, 0, 0, 0);
    }
    v17 = (void **)__p;
    if (!__p)
    {
LABEL_69:
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      return;
    }
    v18 = (void **)v25;
    v19 = __p;
    if ((void *)v25 == __p)
    {
LABEL_68:
      *(void *)&long long v25 = v17;
      operator delete(v19);
      goto LABEL_69;
    }
    do
    {
      if (*((char *)v18 - 1) < 0) {
        operator delete(*(v18 - 3));
      }
      v18 -= 3;
    }
    while (v18 != v17);
LABEL_67:
    v19 = __p;
    goto LABEL_68;
  }
  if ((v8 & 0x80) != 0)
  {
    v10 = *v7;
    if (v7[1] != (unsigned __int16 *)4) {
      goto LABEL_24;
    }
  }
  else
  {
    v10 = (unsigned __int16 *)*v6;
    if (v8 != 4) {
      goto LABEL_24;
    }
  }
  if (*(_DWORD *)v10 == 1936617058)
  {
    char v27 = 11;
    strcpy((char *)v26, "classic_cpu");
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
    memset(v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)__p) >> 3));
    *(void *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
    if (*(void *)&v28[0]) {
      (*(void (**)(void, _OWORD *, void, void, void))&v28[0])(0, v28, 0, 0, 0);
    }
    v17 = (void **)__p;
    if (!__p) {
      goto LABEL_69;
    }
    v22 = (void **)v25;
    v19 = __p;
    if ((void *)v25 == __p) {
      goto LABEL_68;
    }
    do
    {
      if (*((char *)v22 - 1) < 0) {
        operator delete(*(v22 - 3));
      }
      v22 -= 3;
    }
    while (v22 != v17);
    goto LABEL_67;
  }
LABEL_24:
  if ((v8 & 0x80) != 0)
  {
    uint64_t v7 = (unsigned __int16 **)*v7;
    if ((*v6)[1] != (unsigned __int16 *)8) {
      return;
    }
  }
  else if (v8 != 8)
  {
    return;
  }
  if (*v7 == (unsigned __int16 *)0x736E6E622F636C6DLL)
  {
    char v27 = 3;
    strcpy((char *)v26, "mlc");
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)v26, 1uLL);
    memset(v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v28 + 1, (uint64_t)__p, v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)__p) >> 3));
    *(void *)&v28[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v28);
    if (*(void *)&v28[0]) {
      (*(void (**)(void, _OWORD *, void, void, void))&v28[0])(0, v28, 0, 0, 0);
    }
    v17 = (void **)__p;
    if (!__p) {
      goto LABEL_69;
    }
    v20 = (void **)v25;
    v19 = __p;
    if ((void *)v25 == __p) {
      goto LABEL_68;
    }
    do
    {
      if (*((char *)v20 - 1) < 0) {
        operator delete(*(v20 - 3));
      }
      v20 -= 3;
    }
    while (v20 != v17);
    goto LABEL_67;
  }
}

void sub_1922F5438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL E5RT::E5CompilerOptions::GetForceBNNSGraph(E5RT::E5CompilerOptions *this)
{
  long long v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "preferredCpuBackends<std::vector<std::string>>", 46);
  }
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  uint64_t v4 = (_DWORD *)*v3;
  if (v3[1] - *v3 != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v12[23] = 17;
    strcpy(v12, "GetForceBNNSGraph");
    long long v9 = (char *)operator new(0x48uLL);
    long long v10 = xmmword_192DAB6E0;
    strcpy(v9, "GetForceBNNSGraph is not supported when multiple CPU backends are set.");
    E5RT::Status::Status(v11, 2, &v9);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  uint64_t v5 = *((unsigned __int8 *)v4 + 23);
  if (*((char *)v4 + 23) < 0)
  {
    v6 = *(_DWORD **)v4;
    if (*((void *)v4 + 1) != 4) {
      goto LABEL_11;
    }
  }
  else
  {
    v6 = (_DWORD *)*v3;
    if (v5 != 4) {
      goto LABEL_11;
    }
  }
  if (*v6 == 1936617058) {
    return 1;
  }
LABEL_11:
  if ((v5 & 0x80) != 0)
  {
    uint64_t v4 = *(_DWORD **)v4;
    if (*(void *)(*v3 + 8) == 8) {
      return *(void *)v4 == 0x736E6E622F636C6DLL;
    }
  }
  else if (v5 == 8)
  {
    return *(void *)v4 == 0x736E6E622F636C6DLL;
  }
  return 0;
}

void sub_1922F58E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void E5RT::E5CompilerOptions::SetPreferredCpuBackend(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v10 = *(std::string *)a2;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_6:
  std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v10, 1uLL);
  memset(v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v11 + 1, (uint64_t)__p, (uint64_t)v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)__p) >> 3));
  *(void *)&v11[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
  (*(void (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v11);
  if (*(void *)&v11[0]) {
    (*(void (**)(void, _OWORD *, void, void, void))&v11[0])(0, v11, 0, 0, 0);
  }
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    uint64_t v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    long long v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1922F5B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetPreferredCpuBackend(E5RT::E5CompilerOptions *this)
{
  long long v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "preferredCpuBackends<std::vector<std::string>>", 46);
  }
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  uint64_t v5 = v3;
  uint64_t result = *v3;
  if (v5[1] - result != 24)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    strcpy(v10, "GetPreferredCpuBackend");
    v10[23] = 22;
    uint64_t v7 = (char *)operator new(0x48uLL);
    long long v8 = xmmword_192DAB6F0;
    strcpy(v7, "Multiple CPU backends are set. Use GetPreferredCpuBackends instead.");
    E5RT::Status::Status(v9, 2, &v7);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  return result;
}

void sub_1922F5D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t E5RT::E5CompilerOptions::SetEnableReshapeWithMinimalAllocations(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "enableReshapeWithMinimalAllocations<BOOL>", 41, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F5EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetForceClassicAotOldHw(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "forceClassicAotOldHw<BOOL>", 26, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F6010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetCustomAneCompilerOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    v6 = 0;
    v7.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v7 = *(std::string *)a2;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = 0;
    v6 = 0;
    v7.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_6:
  v6 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *(**)(unsigned int, uint64_t, uint64_t, uint64_t, void *)))(*(void *)v4 + 24))(v4, "customAneCompilerOptions<std::string>", 37, &v6);
  if (v6) {
    return (uint64_t)v6(0, (uint64_t)&v6, 0, 0, 0);
  }
  return result;
}

void sub_1922F61A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalEnableDefaultFunctionForRangeDim(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "experimentalEnableDefaultFunctionForRangeDim<BOOL>", 50, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F62F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatterns(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "experimentalMatchE5MinimalCpuPatterns<BOOL>", 43, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F6440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMoveReadStateOps(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "experimentalMoveReadStateOps<BOOL>", 34, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F658C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalShrinkQuantGroup(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "experimentalShrinkQuantGroup<BOOL>", 34, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F66D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetEnableMPSGraphPackage(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "enableMPSGraphPackage<BOOL>", 27, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1922F6824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetEnableMPSGraphPackage(E5RT::E5CompilerOptions *this)
{
  long long v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "enableMPSGraphPackage<BOOL>", 27);
  }
  if (!*v2
    || (std::string::size_type v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::operator==(E5RT::E5CompilerOptions *a1, E5RT::ConfigOptions *this)
{
  if (E5RT::ConfigOptions::GetNumConfigOptions(this) != 17)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v82, "operator==");
    std::string::basic_string[abi:ne180100]<0>(v80, "Unexpected number of options");
    E5RT::Status::Status(v81, 2, v80);
    E5RT::E5RTError::E5RTError(exception, v82, v81);
  }
  uint64_t v4 = (void *)*((void *)a1 + 1);
  if (v4) {
  uint64_t v5 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v4 + 16))(v4, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62);
  }
  if (!*v5) {
    goto LABEL_107;
  }
  if (!v6) {
    goto LABEL_107;
  }
  std::string v7 = (void *)*((void *)this + 1);
  if (v7) {
  uint64_t v8 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v7 + 16))(v7, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62);
  }
  if (!*v8) {
    goto LABEL_107;
  }
  if (!v9) {
    goto LABEL_107;
  }
  int v11 = *(void **)v6;
  std::string v10 = *(void **)(v6 + 8);
  uint64_t v12 = *(void **)v9;
  if ((void *)((char *)v10 - *(void *)v6) != (void *)(*(void *)(v9 + 8) - *(void *)v9)) {
    return 0;
  }
  if (v11 != v10)
  {
    while (*v11 == *v12)
    {
      ++v11;
      ++v12;
      if (v11 == v10) {
        goto LABEL_14;
      }
    }
    return 0;
  }
LABEL_14:
  long long v13 = (void *)*((void *)a1 + 1);
  if (v13) {
  v14 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v13 + 16))(v13, "milEntryPoints<std::vector<std::string>>", 40);
  }
  if (!*v14) {
    goto LABEL_107;
  }
  if (!v15) {
    goto LABEL_107;
  }
  long long v16 = (void *)*((void *)this + 1);
  if (v16) {
  v17 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v16 + 16))(v16, "milEntryPoints<std::vector<std::string>>", 40);
  }
  if (!*v17) {
    goto LABEL_107;
  }
  if (!v18) {
    goto LABEL_107;
  }
  v21 = v15;
  uint64_t v19 = *v15;
  uint64_t v20 = v21[1];
  int v22 = *v18;
  if (v20 - v19 != (char *)v18[1] - (char *)*v18) {
    return 0;
  }
  for (; v19 != v20; v22 += 3)
  {
    uint64_t v23 = *(unsigned __int8 *)(v19 + 23);
    if ((v23 & 0x80u) == 0) {
      v24 = (unsigned __int8 *)*(unsigned __int8 *)(v19 + 23);
    }
    else {
      v24 = *(unsigned __int8 **)(v19 + 8);
    }
    long long v25 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
    int v26 = (char)v25;
    if ((char)v25 < 0) {
      long long v25 = v22[1];
    }
    if (v24 != v25) {
      return 0;
    }
    if (v26 >= 0) {
      char v27 = (unsigned __int8 *)v22;
    }
    else {
      char v27 = *v22;
    }
    if ((v23 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v19, v27, *(void *)(v19 + 8))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v19 + 23))
    {
      uint64_t v28 = 0;
      while (*(unsigned __int8 *)(v19 + v28) == v27[v28])
      {
        if (v23 == ++v28) {
          goto LABEL_40;
        }
      }
      return 0;
    }
LABEL_40:
    v19 += 24;
  }
  uint64_t v29 = (void *)*((void *)a1 + 1);
  if (v29) {
  v30 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v29 + 16))(v29, "enableProfiling<BOOL>", 21);
  }
  if (!*v30) {
    goto LABEL_107;
  }
  v31 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v30)(3, v30, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v31) {
    goto LABEL_107;
  }
  int v32 = *v31;
  v33 = (void *)*((void *)this + 1);
  if (v33) {
  v34 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v33 + 16))(v33, "enableProfiling<BOOL>", 21);
  }
  if (!*v34) {
    goto LABEL_107;
  }
  v35 = (unsigned char *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v34)(3, v34, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v35) {
    goto LABEL_107;
  }
  if ((v32 != 0) != (*v35 != 0)) {
    return 0;
  }
  v36 = (void *)*((void *)a1 + 1);
  if (v36) {
  v37 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v36 + 16))(v36, "forceRecompilation<BOOL>", 24);
  }
  if (!*v37) {
    goto LABEL_107;
  }
  v38 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v37)(3, v37, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v38) {
    goto LABEL_107;
  }
  int v39 = *v38;
  v40 = (void *)*((void *)this + 1);
  if (v40) {
  v41 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v40 + 16))(v40, "forceRecompilation<BOOL>", 24);
  }
  if (!*v41) {
    goto LABEL_107;
  }
  v42 = (unsigned char *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v41)(3, v41, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v42) {
    goto LABEL_107;
  }
  if ((v39 != 0) != (*v42 != 0)) {
    return 0;
  }
  v43 = (void *)*((void *)a1 + 1);
  if (v43) {
  v44 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v43 + 16))(v43, "forceFetchFromCache<BOOL>", 25);
  }
  if (!*v44) {
    goto LABEL_107;
  }
  v45 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v44)(3, v44, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v45) {
    goto LABEL_107;
  }
  int v46 = *v45;
  v47 = (void *)*((void *)this + 1);
  if (v47) {
  v48 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v47 + 16))(v47, "forceFetchFromCache<BOOL>", 25);
  }
  if (!*v48) {
    goto LABEL_107;
  }
  v49 = (unsigned char *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v48)(3, v48, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id);
  if (!v49) {
    goto LABEL_107;
  }
  if ((v46 != 0) != (*v49 != 0)) {
    return 0;
  }
  v50 = (void *)*((void *)a1 + 1);
  if (v50) {
  v51 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v50 + 16))(v50, "preferredCpuBackends<std::vector<std::string>>", 46);
  }
  if (!*v51) {
    goto LABEL_107;
  }
  if (!v52) {
    goto LABEL_107;
  }
  v53 = (void *)*((void *)this + 1);
  if (v53) {
  v54 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v53 + 16))(v53, "preferredCpuBackends<std::vector<std::string>>", 46);
  }
  if (!*v54
  {
LABEL_107:
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  v58 = v52;
  uint64_t v56 = *v52;
  uint64_t v57 = v58[1];
  v59 = *v55;
  if (v57 - v56 != (char *)v55[1] - (char *)*v55) {
    return 0;
  }
  for (; v56 != v57; v59 += 3)
  {
    uint64_t v60 = *(unsigned __int8 *)(v56 + 23);
    if ((v60 & 0x80u) == 0) {
      v61 = (unsigned __int8 *)*(unsigned __int8 *)(v56 + 23);
    }
    else {
      v61 = *(unsigned __int8 **)(v56 + 8);
    }
    v62 = (unsigned __int8 *)*((unsigned __int8 *)v59 + 23);
    int v63 = (char)v62;
    if ((char)v62 < 0) {
      v62 = v59[1];
    }
    if (v61 != v62) {
      return 0;
    }
    if (v63 >= 0) {
      v64 = (unsigned __int8 *)v59;
    }
    else {
      v64 = *v59;
    }
    if ((v60 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v56, v64, *(void *)(v56 + 8))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v56 + 23))
    {
      uint64_t v65 = 0;
      while (*(unsigned __int8 *)(v56 + v65) == v64[v65])
      {
        if (v60 == ++v65) {
          goto LABEL_94;
        }
      }
      return 0;
    }
LABEL_94:
    v56 += 24;
  }
  int EnableReshapeWithMinimalAllocations = E5RT::E5CompilerOptions::GetEnableReshapeWithMinimalAllocations(a1);
  if (EnableReshapeWithMinimalAllocations != E5RT::E5CompilerOptions::GetEnableReshapeWithMinimalAllocations(this)) {
    return 0;
  }
  int ForceClassicAotOldHw = E5RT::E5CompilerOptions::GetForceClassicAotOldHw(a1);
  if (ForceClassicAotOldHw != E5RT::E5CompilerOptions::GetForceClassicAotOldHw(this)) {
    return 0;
  }
  CustomAneCompilerOptions = (unsigned __int8 *)E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(a1);
  v69 = (unsigned __int8 *)E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(this);
  if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(CustomAneCompilerOptions, v69)) {
    return 0;
  }
  int ExperimentalDisableDataDependentShape = E5RT::E5CompilerOptions::GetExperimentalDisableDataDependentShape(a1);
  if (ExperimentalDisableDataDependentShape != E5RT::E5CompilerOptions::GetExperimentalDisableDataDependentShape(this)) {
    return 0;
  }
  int ExperimentalEnableDefaultFunctionForRangeDim = E5RT::E5CompilerOptions::GetExperimentalEnableDefaultFunctionForRangeDim(a1);
  if (ExperimentalEnableDefaultFunctionForRangeDim != E5RT::E5CompilerOptions::GetExperimentalEnableDefaultFunctionForRangeDim(this)) {
    return 0;
  }
  int ExperimentalMatchE5MinimalCpuPatterns = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatterns(a1);
  if (ExperimentalMatchE5MinimalCpuPatterns != E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatterns(this)) {
    return 0;
  }
  int ExperimentalMatchE5MinimalCpuPatternsForStates = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatternsForStates(a1);
  if (ExperimentalMatchE5MinimalCpuPatternsForStates != E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatternsForStates(this)) {
    return 0;
  }
  int StateOps = E5RT::E5CompilerOptions::GetExperimentalMoveReadStateOps(a1);
  if (StateOps != E5RT::E5CompilerOptions::GetExperimentalMoveReadStateOps(this)) {
    return 0;
  }
  int ExperimentalShrinkQuantGroup = E5RT::E5CompilerOptions::GetExperimentalShrinkQuantGroup(a1);
  if (ExperimentalShrinkQuantGroup != E5RT::E5CompilerOptions::GetExperimentalShrinkQuantGroup(this)) {
    return 0;
  }
  int ExperimentalDisableCompileTimeMPSGraphTypeInference = E5RT::E5CompilerOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(a1);
  if (ExperimentalDisableCompileTimeMPSGraphTypeInference != E5RT::E5CompilerOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(this)) {
    return 0;
  }
  int EnableMPSGraphPackage = E5RT::E5CompilerOptions::GetEnableMPSGraphPackage(a1);
  return EnableMPSGraphPackage ^ E5RT::E5CompilerOptions::GetEnableMPSGraphPackage(this) ^ 1;
}

void sub_1922F7520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

uint64_t E5RT::E5CompilerOptions::operator!=(E5RT::E5CompilerOptions *a1, E5RT::ConfigOptions *a2)
{
  return E5RT::E5CompilerOptions::operator==(a1, a2) ^ 1;
}

void sub_1922F76A8(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);

  JUMPOUT(0x192FF16B0);
}

void sub_1922F76E0(void **a1, uint64_t a2, void **a3)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v6 = (void **)*a3;
    int v7 = *a1;
    if (*a3 != v3)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v3);
      int v7 = *a1;
    }
    *a3 = v3;
    operator delete(v7);
  }
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::~AneInferenceOperationImplUsingAnefAPIs(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE3269D8;
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 20);
    uint64_t v4 = [MEMORY[0x1E4F1CA60] dictionary];
    char v5 = [v3 unloadModel:v2 options:v4 qos:21 error:0];

    if ((v5 & 1) == 0)
    {
      char v25 = 4;
      strcpy(__p, "e5rt");
      uint64_t v6 = E5RT::GetE5RTLog((uint64_t)__p);
      if (v25 < 0) {
        operator delete(*(void **)__p);
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1922FDE50();
      }
    }
    char v25 = 4;
    strcpy(__p, "e5rt");
    int v7 = E5RT::GetE5RTLog((uint64_t)__p);
    int v8 = v7;
    if (v25 < 0)
    {
      operator delete(*(void **)__p);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
LABEL_13:

        goto LABEL_14;
      }
    }
    else if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      goto LABEL_13;
    }
    int v9 = [*((id *)this + 21) modelURL];
    id v10 = [v9 path];
    uint64_t v11 = [v10 UTF8String];
    *(_DWORD *)__p = 136315138;
    *(void *)&__p[4] = v11;
    _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "Unloaded ANE JIT Model at path = %s \n", __p, 0xCu);

    goto LABEL_13;
  }
LABEL_14:
  if (*((void *)this + 10) && !*((void *)this + 15))
  {
    if (([*((id *)this + 20) unloadModel:*((void *)this + 21) options:MEMORY[0x1E4F1CC08] qos:21 error:0] & 1) == 0)
    {
      char v25 = 4;
      strcpy(__p, "e5rt");
      uint64_t v12 = E5RT::GetE5RTLog((uint64_t)__p);
      if (v25 < 0) {
        operator delete(*(void **)__p);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v21 = [*((id *)this + 21) modelURL];
        id v22 = [v21 path];
        uint64_t v23 = [v22 UTF8String];
        *(_DWORD *)__p = 136315138;
        *(void *)&__p[4] = v23;
        _os_log_error_impl(&dword_1920CB000, v12, OS_LOG_TYPE_ERROR, "ANE Model unload failed. (Program path : %s)", __p, 0xCu);
      }
    }
    char v25 = 4;
    strcpy(__p, "e5rt");
    long long v13 = E5RT::GetE5RTLog((uint64_t)__p);
    v14 = v13;
    if (v25 < 0)
    {
      operator delete(*(void **)__p);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
LABEL_27:

        goto LABEL_28;
      }
    }
    else if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      goto LABEL_27;
    }
    uint64_t v15 = [*((id *)this + 21) modelURL];
    id v16 = [v15 path];
    uint64_t v17 = [v16 UTF8String];
    *(_DWORD *)__p = 136315138;
    *(void *)&__p[4] = v17;
    _os_log_impl(&dword_1920CB000, v14, OS_LOG_TYPE_INFO, "Unloaded Adapted ANE Model at path = %s \n", __p, 0xCu);

    goto LABEL_27;
  }
LABEL_28:

  v18 = (id *)*((void *)this + 37);
  if (v18)
  {
    do
    {
      uint64_t v19 = (id *)*v18;

      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  uint64_t v20 = (void *)*((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v20) {
    operator delete(v20);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 208));

  E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl(this);
}

{
  uint64_t vars8;

  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::~AneInferenceOperationImplUsingAnefAPIs(this);

  JUMPOUT(0x192FF16B0);
}

void sub_1922F7B64(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ValidateMutableWeights(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v18, *(void *)(v2 + 56), *(void *)(v2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 64) - *(void *)(v2 + 56)) >> 3));
  uint64_t v3 = v19;
  std::vector<std::string>::size_type v4 = *((void *)this + 10);
  if (v19 == v18)
  {
    if (!v4) {
      goto LABEL_24;
    }
  }
  else if (!v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "ValidateMutableWeights");
    E5RT::Status::Status(v15, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v16, v15);
  }
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::reserve(&v17, v4);
  uint64_t v6 = (uint64_t *)*((void *)this + 9);
  if (v6)
  {
    std::vector<std::string>::pointer end = v17.__end_;
    do
    {
      int v9 = (long long *)(v6 + 2);
      if (end < v17.__end_cap_.__value_)
      {
        if (*((char *)v6 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v6[2], v6[3]);
        }
        else
        {
          long long v8 = *v9;
          end->__r_.__value_.__r.__words[2] = v6[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        }
        ++end;
      }
      else
      {
        std::vector<std::string>::pointer end = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v17, (uint64_t)v9);
      }
      v17.__end_ = end;
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    std::vector<std::string>::pointer end = v17.__end_;
  }
  begin = v17.__begin_;
  uint64_t v3 = v18;
  if ((char *)end - (char *)v17.__begin_ != (char *)v19 - (char *)v18)
  {
    long long v13 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "ValidateMutableWeights");
    E5RT::Status::Status(v14, 1, v16);
    E5RT::E5RTError::E5RTError(v13, v15, v14);
  }
  if (v17.__begin_)
  {
    if (end != v17.__begin_)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != begin);
      std::vector<std::string>::pointer end = v17.__begin_;
    }
    v17.__end_ = begin;
    operator delete(end);
    uint64_t v3 = v18;
  }
LABEL_24:
  if (v3)
  {
    uint64_t v11 = v19;
    uint64_t v12 = v3;
    if (v19 != v3)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v3);
      uint64_t v12 = v18;
    }
    uint64_t v19 = v3;
    operator delete(v12);
  }
}

void sub_1922F7E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  E5RT::Status::~Status((E5RT::Status *)&a11);
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
      {
        operator delete(a23);
        std::vector<std::string>::~vector[abi:ne180100]((void **)(v30 - 56));
        _Unwind_Resume(a1);
      }
      std::vector<std::string>::~vector[abi:ne180100]((void **)(v30 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

void sub_1922F7F44(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  char v11 = 4;
  strcpy(__p, "e5rt");
  uint64_t v3 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v11 < 0)
  {
    operator delete(*(void **)__p);
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  else
  {
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  if (os_signpost_enabled(v3))
  {
    char v5 = *(uint64_t **)(v2 + 16);
    uint64_t v6 = v5;
    if (*((char *)v5 + 23) < 0)
    {
      uint64_t v6 = (uint64_t *)*v5;
      int v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      int v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0)
      {
LABEL_8:
        *(_DWORD *)__p = 136315394;
        *(void *)&__p[4] = v6;
        __int16 v9 = 2080;
        id v10 = v7;
        _os_signpost_emit_with_name_impl(&dword_1920CB000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AneOpPrepareForEncode", "Model=%{signpost.description:attribute}s Procedure=%{signpost.description:attribute}s ", __p, 0x16u);
        goto LABEL_9;
      }
    }
    int v7 = (void *)*v7;
    goto LABEL_8;
  }
LABEL_9:
}

void sub_1922F8094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::unordered_map<std::string,std::string>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  os_signpost_id_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1922F8110(uint64_t a1, uint64_t *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v28 = *(void *)(a1 + 16);
    do
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      id obj = **(id **)a1;
      uint64_t v4 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
      if (!v4) {
        goto LABEL_44;
      }
      uint64_t v29 = *(void *)v34;
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v34 != v29) {
            objc_enumerationMutation(obj);
          }
          uint64_t v6 = [*(id *)(*((void *)&v33 + 1) + 8 * v5) integerValue];
          id v7 = [**(id **)(a1 + 8) objectAtIndexedSubscript:v6];
          long long v8 = (const char *)[v7 UTF8String];
          size_t v9 = strlen(v8);
          if (v9 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v10 = v9;
          if (v9 >= 0x17)
          {
            uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v9 | 7) != 0x17) {
              uint64_t v12 = v9 | 7;
            }
            uint64_t v13 = v12 + 1;
            p_dst = (void **)operator new(v12 + 1);
            size_t __n = v10;
            int64_t v32 = v13 | 0x8000000000000000;
            __dst = p_dst;
LABEL_15:
            memmove(p_dst, v8, v10);
            goto LABEL_16;
          }
          HIBYTE(v32) = v9;
          p_dst = (void **)&__dst;
          if (v9) {
            goto LABEL_15;
          }
LABEL_16:
          *((unsigned char *)p_dst + v10) = 0;

          v14 = (const void *)v2[5];
          if (v14) {
          else
          }
            uint64_t v15 = 0;
          uint64_t v16 = HIBYTE(v32);
          if (v32 >= 0) {
            size_t v17 = HIBYTE(v32);
          }
          else {
            size_t v17 = __n;
          }
          uint64_t v18 = *((unsigned __int8 *)v2 + 39);
          int v19 = (char)v18;
          if ((v18 & 0x80u) != 0) {
            uint64_t v18 = v2[3];
          }
          if (v17 == v18)
          {
            if (v19 >= 0) {
              uint64_t v20 = (unsigned __int8 *)(v2 + 2);
            }
            else {
              uint64_t v20 = (unsigned __int8 *)v2[2];
            }
            if (v32 < 0)
            {
              if (!memcmp(__dst, v20, __n)) {
                goto LABEL_36;
              }
            }
            else
            {
              if (!HIBYTE(v32)) {
                goto LABEL_36;
              }
              v21 = (void **)&__dst;
              while (*(unsigned __int8 *)v21 == *v20)
              {
                v21 = (void **)((char *)v21 + 1);
                ++v20;
                if (!--v16) {
                  goto LABEL_36;
                }
              }
            }
          }
          Aliases = (void *)E5RT::IOPortPriv::GetAliases(v15);
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(Aliases, (uint64_t)&__dst))
          {
LABEL_36:
            uint64_t v23 = [NSNumber numberWithUnsignedInteger:v6];
            v24 = *(void **)(v28 + 344);
            ++**(void **)(a1 + 24);
            objc_msgSend(v24, "setObject:atIndexedSubscript:", v23);

            int v25 = 0;
            if ((SHIBYTE(v32) & 0x80000000) == 0) {
              goto LABEL_38;
            }
LABEL_37:
            operator delete(__dst);
            goto LABEL_38;
          }
          int v25 = 1;
          if (SHIBYTE(v32) < 0) {
            goto LABEL_37;
          }
LABEL_38:
          if (!v25) {
            goto LABEL_44;
          }
          ++v5;
        }
        while (v5 != v4);
        uint64_t v26 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
        uint64_t v4 = v26;
      }
      while (v26);
LABEL_44:

      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_1922F8434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::BindDependentAsyncEventsImpl(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  uint64_t v2 = (void *)*((void *)this + 25);
  *((void *)this + 25) = 0;

  uint64_t v3 = (void *)*((void *)this + 40);
  *((void *)this + 40) = 0;

  if (*((void *)this + 38))
  {
    uint64_t v4 = (id *)*((void *)this + 37);
    if (v4)
    {
      do
      {
        uint64_t v5 = (id *)*v4;

        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *((void *)this + 37) = 0;
    uint64_t v6 = *((void *)this + 36);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*((void *)this + 35) + 8 * i) = 0;
    }
    *((void *)this + 38) = 0;
  }
  uint64_t DependentAsyncEvents = E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                                         + 1));
  if (*(void *)(DependentAsyncEvents + 24))
  {
    uint64_t v9 = DependentAsyncEvents;
    uint64_t v10 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:");
    char v11 = (void *)*((void *)this + 40);
    *((void *)this + 40) = v10;

    uint64_t v12 = *(uint64_t ***)(v9 + 16);
    if (v12)
    {
      uint64_t v13 = 0;
      do
      {
        v14 = v12[2];
        uint64_t v15 = (std::__shared_weak_count *)v12[3];
        v22[0] = v14;
        v22[1] = &v15->__vftable;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>((uint64_t)v14);
        if (v15)
        {
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        size_t v17 = [MEMORY[0x1E4F4E0A0] waitEventWithValue:E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)v12[2]) sharedEvent:v16];
        [*((id *)this + 40) setObject:v17 atIndexedSubscript:v13];

        uint64_t v18 = [*((id *)this + 40) objectAtIndexedSubscript:v13];
        v21 = v12[2];
        v22[0] = &v21;
        int v19 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>((uint64_t)this + 280, (uint64_t *)&v21, (uint64_t)&std::piecewise_construct, v22);
        uint64_t v20 = (void *)v19[3];
        v19[3] = v18;

        ++v13;
        uint64_t v12 = (uint64_t **)*v12;
      }
      while (v12);
    }
  }
}

void sub_1922F8698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1922F86A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1922F86BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1922F86D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::EncodeOperation(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  uint64_t v2 = E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(*((const void **)this + 4));
  [v2 programHandle];
  v34[3] = 0x2B23800800000000;
  long long v35 = 0u;
  long long v36 = 0u;
  kdebug_trace();

  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ValidateMutableWeights(this);
  uint64_t v3 = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                            + 1))
                    + 16);
  for (i = 0; v3; uint64_t v3 = (uint64_t **)*v3)
  {
    MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v3[5]);
    if (E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef))
    {
      uint64_t v6 = E5RT::MemoryObject::Buffer(MemoryObjectRef);
      uint64_t v7 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v6);
    }
    else
    {
      long long v8 = E5RT::MemoryObject::Surface(MemoryObjectRef);
      uint64_t v7 = E5RT::SurfaceObject::GetHandle<__IOSurface *>(v8);
    }
    uint64_t v9 = [MEMORY[0x1E4F4E048] objectWithIOSurface:v7];
    [*((id *)this + 42) setObject:v9 atIndexedSubscript:i++];
  }
  for (j = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                                 + 1))
                         + 16); j; j = (uint64_t **)*j)
  {
    char v11 = (void *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)j[5]);
    if (!E5RT::MemoryObject::TryAsBuffer(v11))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v34, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v32, "InOut of surface (pixel buffer) type is not supported");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(exception, v34, v33);
    }
    uint64_t v12 = E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)v11);
    uint64_t v13 = [MEMORY[0x1E4F4E048] objectWithIOSurface:E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v12)];
    [*((id *)this + 42) setObject:v13 atIndexedSubscript:i++];
  }
  v14 = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                              + 1))
                     + 16);
  if (v14)
  {
    unsigned int v15 = 0;
    do
    {
      uint64_t v16 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v14[5]);
      if (E5RT::MemoryObject::TryAsBuffer(v16))
      {
        size_t v17 = E5RT::MemoryObject::Buffer(v16);
        uint64_t v18 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v17);
      }
      else
      {
        int v19 = E5RT::MemoryObject::Surface(v16);
        uint64_t v18 = E5RT::SurfaceObject::GetHandle<__IOSurface *>(v19);
      }
      uint64_t v20 = [MEMORY[0x1E4F4E048] objectWithIOSurface:v18];
      [*((id *)this + 44) setObject:v20 atIndexedSubscript:v15++];

      v14 = (uint64_t **)*v14;
    }
    while (v14);
  }
  if (!*((void *)this + 25))
  {
    uint64_t v21 = [MEMORY[0x1E4F4E090] sharedEventsWithSignalEvents:*((void *)this + 41) waitEvents:*((void *)this + 40)];
    id v22 = (void *)*((void *)this + 25);
    *((void *)this + 25) = v21;
  }
  StreamConfigOptions = (E5RT::ExecutionStreamConfigOptions *)E5RT::ExecutionStreamOperationInternal::GetStreamConfigOptions(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  uint64_t SkipIOFences = E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions);
  int v25 = (void *)*((void *)this + 46);
  uint64_t v26 = [NSNumber numberWithBool:SkipIOFences];
  [v25 setObject:v26 forKey:*MEMORY[0x1E4F4E0D0]];

  uint64_t v27 = [MEMORY[0x1E4F4E088] requestWithInputs:*((void *)this + 42) inputIndices:*((void *)this + 43) outputs:*((void *)this + 44) outputIndices:*((void *)this + 45) weightsBuffer:0 perfStats:0 procedureIndex:*((void *)this + 23) sharedEvents:*((void *)this + 25)];
  uint64_t v28 = (void *)*((void *)this + 24);
  *((void *)this + 24) = v27;

  if (([*((id *)this + 24) validate] & 1) == 0)
  {
    uint64_t v30 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v34, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v32, "ANE Request validation failed.");
    E5RT::Status::Status(v33, 2, v32);
    E5RT::E5RTError::E5RTError(v30, v34, v33);
  }
  return kdebug_trace();
}

void sub_1922F8A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1922F8AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1922F8AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1922F8AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1922F8AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1922F8B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1922F8B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1922F8B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1922F8B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v25 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v25)
  {
LABEL_8:
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a24);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::EvaluateANERequest(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = 176;
  if (!*(void *)(a1 + 176)) {
    uint64_t v4 = 168;
  }
  id v5 = *(id *)(a1 + v4);
  uint64_t v6 = *(void **)(a1 + 160);
  uint64_t v7 = *(void *)(a1 + 368);
  if (*(unsigned char *)(a1 + 156)) {
    uint64_t v8 = *(unsigned int *)(a1 + 152);
  }
  else {
    uint64_t v8 = [MEMORY[0x1E4F4E080] aneDefaultTaskQoS];
  }
  id v32 = 0;
  char v9 = [v6 evaluateWithModel:v5 options:v7 request:v3 qos:v8 error:&v32];
  id v10 = v32;
  char v11 = v10;
  if ((v9 & 1) == 0)
  {
    if (!v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "ANE inference operation failed due to unknown error.");
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "EvaluateANERequest");
      E5RT::Status::Status(&v28, 11, &v31);
      E5RT::E5RTError::E5RTError(exception, __p, &v28);
    }
    if ([v10 code] != 5)
    {
      if ([v11 code] == 16)
      {
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_192DA8900;
        strcpy(v31.__r_.__value_.__l.__data_, "ANE inference operation failed due to missing file");
        uint64_t v12 = [v11 description];

        if (v12)
        {
          std::string::basic_string[abi:ne180100]<0>(&v28, " with error message = ");
          id v16 = [v11 description];
          size_t v17 = std::string::append(&v28, (const std::string::value_type *)[v16 UTF8String]);
          long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          int64_t v30 = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          if (v30 >= 0) {
            int v19 = __p;
          }
          else {
            int v19 = (void **)__p[0];
          }
          if (v30 >= 0) {
            std::string::size_type v20 = HIBYTE(v30);
          }
          else {
            std::string::size_type v20 = (std::string::size_type)__p[1];
          }
          std::string::append(&v31, (const std::string::value_type *)v19, v20);
          if (SHIBYTE(v30) < 0) {
            operator delete(__p[0]);
          }

          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v28.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v13 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "EvaluateANERequest");
        E5RT::Status::Status(&v28, 13, &v31);
        E5RT::E5RTError::E5RTError(v13, __p, &v28);
      }
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_192DAB880;
      strcpy(v31.__r_.__value_.__l.__data_, "ANE inference operation failed");
      v14 = [v11 description];

      if (v14)
      {
        std::string::basic_string[abi:ne180100]<0>(&v28, " with error message = ");
        id v21 = [v11 description];
        id v22 = std::string::append(&v28, (const std::string::value_type *)[v21 UTF8String]);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        int64_t v30 = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if (v30 >= 0) {
          v24 = __p;
        }
        else {
          v24 = (void **)__p[0];
        }
        if (v30 >= 0) {
          std::string::size_type v25 = HIBYTE(v30);
        }
        else {
          std::string::size_type v25 = (std::string::size_type)__p[1];
        }
        std::string::append(&v31, (const std::string::value_type *)v24, v25);
        if (SHIBYTE(v30) < 0) {
          operator delete(__p[0]);
        }

        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
      }
      unsigned int v15 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "EvaluateANERequest");
      E5RT::Status::Status(&v28, 11, &v31);
      E5RT::E5RTError::E5RTError(v15, __p, &v28);
    }
    std::string::basic_string[abi:ne180100]<0>(&v31, "e5rt");
    uint64_t v26 = E5RT::GetE5RTLog((uint64_t)&v31);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      sub_1922FDE84();
    }
  }
}

void sub_1922F911C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1922F92B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1922F92D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1922F92E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ExecuteSync(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                        + 1)) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v4, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v7, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, &v4, v8);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  if (!*((unsigned char *)this + 156)) {
    [MEMORY[0x1E4F4E080] aneDefaultTaskQoS];
  }
  uint64_t v4 = 0x2B23800C00000000;
  long long v5 = 0u;
  long long v6 = 0u;
  kdebug_trace();
  [*((id *)this + 24) setSharedEvents:0];
  [*((id *)this + 24) setCompletionHandler:0];
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::EvaluateANERequest((uint64_t)this, *((void **)this + 24));
  return kdebug_trace();
}

void sub_1922F9460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1922F9474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)(v25 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if (v24)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8)) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v26, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v19, 2, v26);
    E5RT::E5RTError::E5RTError(exception, &v23, v19);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  if (!*(unsigned char *)(a1 + 156)) {
    [MEMORY[0x1E4F4E080] aneDefaultTaskQoS];
  }
  uint64_t v23 = 0x2B23801800000000;
  long long v24 = 0u;
  long long v25 = 0u;
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*(void *)(a1 + 8), &v21);
  if (!v21)
  {
    size_t v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v19, "Completion AsyncEvent (internal or client bound) is required for async submit.");
    E5RT::Status::Status(v20, 11, v19);
    E5RT::E5RTError::E5RTError(v17, v26, v20);
  }
  uint64_t v7 = [*(id *)(a1 + 192) sharedEvents];
  BOOL v8 = v7 == 0;

  if (v8)
  {
    if (!*(void *)(a1 + 200))
    {
      long long v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v26, "SubmitAsync");
      std::string::basic_string[abi:ne180100]<0>(v19, "Cannot asynchronously execute ANE op without shared events info.");
      E5RT::Status::Status(v20, 11, v19);
      E5RT::E5RTError::E5RTError(v18, v26, v20);
    }
    objc_msgSend(*(id *)(a1 + 192), "setSharedEvents:");
  }
  for (unsigned int i = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8))
                         + 16); i; unsigned int i = (uint64_t **)*i)
  {
    uint64_t ActiveFutureValue = E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)i[2]);
    v26[0] = (uint64_t)i[2];
    char v11 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((void *)(a1 + 280), v26);
    if (!v11) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    [(id)v11[3] setValue:ActiveFutureValue];
  }
  uint64_t v12 = E5RT::AsyncEvent::GetActiveFutureValue(v21);
  uint64_t v13 = [*(id *)(a1 + 328) objectAtIndexedSubscript:0];
  [v13 setValue:v12];

  std::mutex::lock((std::mutex *)(a1 + 208));
  *(void *)(a1 + 272) = a3;
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3321888768;
  v27[2] = sub_1922F9BF8;
  v27[3] = &__block_descriptor_96_ea8_40c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE_e20_v20__0B8__NSError_12l;
  v27[4] = a1;
  LOBYTE(v28[0]) = 0;
  char v30 = 0;
  if (*(unsigned char *)(a4 + 32))
  {
    uint64_t v14 = *(void *)(a4 + 24);
    if (v14)
    {
      if (v14 == a4)
      {
        uint64_t v29 = v28;
        (*(void (**)(uint64_t, void *))(*(void *)a4 + 24))(a4, v28);
        goto LABEL_15;
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
    }
    uint64_t v29 = (void *)v14;
LABEL_15:
    char v30 = 1;
  }
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  [*(id *)(a1 + 192) setCompletionHandler:v27];
  if (v30)
  {
    if (v29 == v28)
    {
      (*(void (**)(void *))(v28[0] + 32))(v28);
    }
    else if (v29)
    {
      (*(void (**)(void))(*v29 + 40))();
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 208));
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::EvaluateANERequest(a1, *(void **)(a1 + 192));
  unsigned int v15 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (E5RT::g_trace_analysis_level >= v23) {
    kdebug_trace();
  }
}

void sub_1922F99F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v46 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v46)
  {
LABEL_8:
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a22);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v45);
  goto LABEL_8;
}

void sub_1922F9BF8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  long long v6 = v5;
  if (!*(unsigned char *)(a1 + 72)) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (!a2)
  {
    if ([v5 code] != 5)
    {
      v17[0] = 0;
      v17[1] = 0;
      uint64_t v18 = 0;
      if ([v6 code] == 3)
      {
        MEMORY[0x192FF0F50](v17, "ANE op async execution has timed out.");
        uint64_t v12 = 10;
      }
      else if ([v6 code] == 16)
      {
        MEMORY[0x192FF0F50](v17, "ANE op async execution failed due to missing file.");
        uint64_t v12 = 13;
      }
      else
      {
        MEMORY[0x192FF0F50](v17, "ANE op async execution failed with unexpected error.");
        uint64_t v12 = 11;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "SubmitAsync_block_invoke");
      E5RT::Status::Status(v15, v12, v17);
      std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string,E5RT::Status>();
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "e5rt");
    uint64_t v13 = E5RT::GetE5RTLog((uint64_t)v17);
    uint64_t v14 = v13;
    if (SHIBYTE(v18) < 0)
    {
      operator delete(v17[0]);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
LABEL_21:

        if (*(unsigned char *)(a1 + 72))
        {
LABEL_22:
          std::function<void ()(E5RT::ExecutionStreamOperationInternal const*,std::unique_ptr<E5RT::E5RTError>)>::operator()(a1 + 40, *(void *)(v7 + 8));
          __p[4] = 0;
LABEL_23:
          sub_1922FA04C((void *)(a1 + 80));
          goto LABEL_10;
        }
LABEL_26:
        std::__throw_bad_optional_access[abi:ne180100]();
      }
    }
    else if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_21;
    }
    sub_1922FDF84();

    if (*(unsigned char *)(a1 + 72)) {
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  BOOL v8 = *(void **)(v7 + 8);
  uint64_t v19 = 0;
  v17[0] = v8;
  uint64_t v9 = *(void *)(a1 + 64);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v9 + 48))(v9, v17, &v19);
  uint64_t v10 = v19;
  uint64_t v19 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 88);
  if (*(void *)(v11 + 272) == *(void *)(a1 + 80))
  {
    std::mutex::lock((std::mutex *)(v11 + 208));
    if (*(void *)(v11 + 272) == *(void *)(a1 + 80)) {
      [*(id *)(v11 + 192) setCompletionHandler:0];
    }
    std::mutex::unlock((std::mutex *)(v11 + 208));
  }
LABEL_10:
}

void sub_1922F9F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19)
  {
    sub_1922FDF50();

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_1922FA04C(void *a1)
{
  uint64_t v1 = a1[1];
  if (*(void *)(v1 + 272) == *a1)
  {
    std::mutex::lock((std::mutex *)(v1 + 208));
    if (*(void *)(v1 + 272) == *a1) {
      [*(id *)(v1 + 192) setCompletionHandler:0];
    }
    std::mutex::unlock((std::mutex *)(v1 + 208));
  }
}

void sub_1922FA0D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(E5RT::ExecutionStreamOperationInternal const*,std::unique_ptr<E5RT::E5RTError>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string,E5RT::Status>()
{
}

void sub_1922FA194(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xF1C40B1F135EALL);
  _Unwind_Resume(a1);
}

unsigned char *__copy_helper_block_ea8_40c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE(unsigned char *result, uint64_t a2)
{
  result[40] = 0;
  id v3 = result + 40;
  result[72] = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v4 = result;
    uint64_t result = *(unsigned char **)(a2 + 64);
    if (result)
    {
      if (result == (unsigned char *)(a2 + 40))
      {
        *((void *)v4 + 8) = v3;
        uint64_t result = (unsigned char *)(*(uint64_t (**)(void))(**(void **)(a2 + 64) + 24))(*(void *)(a2 + 64));
        goto LABEL_7;
      }
      uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 16))(result);
    }
    *((void *)v4 + 8) = result;
LABEL_7:
    v4[72] = 1;
  }
  return result;
}

void sub_1922FA264(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 72)) {
    sub_1922FDFB8(v1, v1 + 40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __destroy_helper_block_ea8_40c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result + 40;
    uint64_t result = *(void *)(result + 64);
    if (result == v1)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
    }
    else if (result)
    {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
  }
  return result;
}

uint64_t std::optional<std::function<void ()(E5RT::ExecutionStreamOperationInternal const*,std::unique_ptr<E5RT::E5RTError>)>>::~optional(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return a1;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != a1)
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return a1;
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::PreWireMemoryObjects(E5RT::ExecutionStreamOperationInternal **this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(this[1]) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PreWireMemoryObjects");
    std::string::basic_string[abi:ne180100]<0>(&v15, "Operation hasn't been encoded yet.");
    E5RT::Status::Status(v16, 2, &v15);
    E5RT::E5RTError::E5RTError(exception, __p, v16);
  }
  if ((E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(this[1]) & 1) == 0)
  {
    uint64_t v2 = this[20];
    id v3 = this[21];
    uint64_t v4 = this[24];
    id v14 = 0;
    char v5 = [(E5RT::ExecutionStreamOperationInternal *)v2 mapIOSurfacesWithModel:v3 request:v4 cacheInference:1 error:&v14];
    long long v6 = (E5RT *)v14;
    uint64_t v7 = v6;
    if ((v5 & 1) == 0)
    {
      if (!E5RT::IsAVirtualMachine(v6))
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, "Prewiring ANE buffers failed with error = ");
        id v10 = [(E5RT *)v7 description];
        uint64_t v11 = std::string::append(&v15, (const std::string::value_type *)[v10 UTF8String]);
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        std::string::size_type v18 = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;

        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
        uint64_t v13 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v15, "PreWireMemoryObjects");
        E5RT::Status::Status(v16, 11, __p);
        E5RT::E5RTError::E5RTError(v13, &v15, v16);
      }
      HIBYTE(v18) = 4;
      strcpy((char *)__p, "e5rt");
      BOOL v8 = E5RT::GetE5RTLog((uint64_t)__p);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1922FE018();
      }
    }
  }
}

void sub_1922FA5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0) {
        operator delete(a18);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void sub_1922FA650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if (v24)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ResetOperation(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  if (E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                                      + 1)))
    [*((id *)this + 20) unmapIOSurfacesWithModel:*((void *)this + 21) request:*((void *)this + 24)];
  [*((id *)this + 42) removeAllObjects];
  [*((id *)this + 44) removeAllObjects];
  uint64_t v2 = [NSNumber numberWithBool:0];
  [*((id *)this + 46) setObject:v2 forKeyedSubscript:*MEMORY[0x1E4F4E0D0]];

  id v3 = (void *)*((void *)this + 24);
  *((void *)this + 24) = 0;

  *((void *)this + 34) = 0;
}

void sub_1922FA760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::SetQualityOfService(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 152) = a2;
  *(unsigned char *)(result + 156) = BYTE4(a2);
  return result;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::GetQualityOfService(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  return *((void *)this + 19);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ReshapeOperationInternal(uint64_t a1, uint64_t a2)
{
  v65[3] = *MEMORY[0x1E4F143B8];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8)) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v60, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(&v61, 2, v60);
    E5RT::E5RTError::E5RTError(exception, &__p, &v61);
  }
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ConvertInputShapeToPlistDict(a1, a2);
  uint64_t v4 = (E5RT::E5Compiler *)objc_claimAutoreleasedReturnValue();
  Compiler = (const void *)E5RT::E5Compiler::GetCompiler(v4);
  if (!v6) {
    __cxa_bad_cast();
  }
  E5RT::E5CompilerPriv::getBundleRootPath(v6, &__p);
  memset(&v61, 0, sizeof(v61));
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v61, p_p, (std::string *)((char *)p_p + size));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    std::string v59 = v61;
    goto LABEL_13;
  }
  std::string::__init_copy_ctor_external(&v59, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
LABEL_13:
  Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory(v60, &v59);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  uint64_t DirectoryPath = Espresso::SharedUtils::TemporaryDirectory::GetDirectoryPath((Espresso::SharedUtils::TemporaryDirectory *)v60);
  *((unsigned char *)&__src.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__src, "jit_shapes.plist");
  memset(&v56, 0, sizeof(v56));
  std::string::append[abi:ne180100]<char const*,0>(&v56, &__src, (std::string *)&__src.__r_.__value_.__r.__words[2]);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v56, DirectoryPath, (std::__fs::filesystem::path *)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v57 = __p;
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  std::string::__init_copy_ctor_external(&v57, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_17:
    operator delete(v56.__r_.__value_.__l.__data_);
    goto LABEL_20;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
LABEL_20:
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v10 = &v57;
  }
  else {
    id v10 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  uint64_t v11 = [NSString stringWithUTF8String:v10];
  char v12 = [(E5RT::E5Compiler *)v4 writeToFile:v11 atomically:1];

  if ((v12 & 1) == 0)
  {
    v42 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v56, "Failed to write plist to disk during ANE reshape.");
    E5RT::Status::Status(&v52, 11, &v56);
    E5RT::E5RTError::E5RTError(v42, &__p, &v52);
  }
  uint64_t v13 = (void *)MEMORY[0x1E4F4E060];
  id v14 = (void *)MEMORY[0x1E4F1CB10];
  std::string v15 = NSString;
  if (*(char *)(DirectoryPath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)DirectoryPath, *(void *)(DirectoryPath + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)DirectoryPath;
    __p.__r_.__value_.__r.__words[2] = *(void *)(DirectoryPath + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v17 = &__p;
  }
  else {
    size_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v18 = [v15 stringWithUTF8String:v17];
  uint64_t v19 = [v14 fileURLWithPath:v18];
  std::string::size_type v20 = [v13 modelAtURL:v19 key:&stru_1EE39BDB0];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  id v21 = [*(id *)(a1 + 168) getCacheURLIdentifier];
  if (!v21)
  {
    v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v43, "ANE reshape error: ANEF returned cacheURLIdentifier as nil.");
    __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v22 = (id)*MEMORY[0x1E4F4E0B0];
  uint64_t v23 = *MEMORY[0x1E4F4E188];
  v65[0] = *MEMORY[0x1E4F4E0F8];
  uint64_t v24 = *MEMORY[0x1E4F4E190];
  v64[0] = v23;
  v64[1] = v24;
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_src = &__src;
  }
  else {
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  }
  uint64_t v26 = [NSString stringWithUTF8String:p_src];
  v64[2] = v22;
  v65[1] = v26;
  v65[2] = v21;
  uint64_t v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v65 forKeys:v64 count:3];

  std::string v28 = *(void **)(a1 + 160);
  uint64_t v29 = [MEMORY[0x1E4F4E080] aneUserInteractiveTaskQoS];
  id v55 = 0;
  char v30 = [v28 compileModel:v20 options:v27 qos:v29 error:&v55];
  id v31 = v55;
  uint64_t v32 = v31;
  if ((v30 & 1) == 0)
  {
    if (v31)
    {
      v44 = [v31 localizedDescription];
    }
    else
    {
      v44 = &stru_1EE39BDB0;
    }
    int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v56, (char *)[(__CFString *)v44 UTF8String]);
    v47 = std::string::insert(&v56, 0, "Failed to reshape ANE model using ANEF compileModel. Error=");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v46, &__p);
    __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::GetOutputDescMap(a1, v20, (uint64_t)&__p);
  uint64_t v33 = *(void **)(a1 + 160);
  id v62 = v22;
  int v63 = v21;
  long long v34 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v63 forKeys:&v62 count:1];
  id v53 = v32;
  char v35 = objc_msgSend(v33, "loadModel:options:qos:error:", v20, v34, objc_msgSend(MEMORY[0x1E4F4E080], "aneUserInteractiveTaskQoS"), &v53);
  id v36 = v53;

  if ((v35 & 1) == 0)
  {
    if (v36)
    {
      v45 = [v36 localizedDescription];
    }
    else
    {
      v45 = &stru_1EE39BDB0;
    }
    v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v52, (char *)[(__CFString *)v45 UTF8String]);
    v50 = std::string::insert(&v52, 0, "Failed to load ANE model after reshape. Error=");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v49, &v56);
    __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::UpdateOutputDesc(a1, (uint64_t)&__p);
  objc_storeStrong((id *)(a1 + 176), v20);
  v37 = (void **)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    do
    {
      while (1)
      {
        uint64_t v38 = (void **)*v37;
        int v39 = (std::__shared_weak_count *)v37[6];
        if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
        if (*((char *)v37 + 39) < 0) {
          break;
        }
        operator delete(v37);
        v37 = v38;
        if (!v38) {
          goto LABEL_46;
        }
      }
      operator delete(v37[2]);
      operator delete(v37);
      v37 = v38;
    }
    while (v38);
  }
LABEL_46:
  v40 = (void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v40) {
    operator delete(v40);
  }

  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
LABEL_53:
    operator delete(__src.__r_.__value_.__l.__data_);
    Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)v60);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_51;
    }
LABEL_54:
    operator delete(v61.__r_.__value_.__l.__data_);
    goto LABEL_51;
  }
  operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_53;
  }
LABEL_50:
  Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)v60);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_54;
  }
LABEL_51:
}

void sub_1922FAFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v65 & 1) == 0)
    {
LABEL_8:

      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a16);
      if (a37 < 0) {
        operator delete(a32);
      }
      if (a44 < 0) {
        operator delete(a39);
      }
      Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)&a52);
      if (*(char *)(v66 - 161) < 0) {
        operator delete(*(void **)(v66 - 184));
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v65)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v64);
  goto LABEL_8;
}

id E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::ConvertInputShapeToPlistDict(uint64_t a1, uint64_t a2)
{
  InputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  if (*(void *)(a2 + 24) != InputPorts[3])
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v48, "ConvertInputShapeToPlistDict");
    std::string::basic_string[abi:ne180100]<0>(v46, "Require new shapes for all inputs to reshape.");
    E5RT::Status::Status(v47, 2, v46);
    E5RT::E5RTError::E5RTError(exception, &v48, v47);
  }
  id v3 = objc_opt_new();
  v45 = objc_opt_new();
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  for (i = v3; v4; uint64_t v4 = (uint64_t *)*v4)
  {
    char v5 = v4 + 2;
    long long v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v4 + 2));
    uint64_t v7 = v6;
    if (!v6)
    {
      char v35 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v48, "ConvertInputShapeToPlistDict");
      std::string::basic_string[abi:ne180100]<0>(v46, "Unknown operand name given for reshaping.");
      E5RT::Status::Status(v47, 2, v46);
      E5RT::E5RTError::E5RTError(v35, &v48, v47);
    }
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v6[5]);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      id v36 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v48, "ConvertInputShapeToPlistDict");
      std::string::basic_string[abi:ne180100]<0>(v46, "ANE op cannot reshape a surface descriptor.");
      E5RT::Status::Status(v47, 2, v46);
      E5RT::E5RTError::E5RTError(v36, &v48, v47);
    }
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor((void *)v4[5]))
    {
      v37 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v48, "ConvertInputShapeToPlistDict");
      std::string::basic_string[abi:ne180100]<0>(v46, "Unsupported surface descriptor given for reshaping.");
      E5RT::Status::Status(v47, 2, v46);
      E5RT::E5RTError::E5RTError(v37, &v48, v47);
    }
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v7[5], &v48);
    uint64_t v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v48);
    id v10 = v49;
    if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v4[5]);
    unint64_t Rank = E5RT::TensorDescriptor::GetRank(v9);
    if (Rank != E5RT::TensorDescriptor::GetRank(v11))
    {
      std::operator+<char>();
      uint64_t v38 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v46, "ConvertInputShapeToPlistDict");
      E5RT::Status::Status(v47, 2, &v48);
      E5RT::E5RTError::E5RTError(v38, v46, v47);
    }
    TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v9);
    uint64_t v14 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v11);
    if (E5RT::operator!=((uint64_t)TensorDataTypeRef, v14))
    {
      std::operator+<char>();
      int v39 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v46, "ConvertInputShapeToPlistDict");
      E5RT::Status::Status(v47, 2, &v48);
      E5RT::E5RTError::E5RTError(v39, v46, v47);
    }
    if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) >= 2)
    {
      std::operator+<char>();
      v42 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v46, "ConvertInputShapeToPlistDict");
      E5RT::Status::Status(v47, 2, &v48);
      E5RT::E5RTError::E5RTError(v42, v46, v47);
    }
    if ((E5RT::TensorDescriptor::HasKnownShape(v11) & 1) == 0)
    {
      std::operator+<char>();
      v40 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v46, "ConvertInputShapeToPlistDict");
      E5RT::Status::Status(v47, 2, &v48);
      E5RT::E5RTError::E5RTError(v40, v46, v47);
    }
    TensorShape = (void *)E5RT::TensorDescriptor::GetTensorShape(v11);
    TensorStrides = (uint64_t **)E5RT::TensorDescriptor::GetTensorStrides(v11);
    size_t v17 = objc_opt_new();
    std::string::size_type v18 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:(uint64_t)(TensorShape[1] - *TensorShape) >> 3];
    uint64_t v19 = (void *)*TensorShape;
    std::string::size_type v20 = (void *)TensorShape[1];
    if ((void *)*TensorShape != v20)
    {
      do
      {
        id v21 = objc_msgSend(NSNumber, "numberWithUnsignedLong:", *v19, i);
        [v18 addObject:v21];

        ++v19;
      }
      while (v19 != v20);
    }
    id v22 = objc_msgSend(NSString, "stringWithUTF8String:", "Shape", i);
    [v17 setObject:v18 forKeyedSubscript:v22];

    uint64_t v23 = TensorStrides[1];
    if (*TensorStrides != v23)
    {
      uint64_t v24 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v23 - *TensorStrides];
      uint64_t v26 = *TensorStrides;
      int v25 = TensorStrides[1];
      if (*TensorStrides != v25)
      {
        do
        {
          uint64_t v27 = *v26;
          std::string v28 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v11);
          uint64_t v29 = [NSNumber numberWithUnsignedLong:v27 / E5RT::TensorDataType::GetElementSize(v28)];
          [v24 addObject:v29];

          ++v26;
        }
        while (v26 != v25);
      }
      char v30 = [NSString stringWithUTF8String:"Strides"];
      [v17 setObject:v24 forKeyedSubscript:v30];
    }
    if (*((char *)v4 + 39) < 0) {
      char v5 = (void *)*v5;
    }
    id v3 = i;
    id v31 = [NSString stringWithUTF8String:v5];
    [v45 setObject:v17 forKeyedSubscript:v31];
  }
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v45, @"NetworkJITShapes", i);
  uint64_t v32 = [NSString stringWithUTF8String:"1.0"];
  uint64_t v33 = [NSString stringWithUTF8String:"Version"];
  [v3 setObject:v32 forKeyedSubscript:v33];

  return v3;
}

void sub_1922FBA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::GetOutputDescMap(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  id v71 = v4;
  char v5 = [v4 modelAttributes];
  long long v6 = [v5 objectForKeyedSubscript:@"NetworkStatusList"];

  uint64_t v7 = [v6 objectAtIndexedSubscript:0];
  [v7 objectForKeyedSubscript:@"LiveOutputList"];
  memset(v82, 0, sizeof(v82));
  id obj = (id)objc_claimAutoreleasedReturnValue();
  if ([obj countByEnumeratingWithState:v82 objects:v97 count:16])
  {
    id v76 = **((id **)&v82[0] + 1);
    [v76 objectForKeyedSubscript:@"Name"];
    [(id)objc_claimAutoreleasedReturnValue() componentsSeparatedByString:@"@"];
    BOOL v8 = [(id)objc_claimAutoreleasedReturnValue() objectAtIndexedSubscript:0];
    uint64_t v9 = *(void *)(a1 + 8);
    id v10 = (const char *)[v8 UTF8String];
    size_t v11 = strlen(v10);
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = v11;
    if (v11 >= 0x17)
    {
      uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v14 = v11 | 7;
      }
      uint64_t v15 = v14 + 1;
      p_dst = (void **)operator new(v14 + 1);
      v100 = (std::__shared_weak_count *)v12;
      unint64_t v101 = v15 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v101) = v11;
      p_dst = (void **)&__dst;
      if (!v11) {
        goto LABEL_10;
      }
    }
    memmove(p_dst, v10, v12);
LABEL_10:
    *((unsigned char *)p_dst + v12) = 0;
    OutputPortRef = (const void *)E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(v9, (uint64_t)&__dst);
    if (SHIBYTE(v101) < 0) {
      operator delete(__dst);
    }
    E5RT::IOPort::GetPortDescriptor(v17, &__dst);
    std::string::size_type v18 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__dst);
    uint64_t v19 = v100;
    if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    id v20 = v76;
    v77 = [v20 objectForKeyedSubscript:@"RankAgnosticShape"];
    v75 = [v20 objectForKeyedSubscript:@"RankAgnosticStrides"];
    v94 = 0;
    v95 = 0;
    v96 = 0;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    id v81 = v77;
    uint64_t v21 = [v81 countByEnumeratingWithState:&v90 objects:&__dst count:16];
    v79 = v18;
    if (!v21) {
      goto LABEL_43;
    }
    uint64_t v22 = *(void *)v91;
    while (1)
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v91 != v22) {
          objc_enumerationMutation(v81);
        }
        int v25 = [*(id *)(*((void *)&v90 + 1) + 8 * i) intValue];
        uint64_t v26 = v25;
        uint64_t v27 = v95;
        if (v95 < v96)
        {
          *(void *)v95 = v25;
          uint64_t v24 = (uint64_t)(v27 + 8);
          goto LABEL_19;
        }
        std::string v28 = (char *)v94;
        int64_t v29 = v95 - (unsigned char *)v94;
        uint64_t v30 = (v95 - (unsigned char *)v94) >> 3;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = v96 - (unsigned char *)v94;
        if ((v96 - (unsigned char *)v94) >> 2 > v31) {
          unint64_t v31 = v32 >> 2;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          if (v33 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v34 = (char *)operator new(8 * v33);
          char v35 = &v34[8 * v30];
          *(void *)char v35 = v26;
          uint64_t v24 = (uint64_t)(v35 + 8);
          if (v27 == v28) {
            goto LABEL_40;
          }
LABEL_34:
          unint64_t v36 = v27 - 8 - v28;
          if (v36 < 0x58) {
            goto LABEL_83;
          }
          if ((unint64_t)(v27 - &v34[v29]) < 0x20) {
            goto LABEL_83;
          }
          uint64_t v37 = (v36 >> 3) + 1;
          uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          int v39 = &v27[-v38];
          v35 -= v38;
          v40 = &v34[8 * v30 - 16];
          v41 = v27 - 16;
          uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v43 = *(_OWORD *)v41;
            *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
            *(_OWORD *)v40 = v43;
            v40 -= 32;
            v41 -= 32;
            v42 -= 4;
          }
          while (v42);
          uint64_t v27 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_83:
            do
            {
              uint64_t v44 = *((void *)v27 - 1);
              v27 -= 8;
              *((void *)v35 - 1) = v44;
              v35 -= 8;
            }
            while (v27 != v28);
          }
          goto LABEL_40;
        }
        long long v34 = 0;
        char v35 = (char *)(8 * v30);
        *(void *)(8 * v30) = v26;
        uint64_t v24 = 8 * v30 + 8;
        if (v27 != v28) {
          goto LABEL_34;
        }
LABEL_40:
        v94 = v35;
        v95 = (char *)v24;
        v96 = &v34[8 * v33];
        if (v28) {
          operator delete(v28);
        }
LABEL_19:
        v95 = (char *)v24;
      }
      uint64_t v21 = [v81 countByEnumeratingWithState:&v90 objects:&__dst count:16];
      if (!v21)
      {
LABEL_43:

        std::string __p = 0;
        v88 = 0;
        v89 = 0;
        TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v79);
        uint64_t ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        id v80 = v75;
        uint64_t v47 = [v80 countByEnumeratingWithState:&v83 objects:v98 count:16];
        v74 = TensorDataTypeRef;
        if (!v47) {
          goto LABEL_72;
        }
        uint64_t v48 = *(void *)v84;
        while (2)
        {
          uint64_t v49 = 0;
          uint64_t v78 = v47;
          while (1)
          {
LABEL_47:
            if (*(void *)v84 != v48) {
              objc_enumerationMutation(v80);
            }
            uint64_t v50 = (int)([*(id *)(*((void *)&v83 + 1) + 8 * v49) intValue] * ElementSize);
            long long v51 = v88;
            if (v88 >= v89) {
              break;
            }
            *(void *)v88 = v50;
            v88 = v51 + 8;
            if (++v49 == v47) {
              goto LABEL_71;
            }
          }
          std::string v52 = (char *)__p;
          int64_t v53 = v88 - (unsigned char *)__p;
          uint64_t v54 = (v88 - (unsigned char *)__p) >> 3;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v56 = ElementSize;
          uint64_t v57 = v89 - (unsigned char *)__p;
          if ((v89 - (unsigned char *)__p) >> 2 > v55) {
            unint64_t v55 = v57 >> 2;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v55;
          }
          if (v58)
          {
            if (v58 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            std::string v59 = (char *)operator new(8 * v58);
            uint64_t v60 = &v59[8 * v54];
            *(void *)uint64_t v60 = v50;
            uint64_t v61 = (uint64_t)(v60 + 8);
            if (v51 != v52)
            {
LABEL_59:
              unint64_t v62 = v51 - 8 - v52;
              if (v62 < 0x58) {
                goto LABEL_84;
              }
              if ((unint64_t)(v51 - &v59[v53]) < 0x20) {
                goto LABEL_84;
              }
              uint64_t v63 = (v62 >> 3) + 1;
              uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
              int v65 = &v51[-v64];
              v60 -= v64;
              uint64_t v66 = &v59[8 * v54 - 16];
              v67 = v51 - 16;
              uint64_t v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v69 = *(_OWORD *)v67;
                *((_OWORD *)v66 - 1) = *((_OWORD *)v67 - 1);
                *(_OWORD *)uint64_t v66 = v69;
                v66 -= 32;
                v67 -= 32;
                v68 -= 4;
              }
              while (v68);
              long long v51 = v65;
              if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_84:
                do
                {
                  uint64_t v70 = *((void *)v51 - 1);
                  v51 -= 8;
                  *((void *)v60 - 1) = v70;
                  v60 -= 8;
                }
                while (v51 != v52);
              }
            }
          }
          else
          {
            std::string v59 = 0;
            uint64_t v60 = (char *)(8 * v54);
            *(void *)(8 * v54) = v50;
            uint64_t v61 = 8 * v54 + 8;
            if (v51 != v52) {
              goto LABEL_59;
            }
          }
          std::string __p = v60;
          v88 = (char *)v61;
          v89 = &v59[8 * v58];
          if (v52) {
            operator delete(v52);
          }
          uint64_t ElementSize = v56;
          uint64_t v47 = v78;
          v88 = (char *)v61;
          if (++v49 == v78)
          {
LABEL_71:
            uint64_t v47 = [v80 countByEnumeratingWithState:&v83 objects:v98 count:16];
            if (!v47)
            {
LABEL_72:

              if (__p != v88) {
                E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(&v94, &__p, v74);
              }
              E5RT::TensorDescriptor::CreateTensorDesc((int)&v94, v74);
            }
            continue;
          }
          goto LABEL_47;
        }
      }
    }
  }
}

void sub_1922FC69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::UpdateOutputDesc(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    OutputPortRef = (const void *)E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(*(void *)(a1 + 8), (uint64_t)(i + 2));
    long long v6 = (std::__shared_weak_count *)i[6];
    uint64_t v8 = i[5];
    uint64_t v9 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v5, &v8);
    uint64_t v7 = v9;
    if (v9)
    {
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1922FC990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 40);
  if (v2)
  {
    do
    {
      id v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_11:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_11;
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  id v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v5 = *(void **)a1;
    operator delete(v5);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  long long v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          long long v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (char *)operator new(0x50uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  uint64_t v27 = (std::string *)(v26 + 16);
  std::string v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *((_DWORD *)v26 + 18) = 1065353216;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  *uint64_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1922FCEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1922FCF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (char *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
    {
      while (a2 != a3)
      {
        std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 2));
        std::string::operator=((std::string *)(v8 + 40), (const std::string *)(a2 + 5));
        unint64_t v9 = *(char **)v8;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, (uint64_t)v8);
        a2 = (uint64_t *)*a2;
        unint64_t v8 = v9;
        if (!v9) {
          goto LABEL_7;
        }
      }
      while (1)
      {
        unint64_t v10 = *(char **)v8;
        if (v8[63] < 0)
        {
          operator delete(*((void **)v8 + 5));
          if (v8[39] < 0) {
LABEL_14:
          }
            operator delete(*((void **)v8 + 2));
        }
        else if (v8[39] < 0)
        {
          goto LABEL_14;
        }
        operator delete(v8);
        unint64_t v8 = v10;
        if (!v10) {
          return;
        }
      }
    }
  }
LABEL_7:
  while (a2 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, (uint64_t)(a2 + 2), (uint64_t)v11);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v11[0]);
    a2 = (uint64_t *)*a2;
  }
}

void sub_1922FD088(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1922FD0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p)
{
  unint64_t v11 = __p;
  std::string __p = 0;
  if (v11)
  {
    sub_1922FE04C((uint64_t)&__p, v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!inserted)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *inserted;
  uint64_t *inserted = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (char *)operator new(0x40uLL);
  uint64_t v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v8 = (uint64_t *)(v6 + 16);
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
    *((void *)v6 + 4) = *(void *)(a2 + 16);
  }
  unint64_t v9 = (std::string *)(v7 + 40);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    *((void *)v7 + 7) = *(void *)(a2 + 40);
  }
  *(unsigned char *)(a3 + 16) = 1;
  int v10 = v7[39];
  if (v10 >= 0) {
    int8x8_t v11 = v8;
  }
  else {
    int8x8_t v11 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v10 >= 0) {
    unint64_t v12 = v7[39];
  }
  else {
    unint64_t v12 = *((void *)v7 + 3);
  }
  unint64_t result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v14, v11, v12);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1922FD308(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0)
  {
    operator delete(*v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint8x8_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            char v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          char v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  char v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[3] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      void *v14 = *v21;
LABEL_61:
      void *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * v10);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *v17;
  void *v17 = v14;
  *(void *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v30 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1922FD704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(id **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {

    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_impl<char const*,std::shared_ptr<E5RT::TensorDescriptor const> &>(void *a1, const char **a2, void *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__construct_node<char const*,std::shared_ptr<E5RT::TensorDescriptor const> &>((uint64_t)a1, a2, a3, (uint64_t *)&__p);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v5 & 1) == 0)
  {
    unint64_t v6 = (char *)__p;
    std::string __p = 0;
    if (v6)
    {
      if (v10)
      {
        uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        if (v6[39] < 0) {
          operator delete(*((void **)v6 + 2));
        }
      }
      operator delete(v6);
    }
  }
  return inserted;
}

void sub_1922FD82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__construct_node<char const*,std::shared_ptr<E5RT::TensorDescriptor const> &>@<X0>(uint64_t a1@<X0>, const char **a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *a4 = (uint64_t)v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  unint64_t v9 = v8 + 16;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  char v10 = *a2;
  size_t v11 = strlen(*a2);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v19 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v19 = v11 | 7;
    }
    uint64_t v20 = v19 + 1;
    unint64_t v9 = operator new(v19 + 1);
    *((void *)v8 + 3) = v12;
    *((void *)v8 + 4) = v20 | 0x8000000000000000;
    *((void *)v8 + 2) = v9;
  }
  else
  {
    v8[39] = v11;
    if (!v11)
    {
      unsigned char *v9 = 0;
      uint64_t v13 = a3[1];
      *((void *)v8 + 5) = *a3;
      *((void *)v8 + 6) = v13;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  memmove(v9, v10, v12);
  v9[v12] = 0;
  uint64_t v13 = a3[1];
  *((void *)v8 + 5) = *a3;
  *((void *)v8 + 6) = v13;
  if (v13) {
LABEL_5:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
LABEL_6:
  *((unsigned char *)a4 + 16) = 1;
  uint64_t v14 = *a4;
  int v15 = *(char *)(v14 + 39);
  if (v15 >= 0) {
    uint64_t v16 = (uint64_t *)(v14 + 16);
  }
  else {
    uint64_t v16 = *(uint64_t **)(v14 + 16);
  }
  if (v15 >= 0) {
    unint64_t v17 = *(unsigned __int8 *)(v14 + 39);
  }
  else {
    unint64_t v17 = *(void *)(v14 + 24);
  }
  unint64_t result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v21, v16, v17);
  *(void *)(v14 + 8) = result;
  return result;
}

void sub_1922FD98C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  unint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    int8x8_t v11 = (int8x8_t)a1[1];
    unint64_t v12 = *(void *)(a2 + 8);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v11) {
        v12 %= *(void *)&v11;
      }
    }
    else
    {
      v12 &= *(void *)&v11 - 1;
    }
    uint64_t v14 = *(void **)(*a1 + 8 * v12);
    if (v14)
    {
      *(void *)a2 = *v14;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v15 = *(void *)(*(void *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v11) {
          v15 %= *(void *)&v11;
        }
      }
      else
      {
        v15 &= *(void *)&v11 - 1;
      }
      uint64_t v14 = (void *)(*a1 + 8 * v15);
    }
    void *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_50;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2) {
      unint64_t v7 = a2 % v4;
    }
    else {
      unint64_t v7 = a2;
    }
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  else
  {
    unint64_t v7 = (v4 - 1) & a2;
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  unint64_t v9 = *v8;
  if (*v8)
  {
    char v10 = *((unsigned char *)a3 + 23);
    if (v10 >= 0) {
      int8x8_t v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      int8x8_t v11 = a3[1];
    }
    if (v10 >= 0) {
      unint64_t v12 = (unsigned __int8 *)a3;
    }
    else {
      unint64_t v12 = *a3;
    }
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v17 = v9[1];
        if (v17 == a2)
        {
          uint64_t v18 = *((unsigned __int8 *)v9 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          }
          else {
            uint64_t v19 = (unsigned __int8 *)v9[3];
          }
          if (v19 == v11)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v9[2], v12, v9[3])) {
                return v9;
              }
            }
            else
            {
              if (!*((unsigned char *)v9 + 39)) {
                return v9;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v9 + v20 + 16) == v12[v20])
              {
                if (v18 == ++v20) {
                  return v9;
                }
              }
            }
          }
        }
        else if ((v17 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        unint64_t v9 = (uint64_t *)*v9;
        if (!v9) {
          goto LABEL_50;
        }
      }
    }
    do
    {
      unint64_t v13 = v9[1];
      if (v13 == a2)
      {
        uint64_t v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0) {
          unint64_t v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        }
        else {
          unint64_t v15 = (unsigned __int8 *)v9[3];
        }
        if (v15 == v11)
        {
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp((const void *)v9[2], v12, v9[3])) {
              return v9;
            }
          }
          else
          {
            if (!*((unsigned char *)v9 + 39)) {
              return v9;
            }
            uint64_t v16 = 0;
            while (*((unsigned __int8 *)v9 + v16 + 16) == v12[v16])
            {
              if (v14 == ++v16) {
                return v9;
              }
            }
          }
        }
      }
      else
      {
        if (v13 >= v4) {
          v13 %= v4;
        }
        if (v13 != v7) {
          break;
        }
      }
      unint64_t v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v4 && (float)(v22 * (float)v4) >= v21) {
    return 0;
  }
  BOOL v23 = 1;
  if (v4 >= 3) {
    BOOL v23 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v24 = v23 | (2 * v4);
  unint64_t v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25) {
    size_t prime = v25;
  }
  else {
    size_t prime = v24;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  if (prime > v4) {
    goto LABEL_74;
  }
  if (prime < v4)
  {
    size_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      size_t v30 = std::__next_prime(v27);
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime >= v4) {
        return 0;
      }
    }
    else
    {
      uint64_t v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2) {
        size_t v27 = v29;
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime >= v4) {
        return 0;
      }
    }
LABEL_74:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

void sub_1922FDDD0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void Espresso::create_context(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    OUTLINED_FUNCTION_0();
    (*(void (**)(void))(v2 + 16))();
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_1922FDE50()
{
  sub_1922FDDEC();
  sub_1922FDDD0(&dword_1920CB000, v0, v1, "ANE JIT Model unload failed.", v2, v3, v4, v5, v6);
}

void sub_1922FDE84()
{
  sub_1922FDDEC();
  sub_1922FDDD0(&dword_1920CB000, v0, v1, "Detected ANE Inference overflow.", v2, v3, v4, v5, v6);
}

uint64_t sub_1922FDEB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result == a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  }
  else if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  *(void *)a5 = a3;
  *(_DWORD *)(a5 + 8) = a4;
  return result;
}

uint64_t sub_1922FDF50()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1922FDF84()
{
  sub_1922FDDEC();
  sub_1922FDDD0(&dword_1920CB000, v0, v1, "Detected ANE Inference overflow during async execution.", v2, v3, v4, v5, v6);
}

uint64_t sub_1922FDFB8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result == a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void sub_1922FE018()
{
  sub_1922FDDEC();
  sub_1922FDDD0(&dword_1920CB000, v0, v1, "Detected call to mapIOSurfacesWithModel on VM run. Ignore return result as this API is not supported on VM.", v2, v3, v4, v5, v6);
}

void sub_1922FE04C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  operator delete(__p);
}

uint64_t e5rt_io_port_retain_surface_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393868;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922FE184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_is_tensor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3938E8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922FE280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_retain_buffer_object(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3939E8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922FE37C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_retain_memory_object(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3939E8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922FE478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v13)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(a1);
  }
  sub_1923017A4(a13);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_retain_surface_object(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393A68;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922FE5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_bind_memory_object(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393AE8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922FE6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v13)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(a1);
  }
  sub_1923017A4(a13);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_is_dynamic(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393BE8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922FE7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_has_known_shape(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393C68;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922FE8F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_get_supported_buffer_types(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE393CE8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922FEA0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1922FEA24()
{
}

void *sub_1922FEA38(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE393768;
  result[1] = v3;
  return result;
}

uint64_t sub_1922FEA80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE393768;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922FEAAC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x20C40A4A59CD2);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      unint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    unint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_1922FEC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922FECD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z20e5rt_io_port_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z20e5rt_io_port_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z20e5rt_io_port_releaseE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z20e5rt_io_port_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_1922FED40()
{
  return &unk_1EE3937C8;
}

void sub_1922FED50()
{
}

__n128 sub_1922FED64(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3937E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922FEDB0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3937E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922FEDE0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*v1);
      uint64_t v4 = E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = v4 != 0;
    }
    else
    {
      unint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA88F0;
      strcpy((char *)v8, "Invalid Function Argument: is_surface is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    unint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_1922FEF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922FEFAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_io_port_is_surfaceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z23e5rt_io_port_is_surfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_io_port_is_surfaceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_io_port_is_surfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922FF01C()
{
  return &unk_1EE393848;
}

void sub_1922FF02C()
{
}

__n128 sub_1922FF040(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393868;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922FF08C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393868;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922FF0BC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*v1);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef)) {
        operator new();
      }
      exception = __cxa_allocate_exception(0x18uLL);
      lpsrc[23] = 10;
      strcpy(lpsrc, "operator()");
      *(void *)std::string __p = operator new(0x50uLL);
      *(_OWORD *)&__p[8] = xmmword_192DAB8D0;
      strcpy(*(char **)__p, "e5rt_io_port_retain_surface_desc failed since IOPort isn't a surface port.");
      E5RT::Status::Status(v5, 2, __p);
      E5RT::E5RTError::E5RTError(exception, lpsrc, v5);
    }
    *(void *)lpsrc = operator new(0x30uLL);
    *(_OWORD *)&lpsrc[8] = xmmword_192DA88E0;
    strcpy(*(char **)lpsrc, "Invalid Function Argument: desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)lpsrc, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((lpsrc[23] & 0x80000000) != 0) {
      operator delete(*(void **)lpsrc);
    }
    return 1;
  }
  else
  {
    *(void *)lpsrc = operator new(0x30uLL);
    *(_OWORD *)&lpsrc[8] = xmmword_192DA88D0;
    strcpy(*(char **)lpsrc, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)lpsrc, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((lpsrc[23] & 0x80000000) != 0) {
      operator delete(*(void **)lpsrc);
    }
    return 1;
  }
}

void sub_1922FF454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922FF518(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_io_port_retain_surface_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_io_port_retain_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_io_port_retain_surface_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_io_port_retain_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922FF588()
{
  return &unk_1EE3938C8;
}

void sub_1922FF598()
{
}

__n128 sub_1922FF5AC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3938E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922FF5F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3938E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922FF628(uint64_t a1)
{
  uint64_t v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*v1);
      uint64_t v4 = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = v4 != 0;
    }
    else
    {
      unint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA88C0;
      strcpy((char *)v8, "Invalid Function Argument: is_tensor is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    unint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_1922FF7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922FF7F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z22e5rt_io_port_is_tensorE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z22e5rt_io_port_is_tensorE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z22e5rt_io_port_is_tensorE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z22e5rt_io_port_is_tensorE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922FF864()
{
  return &unk_1EE393948;
}

void sub_1922FF874()
{
}

__n128 sub_1922FF888(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393968;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922FF8D4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393968;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922FF904(uint64_t a1)
{
  uint64_t v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*v1);
      if (E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef)) {
        operator new();
      }
      exception = __cxa_allocate_exception(0x18uLL);
      lpsrc[23] = 10;
      strcpy(lpsrc, "operator()");
      *(void *)std::string __p = operator new(0x50uLL);
      *(_OWORD *)&__p[8] = xmmword_192DAB8E0;
      strcpy(*(char **)__p, "e5rt_io_port_retain_tensor_desc failed since IOPort isn't a tensor port.");
      E5RT::Status::Status(v5, 2, __p);
      E5RT::E5RTError::E5RTError(exception, lpsrc, v5);
    }
    *(void *)lpsrc = operator new(0x30uLL);
    *(_OWORD *)&lpsrc[8] = xmmword_192DA88E0;
    strcpy(*(char **)lpsrc, "Invalid Function Argument: desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)lpsrc, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((lpsrc[23] & 0x80000000) != 0) {
      operator delete(*(void **)lpsrc);
    }
    return 1;
  }
  else
  {
    *(void *)lpsrc = operator new(0x30uLL);
    *(_OWORD *)&lpsrc[8] = xmmword_192DA88D0;
    strcpy(*(char **)lpsrc, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)lpsrc, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((lpsrc[23] & 0x80000000) != 0) {
      operator delete(*(void **)lpsrc);
    }
    return 1;
  }
}

void sub_1922FFC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922FFD60(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_io_port_retain_tensor_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z31e5rt_io_port_retain_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_io_port_retain_tensor_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_io_port_retain_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922FFDD0()
{
  return &unk_1EE3939C8;
}

void sub_1922FFDE0()
{
}

__n128 sub_1922FFDF4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3939E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922FFE40(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3939E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922FFE70(uint64_t a1)
{
  uint64_t v1 = *(E5RT::IOPort ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      E5RT::IOPort::GetMemoryObject(*v1, &lpsrc);
      if (lpsrc)
      {
        if (E5RT::MemoryObject::TryAsBuffer(lpsrc)) {
          operator new();
        }
        exception = __cxa_allocate_exception(0x18uLL);
        v10[23] = 10;
        strcpy(v10, "operator()");
        *(void *)std::string __p = operator new(0x60uLL);
        *(_OWORD *)&__p[8] = xmmword_192DAB8F0;
        strcpy(*(char **)__p, "e5rt_io_port_retain_buffer_object failed since bound memory object isn't a buffer object.");
        E5RT::Status::Status(v6, 2, __p);
        E5RT::E5RTError::E5RTError(exception, v10, v6);
      }
      **(void **)(a1 + 16) = 0;
      unint64_t v3 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      return 0;
    }
    else
    {
      *(void *)char v10 = operator new(0x38uLL);
      *(_OWORD *)&v10[8] = xmmword_192DAB900;
      strcpy(*(char **)v10, "Invalid Function Argument: buffer_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v10, (uint64_t *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v10[23] & 0x80000000) != 0) {
        operator delete(*(void **)v10);
      }
      return 1;
    }
  }
  else
  {
    *(void *)char v10 = operator new(0x30uLL);
    *(_OWORD *)&v10[8] = xmmword_192DA88D0;
    strcpy(*(char **)v10, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v10, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((v10[23] & 0x80000000) != 0) {
      operator delete(*(void **)v10);
    }
    return 1;
  }
}

void sub_1923001F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923002D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_io_port_retain_buffer_objectE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z33e5rt_io_port_retain_buffer_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_io_port_retain_buffer_objectE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_io_port_retain_buffer_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192300340()
{
  return &unk_1EE393A48;
}

void sub_192300350()
{
}

__n128 sub_192300364(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393A68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923003B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393A68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923003E0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::IOPort ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      E5RT::IOPort::GetMemoryObject(*v1, &lpsrc);
      if (lpsrc)
      {
        if (E5RT::MemoryObject::TryAsSurface(lpsrc)) {
          operator new();
        }
        exception = __cxa_allocate_exception(0x18uLL);
        v10[23] = 10;
        strcpy(v10, "operator()");
        *(void *)std::string __p = operator new(0x60uLL);
        *(_OWORD *)&__p[8] = xmmword_192DAB910;
        strcpy(*(char **)__p, "e5rt_io_port_retain_surface_object failed since bound memory object isn't a surface object.");
        E5RT::Status::Status(v6, 2, __p);
        E5RT::E5RTError::E5RTError(exception, v10, v6);
      }
      **(void **)(a1 + 16) = 0;
      unint64_t v3 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      return 0;
    }
    else
    {
      *(void *)char v10 = operator new(0x38uLL);
      *(_OWORD *)&v10[8] = xmmword_192DAB900;
      strcpy(*(char **)v10, "Invalid Function Argument: memory_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v10, (uint64_t *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v10[23] & 0x80000000) != 0) {
        operator delete(*(void **)v10);
      }
      return 1;
    }
  }
  else
  {
    *(void *)char v10 = operator new(0x30uLL);
    *(_OWORD *)&v10[8] = xmmword_192DA88D0;
    strcpy(*(char **)v10, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v10, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((v10[23] & 0x80000000) != 0) {
      operator delete(*(void **)v10);
    }
    return 1;
  }
}

void sub_192300760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192300840(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_io_port_retain_surface_objectE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_io_port_retain_surface_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_io_port_retain_surface_objectE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_io_port_retain_surface_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923008B0()
{
  return &unk_1EE393AC8;
}

void sub_1923008C0()
{
}

__n128 sub_1923008D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393AE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192300920(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393AE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192300950(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = *v1;
    if (v2)
    {
      uint64_t v5 = *(void **)v2;
      uint64_t v4 = *(atomic_ullong **)(v2 + 8);
      __p[0] = v5;
      __p[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
      }
      E5RT::IOPort::BindMemoryObject(v3, (uint64_t)__p);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      E5RT::IOPort::BindMemoryObject(v3, (uint64_t)__p);
    }
    uint64_t v6 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return 0;
  }
  else
  {
    char v10 = operator new(0x30uLL);
    long long v11 = xmmword_192DA88D0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    char v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v10);
    }
    return 1;
  }
}

void sub_192300A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, _Unwind_Exception *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a10)
  {
    sub_1922F3278(a10);
    exception_object = a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192300B10(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_io_port_bind_buffer_objectE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z31e5rt_io_port_bind_buffer_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_io_port_bind_buffer_objectE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_io_port_bind_buffer_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192300B80()
{
  return &unk_1EE393B48;
}

void sub_192300B90()
{
}

__n128 sub_192300BA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393B68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192300BF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393B68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192300C20(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = *v1;
    if (v2)
    {
      uint64_t v5 = *(void **)v2;
      uint64_t v4 = *(atomic_ullong **)(v2 + 8);
      __p[0] = v5;
      __p[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
      }
      E5RT::IOPort::BindMemoryObject(v3, (uint64_t)__p);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      E5RT::IOPort::BindMemoryObject(v3, (uint64_t)__p);
    }
    uint64_t v6 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return 0;
  }
  else
  {
    char v10 = operator new(0x30uLL);
    long long v11 = xmmword_192DA88D0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    char v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v10);
    }
    return 1;
  }
}

void sub_192300D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192300DE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_io_port_bind_surface_objectE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_io_port_bind_surface_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_io_port_bind_surface_objectE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_io_port_bind_surface_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192300E50()
{
  return &unk_1EE393BC8;
}

void sub_192300E60()
{
}

__n128 sub_192300E74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393BE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192300EC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393BE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192300EF0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char IsDynamic = E5RT::IOPort::IsDynamic(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = IsDynamic;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90C0;
      strcpy((char *)v7, "Invalid Function Argument: dynamic is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192301070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923010B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_io_port_is_dynamicE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z23e5rt_io_port_is_dynamicE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_io_port_is_dynamicE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_io_port_is_dynamicE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192301120()
{
  return &unk_1EE393C48;
}

void sub_192301130()
{
}

__n128 sub_192301144(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393C68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192301190(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393C68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923011C0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::IOPortImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char HasKnownShape = E5RT::IOPort::HasKnownShape(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = HasKnownShape;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: known is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192301340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192301380(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_io_port_has_known_shapeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z28e5rt_io_port_has_known_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_io_port_has_known_shapeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_io_port_has_known_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923013F0()
{
  return &unk_1EE393CC8;
}

void sub_192301400()
{
}

__n128 sub_192301414(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE393CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192301468(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923014A0(uint64_t a1)
{
  uint64_t v1 = *(void *****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      if (*(void *)(a1 + 24))
      {
        **(void **)(a1 + 24) = *E5RT::IOPort::GetSupportedBufferTypes(*v1);
        SupportedBufferTypes = E5RT::IOPort::GetSupportedBufferTypes(**(void *****)(a1 + 8));
        uint64_t result = 0;
        **(void **)(a1 + 16) = ((unsigned char *)SupportedBufferTypes[1] - (unsigned char *)*SupportedBufferTypes) >> 2;
      }
      else
      {
        char v7 = operator new(0x30uLL);
        long long v8 = xmmword_192DA88E0;
        strcpy((char *)v7, "Invalid Function Argument: bufferTypes is NULL.");
        char v6 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v8) < 0) {
          operator delete(v7);
        }
        return 1;
      }
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: count is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1923016E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192301728(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_io_port_get_supported_buffer_typesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z39e5rt_io_port_get_supported_buffer_typesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_io_port_get_supported_buffer_typesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_io_port_get_supported_buffer_typesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192301798()
{
  return &unk_1EE393D48;
}

uint64_t sub_1923017A4(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t e5rt_program_function_get_name(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393DE8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923018C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_get_num_extern_inputs(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393E68;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923019C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_get_extern_input_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE393EE8;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192301AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_retain_extern_input_io_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE393F68;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192301BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_get_num_extern_outputs(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393FE8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192301CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_get_extern_output_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE394068;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192301E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_retain_extern_output_io_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE3940E8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192301F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_get_num_extern_inouts(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394168;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19230202C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_get_extern_inout_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE3941E8;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192302148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_load_for_execution(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE394268;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192302244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_retain_input_tensor_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE3942E8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192302360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_retain_output_tensor_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE394368;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_19230247C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_retain_inout_tensor_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE3943E8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192302598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_retain_input_surface_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE394468;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1923026B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_retain_output_surface_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE3944E8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1923027D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_function_retain_inout_surface_desc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE394568;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1923028EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192302904()
{
}

void *sub_192302918(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE393D68;
  result[1] = v3;
  return result;
}

uint64_t sub_192302960(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE393D68;
  a2[1] = v2;
  return result;
}

uint64_t sub_19230298C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (*(char *)(v2 + 39) < 0)
      {
        operator delete(*(void **)(v2 + 16));
        uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
        if (!v4)
        {
LABEL_9:
          MEMORY[0x192FF16B0](v2, 0x1032C40A813E67FLL);
          **(void **)(a1 + 8) = 0;
          return 0;
        }
      }
      else
      {
        uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
        if (!v4) {
          goto LABEL_9;
        }
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      goto LABEL_9;
    }
  }
  return 0;
}

uint64_t sub_192302A4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_program_function_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z29e5rt_program_function_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_program_function_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_program_function_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192302ABC()
{
  return &unk_1EE393DC8;
}

void sub_192302ACC()
{
}

__n128 sub_192302AE0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393DE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192302B2C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393DE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192302B5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      unint64_t v3 = (const std::string *)(*(uint64_t (**)(void))(**(void **)v1 + 56))();
      std::string::operator=((std::string *)(*(void *)(a1 + 8) + 16), v3);
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = (void *)(v4 + 16);
      if (*(char *)(v4 + 39) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      uint64_t result = 0;
      **(void **)(a1 + 16) = v5;
    }
    else
    {
      char v9 = operator new(0x30uLL);
      long long v10 = xmmword_192DAC000;
      strcpy((char *)v9, "Invalid Function Argument: name is NULL.");
      char v8 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v10) < 0) {
        operator delete(v9);
      }
      return 1;
    }
  }
  else
  {
    char v9 = operator new(0x30uLL);
    long long v10 = xmmword_192DA88D0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    char v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9);
    }
    return 1;
  }
  return result;
}

void sub_192302D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192302D5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z30e5rt_program_function_get_nameE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z30e5rt_program_function_get_nameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z30e5rt_program_function_get_nameE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z30e5rt_program_function_get_nameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192302DCC()
{
  return &unk_1EE393E48;
}

void sub_192302DDC()
{
}

__n128 sub_192302DF0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393E68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192302E3C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393E68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192302E6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v1 + 32))();
      uint64_t result = 0;
      **(void **)(a1 + 16) = *(void *)(v3 + 24);
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88C0;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192303010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192303050(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_program_function_get_num_extern_inputsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z43e5rt_program_function_get_num_extern_inputsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_program_function_get_num_extern_inputsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_program_function_get_num_extern_inputsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923030C0()
{
  return &unk_1EE393EC8;
}

void sub_1923030D0()
{
}

__n128 sub_1923030E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE393EE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192303138(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393EE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192303170(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (!v2)
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    goto LABEL_8;
  }
  unint64_t v3 = (void *)a1[2];
  if (!v3)
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA90F0;
    strcpy((char *)v8, "Invalid Function Argument: names is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
LABEL_8:
    if (v7 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v9) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v9) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v8);
    return 1;
  }
  uint64_t v4 = a1[3];

  return sub_192303398(v2, 0, v4, v3);
}

void sub_1923032DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230331C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_program_function_get_extern_input_namesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z44e5rt_program_function_get_extern_input_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_program_function_get_extern_input_namesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_program_function_get_extern_input_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230338C()
{
  return &unk_1EE393F48;
}

uint64_t sub_192303398(void *a1, int a2, uint64_t a3, void *a4)
{
  if (a2 == 2)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a1 + 48))(*a1);
  }
  else if (a2 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a1 + 40))(*a1);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))(*a1);
  }
  if (*(void *)(v6 + 24) == a3)
  {
    for (uint64_t i = *(uint64_t **)(v6 + 16); i; uint64_t i = (uint64_t *)*i)
    {
      long long v9 = i + 2;
      if (*((char *)i + 39) < 0) {
        long long v9 = (void *)*v9;
      }
      *a4++ = v9;
    }
    return 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "Invalid Function Argument: num_ports does not match number of ports in function.");
    std::string::basic_string[abi:ne180100]<0>(__p, "PopulatePortNames");
    E5RT::LogErrorMessage((uint64_t *)v12, (uint64_t *)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    return 1;
  }
}

void sub_1923034EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_19230353C()
{
}

__n128 sub_192303550(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE393F68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1923035A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393F68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923035DC(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      if (a1[3])
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v5[23] = 10;
        strcpy(v5, "operator()");
        *(void *)std::string __p = operator new(0x90uLL);
        *(_OWORD *)&__p[8] = xmmword_192DAC010;
        strcpy(*(char **)__p, "e5rt_program_function_retain_extern_input_io_port() is no longer supported. Switch to using e5rt_execution_stream_operation_t APIs instead.");
        E5RT::Status::Status(v3, 2, __p);
        E5RT::E5RTError::E5RTError(exception, v5, v3);
      }
      *(void *)uint64_t v5 = operator new(0x30uLL);
      *(_OWORD *)&unsigned char v5[8] = xmmword_192DA88E0;
      strcpy(*(char **)v5, "Invalid Function Argument: port_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
    }
    else
    {
      *(void *)uint64_t v5 = operator new(0x30uLL);
      *(_OWORD *)&unsigned char v5[8] = xmmword_192DAC000;
      strcpy(*(char **)v5, "Invalid Function Argument: name is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
    }
  }
  else
  {
    *(void *)uint64_t v5 = operator new(0x30uLL);
    *(_OWORD *)&unsigned char v5[8] = xmmword_192DA88D0;
    strcpy(*(char **)v5, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v5[23] & 0x80000000) == 0) {
      return 1;
    }
  }
  else if ((v5[23] & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(*(void **)v5);
  return 1;
}

void sub_192303860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1923038F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_192303908(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_program_function_retain_extern_input_io_portE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z49e5rt_program_function_retain_extern_input_io_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_program_function_retain_extern_input_io_portE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_program_function_retain_extern_input_io_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192303978()
{
  return &unk_1EE393FC8;
}

void sub_192303988()
{
}

__n128 sub_19230399C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393FE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923039E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393FE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192303A18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v1 + 40))();
      uint64_t result = 0;
      **(void **)(a1 + 16) = *(void *)(v3 + 24);
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88C0;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192303BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192303BFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_program_function_get_num_extern_outputsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z44e5rt_program_function_get_num_extern_outputsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_program_function_get_num_extern_outputsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_program_function_get_num_extern_outputsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192303C6C()
{
  return &unk_1EE394048;
}

void sub_192303C7C()
{
}

__n128 sub_192303C90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE394068;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192303CE4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394068;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192303D1C(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (!v2)
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    goto LABEL_8;
  }
  unint64_t v3 = (void *)a1[2];
  if (!v3)
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA90F0;
    strcpy((char *)v8, "Invalid Function Argument: names is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
LABEL_8:
    if (v7 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v9) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v9) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v8);
    return 1;
  }
  uint64_t v4 = a1[3];

  return sub_192303398(v2, 1, v4, v3);
}

void sub_192303E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192303EC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_program_function_get_extern_output_namesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z45e5rt_program_function_get_extern_output_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_program_function_get_extern_output_namesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_program_function_get_extern_output_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192303F38()
{
  return &unk_1EE3940C8;
}

void sub_192303F48()
{
}

__n128 sub_192303F5C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3940E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192303FB0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3940E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192303FE8(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      if (a1[3])
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v5[23] = 10;
        strcpy(v5, "operator()");
        *(void *)std::string __p = operator new(0x90uLL);
        *(_OWORD *)&__p[8] = xmmword_192DAC020;
        strcpy(*(char **)__p, "e5rt_program_function_retain_extern_output_io_port() is no longer supported. Switch to using e5rt_execution_stream_operation_t APIs instead.");
        E5RT::Status::Status(v3, 2, __p);
        E5RT::E5RTError::E5RTError(exception, v5, v3);
      }
      *(void *)uint64_t v5 = operator new(0x30uLL);
      *(_OWORD *)&unsigned char v5[8] = xmmword_192DA88E0;
      strcpy(*(char **)v5, "Invalid Function Argument: port_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
    }
    else
    {
      *(void *)uint64_t v5 = operator new(0x30uLL);
      *(_OWORD *)&unsigned char v5[8] = xmmword_192DAC000;
      strcpy(*(char **)v5, "Invalid Function Argument: name is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
    }
  }
  else
  {
    *(void *)uint64_t v5 = operator new(0x30uLL);
    *(_OWORD *)&unsigned char v5[8] = xmmword_192DA88D0;
    strcpy(*(char **)v5, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v5, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v5[23] & 0x80000000) == 0) {
      return 1;
    }
  }
  else if ((v5[23] & 0x80000000) == 0)
  {
    return 1;
  }
  operator delete(*(void **)v5);
  return 1;
}

void sub_19230426C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192304300(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_192304314(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z50e5rt_program_function_retain_extern_output_io_portE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z50e5rt_program_function_retain_extern_output_io_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z50e5rt_program_function_retain_extern_output_io_portE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50e5rt_program_function_retain_extern_output_io_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192304384()
{
  return &unk_1EE394148;
}

void sub_192304394()
{
}

__n128 sub_1923043A8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923043F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192304424(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v1 + 48))();
      uint64_t result = 0;
      **(void **)(a1 + 16) = *(void *)(v3 + 24);
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88C0;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1923045C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192304608(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_program_function_get_num_extern_inoutsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z43e5rt_program_function_get_num_extern_inoutsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_program_function_get_num_extern_inoutsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_program_function_get_num_extern_inoutsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192304678()
{
  return &unk_1EE3941C8;
}

void sub_192304688()
{
}

__n128 sub_19230469C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3941E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1923046F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3941E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192304728(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (!v2)
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    goto LABEL_8;
  }
  unint64_t v3 = (void *)a1[2];
  if (!v3)
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA90F0;
    strcpy((char *)v8, "Invalid Function Argument: names is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
LABEL_8:
    if (v7 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v9) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v9) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v8);
    return 1;
  }
  uint64_t v4 = a1[3];

  return sub_192303398(v2, 2, v4, v3);
}

void sub_192304894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923048D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_program_function_get_extern_inout_namesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z44e5rt_program_function_get_extern_inout_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_program_function_get_extern_inout_namesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_program_function_get_extern_inout_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192304944()
{
  return &unk_1EE394248;
}

void sub_192304954()
{
}

void *sub_192304968(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE394268;
  result[1] = v3;
  return result;
}

uint64_t sub_1923049B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE394268;
  a2[1] = v2;
  return result;
}

uint64_t sub_1923049DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    (*(void (**)(void))(**(void **)v1 + 64))();
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192304ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192304B08(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_program_function_load_for_executionE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_program_function_load_for_executionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_program_function_load_for_executionE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_program_function_load_for_executionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192304B78()
{
  return &unk_1EE3942C8;
}

void sub_192304B88()
{
}

__n128 sub_192304B9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3942E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192304BF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3942E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192304C28(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (!v2)
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  unint64_t v3 = (const char *)a1[2];
  if (!v3)
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DAC000;
    strcpy((char *)v7, "Invalid Function Argument: name is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  if (!a1[3])
  {
    char v7 = operator new(0x38uLL);
    long long v8 = xmmword_192DAA490;
    strcpy((char *)v7, "Invalid Function Argument: tensor_desc_handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
LABEL_10:
    if (v6 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v7);
    return 1;
  }

  return sub_192304EC8(v2, 0, v3);
}

void sub_192304E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192304E4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_program_function_retain_input_tensor_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z46e5rt_program_function_retain_input_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_program_function_retain_input_tensor_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_program_function_retain_input_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192304EBC()
{
  return &unk_1EE394348;
}

uint64_t sub_192304EC8(void *a1, int a2, const char *a3)
{
  if (a2 == 2)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 48))(*a1);
  }
  else if (a2 == 1)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 40))(*a1);
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))(*a1);
  }
  uint64_t v5 = (void *)v4;
  size_t v6 = strlen(a3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    long long v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v17 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v17) = v6;
  long long v8 = __dst;
  if (v6) {
LABEL_13:
  }
    memcpy(v8, a3, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  char v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(v5, (uint64_t)__dst);
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  if (v11)
  {
    uint64_t v12 = v11[6];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__dst, "Invalid Function Argument: port descriptor not found in function.");
  std::string::basic_string[abi:ne180100]<0>(__p, "RetainOperandDescriptor");
  E5RT::LogErrorMessage((uint64_t *)__dst, (uint64_t *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  return 1;
}

void sub_1923052EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::unique_ptr<e5rt_tensor_desc>::~unique_ptr[abi:ne180100](&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<e5rt_tensor_desc>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x60C405C6656D0);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    char v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          char v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        char v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    char v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          char v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        char v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_192305658()
{
}

__n128 sub_19230566C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE394368;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1923056C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394368;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923056F8(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (!v2)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  unint64_t v3 = (const char *)a1[2];
  if (!v3)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DAC000;
    strcpy((char *)v7, "Invalid Function Argument: name is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  if (!a1[3])
  {
    int8x8_t v7 = operator new(0x38uLL);
    long long v8 = xmmword_192DAA490;
    strcpy((char *)v7, "Invalid Function Argument: tensor_desc_handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
LABEL_10:
    if (v6 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v7);
    return 1;
  }

  return sub_192304EC8(v2, 1, v3);
}

void sub_1923058D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230591C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_program_function_retain_output_tensor_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z47e5rt_program_function_retain_output_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_program_function_retain_output_tensor_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_program_function_retain_output_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230598C()
{
  return &unk_1EE3943C8;
}

void sub_19230599C()
{
}

__n128 sub_1923059B0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3943E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192305A04(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3943E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192305A3C(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (!v2)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  unint64_t v3 = (const char *)a1[2];
  if (!v3)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DAC000;
    strcpy((char *)v7, "Invalid Function Argument: name is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  if (!a1[3])
  {
    int8x8_t v7 = operator new(0x38uLL);
    long long v8 = xmmword_192DAA490;
    strcpy((char *)v7, "Invalid Function Argument: tensor_desc_handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
LABEL_10:
    if (v6 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v7);
    return 1;
  }

  return sub_192304EC8(v2, 2, v3);
}

void sub_192305C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192305C60(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_program_function_retain_inout_tensor_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z46e5rt_program_function_retain_inout_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_program_function_retain_inout_tensor_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_program_function_retain_inout_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192305CD0()
{
  return &unk_1EE394448;
}

void sub_192305CE0()
{
}

__n128 sub_192305CF4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE394468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192305D48(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192305D80(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (!v2)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  unint64_t v3 = (const char *)a1[2];
  if (!v3)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DAC000;
    strcpy((char *)v7, "Invalid Function Argument: name is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  if (!a1[3])
  {
    int8x8_t v7 = operator new(0x38uLL);
    long long v8 = xmmword_192DA8910;
    strcpy((char *)v7, "Invalid Function Argument: surface_desc_handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
LABEL_10:
    if (v6 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v7);
    return 1;
  }

  return sub_192306020(v2, 0, v3);
}

void sub_192305F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192305FA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_program_function_retain_input_surface_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z47e5rt_program_function_retain_input_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_program_function_retain_input_surface_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_program_function_retain_input_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192306014()
{
  return &unk_1EE3944C8;
}

uint64_t sub_192306020(void *a1, int a2, const char *a3)
{
  if (a2 == 2)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 48))(*a1);
  }
  else if (a2 == 1)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 40))(*a1);
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 32))(*a1);
  }
  unint64_t v5 = (void *)v4;
  size_t v6 = strlen(a3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int8x8_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    long long v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v17 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v17) = v6;
  long long v8 = __dst;
  if (v6) {
LABEL_13:
  }
    memcpy(v8, a3, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  char v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(v5, (uint64_t)__dst);
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  if (v11)
  {
    uint64_t v12 = v11[6];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__dst, "Invalid Function Argument: port descriptor not found in function.");
  std::string::basic_string[abi:ne180100]<0>(__p, "RetainOperandDescriptor");
  E5RT::LogErrorMessage((uint64_t *)__dst, (uint64_t *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  return 1;
}

void sub_192306444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::unique_ptr<e5rt_tensor_desc>::~unique_ptr[abi:ne180100](&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1923064E8()
{
}

__n128 sub_1923064FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3944E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192306550(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3944E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192306588(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (!v2)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  unint64_t v3 = (const char *)a1[2];
  if (!v3)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DAC000;
    strcpy((char *)v7, "Invalid Function Argument: name is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  if (!a1[3])
  {
    int8x8_t v7 = operator new(0x38uLL);
    long long v8 = xmmword_192DA8910;
    strcpy((char *)v7, "Invalid Function Argument: surface_desc_handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
LABEL_10:
    if (v6 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v7);
    return 1;
  }

  return sub_192306020(v2, 1, v3);
}

void sub_192306768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923067AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_program_function_retain_output_surface_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z48e5rt_program_function_retain_output_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_program_function_retain_output_surface_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_program_function_retain_output_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230681C()
{
  return &unk_1EE394548;
}

void sub_19230682C()
{
}

__n128 sub_192306840(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE394568;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192306894(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394568;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923068CC(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (!v2)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  unint64_t v3 = (const char *)a1[2];
  if (!v3)
  {
    int8x8_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DAC000;
    strcpy((char *)v7, "Invalid Function Argument: name is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    goto LABEL_10;
  }
  if (!a1[3])
  {
    int8x8_t v7 = operator new(0x38uLL);
    long long v8 = xmmword_192DA8910;
    strcpy((char *)v7, "Invalid Function Argument: surface_desc_handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
LABEL_10:
    if (v6 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v7);
    return 1;
  }

  return sub_192306020(v2, 2, v3);
}

void sub_192306AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192306AF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_program_function_retain_inout_surface_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z47e5rt_program_function_retain_inout_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_program_function_retain_inout_surface_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_program_function_retain_inout_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192306B60()
{
  return &unk_1EE3945C8;
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::AneInferenceOperationImplUsingDriverAPIs(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  long long v18 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *(_OWORD *)char v15 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  int v17 = 1065353216;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)char v13 = 0u;
  int v14 = 1065353216;
  E5RT::Ops::Impl::AneInferenceOperationImpl::AneInferenceOperationImpl(a1, a2, (uint64_t)&v18, a4, (uint64_t)v15, (uint64_t)__p);
  unint64_t v5 = (void **)v13[0];
  if (!v13[0])
  {
LABEL_2:
    char v6 = __p[0];
    __p[0] = 0;
    if (v6) {
      operator delete(v6);
    }
    int8x8_t v7 = (void **)v16[0];
    if (!v16[0])
    {
LABEL_5:
      long long v8 = v15[0];
      v15[0] = 0;
      if (v8) {
        operator delete(v8);
      }
      uint64_t v9 = (std::__shared_weak_count *)*((void *)&v18 + 1);
      if (*((void *)&v18 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      *(void *)a1 = &unk_1EE326A50;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_DWORD *)(a1 + 184) = 5;
      *(unsigned char *)(a1 + 188) = 0;
      *(unsigned char *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      operator new();
    }
    while (1)
    {
      char v11 = (void **)*v7;
      if (*((char *)v7 + 63) < 0)
      {
        operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0) {
LABEL_22:
        }
          operator delete(v7[2]);
      }
      else if (*((char *)v7 + 39) < 0)
      {
        goto LABEL_22;
      }
      operator delete(v7);
      int8x8_t v7 = v11;
      if (!v11) {
        goto LABEL_5;
      }
    }
  }
  while (1)
  {
    uint64_t v10 = (void **)*v5;
    if (*((char *)v5 + 63) < 0)
    {
      operator delete(v5[5]);
      if (*((char *)v5 + 39) < 0) {
LABEL_16:
      }
        operator delete(v5[2]);
    }
    else if (*((char *)v5 + 39) < 0)
    {
      goto LABEL_16;
    }
    operator delete(v5);
    unint64_t v5 = v10;
    if (!v10) {
      goto LABEL_2;
    }
  }
}

void sub_192306E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v29 = *((void *)v25 + 25);
  *((void *)v25 + 25) = 0;
  if (v29)
  {
    MEMORY[0x192FF16B0](v29, 0x1020C403FFFDEEELL);
    std::unique_ptr<ANEProgramRequestSharedEventsStruct>::~unique_ptr[abi:ne180100](v27);
    uint64_t v30 = *((void *)v25 + 21);
    *((void *)v25 + 21) = 0;
    if (!v30)
    {
LABEL_3:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26);
      E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl(v25);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::unique_ptr<ANEProgramRequestSharedEventsStruct>::~unique_ptr[abi:ne180100](v27);
    uint64_t v30 = *((void *)v25 + 21);
    *((void *)v25 + 21) = 0;
    if (!v30) {
      goto LABEL_3;
    }
  }
  MEMORY[0x192FF16B0](v30, 0x1020C40CB9090B6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26);
  E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl(v25);
  _Unwind_Resume(a1);
}

id **std::unique_ptr<ANEProgramRequestSharedEventsStruct>::~unique_ptr[abi:ne180100](id **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ANEProgramRequestSharedEventsStruct::~ANEProgramRequestSharedEventsStruct(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::~AneInferenceOperationImplUsingDriverAPIs(const void **this)
{
  *this = &unk_1EE326A50;
  if (this[19])
  {
    E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(this[4]);
    uint64_t v2 = (E5RT::AneDeviceManager *)objc_claimAutoreleasedReturnValue();
    AneDeviceManager = (E5RT::AneDeviceManager *)E5RT::AneDeviceManager::GetAneDeviceManager(v2);
    E5RT::AneDeviceManager::DeviceClose(AneDeviceManager, *((_DWORD *)this[2] + 12), [(E5RT::AneDeviceManager *)v2 programHandle]);
  }
  uint64_t v4 = this[25];
  this[25] = 0;
  if (v4) {
    MEMORY[0x192FF16B0](v4, 0x1020C403FFFDEEELL);
  }
  unint64_t v5 = (id *)this[22];
  this[22] = 0;
  if (v5)
  {
    ANEProgramRequestSharedEventsStruct::~ANEProgramRequestSharedEventsStruct(v5);
    MEMORY[0x192FF16B0]();
  }
  char v6 = this[21];
  this[21] = 0;
  if (v6) {
    MEMORY[0x192FF16B0](v6, 0x1020C40CB9090B6);
  }
  int8x8_t v7 = (std::__shared_weak_count *)this[20];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    long long v8 = (E5RT::Ops::Impl::AneInferenceOperationImpl *)this;
  }
  else
  {
    long long v8 = (E5RT::Ops::Impl::AneInferenceOperationImpl *)this;
  }
  E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl(v8);
}

{
  uint64_t vars8;

  E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::~AneInferenceOperationImplUsingDriverAPIs(this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::PrepareOpForEncode(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(this[1])) {
    return;
  }
  v106 = (E5RT::Ops::Impl::AneInferenceOperationImpl *)this;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this[1]);
  uint64_t v125 = 0x2B23800400000000;
  long long v126 = 0u;
  long long v127 = 0u;
  kdebug_trace();
  HIBYTE(v124) = 4;
  strcpy((char *)__p, "e5rt");
  uint64_t v2 = E5RT::GetE5RTLog((uint64_t)__p);
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  if (SHIBYTE(v124) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v124) = 4;
  strcpy((char *)__p, "e5rt");
  uint64_t v4 = E5RT::GetE5RTLog((uint64_t)__p);
  if ((SHIBYTE(v124) & 0x80000000) == 0)
  {
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_10;
    }
LABEL_8:
    if (os_signpost_enabled(v4))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1920CB000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "AneOpPrepareForEncode", (const char *)&unk_192F346DB, (uint8_t *)__p, 2u);
    }
    goto LABEL_10;
  }
  operator delete(__p[0]);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL) {
    goto LABEL_8;
  }
LABEL_10:

  v122[0] = MEMORY[0x1E4F143A8];
  v122[1] = 3221225472;
  v122[2] = sub_192308428;
  v122[3] = &__block_descriptor_48_e5_v8__0l;
  v122[4] = v106;
  v122[5] = v3;
  unint64_t v5 = (void (**)(void))MEMORY[0x192FF2250](v122);
  v107 = v5;
  E5RT::Ops::Impl::AneInferenceOperationImpl::LoadAneModel(v106);
  char v6 = E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(*((const void **)v106 + 4));
  v108 = v6;
  int8x8_t v7 = [v6 modelAttributes];
  v94 = [v7 objectForKeyedSubscript:*MEMORY[0x1E4F4E108]];

  long long v93 = [v94 objectForKeyedSubscript:*MEMORY[0x1E4F4E180]];
  long long v8 = [v93 objectAtIndexedSubscript:0];
  uint64_t v9 = [v8 objectForKeyedSubscript:*MEMORY[0x1E4F4E168]];
  unsigned int v10 = [v9 unsignedIntValue];

  if ((unint64_t)[v93 count] >= 2)
  {
    uint64_t v11 = *((void *)v106 + 2);
    uint64_t v12 = [v94 objectForKeyedSubscript:*MEMORY[0x1E4F4E170]];
    uint64_t v13 = v11 + 24;
    if (*(char *)(v11 + 47) < 0) {
      uint64_t v13 = *(void *)(v11 + 24);
    }
    int v14 = [NSString stringWithUTF8String:v13];
    char v15 = [v12 objectForKeyedSubscript:v14];

    if (!v15)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
      std::operator+<char>();
      long long v90 = std::string::append(&__s1, " not found in multi-procedure mach-o.");
      long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
      std::string::size_type v120 = v90->__r_.__value_.__r.__words[2];
      *(_OWORD *)v119 = v91;
      v90->__r_.__value_.__l.__size_ = 0;
      v90->__r_.__value_.__r.__words[2] = 0;
      v90->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(v121, 1, v119);
      E5RT::E5RTError::E5RTError(exception, __p, v121);
    }
    unsigned int v10 = [v15 unsignedIntValue];
  }
  uint64_t v16 = [v93 objectAtIndexedSubscript:v10];
  v96 = [v16 objectForKeyedSubscript:*MEMORY[0x1E4F4E128]];
  v95 = [v16 objectForKeyedSubscript:*MEMORY[0x1E4F4E150]];
  unint64_t v101 = [v94 objectForKeyedSubscript:*MEMORY[0x1E4F4E130]];
  v100 = [v94 objectForKeyedSubscript:*MEMORY[0x1E4F4E158]];
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*((E5RT::ExecutionStreamOperationInternal **)v106
                                                                     + 1));
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*((E5RT::ExecutionStreamOperationInternal **)v106
                                                                       + 1));
  v109 = v16;
  if ([v96 count] != *(void *)(InputPorts + 24))
  {
    long long v86 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(v119, "Invalid number of inputs in mach-o.");
    E5RT::Status::Status(&__s1, 2, v119);
    E5RT::E5RTError::E5RTError(v86, __p, &__s1);
  }
  if ([v95 count] != *(void *)(OutputPorts + 24))
  {
    v87 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(v119, "Invalid number of outputs in mach-o.");
    E5RT::Status::Status(&__s1, 2, v119);
    E5RT::E5RTError::E5RTError(v87, __p, &__s1);
  }
  bzero(*((void **)v106 + 21), 0x3030uLL);
  **((_DWORD **)v106 + 21) = v10;
  uint64_t v19 = [v6 programHandle];
  uint64_t v20 = *((void *)v106 + 21);
  *(void *)(v20 + 12288) = v19;
  *(unsigned char *)(v20 + 12308) = 0;
  *(_DWORD *)(v20 + 4) = *(void *)(InputPorts + 24);
  *(_DWORD *)(v20 + 6128) = *(void *)(OutputPorts + 24);
  *(void *)(v20 + 12296) = 2;
  uint64_t v21 = (E5RT::AneDeviceManager *)qos_class_main();
  uint64_t v22 = *((void *)v106 + 21);
  *(_DWORD *)(v22 + 12304) = v21;
  uint64_t v23 = *(void *)(InputPorts + 24);
  uint64_t v92 = OutputPorts;
  uint64_t v24 = *((void *)v106 + 25);
  *(_DWORD *)(v24 + 3080) = *(_DWORD *)(OutputPorts + 24) + v23;
  *(void *)(v24 + 3072) = *(void *)(v22 + 12288);
  *(_DWORD *)(v24 + 3084) = *(_DWORD *)v22;
  char v25 = *(uint64_t **)(InputPorts + 16);
  if (v25)
  {
    v97 = (void *)InputPorts;
    uint64_t v26 = 0;
    while (1)
    {
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      id obj = v96;
      uint64_t v27 = [obj countByEnumeratingWithState:&v114 objects:v129 count:16];
      if (!v27) {
        goto LABEL_60;
      }
      uint64_t v104 = *(void *)v115;
      do
      {
        uint64_t v28 = 0;
        do
        {
          if (*(void *)v115 != v104) {
            objc_enumerationMutation(obj);
          }
          uint64_t v29 = [*(id *)(*((void *)&v114 + 1) + 8 * v28) integerValue];
          id v30 = [v101 objectAtIndexedSubscript:v29];
          float v31 = (const char *)[v30 UTF8String];
          size_t v32 = strlen(v31);
          if (v32 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          unint64_t v33 = (void *)v32;
          if (v32 >= 0x17)
          {
            uint64_t v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v35 = v32 | 7;
            }
            uint64_t v36 = v35 + 1;
            BOOL v34 = operator new(v35 + 1);
            __p[1] = v33;
            int64_t v124 = v36 | 0x8000000000000000;
            __p[0] = v34;
LABEL_31:
            memmove(v34, v31, (size_t)v33);
            goto LABEL_32;
          }
          HIBYTE(v124) = v32;
          BOOL v34 = __p;
          if (v32) {
            goto LABEL_31;
          }
LABEL_32:
          uint64_t v16 = v109;
          *((unsigned char *)v33 + (void)v34) = 0;

          unint64_t v5 = v107;
          char v6 = v108;
          uint64_t v37 = (const void *)v25[5];
          if (v37) {
          else
          }
            int8x8_t v38 = 0;
          uint64_t v39 = HIBYTE(v124);
          if (v124 >= 0) {
            uint8x8_t v40 = (void *)HIBYTE(v124);
          }
          else {
            uint8x8_t v40 = __p[1];
          }
          uint64_t v41 = (void *)*((unsigned __int8 *)v25 + 39);
          int v42 = (char)v41;
          if ((char)v41 < 0) {
            uint64_t v41 = (void *)v25[3];
          }
          if (v40 == v41)
          {
            if (v42 >= 0) {
              unint64_t v43 = (unsigned __int8 *)(v25 + 2);
            }
            else {
              unint64_t v43 = (unsigned __int8 *)v25[2];
            }
            if (v124 < 0)
            {
              if (!memcmp(__p[0], v43, (size_t)__p[1])) {
                goto LABEL_52;
              }
            }
            else
            {
              if (!HIBYTE(v124)) {
                goto LABEL_52;
              }
              uint64_t v44 = __p;
              while (*(unsigned __int8 *)v44 == *v43)
              {
                uint64_t v44 = (void **)((char *)v44 + 1);
                ++v43;
                if (!--v39) {
                  goto LABEL_52;
                }
              }
            }
          }
          Aliases = (void *)E5RT::IOPortPriv::GetAliases(v38);
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(Aliases, (uint64_t)__p))
          {
LABEL_52:
            int v46 = 0;
            uint64_t v47 = *((void *)v106 + 21) + 24 * v26;
            *(_DWORD *)(v47 + 24) = 1;
            *(_DWORD *)(v47 + 16) = v29;
            uint64_t v48 = *((void *)v106 + 25) + 24 * v26;
            *(_DWORD *)(v48 + 16) = 1;
            *(_DWORD *)(v48 + 8) = v29;
            ++v26;
            if ((SHIBYTE(v124) & 0x80000000) == 0) {
              goto LABEL_54;
            }
LABEL_53:
            operator delete(__p[0]);
            goto LABEL_54;
          }
          int v46 = 1;
          if (SHIBYTE(v124) < 0) {
            goto LABEL_53;
          }
LABEL_54:
          if (!v46) {
            goto LABEL_60;
          }
          ++v28;
        }
        while (v28 != v27);
        uint64_t v49 = [obj countByEnumeratingWithState:&v114 objects:v129 count:16];
        uint64_t v27 = v49;
      }
      while (v49);
LABEL_60:

      char v25 = (uint64_t *)*v25;
      if (!v25)
      {
        uint64_t v23 = v97[3];
        uint64_t v50 = v92;
        if (v26 == v23) {
          goto LABEL_62;
        }
LABEL_129:
        id v81 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
        std::string::basic_string[abi:ne180100]<0>(v119, "Unable to find ANE input index mappings for all op inputs.");
        E5RT::Status::Status(&__s1, 2, v119);
        E5RT::E5RTError::E5RTError(v81, __p, &__s1);
      }
    }
  }
  uint64_t v50 = OutputPorts;
  if (v23) {
    goto LABEL_129;
  }
LABEL_62:
  long long v51 = *(uint64_t **)(v50 + 16);
  if (!v51)
  {
    uint64_t v52 = 0;
    goto LABEL_131;
  }
  uint64_t v99 = v23;
  uint64_t v52 = 0;
  do
  {
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    id v98 = v95;
    uint64_t v53 = [v98 countByEnumeratingWithState:&v110 objects:v128 count:16];
    if (!v53) {
      goto LABEL_126;
    }
    uint64_t v54 = (unsigned __int8 **)(v51 + 2);
    uint64_t v105 = *(void *)v111;
    while (2)
    {
      id obja = (id)v53;
      for (uint64_t i = 0; i != obja; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v111 != v105) {
          objc_enumerationMutation(v98);
        }
        uint64_t v56 = [*(id *)(*((void *)&v110 + 1) + 8 * i) integerValue];
        id v57 = [v100 objectAtIndexedSubscript:v56];
        unint64_t v58 = (const char *)[v57 UTF8String];
        size_t v59 = strlen(v58);
        if (v59 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        uint64_t v60 = (void *)v59;
        if (v59 >= 0x17)
        {
          uint64_t v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v59 | 7) != 0x17) {
            uint64_t v62 = v59 | 7;
          }
          uint64_t v63 = v62 + 1;
          uint64_t v61 = operator new(v62 + 1);
          __p[1] = v60;
          int64_t v124 = v63 | 0x8000000000000000;
          __p[0] = v61;
LABEL_76:
          memmove(v61, v58, (size_t)v60);
          goto LABEL_77;
        }
        HIBYTE(v124) = v59;
        uint64_t v61 = __p;
        if (v59) {
          goto LABEL_76;
        }
LABEL_77:
        *((unsigned char *)v60 + (void)v61) = 0;

        unint64_t v5 = v107;
        char v6 = v108;
        HIBYTE(v120) = 7;
        strcpy((char *)v119, "@output");
        E5Common::StringUtils::GetSubstringBeforeSuffix((uint64_t)__p, (uint64_t)v119, &__s1);
        uint64_t v64 = (const void *)v51[5];
        if (v64) {
        else
        }
          int v65 = 0;
        uint64_t v66 = HIBYTE(v124);
        if (v124 >= 0) {
          v67 = (void *)HIBYTE(v124);
        }
        else {
          v67 = __p[1];
        }
        int v68 = *((char *)v51 + 39);
        if (v68 >= 0) {
          long long v69 = (void *)*((unsigned __int8 *)v51 + 39);
        }
        else {
          long long v69 = (void *)v51[3];
        }
        if (v67 == v69)
        {
          if (v68 >= 0) {
            uint64_t v70 = (unsigned __int8 *)(v51 + 2);
          }
          else {
            uint64_t v70 = *v54;
          }
          if (v124 < 0)
          {
            if (!memcmp(__p[0], v70, (size_t)__p[1])) {
              goto LABEL_113;
            }
          }
          else
          {
            if (!HIBYTE(v124)) {
              goto LABEL_113;
            }
            id v71 = __p;
            while (*(unsigned __int8 *)v71 == *v70)
            {
              id v71 = (void **)((char *)v71 + 1);
              ++v70;
              if (!--v66) {
                goto LABEL_113;
              }
            }
          }
        }
        uint64_t v72 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s1.__r_.__value_.__l.__size_;
        }
        if ((void *)size == v69)
        {
          if (v68 >= 0) {
            v74 = (unsigned __int8 *)(v51 + 2);
          }
          else {
            v74 = *v54;
          }
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(__s1.__r_.__value_.__l.__data_, v74, __s1.__r_.__value_.__l.__size_)) {
              goto LABEL_113;
            }
          }
          else
          {
            if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
              goto LABEL_113;
            }
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *v74)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              ++v74;
              if (!--v72) {
                goto LABEL_113;
              }
            }
          }
        }
        id v76 = (void *)E5RT::IOPortPriv::GetAliases(v65);
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v76, (uint64_t)__p)|| (v77 = (void *)E5RT::IOPortPriv::GetAliases(v65), std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v77, (uint64_t)&__s1)))
        {
LABEL_113:
          int v78 = 0;
          uint64_t v79 = *((void *)v106 + 21) + 24 * v52;
          *(_DWORD *)(v79 + 6152) = 2;
          *(_DWORD *)(v79 + 6144) = v56;
          uint64_t v80 = *((void *)v106 + 25) + 24 * (v52 + v99);
          *(_DWORD *)(v80 + 16) = 2;
          *(_DWORD *)(v80 + 8) = v56;
          ++v52;
          if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_114;
          }
          goto LABEL_119;
        }
        int v78 = 1;
        if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_114:
          if ((SHIBYTE(v120) & 0x80000000) == 0) {
            goto LABEL_115;
          }
          goto LABEL_120;
        }
LABEL_119:
        operator delete(__s1.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v120) & 0x80000000) == 0)
        {
LABEL_115:
          if ((SHIBYTE(v124) & 0x80000000) == 0) {
            goto LABEL_116;
          }
          goto LABEL_121;
        }
LABEL_120:
        operator delete(v119[0]);
        if ((SHIBYTE(v124) & 0x80000000) == 0)
        {
LABEL_116:
          if (!v78) {
            goto LABEL_125;
          }
          goto LABEL_122;
        }
LABEL_121:
        operator delete(__p[0]);
        if (!v78)
        {
LABEL_125:
          uint64_t v16 = v109;
          goto LABEL_126;
        }
LABEL_122:
        uint64_t v16 = v109;
      }
      uint64_t v53 = [v98 countByEnumeratingWithState:&v110 objects:v128 count:16];
      if (v53) {
        continue;
      }
      break;
    }
LABEL_126:

    long long v51 = (uint64_t *)*v51;
  }
  while (v51);
LABEL_131:
  AneDeviceManager = (int8x8_t *)E5RT::AneDeviceManager::GetAneDeviceManager(v21);
  E5RT::AneDeviceManager::GetAneDevice(AneDeviceManager, 0, [v6 programHandle], (int8x8_t *)__p);
  long long v83 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  long long v84 = (std::__shared_weak_count *)*((void *)v106 + 20);
  *(_OWORD *)((char *)v106 + 152) = v83;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
  long long v85 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  if (v52 != *(void *)(v92 + 24))
  {
    v88 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(v119, "Unable to find ANE output index mappings for all op outputs.");
    E5RT::Status::Status(&__s1, 2, v119);
    E5RT::E5RTError::E5RTError(v88, __p, &__s1);
  }
  *(void *)&long long v126 = [v6 programHandle];

  v5[2](v5);
  if (E5RT::g_trace_analysis_level >= v125) {
    kdebug_trace();
  }
}

void sub_192308074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (**a22)(void),void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  a22[2]();
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a59);
  _Unwind_Resume(a1);
}

void sub_192308428(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  char v11 = 4;
  strcpy(__p, "e5rt");
  os_signpost_id_t v3 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v11 < 0)
  {
    operator delete(*(void **)__p);
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  else
  {
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  if (os_signpost_enabled(v3))
  {
    unint64_t v5 = *(uint64_t **)(v2 + 16);
    char v6 = v5;
    if (*((char *)v5 + 23) < 0)
    {
      char v6 = (uint64_t *)*v5;
      int8x8_t v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      int8x8_t v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0)
      {
LABEL_8:
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = v6;
        __int16 v9 = 2080;
        unsigned int v10 = v7;
        _os_signpost_emit_with_name_impl(&dword_1920CB000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AneOpPrepareForEncode", "Model=%{signpost.description:attribute}s Procedure=%{signpost.description:attribute}s ", __p, 0x16u);
        goto LABEL_9;
      }
    }
    int8x8_t v7 = (void *)*v7;
    goto LABEL_8;
  }
LABEL_9:
}

void sub_192308578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(this[1]) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&v9, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v8, 2, &v9);
    E5RT::E5RTError::E5RTError(exception, &v13, v8);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this[1]);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this[1]);
  uint64_t v13 = 0x2B23800C00000000;
  long long v14 = 0u;
  long long v15 = 0u;
  kdebug_trace();
  *((_DWORD *)this[21] + 3074) = *((_DWORD *)this + 46);
  uint64_t v9 = 0;
  unsigned int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  uint64_t v2 = this[19];
  v8[3] = MEMORY[0x1E4F143A8];
  v8[4] = 3221225472;
  v8[5] = sub_1923088F4;
  v8[6] = &unk_1E57456A0;
  v8[7] = &v9;
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *))(*(void *)v2 + 8))(v2);
  if (*((_DWORD *)v10 + 6) != 8)
  {
    unint64_t v5 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v6, "ANE inference operation failed.");
    E5RT::Status::Status(v7, 11, v6);
    E5RT::E5RTError::E5RTError(v5, v8, v7);
  }
  _Block_object_dispose(&v9, 8);
  return kdebug_trace();
}

void sub_1923087E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _Block_object_dispose(&a28, 8);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v33 - 72));
  _Unwind_Resume(a1);
}

void sub_1923088F4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != 19 || *(void *)(a2 + 8) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    if (!*(_DWORD *)(v3 + 24)) {
      *(_DWORD *)(v3 + 24) = *(_DWORD *)a2;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "e5rt");
    os_signpost_id_t v4 = E5RT::GetE5RTLog((uint64_t)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_19230A1EC(v4);
    }
  }
}

void sub_1923089C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8)) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v21, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v15, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v17, 2, v15);
    E5RT::E5RTError::E5RTError(exception, &v21, v17);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  uint64_t v21 = 0x2B23801800000000;
  long long v22 = 0u;
  long long v23 = 0u;
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*(void *)(a1 + 8), &v19);
  uint64_t DependentAsyncEvents = E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*(E5RT::ExecutionStreamOperationInternal **)(a1 + 8));
  int8x8_t v7 = v19;
  if (!v19)
  {
    long long v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v17, "Completion AsyncEvent (internal or client bound) is required for async submit.");
    E5RT::Status::Status(v18, 11, v17);
    E5RT::E5RTError::E5RTError(v14, v15, v18);
  }
  long long v8 = *(uint64_t ***)(DependentAsyncEvents + 16);
  if (v8)
  {
    uint64_t v9 = 16;
    do
    {
      *(void *)(*(void *)(a1 + 176) + v9) = E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)v8[2]);
      long long v8 = (uint64_t **)*v8;
      v9 += 32;
    }
    while (v8);
    int8x8_t v7 = v19;
  }
  *(void *)(*(void *)(a1 + 176) + 2064) = E5RT::AsyncEvent::GetActiveFutureValue(v7);
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  char v16 = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3321888768;
  v24[2] = sub_192308FC4;
  v24[3] = &unk_1EE38F1D8;
  v24[5] = a1;
  LOBYTE(v25[0]) = 0;
  char v27 = 0;
  if (*(unsigned char *)(a4 + 32))
  {
    uint64_t v10 = *(void *)(a4 + 24);
    if (v10)
    {
      if (v10 == a4)
      {
        uint64_t v26 = v25;
        (*(void (**)(uint64_t, void *))(*(void *)a4 + 24))(a4, v25);
        goto LABEL_13;
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    }
    uint64_t v26 = (void *)v10;
LABEL_13:
    char v27 = 1;
  }
  v24[4] = v15;
  uint64_t v11 = (void *)MEMORY[0x192FF2250](v24);
  (***(void (****)(void, void, void *, void))(a1 + 152))(*(void *)(a1 + 152), *(void *)(a1 + 168), v11, *(void *)(a1 + 176));

  if (v27)
  {
    if (v26 == v25)
    {
      (*(void (**)(void *))(v25[0] + 32))(v25);
      _Block_object_dispose(v15, 8);
      int v12 = v20;
      if (!v20) {
        goto LABEL_22;
      }
      goto LABEL_19;
    }
    if (v26) {
      (*(void (**)(void))(*v26 + 40))();
    }
  }
  _Block_object_dispose(v15, 8);
  int v12 = v20;
  if (!v20) {
    goto LABEL_22;
  }
LABEL_19:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_22:
  if (E5RT::g_trace_analysis_level >= v21) {
    kdebug_trace();
  }
}

void sub_192308E0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35 = (_Unwind_Exception *)a1;
  if (a35)
  {
    sub_19230A230((uint64_t)&a25, (uint64_t)&a31, a1, a2, (uint64_t)&a14);
    uint64_t v35 = a14;
  }
  _Block_object_dispose(&a10, 8);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a20);
  _Unwind_Resume(v35);
}

void sub_192308E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va1);
  _Unwind_Resume(a1);
}

void sub_192308EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_192308F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if (v29)
    {
LABEL_8:
      __cxa_free_exception(v28);
      _Unwind_Resume(a1);
    }
  }
  else if (v29)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_192308F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a23);
  _Unwind_Resume(a1);
}

void sub_192308F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v25);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_192308FC4(uint64_t result, int *a2)
{
  if (!*(unsigned char *)(result + 80)) {
    return result;
  }
  uint64_t v2 = result;
  int v3 = *a2;
  if (*a2 == 19 && *((void *)a2 + 1) != 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    return result;
  }
  uint64_t v5 = *(void *)(result + 40);
  if (v3 != 8)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v15 = 0;
    if ((v3 - 17) > 1)
    {
      MEMORY[0x192FF0F50](__p, "ANE op async execution has returned unexpected failure.");
      uint64_t v10 = 11;
    }
    else
    {
      MEMORY[0x192FF0F50](__p, "ANE op async execution has timed out.");
      uint64_t v10 = 10;
    }
    if (*(unsigned char *)(v2 + 80))
    {
      std::string::basic_string[abi:ne180100]<0>(&v12, "SubmitAsync_block_invoke");
      E5RT::Status::Status(v11, v10, __p);
      std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string,E5RT::Status>();
    }
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (*(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    HIBYTE(v15) = 4;
    strcpy((char *)__p, "e5rt");
    char v6 = E5RT::GetE5RTLog((uint64_t)__p);
    int8x8_t v7 = v6;
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[0]);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
LABEL_11:

        if (*(unsigned char *)(v2 + 80)) {
          goto LABEL_12;
        }
LABEL_18:
        std::__throw_bad_optional_access[abi:ne180100]();
      }
    }
    else if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_11;
    }
    sub_19230A300(v7);

    if (*(unsigned char *)(v2 + 80)) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
LABEL_12:
  long long v8 = *(void **)(v5 + 8);
  uint64_t v13 = 0;
  __p[0] = v8;
  uint64_t v9 = *(void *)(v2 + 72);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v9 + 48))(v9, __p, &v13);
  __n128 result = v13;
  uint64_t v13 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_192309240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v25 = a17;
  a17 = 0;
  if (v25) {
    sub_19230A2C8(v25);
  }
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1923092A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
  {
    sub_19230A2C8(a15);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19230929CLL);
}

unsigned char *__copy_helper_block_ea8_48c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE(unsigned char *result, uint64_t a2)
{
  result[48] = 0;
  int v3 = result + 48;
  result[80] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    os_signpost_id_t v4 = result;
    __n128 result = *(unsigned char **)(a2 + 72);
    if (result)
    {
      if (result == (unsigned char *)(a2 + 48))
      {
        *((void *)v4 + 9) = v3;
        __n128 result = (unsigned char *)(*(uint64_t (**)(void))(**(void **)(a2 + 72) + 24))(*(void *)(a2 + 72));
        goto LABEL_7;
      }
      __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 16))(result);
    }
    *((void *)v4 + 9) = result;
LABEL_7:
    v4[80] = 1;
  }
  return result;
}

void sub_19230936C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 80)) {
    sub_19230A344(v1, v1 + 48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __destroy_helper_block_ea8_48c142_ZTSNSt3__18optionalINS_8functionIFvPKN4E5RT32ExecutionStreamOperationInternalENS_10unique_ptrINS2_9E5RTErrorENS_14default_deleteIS7_EEEEEEEEE(uint64_t result)
{
  if (*(unsigned char *)(result + 80))
  {
    uint64_t v1 = result + 48;
    __n128 result = *(void *)(result + 72);
    if (result == v1)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
    }
    else if (result)
    {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
  }
  return result;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::PreWireMemoryObjects(E5RT::ExecutionStreamOperationInternal **this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(this[1]) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "PreWireMemoryObjects");
    std::string::basic_string[abi:ne180100]<0>(v5, "Operation hasn't been encoded yet.");
    E5RT::Status::Status(v6, 2, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  uint64_t result = E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(this[1]);
  if ((result & 1) == 0)
  {
    int v3 = *(uint64_t (**)(void))(*(void *)this[19] + 16);
    return v3();
  }
  return result;
}

void sub_192309508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::EncodeOperation(E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  E5RT::ExecutionStreamOperationInternal::GetStreamId(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  uint64_t v2 = E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(*((const void **)this + 4));
  [v2 programHandle];
  uint64_t v36 = 0x2B23800800000000;
  long long v37 = 0u;
  long long v38 = 0u;
  kdebug_trace();

  int v3 = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                            + 1))
                    + 16);
  if (v3)
  {
    unsigned int v4 = 0;
    do
    {
      MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v3[5]);
      if (E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef))
      {
        int8x8_t v7 = E5RT::MemoryObject::Buffer(MemoryObjectRef);
        uint64_t v8 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v7);
      }
      else
      {
        uint64_t v9 = E5RT::MemoryObject::Surface(MemoryObjectRef);
        uint64_t v8 = E5RT::SurfaceObject::GetHandle<__IOSurface *>(v9);
      }
      uint64_t v5 = 24 * v4;
      *(void *)(*((void *)this + 21) + v5 + 8) = v8;
      ++v4;
      *(void *)(*((void *)this + 25) + v5) = v8;
      int v3 = (uint64_t **)*v3;
    }
    while (v3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  uint64_t v10 = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                              + 1))
                     + 16);
  if (v10)
  {
    unsigned int v11 = 0;
    do
    {
      int v12 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v10[5]);
      if (E5RT::MemoryObject::TryAsBuffer(v12))
      {
        uint64_t v13 = E5RT::MemoryObject::Buffer(v12);
        uint64_t v14 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v13);
      }
      else
      {
        uint64_t v15 = E5RT::MemoryObject::Surface(v12);
        uint64_t v14 = E5RT::SurfaceObject::GetHandle<__IOSurface *>(v15);
      }
      *(void *)(*((void *)this + 21) + 24 * v11 + 6136) = v14;
      *(void *)(*((void *)this + 25) + 24 * (v4 + v11++)) = v14;
      uint64_t v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  char v16 = *(void **)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                                     + 1))
                   + 16);
  if (v16)
  {
    uint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v22 = v16[2];
      int v23 = (std::__shared_weak_count *)v16[3];
      uint64_t v34 = v22;
      uint64_t v35 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(v22);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      uint64_t v19 = *((void *)this + 22) + v17;
      uint64_t v20 = *(void **)(v19 + 8);
      *(void *)(v19 + 8) = v24;
      id v21 = v24;

      *(void *)(*((void *)this + 22) + v17 + 24) = 0;
      char v16 = (void *)*v16;
      ++v18;
      v17 += 32;
    }
    while (v16);
  }
  else
  {
    int v18 = 0;
  }
  **((_DWORD **)this + 22) = v18;
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*((void *)this + 1), &v34);
  uint64_t v25 = v34;
  if (v34)
  {
    uint64_t v26 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v27 = E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(v25);
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    uint64_t v28 = *((void *)this + 22);
    int v29 = *(void **)(v28 + 2056);
    *(void *)(v28 + 2056) = v27;
    id v30 = v27;

    uint64_t v31 = *((void *)this + 22);
    *(void *)(v31 + 2072) = 0;
    *(_DWORD *)(v31 + 4) = 1;
  }
  StreamConfigOptions = (E5RT::ExecutionStreamConfigOptions *)E5RT::ExecutionStreamOperationInternal::GetStreamConfigOptions(*((E5RT::ExecutionStreamOperationInternal **)this + 1));
  if (E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions)) {
    *(unsigned char *)(*((void *)this + 21) + 12309) = 1;
  }
  uint64_t v33 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (E5RT::g_trace_analysis_level >= v36) {
    kdebug_trace();
  }
}

void sub_192309930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va2);
  _Unwind_Resume(a1);
}

void sub_192309958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_19230996C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_192309980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_192309994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1923099A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va1);
  _Unwind_Resume(a1);
}

void sub_1923099D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1923099EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_192309A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_192309A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::ResetOperation(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t result = E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(this[1]);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *, E5RT::ExecutionStreamOperationInternal *))(*(void *)this[19] + 24))(this[19], this[25]);
    *((_DWORD *)this[25] + 770) = 0;
  }
  *((unsigned char *)this[21] + 12309) = 0;
  return result;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::SetQualityOfService(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  *(_DWORD *)(a1 + 188) = a2;
  *(unsigned char *)(a1 + 192) = BYTE4(a2);
  if (BYTE4(a2))
  {
    uint64_t result = [MEMORY[0x1E4F4E080] aneRealTimeTaskQoS];
    if (v2 == result)
    {
LABEL_3:
      *(_DWORD *)(a1 + 184) = 2;
      return result;
    }
  }
  else
  {
    int v2 = [MEMORY[0x1E4F4E080] aneDefaultTaskQoS];
    uint64_t result = [MEMORY[0x1E4F4E080] aneRealTimeTaskQoS];
    if (v2 == result) {
      goto LABEL_3;
    }
  }
  uint64_t result = [MEMORY[0x1E4F4E080] aneUserInteractiveTaskQoS];
  if (v2 == result)
  {
    *(_DWORD *)(a1 + 184) = 3;
  }
  else
  {
    uint64_t result = [MEMORY[0x1E4F4E080] aneUserInitiatedTaskQoS];
    if (v2 == result)
    {
      *(_DWORD *)(a1 + 184) = 4;
    }
    else
    {
      uint64_t result = [MEMORY[0x1E4F4E080] aneDefaultTaskQoS];
      if (v2 == result
        || (uint64_t result = [MEMORY[0x1E4F4E080] aneUtilityTaskQoS], v2 == result)
        || (uint64_t result = [MEMORY[0x1E4F4E080] aneBackgroundTaskQoS], v2 != result))
      {
        *(_DWORD *)(a1 + 184) = 5;
      }
      else
      {
        *(_DWORD *)(a1 + 184) = 6;
      }
    }
  }
  return result;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs::GetQualityOfService(E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs *this)
{
  return *(void *)((char *)this + 188);
}

void ANEProgramRequestSharedEventsStruct::~ANEProgramRequestSharedEventsStruct(id *this)
{
}

void ANEProgramRequestSharedEventsStruct::ANEProgramRequestSharedEventsStruct(ANEProgramRequestSharedEventsStruct *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 65) = 0;
  *((void *)this + 69) = 0;
  *((void *)this + 73) = 0;
  *((void *)this + 77) = 0;
  *((void *)this + 81) = 0;
  *((void *)this + 85) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 93) = 0;
  *((void *)this + 97) = 0;
  *((void *)this + 101) = 0;
  *((void *)this + 105) = 0;
  *((void *)this + 109) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 117) = 0;
  *((void *)this + 121) = 0;
  *((void *)this + 125) = 0;
  *((void *)this + 129) = 0;
  *((void *)this + 133) = 0;
  *((void *)this + 137) = 0;
  *((void *)this + 141) = 0;
  *((void *)this + 145) = 0;
  *((void *)this + 149) = 0;
  *((void *)this + 153) = 0;
  *((void *)this + 157) = 0;
  *((void *)this + 161) = 0;
  *((void *)this + 165) = 0;
  *((void *)this + 169) = 0;
  *((void *)this + 173) = 0;
  *((void *)this + 177) = 0;
  *((void *)this + 181) = 0;
  *((void *)this + 185) = 0;
  *((void *)this + 189) = 0;
  *((void *)this + 193) = 0;
  *((void *)this + 197) = 0;
  *((void *)this + 201) = 0;
  *((void *)this + 205) = 0;
  *((void *)this + 209) = 0;
  *((void *)this + 213) = 0;
  *((void *)this + 217) = 0;
  *((void *)this + 221) = 0;
  *((void *)this + 225) = 0;
  *((void *)this + 229) = 0;
  *((void *)this + 233) = 0;
  *((void *)this + 237) = 0;
  *((void *)this + 241) = 0;
  *((void *)this + 245) = 0;
  *((void *)this + 249) = 0;
  *((void *)this + 253) = 0;
  *((void *)this + 257) = 0;
  *((void *)this + 261) = 0;
  *((void *)this + 265) = 0;
  *((void *)this + 269) = 0;
  *((void *)this + 273) = 0;
  *((void *)this + 277) = 0;
  *((void *)this + 281) = 0;
  *((void *)this + 285) = 0;
  *((void *)this + 289) = 0;
  *((void *)this + 293) = 0;
  *((void *)this + 297) = 0;
  *((void *)this + 301) = 0;
  *((void *)this + 305) = 0;
  *((void *)this + 309) = 0;
  *((void *)this + 313) = 0;
  *((void *)this + 317) = 0;
  *((void *)this + 321) = 0;
  *((void *)this + 325) = 0;
  *((void *)this + 329) = 0;
  *((void *)this + 333) = 0;
  *((void *)this + 337) = 0;
  *((void *)this + 341) = 0;
  *((void *)this + 345) = 0;
  *((void *)this + 349) = 0;
  *((void *)this + 353) = 0;
  *((void *)this + 357) = 0;
  *((void *)this + 361) = 0;
  *((void *)this + 365) = 0;
  *((void *)this + 369) = 0;
  *((void *)this + 373) = 0;
  *((void *)this + 377) = 0;
  *((void *)this + 381) = 0;
  *((void *)this + 385) = 0;
  *((void *)this + 389) = 0;
  *((void *)this + 393) = 0;
  *((void *)this + 397) = 0;
  *((void *)this + 401) = 0;
  *((void *)this + 405) = 0;
  *((void *)this + 409) = 0;
  *((void *)this + 413) = 0;
  *((void *)this + 417) = 0;
  *((void *)this + 421) = 0;
  *((void *)this + 425) = 0;
  *((void *)this + 429) = 0;
  *((void *)this + 433) = 0;
  *((void *)this + 437) = 0;
  *((void *)this + 441) = 0;
  *((void *)this + 445) = 0;
  *((void *)this + 449) = 0;
  *((void *)this + 453) = 0;
  *((void *)this + 457) = 0;
  *((void *)this + 461) = 0;
  *((void *)this + 465) = 0;
  *((void *)this + 469) = 0;
  *((void *)this + 473) = 0;
  *((void *)this + 477) = 0;
  *((void *)this + 481) = 0;
  *((void *)this + 485) = 0;
  *((void *)this + 489) = 0;
  *((void *)this + 493) = 0;
  *((void *)this + 497) = 0;
  *((void *)this + 501) = 0;
  *((void *)this + 505) = 0;
  *((void *)this + 509) = 0;
}

void sub_19230A1EC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "Detected ANE Inference overflow.", v1, 2u);
}

uint64_t sub_19230A230(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result = *(void *)(a1 + 72);
  if (result == a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  }
  else if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  *(void *)a5 = a3;
  *(_DWORD *)(a5 + 8) = a4;
  return result;
}

uint64_t sub_19230A2C8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_19230A300(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "Detected ANE Inference overflow during async execution.", v1, 2u);
}

uint64_t sub_19230A344(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 72);
  if (result == a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void E5RT::E5CompilerConfigOptions::~E5CompilerConfigOptions(E5RT::E5CompilerConfigOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::E5CompilerConfigOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

uint64_t E5RT::E5CompilerConfigOptions::SetBundleCacheLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    uint64_t v6 = 0;
    v7.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v7 = *(std::string *)a2;
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v4 = 0;
    uint64_t v6 = 0;
    v7.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_6:
  uint64_t v6 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *(**)(unsigned int, uint64_t, uint64_t, uint64_t, void *)))(*(void *)v4 + 24))(v4, "bundleCacheLocation<std::string>", 32, &v6);
  if (v6) {
    return (uint64_t)v6(0, (uint64_t)&v6, 0, 0, 0);
  }
  return result;
}

void sub_19230A560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerConfigOptions::SetBundleCacheAPFSPurgeable(E5RT::E5CompilerConfigOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "bundleCacheAPFSPurgeable<BOOL>", 30, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_19230A6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_19230A6F4(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::tuple<BOOL,std::string,std::unique_ptr<E5RT::ProgramLibrary>>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void E5RT::E5CompilerImpl::IsNewCompileRequired(uint64_t a1@<X0>, std::string::size_type a2@<X1>, E5RT::E5CompilerOptions *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  E5RT::E5CompilerImpl::IsNewCompileRequiredInternal(a3, a1, a2, (uint64_t)v11);
  *a4 = v11[0];
  uint64_t v9 = (std::string *)(a4 + 8);
  int v10 = SHIBYTE(v13);
  if (SHIBYTE(v13) < 0)
  {
    std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = __p;
    v9->__r_.__value_.__r.__words[2] = v13;
  }
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (v10 < 0) {
    operator delete((void *)__p);
  }

  std::mutex::unlock(v8);
}

void sub_19230A888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::tuple<BOOL,std::string,std::unique_ptr<E5RT::ProgramLibrary>>::~tuple((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_19230A8A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerImpl::PurgeE5BundlesForInputModel<MIL::IRProgram>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  E5RT::E5CompilerImpl::SaveMILHashIntoBundleCache(a1, a2, &v12);
  uint64_t v5 = *(E5RT::E5BundleCacheManager **)(a1 + 24);
  if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, v12.__pn_.__r_.__value_.__l.__data_, v12.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v12.__pn_;
  }
  E5RT::E5BundleCacheManager::PurgeBundlesForInputPath(v5, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::__string_view v7 = std::__fs::filesystem::path::__parent_path(&v12);
  std::string::size_type size = (const std::__fs::filesystem::path *)v7.__size_;
  if (v7.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v9 = (v7.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v9 = v7.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7.__size_;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_13;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7.__size_;
  p_dst = &__dst;
  if (v7.__size_) {
LABEL_13:
  }
    memmove(p_dst, v7.__data_, v7.__size_);
  *((unsigned char *)p_dst + v7.__size_) = 0;
  __p.__pn_ = __dst;
  E5RT::RemoveAll(&__p, size);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_18:
    operator delete(v12.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_16;
  }
  if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
LABEL_16:
  std::mutex::unlock(v4);
}

void sub_19230AA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v26);
  _Unwind_Resume(a1);
}

void E5RT::E5Compiler::E5Compiler(E5RT::E5Compiler *this, const E5RT::E5CompilerConfigOptions *a2)
{
  *(void *)this = &unk_1EE324608;
  *((void *)this + 1) = 0;
  operator new();
}

{
  *(void *)this = &unk_1EE324608;
  *((void *)this + 1) = 0;
  operator new();
}

void sub_19230AB14(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1032C40D076463ALL);
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_19230AB44(_Unwind_Exception *a1)
{
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_19230ABE0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1032C40D076463ALL);
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_19230AC10(_Unwind_Exception *a1)
{
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void E5RT::E5Compiler::~E5Compiler(E5RT::E5Compiler *this)
{
  *(void *)this = &unk_1EE324608;
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  *(void *)this = &unk_1EE324608;
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE324608;
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);

  JUMPOUT(0x192FF16B0);
}

void E5RT::E5Compiler::Compile(uint64_t a1@<X0>, std::string::size_type a2@<X1>, E5RT::E5CompilerOptions *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v7 + 72));
  E5RT::E5CompilerImpl::CompileInternal(v7, a2, a3, a4);

  std::mutex::unlock((std::mutex *)(v7 + 72));
}

void sub_19230AD94(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL E5RT::E5Compiler::IsNewCompileRequired(uint64_t a1, std::string::size_type a2, E5RT::E5CompilerOptions *a3)
{
  E5RT::E5CompilerImpl::IsNewCompileRequired(*(void *)(a1 + 8), a2, a3, v5);
  int v3 = v5[0];
  if (v7 < 0) {
    operator delete(__p);
  }
  return v3 != 0;
}

void E5RT::E5Compiler::PurgeE5BundlesForInputModel(uint64_t a1, std::string *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 72));
  E5RT::E5BundleCacheManager::PurgeBundlesForInputPath(*(E5RT::E5BundleCacheManager **)(v3 + 24), a2);

  std::mutex::unlock((std::mutex *)(v3 + 72));
}

void sub_19230AE64(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void E5RT::E5Compiler::PurgeE5BundlesForInputModel(uint64_t a1, uint64_t a2)
{
}

void sub_19230AE80()
{
  E5RT::E5CompilerConfigOptions::defaultE5CompilerConfigOptions((E5RT::E5CompilerConfigOptions *)v0);
}

void sub_19230AECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  E5RT::E5CompilerConfigOptions::~E5CompilerConfigOptions((E5RT::E5CompilerConfigOptions *)va);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerPriv::getBundleRootPath(E5RT::E5CompilerPriv *this@<X0>, std::string *a2@<X8>)
{
  uint64_t RootPath = E5RT::E5BundleCacheManager::GetRootPath(*(E5RT::E5BundleCacheManager **)(*((void *)this + 1) + 24));
  if (*(char *)(RootPath + 23) < 0)
  {
    uint64_t v5 = *(const std::string::value_type **)RootPath;
    std::string::size_type v6 = *(void *)(RootPath + 8);
    std::string::__init_copy_ctor_external(a2, v5, v6);
  }
  else
  {
    long long v4 = *(_OWORD *)RootPath;
    a2->__r_.__value_.__r.__words[2] = *(void *)(RootPath + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void E5RT::E5CompilerPriv::~E5CompilerPriv(E5RT::E5CompilerPriv *this)
{
  *(void *)this = &unk_1EE324608;
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE324608;
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);

  JUMPOUT(0x192FF16B0);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *a1 = *MEMORY[0x1E4FBA400];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x192FF1040](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](a1 + 52);
  return a1;
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA468] + 64;
  a1[52] = MEMORY[0x1E4FBA468] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  std::string::size_type v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x1E4FBA468] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x192FF1030](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x1E4FBA468] + 64;
  a1[52] = MEMORY[0x1E4FBA468] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  std::string::size_type v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x1E4FBA468] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x192FF1030](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_19230B24C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](v1);
  _Unwind_Resume(a1);
}

void sub_19230B290(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "E5CompilerImpl:: processInfo is nil.\n", v1, 2u);
}

uint64_t e5rt_program_library_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE3946D0;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_19230B3BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_library_get_build_info(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394950;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19230B4B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_library_get_segmentation_analytics(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3949D0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19230B5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_library_get_e5_bundle_path(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394A50;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19230B6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19230B6C8()
{
}

__n128 sub_19230B6DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394650;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19230B728(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394650;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19230B758(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    std::string __dst = (char *)operator new(0x30uLL);
    long long v5 = xmmword_192DAC000;
    strcpy(__dst, "Invalid Function Argument: path is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    std::string __dst = (char *)operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy(__dst, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_19230B9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230BA78(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_program_library_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z27e5rt_program_library_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_program_library_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_program_library_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230BAE8()
{
  return &unk_1EE3946B0;
}

void sub_19230BAF8()
{
}

void *sub_19230BB0C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE3946D0;
  result[1] = v3;
  return result;
}

uint64_t sub_19230BB54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3946D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19230BB80(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      MEMORY[0x192FF16B0](v2, 0x20C4093837F09);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      uint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19230BD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230BD7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_program_library_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z28e5rt_program_library_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_program_library_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_program_library_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230BDEC()
{
  return &unk_1EE394730;
}

void sub_19230BDFC()
{
}

__n128 sub_19230BE10(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394750;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19230BE5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394750;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19230BE8C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ProgramLibrary ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = *(void *)(ExportedFunctions + 24);
    }
    else
    {
      char v7 = operator new(0x38uLL);
      long long v8 = xmmword_192DAB900;
      strcpy((char *)v7, "Invalid Function Argument: num_functions is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19230C014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230C054(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z38e5rt_program_library_get_num_functionsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z38e5rt_program_library_get_num_functionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38e5rt_program_library_get_num_functionsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38e5rt_program_library_get_num_functionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230C0C4()
{
  return &unk_1EE3947B0;
}

void sub_19230C0D4()
{
}

__n128 sub_19230C0E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3947D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19230C13C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3947D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19230C174(void *a1)
{
  uint64_t v1 = (E5RT::ProgramLibrary **)a1[1];
  if (v1)
  {
    if (a1[2])
    {
      uint64_t ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(*v1);
      if (*(void *)(ExportedFunctions + 24) == a1[3])
      {
        uint64_t v4 = *(uint64_t **)(ExportedFunctions + 16);
        if (v4)
        {
          uint64_t v5 = 0;
          do
          {
            char v6 = v4 + 2;
            if (*((char *)v4 + 39) < 0) {
              char v6 = (void *)*v6;
            }
            *(void *)(a1[2] + v5) = v6;
            uint64_t v4 = (uint64_t *)*v4;
            v5 += 8;
          }
          while (v4);
        }
        return 0;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v10 = operator new(0x58uLL);
      long long v11 = xmmword_192DACCA0;
      strcpy((char *)v10, "Invalid Function Argument: num_functions does not match number of functions in library");
      char v9 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
      if (v9 < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v11) & 0x80000000) == 0) {
          return 1;
        }
      }
      else if ((SHIBYTE(v11) & 0x80000000) == 0)
      {
        return 1;
      }
      operator delete(v10);
      return 1;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v10 = operator new(0x38uLL);
    long long v11 = xmmword_192DA8900;
    strcpy((char *)v10, "Invalid Function Argument: function_names is NULL.");
    char v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v10);
    }
    return 1;
  }
  else
  {
    std::basic_string_view<_CharT, _Traits>::size_type v10 = operator new(0x30uLL);
    long long v11 = xmmword_192DA88D0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    char v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v10);
    }
    return 1;
  }
}

void sub_19230C3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230C440(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_program_library_get_function_namesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z39e5rt_program_library_get_function_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_program_library_get_function_namesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_program_library_get_function_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230C4B0()
{
  return &unk_1EE394830;
}

void sub_19230C4C0()
{
}

__n128 sub_19230C4D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE394850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19230C528(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19230C560(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (!v1)
  {
    std::string __dst = operator new(0x30uLL);
    long long v15 = xmmword_192DA88D0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    char v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_6;
  }
  unint64_t v3 = *(const void **)(a1 + 16);
  if (!v3)
  {
    std::string __dst = operator new(0x30uLL);
    long long v15 = xmmword_192DA88C0;
    strcpy((char *)__dst, "Invalid Function Argument: func_name is NULL.");
    char v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_6;
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (!v4)
  {
    std::string __dst = operator new(0x38uLL);
    long long v15 = xmmword_192DAB900;
    strcpy((char *)__dst, "Invalid Function Argument: metadata_dict is NULL.");
    char v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
LABEL_6:
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v15) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v15) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(__dst);
    return 1;
  }
  if (*v4)
  {
    std::string __dst = operator new(0x68uLL);
    long long v15 = xmmword_192DACCB0;
    strcpy((char *)__dst, "Invalid Function Argument: *metadata_dict is non NULL. Potential memory leak if overwritten! Bailing.");
    char v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_6;
  }
  uint64_t v6 = *v1;
  size_t v7 = strlen(*(const char **)(a1 + 16));
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = operator new(v10 + 1);
    *(void *)&long long v15 = v8;
    *((void *)&v15 + 1) = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    HIBYTE(v15) = v7;
    p_dst = &__dst;
    if (!v7) {
      goto LABEL_19;
    }
  }
  memmove(p_dst, v3, v8);
LABEL_19:
  *((unsigned char *)p_dst + v8) = 0;
  **(void **)(a1 + 24) = E5RT::ProgramLibrary::GetFunctionMetadata(v6, (uint64_t)&__dst);
  if (SHIBYTE(v15) < 0) {
    operator delete(__dst);
  }
  return 0;
}

void sub_19230C858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230C8B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_program_library_get_function_metadataE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z42e5rt_program_library_get_function_metadataE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_program_library_get_function_metadataE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_program_library_get_function_metadataE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230C920()
{
  return &unk_1EE3948B0;
}

void sub_19230C930()
{
}

__n128 sub_19230C944(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3948D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19230C998(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3948D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19230C9D0(void *a1)
{
  uint64_t v1 = (E5RT::ProgramLibrary **)a1[1];
  if (!v1)
  {
    std::string __dst = (char *)operator new(0x30uLL);
    long long v16 = xmmword_192DA88D0;
    strcpy(__dst, "Invalid Function Argument: handle is NULL.");
    char v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_24;
  }
  if (!a1[2])
  {
    std::string __dst = (char *)operator new(0x38uLL);
    long long v16 = xmmword_192DAB900;
    strcpy(__dst, "Invalid Function Argument: function_name is NULL.");
    char v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    goto LABEL_24;
  }
  if (!a1[3])
  {
    std::string __dst = (char *)operator new(0x38uLL);
    long long v16 = xmmword_192DA90B0;
    strcpy(__dst, "Invalid Function Argument: function_handle is NULL.");
    char v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
LABEL_24:
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_17;
  }
  uint64_t ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(*v1);
  uint64_t v4 = (const char *)a1[2];
  size_t v5 = strlen(v4);
  if (v5 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (char **)operator new(v8 + 1);
    *(void *)&long long v16 = v6;
    *((void *)&v16 + 1) = v9 | 0x8000000000000000;
    std::string __dst = (char *)p_dst;
    goto LABEL_11;
  }
  HIBYTE(v16) = v5;
  p_dst = &__dst;
  if (v5) {
LABEL_11:
  }
    memmove(p_dst, v4, v6);
  *((unsigned char *)p_dst + v6) = 0;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, (uint64_t)&__dst);
  uint64_t v11 = v10;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__dst);
    if (v11) {
LABEL_14:
    }
      operator new();
  }
  else if (v10)
  {
    goto LABEL_14;
  }
  std::string __dst = (char *)operator new(0x40uLL);
  long long v16 = xmmword_192DACCC0;
  strcpy(__dst, "Invalid Function Argument: function_name not found in library.");
  char v14 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      return 1;
    }
LABEL_20:
    operator delete(__dst);
    return 1;
  }
LABEL_17:
  if (SHIBYTE(v16) < 0) {
    goto LABEL_20;
  }
  return 1;
}

void sub_19230CE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230CF18(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_program_library_retain_program_functionE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z44e5rt_program_library_retain_program_functionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_program_library_retain_program_functionE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_program_library_retain_program_functionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230CF88()
{
  return &unk_1EE394930;
}

void sub_19230CF98()
{
}

__n128 sub_19230CFAC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394950;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19230CFF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394950;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19230D028(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ProgramLibraryImpl ****)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      if (*v3)
      {
        uint64_t v8 = operator new(0x68uLL);
        long long v9 = xmmword_192DACCD0;
        strcpy((char *)v8, "Invalid Function Argument: *build_info_dict is non NULL. Potential memory leak if overwritten! Bailing.");
        char v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v9) & 0x80000000) == 0) {
            return 1;
          }
        }
        else if ((SHIBYTE(v9) & 0x80000000) == 0)
        {
          return 1;
        }
        operator delete(v8);
        return 1;
      }
      else
      {
        BuildInfo = E5RT::ProgramLibrary::GetBuildInfo(*v1);
        uint64_t result = 0;
        **(void **)(a1 + 16) = BuildInfo;
      }
    }
    else
    {
      uint64_t v8 = operator new(0x38uLL);
      long long v9 = xmmword_192DA90B0;
      strcpy((char *)v8, "Invalid Function Argument: build_info_dict is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19230D280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230D2C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z35e5rt_program_library_get_build_infoE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z35e5rt_program_library_get_build_infoE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35e5rt_program_library_get_build_infoE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35e5rt_program_library_get_build_infoE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230D334()
{
  return &unk_1EE3949B0;
}

void sub_19230D344()
{
}

__n128 sub_19230D358(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3949D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19230D3A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3949D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19230D3D4(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ProgramLibraryImpl ****)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      if (*v3)
      {
        uint64_t v8 = operator new(0x68uLL);
        long long v9 = xmmword_192DACCB0;
        strcpy((char *)v8, "Invalid Function Argument: *metadata_dict is non NULL. Potential memory leak if overwritten! Bailing.");
        char v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v9) & 0x80000000) == 0) {
            return 1;
          }
        }
        else if ((SHIBYTE(v9) & 0x80000000) == 0)
        {
          return 1;
        }
        operator delete(v8);
        return 1;
      }
      else
      {
        SegmentationAnalytics = E5RT::ProgramLibrary::GetSegmentationAnalytics(*v1);
        uint64_t result = 0;
        **(void **)(a1 + 16) = SegmentationAnalytics;
      }
    }
    else
    {
      uint64_t v8 = operator new(0x38uLL);
      long long v9 = xmmword_192DAB900;
      strcpy((char *)v8, "Invalid Function Argument: metadata_dict is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19230D624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230D668(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_program_library_get_segmentation_analyticsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z47e5rt_program_library_get_segmentation_analyticsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_program_library_get_segmentation_analyticsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_program_library_get_segmentation_analyticsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230D6D8()
{
  return &unk_1EE394A30;
}

void sub_19230D6E8()
{
}

__n128 sub_19230D6FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394A50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19230D748(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394A50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19230D778(uint64_t a1, const E5RT::ProgramLibrary *a2)
{
  uint64_t v2 = *(E5RT_Private ***)(a1 + 8);
  if (v2)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t E5BundlePathFromProgramLibrary = E5RT_Private::GetE5BundlePathFromProgramLibrary(*v2, a2);
      uint64_t result = 0;
      if (*(char *)(E5BundlePathFromProgramLibrary + 23) < 0) {
        uint64_t E5BundlePathFromProgramLibrary = *(void *)E5BundlePathFromProgramLibrary;
      }
      **(void **)(a1 + 16) = E5BundlePathFromProgramLibrary;
    }
    else
    {
      uint64_t v8 = operator new(0x38uLL);
      long long v9 = xmmword_192DA8900;
      strcpy((char *)v8, "Invalid Function Argument: e5_bundle_path is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19230D910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19230D950(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_program_library_get_e5_bundle_pathE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z39e5rt_program_library_get_e5_bundle_pathE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_program_library_get_e5_bundle_pathE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_program_library_get_e5_bundle_pathE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230D9C0()
{
  return &unk_1EE394AB0;
}

void std::make_unique[abi:ne180100]<E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs,E5RT::Ops::AneInferenceOperation &,std::shared_ptr<AneInferenceOpT const>,unsigned long long &>()
{
}

void sub_19230DAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x192FF16B0](v9, 0x10E1C40BC68975BLL);
  _Unwind_Resume(a1);
}

void E5RT::Ops::AneInferenceOperation::~AneInferenceOperation(E5RT::Ops::AneInferenceOperation *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE326288;
  v4[0] = &unk_1EE394AD0;
  v4[1] = this;
  size_t v5 = v4;
  int v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  if (v2) {
    __assert_rtn("~AneInferenceOperation", "AneInferenceOperation.mm", 149, "ret == E5RT_ERROR_CODE_OK");
  }
  uint64_t v3 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t vars8;

  E5RT::Ops::AneInferenceOperation::~AneInferenceOperation(this);

  JUMPOUT(0x192FF16B0);
}

void sub_19230DC48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t E5RT::Ops::AneInferenceOperation::GetOpCode(E5RT::Ops::AneInferenceOperation *this)
{
  return 1;
}

uint64_t E5RT::Ops::AneInferenceOperation::ExecuteSync(E5RT::Ops::AneInferenceOperation *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 37) + 24))();
}

uint64_t E5RT::Ops::AneInferenceOperation::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 296);
  LOBYTE(v11[0]) = 0;
  char v13 = 0;
  if (*(unsigned char *)(a4 + 32))
  {
    uint64_t v8 = *(void *)(a4 + 24);
    if (v8)
    {
      if (v8 == a4)
      {
        std::__fs::filesystem::path v12 = v11;
        (*(void (**)(uint64_t, void *))(*(void *)a4 + 24))(a4, v11);
        goto LABEL_7;
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    }
    std::__fs::filesystem::path v12 = (void *)v8;
LABEL_7:
    char v13 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v7 + 32))(v7, a2, a3, v11);
  if (v13)
  {
    if (v12 == v11)
    {
      (*(void (**)(void *))(v11[0] + 32))(v11);
    }
    else if (v12)
    {
      (*(void (**)(void))(*v12 + 40))();
    }
  }
  unint64_t ActiveFutureValue = E5RT::AsyncEvent::GetActiveFutureValue(*(E5RT::AsyncEvent **)(a1 + 176));
  return E5RT::ExecutionStreamOperationInternal::UpdateLastCompletionValue(a1, ActiveFutureValue);
}

void sub_19230DE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_objecta, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    sub_19230E408(&a11, (uint64_t)exception_object, a2, (uint64_t)&exception_objecta);
    _Unwind_Resume(exception_objecta);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::AneInferenceOperation::PreWireMemoryObjects(E5RT::Ops::AneInferenceOperation *this)
{
  return kdebug_trace();
}

void sub_19230DF64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::AneInferenceOperation::EncodeOperation(E5RT::Ops::AneInferenceOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::EncodeOperation(this, a2, a3);
  uint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 37) + 48);

  return v4();
}

uint64_t E5RT::Ops::AneInferenceOperation::ResetOperation(E5RT::Ops::AneInferenceOperation *this)
{
  return kdebug_trace();
}

void sub_19230E088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::AneInferenceOperation::SetQualityOfService(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 296) + 64))();
}

uint64_t E5RT::Ops::AneInferenceOperation::BindDependentAsyncEvents(uint64_t a1, uint64_t *a2)
{
  E5RT::ExecutionStreamOperationInternal::BindDependentAsyncEvents(a1, a2);
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 296) + 80);

  return v3();
}

uint64_t E5RT::Ops::AneInferenceOperation::BindCompletionAsyncEvent(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(a1, &v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 296) + 88))(*(void *)(a1 + 296));
}

void sub_19230E1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t E5RT::Ops::AneInferenceOperation::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal *a1, uint64_t a2)
{
  return kdebug_trace();
}

void sub_19230E290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_19230E2A8()
{
}

void *sub_19230E2BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE394AD0;
  result[1] = v3;
  return result;
}

uint64_t sub_19230E304(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE394AD0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19230E330(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperationInternal **)(a1 + 8);
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(v1) == 2) {
    (*(void (**)(E5RT::ExecutionStreamOperationInternal *))(*(void *)v1 + 80))(v1);
  }
  return 0;
}

uint64_t sub_19230E38C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT3Ops21AneInferenceOperationD1EvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4E5RT3Ops21AneInferenceOperationD1EvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT3Ops21AneInferenceOperationD1EvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT3Ops21AneInferenceOperationD1EvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19230E3FC()
{
  return &unk_1EE394B30;
}

uint64_t sub_19230E408(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = a1[3];
  if ((void *)result == a1)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  }
  else if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

uint64_t E5RT::Ops::BarrierOperation::Impl::EncodeOperation(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t result = E5RT::ExecutionStreamOperationInternal::GetOpState(*this);
  if (result != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v3, "Operation hasn't been prepared for encode.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_19230E558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::Ops::BarrierOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t result = E5RT::ExecutionStreamOperationInternal::GetOpState(*this);
  if (result != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v3, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_19230E680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::BarrierOperation::BarrierOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2)
{
  memset(v21, 0, 32);
  LODWORD(v21[4]) = 1065353216;
  *(_OWORD *)int v18 = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  int v20 = 1065353216;
  *(_OWORD *)long long v15 = 0u;
  *(_OWORD *)std::__fs::filesystem::path __p = 0u;
  int v17 = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, (uint64_t)v21, (uint64_t)v18, (uint64_t)v15);
  unint64_t v3 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        uint64_t v4 = (void **)*v3;
        long long v5 = (std::__shared_weak_count *)v3[6];
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        if (*((char *)v3 + 39) < 0) {
          break;
        }
        operator delete(v3);
        unint64_t v3 = v4;
        if (!v4) {
          goto LABEL_9;
        }
      }
      operator delete(v3[2]);
      operator delete(v3);
      unint64_t v3 = v4;
    }
    while (v4);
  }
LABEL_9:
  uint64_t v6 = v15[0];
  v15[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v19[0];
  if (v19[0])
  {
    do
    {
      while (1)
      {
        uint64_t v8 = (void **)*v7;
        uint64_t v9 = (std::__shared_weak_count *)v7[6];
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        if (*((char *)v7 + 39) < 0) {
          break;
        }
        operator delete(v7);
        uint64_t v7 = v8;
        if (!v8) {
          goto LABEL_19;
        }
      }
      operator delete(v7[2]);
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
LABEL_19:
  uint64_t v10 = v18[0];
  v18[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (void **)v21[2];
  if (v21[2])
  {
    do
    {
      while (1)
      {
        std::__fs::filesystem::path v12 = (void **)*v11;
        char v13 = (std::__shared_weak_count *)v11[6];
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        if (*((char *)v11 + 39) < 0) {
          break;
        }
        operator delete(v11);
        uint64_t v11 = v12;
        if (!v12) {
          goto LABEL_29;
        }
      }
      operator delete(v11[2]);
      operator delete(v11);
      uint64_t v11 = v12;
    }
    while (v12);
  }
LABEL_29:
  uint64_t v14 = v21[0];
  v21[0] = 0;
  if (v14) {
    operator delete(v14);
  }
  *(void *)a1 = &unk_1EE326078;
  *((void *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  v21[0] = (void *)0x2B2381C000000000;
  memset(&v21[1], 0, 32);
  kdebug_trace();
  operator new();
}

void sub_19230EA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  uint64_t v15 = *((void *)v13 + 37);
  *((void *)v13 + 37) = 0;
  if (v15) {
    MEMORY[0x192FF16B0](v15, 0x20C4093837F09);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v13);
  _Unwind_Resume(a1);
}

void sub_19230EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void E5RT::Ops::BarrierOperation::~BarrierOperation(E5RT::Ops::BarrierOperation *this)
{
  *(void *)this = &unk_1EE326078;
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2) {
    MEMORY[0x192FF16B0](v2, 0x20C4093837F09);
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE326078;
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2) {
    MEMORY[0x192FF16B0](v2, 0x20C4093837F09);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::BarrierOperation::GetOpCode(E5RT::Ops::BarrierOperation *this)
{
  return 9;
}

uint64_t E5RT::Ops::BarrierOperation::PrepareOpForEncode(E5RT::Ops::BarrierOperation *this)
{
  return kdebug_trace();
}

void sub_19230EBFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BarrierOperation::EncodeOperation(E5RT::ExecutionStreamOperationInternal ***this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  return kdebug_trace();
}

void sub_19230ECB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BarrierOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  return kdebug_trace();
}

void sub_19230ED58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::CastOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  if (**(_DWORD **)(a1 + 8) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op not yet supported on non-CPU devices.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(exception, v58, v55);
  }
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (*(void *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    uint64_t v50 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "InOut ports are not supported by Cast op yet.");
    E5RT::Status::Status(v55, 1, v57);
    E5RT::E5RTError::E5RTError(v50, v58, v55);
  }
  if (*(void *)(InputPorts + 24) != 1 || *(void *)(OutputPorts + 24) != 1)
  {
    uint64_t v48 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op supports only single input and single output.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(v48, v58, v55);
  }
  uint64_t v7 = (void *)(InputPorts + 16);
  uint64_t v8 = v7;
  while (1)
  {
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      break;
    }
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v8[5]);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      uint64_t v10 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v57, "Input surface ports aren't supported with cast operation yet.");
      E5RT::Status::Status(v55, 2, v57);
      E5RT::E5RTError::E5RTError(v10, v58, v55);
    }
  }
  uint64_t v11 = (void *)(OutputPorts + 16);
  std::__fs::filesystem::path v12 = v11;
  while (1)
  {
    std::__fs::filesystem::path v12 = (void *)*v12;
    if (!v12) {
      break;
    }
    char v13 = (E5RT::IOPortImpl **)v12[5];
    if (!v13)
    {
      v45 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v57, "Invalid output port.");
      E5RT::Status::Status(v55, 1, v57);
      E5RT::E5RTError::E5RTError(v45, v58, v55);
    }
    uint64_t v14 = (void *)E5RT::IOPort::GetPortDescriptorRef(v13);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v14))
    {
      uint64_t v15 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v57, "Output surface ports aren't supported with cast operation yet.");
      E5RT::Status::Status(v55, 2, v57);
      E5RT::E5RTError::E5RTError(v15, v58, v55);
    }
  }
  uint64_t v16 = *v7;
  uint64_t v17 = *v11;
  int IsDynamic = E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v16 + 40));
  if (IsDynamic != E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v17 + 40)))
  {
    long long v51 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op requires input & output to be both static or both dynamic.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(v51, v58, v55);
  }
  uint64_t v19 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v16 + 40));
  int v20 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v19);
  id v21 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v17 + 40));
  uint64_t v22 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v21);
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v20);
  uint64_t v24 = E5RT::TensorDescriptor::GetTensorShape(v22);
  size_t v25 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v25 != *(void *)(v24 + 8) - *(void *)v24 || memcmp(*(const void **)TensorShape, *(const void **)v24, v25))
  {
    uint64_t v52 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op does not support re-shaping tensors.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(v52, v58, v55);
  }
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v20);
  int NumComponents = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
  uint64_t v28 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v22);
  if (NumComponents != E5RT::TensorDataType::GetNumComponents(v28))
  {
    uint64_t v53 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v57, "Cast op requires input and output to have same number of components.");
    E5RT::Status::Status(v55, 2, v57);
    E5RT::E5RTError::E5RTError(v53, v58, v55);
  }
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v31 = *(void *)(v29 + 8);
  uint64_t v30 = *(void *)(v29 + 16);
  if (v30 != v31)
  {
    if ((v30 - v31) >> 3 != E5RT::TensorDescriptor::GetRank(v20))
    {
      uint64_t v54 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v58, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v57, "Output alignments specified in E5 does not match input rank.");
      E5RT::Status::Status(v55, 2, v57);
      E5RT::E5RTError::E5RTError(v54, v58, v55);
    }
    TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(v22);
    uint64_t v33 = (void *)E5RT::TensorDescriptor::GetTensorShape(v22);
    unint64_t Rank = E5RT::TensorDescriptor::GetRank(v22);
    if (Rank && *(void *)*TensorStrides != 0x7FFFFFFFFFFFFFFFLL)
    {
      E5RT::TensorDescriptor::GetTensorDataType(v22, (E5RT::TensorDataType *)v58);
      unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v58);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v58);
      memset(v58, 0, sizeof(v58));
      if (Rank >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = operator new(8 * Rank);
      bzero(v36, 8 * Rank);
      unint64_t v37 = ElementSize;
      uint64_t v38 = *v33 - 8;
      uint64_t v39 = *TensorStrides - 8;
      uint64_t v40 = *(void *)(v29 + 8) - 8;
      do
      {
        unint64_t v41 = *(void *)(v40 + 8 * Rank);
        if (!v41)
        {
          int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v46, "Invalid argument.");
          __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v42 = (v37 + v41 - 1) / v41 * v41;
        *((void *)v36 + Rank - 1) = v42;
        if (v42 != *(void *)(v39 + 8 * Rank))
        {
          uint64_t v47 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v57, "Impl");
          std::string::basic_string[abi:ne180100]<0>(v55, "Output alignment specified in E5 does not match with output tensor descriptor.");
          E5RT::Status::Status(v56, 2, v55);
          E5RT::E5RTError::E5RTError(v47, v57, v56);
        }
        uint64_t v43 = *(void *)(v38 + 8 * Rank--);
        unint64_t v37 = v43 * v42;
      }
      while ((uint64_t)(Rank + 1) > 1);
      operator delete(v36);
    }
  }
  return a1;
}

void sub_19230F574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&__p);
  uint64_t v29 = *(std::__shared_weak_count **)(v27 + 16);
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::PerformDataFormatChange(E5RT::Ops *this, const E5RT::TensorDescriptor *a2, const E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, E5RT::BufferObject *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  uint64_t v10 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<float>(v10))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378650;
    uint64_t v26 = E5RT::ElementwiseOpCast<float,float>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<float,float>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v10))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3780D0;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIDF16_fEEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_fEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned char>(v10))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378910;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned char,float>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned char,float>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<signed char>(v10))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378390;
    uint64_t v26 = E5RT::ElementwiseOpCast<signed char,float>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<signed char,float>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned int>(v10))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378E90;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned int,float>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned int,float>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<int>(v10))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378BD0;
    uint64_t v26 = E5RT::ElementwiseOpCast<int,float>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<int,float>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned short>(v10))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE379410;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned short,float>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned short,float>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<float>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<short>(v10))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE379150;
    uint64_t v26 = E5RT::ElementwiseOpCast<short,float>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<short,float>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  uint64_t v12 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  uint64_t v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12) && E5RT::TensorDataType::IsType<float>(v13))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3785A0;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIfDF16_EEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIfDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v13))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378020;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIDF16_DF16_EEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_DF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12) && E5RT::TensorDataType::IsType<unsigned char>(v13))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378860;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIhDF16_EEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIhDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12) && E5RT::TensorDataType::IsType<signed char>(v13))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3782E0;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIaDF16_EEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIaDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12) && E5RT::TensorDataType::IsType<unsigned int>(v13))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378DE0;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIjDF16_EEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIjDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12) && E5RT::TensorDataType::IsType<int>(v13))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378B20;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIiDF16_EEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIiDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12) && E5RT::TensorDataType::IsType<unsigned short>(v13))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE379360;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastItDF16_EEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationItDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12) && E5RT::TensorDataType::IsType<short>(v13))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3790A0;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIsDF16_EEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIsDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  uint64_t v14 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  uint64_t v15 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<unsigned char>(v14) && E5RT::TensorDataType::IsType<float>(v15))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3786A8;
    uint64_t v26 = E5RT::ElementwiseOpCast<float,unsigned char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<float,unsigned char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned char>(v14) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v15))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378128;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIDF16_hEEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_hEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned char>(v14) && E5RT::TensorDataType::IsType<unsigned char>(v15))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378968;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned char,unsigned char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned char,unsigned char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned char>(v14) && E5RT::TensorDataType::IsType<signed char>(v15))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3783E8;
    uint64_t v26 = E5RT::ElementwiseOpCast<signed char,unsigned char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<signed char,unsigned char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned char>(v14) && E5RT::TensorDataType::IsType<unsigned int>(v15))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378EE8;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned int,unsigned char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned int,unsigned char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned char>(v14) && E5RT::TensorDataType::IsType<int>(v15))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378C28;
    uint64_t v26 = E5RT::ElementwiseOpCast<int,unsigned char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<int,unsigned char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned char>(v14) && E5RT::TensorDataType::IsType<unsigned short>(v15))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE379468;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned short,unsigned char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned short,unsigned char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned char>(v14) && E5RT::TensorDataType::IsType<short>(v15))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3791A8;
    uint64_t v26 = E5RT::ElementwiseOpCast<short,unsigned char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<short,unsigned char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  uint64_t v16 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  uint64_t v17 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<signed char>(v16) && E5RT::TensorDataType::IsType<float>(v17))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3785F8;
    uint64_t v26 = E5RT::ElementwiseOpCast<float,signed char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<float,signed char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<signed char>(v16) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v17))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378078;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIDF16_aEEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_aEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<signed char>(v16) && E5RT::TensorDataType::IsType<unsigned char>(v17))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3788B8;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned char,signed char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned char,signed char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<signed char>(v16) && E5RT::TensorDataType::IsType<signed char>(v17))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378338;
    uint64_t v26 = E5RT::ElementwiseOpCast<signed char,signed char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<signed char,signed char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<signed char>(v16) && E5RT::TensorDataType::IsType<unsigned int>(v17))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378E38;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned int,signed char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned int,signed char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<signed char>(v16) && E5RT::TensorDataType::IsType<int>(v17))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378B78;
    uint64_t v26 = E5RT::ElementwiseOpCast<int,signed char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<int,signed char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<signed char>(v16) && E5RT::TensorDataType::IsType<unsigned short>(v17))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3793B8;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned short,signed char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned short,signed char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<signed char>(v16) && E5RT::TensorDataType::IsType<short>(v17))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3790F8;
    uint64_t v26 = E5RT::ElementwiseOpCast<short,signed char>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<short,signed char>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  uint64_t v18 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  uint64_t v19 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<unsigned int>(v18) && E5RT::TensorDataType::IsType<float>(v19))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378758;
    uint64_t v26 = E5RT::ElementwiseOpCast<float,unsigned int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<float,unsigned int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned int>(v18) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v19))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3781D8;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIDF16_jEEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_jEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned int>(v18) && E5RT::TensorDataType::IsType<unsigned char>(v19))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378A18;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned char,unsigned int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned char,unsigned int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned int>(v18) && E5RT::TensorDataType::IsType<signed char>(v19))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378498;
    uint64_t v26 = E5RT::ElementwiseOpCast<signed char,unsigned int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<signed char,unsigned int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned int>(v18) && E5RT::TensorDataType::IsType<unsigned int>(v19))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378F98;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned int,unsigned int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned int,unsigned int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned int>(v18) && E5RT::TensorDataType::IsType<int>(v19))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378CD8;
    uint64_t v26 = E5RT::ElementwiseOpCast<int,unsigned int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<int,unsigned int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned int>(v18) && E5RT::TensorDataType::IsType<unsigned short>(v19))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE379518;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned short,unsigned int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned short,unsigned int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<unsigned int>(v18) && E5RT::TensorDataType::IsType<short>(v19))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE379258;
    uint64_t v26 = E5RT::ElementwiseOpCast<short,unsigned int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<short,unsigned int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  uint64_t v20 = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  uint64_t v21 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<int>(v20) && E5RT::TensorDataType::IsType<float>(v21))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378700;
    uint64_t v26 = E5RT::ElementwiseOpCast<float,int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<float,int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<int>(v20) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v21))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378180;
    uint64_t v26 = _ZN4E5RT17ElementwiseOpCastIDF16_iEEvPT_PKT0_m;
    uint64_t v27 = (void **)&v25;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_iEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<int>(v20) && E5RT::TensorDataType::IsType<unsigned char>(v21))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3789C0;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned char,int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned char,int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<int>(v20) && E5RT::TensorDataType::IsType<signed char>(v21))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378440;
    uint64_t v26 = E5RT::ElementwiseOpCast<signed char,int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<signed char,int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<int>(v20) && E5RT::TensorDataType::IsType<unsigned int>(v21))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378F40;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned int,int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned int,int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<int>(v20) && E5RT::TensorDataType::IsType<int>(v21))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE378C80;
    uint64_t v26 = E5RT::ElementwiseOpCast<int,int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<int,int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<int>(v20) && E5RT::TensorDataType::IsType<unsigned short>(v21))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE3794C0;
    uint64_t v26 = E5RT::ElementwiseOpCast<unsigned short,int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<unsigned short,int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  if (E5RT::TensorDataType::IsType<int>(v20) && E5RT::TensorDataType::IsType<short>(v21))
  {
    size_t v25 = (uint64_t (**)(void **))&unk_1EE379200;
    uint64_t v26 = E5RT::ElementwiseOpCast<short,int>;
    uint64_t v27 = (void **)&v25;
    E5RT::ElementwiseOperationImplementation<short,int>(this, a2, a3, a4, (uint64_t)&v25);
    uint64_t result = (uint64_t)v27;
    if (v27 != (void **)&v25)
    {
      if (!v27) {
        return result;
      }
      return (*((uint64_t (**)(void))*v27 + 5))();
    }
    return v25[4]((void **)&v25);
  }
  uint64_t result = sub_192312430(this, a2, a3, a4);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_192312BB4(this, a2, a3, a4);
    if ((result & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v25, "PerformDataFormatChange");
      std::string::basic_string[abi:ne180100]<0>(v23, "Unsupported data format change.");
      E5RT::Status::Status(v24, 2, v23);
      E5RT::E5RTError::E5RTError(exception, &v25, v24);
    }
  }
  return result;
}

void sub_192311FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_1923123A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(unsigned short *,float const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923123B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(int *,float const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923123CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(unsigned int *,float const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923123E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(signed char *,float const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923123F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(unsigned char *,float const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192312408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _ZNSt3__18functionIFvPDF16_PKfmEED1Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19231241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(float *,float const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_192312430(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  uint64_t v9 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<float>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE378808;
    uint64_t v12 = E5RT::ElementwiseOpCast<float,unsigned short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<float,unsigned short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE378288;
    uint64_t v12 = _ZN4E5RT17ElementwiseOpCastIDF16_tEEvPT_PKT0_m;
    uint64_t v13 = (void **)&v11;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_tEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef)
    && E5RT::TensorDataType::IsType<unsigned char>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE378AC8;
    uint64_t v12 = E5RT::ElementwiseOpCast<unsigned char,unsigned short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<unsigned char,unsigned short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<signed char>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE378548;
    uint64_t v12 = E5RT::ElementwiseOpCast<signed char,unsigned short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<signed char,unsigned short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned int>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE379048;
    uint64_t v12 = E5RT::ElementwiseOpCast<unsigned int,unsigned short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<unsigned int,unsigned short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<int>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE378D88;
    uint64_t v12 = E5RT::ElementwiseOpCast<int,unsigned short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<int,unsigned short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef)
    && E5RT::TensorDataType::IsType<unsigned short>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE3795C8;
    uint64_t v12 = E5RT::ElementwiseOpCast<unsigned short,unsigned short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<unsigned short,unsigned short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  BOOL result = E5RT::TensorDataType::IsType<unsigned short>(TensorDataTypeRef);
  if (result)
  {
    BOOL result = E5RT::TensorDataType::IsType<short>(v9);
    if (result)
    {
      uint64_t v11 = (void (**)(void **))&unk_1EE379308;
      uint64_t v12 = E5RT::ElementwiseOpCast<short,unsigned short>;
      uint64_t v13 = (void **)&v11;
      E5RT::ElementwiseOperationImplementation<short,unsigned short>(a1, a2, a3, a4, (uint64_t)&v11);
      if (v13 != (void **)&v11)
      {
        if (v13) {
LABEL_40:
        }
          (*((void (**)(void))*v13 + 5))();
        return 1;
      }
LABEL_41:
      v11[4]((void **)&v11);
      return 1;
    }
  }
  return result;
}

void sub_192312B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(short *,unsigned short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192312B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(unsigned short *,unsigned short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192312B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(int *,unsigned short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192312B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(unsigned int *,unsigned short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192312B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(signed char *,unsigned short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192312B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(unsigned char *,unsigned short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192312B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _ZNSt3__18functionIFvPDF16_PKtmEED1Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192312BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(float *,unsigned short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_192312BB4(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  uint64_t v9 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<float>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE3787B0;
    uint64_t v12 = E5RT::ElementwiseOpCast<float,short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<float,short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE378230;
    uint64_t v12 = _ZN4E5RT17ElementwiseOpCastIDF16_sEEvPT_PKT0_m;
    uint64_t v13 = (void **)&v11;
    _ZN4E5RT34ElementwiseOperationImplementationIDF16_sEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned char>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE378A70;
    uint64_t v12 = E5RT::ElementwiseOpCast<unsigned char,short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<unsigned char,short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<signed char>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE3784F0;
    uint64_t v12 = E5RT::ElementwiseOpCast<signed char,short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<signed char,short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned int>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE378FF0;
    uint64_t v12 = E5RT::ElementwiseOpCast<unsigned int,short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<unsigned int,short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<int>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE378D30;
    uint64_t v12 = E5RT::ElementwiseOpCast<int,short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<int,short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  if (E5RT::TensorDataType::IsType<short>(TensorDataTypeRef) && E5RT::TensorDataType::IsType<unsigned short>(v9))
  {
    uint64_t v11 = (void (**)(void **))&unk_1EE379570;
    uint64_t v12 = E5RT::ElementwiseOpCast<unsigned short,short>;
    uint64_t v13 = (void **)&v11;
    E5RT::ElementwiseOperationImplementation<unsigned short,short>(a1, a2, a3, a4, (uint64_t)&v11);
    if (v13 != (void **)&v11)
    {
      if (v13) {
        goto LABEL_40;
      }
      return 1;
    }
    goto LABEL_41;
  }
  BOOL result = E5RT::TensorDataType::IsType<short>(TensorDataTypeRef);
  if (result)
  {
    BOOL result = E5RT::TensorDataType::IsType<short>(v9);
    if (result)
    {
      uint64_t v11 = (void (**)(void **))&unk_1EE3792B0;
      uint64_t v12 = E5RT::ElementwiseOpCast<short,short>;
      uint64_t v13 = (void **)&v11;
      E5RT::ElementwiseOperationImplementation<short,short>(a1, a2, a3, a4, (uint64_t)&v11);
      if (v13 != (void **)&v11)
      {
        if (v13) {
LABEL_40:
        }
          (*((void (**)(void))*v13 + 5))();
        return 1;
      }
LABEL_41:
      v11[4]((void **)&v11);
      return 1;
    }
  }
  return result;
}

void sub_192313298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(short *,short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923132AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(unsigned short *,short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923132C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(int *,short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923132D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(unsigned int *,short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923132E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(signed char *,short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923132FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(unsigned char *,short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192313310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _ZNSt3__18functionIFvPDF16_PKsmEED1Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192313324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(float *,short const*,unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::CastOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v53, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v56, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v48, 2, v56);
    E5RT::E5RTError::E5RTError(exception, &v53, v48);
  }
  uint64_t v53 = 0x2B23808C00000000;
  long long v54 = 0u;
  long long v55 = 0u;
  kdebug_trace();
  uint64_t v2 = *(void *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16);
  uint64_t v4 = *(E5RT::IOPortImpl ***)(v2 + 40);
  unint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
  long long v51 = v4;
  uint64_t v52 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this) + 16);
  uint64_t v7 = *(E5RT::IOPort **)(v5 + 40);
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 48);
  uint64_t v49 = v7;
  uint64_t v50 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v4);
  uint64_t v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  if ((E5RT::TensorDescriptor::HasKnownShape(v9) & 1) == 0)
  {
    unint64_t v41 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v56, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v48, "Cast op requires the input tensor descriptor to be fully known.");
    E5RT::Status::Status(&v47, 2, v48);
    E5RT::E5RTError::E5RTError(v41, v56, &v47);
  }
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v4);
  uint64_t v11 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(MemoryObjectRef);
  uint64_t v12 = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v7);
  uint64_t v13 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v12);
  if (!E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v7))
  {
    uint64_t v15 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v7);
    uint64_t v17 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v15);
    goto LABEL_46;
  }
  if (v7) {
  else
  }
    uint64_t v14 = 0;
  v48[0] = 0;
  v48[1] = 0;
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v9);
  uint64_t v19 = E5RT::TensorDescriptor::GetTensorShape(v13);
  size_t v20 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v20 != *(void *)(v19 + 8) - *(void *)v19 || memcmp(*(const void **)TensorShape, *(const void **)v19, v20))
  {
    uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v13);
    uint64_t v22 = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v9);
    E5RT::Ops::CastOperation::Impl::CreateOutputDescFromInput(TensorDataTypeRef, (uint64_t)this, v22, v56);
  }
  E5RT::IOPort::GetPortDescriptor(v7, v56);
  long long v38 = v56[0];
  if (*((void *)&v56[0] + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v56[0] + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v39 = (std::__shared_weak_count *)*((void *)&v56[0] + 1);
    *(_OWORD *)uint64_t v48 = v38;
    if (*((void *)&v56[0] + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v56[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  else
  {
    v48[0] = *(E5RT::TensorDescriptor **)&v56[0];
    v48[1] = 0;
  }
  long long v47 = 0uLL;
  E5RT::IOPort::GetMemoryObject(v49, v56);
  long long v23 = v56[0];
  if (!*((void *)&v56[0] + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v56[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((void)v23) {
      goto LABEL_18;
    }
LABEL_25:
    uint64_t v27 = v48[0];
LABEL_26:
    E5RT::TensorDescriptor::AllocateMemory((uint64_t)v27, 0, 1uLL);
  }
  (*(void (**)(void))(**((void **)&v23 + 1) + 16))(*((void *)&v23 + 1));
  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
  if (!(void)v23) {
    goto LABEL_25;
  }
LABEL_18:
  uint64_t v24 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v49);
  size_t v25 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v24);
  unint64_t Size = E5RT::BufferObject::GetSize(v25);
  uint64_t v27 = v48[0];
  if (Size < E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)v48[0])) {
    goto LABEL_26;
  }
  char IsBoundMemoryObjectInternal = E5RT::IOPortPriv::IsBoundMemoryObjectInternal(v14);
  E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v14, v56);
  long long v29 = v56[0];
  if (*((void *)&v56[0] + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v56[0] + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v47 = v29;
  uint64_t v30 = (std::__shared_weak_count *)*((void *)&v56[0] + 1);
  if (*((void *)&v56[0] + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v56[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  E5RT::IOPortPriv::LockPort((E5RT::IOPortPriv *)v14, 0);
  uint64_t v45 = 0;
  int v46 = 0;
  E5RT::IOPortPriv::BindMemoryObject((uint64_t)v14, (uint64_t)&v45, 0);
  uint64_t v31 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v43 = v48[0];
  uint64_t v44 = v48[1];
  if (v48[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v48[1] + 1, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v14, (uint64_t *)&v43);
  size_t v32 = (std::__shared_weak_count *)v44;
  if (v44 && !atomic_fetch_add((atomic_ullong *volatile)v44 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  long long v42 = v47;
  if (*((void *)&v47 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  E5RT::IOPortPriv::BindMemoryObject((uint64_t)v14, (uint64_t)&v42, IsBoundMemoryObjectInternal);
  uint64_t v33 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  E5RT::IOPortPriv::LockPort((E5RT::IOPortPriv *)v14, 1);
  uint64_t v34 = (std::__shared_weak_count *)*((void *)&v47 + 1);
  uint64_t v13 = v48[0];
  uint64_t v17 = (const E5RT::TensorDescriptor *)v47;
  if (*((void *)&v47 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  uint64_t v35 = (std::__shared_weak_count *)v48[1];
  if (v48[1] && !atomic_fetch_add((atomic_ullong *volatile)v48[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_46:
  E5RT::Ops::PerformDataFormatChange(v9, v11, v13, v17, v16);
  uint64_t v36 = v50;
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  unint64_t v37 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  if (E5RT::g_trace_analysis_level >= v53) {
    kdebug_trace();
  }
}

void sub_192313B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

void E5RT::Ops::CastOperation::Impl::CreateOutputDescFromInput(E5RT::TensorDataType::Impl **this@<X2>, uint64_t a2@<X0>, uint64_t *a3@<X1>, void *a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 8);
  *a4 = 0;
  a4[1] = 0;
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v8 = *(uint64_t **)(v7 + 16);
  uint64_t v10 = (char *)v8 - v9;
  if (v8 == (uint64_t *)v9) {
    E5RT::TensorDescriptor::CreateTensorDesc((int)a3, this);
  }
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  std::__fs::filesystem::path __p = 0;
  int64_t v13 = v11 - v12;
  if (v11 == v12)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v10 - 8;
    if ((unint64_t)(v10 - 8) < 0x18)
    {
LABEL_5:
      uint64_t v16 = v14;
      uint64_t v17 = (uint64_t *)v9;
      goto LABEL_11;
    }
  }
  else
  {
    if (v13 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v11 - v12);
    std::__fs::filesystem::path __p = v14;
    uint64_t v27 = &v14[8 * (v13 >> 3)];
    bzero(v14, v13);
    uint64_t v26 = &v14[v13];
    uint64_t v15 = v10 - 8;
    if ((unint64_t)(v10 - 8) < 0x18) {
      goto LABEL_5;
    }
  }
  uint64_t v18 = ((unint64_t)v15 >> 3) + 1;
  uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v16 = &v14[v19];
  uint64_t v17 = (uint64_t *)(v9 + v19);
  size_t v20 = (long long *)(v9 + 16);
  uint64_t v21 = v14 + 16;
  uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v23 = *v20;
    *(v21 - 1) = *(v20 - 1);
    _OWORD *v21 = v23;
    v20 += 2;
    v21 += 2;
    v22 -= 4;
  }
  while (v22);
  if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
LABEL_12:
  }
    E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignments(a3, &__p, this);
  do
  {
LABEL_11:
    uint64_t v24 = *v17++;
    *(void *)uint64_t v16 = v24;
    v16 += 8;
  }
  while (v17 != v8);
  goto LABEL_12;
}

void sub_192313F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::operator()((uint64_t)__p);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v11);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void E5RT::Ops::CastOperation::Impl::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*a1) != 2)
  {
    uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
    if (*(void *)(a2 + 24) == InputPorts[3])
    {
      uint64_t v5 = *(void *)(a2 + 16);
      uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v5 + 16);
      if (v6)
      {
        PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v6[5]);
        if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
        {
          uint64_t v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)(v5 + 40));
          uint64_t v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
          unint64_t Rank = E5RT::TensorDescriptor::GetRank(v8);
          if (E5RT::TensorDescriptor::GetRank(v9) == Rank)
          {
            uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v8);
            uint64_t v12 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v9);
            if (!E5RT::operator!=(TensorDataTypeRef, v12))
            {
              uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v8);
              uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*a1);
              uint64_t v15 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(void *)(OutputPorts + 16) + 40));
              uint64_t v16 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v15);
              uint64_t v17 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v16);
              E5RT::Ops::CastOperation::Impl::CreateOutputDescFromInput(v17, (uint64_t)a1, TensorShape, &v26);
            }
            exception = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(&v26, "ReshapeOperationInternal");
            std::string::basic_string[abi:ne180100]<0>(v24, "Cast op reshape cannot change TensorDataType for input.");
            E5RT::Status::Status(v25, 1, v24);
            E5RT::E5RTError::E5RTError(exception, &v26, v25);
          }
          uint64_t v22 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v26, "ReshapeOperationInternal");
          std::string::basic_string[abi:ne180100]<0>(v24, "Cast op reshape cannot change rank.");
          E5RT::Status::Status(v25, 1, v24);
          E5RT::E5RTError::E5RTError(v22, &v26, v25);
        }
        uint64_t v21 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v26, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(v24, "Cast op cannot reshape a surface descriptor.");
        E5RT::Status::Status(v25, 2, v24);
        E5RT::E5RTError::E5RTError(v21, &v26, v25);
      }
      size_t v20 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v26, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v24, "Unknown operand name given for reshaping.");
      E5RT::Status::Status(v25, 1, v24);
      E5RT::E5RTError::E5RTError(v20, &v26, v25);
    }
    uint64_t v19 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v26, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v24, "Require new shapes for all inputs to reshape.");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(v19, &v26, v25);
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(&v26, "ReshapeOperationInternal");
  std::string::basic_string[abi:ne180100]<0>(v24, "Cannot reshape an op that is Encoded to a stream.");
  E5RT::Status::Status(v25, 2, v24);
  E5RT::E5RTError::E5RTError(v18, &v26, v25);
}

void sub_192314580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19231459C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1923145B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

void E5RT::Ops::CastOperation::CastOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  memset(v10, 0, 32);
  LODWORD(v10[4]) = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v10);
  uint64_t v6 = (void **)v10[2];
  if (v10[2])
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void **)*v6;
        uint64_t v8 = (std::__shared_weak_count *)v6[6];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        if (*((char *)v6 + 39) < 0) {
          break;
        }
        operator delete(v6);
        uint64_t v6 = v7;
        if (!v7) {
          goto LABEL_9;
        }
      }
      operator delete(v6[2]);
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
LABEL_9:
  uint64_t v9 = v10[0];
  v10[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EE325F18;
  *((void *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  v10[0] = (void *)0x2B23808000000000;
  memset(&v10[1], 0, 32);
  kdebug_trace();
  *((void *)a1 + 29) |= 3uLL;
  operator new();
}

void sub_1923149B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x192FF16B0](v17, 0x60C40A44E5E0CLL);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a9);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::CastOperation::Impl>>::~propagate_const(v16);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v15);
  _Unwind_Resume(a1);
}

void sub_192314A04(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::CastOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

void sub_192314A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::CastOperation::Impl>>::~propagate_const(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x60C40A44E5E0CLL);
  }
  return a1;
}

void E5RT::Ops::CastOperation::~CastOperation(E5RT::Ops::CastOperation *this)
{
  *(void *)this = &unk_1EE325F18;
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x60C40A44E5E0CLL);
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE325F18;
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x60C40A44E5E0CLL);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::CastOperation::GetOpCode(E5RT::Ops::CastOperation *this)
{
  return 3;
}

uint64_t E5RT::Ops::CastOperation::PrepareOpForEncode(E5RT::ExecutionStreamOperationInternal ***this)
{
  return kdebug_trace();
}

void sub_192314D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::CastOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  return kdebug_trace();
}

void sub_192314DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::CastOperation::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal ***a1, uint64_t a2)
{
}

void sub_192314E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

float E5RT::ElementwiseOpCast<float,float>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)(a1 - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v4 = (long long *)(a2 + 16);
    uint64_t v5 = (_OWORD *)(a1 + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v7 = *(v4 - 1);
      long long v8 = *v4;
      *(v5 - 1) = v7;
      *uint64_t v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v9 = a3 - v3;
      uint64_t v10 = 4 * v3;
      uint64_t v11 = (_DWORD *)(a1 + 4 * v3);
      uint64_t v12 = (int *)(a2 + v10);
      do
      {
        int v13 = *v12++;
        LODWORD(v7) = v13;
        *v11++ = v13;
        --v9;
      }
      while (v9);
    }
  }
  return *(float *)&v7;
}

void *std::function<void ()(float *,float const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_fEEvPT_PKT0_m@<H0>(void *a1@<X0>, float32x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  if (a3 >= 4)
  {
    unint64_t v5 = a3 >> 2;
    unint64_t v6 = a1;
    long long v7 = a2;
    do
    {
      float32x4_t v8 = *v7++;
      *(float16x4_t *)_Q0.i8 = vcvt_f16_f32(v8);
      *v6++ = _Q0.i64[0];
      --v5;
    }
    while (v5);
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v4 = a3 - (a3 & 0xFFFFFFFFFFFFFFFCLL);
    if (a3 <= (a3 & 0xFFFFFFFFFFFFFFFCLL)) {
      return _Q0.i16[0];
    }
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = a3;
    if (!a3) {
      return _Q0.i16[0];
    }
  }
  if (v4 < 0x10)
  {
    unint64_t v10 = v3;
LABEL_12:
    unint64_t v19 = a3 - v10;
    size_t v20 = (_WORD *)a1 + v10;
    uint64_t v21 = &a2->i32[v10];
    do
    {
      __int32 v22 = *v21++;
      _Q0.i32[0] = v22;
      __asm { FCVT            H0, S0 }
      *v20++ = _Q0.i16[0];
      --v19;
    }
    while (v19);
    return _Q0.i16[0];
  }
  unint64_t v10 = v3 + (v4 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (float32x4_t *)((char *)a2 + 4 * v3 + 32);
  uint64_t v12 = (float16x8_t *)((char *)a1 + 2 * v3 + 16);
  unint64_t v13 = v4 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float32x4_t v15 = v11[-2];
    float32x4_t v14 = v11[-1];
    float32x4_t v17 = *v11;
    float32x4_t v16 = v11[1];
    v11 += 4;
    float16x8_t v18 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v15), v14);
    _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v17), v16);
    v12[-1] = v18;
    float16x8_t *v12 = _Q0;
    v12 += 2;
    v13 -= 16;
  }
  while (v13);
  if (v4 != (v4 & 0xFFFFFFFFFFFFFFF0)) {
    goto LABEL_12;
  }
  return _Q0.i16[0];
}

void *_ZNSt3__18functionIFvPDF16_PKfmEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void E5RT::ElementwiseOpCast<unsigned char,float>(unsigned __int8 *__C, const float *__A, vDSP_Length __N)
{
}

void *std::function<void ()(unsigned char *,float const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void E5RT::ElementwiseOpCast<signed char,float>(char *__C, const float *__A, vDSP_Length __N)
{
}

void *std::function<void ()(signed char *,float const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void E5RT::ElementwiseOpCast<unsigned int,float>(unsigned int *__C, const float *__A, vDSP_Length __N)
{
}

void *std::function<void ()(unsigned int *,float const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void E5RT::ElementwiseOpCast<int,float>(int *__C, const float *__A, vDSP_Length __N)
{
}

void *std::function<void ()(int *,float const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void E5RT::ElementwiseOpCast<unsigned short,float>(unsigned __int16 *__C, const float *__A, vDSP_Length __N)
{
}

void *std::function<void ()(unsigned short *,float const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void E5RT::ElementwiseOpCast<short,float>(__int16 *__C, const float *__A, vDSP_Length __N)
{
}

void *std::function<void ()(short *,float const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE378650;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378650;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD4C0) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD4C0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD4C0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD4C0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(float *,float const*,unsigned long),std::allocator<void (*)(float *,float const*,unsigned long)>,void ()(float *,float const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE3780D0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3780D0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD542) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD542 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD542)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD542 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKfmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKfmE;
}

void std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE378910;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378910;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD5C4) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD5C4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD5C4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD5C4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,float const*,unsigned long),std::allocator<void (*)(unsigned char *,float const*,unsigned long)>,void ()(unsigned char *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE378390;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378390;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD63ELL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD63ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD63ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD63ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(signed char *,float const*,unsigned long),std::allocator<void (*)(signed char *,float const*,unsigned long)>,void ()(signed char *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE378E90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378E90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD6B8) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD6B8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD6B8)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD6B8 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,float const*,unsigned long),std::allocator<void (*)(unsigned int *,float const*,unsigned long)>,void ()(unsigned int *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE378BD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378BD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD732) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD732 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD732)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD732 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(int *,float const*,unsigned long),std::allocator<void (*)(int *,float const*,unsigned long)>,void ()(int *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE379410;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379410;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD7ACLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD7ACLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD7ACLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD7ACLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,float const*,unsigned long),std::allocator<void (*)(unsigned short *,float const*,unsigned long)>,void ()(unsigned short *,float const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE379150;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379150;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD826) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD826 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD826)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD826 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(short *,float const*,unsigned long),std::allocator<void (*)(short *,float const*,unsigned long)>,void ()(short *,float const*,unsigned long)>::target_type()
{
}

float32_t _ZN4E5RT17ElementwiseOpCastIfDF16_EEvPT_PKT0_m(float32x4_t *a1, float16x4_t *a2, unint64_t a3)
{
  if (a3 >= 4)
  {
    unint64_t v5 = a3 >> 2;
    unint64_t v6 = a1;
    long long v7 = a2;
    do
    {
      float16x4_t v8 = *v7++;
      _Q0 = vcvtq_f32_f16(v8);
      *v6++ = _Q0;
      --v5;
    }
    while (v5);
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v4 = a3 - (a3 & 0xFFFFFFFFFFFFFFFCLL);
    if (a3 <= (a3 & 0xFFFFFFFFFFFFFFFCLL)) {
      return _Q0.f32[0];
    }
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = a3;
    if (!a3) {
      return _Q0.f32[0];
    }
  }
  if (v4 < 0x10)
  {
    unint64_t v10 = v3;
LABEL_12:
    unint64_t v18 = a3 - v10;
    unint64_t v19 = &a1->i32[v10];
    size_t v20 = (__int16 *)a2 + v10;
    do
    {
      __int16 v21 = *v20++;
      _H0 = v21;
      __asm { FCVT            S0, H0 }
      *v19++ = _Q0.i32[0];
      --v18;
    }
    while (v18);
    return _Q0.f32[0];
  }
  unint64_t v10 = v3 + (v4 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (float16x4_t *)((char *)a2 + 2 * v3 + 16);
  uint64_t v12 = (float32x4_t *)((char *)a1 + 4 * v3 + 32);
  unint64_t v13 = v4 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v14 = *(float16x8_t *)v11[-2].i8;
    float32x4_t v15 = vcvtq_f32_f16(*(float16x4_t *)v14.i8);
    _Q0 = vcvt_hight_f32_f16(v14);
    float32x4_t v16 = vcvtq_f32_f16(*v11);
    float32x4_t v17 = vcvt_hight_f32_f16(*(float16x8_t *)v11->i8);
    v12[-2] = v15;
    v12[-1] = _Q0;
    float32x4_t *v12 = v16;
    v12[1] = v17;
    v12 += 4;
    v11 += 4;
    v13 -= 16;
  }
  while (v13);
  if (v4 != (v4 & 0xFFFFFFFFFFFFFFF0)) {
    goto LABEL_12;
  }
  return _Q0.f32[0];
}

void *_ZNSt3__18functionIFvPfPKDF16_mEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_DF16_EEvPT_PKT0_m@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 0x10) {
      goto LABEL_7;
    }
    if ((unint64_t)(a1 - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = (long long *)(a2 + 16);
    unint64_t v5 = (_OWORD *)(a1 + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v7 = *(v4 - 1);
      long long v8 = *v4;
      *(v5 - 1) = v7;
      *unint64_t v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v9 = a3 - v3;
      uint64_t v10 = 2 * v3;
      uint64_t v11 = (_WORD *)(a1 + 2 * v3);
      uint64_t v12 = (__int16 *)(a2 + v10);
      do
      {
        __int16 v13 = *v12++;
        LOWORD(v7) = v13;
        *v11++ = v13;
        --v9;
      }
      while (v9);
    }
  }
  return v7;
}

void *_ZNSt3__18functionIFvPDF16_PKDF16_mEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

double _ZN4E5RT17ElementwiseOpCastIhDF16_EEvPT_PKT0_m(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v9 = (float16x8_t *)(a2 + 32);
      uint64_t v10 = (int8x16_t *)(a1 + 16);
      unint64_t v11 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        float16x8_t v12 = v9[-2];
        float16x8_t v13 = v9[-1];
        float16x8_t v14 = *v9;
        float16x8_t v15 = v9[1];
        v9 += 4;
        int8x16_t v8 = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(v12), (int8x16_t)vcvtq_u16_f16(v13));
        v10[-1] = v8;
        int8x16_t *v10 = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(v14), (int8x16_t)vcvtq_u16_f16(v15));
        v10 += 2;
        v11 -= 32;
      }
      while (v11);
      if (v3 == a3) {
        return *(double *)v8.i64;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(a1 + v3);
        unint64_t v6 = (short float *)(a2 + 2 * v3);
        do
        {
          short float v7 = *v6++;
          *(short float *)v8.i16 = v7;
          *v5++ = (int)v7;
          --v4;
        }
        while (v4);
        return *(double *)v8.i64;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v17 = (float16x8_t *)(a2 + 2 * v16);
    unint64_t v18 = (void *)(a1 + v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      float16x8_t v20 = *v17++;
      *(int8x8_t *)v8.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(v20));
      *v18++ = v8.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return *(double *)v8.i64;
}

void *_ZNSt3__18functionIFvPhPKDF16_mEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

double _ZN4E5RT17ElementwiseOpCastIaDF16_EEvPT_PKT0_m(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v9 = (float16x8_t *)(a2 + 32);
      uint64_t v10 = (int8x16_t *)(a1 + 16);
      unint64_t v11 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        float16x8_t v12 = v9[-2];
        float16x8_t v13 = v9[-1];
        float16x8_t v14 = *v9;
        float16x8_t v15 = v9[1];
        v9 += 4;
        int8x16_t v8 = vuzp1q_s8((int8x16_t)vcvtq_s16_f16(v12), (int8x16_t)vcvtq_s16_f16(v13));
        v10[-1] = v8;
        int8x16_t *v10 = vuzp1q_s8((int8x16_t)vcvtq_s16_f16(v14), (int8x16_t)vcvtq_s16_f16(v15));
        v10 += 2;
        v11 -= 32;
      }
      while (v11);
      if (v3 == a3) {
        return *(double *)v8.i64;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(a1 + v3);
        unint64_t v6 = (short float *)(a2 + 2 * v3);
        do
        {
          short float v7 = *v6++;
          *(short float *)v8.i16 = v7;
          *v5++ = (int)v7;
          --v4;
        }
        while (v4);
        return *(double *)v8.i64;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v17 = (float16x8_t *)(a2 + 2 * v16);
    unint64_t v18 = (void *)(a1 + v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      float16x8_t v20 = *v17++;
      *(int8x8_t *)v8.i8 = vmovn_s16(vcvtq_s16_f16(v20));
      *v18++ = v8.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return *(double *)v8.i64;
}

void *_ZNSt3__18functionIFvPaPKDF16_mEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastIjDF16_EEvPT_PKT0_m@<H0>(uint32x4_t *a1@<X0>, float16x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v11 = a3 - v3;
      float16x8_t v12 = &a1->i32[v3];
      float16x8_t v13 = (short float *)a2 + v3;
      do
      {
        short float v14 = *v13++;
        *(short float *)v10.i16 = v14;
        *v12++ = v14;
        --v11;
      }
      while (v11);
      return v10.i16[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = a1 + 2;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      float16x8_t v7 = *(float16x8_t *)v4[-2].i8;
      uint32x4_t v8 = vcvtq_u32_f32(vcvtq_f32_f16(*v4));
      float32x4_t v9 = vcvt_hight_f32_f16(*(float16x8_t *)v4->i8);
      v5[-2] = vcvtq_u32_f32(vcvtq_f32_f16(*(float16x4_t *)v7.i8));
      v5[-1] = vcvtq_u32_f32(vcvt_hight_f32_f16(v7));
      uint32x4_t v10 = vcvtq_u32_f32(v9);
      *unint64_t v5 = v8;
      v5[1] = v10;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v10.i16[0];
}

void *_ZNSt3__18functionIFvPjPKDF16_mEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastIiDF16_EEvPT_PKT0_m@<H0>(int32x4_t *a1@<X0>, float16x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v11 = a3 - v3;
      float16x8_t v12 = &a1->i32[v3];
      float16x8_t v13 = (short float *)a2 + v3;
      do
      {
        short float v14 = *v13++;
        *(short float *)v10.i16 = v14;
        *v12++ = (int)v14;
        --v11;
      }
      while (v11);
      return v10.i16[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = a1 + 2;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      float16x8_t v7 = *(float16x8_t *)v4[-2].i8;
      int32x4_t v8 = vcvtq_s32_f32(vcvtq_f32_f16(*v4));
      float32x4_t v9 = vcvt_hight_f32_f16(*(float16x8_t *)v4->i8);
      v5[-2] = vcvtq_s32_f32(vcvtq_f32_f16(*(float16x4_t *)v7.i8));
      v5[-1] = vcvtq_s32_f32(vcvt_hight_f32_f16(v7));
      int32x4_t v10 = vcvtq_s32_f32(v9);
      *unint64_t v5 = v8;
      v5[1] = v10;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v10.i16[0];
}

void *_ZNSt3__18functionIFvPiPKDF16_mEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastItDF16_EEvPT_PKT0_m@<H0>(uint16x8_t *a1@<X0>, float16x8_t *a2@<X1>, unint64_t a3@<X2>)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v9 = a3 - v3;
      uint64_t v10 = v3;
      unint64_t v11 = &a1->i16[v3];
      float16x8_t v12 = (short float *)&a2->i16[v10];
      do
      {
        short float v13 = *v12++;
        *(short float *)v7.i16 = v13;
        *v11++ = (int)v13;
        --v9;
      }
      while (v9);
      return v7.i16[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 1;
    unint64_t v5 = a1 + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      uint16x8_t v7 = vcvtq_u16_f16(v4[-1]);
      uint16x8_t v8 = vcvtq_u16_f16(*v4);
      v5[-1] = v7;
      *unint64_t v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v7.i16[0];
}

void *_ZNSt3__18functionIFvPtPKDF16_mEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastIsDF16_EEvPT_PKT0_m@<H0>(int16x8_t *a1@<X0>, float16x8_t *a2@<X1>, unint64_t a3@<X2>)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v9 = a3 - v3;
      uint64_t v10 = v3;
      unint64_t v11 = &a1->i16[v3];
      float16x8_t v12 = (short float *)&a2->i16[v10];
      do
      {
        short float v13 = *v12++;
        *(short float *)v7.i16 = v13;
        *v11++ = (int)v13;
        --v9;
      }
      while (v9);
      return v7.i16[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 1;
    unint64_t v5 = a1 + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v7 = vcvtq_s16_f16(v4[-1]);
      int16x8_t v8 = vcvtq_s16_f16(*v4);
      v5[-1] = v7;
      *unint64_t v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v7.i16[0];
}

void *_ZNSt3__18functionIFvPsPKDF16_mEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void _ZNSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE3785A0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3785A0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD8A8) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD8A8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD8A8)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD8A8 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPfPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPfPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE378020;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378020;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD93ALL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD93ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD93ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD93ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE378860;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378860;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAD9CCLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAD9CCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAD9CCLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAD9CCLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPhPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPhPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE3782E0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3782E0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADA56) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADA56 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADA56)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADA56 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPaPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPaPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE378DE0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378DE0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADAE0) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADAE0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADAE0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADAE0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPjPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPjPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE378B20;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378B20;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADB6ALL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADB6ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADB6ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADB6ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPiPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPiPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE379360;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379360;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADBF4) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADBF4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADBF4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADBF4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPtPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPtPKDF16_mE;
}

void _ZNSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EE3790A0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3790A0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADC7ELL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADC7ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADC7ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADC7ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPsPKDF16_mENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPsPKDF16_mE;
}

void E5RT::ElementwiseOpCast<float,unsigned char>(float *__C, unsigned __int8 *__A, vDSP_Length __N)
{
}

void *std::function<void ()(float *,unsigned char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

float16x8_t _ZN4E5RT17ElementwiseOpCastIDF16_hEEvPT_PKT0_m(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v9 = (uint8x8_t *)(a2 + 16);
      uint64_t v10 = (float16x8_t *)(a1 + 32);
      unint64_t v11 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v12 = *(uint8x16_t *)v9[-2].i8;
        float16x8_t v13 = vcvtq_f16_u16(vmovl_u8(*v9));
        uint16x8_t v14 = vmovl_high_u8(*(uint8x16_t *)v9->i8);
        v10[-2] = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)v12.i8));
        v10[-1] = vcvtq_f16_u16(vmovl_high_u8(v12));
        float16x8_t result = vcvtq_f16_u16(v14);
        float16x8_t *v10 = v13;
        v10[1] = result;
        v10 += 4;
        v9 += 4;
        v11 -= 32;
      }
      while (v11);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (short float *)(a1 + 2 * v3);
        unint64_t v6 = (unsigned __int8 *)(a2 + v3);
        do
        {
          unsigned int v7 = *v6++;
          *(short float *)result.i16 = (short float)v7;
          *v5++ = (short float)v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v15 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (uint8x8_t *)(a2 + v15);
    float32x4_t v17 = (float16x8_t *)(a1 + 2 * v15);
    unint64_t v18 = v15 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v19 = *v16++;
      float16x8_t result = vcvtq_f16_u16(vmovl_u8(v19));
      *v17++ = result;
      v18 += 8;
    }
    while (v18);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *_ZNSt3__18functionIFvPDF16_PKhmEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<unsigned char,unsigned char>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 8 || (unint64_t)(result - a2) < 0x20) {
      goto LABEL_13;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v4 = (long long *)(a2 + 16);
      unint64_t v5 = (_OWORD *)(result + 16);
      unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v7 = *v4;
        *(v5 - 1) = *(v4 - 1);
        *unint64_t v5 = v7;
        v4 += 2;
        v5 += 2;
        v6 -= 32;
      }
      while (v6);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_13:
        unint64_t v13 = a3 - v3;
        uint16x8_t v14 = (unsigned char *)(result + v3);
        unint64_t v15 = (char *)(a2 + v3);
        do
        {
          char v16 = *v15++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v8 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = (uint64_t *)(a2 + v8);
    uint64_t v10 = (void *)(result + v8);
    unint64_t v11 = v8 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v12 = *v9++;
      *v10++ = v12;
      v11 += 8;
    }
    while (v11);
    if (v3 != a3) {
      goto LABEL_13;
    }
  }
  return result;
}

void *std::function<void ()(unsigned char *,unsigned char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<signed char,unsigned char>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 8 || (unint64_t)(result - a2) < 0x20) {
      goto LABEL_13;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v4 = (long long *)(a2 + 16);
      unint64_t v5 = (_OWORD *)(result + 16);
      unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v7 = *v4;
        *(v5 - 1) = *(v4 - 1);
        *unint64_t v5 = v7;
        v4 += 2;
        v5 += 2;
        v6 -= 32;
      }
      while (v6);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_13:
        unint64_t v13 = a3 - v3;
        uint16x8_t v14 = (unsigned char *)(result + v3);
        unint64_t v15 = (char *)(a2 + v3);
        do
        {
          char v16 = *v15++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v8 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = (uint64_t *)(a2 + v8);
    uint64_t v10 = (void *)(result + v8);
    unint64_t v11 = v8 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v12 = *v9++;
      *v10++ = v12;
      v11 += 8;
    }
    while (v11);
    if (v3 != a3) {
      goto LABEL_13;
    }
  }
  return result;
}

void *std::function<void ()(signed char *,unsigned char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

unint64_t E5RT::ElementwiseOpCast<unsigned int,unsigned char>(unint64_t result, unint64_t a2, unint64_t a3, double a4, double a5, int8x16_t a6)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > result && result + 4 * a3 > a2)
    {
      unint64_t v6 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v11 = (int8x16_t *)(a2 + 16);
      uint64_t v12 = (int8x16_t *)(result + 64);
      a6.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      unint64_t v13 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v14 = v11[-1];
        int8x16_t v15 = *v11;
        int8x16_t v16 = vqtbl1q_s8(*v11, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v17 = vqtbl1q_s8(*v11, (int8x16_t)xmmword_192DAD3F0);
        v12[-2] = vqtbl1q_s8(v14, (int8x16_t)xmmword_192DAD400);
        v12[-1] = vqtbl1q_s8(v14, (int8x16_t)xmmword_192DAD410);
        v12[-4] = vqtbl1q_s8(v14, (int8x16_t)xmmword_192DAD3E0);
        v12[-3] = vqtbl1q_s8(v14, (int8x16_t)xmmword_192DAD3F0);
        v12[2] = vqtbl1q_s8(v15, (int8x16_t)xmmword_192DAD400);
        v12[3] = vqtbl1q_s8(v15, (int8x16_t)xmmword_192DAD410);
        int8x16_t *v12 = v16;
        v12[1] = v17;
        v12 += 8;
        v11 += 2;
        v13 -= 32;
      }
      while (v13);
      if (v6 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v7 = a3 - v6;
        unint64_t v8 = (_DWORD *)(result + 4 * v6);
        unint64_t v9 = (unsigned __int8 *)(a2 + v6);
        do
        {
          int v10 = *v9++;
          *v8++ = v10;
          --v7;
        }
        while (v7);
        return result;
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    unint64_t v18 = v6;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    uint8x8_t v19 = (unint64_t *)(a2 + v18);
    float16x8_t v20 = (int8x16_t *)(result + 4 * v18);
    unint64_t v21 = v18 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      unint64_t v22 = *v19++;
      a6.i64[0] = v22;
      int8x16_t v23 = vqtbl1q_s8(a6, (int8x16_t)xmmword_192DAD3E0);
      a6 = vqtbl1q_s8(a6, (int8x16_t)xmmword_192DAD3F0);
      *float16x8_t v20 = v23;
      v20[1] = a6;
      v20 += 2;
      v21 += 8;
    }
    while (v21);
    if (v6 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(unsigned int *,unsigned char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

unint64_t E5RT::ElementwiseOpCast<int,unsigned char>(unint64_t result, unint64_t a2, unint64_t a3, double a4, double a5, int8x16_t a6)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > result && result + 4 * a3 > a2)
    {
      unint64_t v6 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v11 = (int8x16_t *)(a2 + 16);
      uint64_t v12 = (int8x16_t *)(result + 64);
      a6.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      unint64_t v13 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v14 = v11[-1];
        int8x16_t v15 = *v11;
        int8x16_t v16 = vqtbl1q_s8(*v11, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v17 = vqtbl1q_s8(*v11, (int8x16_t)xmmword_192DAD3F0);
        v12[-2] = vqtbl1q_s8(v14, (int8x16_t)xmmword_192DAD400);
        v12[-1] = vqtbl1q_s8(v14, (int8x16_t)xmmword_192DAD410);
        v12[-4] = vqtbl1q_s8(v14, (int8x16_t)xmmword_192DAD3E0);
        v12[-3] = vqtbl1q_s8(v14, (int8x16_t)xmmword_192DAD3F0);
        v12[2] = vqtbl1q_s8(v15, (int8x16_t)xmmword_192DAD400);
        v12[3] = vqtbl1q_s8(v15, (int8x16_t)xmmword_192DAD410);
        int8x16_t *v12 = v16;
        v12[1] = v17;
        v12 += 8;
        v11 += 2;
        v13 -= 32;
      }
      while (v13);
      if (v6 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v7 = a3 - v6;
        unint64_t v8 = (_DWORD *)(result + 4 * v6);
        unint64_t v9 = (unsigned __int8 *)(a2 + v6);
        do
        {
          int v10 = *v9++;
          *v8++ = v10;
          --v7;
        }
        while (v7);
        return result;
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    unint64_t v18 = v6;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    uint8x8_t v19 = (unint64_t *)(a2 + v18);
    float16x8_t v20 = (int8x16_t *)(result + 4 * v18);
    unint64_t v21 = v18 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      unint64_t v22 = *v19++;
      a6.i64[0] = v22;
      int8x16_t v23 = vqtbl1q_s8(a6, (int8x16_t)xmmword_192DAD3E0);
      a6 = vqtbl1q_s8(a6, (int8x16_t)xmmword_192DAD3F0);
      *float16x8_t v20 = v23;
      v20[1] = a6;
      v20 += 2;
      v21 += 8;
    }
    while (v21);
    if (v6 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(int *,unsigned char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint16x8_t E5RT::ElementwiseOpCast<unsigned short,unsigned char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v8 = (uint8x8_t *)(a2 + 16);
      unint64_t v9 = (uint16x8_t *)(a1 + 32);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v11 = *(uint8x16_t *)v8[-2].i8;
        uint16x8_t v12 = vmovl_u8(*(uint8x8_t *)v11.i8);
        uint16x8_t result = vmovl_high_u8(v11);
        uint16x8_t v14 = vmovl_u8(*v8);
        uint16x8_t v15 = vmovl_high_u8(*(uint8x16_t *)v8->i8);
        v9[-2] = v12;
        v9[-1] = result;
        uint16x8_t *v9 = v14;
        v9[1] = v15;
        v9 += 4;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (_WORD *)(a1 + 2 * v3);
        unint64_t v6 = (unsigned __int8 *)(a2 + v3);
        do
        {
          __int16 v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    int8x16_t v17 = (uint8x8_t *)(a2 + v16);
    unint64_t v18 = (uint16x8_t *)(a1 + 2 * v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v20 = *v17++;
      uint16x8_t result = vmovl_u8(v20);
      *v18++ = result;
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(unsigned short *,unsigned char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint16x8_t E5RT::ElementwiseOpCast<short,unsigned char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v8 = (uint8x8_t *)(a2 + 16);
      unint64_t v9 = (uint16x8_t *)(a1 + 32);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v11 = *(uint8x16_t *)v8[-2].i8;
        uint16x8_t v12 = vmovl_u8(*(uint8x8_t *)v11.i8);
        uint16x8_t result = vmovl_high_u8(v11);
        uint16x8_t v14 = vmovl_u8(*v8);
        uint16x8_t v15 = vmovl_high_u8(*(uint8x16_t *)v8->i8);
        v9[-2] = v12;
        v9[-1] = result;
        uint16x8_t *v9 = v14;
        v9[1] = v15;
        v9 += 4;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (_WORD *)(a1 + 2 * v3);
        unint64_t v6 = (unsigned __int8 *)(a2 + v3);
        do
        {
          __int16 v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    int8x16_t v17 = (uint8x8_t *)(a2 + v16);
    unint64_t v18 = (uint16x8_t *)(a1 + 2 * v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint8x8_t v20 = *v17++;
      uint16x8_t result = vmovl_u8(v20);
      *v18++ = result;
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(short *,unsigned char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  uint16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint16x8_t result = &unk_1EE3786A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3786A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADD00) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADD00 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADD00)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADD00 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(float *,unsigned char const*,unsigned long),std::allocator<void (*)(float *,unsigned char const*,unsigned long)>,void ()(float *,unsigned char const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  uint16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint16x8_t result = &unk_1EE378128;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378128;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADD82) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADD82 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADD82)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADD82 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKhmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKhmE;
}

void std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  uint16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint16x8_t result = &unk_1EE378968;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378968;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADE04) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADE04 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADE04)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADE04 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned char const*,unsigned long)>,void ()(unsigned char *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  uint16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint16x8_t result = &unk_1EE3783E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3783E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADE7ELL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADE7ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADE7ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADE7ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(signed char *,unsigned char const*,unsigned long),std::allocator<void (*)(signed char *,unsigned char const*,unsigned long)>,void ()(signed char *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  uint16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint16x8_t result = &unk_1EE378EE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378EE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADEF8) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADEF8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADEF8)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADEF8 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned char const*,unsigned long)>,void ()(unsigned int *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  uint16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint16x8_t result = &unk_1EE378C28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378C28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADF72) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADF72 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADF72)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADF72 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(int *,unsigned char const*,unsigned long),std::allocator<void (*)(int *,unsigned char const*,unsigned long)>,void ()(int *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  uint16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint16x8_t result = &unk_1EE379468;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379468;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DADFECLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DADFECLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DADFECLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DADFECLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,unsigned char const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned char const*,unsigned long)>,void ()(unsigned short *,unsigned char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  uint16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint16x8_t result = &unk_1EE3791A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3791A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE066) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE066 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE066)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE066 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(short *,unsigned char const*,unsigned long),std::allocator<void (*)(short *,unsigned char const*,unsigned long)>,void ()(short *,unsigned char const*,unsigned long)>::target_type()
{
}

void E5RT::ElementwiseOpCast<float,signed char>(float *__C, char *__A, vDSP_Length __N)
{
}

void *std::function<void ()(float *,signed char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

float16x8_t _ZN4E5RT17ElementwiseOpCastIDF16_aEEvPT_PKT0_m(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v9 = (int8x8_t *)(a2 + 16);
      unint64_t v10 = (float16x8_t *)(a1 + 32);
      unint64_t v11 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v12 = *(int8x16_t *)v9[-2].i8;
        float16x8_t v13 = vcvtq_f16_s16(vmovl_s8(*v9));
        int16x8_t v14 = vmovl_high_s8(*(int8x16_t *)v9->i8);
        v10[-2] = vcvtq_f16_s16(vmovl_s8(*(int8x8_t *)v12.i8));
        v10[-1] = vcvtq_f16_s16(vmovl_high_s8(v12));
        float16x8_t result = vcvtq_f16_s16(v14);
        float16x8_t *v10 = v13;
        v10[1] = result;
        v10 += 4;
        v9 += 4;
        v11 -= 32;
      }
      while (v11);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (short float *)(a1 + 2 * v3);
        unint64_t v6 = (char *)(a2 + v3);
        do
        {
          int v7 = *v6++;
          *(short float *)result.i16 = (short float)v7;
          *v5++ = (short float)v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v15 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (int8x8_t *)(a2 + v15);
    int8x16_t v17 = (float16x8_t *)(a1 + 2 * v15);
    unint64_t v18 = v15 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v19 = *v16++;
      float16x8_t result = vcvtq_f16_s16(vmovl_s8(v19));
      *v17++ = result;
      v18 += 8;
    }
    while (v18);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *_ZNSt3__18functionIFvPDF16_PKamEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<unsigned char,signed char>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 8 || (unint64_t)(result - a2) < 0x20) {
      goto LABEL_13;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v4 = (long long *)(a2 + 16);
      unint64_t v5 = (_OWORD *)(result + 16);
      unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v7 = *v4;
        *(v5 - 1) = *(v4 - 1);
        *unint64_t v5 = v7;
        v4 += 2;
        v5 += 2;
        v6 -= 32;
      }
      while (v6);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_13:
        unint64_t v13 = a3 - v3;
        int16x8_t v14 = (unsigned char *)(result + v3);
        unint64_t v15 = (char *)(a2 + v3);
        do
        {
          char v16 = *v15++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v8 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = (uint64_t *)(a2 + v8);
    unint64_t v10 = (void *)(result + v8);
    unint64_t v11 = v8 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v12 = *v9++;
      *v10++ = v12;
      v11 += 8;
    }
    while (v11);
    if (v3 != a3) {
      goto LABEL_13;
    }
  }
  return result;
}

void *std::function<void ()(unsigned char *,signed char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<signed char,signed char>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 8 || (unint64_t)(result - a2) < 0x20) {
      goto LABEL_13;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v4 = (long long *)(a2 + 16);
      unint64_t v5 = (_OWORD *)(result + 16);
      unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v7 = *v4;
        *(v5 - 1) = *(v4 - 1);
        *unint64_t v5 = v7;
        v4 += 2;
        v5 += 2;
        v6 -= 32;
      }
      while (v6);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_13:
        unint64_t v13 = a3 - v3;
        int16x8_t v14 = (unsigned char *)(result + v3);
        unint64_t v15 = (char *)(a2 + v3);
        do
        {
          char v16 = *v15++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v8 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = (uint64_t *)(a2 + v8);
    unint64_t v10 = (void *)(result + v8);
    unint64_t v11 = v8 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v12 = *v9++;
      *v10++ = v12;
      v11 += 8;
    }
    while (v11);
    if (v3 != a3) {
      goto LABEL_13;
    }
  }
  return result;
}

void *std::function<void ()(signed char *,signed char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int32x4_t E5RT::ElementwiseOpCast<unsigned int,signed char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 4 * a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v8 = (int8x8_t *)(a2 + 16);
      unint64_t v9 = (int32x4_t *)(a1 + 64);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v11 = *(int8x16_t *)v8[-2].i8;
        int8x16_t v12 = *(int8x16_t *)v8->i8;
        int16x8_t v13 = vmovl_s8(*(int8x8_t *)v11.i8);
        int16x8_t v14 = vmovl_high_s8(v11);
        int16x8_t v15 = vmovl_s8(*v8);
        v9[-2] = vmovl_s16(*(int16x4_t *)v14.i8);
        v9[-1] = vmovl_high_s16(v14);
        int16x8_t v16 = vmovl_high_s8(v12);
        int32x4_t v17 = vmovl_s16(*(int16x4_t *)v16.i8);
        v9[-4] = vmovl_s16(*(int16x4_t *)v13.i8);
        v9[-3] = vmovl_high_s16(v13);
        int32x4_t result = vmovl_high_s16(v16);
        v9[2] = v17;
        void v9[3] = result;
        int32x4_t *v9 = vmovl_s16(*(int16x4_t *)v15.i8);
        v9[1] = vmovl_high_s16(v15);
        v9 += 8;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (_DWORD *)(a1 + 4 * v3);
        unint64_t v6 = (char *)(a2 + v3);
        do
        {
          int v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v19 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    uint8x8_t v20 = (int8x8_t *)(a2 + v19);
    unint64_t v21 = (int32x4_t *)(a1 + 4 * v19);
    unint64_t v22 = v19 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v23 = *v20++;
      int16x8_t v24 = vmovl_s8(v23);
      int32x4_t v25 = vmovl_s16(*(int16x4_t *)v24.i8);
      int32x4_t result = vmovl_high_s16(v24);
      int32x4_t *v21 = v25;
      v21[1] = result;
      v21 += 2;
      v22 += 8;
    }
    while (v22);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(unsigned int *,signed char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int32x4_t E5RT::ElementwiseOpCast<int,signed char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 4 * a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v8 = (int8x8_t *)(a2 + 16);
      unint64_t v9 = (int32x4_t *)(a1 + 64);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v11 = *(int8x16_t *)v8[-2].i8;
        int8x16_t v12 = *(int8x16_t *)v8->i8;
        int16x8_t v13 = vmovl_s8(*(int8x8_t *)v11.i8);
        int16x8_t v14 = vmovl_high_s8(v11);
        int16x8_t v15 = vmovl_s8(*v8);
        v9[-2] = vmovl_s16(*(int16x4_t *)v14.i8);
        v9[-1] = vmovl_high_s16(v14);
        int16x8_t v16 = vmovl_high_s8(v12);
        int32x4_t v17 = vmovl_s16(*(int16x4_t *)v16.i8);
        v9[-4] = vmovl_s16(*(int16x4_t *)v13.i8);
        v9[-3] = vmovl_high_s16(v13);
        int32x4_t result = vmovl_high_s16(v16);
        v9[2] = v17;
        void v9[3] = result;
        int32x4_t *v9 = vmovl_s16(*(int16x4_t *)v15.i8);
        v9[1] = vmovl_high_s16(v15);
        v9 += 8;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (_DWORD *)(a1 + 4 * v3);
        unint64_t v6 = (char *)(a2 + v3);
        do
        {
          int v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v19 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    uint8x8_t v20 = (int8x8_t *)(a2 + v19);
    unint64_t v21 = (int32x4_t *)(a1 + 4 * v19);
    unint64_t v22 = v19 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v23 = *v20++;
      int16x8_t v24 = vmovl_s8(v23);
      int32x4_t v25 = vmovl_s16(*(int16x4_t *)v24.i8);
      int32x4_t result = vmovl_high_s16(v24);
      int32x4_t *v21 = v25;
      v21[1] = result;
      v21 += 2;
      v22 += 8;
    }
    while (v22);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(int *,signed char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int16x8_t E5RT::ElementwiseOpCast<unsigned short,signed char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v8 = (int8x8_t *)(a2 + 16);
      unint64_t v9 = (int16x8_t *)(a1 + 32);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v11 = *(int8x16_t *)v8[-2].i8;
        int16x8_t v12 = vmovl_s8(*(int8x8_t *)v11.i8);
        int16x8_t result = vmovl_high_s8(v11);
        int16x8_t v14 = vmovl_s8(*v8);
        int16x8_t v15 = vmovl_high_s8(*(int8x16_t *)v8->i8);
        v9[-2] = v12;
        v9[-1] = result;
        int16x8_t *v9 = v14;
        v9[1] = v15;
        v9 += 4;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (_WORD *)(a1 + 2 * v3);
        unint64_t v6 = (char *)(a2 + v3);
        do
        {
          __int16 v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v17 = (int8x8_t *)(a2 + v16);
    unint64_t v18 = (int16x8_t *)(a1 + 2 * v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v20 = *v17++;
      int16x8_t result = vmovl_s8(v20);
      *v18++ = result;
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(unsigned short *,signed char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int16x8_t E5RT::ElementwiseOpCast<short,signed char>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + a3 > a1 && a1 + 2 * a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v8 = (int8x8_t *)(a2 + 16);
      unint64_t v9 = (int16x8_t *)(a1 + 32);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v11 = *(int8x16_t *)v8[-2].i8;
        int16x8_t v12 = vmovl_s8(*(int8x8_t *)v11.i8);
        int16x8_t result = vmovl_high_s8(v11);
        int16x8_t v14 = vmovl_s8(*v8);
        int16x8_t v15 = vmovl_high_s8(*(int8x16_t *)v8->i8);
        v9[-2] = v12;
        v9[-1] = result;
        int16x8_t *v9 = v14;
        v9[1] = v15;
        v9 += 4;
        v8 += 4;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (_WORD *)(a1 + 2 * v3);
        unint64_t v6 = (char *)(a2 + v3);
        do
        {
          __int16 v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v17 = (int8x8_t *)(a2 + v16);
    unint64_t v18 = (int16x8_t *)(a1 + 2 * v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v20 = *v17++;
      int16x8_t result = vmovl_s8(v20);
      *v18++ = result;
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(short *,signed char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3785F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3785F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE0E0) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE0E0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE0E0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE0E0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(float *,signed char const*,unsigned long),std::allocator<void (*)(float *,signed char const*,unsigned long)>,void ()(float *,signed char const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378078;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378078;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE162) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE162 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE162)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE162 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKamENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKamE;
}

void std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3788B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3788B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE1E4) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE1E4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE1E4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE1E4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,signed char const*,unsigned long),std::allocator<void (*)(unsigned char *,signed char const*,unsigned long)>,void ()(unsigned char *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378338;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378338;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE25ELL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE25ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE25ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE25ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(signed char *,signed char const*,unsigned long),std::allocator<void (*)(signed char *,signed char const*,unsigned long)>,void ()(signed char *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378E38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378E38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE2D8) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE2D8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE2D8)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE2D8 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,signed char const*,unsigned long),std::allocator<void (*)(unsigned int *,signed char const*,unsigned long)>,void ()(unsigned int *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378B78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378B78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE352) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE352 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE352)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE352 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(int *,signed char const*,unsigned long),std::allocator<void (*)(int *,signed char const*,unsigned long)>,void ()(int *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3793B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3793B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE3CCLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE3CCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE3CCLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE3CCLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,signed char const*,unsigned long),std::allocator<void (*)(unsigned short *,signed char const*,unsigned long)>,void ()(unsigned short *,signed char const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3790F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3790F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE446) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE446 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE446)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE446 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(short *,signed char const*,unsigned long),std::allocator<void (*)(short *,signed char const*,unsigned long)>,void ()(short *,signed char const*,unsigned long)>::target_type()
{
}

float32_t E5RT::ElementwiseOpCast<float,unsigned int>(float32x4_t *a1, uint32x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v9 = a3 - v3;
      uint64_t v10 = v3;
      int8x16_t v11 = &a1->f32[v3];
      int16x8_t v12 = &a2->u32[v10];
      do
      {
        unsigned int v13 = *v12++;
        v7.f32[0] = (float)v13;
        *v11++ = (float)v13;
        --v9;
      }
      while (v9);
      return v7.f32[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v4 = a2 + 1;
    unint64_t v5 = a1 + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v7 = vcvtq_f32_u32(v4[-1]);
      float32x4_t v8 = vcvtq_f32_u32(*v4);
      v5[-1] = v7;
      *unint64_t v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v7.f32[0];
}

void *std::function<void ()(float *,unsigned int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_jEEvPT_PKT0_m@<H0>(float16x8_t *a1@<X0>, uint32x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      int16x8_t v14 = (short float *)&a1->i16[v3];
      int16x8_t v15 = (unsigned int *)a2 + v3;
      do
      {
        unsigned int v16 = *v15++;
        *(short float *)v12.i16 = (short float)v16;
        *v14++ = (short float)v16;
        --v13;
      }
      while (v13);
      return v12.i16[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = a1 + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      uint32x4_t v8 = v4[-2];
      uint32x4_t v7 = v4[-1];
      uint32x4_t v10 = *v4;
      uint32x4_t v9 = v4[1];
      v4 += 4;
      float16x8_t v11 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(v8)), vcvtq_f32_u32(v7));
      float16x8_t v12 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(v10)), vcvtq_f32_u32(v9));
      v5[-1] = v11;
      *unint64_t v5 = v12;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v12.i16[0];
}

void *_ZNSt3__18functionIFvPDF16_PKjmEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

unint64_t E5RT::ElementwiseOpCast<unsigned char,unsigned int>(unint64_t result, int8x16x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 4 * a3 > result && result + a3 > (unint64_t)a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      uint32x4_t v8 = a2 + 1;
      uint32x4_t v9 = (int8x16_t *)(result + 16);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16x4_t v16 = *v8;
        v9[-1] = vqtbl4q_s8(v8[-1], (int8x16_t)xmmword_192DAD420);
        int8x16_t *v9 = vqtbl4q_s8(v16, (int8x16_t)xmmword_192DAD420);
        v8 += 2;
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(result + v3);
        unint64_t v6 = (int *)a2 + v3;
        do
        {
          int v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v11 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    float16x8_t v12 = (int8x16x2_t *)((char *)a2 + 4 * v11);
    unint64_t v13 = (void *)(result + v11);
    unint64_t v14 = v11 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x16x2_t v15 = *v12++;
      *v13++ = vqtbl2q_s8(v15, (int8x16_t)xmmword_192DAD430).u64[0];
      v14 += 8;
    }
    while (v14);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(unsigned char *,unsigned int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

unint64_t E5RT::ElementwiseOpCast<signed char,unsigned int>(unint64_t result, int8x16x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 4 * a3 > result && result + a3 > (unint64_t)a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      uint32x4_t v8 = a2 + 1;
      uint32x4_t v9 = (int8x16_t *)(result + 16);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16x4_t v16 = *v8;
        v9[-1] = vqtbl4q_s8(v8[-1], (int8x16_t)xmmword_192DAD420);
        int8x16_t *v9 = vqtbl4q_s8(v16, (int8x16_t)xmmword_192DAD420);
        v8 += 2;
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(result + v3);
        unint64_t v6 = (int *)a2 + v3;
        do
        {
          int v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v11 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    float16x8_t v12 = (int8x16x2_t *)((char *)a2 + 4 * v11);
    unint64_t v13 = (void *)(result + v11);
    unint64_t v14 = v11 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x16x2_t v15 = *v12++;
      *v13++ = vqtbl2q_s8(v15, (int8x16_t)xmmword_192DAD430).u64[0];
      v14 += 8;
    }
    while (v14);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(signed char *,unsigned int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<unsigned int,unsigned int>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)(result - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v4 = (long long *)(a2 + 16);
    unint64_t v5 = (_OWORD *)(result + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *unint64_t v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v8 = a3 - v3;
      uint64_t v9 = 4 * v3;
      unint64_t v10 = (_DWORD *)(result + 4 * v3);
      unint64_t v11 = (int *)(a2 + v9);
      do
      {
        int v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void *std::function<void ()(unsigned int *,unsigned int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<int,unsigned int>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)(result - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v4 = (long long *)(a2 + 16);
    unint64_t v5 = (_OWORD *)(result + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *unint64_t v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v8 = a3 - v3;
      uint64_t v9 = 4 * v3;
      unint64_t v10 = (_DWORD *)(result + 4 * v3);
      unint64_t v11 = (int *)(a2 + v9);
      do
      {
        int v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void *std::function<void ()(int *,unsigned int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int16x8_t *E5RT::ElementwiseOpCast<unsigned short,unsigned int>(int16x8_t *result, int16x8_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v11 = a3 - v3;
      int v12 = &result->i16[v3];
      unint64_t v13 = &a2->i32[v3];
      do
      {
        int v14 = *v13++;
        *v12++ = v14;
        --v11;
      }
      while (v11);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = result + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v8 = v4[-2];
      int16x8_t v7 = v4[-1];
      int16x8_t v10 = *v4;
      int16x8_t v9 = v4[1];
      v4 += 4;
      v5[-1] = vuzp1q_s16(v8, v7);
      *unint64_t v5 = vuzp1q_s16(v10, v9);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

void *std::function<void ()(unsigned short *,unsigned int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int16x8_t *E5RT::ElementwiseOpCast<short,unsigned int>(int16x8_t *result, int16x8_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v11 = a3 - v3;
      int v12 = &result->i16[v3];
      unint64_t v13 = &a2->i32[v3];
      do
      {
        int v14 = *v13++;
        *v12++ = v14;
        --v11;
      }
      while (v11);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = result + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v8 = v4[-2];
      int16x8_t v7 = v4[-1];
      int16x8_t v10 = *v4;
      int16x8_t v9 = v4[1];
      v4 += 4;
      v5[-1] = vuzp1q_s16(v8, v7);
      *unint64_t v5 = vuzp1q_s16(v10, v9);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

void *std::function<void ()(short *,unsigned int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378758;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378758;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE4C0) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE4C0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE4C0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE4C0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(float *,unsigned int const*,unsigned long),std::allocator<void (*)(float *,unsigned int const*,unsigned long)>,void ()(float *,unsigned int const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3781D8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3781D8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE542) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE542 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE542)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE542 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKjmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKjmE;
}

void std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378A18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378A18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE5C4) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE5C4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE5C4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE5C4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned int const*,unsigned long)>,void ()(unsigned char *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378498;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378498;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE63ELL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE63ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE63ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE63ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(signed char *,unsigned int const*,unsigned long),std::allocator<void (*)(signed char *,unsigned int const*,unsigned long)>,void ()(signed char *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378F98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378F98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE6B8) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE6B8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE6B8)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE6B8 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned int const*,unsigned long)>,void ()(unsigned int *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378CD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378CD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE732) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE732 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE732)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE732 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(int *,unsigned int const*,unsigned long),std::allocator<void (*)(int *,unsigned int const*,unsigned long)>,void ()(int *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE379518;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379518;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE7ACLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE7ACLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE7ACLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE7ACLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,unsigned int const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned int const*,unsigned long)>,void ()(unsigned short *,unsigned int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE379258;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379258;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE826) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE826 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE826)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE826 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(short *,unsigned int const*,unsigned long),std::allocator<void (*)(short *,unsigned int const*,unsigned long)>,void ()(short *,unsigned int const*,unsigned long)>::target_type()
{
}

float32_t E5RT::ElementwiseOpCast<float,int>(float32x4_t *a1, int32x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v9 = a3 - v3;
      uint64_t v10 = v3;
      unint64_t v11 = &a1->f32[v3];
      int v12 = &a2->i32[v10];
      do
      {
        int v13 = *v12++;
        v7.f32[0] = (float)v13;
        *v11++ = (float)v13;
        --v9;
      }
      while (v9);
      return v7.f32[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v4 = a2 + 1;
    unint64_t v5 = a1 + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v7 = vcvtq_f32_s32(v4[-1]);
      float32x4_t v8 = vcvtq_f32_s32(*v4);
      v5[-1] = v7;
      *unint64_t v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v7.f32[0];
}

void *std::function<void ()(float *,int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_iEEvPT_PKT0_m@<H0>(float16x8_t *a1@<X0>, int32x4_t *a2@<X1>, unint64_t a3@<X2>)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      int v14 = (short float *)&a1->i16[v3];
      int8x16x2_t v15 = &a2->i32[v3];
      do
      {
        int v16 = *v15++;
        *(short float *)v12.i16 = (short float)v16;
        *v14++ = (short float)v16;
        --v13;
      }
      while (v13);
      return v12.i16[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = a1 + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int32x4_t v8 = v4[-2];
      int32x4_t v7 = v4[-1];
      int32x4_t v10 = *v4;
      int32x4_t v9 = v4[1];
      v4 += 4;
      float16x8_t v11 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v8)), vcvtq_f32_s32(v7));
      float16x8_t v12 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v10)), vcvtq_f32_s32(v9));
      v5[-1] = v11;
      *unint64_t v5 = v12;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v12.i16[0];
}

void *_ZNSt3__18functionIFvPDF16_PKimEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

unint64_t E5RT::ElementwiseOpCast<unsigned char,int>(unint64_t result, int8x16x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 4 * a3 > result && result + a3 > (unint64_t)a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      int32x4_t v8 = a2 + 1;
      int32x4_t v9 = (int8x16_t *)(result + 16);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16x4_t v16 = *v8;
        v9[-1] = vqtbl4q_s8(v8[-1], (int8x16_t)xmmword_192DAD420);
        int8x16_t *v9 = vqtbl4q_s8(v16, (int8x16_t)xmmword_192DAD420);
        v8 += 2;
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(result + v3);
        unint64_t v6 = (int *)a2 + v3;
        do
        {
          int v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v11 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    float16x8_t v12 = (int8x16x2_t *)((char *)a2 + 4 * v11);
    unint64_t v13 = (void *)(result + v11);
    unint64_t v14 = v11 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x16x2_t v15 = *v12++;
      *v13++ = vqtbl2q_s8(v15, (int8x16_t)xmmword_192DAD430).u64[0];
      v14 += 8;
    }
    while (v14);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(unsigned char *,int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

unint64_t E5RT::ElementwiseOpCast<signed char,int>(unint64_t result, int8x16x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || (unint64_t)a2 + 4 * a3 > result && result + a3 > (unint64_t)a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      int32x4_t v8 = a2 + 1;
      int32x4_t v9 = (int8x16_t *)(result + 16);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16x4_t v16 = *v8;
        v9[-1] = vqtbl4q_s8(v8[-1], (int8x16_t)xmmword_192DAD420);
        int8x16_t *v9 = vqtbl4q_s8(v16, (int8x16_t)xmmword_192DAD420);
        v8 += 2;
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return result;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(result + v3);
        unint64_t v6 = (int *)a2 + v3;
        do
        {
          int v7 = *v6++;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return result;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v11 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    float16x8_t v12 = (int8x16x2_t *)((char *)a2 + 4 * v11);
    unint64_t v13 = (void *)(result + v11);
    unint64_t v14 = v11 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x16x2_t v15 = *v12++;
      *v13++ = vqtbl2q_s8(v15, (int8x16_t)xmmword_192DAD430).u64[0];
      v14 += 8;
    }
    while (v14);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return result;
}

void *std::function<void ()(signed char *,int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<unsigned int,int>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)(result - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v4 = (long long *)(a2 + 16);
    unint64_t v5 = (_OWORD *)(result + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *unint64_t v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v8 = a3 - v3;
      uint64_t v9 = 4 * v3;
      unint64_t v10 = (_DWORD *)(result + 4 * v3);
      unint64_t v11 = (int *)(a2 + v9);
      do
      {
        int v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void *std::function<void ()(unsigned int *,int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<int,int>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 8) {
      goto LABEL_7;
    }
    if ((unint64_t)(result - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v4 = (long long *)(a2 + 16);
    unint64_t v5 = (_OWORD *)(result + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *unint64_t v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 8;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v8 = a3 - v3;
      uint64_t v9 = 4 * v3;
      unint64_t v10 = (_DWORD *)(result + 4 * v3);
      unint64_t v11 = (int *)(a2 + v9);
      do
      {
        int v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void *std::function<void ()(int *,int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int16x8_t *E5RT::ElementwiseOpCast<unsigned short,int>(int16x8_t *result, int16x8_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v11 = a3 - v3;
      int v12 = &result->i16[v3];
      unint64_t v13 = &a2->i32[v3];
      do
      {
        int v14 = *v13++;
        *v12++ = v14;
        --v11;
      }
      while (v11);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = result + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v8 = v4[-2];
      int16x8_t v7 = v4[-1];
      int16x8_t v10 = *v4;
      int16x8_t v9 = v4[1];
      v4 += 4;
      v5[-1] = vuzp1q_s16(v8, v7);
      *unint64_t v5 = vuzp1q_s16(v10, v9);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

void *std::function<void ()(unsigned short *,int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int16x8_t *E5RT::ElementwiseOpCast<short,int>(int16x8_t *result, int16x8_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v11 = a3 - v3;
      int v12 = &result->i16[v3];
      unint64_t v13 = &a2->i32[v3];
      do
      {
        int v14 = *v13++;
        *v12++ = v14;
        --v11;
      }
      while (v11);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = result + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v8 = v4[-2];
      int16x8_t v7 = v4[-1];
      int16x8_t v10 = *v4;
      int16x8_t v9 = v4[1];
      v4 += 4;
      v5[-1] = vuzp1q_s16(v8, v7);
      *unint64_t v5 = vuzp1q_s16(v10, v9);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

void *std::function<void ()(short *,int const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378700;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378700;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE8A0) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE8A0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE8A0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE8A0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(float *,int const*,unsigned long),std::allocator<void (*)(float *,int const*,unsigned long)>,void ()(float *,int const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378180;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378180;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE922) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE922 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE922)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE922 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKimENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKimE;
}

void std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3789C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3789C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAE9A4) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAE9A4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAE9A4)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAE9A4 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,int const*,unsigned long),std::allocator<void (*)(unsigned char *,int const*,unsigned long)>,void ()(unsigned char *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378440;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378440;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEA1ELL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEA1ELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEA1ELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEA1ELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(signed char *,int const*,unsigned long),std::allocator<void (*)(signed char *,int const*,unsigned long)>,void ()(signed char *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378F40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378F40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEA98) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEA98 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEA98)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEA98 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,int const*,unsigned long),std::allocator<void (*)(unsigned int *,int const*,unsigned long)>,void ()(unsigned int *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378C80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378C80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEB12) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEB12 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEB12)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEB12 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(int *,int const*,unsigned long),std::allocator<void (*)(int *,int const*,unsigned long)>,void ()(int *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3794C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3794C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEB8CLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEB8CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEB8CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEB8CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,int const*,unsigned long),std::allocator<void (*)(unsigned short *,int const*,unsigned long)>,void ()(unsigned short *,int const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE379200;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379200;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEC06) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEC06 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEC06)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEC06 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(short *,int const*,unsigned long),std::allocator<void (*)(short *,int const*,unsigned long)>,void ()(short *,int const*,unsigned long)>::target_type()
{
}

void E5RT::ElementwiseOpCast<float,unsigned short>(float *__C, unsigned __int16 *__A, vDSP_Length __N)
{
}

void *std::function<void ()(float *,unsigned short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_tEEvPT_PKT0_m@<H0>(float16x8_t *a1@<X0>, uint16x8_t *a2@<X1>, unint64_t a3@<X2>)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v9 = a3 - v3;
      uint64_t v10 = v3;
      unint64_t v11 = (short float *)&a1->i16[v3];
      int v12 = &a2->u16[v10];
      do
      {
        unsigned __int16 v13 = *v12++;
        *(short float *)v7.i16 = (short float)v13;
        *v11++ = (short float)v13;
        --v9;
      }
      while (v9);
      return v7.i16[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 1;
    unint64_t v5 = a1 + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      float16x8_t v7 = vcvtq_f16_u16(v4[-1]);
      float16x8_t v8 = vcvtq_f16_u16(*v4);
      v5[-1] = v7;
      *unint64_t v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v7.i16[0];
}

void *_ZNSt3__18functionIFvPDF16_PKtmEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

double E5RT::ElementwiseOpCast<unsigned char,unsigned short>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      float16x8_t v8 = (int8x16_t *)(a2 + 32);
      unint64_t v9 = (int8x16_t *)(a1 + 16);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v12 = v8[-2];
        int8x16_t v11 = v8[-1];
        int8x16_t v14 = *v8;
        int8x16_t v13 = v8[1];
        v8 += 4;
        int8x16_t v15 = vuzp1q_s8(v12, v11);
        v9[-1] = v15;
        int8x16_t *v9 = vuzp1q_s8(v14, v13);
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return *(double *)v15.i64;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(a1 + v3);
        unint64_t v6 = (char *)(a2 + 2 * v3);
        do
        {
          char v7 = *v6;
          v6 += 2;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return *(double *)v15.i64;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v17 = (int16x8_t *)(a2 + 2 * v16);
    unint64_t v18 = (void *)(a1 + v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v20 = *v17++;
      *(int8x8_t *)v15.i8 = vmovn_s16(v20);
      *v18++ = v15.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return *(double *)v15.i64;
}

void *std::function<void ()(unsigned char *,unsigned short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

double E5RT::ElementwiseOpCast<signed char,unsigned short>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      float16x8_t v8 = (int8x16_t *)(a2 + 32);
      unint64_t v9 = (int8x16_t *)(a1 + 16);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v12 = v8[-2];
        int8x16_t v11 = v8[-1];
        int8x16_t v14 = *v8;
        int8x16_t v13 = v8[1];
        v8 += 4;
        int8x16_t v15 = vuzp1q_s8(v12, v11);
        v9[-1] = v15;
        int8x16_t *v9 = vuzp1q_s8(v14, v13);
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return *(double *)v15.i64;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(a1 + v3);
        unint64_t v6 = (char *)(a2 + 2 * v3);
        do
        {
          char v7 = *v6;
          v6 += 2;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return *(double *)v15.i64;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v17 = (int16x8_t *)(a2 + 2 * v16);
    unint64_t v18 = (void *)(a1 + v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v20 = *v17++;
      *(int8x8_t *)v15.i8 = vmovn_s16(v20);
      *v18++ = v15.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return *(double *)v15.i64;
}

void *std::function<void ()(signed char *,unsigned short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint32x4_t *E5RT::ElementwiseOpCast<unsigned int,unsigned short>(uint32x4_t *result, uint16x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v10 = a3 - v3;
      int8x16_t v11 = &result->i32[v3];
      int8x16_t v12 = (unsigned __int16 *)a2 + v3;
      do
      {
        int v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = result + 2;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      uint16x8_t v7 = *(uint16x8_t *)v4[-2].i8;
      uint32x4_t v8 = vmovl_u16(*v4);
      uint32x4_t v9 = vmovl_high_u16(*(uint16x8_t *)v4->i8);
      v5[-2] = vmovl_u16(*(uint16x4_t *)v7.i8);
      v5[-1] = vmovl_high_u16(v7);
      *unint64_t v5 = v8;
      v5[1] = v9;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

void *std::function<void ()(unsigned int *,unsigned short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint32x4_t *E5RT::ElementwiseOpCast<int,unsigned short>(uint32x4_t *result, uint16x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v10 = a3 - v3;
      int8x16_t v11 = &result->i32[v3];
      int8x16_t v12 = (unsigned __int16 *)a2 + v3;
      do
      {
        int v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = result + 2;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      uint16x8_t v7 = *(uint16x8_t *)v4[-2].i8;
      uint32x4_t v8 = vmovl_u16(*v4);
      uint32x4_t v9 = vmovl_high_u16(*(uint16x8_t *)v4->i8);
      v5[-2] = vmovl_u16(*(uint16x4_t *)v7.i8);
      v5[-1] = vmovl_high_u16(v7);
      *unint64_t v5 = v8;
      v5[1] = v9;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

void *std::function<void ()(int *,unsigned short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<unsigned short,unsigned short>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 0x10) {
      goto LABEL_7;
    }
    if ((unint64_t)(result - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = (long long *)(a2 + 16);
    unint64_t v5 = (_OWORD *)(result + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *unint64_t v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v8 = a3 - v3;
      uint64_t v9 = 2 * v3;
      unint64_t v10 = (_WORD *)(result + 2 * v3);
      int8x16_t v11 = (__int16 *)(a2 + v9);
      do
      {
        __int16 v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void *std::function<void ()(unsigned short *,unsigned short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<short,unsigned short>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 0x10) {
      goto LABEL_7;
    }
    if ((unint64_t)(result - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = (long long *)(a2 + 16);
    unint64_t v5 = (_OWORD *)(result + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *unint64_t v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v8 = a3 - v3;
      uint64_t v9 = 2 * v3;
      unint64_t v10 = (_WORD *)(result + 2 * v3);
      int8x16_t v11 = (__int16 *)(a2 + v9);
      do
      {
        __int16 v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void *std::function<void ()(short *,unsigned short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378808;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378808;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEC80) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEC80 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEC80)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEC80 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(float *,unsigned short const*,unsigned long),std::allocator<void (*)(float *,unsigned short const*,unsigned long)>,void ()(float *,unsigned short const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378288;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378288;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAED02) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAED02 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAED02)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAED02 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKtmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKtmE;
}

void std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378AC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378AC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAED84) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAED84 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAED84)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAED84 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned char *,unsigned short const*,unsigned long)>,void ()(unsigned char *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378548;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378548;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEDFELL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEDFELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEDFELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEDFELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(signed char *,unsigned short const*,unsigned long),std::allocator<void (*)(signed char *,unsigned short const*,unsigned long)>,void ()(signed char *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE379048;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379048;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEE78) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEE78 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEE78)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEE78 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned int *,unsigned short const*,unsigned long)>,void ()(unsigned int *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378D88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378D88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEEF2) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEEF2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEEF2)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEEF2 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(int *,unsigned short const*,unsigned long),std::allocator<void (*)(int *,unsigned short const*,unsigned long)>,void ()(int *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3795C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3795C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEF6CLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEF6CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEF6CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEF6CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,unsigned short const*,unsigned long),std::allocator<void (*)(unsigned short *,unsigned short const*,unsigned long)>,void ()(unsigned short *,unsigned short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE379308;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379308;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAEFE6) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAEFE6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAEFE6)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAEFE6 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(short *,unsigned short const*,unsigned long),std::allocator<void (*)(short *,unsigned short const*,unsigned long)>,void ()(short *,unsigned short const*,unsigned long)>::target_type()
{
}

void E5RT::ElementwiseOpCast<float,short>(float *__C, __int16 *__A, vDSP_Length __N)
{
}

void *std::function<void ()(float *,short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__int16 _ZN4E5RT17ElementwiseOpCastIDF16_sEEvPT_PKT0_m@<H0>(float16x8_t *a1@<X0>, int16x8_t *a2@<X1>, unint64_t a3@<X2>)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v9 = a3 - v3;
      uint64_t v10 = v3;
      int8x16_t v11 = (short float *)&a1->i16[v3];
      __int16 v12 = &a2->i16[v10];
      do
      {
        __int16 v13 = *v12++;
        *(short float *)v7.i16 = (short float)v13;
        *v11++ = (short float)v13;
        --v9;
      }
      while (v9);
      return v7.i16[0];
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 1;
    unint64_t v5 = a1 + 1;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      float16x8_t v7 = vcvtq_f16_s16(v4[-1]);
      float16x8_t v8 = vcvtq_f16_s16(*v4);
      v5[-1] = v7;
      *unint64_t v5 = v8;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return v7.i16[0];
}

void *_ZNSt3__18functionIFvPDF16_PKsmEED1Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

double E5RT::ElementwiseOpCast<unsigned char,short>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      float16x8_t v8 = (int8x16_t *)(a2 + 32);
      unint64_t v9 = (int8x16_t *)(a1 + 16);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v12 = v8[-2];
        int8x16_t v11 = v8[-1];
        int8x16_t v14 = *v8;
        int8x16_t v13 = v8[1];
        v8 += 4;
        int8x16_t v15 = vuzp1q_s8(v12, v11);
        v9[-1] = v15;
        int8x16_t *v9 = vuzp1q_s8(v14, v13);
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return *(double *)v15.i64;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(a1 + v3);
        unint64_t v6 = (char *)(a2 + 2 * v3);
        do
        {
          char v7 = *v6;
          v6 += 2;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return *(double *)v15.i64;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v17 = (int16x8_t *)(a2 + 2 * v16);
    unint64_t v18 = (void *)(a1 + v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v20 = *v17++;
      *(int8x8_t *)v15.i8 = vmovn_s16(v20);
      *v18++ = v15.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return *(double *)v15.i64;
}

void *std::function<void ()(unsigned char *,short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

double E5RT::ElementwiseOpCast<signed char,short>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 8 || a2 + 2 * a3 > a1 && a1 + a3 > a2)
    {
      unint64_t v3 = 0;
      goto LABEL_6;
    }
    if (a3 >= 0x20)
    {
      unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFE0;
      float16x8_t v8 = (int8x16_t *)(a2 + 32);
      unint64_t v9 = (int8x16_t *)(a1 + 16);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v12 = v8[-2];
        int8x16_t v11 = v8[-1];
        int8x16_t v14 = *v8;
        int8x16_t v13 = v8[1];
        v8 += 4;
        int8x16_t v15 = vuzp1q_s8(v12, v11);
        v9[-1] = v15;
        int8x16_t *v9 = vuzp1q_s8(v14, v13);
        v9 += 2;
        v10 -= 32;
      }
      while (v10);
      if (v3 == a3) {
        return *(double *)v15.i64;
      }
      if ((a3 & 0x18) == 0)
      {
LABEL_6:
        unint64_t v4 = a3 - v3;
        unint64_t v5 = (unsigned char *)(a1 + v3);
        unint64_t v6 = (char *)(a2 + 2 * v3);
        do
        {
          char v7 = *v6;
          v6 += 2;
          *v5++ = v7;
          --v4;
        }
        while (v4);
        return *(double *)v15.i64;
      }
    }
    else
    {
      unint64_t v3 = 0;
    }
    unint64_t v16 = v3;
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v17 = (int16x8_t *)(a2 + 2 * v16);
    unint64_t v18 = (void *)(a1 + v16);
    unint64_t v19 = v16 - (a3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int16x8_t v20 = *v17++;
      *(int8x8_t *)v15.i8 = vmovn_s16(v20);
      *v18++ = v15.i64[0];
      v19 += 8;
    }
    while (v19);
    if (v3 != a3) {
      goto LABEL_6;
    }
  }
  return *(double *)v15.i64;
}

void *std::function<void ()(signed char *,short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int32x4_t *E5RT::ElementwiseOpCast<unsigned int,short>(int32x4_t *result, int16x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v10 = a3 - v3;
      int8x16_t v11 = &result->i32[v3];
      int8x16_t v12 = (__int16 *)a2 + v3;
      do
      {
        int v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = result + 2;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v7 = *(int16x8_t *)v4[-2].i8;
      int32x4_t v8 = vmovl_s16(*v4);
      int32x4_t v9 = vmovl_high_s16(*(int16x8_t *)v4->i8);
      v5[-2] = vmovl_s16(*(int16x4_t *)v7.i8);
      v5[-1] = vmovl_high_s16(v7);
      *unint64_t v5 = v8;
      v5[1] = v9;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

void *std::function<void ()(unsigned int *,short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

int32x4_t *E5RT::ElementwiseOpCast<int,short>(int32x4_t *result, int16x4_t *a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 0x10)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v10 = a3 - v3;
      int8x16_t v11 = &result->i32[v3];
      int8x16_t v12 = (__int16 *)a2 + v3;
      do
      {
        int v13 = *v12++;
        *v11++ = v13;
        --v10;
      }
      while (v10);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = a2 + 2;
    unint64_t v5 = result + 2;
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v7 = *(int16x8_t *)v4[-2].i8;
      int32x4_t v8 = vmovl_s16(*v4);
      int32x4_t v9 = vmovl_high_s16(*(int16x8_t *)v4->i8);
      v5[-2] = vmovl_s16(*(int16x4_t *)v7.i8);
      v5[-1] = vmovl_high_s16(v7);
      *unint64_t v5 = v8;
      v5[1] = v9;
      v5 += 4;
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

void *std::function<void ()(int *,short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<unsigned short,short>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 0x10) {
      goto LABEL_7;
    }
    if ((unint64_t)(result - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = (long long *)(a2 + 16);
    unint64_t v5 = (_OWORD *)(result + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *unint64_t v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v8 = a3 - v3;
      uint64_t v9 = 2 * v3;
      unint64_t v10 = (_WORD *)(result + 2 * v3);
      int8x16_t v11 = (__int16 *)(a2 + v9);
      do
      {
        __int16 v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void *std::function<void ()(unsigned short *,short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ElementwiseOpCast<short,short>(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = 0;
    if (a3 < 0x10) {
      goto LABEL_7;
    }
    if ((unint64_t)(result - a2) < 0x20) {
      goto LABEL_7;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v4 = (long long *)(a2 + 16);
    unint64_t v5 = (_OWORD *)(result + 16);
    unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v7 = *v4;
      *(v5 - 1) = *(v4 - 1);
      *unint64_t v5 = v7;
      v4 += 2;
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      unint64_t v8 = a3 - v3;
      uint64_t v9 = 2 * v3;
      unint64_t v10 = (_WORD *)(result + 2 * v3);
      int8x16_t v11 = (__int16 *)(a2 + v9);
      do
      {
        __int16 v12 = *v11++;
        *v10++ = v12;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

void *std::function<void ()(short *,short const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3787B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3787B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAF060) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAF060 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAF060)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAF060 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(float *,short const*,unsigned long),std::allocator<void (*)(float *,short const*,unsigned long)>,void ()(float *,short const*,unsigned long)>::target_type()
{
}

void _ZNSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_E7__cloneEv(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378230;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_E7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378230;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_EclEOS2_OS4_Om(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t _ZNKSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAF0E2) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAF0E2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAF0E2)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAF0E2 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *_ZNKSt3__110__function6__funcIPFvPDF16_PKsmENS_9allocatorIS6_EES5_E11target_typeEv()
{
  return &_ZTIPFvPDF16_PKsmE;
}

void std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378A70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378A70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAF164) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAF164 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAF164)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAF164 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned char *,short const*,unsigned long),std::allocator<void (*)(unsigned char *,short const*,unsigned long)>,void ()(unsigned char *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3784F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3784F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAF1DELL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAF1DELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAF1DELL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAF1DELL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(signed char *,short const*,unsigned long),std::allocator<void (*)(signed char *,short const*,unsigned long)>,void ()(signed char *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378FF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378FF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAF258) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAF258 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAF258)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAF258 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned int *,short const*,unsigned long),std::allocator<void (*)(unsigned int *,short const*,unsigned long)>,void ()(unsigned int *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE378D30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE378D30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAF2D2) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAF2D2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAF2D2)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAF2D2 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(int *,short const*,unsigned long),std::allocator<void (*)(int *,short const*,unsigned long)>,void ()(int *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE379570;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379570;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAF34CLL) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAF34CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAF34CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAF34CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(unsigned short *,short const*,unsigned long),std::allocator<void (*)(unsigned short *,short const*,unsigned long)>,void ()(unsigned short *,short const*,unsigned long)>::target_type()
{
}

void std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::__clone(uint64_t a1)
{
  int16x8_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *int16x8_t result = &unk_1EE3792B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3792B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAF3C6) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DAF3C6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAF3C6)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAF3C6 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void (*)(short *,short const*,unsigned long),std::allocator<void (*)(short *,short const*,unsigned long)>,void ()(short *,short const*,unsigned long)>::target_type()
{
}

void E5RT::Ops::CpuInferenceOperation::CpuInferenceOperation(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9301B80, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1E9301B80)) {
      operator new();
    }
  }
  E5RT::Ops::BaseEirInferenceOperation::BaseEirInferenceOperation(a1, 2, v9, a2, (long long *)qword_1E9301B78, a4, a5);
}

void sub_19231E27C(_Unwind_Exception *a1)
{
}

uint64_t E5RT::Ops::CpuInferenceOperation::SupportsReshaping(E5RT::Ops::CpuInferenceOperation *this)
{
  return 1;
}

_OWORD *E5RT::Ops::CpuInferenceOperation::SupportedInputsOutputsTypes@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(0x10uLL);
  *a1 = v3;
  *uint64_t v3 = xmmword_192DAF3F0;
  int16x8_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

_OWORD *E5RT::Ops::CpuInferenceOperation::SupportedSurfaceTypes@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(0x10uLL);
  *a1 = v3;
  *uint64_t v3 = xmmword_192DAA360;
  int16x8_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t E5RT::Ops::CpuInferenceOperation::PlatformEngine(E5RT::Ops::CpuInferenceOperation *this)
{
  return 0;
}

uint64_t E5RT::Ops::CpuInferenceOperation::StorageTypeForLayers(E5RT::Ops::CpuInferenceOperation *this)
{
  return 65568;
}

void E5RT::Ops::CpuInferenceOperation::ConfigurationName(E5RT::Ops::CpuInferenceOperation *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 48);
  if (*(char *)(v2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 24), *(void *)(v2 + 32));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 24);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

_DWORD *E5RT::Ops::CpuInferenceOperation::AllowedBackends@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v3 = operator new(4uLL);
  *a1 = v3;
  *long long v3 = 1;
  int16x8_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void E5RT::Ops::CpuInferenceOperation::~CpuInferenceOperation(std::__shared_weak_count **this)
{
  uint64_t v1 = (E5RT::Ops::CpuInferenceOperation *)this;
  *this = (std::__shared_weak_count *)&unk_1EE326338;
  uint64_t v2 = this[49];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);
}

void E5RT::Ops::CpuInferenceOperation::~CpuInferenceOperation(E5RT::Ops::CpuInferenceOperation *this)
{
  *(void *)this = &unk_1EE326338;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  uint64_t v6 = a1 + 8;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v7 = a1 + 264;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (*(void *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v20, "InOut ports are not supported by BNNS yet.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(exception, v22, v21);
  }
  if (!*(void *)(OutputPorts + 24))
  {
    int8x16_t v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v20, "No outputs specified.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(v14, v22, v21);
  }
  if (!*(void *)v6)
  {
    int8x16_t v15 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v20, "Op params not specified.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(v15, v22, v21);
  }
  for (uint64_t i = InputPorts + 16; ; sub_19231E980(*(E5RT::IOPortImpl ***)(i + 40)))
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
  }
  for (uint64_t j = OutputPorts + 16; ; sub_19231E980(*(E5RT::IOPortImpl ***)(j + 40)))
  {
    uint64_t j = *(void *)j;
    if (!j) {
      break;
    }
  }
  if (a4[3])
  {
    unint64_t v16 = *(long long **)(*(void *)v6 + 48);
    int32x4_t v17 = *(long long **)(*(void *)v6 + 56);
    while (v16 != v17)
    {
      unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a4, (uint64_t)v16);
      if (v18)
      {
        v22[0] = v16;
        unint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (uint64_t)v16, (uint64_t)&std::piecewise_construct, v22);
        std::string::operator=((std::string *)(v19 + 5), (const std::string *)(v18 + 5));
      }
      unint64_t v16 = (long long *)((char *)v16 + 24);
    }
  }
  return a1;
}

void sub_19231E7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v23 + 304);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v26);
  long long v29 = *(void **)(v23 + 240);
  if (v29)
  {
    *(void *)(v23 + 248) = v29;
    operator delete(v29);
    uint64_t v30 = *(void **)(v23 + 216);
    if (!v30)
    {
LABEL_3:
      uint64_t v31 = *(void **)(v23 + 192);
      if (!v31) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v30 = *(void **)(v23 + 216);
    if (!v30) {
      goto LABEL_3;
    }
  }
  *(void *)(v23 + 224) = v30;
  operator delete(v30);
  uint64_t v31 = *(void **)(v23 + 192);
  if (!v31)
  {
LABEL_4:
    size_t v32 = *(void **)(v23 + 168);
    if (!v32) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  *(void *)(v23 + 200) = v31;
  operator delete(v31);
  size_t v32 = *(void **)(v23 + 168);
  if (!v32)
  {
LABEL_5:
    std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](v25);
    uint64_t v33 = *(void **)(v23 + 120);
    if (!v33) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(void *)(v23 + 176) = v32;
  operator delete(v32);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](v25);
  uint64_t v33 = *(void **)(v23 + 120);
  if (!v33)
  {
LABEL_6:
    uint64_t v34 = *v27;
    if (!*v27) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  *(void *)(v23 + 128) = v33;
  operator delete(v33);
  uint64_t v34 = *v27;
  if (!*v27)
  {
LABEL_8:
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v23 + 56));
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(void *)(v23 + 104) = v34;
  operator delete(v34);
  goto LABEL_8;
}

void *sub_19231E980(E5RT::IOPortImpl **a1)
{
  PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(a1);
  int16x8_t result = E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef);
  if (result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "CheckPortIsSupported");
    std::string::basic_string[abi:ne180100]<0>(v4, "Input port cannot be converted to BNNS tensor descriptor");
    E5RT::Status::Status(v5, 1, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return result;
}

void sub_19231EA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void **std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    long long v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void E5RT::Ops::BnnsCpuInferenceOperation::Impl::~Impl(E5RT::Ops::BnnsCpuInferenceOperation::Impl *this)
{
  if (*((void *)this + 5)) {
    BNNSGraphContextDestroy_v2();
  }
  uint64_t v2 = (void **)*((void *)this + 40);
  if (v2)
  {
    do
    {
      while (1)
      {
        long long v3 = (void **)*v2;
        unint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_11;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  unint64_t v5 = (void *)*((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)*((void *)this + 35);
  if (v6)
  {
    do
    {
      int8x16_t v15 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0) {
LABEL_32:
        }
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_32;
      }
      operator delete(v6);
      uint64_t v6 = v15;
    }
    while (v15);
  }
  uint64_t v7 = (void *)*((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 30);
  if (v8)
  {
    *((void *)this + 31) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 27);
  if (v9)
  {
    *((void *)this + 28) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 24);
  if (v10)
  {
    *((void *)this + 25) = v10;
    operator delete(v10);
  }
  int8x16_t v11 = (void *)*((void *)this + 21);
  if (v11)
  {
    *((void *)this + 22) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *((void *)this + 18);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 19);
    int8x16_t v14 = (void *)*((void *)this + 18);
    if (v13 != v12)
    {
      do
      {
        unint64_t v16 = *(std::__shared_weak_count **)(v13 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v13 -= 16;
      }
      while (v13 != v12);
      int8x16_t v14 = (void *)*((void *)this + 18);
    }
    *((void *)this + 19) = v12;
    operator delete(v14);
  }
  int32x4_t v17 = (void *)*((void *)this + 15);
  if (v17)
  {
    *((void *)this + 16) = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 12);
  if (v18)
  {
    *((void *)this + 13) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *((void *)this + 7);
  if (v19)
  {
    uint64_t v20 = *((void *)this + 8);
    unint64_t v21 = (void *)*((void *)this + 7);
    if (v20 != v19)
    {
      do
      {
        if (*(char *)(v20 - 1) < 0) {
          operator delete(*(void **)(v20 - 24));
        }
        v20 -= 24;
      }
      while (v20 != v19);
      unint64_t v21 = (void *)*((void *)this + 7);
    }
    *((void *)this + 8) = v19;
    operator delete(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  int v23 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v23)
  {
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeBnnsGraphContextBasedOnE5InputPorts(E5RT::Ops::BnnsCpuInferenceOperation::Impl *this)
{
  uint64_t v1 = this;
  if (*((void *)this + 13) != *((void *)this + 12))
  {
    unint64_t v2 = 0;
    long long v3 = &__p[1];
    uint64_t v4 = 16;
    do
    {
      E5RT::IOPort::GetPortDescriptor(*(E5RT::IOPort **)(*((void *)v1 + 18) + 16 * v2), __p);
      unint64_t v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(__p[0]);
      uint64_t v6 = (std::__shared_weak_count *)__p[1];
      if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      if (!v5)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "ReshapeBnnsGraphContextBasedOnE5InputPorts");
        std::string::basic_string[abi:ne180100]<0>(&__dst, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
        E5RT::Status::Status(v81, 6, &__dst);
        E5RT::E5RTError::E5RTError(exception, __p, v81);
      }
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      *(_OWORD *)std::__fs::filesystem::path __p = 0u;
      uint64_t v7 = *(const char **)(*((void *)v1 + 21) + 8 * v2);
      size_t v8 = strlen(v7);
      if (v8 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v9 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v11 = v8 | 7;
        }
        uint64_t v12 = v4;
        uint64_t v13 = v1;
        int8x16_t v14 = v3;
        uint64_t v15 = v11 + 1;
        p_dst = (std::string *)operator new(v11 + 1);
        unint64_t v16 = v15 | 0x8000000000000000;
        long long v3 = v14;
        uint64_t v1 = v13;
        uint64_t v4 = v12;
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v16;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
        p_dst = &__dst;
        if (!v8) {
          goto LABEL_16;
        }
      }
      memmove(p_dst, v7, v9);
LABEL_16:
      p_dst->__r_.__value_.__s.__data_[v9] = 0;
      sub_19231FEF8((uint64_t)__p, v5);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      int32x4_t v17 = (_OWORD *)(*((void *)v1 + 12) + 176 * v2);
      long long v18 = *(_OWORD *)__p;
      long long v19 = v84;
      v17[1] = v83;
      v17[2] = v19;
      _OWORD *v17 = v18;
      long long v20 = v85;
      long long v21 = v86;
      long long v22 = v88;
      v17[5] = v87;
      v17[6] = v22;
      void v17[3] = v20;
      v17[4] = v21;
      long long v23 = v89;
      long long v24 = v90;
      long long v25 = v92;
      v17[9] = v91;
      v17[10] = v25;
      v17[7] = v23;
      v17[8] = v24;
      *(void *)(*((void *)v1 + 24) + 16 * v2) = E5RT::TensorDescriptor::GetRank(v5);
      unint64_t Rank = E5RT::TensorDescriptor::GetRank(v5);
      uint64_t v27 = *((void *)v1 + 27);
      uint64_t v28 = v27 + (v2 << 6);
      v29.i64[0] = -1;
      v29.i64[1] = -1;
      if (Rank)
      {
        unint64_t v30 = (Rank - 1) & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v31 = (void *)(v27 + (v2 << 6));
        size_t v32 = v3;
        if (v30 < 3) {
          goto LABEL_63;
        }
        unint64_t v33 = v30 + 1;
        uint64_t v34 = v33 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v31 = (void *)(v28 + v34 * 8);
        size_t v32 = &v3[v34];
        uint64_t v35 = (int8x16_t *)(v27 + v4);
        uint64_t v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
        unint64_t v37 = (int8x16_t *)((char *)&v83 + 8);
        do
        {
          int8x16_t v38 = vbicq_s8(*v37, (int8x16_t)vceqq_s64(*(int64x2_t *)v37, v29));
          v35[-1] = vbicq_s8(v37[-1], (int8x16_t)vceqq_s64((int64x2_t)v37[-1], v29));
          int8x16_t *v35 = v38;
          v37 += 2;
          v35 += 2;
          v36 -= 4;
        }
        while (v36);
        if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_63:
          do
          {
            uint64_t v40 = (uint64_t)*v32++;
            uint64_t v39 = v40;
            if (v40 == -1) {
              uint64_t v39 = 0;
            }
            *v31++ = v39;
          }
          while (v32 != &v3[Rank]);
        }
      }
      *(void *)(*((void *)v1 + 24) + 16 * v2++ + 8) = v28;
      v4 += 64;
    }
    while (v2 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)v1 + 13) - *((void *)v1 + 12)) >> 4));
  }
  if ((BNNSGraphContextSetDynamicShapes_v2() & 0x80000000) != 0)
  {
    int v78 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "ReshapeBnnsGraphContextBasedOnE5InputPorts");
    E5Common::StringUtils::SummarizeBNNSErrorMessages("Error(s) occurred reshaping a BNNS Op:\n", (uint64_t *)v1 + 7, &__dst);
    E5RT::Status::Status(v81, 11, &__dst);
    E5RT::E5RTError::E5RTError(v78, __p, v81);
  }
  uint64_t v41 = *((void *)v1 + 7);
  for (uint64_t i = *((void *)v1 + 8); i != v41; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *((void *)v1 + 8) = v41;
  uint64_t result = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v1);
  if (*(void *)(result + 24))
  {
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(**((E5RT::IOPortImpl ****)v1 + 18));
    uint64_t v45 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
    if (!v45)
    {
      uint64_t v80 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "ReshapeBnnsGraphContextBasedOnE5InputPorts");
      std::string::basic_string[abi:ne180100]<0>(&__dst, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
      E5RT::Status::Status(v81, 6, &__dst);
      E5RT::E5RTError::E5RTError(v80, __p, v81);
    }
    int v46 = v45;
    uint64_t v47 = *((void *)v1 + 12);
    uint64_t v48 = *(int8x16_t **)(*((void *)v1 + 24) + 8);
    unint64_t v49 = E5RT::TensorDescriptor::GetRank(v45);
    uint64_t v50 = v47 + 8;
    if (v49)
    {
      unint64_t v51 = (v49 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v52 = (void *)(v47 + 8);
      uint64_t v53 = (uint64_t *)v48;
      if (v51 < 3) {
        goto LABEL_64;
      }
      unint64_t v54 = v51 + 1;
      uint64_t v55 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v52 = (void *)(v50 + v55 * 8);
      uint64_t v53 = &v48->i64[v55];
      uint64_t v56 = v48 + 1;
      id v57 = (int8x16_t *)(v47 + 24);
      uint64_t v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      v59.i64[0] = -1;
      v59.i64[1] = -1;
      do
      {
        int8x16_t v60 = vbicq_s8(*v56, (int8x16_t)vceqq_s64(*(int64x2_t *)v56, v59));
        v57[-1] = vbicq_s8(v56[-1], (int8x16_t)vceqq_s64((int64x2_t)v56[-1], v59));
        *id v57 = v60;
        v56 += 2;
        v57 += 2;
        v58 -= 4;
      }
      while (v58);
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_64:
        do
        {
          uint64_t v62 = *v53++;
          uint64_t v61 = v62;
          if (v62 == -1) {
            uint64_t v61 = 0;
          }
          *v52++ = v61;
        }
        while (v53 != (uint64_t *)((char *)v48 + 8 * v49));
      }
    }
    E5RT::TensorDescriptor::GetTensorDataType(v46, (E5RT::TensorDataType *)v81);
    unint64_t v63 = E5RT::TensorDescriptor::GetRank(v46);
    unint64_t v64 = v63;
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v83 = 0;
    if (v63)
    {
      if (v63 >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v65 = v63;
      uint64_t v66 = (uint64_t *)operator new(8 * v63);
      __p[0] = v66;
      *(void *)&long long v83 = &v66[v65];
      bzero(v66, 8 * v64);
      __p[1] = &v66[v65];
      unint64_t v67 = (v64 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v67 >= 5)
      {
        int v68 = (uint64_t *)(v47 + 8);
        if ((unint64_t)v66 - v47 - 8 >= 0x20)
        {
          unint64_t v69 = v67 + 1;
          uint64_t v70 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          int v68 = (uint64_t *)(v50 + v70 * 8);
          id v71 = &v66[v70];
          uint64_t v72 = (int8x16_t *)(v66 + 2);
          v73 = (int8x16_t *)(v47 + 24);
          uint64_t v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            int8x16_t v75 = vorrq_s8(*v73, (int8x16_t)vceqzq_s64(*(int64x2_t *)v73));
            v72[-1] = vorrq_s8(v73[-1], (int8x16_t)vceqzq_s64((int64x2_t)v73[-1]));
            *uint64_t v72 = v75;
            v72 += 2;
            v73 += 2;
            v74 -= 4;
          }
          while (v74);
          uint64_t v66 = v71;
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_54;
          }
        }
      }
      else
      {
        int v68 = (uint64_t *)(v47 + 8);
      }
      do
      {
        uint64_t v77 = *v68++;
        uint64_t v76 = v77;
        if (!v77) {
          uint64_t v76 = -1;
        }
        *v66++ = v76;
      }
      while (v68 != (uint64_t *)(v50 + v65 * 8));
    }
LABEL_54:
    E5RT::TensorDescriptor::CreateTensorDesc((int)__p, v81);
  }
  return result;
}

void sub_19231FCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v34 = a26;
  a26 = 0;
  if (v34) {
    std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::operator()(v34);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a24);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v32 - 120);
  _Unwind_Resume(a1);
}

unint64_t sub_19231FEF8(uint64_t a1, E5RT::TensorDescriptor *this)
{
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  if (E5RT::TensorDescriptor::GetRank(this) >= 9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "TensorDescriptorToBnns");
    std::operator+<char>();
    long long v18 = std::string::append(&v22, "' is too high rank to use with BNNS");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v18->__r_.__value_.__r.__words[2];
    long long v24 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v23, 6, &v24);
    E5RT::E5RTError::E5RTError(exception, v26, v23);
  }
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v6 = *TensorShape;
  if (TensorShape[1] != *TensorShape)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v6 + 8 * v7);
      if (v8 == -1) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v8;
      }
      if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) >= 2
        && v7 == E5RT::TensorDescriptor::GetComponentAxis(this))
      {
        v9 *= E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
      }
      *(void *)(a1 + 8 + 8 * v7++) = v9;
      uint64_t v6 = *TensorShape;
    }
    while (v7 < (TensorShape[1] - *TensorShape) >> 3);
  }
  switch(E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)TensorDataTypeRef))
  {
    case 0u:
    case 2u:
      LOBYTE(v10) = E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) - 1;
      if (v10 >= 8u || ((0x8Bu >> v10) & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v10 = (char)v10;
      uint64_t v11 = "\b";
      goto LABEL_18;
    case 1u:
    case 3u:
      LOBYTE(v10) = E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) - 1;
      if (v10 >= 8u || ((0x8Bu >> v10) & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v10 = (char)v10;
      uint64_t v11 = (const char *)&unk_192DAF4EC;
LABEL_18:
      int v12 = *(_DWORD *)&v11[4 * v10];
      break;
    case 4u:
      int v12 = 65552;
      Componentunint64_t Size = E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef);
      if (ComponentSize == 2) {
        break;
      }
      if (ComponentSize != 4)
      {
LABEL_27:
        long long v20 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v26, "TensorDataTypeToBnns");
        std::string::basic_string[abi:ne180100]<0>(&v24, "Unhandled data type in TensorDataTypeToBnns");
        E5RT::Status::Status(&v22, 6, &v24);
        E5RT::E5RTError::E5RTError(v20, v26, &v22);
      }
      int v12 = 65568;
      break;
    default:
      goto LABEL_27;
  }
  *(_DWORD *)(a1 + 144) = v12;
  if (E5RT::TensorDescriptor::HasKnownShape(this))
  {
    unint64_t v13 = sub_192325B44(v12);
    TensorStrides = (char **)E5RT::TensorDescriptor::GetTensorStrides(this);
    sub_1923203D8((unint64_t *)(a1 + 72), *TensorStrides, TensorStrides[1], v13);
  }
  unint64_t result = E5RT::TensorDescriptor::GetRank(this);
  if (result >= 9)
  {
    long long v21 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "TensorDescriptorToBnns");
    std::string::basic_string[abi:ne180100]<0>(&v24, "Unhandled tensor rank in TensorDescriptorToBnns (this is probably an E5RT defect, please file a radar)");
    E5RT::Status::Status(&v22, 6, &v24);
    E5RT::E5RTError::E5RTError(v21, v26, &v22);
  }
  *(_DWORD *)(a1 + 4) = dword_192DAF50C[result];
  return result;
}

void sub_1923202A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v28 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_1923203D8(unint64_t *a1, char *a2, char *a3, unint64_t a4)
{
  memset(&v29, 0, sizeof(v29));
  int64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = a3;
    uint64_t v9 = operator new(a3 - a2);
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v29.__r_.__value_.__r.__words[2] = (std::string::size_type)v9 + 8 * (v4 >> 3);
    memcpy(v9, a2, v4);
    v29.__r_.__value_.__l.__size_ = v29.__r_.__value_.__r.__words[2];
    do
    {
      unint64_t v12 = *((void *)v6 - 1);
      v6 -= 8;
      unint64_t v11 = v12;
      if (v12 == 0x7FFFFFFFFFFFFFFFLL)
      {
        unint64_t v10 = 0x8000000000000000;
      }
      else
      {
        unint64_t v10 = v11 / a4;
        if (v11 % a4)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          v40[23] = 10;
          strcpy(v40, "operator()");
          std::operator+<char>();
          int8x16_t v14 = std::string::append(&v32, "' strides (");
          long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v33.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          E5Common::StringUtils::IntsVectorToString<long>(&v29, &v31);
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v16 = &v31;
          }
          else {
            unint64_t v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
          }
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v31.__r_.__value_.__l.__size_;
          }
          long long v18 = std::string::append(&v33, (const std::string::value_type *)v16, size);
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          long long v20 = std::string::append(&v34, ") are not a multiple of the element size (");
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v30, a4);
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v22 = &v30;
          }
          else {
            std::string v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
          }
          if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v23 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v23 = v30.__r_.__value_.__l.__size_;
          }
          long long v24 = std::string::append(&v35, (const std::string::value_type *)v22, v23);
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v36.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          uint64_t v26 = std::string::append(&v36, "). The E5 BNNS backend requires that all strides are a multiple of element size.");
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          std::string::size_type v38 = v26->__r_.__value_.__r.__words[2];
          long long v37 = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          E5RT::Status::Status(v39, 2, &v37);
          E5RT::E5RTError::E5RTError(exception, v40, v39);
        }
      }
      *a1++ = v10;
    }
    while (v6 != a2);
    operator delete(v9);
  }
}

void sub_192320684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::BnnsCpuInferenceOperation::Impl::PrepareOpForEncode(E5RT::Ops::BnnsCpuInferenceOperation::Impl *this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this)) {
    return;
  }
  BYTE7(v266) = 4;
  strcpy((char *)__p, "e5rt");
  unint64_t v2 = E5RT::GetE5RTLog((uint64_t)__p);
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  if (SBYTE7(v266) < 0) {
    operator delete(__p[0]);
  }
  BYTE7(v266) = 4;
  strcpy((char *)__p, "e5rt");
  int64_t v4 = E5RT::GetE5RTLog((uint64_t)__p);
  if (SBYTE7(v266) < 0)
  {
    operator delete(__p[0]);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_10;
    }
  }
  else if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_10;
  }
  if (os_signpost_enabled(v4))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1920CB000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "BnnsCpuOpPrepareForEncode", (const char *)&unk_192F346DB, (uint8_t *)__p, 2u);
  }
LABEL_10:

  v264[0] = MEMORY[0x1E4F143A8];
  v264[1] = 3221225472;
  v264[2] = sub_1923231D8;
  v264[3] = &__block_descriptor_48_e5_v8__0l;
  v264[4] = this;
  v264[5] = v3;
  uint64_t v5 = MEMORY[0x192FF2250](v264);
  uint64_t v6 = (unsigned __int8 *)*((void *)this + 1);
  int v7 = *v6;
  v252 = (void (**)(void))v5;
  if (v7 == 2)
  {
    uint64_t v8 = 1;
    uint64_t v9 = (const char *)(v6 + 16);
    if (((char)v6[39] & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v7 != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v288, "Invalid E5 bundle resource path for BNNS op.");
    E5RT::Status::Status(&__dst, 2, &v288);
    E5RT::E5RTError::E5RTError(exception, __p, &__dst);
  }
  uint64_t v8 = 0;
  uint64_t v9 = (const char *)(v6 + 16);
  if ((char)v6[39] < 0) {
LABEL_15:
  }
    uint64_t v9 = *(const char **)v9;
LABEL_16:
  unint64_t v10 = (long long *)*((void *)v6 + 1);
  size_t v11 = strlen(v9);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v13 = operator new(v14 + 1);
    __p[1] = v12;
    *(void *)&long long v266 = v15 | 0x8000000000000000;
    __p[0] = v13;
  }
  else
  {
    BYTE7(v266) = v11;
    unint64_t v13 = __p;
    if (!v11) {
      goto LABEL_24;
    }
  }
  memmove(v13, v9, (size_t)v12);
LABEL_24:
  *((unsigned char *)v12 + (void)v13) = 0;
  sub_192323318((uint64_t *)&v288, v10, (uint64_t *)__p, v8);
  long long v16 = v288;
  long long v288 = 0uLL;
  int32x4_t v17 = (std::__shared_weak_count *)*((void *)this + 4);
  *(_OWORD *)((char *)this + 24) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    long long v18 = (std::__shared_weak_count *)*((void *)&v288 + 1);
    if (!*((void *)&v288 + 1))
    {
LABEL_28:
      if ((SBYTE7(v266) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
  }
  else
  {
    long long v18 = (std::__shared_weak_count *)*((void *)&v288 + 1);
    if (!*((void *)&v288 + 1)) {
      goto LABEL_28;
    }
  }
  if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (SBYTE7(v266) < 0) {
LABEL_29:
  }
    operator delete(__p[0]);
LABEL_30:
  long long v19 = (const void *)*((void *)this + 3);
  long long v20 = (std::__shared_weak_count *)*((void *)this + 4);
  v262 = v19;
  v263 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = E5RT::SharedResource::GetResourceHandle<E5Common::AutoResourcePtr &>(v19);
  (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
  (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v22 = BNNSGraphContextMake();
  *((void *)this + 5) = v22;
  *((void *)this + 6) = v23;
  if (!v22)
  {
    v212 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v288, "Could not load compiled BNNS graph IR into a BNNS graph context.");
    E5RT::Status::Status(&__dst, 2, &v288);
    E5RT::E5RTError::E5RTError(v212, __p, &__dst);
  }
  if (BNNSGraphContextSetArgumentType())
  {
    v213 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v288, "Could not set BNNS graph context argument type to NDArray.");
    E5RT::Status::Status(&__dst, 2, &v288);
    E5RT::E5RTError::E5RTError(v213, __p, &__dst);
  }
  *((void *)this + 10) = 24;
  *((void *)this + 11) = (char *)this + 56;
  if (BNNSGraphContextSetMessageLogCallback())
  {
    v214 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v288, "Could not set BNNS graph context logging callback.");
    E5RT::Status::Status(&__dst, 2, &v288);
    E5RT::E5RTError::E5RTError(v214, __p, &__dst);
  }
  uint64_t InputCount = BNNSGraphGetInputCount();
  unint64_t OutputCount = BNNSGraphGetOutputCount();
  if (InputCount != *(void *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                               + 24))
  {
    v215 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v288, "BNNS IR input count doesn't match E5 input count");
    E5RT::Status::Status(&__dst, 2, &v288);
    E5RT::E5RTError::E5RTError(v215, __p, &__dst);
  }
  if (OutputCount != *(void *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                                + 24))
  {
    v216 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(&v288, "BNNS IR output count doesn't match E5 output count");
    E5RT::Status::Status(&__dst, 2, &v288);
    E5RT::E5RTError::E5RTError(v216, __p, &__dst);
  }
  uint64_t v26 = *((void *)this + 12);
  long long v27 = (char *)this + 96;
  unint64_t v28 = 0x2E8BA2E8BA2E8BA3 * ((*((void *)this + 13) - v26) >> 4);
  unint64_t v254 = OutputCount + InputCount;
  if (OutputCount + InputCount <= v28)
  {
    if (OutputCount + InputCount < v28) {
      *((void *)this + 13) = v26 + 176 * v254;
    }
  }
  else
  {
    std::vector<BNNSNDArrayDescriptor>::__append((char **)this + 12, OutputCount + InputCount - v28);
  }
  uint64_t v29 = *((void *)this + 18);
  uint64_t v30 = *((void *)this + 19);
  std::string v31 = (uint64_t *)((char *)this + 144);
  unint64_t v32 = (v30 - v29) >> 4;
  unint64_t v33 = v254 - v32;
  unint64_t v256 = OutputCount;
  if (v254 <= v32)
  {
    if (v254 < v32)
    {
      for (uint64_t i = v29 + 16 * v254; v30 != i; v30 -= 16)
      {
        std::string v35 = *(std::__shared_weak_count **)(v30 - 8);
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v35->__on_zero_shared)(v35, v33);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      *((void *)this + 19) = i;
      long long v27 = (char *)this + 96;
    }
  }
  else
  {
    std::vector<std::shared_ptr<E5RT::IOPort>>::__append((uint64_t)this + 144, v33);
  }
  uint64_t v36 = *((void *)this + 15);
  unint64_t v37 = (*((void *)this + 16) - v36) >> 4;
  if (v254 <= v37)
  {
    if (v254 < v37) {
      *((void *)this + 16) = v36 + 16 * v254;
    }
  }
  else
  {
    std::vector<bnns_graph_argument_t>::__append((char **)this + 15, v254 - v37);
  }
  uint64_t v38 = *((void *)this + 21);
  uint64_t v39 = (void *)((char *)this + 168);
  unint64_t v40 = (*((void *)this + 22) - v38) >> 3;
  if (v254 <= v40)
  {
    if (v254 < v40) {
      *((void *)this + 22) = v38 + 8 * v254;
    }
  }
  else
  {
    std::vector<char const*>::__append((void **)this + 21, v254 - v40);
  }
  BNNSGraphGetOutputNames_v2();
  BNNSGraphGetInputNames_v2();
  v253 = (uint64_t *)v27;
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
  if (OutputCount)
  {
    long long v42 = (void *)OutputPorts;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    while (1)
    {
      uint64_t v45 = *(const char **)(*v39 + 8 * v44);
      size_t v46 = strlen(v45);
      if (v46 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = (unsigned char *)v46;
      if (v46 >= 0x17) {
        break;
      }
      BYTE7(v266) = v46;
      uint64_t v48 = __p;
      if (v46) {
        goto LABEL_72;
      }
LABEL_73:
      v47[(void)v48] = 0;
      unint64_t v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v42, (uint64_t)__p);
      uint64_t v52 = v51;
      uint64_t v39 = (void *)((char *)this + 168);
      if (!v51) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if ((SBYTE7(v266) & 0x80000000) == 0)
      {
        uint64_t v53 = *v31;
        uint64_t v55 = v51[5];
        uint64_t v54 = v51[6];
        if (!v54) {
          goto LABEL_77;
        }
LABEL_76:
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_77;
      }
      operator delete(__p[0]);
      uint64_t v53 = *v31;
      uint64_t v55 = v52[5];
      uint64_t v54 = v52[6];
      if (v54) {
        goto LABEL_76;
      }
LABEL_77:
      uint64_t v56 = (uint64_t *)(v53 + v43);
      id v57 = (std::__shared_weak_count *)v56[1];
      *uint64_t v56 = v55;
      v56[1] = v54;
      if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      ++v44;
      v43 += 16;
      if (OutputCount == v44) {
        goto LABEL_82;
      }
    }
    uint64_t v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v49 = v46 | 7;
    }
    uint64_t v50 = v49 + 1;
    uint64_t v48 = operator new(v49 + 1);
    __p[1] = v47;
    *(void *)&long long v266 = v50 | 0x8000000000000000;
    __p[0] = v48;
    unint64_t OutputCount = v256;
LABEL_72:
    memmove(v48, v45, (size_t)v47);
    goto LABEL_73;
  }
LABEL_82:
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
  if (OutputCount < v254)
  {
    int64x2_t v59 = (void *)InputPorts;
    uint64_t v60 = 8 * OutputCount;
    uint64_t v61 = 16 * OutputCount;
    while (1)
    {
      uint64_t v62 = *(const char **)(*v39 + v60);
      size_t v63 = strlen(v62);
      if (v63 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      unint64_t v64 = (void *)v63;
      if (v63 >= 0x17)
      {
        uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v63 | 7) != 0x17) {
          uint64_t v66 = v63 | 7;
        }
        uint64_t v67 = v66 + 1;
        uint64_t v65 = operator new(v66 + 1);
        __p[1] = v64;
        *(void *)&long long v266 = v67 | 0x8000000000000000;
        __p[0] = v65;
        unint64_t OutputCount = v256;
      }
      else
      {
        BYTE7(v266) = v63;
        uint64_t v65 = __p;
        if (!v63) {
          goto LABEL_94;
        }
      }
      memmove(v65, v62, (size_t)v64);
LABEL_94:
      *((unsigned char *)v64 + (void)v65) = 0;
      int v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v59, (uint64_t)__p);
      uint64_t v39 = (void *)((char *)this + 168);
      if (!v68) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v69 = *v31;
      uint64_t v71 = v68[5];
      uint64_t v70 = v68[6];
      if (v70) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v72 = (uint64_t *)(v69 + v61);
      v73 = (std::__shared_weak_count *)v72[1];
      *uint64_t v72 = v71;
      v72[1] = v70;
      if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
      if (SBYTE7(v266) < 0)
      {
        operator delete(__p[0]);
        v60 += 8;
        v61 += 16;
        if (!--InputCount) {
          break;
        }
      }
      else
      {
        v60 += 8;
        v61 += 16;
        if (!--InputCount) {
          break;
        }
      }
    }
  }
  uint64_t v74 = *((void *)this + 19);
  if (v74 == *((void *)this + 18))
  {
    uint64_t v80 = *((void *)this + 19);
    if (*(unsigned char *)(*((void *)this + 1) + 40)) {
      goto LABEL_105;
    }
  }
  else
  {
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    do
    {
      uint64_t v78 = *((void *)this + 12) + v76;
      BNNSGraphContextGetTensorDescriptor_v2();
      uint64_t v79 = (void *)(*((void *)this + 15) + v75);
      void *v79 = v78;
      v79[1] = 0;
      ++v77;
      uint64_t v74 = *((void *)this + 18);
      uint64_t v80 = *((void *)this + 19);
      v76 += 176;
      v75 += 16;
    }
    while (v77 < (v80 - v74) >> 4);
    uint64_t v39 = (void *)((char *)this + 168);
    if (*(unsigned char *)(*((void *)this + 1) + 40))
    {
LABEL_105:
      uint64_t v81 = *((void *)this + 24);
      unint64_t v82 = (*((void *)this + 25) - v81) >> 4;
      if (v254 <= v82)
      {
        if (v254 < v82) {
          *((void *)this + 25) = v81 + 16 * v254;
        }
      }
      else
      {
        std::vector<bnns_graph_argument_t>::__append((char **)this + 24, v254 - v82);
      }
      uint64_t v135 = *((void *)this + 27);
      unint64_t v136 = (*((void *)this + 28) - v135) >> 6;
      if (v254 <= v136)
      {
        if (v254 < v136) {
          *((void *)this + 28) = v135 + (v254 << 6);
        }
      }
      else
      {
        std::vector<std::array<unsigned long long,8ul>>::__append((char **)this + 27, v254 - v136);
      }
      v139 = (char *)*((void *)this + 30);
      v138 = (char *)*((void *)this + 31);
      v137 = (void *)((char *)this + 240);
      unint64_t v140 = v138 - v139;
      size_t v141 = OutputCount - (v138 - v139);
      if (OutputCount <= v138 - v139)
      {
        if (OutputCount < v138 - v139) {
          *((void *)this + 31) = &v139[OutputCount];
        }
LABEL_243:
        if (!OutputCount)
        {
LABEL_252:
          E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeBnnsGraphContextBasedOnE5InputPorts(this);
          goto LABEL_253;
        }
LABEL_244:
        uint64_t v201 = 0;
        do
        {
          *(unsigned char *)(*v137 + v201) = 0;
          PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*v31 + 16 * v201));
          v203 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
          v204 = v203;
          if (v203)
          {
            uint64_t TensorShape = (void *)E5RT::TensorDescriptor::GetTensorShape(v203);
            for (unint64_t j = 0; j < E5RT::TensorDescriptor::GetRank(v204); ++j)
            {
              if (*(void *)(*TensorShape + 8 * j) == -1) {
                *(unsigned char *)(*v137 + v201) |= 1 << j;
              }
            }
          }
          ++v201;
        }
        while (v201 != OutputCount);
        goto LABEL_252;
      }
      uint64_t v142 = *((void *)this + 32);
      if (v142 - (uint64_t)v138 >= v141)
      {
        bzero(*((void **)this + 31), OutputCount - (v138 - v139));
        *((void *)this + 31) = &v139[OutputCount];
        goto LABEL_244;
      }
      if ((OutputCount & 0x8000000000000000) != 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v143 = v142 - (void)v139;
      uint64_t v144 = 2 * v143;
      if (2 * v143 <= OutputCount) {
        uint64_t v144 = OutputCount;
      }
      if (v143 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v145 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v145 = v144;
      }
      v146 = operator new(v145);
      v258 = (char *)v146 + v145;
      v147 = (char *)v146 + OutputCount;
      v148 = (char *)v146 + v140;
      bzero((char *)v146 + v140, v141);
      if (v138 == v139)
      {
        v149 = v258;
        v146 = (char *)v146 + v140;
        goto LABEL_241;
      }
      if (v140 < 8)
      {
        v149 = v258;
        goto LABEL_238;
      }
      v149 = v258;
      if ((unint64_t)(v139 - (unsigned char *)v146) >= 0x20)
      {
        if (v140 < 0x20)
        {
          unint64_t v150 = 0;
          goto LABEL_212;
        }
        unint64_t v150 = v140 & 0xFFFFFFFFFFFFFFE0;
        v168 = v138 - 16;
        v169 = (char *)v146 + v138 - 16 - v139;
        unint64_t v170 = v140 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v171 = *(_OWORD *)v168;
          *((_OWORD *)v169 - 1) = *((_OWORD *)v168 - 1);
          *(_OWORD *)v169 = v171;
          v169 -= 32;
          v168 -= 32;
          v170 -= 32;
        }
        while (v170);
        if (v140 == v150) {
          goto LABEL_240;
        }
        if ((v140 & 0x18) != 0)
        {
LABEL_212:
          v148 -= v140 & 0xFFFFFFFFFFFFFFF8;
          v172 = &v138[-v150 - 8];
          v173 = (char *)(v172 - v139);
          unint64_t v174 = v150 - (v140 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v175 = *(void *)v172;
            v172 -= 8;
            *(void *)&v173[(void)v146] = v175;
            v173 -= 8;
            v174 += 8;
          }
          while (v174);
          v138 -= v140 & 0xFFFFFFFFFFFFFFF8;
          if (v140 == (v140 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_240;
          }
          goto LABEL_238;
        }
        v148 -= v150;
        v138 -= v150;
      }
LABEL_238:
      v199 = v148 - 1;
      do
      {
        char v200 = *--v138;
        *v199-- = v200;
      }
      while (v138 != v139);
LABEL_240:
      v138 = v139;
LABEL_241:
      *((void *)this + 30) = v146;
      *((void *)this + 31) = v147;
      *((void *)this + 32) = v149;
      unint64_t OutputCount = v256;
      if (v138) {
        operator delete(v138);
      }
      goto LABEL_243;
    }
  }
  if (v80 != v74)
  {
    unint64_t v83 = 0;
    uint64_t v255 = 0;
    uint64_t v257 = 8;
    while (1)
    {
      long long v84 = *(E5RT::IOPortImpl ***)(v74 + 16 * v83);
      long long v85 = (void *)E5RT::IOPort::GetPortDescriptorRef(v84);
      uint64_t v86 = *v253;
      long long v87 = *(const char **)(*v39 + 8 * v83);
      size_t v88 = strlen(v87);
      if (v88 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v89 = v88;
      if (v88 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v88;
      p_dst = &__dst;
      if (v88) {
        goto LABEL_118;
      }
LABEL_119:
      p_dst->__r_.__value_.__s.__data_[v89] = 0;
      long long v93 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v85);
      v94 = v93;
      if (!v93)
      {
        v231 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "PopulateStridesFromPortDescriptor");
        std::string::basic_string[abi:ne180100]<0>(&v288, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
        E5RT::Status::Status(&v286, 6, &v288);
        E5RT::E5RTError::E5RTError(v231, __p, &v286);
      }
      unint64_t Rank = E5RT::TensorDescriptor::GetRank(v93);
      if (Rank)
      {
        uint64_t v96 = v86 + 176 * v83;
        uint64_t v99 = *(void *)(v96 + 72);
        id v98 = (unint64_t *)(v96 + 72);
        uint64_t v97 = v99;
        if ((v99 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
          goto LABEL_132;
        }
        unint64_t v100 = Rank - 1;
        if (Rank == 1) {
          goto LABEL_133;
        }
        uint64_t v101 = v86 + 176 * v83;
        unint64_t v102 = *(void *)(v101 + 80);
        if (v102 == 0x8000000000000000 || v102 < *(void *)(v101 + 8 * Rank) * v97)
        {
LABEL_132:
          unint64_t v108 = sub_192325B44(*(_DWORD *)(v86 + 176 * v83 + 144));
          TensorStrides = (char **)E5RT::TensorDescriptor::GetTensorStrides(v94);
          sub_1923203D8(v98, *TensorStrides, TensorStrides[1], v108);
        }
        else
        {
          uint64_t v103 = v86 + v255;
          uint64_t v104 = 11;
          while (1)
          {
            unint64_t v105 = v100 - 1;
            if (v100 == 1) {
              break;
            }
            unint64_t v106 = *(void *)(v103 + 8 * v100) * v102;
            unint64_t v102 = *(void *)(v103 + 8 * v104++);
            BOOL v107 = v102 != 0x8000000000000000 && v102 >= v106;
            unint64_t v100 = v105;
            if (!v107)
            {
              if (v104 - 10 >= Rank) {
                break;
              }
              goto LABEL_132;
            }
          }
        }
      }
LABEL_133:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      long long v110 = (void *)E5RT::IOPort::GetPortDescriptorRef(v84);
      uint64_t v111 = *v253;
      long long v112 = *(const char **)(*v39 + 8 * v83);
      size_t v113 = strlen(v112);
      if (v113 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      long long v114 = (void *)v113;
      if (v113 >= 0x17)
      {
        uint64_t v116 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v113 | 7) != 0x17) {
          uint64_t v116 = v113 | 7;
        }
        uint64_t v117 = v116 + 1;
        long long v115 = operator new(v116 + 1);
        v260[1] = v114;
        unint64_t v261 = v117 | 0x8000000000000000;
        v260[0] = v115;
        uint64_t v39 = (void *)((char *)this + 168);
      }
      else
      {
        HIBYTE(v261) = v113;
        long long v115 = v260;
        if (!v113) {
          goto LABEL_143;
        }
      }
      memmove(v115, v112, (size_t)v114);
LABEL_143:
      *((unsigned char *)v114 + (void)v115) = 0;
      v118 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v110);
      if (!v118)
      {
        v230 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "ValidatePortDescriptor");
        std::string::basic_string[abi:ne180100]<0>(&v288, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
        E5RT::Status::Status(&__dst, 6, &v288);
        E5RT::E5RTError::E5RTError(v230, __p, &__dst);
      }
      long long v274 = 0u;
      long long v275 = 0u;
      long long v272 = 0u;
      long long v273 = 0u;
      long long v270 = 0u;
      long long v271 = 0u;
      long long v268 = 0u;
      long long v269 = 0u;
      long long v267 = 0u;
      *(_OWORD *)std::__fs::filesystem::path __p = 0u;
      long long v266 = 0u;
      sub_19231FEF8((uint64_t)__p, v118);
      uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v118);
      int NumComponents = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
      unint64_t v121 = E5RT::TensorDescriptor::GetRank(v118);
      int v122 = *(_DWORD *)(v111 + 176 * v83 + 144);
      if (v274 != v122 && (v274 != 262152 || v122 != 1048584))
      {
        v197 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v288, "DescriptorCompatibility");
        std::string::basic_string[abi:ne180100]<0>(&__dst, "E5RT tensor data type does not match BNNS tensor data type");
        E5RT::Status::Status(&v286, 6, &__dst);
        E5RT::E5RTError::E5RTError(v197, &v288, &v286);
      }
      if (HIDWORD(__p[0]) != *(_DWORD *)(v111 + 176 * v83 + 4))
      {
        v198 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v288, "DescriptorCompatibility");
        std::string::basic_string[abi:ne180100]<0>(&__dst, "E5RT tensor layout does not match BNNS tensor layout");
        E5RT::Status::Status(&v286, 6, &__dst);
        E5RT::E5RTError::E5RTError(v198, &v288, &v286);
      }
      if (v121)
      {
        unint64_t v123 = 0;
        uint64_t v124 = v111;
        uint64_t v125 = v111 + v257;
        int v126 = 1;
        do
        {
          long long v127 = *(void **)(v125 + 8 * v123);
          if (v127 && (v128 = __p[v123 + 1]) != 0)
          {
            if (v128 != v127)
            {
              v151 = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(&v288, "DescriptorCompatibility");
              std::to_string(&v281, v123);
              v152 = std::string::insert(&v281, 0, "E5RT tensor shape does not match BNNS tensor shape at index ");
              long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
              v282.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v153;
              v152->__r_.__value_.__l.__size_ = 0;
              v152->__r_.__value_.__r.__words[2] = 0;
              v152->__r_.__value_.__r.__words[0] = 0;
              v154 = std::string::append(&v282, " (");
              long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
              v283.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v155;
              v154->__r_.__value_.__l.__size_ = 0;
              v154->__r_.__value_.__r.__words[2] = 0;
              v154->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v280, (unint64_t)v128);
              if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v156 = &v280;
              }
              else {
                v156 = (std::string *)v280.__r_.__value_.__r.__words[0];
              }
              if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v280.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v280.__r_.__value_.__l.__size_;
              }
              v158 = std::string::append(&v283, (const std::string::value_type *)v156, size);
              long long v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
              v284.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v284.__r_.__value_.__l.__data_ = v159;
              v158->__r_.__value_.__l.__size_ = 0;
              v158->__r_.__value_.__r.__words[2] = 0;
              v158->__r_.__value_.__r.__words[0] = 0;
              v160 = std::string::append(&v284, " vs ");
              long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
              v285.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v161;
              v160->__r_.__value_.__l.__size_ = 0;
              v160->__r_.__value_.__r.__words[2] = 0;
              v160->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v279, *(void *)(v124 + v257 + 8 * v123));
              if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v162 = &v279;
              }
              else {
                v162 = (std::string *)v279.__r_.__value_.__r.__words[0];
              }
              if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v163 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v163 = v279.__r_.__value_.__l.__size_;
              }
              v164 = std::string::append(&v285, (const std::string::value_type *)v162, v163);
              long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
              v286.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v165;
              v164->__r_.__value_.__l.__size_ = 0;
              v164->__r_.__value_.__r.__words[2] = 0;
              v164->__r_.__value_.__r.__words[0] = 0;
              v166 = std::string::append(&v286, ")");
              long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v167;
              v166->__r_.__value_.__l.__size_ = 0;
              v166->__r_.__value_.__r.__words[2] = 0;
              v166->__r_.__value_.__r.__words[0] = 0;
              E5RT::Status::Status(&v277, 6, &__dst);
              E5RT::E5RTError::E5RTError(v151, &v288, &v277);
            }
          }
          else
          {
            int v126 = 0;
          }
          ++v123;
        }
        while (v121 != v123);
        if (v126)
        {
          uint64_t v129 = sub_192325B44(v274);
          if (NumComponents == 1)
          {
            uint64_t v130 = v129;
            uint64_t v131 = v124 + v255;
            uint64_t v132 = 9;
            do
            {
              v133 = *(void **)(v131 + v132 * 8);
              if (v133 != (void *)0x8000000000000000 && *(void *)(v131 + 8 * v121) >= 2uLL)
              {
                v134 = __p[v132];
                if (v134 != v133)
                {
                  v176 = __cxa_allocate_exception(0x18uLL);
                  std::string::basic_string[abi:ne180100]<0>(&v288, "DescriptorCompatibility");
                  std::operator+<char>();
                  v177 = std::string::append(&v280, "' stride does not match BNNS tensor stride at index ");
                  long long v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
                  v281.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v281.__r_.__value_.__l.__data_ = v178;
                  v177->__r_.__value_.__l.__size_ = 0;
                  v177->__r_.__value_.__r.__words[2] = 0;
                  v177->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v279, v121 - 1);
                  if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v179 = &v279;
                  }
                  else {
                    v179 = (std::string *)v279.__r_.__value_.__r.__words[0];
                  }
                  if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v180 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v180 = v279.__r_.__value_.__l.__size_;
                  }
                  v181 = std::string::append(&v281, (const std::string::value_type *)v179, v180);
                  long long v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
                  v282.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v182;
                  v181->__r_.__value_.__l.__size_ = 0;
                  v181->__r_.__value_.__r.__words[2] = 0;
                  v181->__r_.__value_.__r.__words[0] = 0;
                  v183 = std::string::append(&v282, " (");
                  long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
                  v283.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v184;
                  v183->__r_.__value_.__l.__size_ = 0;
                  v183->__r_.__value_.__r.__words[2] = 0;
                  v183->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v277, (void)v134 * v130);
                  if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v185 = &v277;
                  }
                  else {
                    v185 = (std::string *)v277.__r_.__value_.__r.__words[0];
                  }
                  if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v186 = HIBYTE(v277.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v186 = v277.__r_.__value_.__l.__size_;
                  }
                  v187 = std::string::append(&v283, (const std::string::value_type *)v185, v186);
                  long long v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
                  v284.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v284.__r_.__value_.__l.__data_ = v188;
                  v187->__r_.__value_.__l.__size_ = 0;
                  v187->__r_.__value_.__r.__words[2] = 0;
                  v187->__r_.__value_.__r.__words[0] = 0;
                  v189 = std::string::append(&v284, " vs ");
                  long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
                  v285.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v190;
                  v189->__r_.__value_.__l.__size_ = 0;
                  v189->__r_.__value_.__r.__words[2] = 0;
                  v189->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v276, *(void *)(v124 + v255 + v132 * 8) * v130);
                  if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v191 = &v276;
                  }
                  else {
                    v191 = (std::string *)v276.__r_.__value_.__r.__words[0];
                  }
                  if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v192 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v192 = v276.__r_.__value_.__l.__size_;
                  }
                  v193 = std::string::append(&v285, (const std::string::value_type *)v191, v192);
                  long long v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
                  v286.__r_.__value_.__r.__words[2] = v193->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v194;
                  v193->__r_.__value_.__l.__size_ = 0;
                  v193->__r_.__value_.__r.__words[2] = 0;
                  v193->__r_.__value_.__r.__words[0] = 0;
                  v195 = std::string::append(&v286, ").");
                  long long v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
                  __dst.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v196;
                  v195->__r_.__value_.__l.__size_ = 0;
                  v195->__r_.__value_.__r.__words[2] = 0;
                  v195->__r_.__value_.__r.__words[0] = 0;
                  E5RT::Status::Status(v278, 6, &__dst);
                  E5RT::E5RTError::E5RTError(v176, &v288, v278);
                }
              }
              ++v132;
              --v121;
            }
            while (v121);
          }
        }
      }
      else
      {
        sub_192325B44(v274);
      }
      if (SHIBYTE(v261) < 0) {
        operator delete(v260[0]);
      }
      ++v83;
      uint64_t v74 = *((void *)this + 18);
      v255 += 176;
      v257 += 176;
      if (v83 >= (*((void *)this + 19) - v74) >> 4) {
        goto LABEL_253;
      }
    }
    uint64_t v91 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v91 = v88 | 7;
    }
    uint64_t v92 = v91 + 1;
    p_dst = (std::string *)operator new(v91 + 1);
    __dst.__r_.__value_.__l.__size_ = v89;
    __dst.__r_.__value_.__r.__words[2] = v92 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    uint64_t v39 = (void *)((char *)this + 168);
LABEL_118:
    memmove(p_dst, v87, v89);
    goto LABEL_119;
  }
LABEL_253:
  uint64_t v207 = *((void *)this + 1);
  uint64_t v209 = *(void *)(v207 + 48);
  uint64_t v208 = *(void *)(v207 + 56);
  uint64_t v210 = v208 - v209;
  v211 = v252;
  if (v208 != v209)
  {
    unint64_t FunctionCount = BNNSGraphGetFunctionCount();
    unint64_t v218 = FunctionCount;
    if (FunctionCount == -1)
    {
      v236 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(&v288, "Unable to query # of BNNS functions.");
      E5RT::Status::Status(&__dst, 8, &v288);
      E5RT::E5RTError::E5RTError(v236, __p, &__dst);
    }
    unint64_t v219 = 0xAAAAAAAAAAAAAAABLL * (v210 >> 3) + 1;
    if (v219 > FunctionCount)
    {
      v237 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
      std::to_string(&v284, v219);
      v238 = std::string::insert(&v284, 0, "Expected at least ");
      long long v239 = *(_OWORD *)&v238->__r_.__value_.__l.__data_;
      v285.__r_.__value_.__r.__words[2] = v238->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v239;
      v238->__r_.__value_.__l.__size_ = 0;
      v238->__r_.__value_.__r.__words[2] = 0;
      v238->__r_.__value_.__r.__words[0] = 0;
      v240 = std::string::append(&v285, " callables in BNNS graph, found ");
      long long v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
      v286.__r_.__value_.__r.__words[2] = v240->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v241;
      v240->__r_.__value_.__l.__size_ = 0;
      v240->__r_.__value_.__r.__words[2] = 0;
      v240->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v283, v218);
      if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v242 = &v283;
      }
      else {
        v242 = (std::string *)v283.__r_.__value_.__r.__words[0];
      }
      if ((v283.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v243 = HIBYTE(v283.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v243 = v283.__r_.__value_.__l.__size_;
      }
      v244 = std::string::append(&v286, (const std::string::value_type *)v242, v243);
      long long v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v244->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v245;
      v244->__r_.__value_.__l.__size_ = 0;
      v244->__r_.__value_.__r.__words[2] = 0;
      v244->__r_.__value_.__r.__words[0] = 0;
      v246 = std::string::append(&__dst, " instead.");
      long long v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
      std::string::size_type v289 = v246->__r_.__value_.__r.__words[2];
      long long v288 = v247;
      v246->__r_.__value_.__l.__size_ = 0;
      v246->__r_.__value_.__r.__words[2] = 0;
      v246->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(&v282, 2, &v288);
      E5RT::E5RTError::E5RTError(v237, __p, &v282);
    }
    std::vector<char const*>::vector(__p, FunctionCount);
    if (BNNSGraphGetFunctionNames())
    {
      v248 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v288, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(&__dst, "Unable to query BNNS for function names.");
      E5RT::Status::Status(&v286, 8, &__dst);
      E5RT::E5RTError::E5RTError(v248, &v288, &v286);
    }
    if (v218)
    {
      uint64_t v220 = 0;
      v221 = (unsigned __int8 *)(*((void *)this + 1) + 16);
      do
      {
        while (1)
        {
          v222 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v288, *((char **)__p[0] + v220));
          if (!std::operator==[abi:ne180100]<std::allocator<char>>(v222, v221)
            && *(void *)(v207 + 56) == std::find[abi:ne180100]<std::__wrap_iter<std::string const*>,std::string>(*(void *)(v207 + 48), *(void *)(v207 + 56), (unsigned __int8 **)&v288))
          {
            v232 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(&__dst, "PrepareOpForEncode");
            std::operator+<char>();
            v233 = std::string::append(&v285, " is not part of base or possible callee names.");
            long long v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
            v286.__r_.__value_.__r.__words[2] = v233->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v234;
            v233->__r_.__value_.__l.__size_ = 0;
            v233->__r_.__value_.__r.__words[2] = 0;
            v233->__r_.__value_.__r.__words[0] = 0;
            E5RT::Status::Status(&v284, 2, &v286);
            E5RT::E5RTError::E5RTError(v232, &__dst, &v284);
          }
          if (SHIBYTE(v289) < 0) {
            break;
          }
          if (v218 == ++v220) {
            goto LABEL_272;
          }
        }
        operator delete((void *)v288);
        ++v220;
      }
      while (v218 != v220);
    }
LABEL_272:
    if (*((void *)this + 36))
    {
      long long v288 = 0uLL;
      std::string::size_type v289 = 0;
      for (k = (uint64_t *)*((void *)this + 35); k; k = (uint64_t *)*k)
      {
        std::string::size_type v224 = (std::string::size_type)(k + 2);
        if (*((char *)k + 39) < 0) {
          std::string::size_type v224 = k[2];
        }
        sub_192323318((uint64_t *)&v286, (long long *)(k + 5), k + 2, 0);
        v225 = (const void *)v286.__r_.__value_.__r.__words[0];
        long long v259 = *(_OWORD *)&v286.__r_.__value_.__l.__data_;
        if (v286.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v286.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        sub_192323530(v225);
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&v259);
        std::string::size_type v226 = BNNSGraphContextMake();
        __dst.__r_.__value_.__r.__words[0] = v224;
        __dst.__r_.__value_.__l.__size_ = v226;
        __dst.__r_.__value_.__r.__words[2] = v227;
        std::vector<function_graph_map_t>::push_back[abi:ne180100]((void **)&v288, (long long *)&__dst);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(k + 2);
        v228 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 304, (uint64_t)(k + 2), (uint64_t)&std::piecewise_construct, (long long **)&__dst);
        std::shared_ptr<E5RT::SharedResource>::operator=[abi:ne180100]((uint64_t)(v228 + 5), (long long *)&v286);
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&v286);
      }
      int v229 = BNNSGraphContextReplaceFunctions();
      if (v229)
      {
        v249 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__dst, "PrepareOpForEncode");
        std::to_string(&v285, v229);
        v250 = std::string::insert(&v285, 0, "BNNSGraphContextReplaceFunctions failed with error num = ");
        long long v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
        v286.__r_.__value_.__r.__words[2] = v250->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v251;
        v250->__r_.__value_.__l.__size_ = 0;
        v250->__r_.__value_.__r.__words[2] = 0;
        v250->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v284, 11, &v286);
        E5RT::E5RTError::E5RTError(v249, &__dst, &v284);
      }
      if ((void)v288)
      {
        *((void *)&v288 + 1) = v288;
        operator delete((void *)v288);
      }
      v211 = v252;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v211[2](v211);
}

void sub_192322698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (**a12)(void), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
  unint64_t v33 = *(void **)(v31 - 128);
  if (v33)
  {
    *(void *)(v31 - 120) = v33;
    operator delete(v33);
  }
  if (__p) {
    operator delete(__p);
  }
  a12[2](a12);

  _Unwind_Resume(a1);
}

void sub_1923231D8(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  char v8 = 4;
  strcpy(__p, "e5rt");
  os_signpost_id_t v3 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v8 < 0)
  {
    operator delete(*(void **)__p);
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  else
  {
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  if (os_signpost_enabled(v3))
  {
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v6 = (void *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::__fs::filesystem::path __p = 136315138;
    *(void *)&__p[4] = v6;
    _os_signpost_emit_with_name_impl(&dword_1920CB000, v3, OS_SIGNPOST_INTERVAL_END, v4, "BnnsCpuOpPrepareForEncode", "FunctionName=%{signpost.description:attribute}s ", __p, 0xCu);
  }
LABEL_9:
}

void sub_1923232FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192323318(uint64_t *a1, long long *a2, uint64_t *a3, uint64_t a4)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  v19[0] = E5Common::kBnnsGraphPrecompiledStrKey[0];
  int v7 = [NSNumber numberWithBool:a4];
  v20[0] = v7;
  v19[1] = E5Common::kBnnsGraphFunctionNameStrKey[0];
  char v8 = NSString;
  int v9 = *((char *)a3 + 23);
  unint64_t v10 = (uint64_t *)*a3;
  uint64_t v11 = [NSString defaultCStringEncoding];
  if (v9 >= 0) {
    unint64_t v12 = a3;
  }
  else {
    unint64_t v12 = v10;
  }
  unint64_t v13 = [v8 stringWithCString:v12 encoding:v11];
  v20[1] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:2];

  uint64_t SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(v15);
  char v18 = 0;
  LOBYTE(__p) = 0;
  E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, a2, 2, (uint64_t *)&__p, v14, a1);
  if (v18 < 0) {
    operator delete(__p);
  }
}

void sub_192323460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<E5RT::SharedResource>::operator=[abi:ne180100](uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  os_signpost_id_t v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)unint64_t result = v3;
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

uint64_t sub_192323530(const void *a1)
{
  uint64_t v1 = E5RT::SharedResource::GetResourceHandle<E5Common::AutoResourcePtr &>(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24))(v1);
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  return v2;
}

void sub_1923235A8(int a1, char *__s, const std::string::value_type *a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  size_t v8 = strlen(__s);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v9;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
    p_dst = &__dst;
    if (!v8)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (!a3) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  memcpy(p_dst, __s, v9);
  p_dst->__r_.__value_.__s.__data_[v9] = 0;
  if (a3)
  {
LABEL_10:
    std::string::append(&__dst, "\nOp info: ");
    std::string::append(&__dst, a3);
  }
LABEL_11:
  switch(a1)
  {
    case 1:
      char v24 = 4;
      strcpy(__p, "e5rt");
      uint64_t v15 = E5RT::GetE5RTLog((uint64_t)__p);
      if (v24 < 0) {
        operator delete(*(void **)__p);
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        long long v16 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::__fs::filesystem::path __p = 136315138;
        *(void *)&__p[4] = v16;
        _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "[BnnsCpuInferenceOperation]: %s", __p, 0xCu);
      }
      goto LABEL_21;
    case 2:
    case 8:
      char v24 = 4;
      strcpy(__p, "e5rt");
      unint64_t v13 = E5RT::GetE5RTLog((uint64_t)__p);
      uint64_t v14 = v13;
      if (v24 < 0)
      {
        operator delete(*(void **)__p);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          goto LABEL_29;
        }
      }
      else if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_29;
      }
      sub_1923269E8();
LABEL_29:

      uint64_t v18 = *(void *)(a4 + 8);
      unint64_t v19 = *(void *)(v18 + 8);
      if (v19 >= *(void *)(v18 + 16))
      {
        uint64_t v21 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v18, (uint64_t)&__dst);
      }
      else
      {
        long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(void *)(v19 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v19 = v20;
        memset(&__dst, 0, sizeof(__dst));
        uint64_t v21 = (char *)(v19 + 24);
      }
      *(void *)(v18 + 8) = v21;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_33;
      }
      return;
    case 4:
      char v24 = 4;
      strcpy(__p, "e5rt");
      int32x4_t v17 = E5RT::GetE5RTLog((uint64_t)__p);
      uint64_t v15 = v17;
      if (v24 < 0)
      {
        operator delete(*(void **)__p);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_21;
        }
      }
      else if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_21;
      }
      sub_1923269E8();
LABEL_21:

LABEL_22:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_33:
      }
        operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_22;
  }
}

void sub_1923238D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<char const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1923239BC(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t std::find[abi:ne180100]<std::__wrap_iter<std::string const*>,std::string>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 == a2) {
    return v3;
  }
  char v5 = *((unsigned char *)a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v6 = a3[1];
  }
  if (v5 >= 0) {
    int v7 = (unsigned __int8 *)a3;
  }
  else {
    int v7 = *a3;
  }
  do
  {
    uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
    if ((v8 & 0x80u) == 0) {
      int v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    }
    else {
      int v9 = *(unsigned __int8 **)(v3 + 8);
    }
    if (v9 == v6)
    {
      if ((v8 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
          return v3;
        }
      }
      else
      {
        if (!*(unsigned char *)(v3 + 23)) {
          return v3;
        }
        uint64_t v10 = 0;
        while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
        {
          if (v8 == ++v10) {
            return v3;
          }
        }
      }
    }
    v3 += 24;
  }
  while (v3 != a2);
  return a2;
}

void std::vector<function_graph_map_t>::push_back[abi:ne180100](void **a1, long long *a2)
{
  char v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    long long v6 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v5 = v6;
    int v7 = v5 + 24;
LABEL_3:
    a1[1] = v7;
    return;
  }
  uint64_t v8 = (char *)*a1;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 3);
  if (2 * v11 > v10) {
    unint64_t v10 = 2 * v11;
  }
  if (v11 >= 0x555555555555555) {
    unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v13 = (char *)operator new(24 * v12);
  }
  else
  {
    BOOL v13 = 0;
  }
  BOOL v14 = &v13[24 * v9];
  *(_OWORD *)BOOL v14 = *a2;
  *((void *)v14 + 2) = *((void *)a2 + 2);
  int v7 = v14 + 24;
  if (v5 != v8)
  {
    do
    {
      long long v15 = *(_OWORD *)(v5 - 24);
      *((void *)v14 - 1) = *((void *)v5 - 1);
      *(_OWORD *)(v14 - 24) = v15;
      v14 -= 24;
      v5 -= 24;
    }
    while (v5 != v8);
    char v5 = (char *)*a1;
  }
  *a1 = v14;
  a1[1] = v7;
  a1[2] = &v13[24 * v12];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v7;
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::EncodeOperation(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 144);
  if (*(void *)(this + 152) != v1)
  {
    uint64_t v2 = (void *)this;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      long long v6 = *(E5RT::IOPortImpl ***)(v1 + v4);
      this = E5RT::IOPort::IsDynamic(v6);
      if ((this & 1) == 0)
      {
        MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef(v6);
        this = sub_192323D44(MemoryObjectRef, v2[12] + v3);
      }
      ++v5;
      uint64_t v1 = v2[18];
      v4 += 16;
      v3 += 176;
    }
    while (v5 < (v2[19] - v1) >> 4);
  }
  return this;
}

uint64_t sub_192323D44(void *a1, uint64_t a2)
{
  uint64_t v3 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(a1);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "BindMemoryObjectToBnns");
    std::string::basic_string[abi:ne180100]<0>(v6, "MemoryObjects bound to BNNS op ports must be buffers, not surfaces");
    E5RT::Status::Status(v7, 6, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t result = E5RT::BufferObject::GetDataSpan(v3);
  *(void *)(a2 + 136) = result;
  return result;
}

void sub_192323DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::ResetOperation(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 96);
  uint64_t v2 = *(void *)(this + 104) - v1;
  if (v2)
  {
    unint64_t v3 = v2 / 176;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    if (v3 < 2)
    {
      unint64_t v4 = 0;
LABEL_9:
      unint64_t v7 = v3 - v4;
      uint64_t v8 = (void *)(v1 + 176 * v4 + 136);
      do
      {
        *uint64_t v8 = 0;
        v8 += 22;
        --v7;
      }
      while (v7);
      return this;
    }
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v5 = (void *)(v1 + 312);
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v5 - 22) = 0;
      *unint64_t v5 = 0;
      v5 += 44;
      v6 -= 2;
    }
    while (v6);
    if (v3 != v4) {
      goto LABEL_9;
    }
  }
  return this;
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::ExecuteSync(E5RT::Ops::BnnsCpuInferenceOperation::Impl *this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v57, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(&v53, 2, &__p);
    E5RT::E5RTError::E5RTError(exception, &v57, &v53);
  }
  unint64_t v2 = *(void *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                 + 24);
  if (E5RT::ExecutionStreamOperationInternal::HasDynamicInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this))
  {
    E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeBnnsGraphContextBasedOnE5InputPorts(this);
    if (v2 < (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 4)
    {
      uint64_t v3 = 16 * v2;
      uint64_t v4 = 176 * v2;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = *((void *)this + 18);
        if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v6 + v3)))
        {
          MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef(*(E5RT::IOPortImpl ***)(v6 + v3));
          sub_192323D44(MemoryObjectRef, *((void *)this + 12) + v4);
        }
        ++v5;
        v3 += 16;
        v4 += 176;
      }
      while (v5 < (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 4);
    }
  }
  if (BNNSGraphContextExecute_v2())
  {
    unint64_t v51 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v57, "ExecuteSync");
    E5Common::StringUtils::SummarizeBNNSErrorMessages("Error(s) occurred executing a BNNS Op:\n", (uint64_t *)this + 7, &__p);
    E5RT::Status::Status(&v53, 11, &__p);
    E5RT::E5RTError::E5RTError(v51, &v57, &v53);
  }
  uint64_t v8 = *((void *)this + 7);
  for (uint64_t i = *((void *)this + 8); i != v8; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *((void *)this + 8) = v8;
  uint64_t result = E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
  if (result) {
    BOOL v11 = v2 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 80;
    do
    {
      long long v15 = *(E5RT::IOPortImpl ***)(*((void *)this + 18) + 16 * v13);
      uint64_t result = E5RT::IOPort::IsDynamic(v15);
      if (result)
      {
        uint64_t v16 = *((void *)this + 12);
        if (v15) {
        PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v15);
        }
        uint64_t v18 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
        uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v18);
        unint64_t Rank = E5RT::TensorDescriptor::GetRank(v18);
        uint64_t v58 = 0;
        int64x2_t v59 = 0;
        id v57 = 0;
        if (Rank)
        {
          unint64_t v21 = Rank;
          if ((Rank & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          size_t v22 = 8 * Rank;
          id v57 = (char *)operator new(8 * Rank);
          int64x2_t v59 = &v57[8 * v21];
          memcpy(v57, (const void *)(v16 + 176 * v13 + 8), v22);
          uint64_t v58 = v59;
        }
        unint64_t v23 = E5RT::TensorDescriptor::GetRank(v18);
        if (!v23) {
          goto LABEL_40;
        }
        uint64_t v24 = *(void *)(v16 + 176 * v13 + 72);
        if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          BOOL v25 = v23 < 2;
          unint64_t v26 = v23 - 1;
          if (v23 != 1)
          {
            uint64_t v27 = v16 + 176 * v13;
            unint64_t v28 = *(void *)(v27 + 80);
            if (v28 != 0x8000000000000000 && v28 >= *(void *)(v27 + 8 * v23) * v24)
            {
              uint64_t v29 = v16 + v12;
              uint64_t v30 = 11;
              do
              {
                uint64_t v31 = v30;
                unint64_t v32 = v26 - 1;
                if (v26 == 1) {
                  break;
                }
                unint64_t v33 = *(void *)(v29 + 8 * v26) * v28;
                unint64_t v28 = *(void *)(v29 + 8 * v30++);
                BOOL v34 = v28 != 0x8000000000000000 && v28 >= v33;
                unint64_t v26 = v32;
              }
              while (v34);
              BOOL v25 = v31 - 9 >= v23;
            }
          }
          if (v25)
          {
LABEL_40:
            unint64_t v35 = E5RT::TensorDescriptor::GetRank(v18);
            unint64_t v36 = v35;
            unint64_t v37 = (uint64_t *)(v16 + 176 * v13 + 72);
            memset(&__p, 0, sizeof(__p));
            if (v35)
            {
              if ((v35 & 0x8000000000000000) != 0) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              size_t v38 = 8 * v35;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(8 * v35);
              __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 8 * v36;
              memcpy(__p.__r_.__value_.__l.__data_, v37, v38);
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[2];
            }
            unint64_t v39 = E5RT::TensorDescriptor::GetRank(v18);
            if (v39)
            {
              unint64_t v40 = &v37[v39 - 1];
              if (v40 > v37)
              {
                unint64_t v41 = v16 + v14;
                do
                {
                  uint64_t v42 = *(void *)(v41 - 8);
                  *(void *)(v41 - 8) = *v40;
                  *v40-- = v42;
                  BOOL v34 = v41 >= (unint64_t)v40;
                  v41 += 8;
                }
                while (!v34);
              }
            }
            unint64_t v43 = E5RT::TensorDescriptor::GetRank(v18);
            if (v43)
            {
              uint64_t v44 = (void *)__p.__r_.__value_.__r.__words[0];
              uint64_t v45 = 8 * v43;
              do
              {
                uint64_t v46 = *v37;
                *v44++ = v46 * E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef);
                ++v37;
                v45 -= 8;
              }
              while (v45);
            }
            E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(&v57, &__p, TensorDataTypeRef);
          }
        }
        uint64_t v47 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "ExecuteSync");
        std::to_string(&v52, v13);
        uint64_t v48 = std::string::insert(&v52, 0, "BNNS returned invalid strides for output ");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        std::string::size_type v54 = v48->__r_.__value_.__r.__words[2];
        long long v53 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v55, 2, &v53);
        E5RT::E5RTError::E5RTError(v47, &__p, &v55);
      }
      ++v13;
      v12 += 176;
      v14 += 176;
    }
    while (v13 != v2);
  }
  return result;
}

void sub_19232476C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v39 = *(void **)(v37 - 112);
  if (v39)
  {
    *(void *)(v37 - 104) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeOperationInternal(uint64_t a1, void *a2)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v34, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(v35, 2, v34);
    E5RT::E5RTError::E5RTError(exception, v36, v35);
  }
  uint64_t v4 = a2[3];
  if (v4 != *(void *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                       + 24))
  {
    uint64_t v30 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v36, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v34, "New shapes are required for all inputs during reshape.");
    E5RT::Status::Status(v35, 2, v34);
    E5RT::E5RTError::E5RTError(v30, v36, v35);
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 40))
  {
    for (uint64_t i = (uint64_t **)a2[2]; i; uint64_t i = (uint64_t **)*i)
    {
      if (*(char *)(*(void *)(a1 + 8) + 39) < 0)
      {
        if (*((char *)i + 39) < 0)
        {
LABEL_12:
          uint64_t ArgumentPosition = BNNSGraphContextGetArgumentPosition();
          if (ArgumentPosition == -1)
          {
LABEL_32:
            uint64_t v24 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(v36, "ReshapeOperationInternal");
            std::string::basic_string[abi:ne180100]<0>(v34, "No argument found in BNNS graph for new input descriptor passed to BNNS op reshape");
            E5RT::Status::Status(v35, 2, v34);
            E5RT::E5RTError::E5RTError(v24, v36, v35);
          }
          goto LABEL_13;
        }
      }
      else if (*((char *)i + 39) < 0)
      {
        goto LABEL_12;
      }
      uint64_t ArgumentPosition = BNNSGraphContextGetArgumentPosition();
      if (ArgumentPosition == -1) {
        goto LABEL_32;
      }
LABEL_13:
      unint64_t v7 = *(void **)(*(void *)(a1 + 144) + 16 * ArgumentPosition);
      if (v7)
      {
        unint64_t v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(i[5]);
        if (!v9) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v8 = 0;
        unint64_t v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(i[5]);
        if (!v9)
        {
LABEL_39:
          uint64_t v31 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v36, "ReshapeOperationInternal");
          std::string::basic_string[abi:ne180100]<0>(v34, "E5RT surface descriptor cannot be converted to BNNSNDArrayDescriptor");
          E5RT::Status::Status(v35, 6, v34);
          E5RT::E5RTError::E5RTError(v31, v36, v35);
        }
      }
      unint64_t v10 = v9;
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v7);
      uint64_t v12 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      if (!v12)
      {
        BOOL v25 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v36, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(v34, "Cannot change descriptor type during reshape.");
        E5RT::Status::Status(v35, 2, v34);
        E5RT::E5RTError::E5RTError(v25, v36, v35);
      }
      unint64_t v13 = v12;
      unint64_t Rank = E5RT::TensorDescriptor::GetRank(v12);
      if (Rank != E5RT::TensorDescriptor::GetRank(v10))
      {
        unint64_t v26 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v36, "ReshapeOperationInternal");
        std::operator+<char>();
        E5RT::Status::Status(v35, 2, v34);
        E5RT::E5RTError::E5RTError(v26, v36, v35);
      }
      E5RT::TensorDescriptor::GetTensorDataType(v13, (E5RT::TensorDataType *)v36);
      E5RT::TensorDescriptor::GetTensorDataType(v10, (E5RT::TensorDataType *)v34);
      BOOL v15 = E5RT::operator!=((uint64_t)v36, (uint64_t)v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v34);
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v36);
      if (v15)
      {
        uint64_t v27 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v36, "ReshapeOperationInternal");
        std::operator+<char>();
        E5RT::Status::Status(v35, 2, v34);
        E5RT::E5RTError::E5RTError(v27, v36, v35);
      }
      uint64_t v16 = (std::__shared_weak_count *)i[6];
      unint64_t v32 = i[5];
      unint64_t v33 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v8, (uint64_t *)&v32);
      int32x4_t v17 = v33;
      if (v33)
      {
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    return E5RT::Ops::BnnsCpuInferenceOperation::Impl::ReshapeBnnsGraphContextBasedOnE5InputPorts((E5RT::Ops::BnnsCpuInferenceOperation::Impl *)a1);
  }
  else
  {
    uint64_t result = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
    uint64_t v19 = result + 16;
    while (1)
    {
      uint64_t v19 = *(void *)v19;
      if (!v19) {
        break;
      }
      long long v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(a2, v19 + 16);
      if (!v20)
      {
        unint64_t v28 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v36, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(v34, "New shapes are required for all inputs during reshape.");
        E5RT::Status::Status(v35, 2, v34);
        E5RT::E5RTError::E5RTError(v28, v36, v35);
      }
      unint64_t v21 = v20;
      size_t v22 = (const void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v19 + 40));
      uint64_t result = E5RT::OperandDescriptor::operator!=(v22, (const void *)v21[5]);
      if (result)
      {
        unint64_t v23 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v36, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(v34, "Cannot change shape of a fixed-shape program segment.");
        E5RT::Status::Status(v35, 2, v34);
        E5RT::E5RTError::E5RTError(v23, v36, v35);
      }
    }
  }
  return result;
}

void sub_19232508C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if (!v25)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

void E5RT::Ops::BnnsCpuInferenceOperation::BnnsCpuInferenceOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  memset(v10, 0, 32);
  LODWORD(v10[4]) = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v10);
  uint64_t v6 = (void **)v10[2];
  if (v10[2])
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (void **)*v6;
        uint64_t v8 = (std::__shared_weak_count *)v6[6];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        if (*((char *)v6 + 39) < 0) {
          break;
        }
        operator delete(v6);
        uint64_t v6 = v7;
        if (!v7) {
          goto LABEL_9;
        }
      }
      operator delete(v6[2]);
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
LABEL_9:
  unint64_t v9 = v10[0];
  v10[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EE326750;
  *((void *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  v10[0] = (void *)0x2B2382C000000000;
  memset(&v10[1], 0, 32);
  kdebug_trace();
  operator new();
}

void sub_19232550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MEMORY[0x192FF16B0](v17, 0x10F0C40D750D88CLL);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a9);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BnnsCpuInferenceOperation::Impl>>::~propagate_const(v16);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v15);
  _Unwind_Resume(a1);
}

void sub_192325558(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BnnsCpuInferenceOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

void sub_19232557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

E5RT::Ops::BnnsCpuInferenceOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BnnsCpuInferenceOperation::Impl>>::~propagate_const(E5RT::Ops::BnnsCpuInferenceOperation::Impl **a1)
{
  unint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::BnnsCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void E5RT::Ops::BnnsCpuInferenceOperation::~BnnsCpuInferenceOperation(E5RT::Ops::BnnsCpuInferenceOperation *this)
{
  *(void *)this = &unk_1EE326750;
  unint64_t v2 = (E5RT::Ops::BnnsCpuInferenceOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::BnnsCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::BnnsCpuInferenceOperation::Impl *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE326750;
  unint64_t v2 = (E5RT::Ops::BnnsCpuInferenceOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::BnnsCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::GetOpCode(E5RT::Ops::BnnsCpuInferenceOperation *this)
{
  return 12;
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::PrepareOpForEncode(E5RT::Ops::BnnsCpuInferenceOperation::Impl **this)
{
  return kdebug_trace();
}

void sub_192325774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::EncodeOperation(E5RT::Ops::BnnsCpuInferenceOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::EncodeOperation(this, a2, a3);
  uint64_t v6 = (void *)*((void *)this + 37);
  uint64_t v7 = v6[18];
  if (v6[19] != v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      BOOL v11 = *(E5RT::IOPortImpl ***)(v7 + v8);
      if ((E5RT::IOPort::IsDynamic(v11) & 1) == 0)
      {
        MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef(v11);
        sub_192323D44(MemoryObjectRef, v6[12] + v9);
      }
      ++v10;
      uint64_t v7 = v6[18];
      v9 += 176;
      v8 += 16;
    }
    while (v10 < (v6[19] - v7) >> 4);
  }
  return kdebug_trace();
}

void sub_192325890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1923258A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::ResetOperation(E5RT::Ops::BnnsCpuInferenceOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  uint64_t v2 = *(void *)(*((void *)this + 37) + 96);
  uint64_t v3 = *(void *)(*((void *)this + 37) + 104) - v2;
  if (v3)
  {
    unint64_t v4 = v3 / 176;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    if (v4 < 2)
    {
      unint64_t v5 = 0;
LABEL_9:
      unint64_t v8 = v4 - v5;
      uint64_t v9 = (void *)(v2 + 176 * v5 + 136);
      do
      {
        void *v9 = 0;
        v9 += 22;
        --v8;
      }
      while (v8);
      goto LABEL_11;
    }
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = (void *)(v2 + 312);
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v6 - 22) = 0;
      void *v6 = 0;
      v6 += 44;
      v7 -= 2;
    }
    while (v7);
    if (v4 != v5) {
      goto LABEL_9;
    }
  }
LABEL_11:
  E5RT::ExecutionStreamOperationInternal::ResetOperation(this);
  return kdebug_trace();
}

void sub_1923259D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::ExecuteSync(E5RT::Ops::BnnsCpuInferenceOperation::Impl **this)
{
  return kdebug_trace();
}

void sub_192325A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BnnsCpuInferenceOperation::ReshapeOperationInternal(uint64_t *a1, void *a2)
{
  return kdebug_trace();
}

void sub_192325B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_192325B44(int a1)
{
  if (a1 > 131103)
  {
    uint64_t v1 = 8;
    if (a1 <= 262159)
    {
      if (a1 != 131104)
      {
        if (a1 != 131136)
        {
          if (a1 != 262152) {
            goto LABEL_22;
          }
          return 1;
        }
        return v1;
      }
      return 4;
    }
    if (a1 != 262160)
    {
      if (a1 == 262208) {
        return v1;
      }
      int v2 = 262176;
      goto LABEL_17;
    }
    return 2;
  }
  if (a1 <= 98319)
  {
    if (a1 != 65552)
    {
      int v2 = 65568;
LABEL_17:
      if (a1 != v2) {
        goto LABEL_22;
      }
      return 4;
    }
    return 2;
  }
  if (a1 == 98320) {
    return 2;
  }
  if (a1 != 131080)
  {
    if (a1 != 131088)
    {
LABEL_22:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v7, "SizeOfBnnsDataType");
      std::string::basic_string[abi:ne180100]<0>(v5, "Unsupported BNNS data type in SizeOfBnnsDataType (this is probably an E5RT defect, please file a radar)");
      E5RT::Status::Status(v6, 6, v5);
      E5RT::E5RTError::E5RTError(exception, v7, v6);
    }
    return 2;
  }
  return 1;
}

void sub_192325D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void std::vector<BNNSNDArrayDescriptor>::__append(char **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 176 * ((176 * a2 - 176) / 0xB0) + 176;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x1745D1745D1745DLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((v4 - v6) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v10 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x1745D1745D1745DLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v11 = (char *)operator new(176 * v10);
    }
    else
    {
      BOOL v11 = 0;
    }
    unint64_t v13 = &v11[176 * v7];
    uint64_t v14 = &v11[176 * v10];
    size_t v15 = 176 * ((176 * a2 - 176) / 0xB0) + 176;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 11);
        long long v18 = *((_OWORD *)v5 - 9);
        *((_OWORD *)v13 - 10) = *((_OWORD *)v5 - 10);
        *((_OWORD *)v13 - 9) = v18;
        *((_OWORD *)v13 - 11) = v17;
        long long v19 = *((_OWORD *)v5 - 8);
        long long v20 = *((_OWORD *)v5 - 7);
        long long v21 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v13 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v13 - 5) = v21;
        *((_OWORD *)v13 - 8) = v19;
        *((_OWORD *)v13 - 7) = v20;
        long long v22 = *((_OWORD *)v5 - 4);
        long long v23 = *((_OWORD *)v5 - 3);
        long long v24 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v24;
        *((_OWORD *)v13 - 4) = v22;
        *((_OWORD *)v13 - 3) = v23;
        v13 -= 176;
        v5 -= 176;
      }
      while (v5 != v6);
      unint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<std::shared_ptr<E5RT::IOPort>>::__append(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      unint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)a1;
    uint64_t v7 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v11 = (char *)operator new(16 * v10);
    }
    else
    {
      BOOL v11 = 0;
    }
    unint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    size_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v15;
      if (!v5) {
        return;
      }
      goto LABEL_25;
    }
    do
    {
      long long v17 = *((_OWORD *)v5 - 1);
      v5 -= 2;
      *((_OWORD *)v13 - 1) = v17;
      v13 -= 16;
      *unint64_t v5 = 0;
      v5[1] = 0;
    }
    while (v5 != v6);
    long long v18 = *(void **)a1;
    unint64_t v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v15;
    if (v5 != v18)
    {
      do
      {
        long long v19 = (std::__shared_weak_count *)*(v5 - 1);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v5 -= 2;
      }
      while (v5 != v18);
      unint64_t v5 = v18;
    }
    if (v5)
    {
LABEL_25:
      operator delete(v5);
    }
  }
}

void std::vector<bnns_graph_argument_t>::__append(char **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v11 = (char *)operator new(16 * v10);
    }
    else
    {
      BOOL v11 = 0;
    }
    unint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    size_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      unint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<char const*>::__append(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = operator new(8 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    size_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    long long v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      long long v21 = &v13[8 * v9 - 16];
      long long v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void std::vector<std::array<unsigned long long,8ul>>::__append(char **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 6)
  {
    if (a2)
    {
      unint64_t v12 = a2 << 6;
      bzero(a1[1], a2 << 6);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 6;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 58) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 5 > v8) {
      unint64_t v8 = v9 >> 5;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 58) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(v10 << 6);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v13 = &v11[64 * v7];
    size_t v14 = a2 << 6;
    size_t v15 = &v11[64 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 4);
        long long v18 = *((_OWORD *)v5 - 3);
        long long v19 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v19;
        *((_OWORD *)v13 - 4) = v17;
        *((_OWORD *)v13 - 3) = v18;
        v13 -= 64;
        v5 -= 64;
      }
      while (v5 != v6);
      unint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    size_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      size_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            size_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          size_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *unint64_t v26 = 0;
  v26[1] = v11;
  uint64_t v27 = (std::string *)(v26 + 2);
  unint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  *unint64_t v32 = v45[0];
LABEL_92:
  size_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1923269A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923269B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923269D0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1923269E8()
{
  sub_1923269D0(*MEMORY[0x1E4F143B8]);
  int v2 = 136315138;
  uint64_t v3 = v0;
  _os_log_error_impl(&dword_1920CB000, v1, OS_LOG_TYPE_ERROR, "[BnnsCpuInferenceOperation]: %s", (uint8_t *)&v2, 0xCu);
}

void E5RT::Ops::EIRInferenceOperation::EIRInferenceOperation(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = *a3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9301B90, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1E9301B90)) {
      operator new();
    }
  }
  E5RT::Ops::BaseEirInferenceOperation::BaseEirInferenceOperation(a1, 11, v9, a2, (long long *)qword_1E9301B88, a4, a5);
}

void sub_192326B68(_Unwind_Exception *a1)
{
}

BOOL E5RT::Ops::EIRInferenceOperation::SupportsReshaping(E5RT::Ops::EIRInferenceOperation *this)
{
  return *(_DWORD *)(*((void *)this + 48) + 24) == 2;
}

_OWORD *E5RT::Ops::EIRInferenceOperation::SupportedInputsOutputsTypes@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(0x10uLL);
  *a1 = v3;
  *uint64_t v3 = xmmword_192DAF3F0;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

_OWORD *E5RT::Ops::EIRInferenceOperation::SupportedSurfaceTypes@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = operator new(0x10uLL);
  *a1 = v3;
  *uint64_t v3 = xmmword_192DAA360;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t E5RT::Ops::EIRInferenceOperation::PlatformEngine(E5RT::Ops::EIRInferenceOperation *this)
{
  if (E5RT::IsAVirtualMachine(this)) {
    return 0;
  }
  if (*(_DWORD *)(*((void *)this + 48) + 24) == 2) {
    return 50005;
  }
  return 10007;
}

uint64_t E5RT::Ops::EIRInferenceOperation::StorageTypeForLayers(E5RT::Ops::EIRInferenceOperation *this)
{
  if (*(_DWORD *)(*((void *)this + 48) + 24) == 2) {
    return 65568;
  }
  else {
    return 65552;
  }
}

void E5RT::Ops::EIRInferenceOperation::ConfigurationName(E5RT::Ops::EIRInferenceOperation *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 48);
  if (*(char *)(v2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 32), *(void *)(v2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 32);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 48);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void *E5RT::Ops::EIRInferenceOperation::AllowedBackends@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = this[48];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v5 = *(unsigned char **)(v3 + 56);
  unint64_t v4 = *(unsigned char **)(v3 + 64);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    unint64_t v8 = &v7[4 * (v6 >> 2)];
    a2[2] = v8;
    this = memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  return this;
}

void sub_192326D34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::EIRInferenceOperation::~EIRInferenceOperation(std::__shared_weak_count **this)
{
  uint64_t v1 = (E5RT::Ops::EIRInferenceOperation *)this;
  *this = (std::__shared_weak_count *)&unk_1EE3264D0;
  uint64_t v2 = this[49];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);
}

void E5RT::Ops::EIRInferenceOperation::~EIRInferenceOperation(E5RT::Ops::EIRInferenceOperation *this)
{
  *(void *)this = &unk_1EE3264D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation((void **)this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::ExecutionOperationTelemetryEmitter::Create()
{
}

void sub_192326F48(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10B3C40284C18D2);
  _Unwind_Resume(a1);
}

void *E5RT::ExecutionOperationTelemetryEmitter::AddContainer(void *a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)a1[5];
  if ((unint64_t)v3 >= a1[6])
  {
    uint64_t result = std::vector<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>::__push_back_slow_path<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>(a1 + 4, a2);
  }
  else
  {
    uint64_t v4 = *a2;
    *a2 = 0;
    *uint64_t v3 = v4;
    uint64_t result = v3 + 1;
  }
  a1[5] = result;
  return result;
}

void E5RT::ExecutionOperationTelemetryEmitter::EmitToOSSignpost(E5RT::ExecutionOperationTelemetryEmitter *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*((void *)this + 4);
  uint64_t v3 = (uint64_t *)*((void *)this + 5);
  for (double i = 0.0; v2 != v3; ++v2)
  {
    uint64_t v6 = *v2;
    *(void *)std::string __p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_192DAC000;
    strcpy(*(char **)__p, "MPSGRAPH_PROFILING_FIRST_COMMIT_DURATION");
    double GPUTelemetryData = E5RT::ExecutionStreamTelemetryContainer::GetGPUTelemetryData(v6, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    double v5 = -0.0;
    if (GPUTelemetryData != 0.0) {
      double v5 = GPUTelemetryData;
    }
    double i = i + v5;
  }
  __p[23] = 4;
  strcpy(__p, "e5rt");
  unint64_t v8 = E5RT::GetE5RTLog((uint64_t)__p);
  BOOL v9 = os_signpost_enabled(v8);

  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "e5rt");
    unint64_t v10 = E5RT::GetE5RTLog((uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (os_signpost_enabled(v10))
    {
      unint64_t v11 = (void *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        unint64_t v11 = (void *)*v11;
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v11;
      *(_WORD *)&unsigned char __p[12] = 2048;
      *(double *)&__p[14] = i;
      _os_signpost_emit_with_name_impl(&dword_1920CB000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "E5MLExecutionStreamSyncTelemetry", "RequestID=%{signpost.description:attribute}sGPUResourceCommitDuration=%{signpost.description:attribute}f", __p, 0x16u);
    }
  }
}

void sub_1923271B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::ExecutionOperationTelemetryEmitter::EmitToCoreAnalytics(E5RT::ExecutionOperationTelemetryEmitter *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 4);
  uint64_t v3 = (uint64_t *)*((void *)this + 5);
  double v4 = 0.0;
  if (v2 != v3)
  {
    *(_WORD *)&v10[34] = 0;
    *(_DWORD *)&v10[36] = 0;
    *(void *)&v10[40] = 0x8000000000000030;
    strcpy(v10, "NG_FIRST_COMMIT_MPSGRAPH_PROFILI(");
    do
    {
      uint64_t v6 = *v2;
      uint64_t v7 = (char *)operator new(0x30uLL);
      unint64_t v12 = v7;
      long long v13 = *(_OWORD *)&v10[32];
      *(_OWORD *)uint64_t v7 = *(_OWORD *)&v10[16];
      *((_OWORD *)v7 + 1) = *(_OWORD *)v10;
      strcpy(v7 + 32, "DURATION");
      double GPUTelemetryData = E5RT::ExecutionStreamTelemetryContainer::GetGPUTelemetryData(v6, (uint64_t)&v12);
      if (SHIBYTE(v13) < 0) {
        operator delete(v12);
      }
      double v5 = -0.0;
      if (GPUTelemetryData != 0.0) {
        double v5 = GPUTelemetryData;
      }
      double v4 = v4 + v5;
      ++v2;
    }
    while (v2 != v3);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  _OWORD v11[2] = sub_192327368;
  void v11[3] = &__block_descriptor_48_e30___NSObject_OS_xpc_object__8__0l;
  v11[4] = this;
  *(double *)&v11[5] = v4;
  BOOL v9 = (void *)MEMORY[0x192FF2250](v11);
  analytics_send_event_lazy();
}

void sub_192327338(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_19232734C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(exception_object);
}

void *sub_192327368(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  double v4 = v3;
  double v5 = (const char *)(v2 + 8);
  if (*(char *)(v2 + 31) < 0) {
    double v5 = *(const char **)v5;
  }
  xpc_dictionary_set_string(v3, "ExecutionIdentifier", v5);
  xpc_dictionary_set_double(v4, "MpsGaphResourceManagementTime", *(double *)(a1 + 40));
  uint64_t v6 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v7 = [v6 bundleIdentifier];

  if (v7) {
    xpc_dictionary_set_string(v4, "BundleIdentifier", (const char *)[v7 UTF8String]);
  }

  return v4;
}

void sub_192327430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192327458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void E5RT::ExecutionOperationTelemetryEmitter::~ExecutionOperationTelemetryEmitter(E5RT::ExecutionOperationTelemetryEmitter *this)
{
  *(void *)this = &unk_1EE300EF8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    xpc_object_t v3 = (void *)*((void *)this + 5);
    double v4 = (void *)*((void *)this + 4);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *xpc_object_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      double v4 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE300EF8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    xpc_object_t v3 = (void *)*((void *)this + 5);
    double v4 = (void *)*((void *)this + 4);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *xpc_object_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      double v4 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x192FF16B0);
}

void *std::vector<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>::__push_back_slow_path<std::unique_ptr<E5RT::ExecutionStreamTelemetryContainer const>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v9 = (char *)operator new(8 * v8);
  }
  else
  {
    BOOL v9 = 0;
  }
  unint64_t v10 = &v9[8 * v4];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)unint64_t v10 = v12;
  long long v13 = v10 + 8;
  size_t v14 = (char *)*a1;
  size_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_26;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_34;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  uint64_t v19 = &v15[-v18];
  uint64_t v20 = v15 - 16;
  uint64_t v21 = &v9[8 * v4 - 16];
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v20 - 1);
    long long v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)uint64_t v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)uint64_t v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  size_t v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)size_t v15 = 0;
      *((void *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  unint64_t v26 = (char *)*a1;
  size_t v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v27 = v28;
      *(void *)size_t v15 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
    while (v15 != v26);
    size_t v15 = v26;
  }
  if (v15) {
LABEL_26:
  }
    operator delete(v15);
  return v13;
}

uint64_t E5RT::Ops::DequantOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  uint64_t v4 = a1 + 8;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (*(void *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "InOut ports are not supported by Dequant op yet.");
    E5RT::Status::Status(v20, 1, v19);
    E5RT::E5RTError::E5RTError(exception, v21, v20);
  }
  E5RT::Ops::ValidateInOutsForQuantDequantOperation(InputPorts, OutputPorts);
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(void *)(InputPorts + 16) + 40));
  unint64_t v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  BOOL v9 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(void *)(OutputPorts + 16)
                                                                                           + 40));
  unint64_t v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v9);
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v8);
  uint64_t v12 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v10);
  if (!E5RT::TensorDataType::IsType<unsigned char>(TensorDataTypeRef)
    && !E5RT::TensorDataType::IsType<signed char>(TensorDataTypeRef))
  {
    uint64_t v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Input to Dequant op must be U8 or S8.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v17, v21, v20);
  }
  if (!E5RT::TensorDataType::IsType<float>(v12) && !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(v12))
  {
    uint64_t v18 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Output from Dequant op must be FP32 or FP16.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v18, v21, v20);
  }
  if (**(_DWORD **)v4 != 1)
  {
    size_t v15 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Dequant op not yet supported on non-CPU devices.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v15, v21, v20);
  }
  if (*(void *)(*(void *)v4 + 16) - *(void *)(*(void *)v4 + 8) != 4)
  {
    unint64_t v16 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Dequant op currently only supports a single scale factor for all channels.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v16, v21, v20);
  }
  return a1;
}

void sub_192327B48(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192327B5C(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192327B70(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192327B84(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192327B98(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192327BAC(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192327BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void E5RT::Ops::DequantOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&v22, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v18, 2, &v22);
    E5RT::E5RTError::E5RTError(exception, &v19, v18);
  }
  uint64_t v19 = 0x2B23810C00000000;
  long long v21 = 0u;
  long long v20 = 0u;
  kdebug_trace();
  uint64_t v2 = *(void *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16);
  uint64_t v4 = *(E5RT::IOPortImpl ***)(v2 + 40);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
  uint64_t v22 = v4;
  long long v23 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this) + 16);
  uint64_t v7 = *(E5RT::IOPortImpl ***)(v5 + 40);
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 48);
  v18[0] = v7;
  v18[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v4);
  BOOL v9 = (E5RT::BufferObject *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v4);
  unint64_t v11 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(MemoryObjectRef);
  uint64_t v12 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v7);
  long long v13 = (E5RT *)E5RT::OperandDescriptor::TensorDescriptor(v12);
  size_t v14 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v7);
  size_t v15 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v14);
  E5RT::TensorDequantize(v13, v15, v9, v11, v16, **((float **)this[1] + 1));
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (E5RT::g_trace_analysis_level >= v19) {
    kdebug_trace();
  }
}

void sub_192327F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_192327F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    if (v25)
    {
LABEL_8:
      __cxa_free_exception(v24);
      _Unwind_Resume(a1);
    }
  }
  else if (v25)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::DequantOperation::DequantOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)unint64_t v16 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v18 = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v16);
  uint64_t v6 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void **)*v6;
        uint64_t v8 = (std::__shared_weak_count *)v6[6];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        if (*((char *)v6 + 39) < 0) {
          break;
        }
        operator delete(v6);
        uint64_t v6 = v7;
        if (!v7) {
          goto LABEL_9;
        }
      }
      operator delete(v6[2]);
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
LABEL_9:
  uint64_t v9 = v16[0];
  v16[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EE326128;
  *((void *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  uint64_t v10 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(a1) + 16;
  while (1)
  {
    uint64_t v10 = *(void *)v10;
    if (!v10) {
      break;
    }
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v10 + 40)))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v16, "DequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v14, "DequantOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v15, 1, v14);
      E5RT::E5RTError::E5RTError(exception, v16, v15);
    }
  }
  uint64_t v12 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a1) + 16;
  while (1)
  {
    uint64_t v12 = *(void *)v12;
    if (!v12) {
      break;
    }
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v12 + 40)))
    {
      long long v13 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v16, "DequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v14, "DequantOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v15, 1, v14);
      E5RT::E5RTError::E5RTError(v13, v16, v15);
    }
  }
  operator new();
}

void sub_192328370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x192FF16B0](v22, 0x60C40A44E5E0CLL);
  kdebug_trace();
  uint64_t v24 = *((void *)v21 + 37);
  *((void *)v21 + 37) = 0;
  if (v24) {
    sub_19232879C(v24);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::DequantOperation::~DequantOperation(E5RT::Ops::DequantOperation *this)
{
  *(void *)this = &unk_1EE326128;
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x60C40A44E5E0CLL);
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE326128;
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x60C40A44E5E0CLL);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::DequantOperation::GetOpCode(E5RT::Ops::DequantOperation *this)
{
  return 5;
}

uint64_t E5RT::Ops::DequantOperation::PrepareOpForEncode(E5RT::Ops::DequantOperation *this)
{
  return kdebug_trace();
}

void sub_1923286E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::DequantOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  return kdebug_trace();
}

void sub_192328788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19232879C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return MEMORY[0x192FF16B0](a1, 0x60C40A44E5E0CLL);
}

void *E5RT::ComputeDevice::ComputeDevice(void *this)
{
  *this = &unk_1EE324808;
  return this;
}

{
  *this = &unk_1EE324808;
  return this;
}

void E5RT::ComputeDevice::~ComputeDevice(E5RT::ComputeDevice *this)
{
}

void *E5RT::ComputeDevice::TryAsComputeGPUDevice(void *this)
{
  if (this) {
  return this;
  }
}

void *E5RT::ComputeDevice::AsComputeGPUDevice(E5RT::ComputeDevice *this)
{
  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "AsComputeGPUDevice");
    std::string::basic_string[abi:ne180100]<0>(v3, "ComputeDevice is not a ComputeGPUDevice.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_1923289AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ComputeDevice::GetDeviceType(E5RT::ComputeDevice *this)
{
  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetDeviceType");
    std::string::basic_string[abi:ne180100]<0>(v3, "Unexpected compute device object encountered.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return 2;
}

void sub_192328B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ComputeDevice::GetAllAvailableComputeDevices(E5RT::ComputeDevice *this)
{
  if (qword_1E9301BA0 != -1) {
    dispatch_once(&qword_1E9301BA0, &unk_1EE394B40);
  }
  return qword_1E9301B98;
}

void sub_192328BD4()
{
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  *(void *)(a1 + 24) = a1 + 32;
  uint64_t v5 = (uint64_t **)(a1 + 24);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 56);
  *(void *)(a1 + 48) = a1 + 56;
  uint64_t v7 = (uint64_t **)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v8 = (std::string *)(a1 + 80);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (!*(void *)(OutputPorts + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v27, "No outputs specified.");
    E5RT::Status::Status(v28, 1, v27);
    E5RT::E5RTError::E5RTError(exception, v29, v28);
  }
  if (*(void *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    int v25 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v27, "InOut ports are not supported by MLC op yet.");
    E5RT::Status::Status(v28, 1, v27);
    E5RT::E5RTError::E5RTError(v25, v29, v28);
  }
  unint64_t v11 = *(const std::string **)(a1 + 8);
  if (!v11)
  {
    unint64_t v26 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v27, "Op params not specified.");
    E5RT::Status::Status(v28, 1, v27);
    E5RT::E5RTError::E5RTError(v26, v29, v28);
  }
  std::string::operator=(v8, v11);
  uint64_t v12 = InputPorts + 16;
  uint64_t v13 = v12;
  while (1)
  {
    uint64_t v13 = *(void *)v13;
    if (!v13) {
      break;
    }
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v13 + 40));
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      size_t v15 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v27, "Input surface ports aren't supported with MLC CPU inference yet.");
      E5RT::Status::Status(v28, 1, v27);
      E5RT::E5RTError::E5RTError(v15, v29, v28);
    }
  }
  unint64_t v16 = (void *)(OutputPorts + 16);
  uint64_t v17 = v16;
  while (1)
  {
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      break;
    }
    int v18 = (E5RT::IOPortImpl **)v17[5];
    if (!v18)
    {
      int v23 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v27, "Invalid output port.");
      E5RT::Status::Status(v28, 1, v27);
      E5RT::E5RTError::E5RTError(v23, v29, v28);
    }
    uint64_t v19 = (void *)E5RT::IOPort::GetPortDescriptorRef(v18);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v19))
    {
      long long v20 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v29, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v27, "Output surface ports aren't supported with MLC CPU inference yet.");
      E5RT::Status::Status(v28, 1, v27);
      E5RT::E5RTError::E5RTError(v20, v29, v28);
    }
  }
  while (1)
  {
    uint64_t v12 = *(void *)v12;
    if (!v12) {
      break;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(v5, v4, (const void **)(v12 + 16), v12 + 16);
  }
  long long v21 = (const void **)*v16;
  if (*v16)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(v7, v6, v21 + 2, (uint64_t)(v21 + 2));
      long long v21 = (const void **)*v21;
    }
    while (v21);
  }
  return a1;
}

void sub_1923291E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 + 103) < 0) {
    operator delete(*v25);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(v24, *(void *)(v22 + 56));
  std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(v23, *(void *)(v22 + 32));
  uint64_t v27 = *(std::__shared_weak_count **)(v22 + 16);
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::MlcCpuInferenceOperation::Impl::~Impl(E5RT::Ops::MlcCpuInferenceOperation::Impl *this)
{
  if (*((void *)this + 9))
  {
    mlc_services_model_teardown();
    *((void *)this + 9) = 0;
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy((uint64_t)this + 48, *((void *)this + 7));
  std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy((uint64_t)this + 24, *((void *)this + 4));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void E5RT::Ops::MlcCpuInferenceOperation::Impl::PrepareOpForEncode(E5RT::Ops::MlcCpuInferenceOperation::Impl *this)
{
  if (!E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this))
  {
    E5RT::PathWrapper::PathWrapper(&__p, (uint64_t)this + 80);
    if (!E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&__p))
    {
      std::operator+<char>();
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v16, "PrepareOpForEncode");
      E5RT::Status::Status(&v15, 13, v17);
      E5RT::E5RTError::E5RTError(exception, v16, &v15);
    }
    uint64_t bundled = mlc_services_model_create_bundled();
    *((void *)this + 9) = bundled;
    if (!bundled)
    {
      uint64_t v13 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v17, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(v16, "Unable to create MLC model");
      E5RT::Status::Status(&v15, 2, v16);
      E5RT::E5RTError::E5RTError(v13, v17, &v15);
    }
    if ((mlc_services_model_load() & 1) == 0)
    {
      size_t v14 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v17, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(v16, "Unable to load MLC model");
      E5RT::Status::Status(&v15, 2, v16);
      E5RT::E5RTError::E5RTError(v14, v17, &v15);
    }
    uint64_t v3 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)this + 3);
    if (v3 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32))
    {
      do
      {
        PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPortImpl ***)v3 + 7));
        sub_192329830((int)this, (uint64_t)v3 + 32, PortDescriptorRef);
        uint64_t v6 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v3 + 1);
        if (v6)
        {
          do
          {
            uint64_t v7 = v6;
            uint64_t v6 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v7 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v3 + 2);
            BOOL v8 = *(void *)v7 == (void)v3;
            uint64_t v3 = v7;
          }
          while (!v8);
        }
        uint64_t v3 = v7;
      }
      while (v7 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32));
    }
    uint64_t v4 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)this + 6);
    if (v4 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56))
    {
      do
      {
        uint64_t v9 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPortImpl ***)v4 + 7));
        sub_192329830((int)this, (uint64_t)v4 + 32, v9);
        uint64_t v10 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v4 + 1);
        if (v10)
        {
          do
          {
            unint64_t v11 = v10;
            uint64_t v10 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            unint64_t v11 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v4 + 2);
            BOOL v8 = *(void *)v11 == (void)v4;
            uint64_t v4 = v11;
          }
          while (!v8);
        }
        uint64_t v4 = v11;
      }
      while (v11 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1923296F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192329830(int a1, uint64_t a2, E5RT::OperandDescriptor *this)
{
  uint64_t v4 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(this);
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(v4);
  uint64_t TensorShape = (void *)E5RT::TensorDescriptor::GetTensorShape(v4);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(v4);
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (Rank)
  {
    if (Rank >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v8 = (char *)operator new(8 * Rank);
    unint64_t v26 = v8;
    uint64_t v28 = &v8[8 * Rank];
    bzero(v8, 8 * Rank);
    uint64_t v9 = operator new(8 * Rank);
    bzero(v9, 8 * Rank);
  }
  else
  {
    BOOL v8 = 0;
    uint64_t v9 = 0;
  }
  int v10 = mlc_services_model_get_tensor_shape() ^ 1;
  if (!Rank) {
    LOBYTE(v10) = 1;
  }
  if (v10)
  {
    if (!v9) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      if (*(void *)&v8[8 * v11] != *(void *)(*TensorShape + 8 * v11))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Shape in E5 does not match shape in MLC binary for tensor = ", 60);
        int v13 = *(char *)(a2 + 23);
        if (v13 >= 0) {
          uint64_t v14 = a2;
        }
        else {
          uint64_t v14 = *(void *)a2;
        }
        if (v13 >= 0) {
          uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v15 = *(void *)(a2 + 8);
        }
        unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" dim: ", 6);
        uint64_t v17 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" e5: ", 5);
        int v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" mlc: ", 6);
        uint64_t v19 = (void *)std::ostream::operator<<();
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v19);
        std::stringbuf::str();
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v23, "operator()");
        E5RT::Status::Status(v22, 2, v24);
        E5RT::E5RTError::E5RTError(exception, v23, v22);
      }
      if (*((void *)v9 + v11) != *(void *)(*TensorStrides + 8 * v11))
      {
        std::operator+<char>();
        long long v21 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v24, "operator()");
        E5RT::Status::Status(v23, 2, v25);
        E5RT::E5RTError::E5RTError(v21, v24, v23);
      }
      ++v11;
    }
    while (Rank != v11);
  }
  operator delete(v9);
LABEL_15:
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_192329B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v29 - 96) = v28;
  operator delete(v28);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::Impl::GetPortBoundBufferType(E5RT::Ops::MlcCpuInferenceOperation::Impl *this)
{
  if (*((void *)this + 5))
  {
    uint64_t v1 = (char *)this + 24;
  }
  else
  {
    if (!*((void *)this + 8))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "GetPortBoundBufferType");
      std::string::basic_string[abi:ne180100]<0>(v6, "MLC op has both input and output ports empty.");
      E5RT::Status::Status(v7, 6, v6);
      E5RT::E5RTError::E5RTError(exception, v8, v7);
    }
    uint64_t v1 = (char *)this + 48;
  }
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(*(E5RT::IOPortImpl ***)(*(void *)v1 + 56));
  uint64_t v3 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(MemoryObjectRef);

  return E5RT::BufferObject::GetBufferType(v3);
}

void sub_192329D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::MlcCpuInferenceOperation::Impl::EncodeOperation(E5RT::Ops::MlcCpuInferenceOperation::Impl *this)
{
  if (E5RT::Ops::MlcCpuInferenceOperation::Impl::GetPortBoundBufferType(this))
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    std::string __p = 0;
    uint64_t v24 = 0;
    int v25 = 0;
    unint64_t v2 = *((void *)this + 8) + *((void *)this + 5);
    if (v2)
    {
      if (v2 >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = (char *)operator new(8 * v2);
      uint64_t v27 = v26;
      uint64_t v28 = &v26[8 * v2];
      std::string __p = operator new(8 * v2);
      uint64_t v24 = __p;
      int v25 = (char *)__p + 8 * v2;
    }
    v21[0] = (uint64_t **)&v26;
    v21[1] = (uint64_t **)&__p;
    uint64_t v3 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)this + 3);
    if (v3 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32))
    {
      do
      {
        sub_19232A420(v21, *((E5RT::IOPortImpl ***)v3 + 7));
        uint64_t v5 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v3 + 1);
        if (v5)
        {
          do
          {
            uint64_t v6 = v5;
            uint64_t v5 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v3 + 2);
            BOOL v7 = *(void *)v6 == (void)v3;
            uint64_t v3 = v6;
          }
          while (!v7);
        }
        uint64_t v3 = v6;
      }
      while (v6 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32));
    }
    uint64_t v4 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)this + 6);
    if (v4 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56))
    {
      do
      {
        sub_19232A420(v21, *((E5RT::IOPortImpl ***)v4 + 7));
        BOOL v8 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v4 + 1);
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            BOOL v8 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v4 + 2);
            BOOL v7 = *(void *)v9 == (void)v4;
            uint64_t v4 = v9;
          }
          while (!v7);
        }
        uint64_t v4 = v9;
      }
      while (v9 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56));
    }
    if ((mlc_services_model_bind_raw_ports() & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v22, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v19, "Unable to bind raw ports to MLC model");
      E5RT::Status::Status(v20, 2, v19);
      E5RT::E5RTError::E5RTError(exception, v22, v20);
    }
    if (__p)
    {
      uint64_t v24 = __p;
      operator delete(__p);
    }
  }
  else
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    unint64_t v10 = *((void *)this + 8) + *((void *)this + 5);
    if (v10)
    {
      if (v10 >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = (char *)operator new(8 * v10);
      uint64_t v27 = v26;
      uint64_t v28 = &v26[8 * v10];
    }
    v19[0] = (uint64_t **)&v26;
    uint64_t v11 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)this + 3);
    if (v11 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32))
    {
      do
      {
        sub_19232A294(v19, *((E5RT::IOPortImpl ***)v11 + 7));
        int v13 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v11 + 1);
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            int v13 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v11 + 2);
            BOOL v7 = *(void *)v14 == (void)v11;
            uint64_t v11 = v14;
          }
          while (!v7);
        }
        uint64_t v11 = v14;
      }
      while (v14 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 32));
    }
    uint64_t v12 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)this + 6);
    if (v12 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56))
    {
      do
      {
        sub_19232A294(v19, *((E5RT::IOPortImpl ***)v12 + 7));
        uint64_t v15 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v12 + 1);
        if (v15)
        {
          do
          {
            unint64_t v16 = v15;
            uint64_t v15 = *(E5RT::Ops::MlcCpuInferenceOperation::Impl **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            unint64_t v16 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v12 + 2);
            BOOL v7 = *(void *)v16 == (void)v12;
            uint64_t v12 = v16;
          }
          while (!v7);
        }
        uint64_t v12 = v16;
      }
      while (v16 != (E5RT::Ops::MlcCpuInferenceOperation::Impl *)((char *)this + 56));
    }
    if ((mlc_services_model_bind_ports() & 1) == 0)
    {
      int v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v22, "Unable to bind ports to MLC model");
      E5RT::Status::Status(v21, 2, v22);
      E5RT::E5RTError::E5RTError(v18, &__p, v21);
    }
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
}

void sub_19232A15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  unint64_t v35 = *(void **)(v33 - 56);
  if (v35)
  {
    *(void *)(v33 - 48) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void sub_19232A294(uint64_t ***a1, E5RT::IOPortImpl **this)
{
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(this);
  uint64_t v4 = E5RT::MemoryObject::Buffer(MemoryObjectRef);
  uint64_t v5 = E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v4);
  uint64_t v6 = v5;
  BOOL v7 = *a1;
  uint64_t v9 = v7[1];
  unint64_t v8 = (unint64_t)v7[2];
  unint64_t v10 = v9;
  if ((unint64_t)v9 < v8)
  {
    uint64_t *v9 = v5;
    uint64_t v11 = (uint64_t)(v9 + 1);
    goto LABEL_23;
  }
  uint64_t v12 = *v7;
  uint64_t v13 = (char *)v9 - (char *)*v7;
  uint64_t v14 = v13 >> 3;
  unint64_t v15 = (v13 >> 3) + 1;
  if (v15 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v16 = v8 - (void)v12;
  if (v16 >> 2 > v15) {
    unint64_t v15 = v16 >> 2;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (v17 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v18 = operator new(8 * v17);
    uint64_t v19 = (uint64_t *)&v18[8 * v14];
    long long v20 = &v18[8 * v17];
    uint64_t *v19 = v6;
    uint64_t v11 = (uint64_t)(v19 + 1);
    long long v21 = (char *)((char *)v9 - (char *)v12);
    if (v9 == v12) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v18 = 0;
  uint64_t v19 = (uint64_t *)(8 * v14);
  long long v20 = 0;
  *(void *)(8 * v14) = v6;
  uint64_t v11 = 8 * v14 + 8;
  long long v21 = (char *)((char *)v9 - (char *)v12);
  if (v9 != v12)
  {
LABEL_14:
    unint64_t v22 = (unint64_t)(v21 - 8);
    if (v22 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)((char *)v9 - &v18[v13]) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v23 = (v22 >> 3) + 1;
    uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v10 = &v9[v24 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v19 = (uint64_t *)((char *)v19 - v24);
    int v25 = &v18[8 * v14 - 16];
    unint64_t v26 = v9 - 2;
    uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *int v25 = v28;
      v25 -= 2;
      v26 -= 4;
      v27 -= 4;
    }
    while (v27);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v29 = *--v10;
        *--uint64_t v19 = v29;
      }
      while (v10 != v12);
    }
    unint64_t v10 = *v7;
  }
LABEL_21:
  *BOOL v7 = v19;
  v7[1] = (uint64_t *)v11;
  v7[2] = (uint64_t *)v20;
  if (v10) {
    operator delete(v10);
  }
LABEL_23:
  v7[1] = (uint64_t *)v11;
}

void sub_19232A420(uint64_t ***a1, E5RT::IOPortImpl **this)
{
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(this);
  uint64_t v4 = E5RT::MemoryObject::Buffer(MemoryObjectRef);
  uint64_t v5 = E5RT::BufferObject::GetHandle<E5RT::HeapAllocatedBufferHandle>((uint64_t)v4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = *a1;
  uint64_t v11 = (*a1)[1];
  unint64_t v10 = (unint64_t)(*a1)[2];
  uint64_t v12 = v11;
  if ((unint64_t)v11 < v10)
  {
    *uint64_t v11 = v5;
    uint64_t v13 = (uint64_t)(v11 + 1);
    goto LABEL_23;
  }
  uint64_t v14 = *v9;
  uint64_t v15 = (char *)v11 - (char *)*v9;
  uint64_t v16 = v15 >> 3;
  unint64_t v17 = (v15 >> 3) + 1;
  if (v17 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = v10 - (void)v14;
  if (v18 >> 2 > v17) {
    unint64_t v17 = v18 >> 2;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v17;
  }
  if (v19)
  {
    if (v19 >> 61) {
      goto LABEL_45;
    }
    long long v20 = operator new(8 * v19);
    long long v21 = (uint64_t *)&v20[8 * v16];
    unint64_t v22 = &v20[8 * v19];
    uint64_t *v21 = v6;
    uint64_t v13 = (uint64_t)(v21 + 1);
    uint64_t v23 = (char *)((char *)v11 - (char *)v14);
    if (v11 == v14) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  long long v20 = 0;
  long long v21 = (uint64_t *)(8 * v16);
  unint64_t v22 = 0;
  *(void *)(8 * v16) = v6;
  uint64_t v13 = 8 * v16 + 8;
  uint64_t v23 = (char *)((char *)v11 - (char *)v14);
  if (v11 != v14)
  {
LABEL_14:
    unint64_t v24 = (unint64_t)(v23 - 8);
    if (v24 < 0x58) {
      goto LABEL_50;
    }
    if ((unint64_t)((char *)v11 - &v20[v15]) < 0x20) {
      goto LABEL_50;
    }
    uint64_t v25 = (v24 >> 3) + 1;
    uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v12 = &v11[v26 / 0xFFFFFFFFFFFFFFF8];
    long long v21 = (uint64_t *)((char *)v21 - v26);
    uint64_t v27 = &v20[8 * v16 - 16];
    long long v28 = v11 - 2;
    uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *uint64_t v27 = v30;
      v27 -= 2;
      v28 -= 4;
      v29 -= 4;
    }
    while (v29);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        uint64_t v31 = *--v12;
        *--long long v21 = v31;
      }
      while (v12 != v14);
    }
    uint64_t v12 = *v9;
  }
LABEL_21:
  uint64_t *v9 = v21;
  v9[1] = (uint64_t *)v13;
  v9[2] = (uint64_t *)v22;
  if (v12) {
    operator delete(v12);
  }
LABEL_23:
  v9[1] = (uint64_t *)v13;
  unint64_t v32 = a1[1];
  BOOL v34 = (char *)v32[1];
  unint64_t v33 = (unint64_t)v32[2];
  if ((unint64_t)v34 < v33)
  {
    *(void *)BOOL v34 = v8;
    uint64_t v35 = (uint64_t)(v34 + 8);
    goto LABEL_44;
  }
  unint64_t v36 = (char *)*v32;
  uint64_t v37 = v34 - (char *)*v32;
  uint64_t v38 = v37 >> 3;
  unint64_t v39 = (v37 >> 3) + 1;
  if (v39 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v40 = v33 - (void)v36;
  if (v40 >> 2 > v39) {
    unint64_t v39 = v40 >> 2;
  }
  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v41 = v39;
  }
  if (!v41)
  {
    unint64_t v42 = 0;
    unint64_t v43 = (uint64_t *)(8 * v38);
    uint64_t v44 = 0;
    *(void *)(8 * v38) = v8;
    uint64_t v35 = 8 * v38 + 8;
    int64_t v45 = v34 - v36;
    if (v34 == v36) {
      goto LABEL_42;
    }
LABEL_36:
    unint64_t v46 = v45 - 8;
    if (v46 < 0x58) {
      goto LABEL_51;
    }
    if ((unint64_t)(v34 - &v42[v37]) < 0x20) {
      goto LABEL_51;
    }
    uint64_t v47 = (v46 >> 3) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    long long v49 = &v34[-v48];
    unint64_t v43 = (uint64_t *)((char *)v43 - v48);
    uint64_t v50 = &v42[8 * v38 - 16];
    unint64_t v51 = v34 - 16;
    uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      _OWORD *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 4;
    }
    while (v52);
    BOOL v34 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_51:
      do
      {
        uint64_t v54 = *((void *)v34 - 1);
        v34 -= 8;
        *--unint64_t v43 = v54;
      }
      while (v34 != v36);
    }
    goto LABEL_42;
  }
  if (v41 >> 61) {
LABEL_45:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  unint64_t v42 = operator new(8 * v41);
  unint64_t v43 = (uint64_t *)&v42[8 * v38];
  uint64_t v44 = &v42[8 * v41];
  uint64_t *v43 = v8;
  uint64_t v35 = (uint64_t)(v43 + 1);
  int64_t v45 = v34 - v36;
  if (v34 != v36) {
    goto LABEL_36;
  }
LABEL_42:
  *unint64_t v32 = v43;
  v32[1] = (uint64_t *)v35;
  v32[2] = (uint64_t *)v44;
  if (v36) {
    operator delete(v36);
  }
LABEL_44:
  v32[1] = (uint64_t *)v35;
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::Impl::ResetOperation(uint64_t this)
{
  if (*(void *)(this + 72))
  {
    if (E5RT::Ops::MlcCpuInferenceOperation::Impl::GetPortBoundBufferType((E5RT::Ops::MlcCpuInferenceOperation::Impl *)this))
    {
      this = mlc_services_model_bind_raw_ports();
      if (this) {
        return this;
      }
LABEL_6:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v4, "ResetOperation");
      std::string::basic_string[abi:ne180100]<0>(v2, "Unable to un-bind ports in MLC model");
      E5RT::Status::Status(v3, 2, v2);
      E5RT::E5RTError::E5RTError(exception, v4, v3);
    }
    this = mlc_services_model_bind_ports();
    if ((this & 1) == 0) {
      goto LABEL_6;
    }
  }
  return this;
}

void sub_19232A7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v4, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  uint64_t result = mlc_services_model_exec_sync();
  if ((result & 1) == 0)
  {
    uint64_t v3 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v4, "Internal MLC error during execution.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(v3, v6, v5);
  }
  return result;
}

void sub_19232A988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::MlcCpuInferenceOperation::Impl::ReshapeOperationInternal(uint64_t a1, uint64_t a2)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v136, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v133, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(&__p, 2, &v133);
    E5RT::E5RTError::E5RTError(exception, &v136, &__p);
  }
  if (*(void *)(a2 + 24) != *(void *)(a1 + 40))
  {
    std::string::size_type v120 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v136, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v133, "Require new shapes for all inputs to reshape.");
    E5RT::Status::Status(&__p, 2, &v133);
    E5RT::E5RTError::E5RTError(v120, &v136, &__p);
  }
  uint64_t v4 = *(uint64_t ***)(a2 + 16);
  uint64_t v126 = a1;
  if (v4)
  {
    uint64_t v5 = (void *)(a1 + 32);
    while (1)
    {
      uint64_t v6 = *v5;
      if (!*v5) {
        goto LABEL_120;
      }
      int v7 = *((char *)v4 + 39);
      size_t v8 = v7 >= 0 ? *((unsigned __int8 *)v4 + 39) : (size_t)v4[3];
      uint64_t v9 = v7 >= 0 ? (uint64_t *)(v4 + 2) : v4[2];
      unint64_t v10 = v5;
      do
      {
        int v11 = *(char *)(v6 + 55);
        if (v11 >= 0) {
          size_t v12 = *(unsigned __int8 *)(v6 + 55);
        }
        else {
          size_t v12 = *(void *)(v6 + 40);
        }
        if (v11 >= 0) {
          uint64_t v13 = (const void *)(v6 + 32);
        }
        else {
          uint64_t v13 = *(const void **)(v6 + 32);
        }
        if (v8 >= v12) {
          size_t v14 = v12;
        }
        else {
          size_t v14 = v8;
        }
        int v15 = memcmp(v13, v9, v14);
        BOOL v16 = v12 < v8;
        if (v15) {
          BOOL v16 = v15 < 0;
        }
        BOOL v17 = !v16;
        if (v16) {
          uint64_t v18 = (uint64_t *)(v6 + 8);
        }
        else {
          uint64_t v18 = (uint64_t *)v6;
        }
        if (v17) {
          unint64_t v10 = (void *)v6;
        }
        uint64_t v6 = *v18;
      }
      while (*v18);
      if (v10 == v5) {
        goto LABEL_120;
      }
      int v19 = *((char *)v10 + 55);
      if (v19 >= 0) {
        size_t v20 = *((unsigned __int8 *)v10 + 55);
      }
      else {
        size_t v20 = v10[5];
      }
      if (v19 >= 0) {
        long long v21 = v10 + 4;
      }
      else {
        long long v21 = (const void *)v10[4];
      }
      if (v20 >= v8) {
        size_t v22 = v8;
      }
      else {
        size_t v22 = v20;
      }
      int v23 = memcmp(v9, v21, v22);
      BOOL v24 = v8 < v20;
      if (v23) {
        BOOL v24 = v23 < 0;
      }
      if (v24)
      {
LABEL_120:
        unint64_t v83 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v136, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(&v133, "Unknown operand name given for reshaping.");
        E5RT::Status::Status(&__p, 2, &v133);
        E5RT::E5RTError::E5RTError(v83, &v136, &__p);
      }
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v10[7]);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        unint64_t v121 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v136, "ReshapeOperationInternal");
        std::string::basic_string[abi:ne180100]<0>(&v133, "MLC op cannot reshape a surface descriptor.");
        E5RT::Status::Status(&__p, 2, &v133);
        E5RT::E5RTError::E5RTError(v121, &v136, &__p);
      }
      uint64_t v26 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)PortDescriptorRef);
      uint64_t v27 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v4[5]);
      uint64_t TensorShape = (char **)E5RT::TensorDescriptor::GetTensorShape(v27);
      TensorStrides = (char **)E5RT::TensorDescriptor::GetTensorStrides(v27);
      unint64_t Rank = E5RT::TensorDescriptor::GetRank(v26);
      if (Rank != E5RT::TensorDescriptor::GetRank(v27))
      {
        std::operator+<char>();
        int v122 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v133, "ReshapeOperationInternal");
        E5RT::Status::Status(&__p, 2, &v136);
        E5RT::E5RTError::E5RTError(v122, &v133, &__p);
      }
      uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v26);
      uint64_t v32 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v27);
      if (E5RT::operator!=(TensorDataTypeRef, v32))
      {
        std::operator+<char>();
        unint64_t v123 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v133, "ReshapeOperationInternal");
        E5RT::Status::Status(&__p, 2, &v136);
        E5RT::E5RTError::E5RTError(v123, &v133, &__p);
      }
      unint64_t v136 = 0;
      v137 = 0;
      v138 = 0;
      if (Rank) {
        break;
      }
      unint64_t v33 = 0;
      BOOL v34 = 0;
      unint64_t v36 = *TensorShape;
      uint64_t v35 = TensorShape[1];
      if (*TensorShape != v35) {
        goto LABEL_52;
      }
LABEL_57:
      uint64_t v48 = *TensorStrides;
      uint64_t v47 = TensorStrides[1];
      if (*TensorStrides != v47)
      {
        unint64_t v49 = v47 - v48 - 8;
        uint64_t v50 = v34;
        unint64_t v51 = *TensorStrides;
        if (v49 < 0x18) {
          goto LABEL_158;
        }
        uint64_t v52 = (v49 >> 3) + 1;
        uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v50 = &v34[v53];
        unint64_t v51 = &v48[v53];
        uint64_t v54 = (long long *)(v48 + 16);
        uint64_t v55 = v34 + 16;
        uint64_t v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v57 = *v54;
          *(v55 - 1) = *(v54 - 1);
          *uint64_t v55 = v57;
          v54 += 2;
          v55 += 2;
          v56 -= 4;
        }
        while (v56);
        if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_158:
          do
          {
            uint64_t v58 = *(void *)v51;
            v51 += 8;
            *(void *)uint64_t v50 = v58;
            v50 += 8;
          }
          while (v51 != v47);
        }
      }
      if ((mlc_services_model_set_tensor_shape() & 1) == 0)
      {
        std::operator+<char>();
        uint64_t v124 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "ReshapeOperationInternal");
        E5RT::Status::Status(&v127, 2, &v133);
        E5RT::E5RTError::E5RTError(v124, &__p, &v127);
      }
      if (v34) {
        operator delete(v34);
      }
      if (v136) {
        operator delete(v136);
      }
      uint64_t v4 = (uint64_t **)*v4;
      if (!v4) {
        goto LABEL_69;
      }
    }
    if (Rank >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v33 = operator new(8 * Rank);
    unint64_t v136 = (char *)v33;
    v138 = (char *)v33 + 8 * Rank;
    bzero(v33, 8 * Rank);
    v137 = v138;
    BOOL v34 = (char *)operator new(8 * Rank);
    bzero(v34, 8 * Rank);
    unint64_t v36 = *TensorShape;
    uint64_t v35 = TensorShape[1];
    if (*TensorShape == v35) {
      goto LABEL_57;
    }
LABEL_52:
    unint64_t v37 = v35 - v36 - 8;
    uint64_t v38 = v33;
    unint64_t v39 = (uint64_t *)v36;
    if (v37 < 0x18) {
      goto LABEL_159;
    }
    uint64_t v40 = (v37 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v38 = (void *)((char *)v33 + v41);
    unint64_t v39 = (uint64_t *)&v36[v41];
    unint64_t v42 = (long long *)(v36 + 16);
    unint64_t v43 = v33 + 1;
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v42;
      *(v43 - 1) = *(v42 - 1);
      _OWORD *v43 = v45;
      v42 += 2;
      v43 += 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_159:
      do
      {
        uint64_t v46 = *v39++;
        *v38++ = v46;
      }
      while (v39 != (uint64_t *)v35);
    }
    goto LABEL_57;
  }
LABEL_69:
  if (!mlc_services_model_reshape())
  {
    uint64_t v125 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v136, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v133, "MLC model reshape failed.");
    E5RT::Status::Status(&__p, 2, &v133);
    E5RT::E5RTError::E5RTError(v125, &v136, &__p);
  }
  int64x2_t v59 = *(uint64_t ***)(a2 + 16);
  if (v59)
  {
    uint64_t v60 = (uint64_t *)(v126 + 32);
    do
    {
      uint64_t v61 = *v60;
      if (!*v60) {
        goto LABEL_112;
      }
      int v62 = *((char *)v59 + 39);
      size_t v63 = v62 >= 0 ? *((unsigned __int8 *)v59 + 39) : (size_t)v59[3];
      unint64_t v64 = v62 >= 0 ? (uint64_t *)(v59 + 2) : v59[2];
      uint64_t v65 = v126 + 32;
      do
      {
        int v66 = *(char *)(v61 + 55);
        if (v66 >= 0) {
          size_t v67 = *(unsigned __int8 *)(v61 + 55);
        }
        else {
          size_t v67 = *(void *)(v61 + 40);
        }
        if (v66 >= 0) {
          int v68 = (const void *)(v61 + 32);
        }
        else {
          int v68 = *(const void **)(v61 + 32);
        }
        if (v63 >= v67) {
          size_t v69 = v67;
        }
        else {
          size_t v69 = v63;
        }
        int v70 = memcmp(v68, v64, v69);
        BOOL v71 = v67 < v63;
        if (v70) {
          BOOL v71 = v70 < 0;
        }
        BOOL v72 = !v71;
        if (v71) {
          v73 = (uint64_t *)(v61 + 8);
        }
        else {
          v73 = (uint64_t *)v61;
        }
        if (v72) {
          uint64_t v65 = v61;
        }
        uint64_t v61 = *v73;
      }
      while (*v73);
      if ((uint64_t *)v65 == v60) {
        goto LABEL_112;
      }
      int v74 = *(char *)(v65 + 55);
      if (v74 >= 0) {
        size_t v75 = *(unsigned __int8 *)(v65 + 55);
      }
      else {
        size_t v75 = *(void *)(v65 + 40);
      }
      if (v74 >= 0) {
        uint64_t v76 = (const void *)(v65 + 32);
      }
      else {
        uint64_t v76 = *(const void **)(v65 + 32);
      }
      if (v75 >= v63) {
        size_t v77 = v63;
      }
      else {
        size_t v77 = v75;
      }
      int v78 = memcmp(v64, v76, v77);
      BOOL v79 = v63 < v75;
      if (v78) {
        BOOL v79 = v78 < 0;
      }
      if (v79) {
LABEL_112:
      }
        uint64_t v65 = v126 + 32;
      uint64_t v80 = *(void **)(v65 + 56);
      if (v80) {
      uint64_t v81 = (std::__shared_weak_count *)v59[6];
      }
      v128 = v59[5];
      uint64_t v129 = v81;
      if (v81) {
        atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v80, (uint64_t *)&v128);
      unint64_t v82 = v129;
      if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
      int64x2_t v59 = (uint64_t **)*v59;
    }
    while (v59);
  }
  uint64_t v84 = *(void *)(v126 + 48);
  if (v84 != v126 + 56)
  {
    long long v85 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v84 + 56));
    uint64_t v86 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v85);
    unint64_t v87 = E5RT::TensorDescriptor::GetRank(v86);
    size_t v88 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v86);
    unint64_t v136 = 0;
    v137 = 0;
    uint64_t v89 = 8 * v87;
    v138 = 0;
    if (v87)
    {
      if (v87 >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      long long v90 = (char *)operator new(8 * v87);
      uint64_t v91 = &v90[v89];
      unint64_t v136 = v90;
      v138 = &v90[v89];
      bzero(v90, 8 * v87);
      v137 = v91;
      uint64_t v92 = (char *)operator new(8 * v87);
      bzero(v92, 8 * v87);
      long long v93 = &v92[v89];
    }
    else
    {
      long long v93 = 0;
      uint64_t v92 = 0;
    }
    if ((mlc_services_model_get_tensor_shape() & 1) == 0)
    {
      std::operator+<char>();
      v118 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "ReshapeOperationInternal");
      E5RT::Status::Status(&v127, 2, &v133);
      E5RT::E5RTError::E5RTError(v118, &__p, &v127);
    }
    v133 = 0;
    v134 = 0;
    uint64_t v135 = 0;
    if (v87)
    {
      v94 = operator new(8 * v87);
      v133 = v94;
      uint64_t v135 = (char *)v94 + 8 * v87;
      bzero(v94, 8 * v87);
      v134 = (char *)v94 + v89;
      v95 = operator new(8 * v87);
      std::string __p = v95;
      uint64_t v132 = (char *)v95 + 8 * v87;
      bzero(v95, 8 * v87);
      uint64_t v131 = (char *)v95 + v89;
      uint64_t v97 = v136;
      uint64_t v96 = v137;
      if (v136 == v137) {
        goto LABEL_137;
      }
    }
    else
    {
      v95 = 0;
      v94 = 0;
      std::string __p = 0;
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v97 = v136;
      uint64_t v96 = v137;
      if (v136 == v137) {
        goto LABEL_137;
      }
    }
    unint64_t v98 = v96 - v97 - 8;
    if (v98 >= 0x18)
    {
      uint64_t v101 = (v98 >> 3) + 1;
      uint64_t v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v99 = (void *)((char *)v94 + v102);
      unint64_t v100 = &v97[v102];
      uint64_t v103 = (long long *)(v97 + 16);
      uint64_t v104 = v94 + 1;
      uint64_t v105 = v101 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v106 = *v103;
        *(v104 - 1) = *(v103 - 1);
        *uint64_t v104 = v106;
        v103 += 2;
        v104 += 2;
        v105 -= 4;
      }
      while (v105);
      if (v101 == (v101 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_137:
        if (v92 == v93) {
          goto LABEL_144;
        }
        unint64_t v108 = v93 - v92 - 8;
        if (v108 >= 0x18)
        {
          uint64_t v111 = (v108 >> 3) + 1;
          uint64_t v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
          v109 = (void *)((char *)v95 + v112);
          long long v110 = &v92[v112];
          size_t v113 = (long long *)(v92 + 16);
          long long v114 = v95 + 1;
          uint64_t v115 = v111 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *long long v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL)) {
LABEL_144:
          }
            E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(&v133, &__p, v88);
        }
        else
        {
          v109 = v95;
          long long v110 = v92;
        }
        do
        {
          uint64_t v117 = *(void *)v110;
          v110 += 8;
          *v109++ = v117;
        }
        while (v110 != v93);
        goto LABEL_144;
      }
    }
    else
    {
      uint64_t v99 = v94;
      unint64_t v100 = v97;
    }
    do
    {
      uint64_t v107 = *(void *)v100;
      v100 += 8;
      *v99++ = v107;
    }
    while (v100 != v96);
    goto LABEL_137;
  }
}

void sub_19232B834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v31 = *(void **)(v29 - 104);
  if (v31)
  {
    *(void *)(v29 - 96) = v31;
    operator delete(v31);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19232BBA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::MlcCpuInferenceOperation::MlcCpuInferenceOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)BOOL v16 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v18 = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v16);
  uint64_t v6 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        int v7 = (void **)*v6;
        size_t v8 = (std::__shared_weak_count *)v6[6];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        if (*((char *)v6 + 39) < 0) {
          break;
        }
        operator delete(v6);
        uint64_t v6 = v7;
        if (!v7) {
          goto LABEL_9;
        }
      }
      operator delete(v6[2]);
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
LABEL_9:
  uint64_t v9 = v16[0];
  v16[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EE3265B8;
  *((void *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  uint64_t v10 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(a1) + 16;
  while (1)
  {
    uint64_t v10 = *(void *)v10;
    if (!v10) {
      break;
    }
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v10 + 40)))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v16, "MlcCpuInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v14, "MlcCpuInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v15, 1, v14);
      E5RT::E5RTError::E5RTError(exception, v16, v15);
    }
  }
  uint64_t v12 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a1) + 16;
  while (1)
  {
    uint64_t v12 = *(void *)v12;
    if (!v12) {
      break;
    }
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v12 + 40)))
    {
      uint64_t v13 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v16, "MlcCpuInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v14, "MlcCpuInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v15, 1, v14);
      E5RT::E5RTError::E5RTError(v13, v16, v15);
    }
  }
  operator new();
}

void sub_19232BF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x192FF16B0](v22, 0x10F2C40F8C5B503);
  kdebug_trace();
  BOOL v24 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)v21 + 37);
  *((void *)v21 + 37) = 0;
  if (v24)
  {
    E5RT::Ops::MlcCpuInferenceOperation::Impl::~Impl(v24);
    MEMORY[0x192FF16B0]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::MlcCpuInferenceOperation::~MlcCpuInferenceOperation(E5RT::Ops::MlcCpuInferenceOperation *this)
{
  *(void *)this = &unk_1EE3265B8;
  unint64_t v2 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::MlcCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::MlcCpuInferenceOperation::Impl *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE3265B8;
  unint64_t v2 = (E5RT::Ops::MlcCpuInferenceOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::MlcCpuInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::GetOpCode(E5RT::Ops::MlcCpuInferenceOperation *this)
{
  return 7;
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::PrepareOpForEncode(E5RT::Ops::MlcCpuInferenceOperation::Impl **this)
{
  return kdebug_trace();
}

void sub_19232C1F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::EncodeOperation(E5RT::Ops::MlcCpuInferenceOperation::Impl **this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  return kdebug_trace();
}

void sub_19232C2B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::ResetOperation(E5RT::Ops::MlcCpuInferenceOperation *this)
{
  return kdebug_trace();
}

void sub_19232C35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  return kdebug_trace();
}

void sub_19232C400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MlcCpuInferenceOperation::ReshapeOperationInternal(uint64_t *a1, uint64_t a2)
{
  return kdebug_trace();
}

void sub_19232C4B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  unint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_19232C56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::destroy(a1, *(void *)(a2 + 8));
    std::locale v4 = *(std::__shared_weak_count **)(a2 + 64);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_5:
        uint64_t v5 = (void *)a2;
LABEL_7:
        operator delete(v5);
        return;
      }
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(*(void **)(a2 + 32));
    uint64_t v5 = (void *)a2;
    goto LABEL_7;
  }
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, a2, &v16, &v15, a3);
  if (*v6) {
    return (void *)*v6;
  }
  size_t v8 = v6;
  uint64_t v9 = operator new(0x48uLL);
  uint64_t v10 = (std::string *)(v9 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v9[6] = *(void *)(a4 + 16);
  }
  uint64_t v11 = *(void *)(a4 + 32);
  v9[7] = *(void *)(a4 + 24);
  unsigned char v9[8] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v16;
  void *v9 = 0;
  v9[1] = 0;
  v9[2] = v12;
  *size_t v8 = (uint64_t)v9;
  uint64_t v13 = (uint64_t *)**a1;
  size_t v14 = v9;
  if (v13)
  {
    *a1 = v13;
    size_t v14 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_19232C750(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_retain_mil_entry_points(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE394DF0;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = a3;
  uint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_19232C86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_enable_profiling(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394E70;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232C96C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_enable_profiling(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394EF0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232CA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_force_recompilation(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394F70;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232CB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_force_recompilation(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394FF0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232CC64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_force_fetch_from_cache(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395070;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232CD64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_force_fetch_from_cache(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3950F0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232CE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backend(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395170;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232CF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backend(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3951F0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232D05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_force_bnns_graph(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395270;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232D15C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_force_bnns_graph(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3952F0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232D258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_preferred_cpu_backend(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2;
  uint64_t v3 = operator new(0x20uLL);
  *uint64_t v3 = &unk_1EE3953F0;
  v3[1] = a1;
  v3[2] = &v6;
  void v3[3] = 1;
  size_t v8 = v3;
  uint64_t v4 = E5RT::ExceptionSafeExecute((uint64_t)v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
  return v4;
}

void sub_19232D370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v13) {
    sub_192334FEC();
  }
  else {
    sub_1923017A4(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_preferred_cpu_backend(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395370;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232D488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_preferred_cpu_backends(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE395470;
  v6[1] = a1;
  v6[2] = a3;
  void v6[3] = a2;
  uint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_19232D5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3954F0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232D6A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395570;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232D7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocations(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3955F0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232D8A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_states(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3956F0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232D99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocations(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395770;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232DA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_force_classic_aot_old_hw(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3957F0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232DB98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_force_classic_aot_old_hw(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395870;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232DC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_custom_ane_compiler_options(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3958F0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232DD90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_custom_ane_compiler_options(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395970;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232DE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shape(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395A70;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232DF88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dim(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395AF0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232E088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dim(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395B70;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232E184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inference(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395C70;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232E280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_enable_mpsgraph_package(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395CF0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232E380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_enable_mpsgraph_package(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395D70;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19232E47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19232E494()
{
}

void *sub_19232E4A8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE394B70;
  result[1] = v3;
  return result;
}

uint64_t sub_19232E4F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE394B70;
  a2[1] = v2;
  return result;
}

uint64_t sub_19232E51C(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  uint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_19232E680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19232E6E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_e5_compiler_options_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z31e5rt_e5_compiler_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_e5_compiler_options_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_e5_compiler_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19232E750()
{
  return &unk_1EE394BD0;
}

void sub_19232E760()
{
}

void *sub_19232E774(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE394BF0;
  result[1] = v3;
  return result;
}

uint64_t sub_19232E7BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE394BF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19232E7E8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      MEMORY[0x192FF16B0](v2, 0x20C4093837F09);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      size_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    size_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19232E9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19232E9E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_e5_compiler_options_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_e5_compiler_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_e5_compiler_options_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_e5_compiler_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19232EA54()
{
  return &unk_1EE394C50;
}

void sub_19232EA64()
{
}

__n128 sub_19232EA78(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19232EAC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19232EAF4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v38 = operator new(0x30uLL);
    long long v39 = xmmword_192DA88D0;
    strcpy((char *)v38, "Invalid Function Argument: handle is NULL.");
    v37[23] = 10;
    strcpy(v37, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v38, (uint64_t *)v37);
    if ((v37[23] & 0x80000000) != 0) {
      operator delete(*(void **)v37);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(v38);
    }
    return 1;
  }
  uint64_t v38 = 0;
  long long v39 = 0uLL;
  uint64_t v2 = *(unint64_t **)(a1 + 8);
  unint64_t v3 = *v2;
  if ((*v2 & 4) != 0)
  {
    uint64_t v4 = (char *)operator new(8uLL);
    *(void *)uint64_t v4 = 4;
    long long v5 = v4 + 8;
    uint64_t v38 = v4;
    *((void *)&v39 + 1) = v4 + 8;
    unint64_t v11 = *v2;
    *(void *)&long long v39 = v4 + 8;
    unint64_t v3 = v11 & 0xFFFFFFFFFFFFFFFBLL;
    unint64_t *v2 = v3;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      uint64_t v6 = v4;
      char v7 = v5;
      size_t v8 = v5;
      if ((v3 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v4 = 0;
    long long v5 = 0;
    if ((v3 & 2) == 0) {
      goto LABEL_4;
    }
  }
  uint64_t v12 = v5 - v4;
  uint64_t v13 = (v5 - v4) >> 3;
  unint64_t v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (v12 >> 2 > v14) {
    unint64_t v14 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v16 = (char *)operator new(8 * v15);
  }
  else
  {
    BOOL v16 = 0;
  }
  uint64_t v6 = &v16[8 * v13];
  char v7 = &v16[8 * v15];
  *(void *)uint64_t v6 = 2;
  size_t v8 = v6 + 8;
  if (v5 != v4)
  {
    uint64_t v6 = &v16[v12 & 7];
    memcpy(v6, &v5[-(v12 & 0xFFFFFFFFFFFFFFF8)], v12 & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v38 = v6;
  *((void *)&v39 + 1) = v7;
  if (v4)
  {
    operator delete(v4);
    uint64_t v2 = *(unint64_t **)(a1 + 8);
  }
  *(void *)&long long v39 = v8;
  unint64_t v3 = *v2 & 0xFFFFFFFFFFFFFFFDLL;
  unint64_t *v2 = v3;
  if ((v3 & 1) == 0)
  {
LABEL_5:
    if (v3)
    {
LABEL_6:
      *(void *)unint64_t v37 = operator new(0x38uLL);
      *(_OWORD *)&v37[8] = xmmword_192DA8900;
      strcpy(*(char **)v37, "Invalid bits set in the provided allowed bit mask.");
      char v36 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v37, (uint64_t *)__p);
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if ((v37[23] & 0x80000000) == 0)
        {
LABEL_8:
          uint64_t v9 = 1;
          uint64_t v10 = v38;
          if (!v38) {
            return v9;
          }
          goto LABEL_54;
        }
      }
      else if ((v37[23] & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)v37);
      uint64_t v9 = 1;
      uint64_t v10 = v38;
      if (!v38) {
        return v9;
      }
LABEL_54:
      *(void *)&long long v39 = v10;
      operator delete(v10);
      return v9;
    }
    goto LABEL_53;
  }
LABEL_29:
  if (v8 < v7)
  {
    *(void *)size_t v8 = 1;
    BOOL v17 = v8 + 8;
    goto LABEL_52;
  }
  uint64_t v18 = (v8 - v6) >> 3;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if ((v7 - v6) >> 2 > v19) {
    unint64_t v19 = (v7 - v6) >> 2;
  }
  if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v21 = operator new(8 * v20);
  }
  else
  {
    long long v21 = 0;
  }
  uint64_t v22 = &v21[8 * v18];
  int v23 = &v21[8 * v20];
  void *v22 = 1;
  BOOL v17 = v22 + 1;
  if (v8 != v6)
  {
    unint64_t v24 = v8 - v6 - 8;
    if (v24 < 0x58)
    {
      uint64_t v25 = v8;
      goto LABEL_49;
    }
    if ((unint64_t)(v6 - v21) < 0x20)
    {
      uint64_t v25 = v8;
      do
      {
LABEL_49:
        uint64_t v32 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v22 = v32;
      }
      while (v25 != v6);
      goto LABEL_50;
    }
    uint64_t v26 = (v24 >> 3) + 1;
    uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v25 = &v8[-v27];
    uint64_t v22 = (void *)((char *)v22 - v27);
    long long v28 = &v21[8 * v18 - 16];
    uint64_t v29 = v8 - 16;
    uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *long long v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_49;
    }
  }
LABEL_50:
  uint64_t v38 = v22;
  *((void *)&v39 + 1) = v23;
  if (v6)
  {
    operator delete(v6);
    uint64_t v2 = *(unint64_t **)(a1 + 8);
  }
LABEL_52:
  *(void *)&long long v39 = v17;
  unint64_t v33 = *v2 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t *v2 = v33;
  if (v33) {
    goto LABEL_6;
  }
LABEL_53:
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed(**(void **)(a1 + 16), (uint64_t)&v38);
  uint64_t v9 = 0;
  uint64_t v10 = v38;
  if (v38) {
    goto LABEL_54;
  }
  return v9;
}

void sub_19232EF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19232EFA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z54e5rt_e5_compiler_options_set_compute_device_types_maskE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z54e5rt_e5_compiler_options_set_compute_device_types_maskE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z54e5rt_e5_compiler_options_set_compute_device_types_maskE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z54e5rt_e5_compiler_options_set_compute_device_types_maskE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19232F018()
{
  return &unk_1EE394CD0;
}

void sub_19232F028()
{
}

__n128 sub_19232F03C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19232F088(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19232F0B8(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      *unint64_t v3 = 0;
      uint64_t ComputeDeviceTypesAllowed = E5RT::E5CompilerOptions::GetComputeDeviceTypesAllowed(*v1);
      long long v5 = *(void **)ComputeDeviceTypesAllowed;
      uint64_t v6 = *(void **)(ComputeDeviceTypesAllowed + 8);
      if (*(void **)ComputeDeviceTypesAllowed != v6)
      {
        char v7 = *(void **)(a1 + 16);
        do
        {
          if (*v5 <= 4uLL && ((1 << *v5) & 0x16) != 0) {
            *v7 |= *v5;
          }
          ++v5;
        }
        while (v5 != v6);
      }
      return 0;
    }
    else
    {
      uint64_t v12 = operator new(0x30uLL);
      long long v13 = xmmword_192DAC000;
      strcpy((char *)v12, "Invalid Function Argument: mask is NULL.");
      char v11 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v13) < 0) {
        operator delete(v12);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v12 = operator new(0x30uLL);
    long long v13 = xmmword_192DA88D0;
    strcpy((char *)v12, "Invalid Function Argument: handle is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(v12);
    }
    return 1;
  }
}

void sub_19232F280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19232F2C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z54e5rt_e5_compiler_options_get_compute_device_types_maskE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z54e5rt_e5_compiler_options_get_compute_device_types_maskE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z54e5rt_e5_compiler_options_get_compute_device_types_maskE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z54e5rt_e5_compiler_options_get_compute_device_types_maskE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19232F330()
{
  return &unk_1EE394D50;
}

void sub_19232F340()
{
}

__n128 sub_19232F354(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE394D70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19232F3A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394D70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19232F3E0(void *a1)
{
  uint64_t v1 = (uint64_t *)a1[1];
  if (!v1)
  {
    uint64_t v18 = operator new(0x30uLL);
    long long v19 = xmmword_192DA88D0;
    strcpy((char *)v18, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v17) = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v18, (uint64_t *)__p);
LABEL_31:
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(v18);
    }
    return 1;
  }
  if (!a1[2])
  {
    uint64_t v18 = operator new(0x38uLL);
    long long v19 = xmmword_192DAF6B0;
    strcpy((char *)v18, "Invalid Function Argument: entry_points is NULL.");
    HIBYTE(v17) = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v18, (uint64_t *)__p);
    goto LABEL_31;
  }
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  if (!a1[3]) {
    goto LABEL_19;
  }
  unint64_t v3 = 0;
  do
  {
    long long v5 = *(const char **)(a1[2] + 8 * v3);
    size_t v6 = strlen(v5);
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    char v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v10 = v6 | 7;
      }
      uint64_t v11 = v10 + 1;
      size_t v8 = operator new(v10 + 1);
      __p[1] = v7;
      unint64_t v17 = v11 | 0x8000000000000000;
      __p[0] = v8;
    }
    else
    {
      HIBYTE(v17) = v6;
      size_t v8 = __p;
      if (!v6)
      {
        LOBYTE(__p[0]) = 0;
        uint64_t v9 = v19;
        if ((unint64_t)v19 < *((void *)&v19 + 1)) {
          goto LABEL_5;
        }
        goto LABEL_16;
      }
    }
    memmove(v8, v5, (size_t)v7);
    *((unsigned char *)v7 + (void)v8) = 0;
    uint64_t v9 = v19;
    if ((unint64_t)v19 < *((void *)&v19 + 1))
    {
LABEL_5:
      long long v4 = *(_OWORD *)__p;
      *(void *)(v9 + 16) = v17;
      *(_OWORD *)uint64_t v9 = v4;
      *(void *)&long long v19 = v9 + 24;
      goto LABEL_6;
    }
LABEL_16:
    *(void *)&long long v19 = std::vector<std::string>::__push_back_slow_path<std::string>(&v18, (uint64_t)__p);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
LABEL_6:
    ++v3;
  }
  while (v3 < a1[3]);
  uint64_t v1 = (uint64_t *)a1[1];
LABEL_19:
  E5RT::E5CompilerOptions::SetMilEntryPoints(*v1, (uint64_t *)&v18);
  uint64_t v12 = (void **)v18;
  if (v18)
  {
    long long v13 = (void **)v19;
    unint64_t v14 = v18;
    if ((void *)v19 != v18)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      unint64_t v14 = v18;
    }
    *(void *)&long long v19 = v12;
    operator delete(v14);
  }
  return 0;
}

void sub_19232F684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19232F720(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_set_mil_entry_pointsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_set_mil_entry_pointsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_set_mil_entry_pointsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_set_mil_entry_pointsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19232F790()
{
  return &unk_1EE394DD0;
}

void sub_19232F7A0()
{
}

__n128 sub_19232F7B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE394DF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19232F808(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394DF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19232F840(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      if (*(void *)(a1 + 24))
      {
        MilEntryPoints = (void *)E5RT::E5CompilerOptions::GetMilEntryPoints(*v1);
        unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(MilEntryPoints[1] - *MilEntryPoints) >> 3);
        **(void **)(a1 + 24) = v4;
        **(void **)(a1 + 16) = malloc_type_malloc(8 * v4, 0x50040EE9192B6uLL);
        if (**(void **)(a1 + 24))
        {
          uint64_t v5 = 0;
          unint64_t v6 = 0;
          do
          {
            char v7 = (uint64_t **)(*MilEntryPoints + v5);
            if (*((char *)v7 + 23) < 0) {
              char v7 = (uint64_t **)*v7;
            }
            *(void *)(**(void **)(a1 + 16) + 8 * v6++) = v7;
            v5 += 24;
          }
          while (v6 < **(void **)(a1 + 24));
        }
        return 0;
      }
      else
      {
        uint64_t v11 = operator new(0x38uLL);
        long long v12 = xmmword_192DAF6B0;
        strcpy((char *)v11, "Invalid Function Argument: num_elements is NULL.");
        char v10 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v12) < 0) {
          operator delete(v11);
        }
        return 1;
      }
    }
    else
    {
      uint64_t v11 = operator new(0x38uLL);
      long long v12 = xmmword_192DAF6B0;
      strcpy((char *)v11, "Invalid Function Argument: entry_points is NULL.");
      char v10 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(v11);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v11 = operator new(0x30uLL);
    long long v12 = xmmword_192DA88D0;
    strcpy((char *)v11, "Invalid Function Argument: handle is NULL.");
    char v10 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11);
    }
    return 1;
  }
}

void sub_19232FAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19232FB30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_e5_compiler_options_retain_mil_entry_pointsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z48e5rt_e5_compiler_options_retain_mil_entry_pointsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_e5_compiler_options_retain_mil_entry_pointsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_e5_compiler_options_retain_mil_entry_pointsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19232FBA0()
{
  return &unk_1EE394E50;
}

void sub_19232FBB0()
{
}

__n128 sub_19232FBC4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394E70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19232FC10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394E70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19232FC40(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetEnableProfiling(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_19232FD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19232FD58(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_set_enable_profilingE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_set_enable_profilingE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_set_enable_profilingE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_set_enable_profilingE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19232FDC8()
{
  return &unk_1EE394ED0;
}

void sub_19232FDD8()
{
}

__n128 sub_19232FDEC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19232FE38(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19232FE68(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char EnableProfiling = E5RT::E5CompilerOptions::GetEnableProfiling(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = EnableProfiling;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19232FFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192330028(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_get_enable_profilingE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_get_enable_profilingE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_get_enable_profilingE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_get_enable_profilingE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192330098()
{
  return &unk_1EE394F50;
}

void sub_1923300A8()
{
}

__n128 sub_1923300BC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394F70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192330108(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394F70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192330138(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetForceRecompilation(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192330214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192330250(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_e5_compiler_options_set_force_recompilationE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z48e5rt_e5_compiler_options_set_force_recompilationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_e5_compiler_options_set_force_recompilationE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_e5_compiler_options_set_force_recompilationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923302C0()
{
  return &unk_1EE394FD0;
}

void sub_1923302D0()
{
}

__n128 sub_1923302E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE394FF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192330330(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE394FF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192330360(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char ForceRecompilation = E5RT::E5CompilerOptions::GetForceRecompilation(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ForceRecompilation;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1923304E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192330520(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_e5_compiler_options_get_force_recompilationE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z48e5rt_e5_compiler_options_get_force_recompilationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_e5_compiler_options_get_force_recompilationE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_e5_compiler_options_get_force_recompilationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192330590()
{
  return &unk_1EE395050;
}

void sub_1923305A0()
{
}

__n128 sub_1923305B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395070;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192330600(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395070;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192330630(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetForceFetchFromCache(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_19233070C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192330748(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_e5_compiler_options_set_force_fetch_from_cacheE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z51e5rt_e5_compiler_options_set_force_fetch_from_cacheE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_e5_compiler_options_set_force_fetch_from_cacheE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_e5_compiler_options_set_force_fetch_from_cacheE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923307B8()
{
  return &unk_1EE3950D0;
}

void sub_1923307C8()
{
}

__n128 sub_1923307DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3950F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192330828(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3950F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192330858(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char v3 = E5RT::E5CompilerOptions::GetForceFetchFromCache(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = v3;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1923309D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192330A18(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_e5_compiler_options_get_force_fetch_from_cacheE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z51e5rt_e5_compiler_options_get_force_fetch_from_cacheE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_e5_compiler_options_get_force_fetch_from_cacheE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_e5_compiler_options_get_force_fetch_from_cacheE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192330A88()
{
  return &unk_1EE395150;
}

void sub_192330A98()
{
}

__n128 sub_192330AAC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192330AF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395170;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192330B28(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalForceClassicCpuBackend(*v1, *(unsigned __int8 *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192330C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192330C40(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z67e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backendE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z67e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backendE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z67e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backendE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z67e5rt_e5_compiler_options_set_experimental_force_classic_cpu_backendE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192330CB0()
{
  return &unk_1EE3951D0;
}

void sub_192330CC0()
{
}

__n128 sub_192330CD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3951F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192330D20(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3951F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192330D50(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      ExperimentalForceClassicCpuBackstd::vector<std::string>::pointer end = E5RT::E5CompilerOptions::GetExperimentalForceClassicCpuBackend(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ExperimentalForceClassicCpuBackend;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192330ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192330F10(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z67e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backendE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z67e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backendE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z67e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backendE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z67e5rt_e5_compiler_options_get_experimental_force_classic_cpu_backendE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192330F80()
{
  return &unk_1EE395250;
}

void sub_192330F90()
{
}

__n128 sub_192330FA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395270;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192330FF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395270;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192331020(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetForceBNNSGraph(*v1, *(unsigned __int8 *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1923310FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192331138(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_set_force_bnns_graphE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_set_force_bnns_graphE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_set_force_bnns_graphE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_set_force_bnns_graphE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923311A8()
{
  return &unk_1EE3952D0;
}

void sub_1923311B8()
{
}

__n128 sub_1923311CC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3952F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192331218(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3952F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192331248(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      BOOL ForceBNNSGraph = E5RT::E5CompilerOptions::GetForceBNNSGraph(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ForceBNNSGraph;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1923313C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192331408(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z45e5rt_e5_compiler_options_get_force_bnns_graphE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z45e5rt_e5_compiler_options_get_force_bnns_graphE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z45e5rt_e5_compiler_options_get_force_bnns_graphE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z45e5rt_e5_compiler_options_get_force_bnns_graphE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192331478()
{
  return &unk_1EE395350;
}

void sub_192331488()
{
}

__n128 sub_19233149C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395370;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923314E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395370;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192331518(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  unint64_t v3 = (void **)operator new(0x20uLL);
  *unint64_t v3 = &unk_1EE395470;
  v3[1] = v2;
  v3[2] = &v9;
  void v3[3] = &v10;
  long long v13 = v3;
  uint64_t v4 = E5RT::ExceptionSafeExecute((uint64_t)&v11);
  if (v13 == &v11)
  {
    (*((void (**)(void **))v11 + 4))(&v11);
    if (v4) {
      return v4;
    }
LABEL_7:
    if (v9 == 1)
    {
      uint64_t v5 = *(void **)(a1 + 16);
      if (v5)
      {
        uint64_t v4 = 0;
        *uint64_t v5 = *v10;
      }
      else
      {
        uint64_t v11 = operator new(0x30uLL);
        long long v12 = xmmword_192DA88E0;
        strcpy((char *)v11, "Invalid Function Argument: cpu_backend is NULL.");
        char v8 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v12) < 0) {
          operator delete(v11);
        }
        return 1;
      }
      return v4;
    }
    uint64_t v11 = operator new(0x20uLL);
    long long v12 = xmmword_192DAB880;
    strcpy((char *)v11, "Multiple CPU backends are set.");
    char v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
    if (v8 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v12) & 0x80000000) == 0) {
        return 1;
      }
    }
    else if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
      return 1;
    }
    operator delete(v11);
    return 1;
  }
  if (v13) {
    (*((void (**)(void))*v13 + 5))();
  }
  if (!v4) {
    goto LABEL_7;
  }
  return v4;
}

void sub_1923317A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19233182C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z50e5rt_e5_compiler_options_get_preferred_cpu_backendE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z50e5rt_e5_compiler_options_get_preferred_cpu_backendE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z50e5rt_e5_compiler_options_get_preferred_cpu_backendE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50e5rt_e5_compiler_options_get_preferred_cpu_backendE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19233189C()
{
  return &unk_1EE3953D0;
}

void sub_1923318AC()
{
}

__n128 sub_1923318C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3953F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192331914(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3953F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19233194C(void *a1)
{
  uint64_t v1 = (uint64_t *)a1[1];
  if (v1)
  {
    if (a1[2])
    {
      std::string __p = 0;
      long long v22 = 0uLL;
      if (!a1[3])
      {
LABEL_20:
        E5RT::E5CompilerOptions::SetPreferredCpuBackends(*v1, (uint64_t *)&__p);
        uint64_t v13 = 0;
        uint64_t v14 = (void **)__p;
        if (!__p) {
          return v13;
        }
        goto LABEL_21;
      }
      uint64_t v3 = 0;
      while (1)
      {
        uint64_t v5 = a1[2];
        char v6 = *(const void **)(v5 + 8 * v3);
        if (!v6)
        {
          *(void *)std::string __dst = operator new(0x38uLL);
          *(_OWORD *)&__dst[8] = xmmword_192DA90B0;
          strcpy(*(char **)__dst, "Invalid Function Argument: cpu_backends[i] is NULL.");
          char v19 = 10;
          strcpy((char *)v18, "operator()");
          E5RT::LogErrorMessage((uint64_t *)__dst, v18);
          if (v19 < 0) {
            operator delete((void *)v18[0]);
          }
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          uint64_t v13 = 1;
          uint64_t v14 = (void **)__p;
          if (!__p) {
            return v13;
          }
LABEL_21:
          unint64_t v15 = (void **)v22;
          BOOL v16 = v14;
          if ((void **)v22 != v14)
          {
            do
            {
              if (*((char *)v15 - 1) < 0) {
                operator delete(*(v15 - 3));
              }
              v15 -= 3;
            }
            while (v15 != v14);
            BOOL v16 = __p;
          }
          *(void *)&long long v22 = v14;
          operator delete(v16);
          return v13;
        }
        size_t v7 = strlen(*(const char **)(v5 + 8 * v3));
        if (v7 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v8 = v7;
        if (v7 >= 0x17)
        {
          uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v11 = v7 | 7;
          }
          uint64_t v12 = v11 + 1;
          uint64_t v9 = operator new(v11 + 1);
          *(void *)&__dst[8] = v8;
          *(void *)&__dst[16] = v12 | 0x8000000000000000;
          *(void *)std::string __dst = v9;
        }
        else
        {
          __dst[23] = v7;
          uint64_t v9 = __dst;
          if (!v7)
          {
            __dst[0] = 0;
            uint64_t v10 = v22;
            if ((unint64_t)v22 >= *((void *)&v22 + 1)) {
              goto LABEL_17;
            }
            goto LABEL_5;
          }
        }
        memmove(v9, v6, v8);
        v9[v8] = 0;
        uint64_t v10 = v22;
        if ((unint64_t)v22 >= *((void *)&v22 + 1))
        {
LABEL_17:
          *(void *)&long long v22 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)__dst);
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          goto LABEL_6;
        }
LABEL_5:
        long long v4 = *(_OWORD *)__dst;
        *(void *)(v10 + 16) = *(void *)&__dst[16];
        *(_OWORD *)uint64_t v10 = v4;
        *(void *)&long long v22 = v10 + 24;
LABEL_6:
        if ((unint64_t)++v3 >= a1[3])
        {
          uint64_t v1 = (uint64_t *)a1[1];
          goto LABEL_20;
        }
      }
    }
    std::string __p = operator new(0x38uLL);
    long long v22 = xmmword_192DAF6B0;
    strcpy((char *)__p, "Invalid Function Argument: cpu_backends is NULL.");
    __dst[23] = 10;
    strcpy(__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, (uint64_t *)__dst);
  }
  else
  {
    std::string __p = operator new(0x30uLL);
    long long v22 = xmmword_192DA88D0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    __dst[23] = 10;
    strcpy(__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, (uint64_t *)__dst);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  return 1;
}

void sub_192331C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192331D74(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_e5_compiler_options_set_preferred_cpu_backendsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z51e5rt_e5_compiler_options_set_preferred_cpu_backendsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_e5_compiler_options_set_preferred_cpu_backendsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_e5_compiler_options_set_preferred_cpu_backendsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192331DE4()
{
  return &unk_1EE395450;
}

void sub_192331DF4()
{
}

__n128 sub_192331E08(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE395470;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192331E5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395470;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192331E94(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      if (*(void *)(a1 + 24))
      {
        PreferredCpuBackends = (void *)E5RT::E5CompilerOptions::GetPreferredCpuBackends(*v1);
        unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(PreferredCpuBackends[1] - *PreferredCpuBackends) >> 3);
        **(void **)(a1 + 16) = v4;
        **(void **)(a1 + 24) = malloc_type_malloc(8 * v4, 0x50040EE9192B6uLL);
        if (**(void **)(a1 + 16))
        {
          uint64_t v5 = 0;
          unint64_t v6 = 0;
          do
          {
            size_t v7 = (uint64_t **)(*PreferredCpuBackends + v5);
            if (*((char *)v7 + 23) < 0) {
              size_t v7 = (uint64_t **)*v7;
            }
            *(void *)(**(void **)(a1 + 24) + 8 * v6++) = v7;
            v5 += 24;
          }
          while (v6 < **(void **)(a1 + 16));
        }
        return 0;
      }
      else
      {
        uint64_t v11 = operator new(0x38uLL);
        long long v12 = xmmword_192DAF6B0;
        strcpy((char *)v11, "Invalid Function Argument: cpu_backends is NULL.");
        char v10 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v12) < 0) {
          operator delete(v11);
        }
        return 1;
      }
    }
    else
    {
      uint64_t v11 = operator new(0x38uLL);
      long long v12 = xmmword_192DAF6B0;
      strcpy((char *)v11, "Invalid Function Argument: num_elements is NULL.");
      char v10 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(v11);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v11 = operator new(0x30uLL);
    long long v12 = xmmword_192DA88D0;
    strcpy((char *)v11, "Invalid Function Argument: handle is NULL.");
    char v10 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v11, (uint64_t *)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11);
    }
    return 1;
  }
}

void sub_192332140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192332184(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_e5_compiler_options_get_preferred_cpu_backendsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z51e5rt_e5_compiler_options_get_preferred_cpu_backendsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_e5_compiler_options_get_preferred_cpu_backendsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_e5_compiler_options_get_preferred_cpu_backendsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923321F4()
{
  return &unk_1EE3954D0;
}

void sub_192332204()
{
}

__n128 sub_192332218(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3954F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192332264(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3954F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192332294(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatterns(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192332370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923323AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patternsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z71e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patternsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patternsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patternsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19233241C()
{
  return &unk_1EE395550;
}

void sub_19233242C()
{
}

__n128 sub_192332440(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19233248C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923324BC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char ExperimentalMatchE5MinimalCpuPatterns = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatterns(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ExperimentalMatchE5MinimalCpuPatterns;
    }
    else
    {
      size_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    size_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19233263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19233267C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patternsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z71e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patternsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patternsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patternsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923326EC()
{
  return &unk_1EE3955D0;
}

void sub_1923326FC()
{
}

__n128 sub_192332710(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3955F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19233275C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3955F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19233278C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetEnableReshapeWithMinimalAllocations(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192332868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923328A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z68e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocationsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z68e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocationsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z68e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocationsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z68e5rt_e5_compiler_options_set_enable_reshape_with_minimal_allocationsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192332914()
{
  return &unk_1EE395650;
}

void sub_192332924()
{
}

__n128 sub_192332938(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192332984(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923329B4(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatternsForStates(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192332A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192332ACC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z82e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z82e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z82e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z82e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_192332B3C()
{
  return &unk_1EE3956D0;
}

void sub_192332B4C()
{
}

__n128 sub_192332B60(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3956F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192332BAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3956F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192332BDC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char ExperimentalMatchE5MinimalCpuPatternsForStates = E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatternsForStates(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ExperimentalMatchE5MinimalCpuPatternsForStates;
    }
    else
    {
      size_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    size_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192332D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192332D9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z82e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z82e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z82e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z82e5rt_e5_compiler_options_get_experimental_match_e5_minimal_cpu_patterns_for_statesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_192332E0C()
{
  return &unk_1EE395750;
}

void sub_192332E1C()
{
}

__n128 sub_192332E30(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395770;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192332E7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395770;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192332EAC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char EnableReshapeWithMinimalAllocations = E5RT::E5CompilerOptions::GetEnableReshapeWithMinimalAllocations(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = EnableReshapeWithMinimalAllocations;
    }
    else
    {
      size_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    size_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19233302C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19233306C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z68e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocationsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z68e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocationsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z68e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocationsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z68e5rt_e5_compiler_options_get_enable_reshape_with_minimal_allocationsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923330DC()
{
  return &unk_1EE3957D0;
}

void sub_1923330EC()
{
}

__n128 sub_192333100(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3957F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19233314C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3957F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19233317C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetForceClassicAotOldHw(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192333258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192333294(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_e5_compiler_options_set_force_classic_aot_old_hwE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z53e5rt_e5_compiler_options_set_force_classic_aot_old_hwE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_e5_compiler_options_set_force_classic_aot_old_hwE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_e5_compiler_options_set_force_classic_aot_old_hwE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192333304()
{
  return &unk_1EE395850;
}

void sub_192333314()
{
}

__n128 sub_192333328(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395870;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192333374(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395870;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923333A4(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char ForceClassicAotOldHw = E5RT::E5CompilerOptions::GetForceClassicAotOldHw(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ForceClassicAotOldHw;
    }
    else
    {
      size_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: force is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    size_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192333524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192333564(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_e5_compiler_options_get_force_classic_aot_old_hwE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z53e5rt_e5_compiler_options_get_force_classic_aot_old_hwE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_e5_compiler_options_get_force_classic_aot_old_hwE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_e5_compiler_options_get_force_classic_aot_old_hwE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923335D4()
{
  return &unk_1EE3958D0;
}

void sub_1923335E4()
{
}

__n128 sub_1923335F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3958F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192333644(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3958F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192333674(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *v1;
      size_t v4 = strlen(*(const char **)(a1 + 16));
      if (v4 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v5 = v4;
      if (v4 >= 0x17)
      {
        uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17) {
          uint64_t v7 = v4 | 7;
        }
        uint64_t v8 = v7 + 1;
        p_dst = (void **)operator new(v7 + 1);
        *(void *)&long long v13 = v5;
        *((void *)&v13 + 1) = v8 | 0x8000000000000000;
        std::string __dst = p_dst;
      }
      else
      {
        HIBYTE(v13) = v4;
        p_dst = &__dst;
        if (!v4) {
          goto LABEL_11;
        }
      }
      memcpy(p_dst, v2, v5);
LABEL_11:
      *((unsigned char *)p_dst + v5) = 0;
      E5RT::E5CompilerOptions::SetCustomAneCompilerOptions(v3, (uint64_t)&__dst);
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst);
      }
      return 0;
    }
    std::string __dst = operator new(0x30uLL);
    long long v13 = xmmword_192DA90C0;
    strcpy((char *)__dst, "Invalid Function Argument: options is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    std::string __dst = operator new(0x30uLL);
    long long v13 = xmmword_192DA88D0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_192333860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1923338B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z56e5rt_e5_compiler_options_set_custom_ane_compiler_optionsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z56e5rt_e5_compiler_options_set_custom_ane_compiler_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z56e5rt_e5_compiler_options_set_custom_ane_compiler_optionsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z56e5rt_e5_compiler_options_set_custom_ane_compiler_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192333920()
{
  return &unk_1EE395950;
}

void sub_192333930()
{
}

__n128 sub_192333944(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395970;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192333990(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395970;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923339C0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t CustomAneCompilerOptions = E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(*v1);
      uint64_t result = 0;
      if (*(char *)(CustomAneCompilerOptions + 23) < 0) {
        uint64_t CustomAneCompilerOptions = *(void *)CustomAneCompilerOptions;
      }
      **(void **)(a1 + 16) = CustomAneCompilerOptions;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90C0;
      strcpy((char *)v7, "Invalid Function Argument: options is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192333B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192333B90(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z56e5rt_e5_compiler_options_get_custom_ane_compiler_optionsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z56e5rt_e5_compiler_options_get_custom_ane_compiler_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z56e5rt_e5_compiler_options_get_custom_ane_compiler_optionsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z56e5rt_e5_compiler_options_get_custom_ane_compiler_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192333C00()
{
  return &unk_1EE3959D0;
}

void sub_192333C10()
{
}

__n128 sub_192333C24(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3959F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192333C70(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3959F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192333CA0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalDisableDataDependentShape(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    size_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192333D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192333DB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z70e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shapeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z70e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z70e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shapeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z70e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192333E28()
{
  return &unk_1EE395A50;
}

void sub_192333E38()
{
}

__n128 sub_192333E4C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395A70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192333E98(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395A70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192333EC8(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char ExperimentalDisableDataDependentShape = E5RT::E5CompilerOptions::GetExperimentalDisableDataDependentShape(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ExperimentalDisableDataDependentShape;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90C0;
      strcpy((char *)v7, "Invalid Function Argument: disable is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192334048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192334088(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z70e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shapeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z70e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z70e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shapeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z70e5rt_e5_compiler_options_get_experimental_disable_data_dependent_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923340F8()
{
  return &unk_1EE395AD0;
}

void sub_192334108()
{
}

__n128 sub_19233411C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395AF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192334168(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395AF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192334198(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalEnableDefaultFunctionForRangeDim(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    size_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192334274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923342B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z79e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dimE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z79e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dimE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z79e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dimE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z79e5rt_e5_compiler_options_set_experimental_enable_default_function_for_range_dimE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_192334320()
{
  return &unk_1EE395B50;
}

void sub_192334330()
{
}

__n128 sub_192334344(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395B70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192334390(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395B70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923343C0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char ExperimentalEnableDefaultFunctionForRangeDim = E5RT::E5CompilerOptions::GetExperimentalEnableDefaultFunctionForRangeDim(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ExperimentalEnableDefaultFunctionForRangeDim;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192334540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192334580(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z79e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dimE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z79e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dimE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z79e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dimE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z79e5rt_e5_compiler_options_get_experimental_enable_default_function_for_range_dimE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_1923345F0()
{
  return &unk_1EE395BD0;
}

void sub_192334600()
{
}

__n128 sub_192334614(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192334660(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192334690(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    size_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_19233476C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923347A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z86e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z86e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z86e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z86e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_192334818()
{
  return &unk_1EE395C50;
}

void sub_192334828()
{
}

__n128 sub_19233483C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192334888(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923348B8(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char ExperimentalDisableCompileTimeMPSGraphTypeInference = E5RT::E5CompilerOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ExperimentalDisableCompileTimeMPSGraphTypeInference;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90C0;
      strcpy((char *)v7, "Invalid Function Argument: disable is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192334A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192334A78(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z86e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z86e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z86e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z86e5rt_e5_compiler_options_get_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_192334AE8()
{
  return &unk_1EE395CD0;
}

void sub_192334AF8()
{
}

__n128 sub_192334B0C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192334B58(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192334B88(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerOptions::SetEnableMPSGraphPackage(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    size_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192334C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192334CA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z52e5rt_e5_compiler_options_set_enable_mpsgraph_packageE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z52e5rt_e5_compiler_options_set_enable_mpsgraph_packageE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z52e5rt_e5_compiler_options_set_enable_mpsgraph_packageE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z52e5rt_e5_compiler_options_set_enable_mpsgraph_packageE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192334D10()
{
  return &unk_1EE395D50;
}

void sub_192334D20()
{
}

__n128 sub_192334D34(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395D70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192334D80(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395D70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192334DB0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char EnableMPSGraphPackage = E5RT::E5CompilerOptions::GetEnableMPSGraphPackage(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = EnableMPSGraphPackage;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: enable is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192334F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192334F70(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z52e5rt_e5_compiler_options_get_enable_mpsgraph_packageE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z52e5rt_e5_compiler_options_get_enable_mpsgraph_packageE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z52e5rt_e5_compiler_options_get_enable_mpsgraph_packageE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z52e5rt_e5_compiler_options_get_enable_mpsgraph_packageE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192334FE0()
{
  return &unk_1EE395DD0;
}

uint64_t sub_192334FEC()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 32))();
}

double E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel(E5RT::Ops::E5MinimalCpu::BaseKernel *this)
{
  *(void *)this = &unk_1EE325EC8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  return result;
}

void E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(E5RT::Ops::E5MinimalCpu::BaseKernel *this)
{
  *(void *)this = &unk_1EE325EC8;
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 7);
    char v4 = (void *)*((void *)this + 6);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v2;
    operator delete(v4);
  }
  size_t v5 = (void **)*((void *)this + 3);
  if (v5)
  {
    do
    {
      uint64_t v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0) {
LABEL_18:
        }
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v5);
      size_t v5 = v7;
    }
    while (v7);
  }
  char v6 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    operator delete(v6);
  }
}

uint64_t *E5RT::Ops::E5MinimalCpu::BaseKernel::CheckName(uint64_t a1, uint64_t a2, void *a3)
{
  double result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a3, a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "CheckName");
    std::operator+<char>();
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return result;
}

void sub_192335208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(uint64_t a1, const void **a2, void *a3)
{
  char v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a3, (uint64_t)a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v4[5]);
  double result = E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetBuffer");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" memory object is not a buffer", a2, v8);
    E5RT::Status::Status(v9, 1, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  return result;
}

void sub_192335350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::Ops::E5MinimalCpu::BaseKernel::GetTensorDescriptor(uint64_t a1, const void **a2, void *a3)
{
  char v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a3, (uint64_t)a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v4[5], &v11);
  size_t v5 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v11);
  char v6 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "GetTensorDescriptor");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not a tensor", a2, v9);
    E5RT::Status::Status(v10, 1, v9);
    E5RT::E5RTError::E5RTError(exception, &v11, v10);
  }
  return v5;
}

void sub_1923354F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192335504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::JitCallOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  uint64_t v5 = a1 + 8;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a4 + 24))
  {
    if (*((char *)a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a4, *((void *)a4 + 1));
    }
    else
    {
      long long v6 = *a4;
      *(void *)(a1 + 40) = *((void *)a4 + 2);
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (!*(void *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "Op params not specified.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(exception, v30, v29);
  }
  uint64_t v7 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t v10 = InputPorts[3];
  if (!v10)
  {
    unint64_t v24 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "No inputs specified.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(v24, v30, v29);
  }
  char v11 = (void *)OutputPorts;
  uint64_t v12 = *(void *)(OutputPorts + 24);
  if (!v12)
  {
    uint64_t v25 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "No outputs specified.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(v25, v30, v29);
  }
  long long v13 = *(void **)v5;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)v5 + 56) - *(void *)(*(void *)v5 + 48)) >> 3);
  uint64_t v15 = *(void *)(*(void *)v5 + 72);
  uint64_t v16 = *(void *)(*(void *)v5 + 80);
  if (v14 != 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3))
  {
    uint64_t v26 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "Mismatch in # of params and # of args for JitCall op.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(v26, v30, v29);
  }
  if (v14 != v12 + v10 + v7[3])
  {
    uint64_t v27 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v28, "# of args must be equal to # of input ports + # of output ports.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(v27, v30, v29);
  }
  if (v16 != v15)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v15 + v17)&& !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v11, v13[9] + v17)&& !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v7, v13[9] + v17))
      {
        long long v22 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v30, "Impl");
        std::operator+<char>();
        E5RT::Status::Status(v29, 1, v28);
        E5RT::E5RTError::E5RTError(v22, v30, v29);
      }
      uint64_t v19 = v13[6];
      v30[0] = (long long *)(v13[9] + v17);
      unint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 56, (uint64_t)v30[0], (uint64_t)&std::piecewise_construct, v30);
      std::string::operator=((std::string *)(v20 + 5), (const std::string *)(v19 + v17));
      ++v18;
      uint64_t v15 = v13[9];
      v17 += 24;
    }
    while (v18 < 0xAAAAAAAAAAAAAAABLL * ((v13[10] - v15) >> 3));
  }
  return a1;
}

void sub_192335A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(unsigned char *)(v27 + 48))
  {
    if (*(char *)(v27 + 47) < 0) {
      operator delete(*v28);
    }
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void E5RT::Ops::JitCallOperation::Impl::~Impl(E5RT::Ops::JitCallOperation::Impl *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void **)*((void *)this + 9);
    if (!v3) {
      goto LABEL_6;
    }
    while (1)
    {
LABEL_14:
      long long v6 = (void **)*v3;
      if (*((char *)v3 + 63) < 0)
      {
        operator delete(v3[5]);
        if (*((char *)v3 + 39) < 0) {
LABEL_18:
        }
          operator delete(v3[2]);
      }
      else if (*((char *)v3 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v3);
      uint64_t v3 = v6;
      if (!v6) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v3 = (void **)*((void *)this + 9);
  if (v3) {
    goto LABEL_14;
  }
LABEL_6:
  char v4 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    operator delete(v4);
  }
  if (*((unsigned char *)this + 48) && *((char *)this + 47) < 0)
  {
    operator delete(*((void **)this + 3));
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v5) {
      return;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v5) {
      return;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t E5RT::Ops::JitCallOperation::Impl::ValidatePortsMatchWithCalleeFunction(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  char v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
  uint64_t result = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*a1);
  if (v4[3] != *(void *)(InputPorts + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
    std::string::basic_string[abi:ne180100]<0>(&v50, "Callee MIL function has different # of inputs than JITCall op.");
    E5RT::Status::Status(&v49, 1, &v50);
    E5RT::E5RTError::E5RTError(exception, &v51, &v49);
  }
  uint64_t v8 = result;
  if (v5[3] != *(void *)(result + 24))
  {
    uint64_t v47 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
    std::string::basic_string[abi:ne180100]<0>(&v50, "Callee MIL function has different # of outputs than JITCall op.");
    E5RT::Status::Status(&v49, 1, &v50);
    E5RT::E5RTError::E5RTError(v47, &v51, &v49);
  }
  uint64_t v9 = InputPorts + 16;
  uint64_t v10 = a1 + 7;
  while (1)
  {
    uint64_t v9 = *(void *)v9;
    if (!v9) {
      break;
    }
    char v11 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v10, v9 + 16);
    if (!v11) {
LABEL_44:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(v4, (uint64_t)(v11 + 5));
    if (!v12)
    {
      uint64_t v38 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
      std::operator+<char>();
      E5RT::Status::Status(&v49, 1, &v50);
      E5RT::E5RTError::E5RTError(v38, &v51, &v49);
    }
    long long v13 = v12;
    PortDescriptorRef = (const void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v9 + 40));
    uint64_t result = E5RT::OperandDescriptor::operator!=(PortDescriptorRef, (const void *)v13[5]);
    if (result)
    {
      std::operator+<char>();
      uint64_t v15 = std::string::append(&v49, " arg = ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      int v17 = *(char *)(v9 + 39);
      if (v17 >= 0) {
        unint64_t v18 = (const std::string::value_type *)(v9 + 16);
      }
      else {
        unint64_t v18 = *(const std::string::value_type **)(v9 + 16);
      }
      if (v17 >= 0) {
        std::string::size_type v19 = *(unsigned __int8 *)(v9 + 39);
      }
      else {
        std::string::size_type v19 = *(void *)(v9 + 24);
      }
      unint64_t v20 = std::string::append(&v50, v18, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      std::string::size_type v52 = v20->__r_.__value_.__r.__words[2];
      long long v51 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      long long v22 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v50, "ValidatePortsMatchWithCalleeFunction");
      E5RT::Status::Status(&v49, 1, &v51);
      E5RT::E5RTError::E5RTError(v22, &v50, &v49);
    }
  }
  uint64_t v23 = v8 + 16;
  while (1)
  {
    uint64_t v23 = *(void *)v23;
    if (!v23) {
      return result;
    }
    unint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v10, v23 + 16);
    if (!v24) {
      goto LABEL_44;
    }
    uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(v5, (uint64_t)(v24 + 5));
    if (!v25)
    {
      long long v39 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
      std::operator+<char>();
      E5RT::Status::Status(&v49, 1, &v50);
      E5RT::E5RTError::E5RTError(v39, &v51, &v49);
    }
    uint64_t v26 = v25;
    uint64_t v27 = (void *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v23 + 40));
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v27))
    {
      uint64_t v40 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
      std::operator+<char>();
      uint64_t v41 = std::string::append(&v49, ". Not currently supported.");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(&v48, 1, &v50);
      E5RT::E5RTError::E5RTError(v40, &v51, &v48);
    }
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor((void *)v26[5]))
    {
      unint64_t v43 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v51, "ValidatePortsMatchWithCalleeFunction");
      std::operator+<char>();
      uint64_t v44 = std::string::append(&v49, ". Not currently supported.");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(&v48, 1, &v50);
      E5RT::E5RTError::E5RTError(v43, &v51, &v48);
    }
    long long v28 = E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v26[5]);
    uint64_t v29 = E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v27);
    uint64_t result = E5RT::operator!=((uint64_t)v28, (uint64_t)v29);
    if (result)
    {
      std::operator+<char>();
      uint64_t v30 = std::string::append(&v49, " arg = ");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      int v32 = *(char *)(v23 + 39);
      if (v32 >= 0) {
        unint64_t v33 = (const std::string::value_type *)(v23 + 16);
      }
      else {
        unint64_t v33 = *(const std::string::value_type **)(v23 + 16);
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(v23 + 39);
      }
      else {
        std::string::size_type v34 = *(void *)(v23 + 24);
      }
      uint64_t v35 = std::string::append(&v50, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      std::string::size_type v52 = v35->__r_.__value_.__r.__words[2];
      long long v51 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      unint64_t v37 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v50, "ValidatePortsMatchWithCalleeFunction");
      E5RT::Status::Status(&v49, 1, &v51);
      E5RT::E5RTError::E5RTError(v37, &v50, &v49);
    }
  }
}

void sub_192336458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v29 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void E5RT::Ops::JitCallOperation::Impl::EncodeOperation(E5RT::ExecutionStreamOperationInternal **this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  for (double i = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16); i; double i = (uint64_t **)*i)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)i[5]) & 1) == 0)
    {
      uint64_t v7 = (uint64_t)this[12];
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(this + 7, (uint64_t)(i + 2));
      if (!v8) {
LABEL_37:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      uint64_t InputPortRef = E5RT::ExecutionStreamOperationInternal::GetInputPortRef(v7, (uint64_t)(v8 + 5));
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)i[5], &v37);
      E5RT::IOPort::BindMemoryObject(InputPortRef, (uint64_t)&v37);
      uint64_t v10 = v38;
      if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  for (unint64_t j = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this) + 16); j; unint64_t j = (uint64_t **)*j)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)j[5]) & 1) == 0)
    {
      uint64_t v12 = (uint64_t)this[12];
      long long v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(this + 7, (uint64_t)(j + 2));
      if (!v13) {
        goto LABEL_37;
      }
      uint64_t OutputPortRef = E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(v12, (uint64_t)(v13 + 5));
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)j[5], &v35);
      E5RT::IOPort::BindMemoryObject(OutputPortRef, (uint64_t)&v35);
      uint64_t v15 = v36;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  for (k = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*this) + 16); k; k = (uint64_t **)*k)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)k[5]) & 1) == 0)
    {
      uint64_t v17 = (uint64_t)this[12];
      unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(this + 7, (uint64_t)(k + 2));
      if (!v18) {
        goto LABEL_37;
      }
      uint64_t v19 = E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(v17, (uint64_t)(v18 + 5));
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)k[5], &v33);
      E5RT::IOPort::BindMemoryObject(v19, (uint64_t)&v33);
      unint64_t v20 = v34;
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  uint64_t DependentAsyncEvents = E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*this);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::unordered_set((uint64_t)v31, DependentAsyncEvents);
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, void **))(*(void *)this[12] + 48))(this[12], v31);
  long long v22 = this[12];
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent((uint64_t)*this, &v29);
  uint64_t HasInternalCompletionEventBound = E5RT::ExecutionStreamOperationInternal::HasInternalCompletionEventBound(*this);
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, uint64_t *, uint64_t))(*(void *)v22 + 64))(v22, &v29, HasInternalCompletionEventBound);
  unint64_t v24 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, const E5RT::ExecutionStreamConfigOptions *, uint64_t))(*(void *)this[12] + 72))(this[12], a2, a3);
  uint64_t v25 = __p;
  if (__p)
  {
    do
    {
      uint64_t v26 = v25;
      uint64_t v25 = (void *)*v25;
      uint64_t v27 = (std::__shared_weak_count *)v26[3];
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      operator delete(v26);
    }
    while (v25);
  }
  long long v28 = v31[0];
  v31[0] = 0;
  if (v28) {
    operator delete(v28);
  }
}

void sub_192336AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_192336AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192336AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192336B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192336B1C(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    char v4 = (std::__shared_weak_count *)v3[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void E5RT::Ops::JitCallOperation::Impl::PrepareOpForEncode(E5RT::Ops::JitCallOperation::Impl *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  E5RT::E5CompilerOptions::Create(this);
}

void sub_192336F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a16) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::JitCallOperation::JitCallOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (E5RT::ExecutionStreamOperationInternal *)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, a6);
  *(void *)uint64_t v7 = &unk_1EE3261D8;
  *((void *)v7 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(v7);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  std::make_unique[abi:ne180100]<E5RT::Ops::JitCallOperation::Impl,E5RT::Ops::JitCallOperation&,std::shared_ptr<JitCallOpT const>,std::optional<std::string> &>();
}

void sub_1923371E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::JitCallOperation::Impl>>::~propagate_const(v3);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v2);
  _Unwind_Resume(a1);
}

void sub_192337208(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::JitCallOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<E5RT::Ops::JitCallOperation::Impl,E5RT::Ops::JitCallOperation&,std::shared_ptr<JitCallOpT const>,std::optional<std::string> &>()
{
}

void sub_192337368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  MEMORY[0x192FF16B0](v19, 0x10F2C4057798EFFLL);
  _Unwind_Resume(a1);
}

E5RT::Ops::JitCallOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::JitCallOperation::Impl>>::~propagate_const(E5RT::Ops::JitCallOperation::Impl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::JitCallOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void E5RT::Ops::JitCallOperation::~JitCallOperation(E5RT::Ops::JitCallOperation *this)
{
  *(void *)this = &unk_1EE3261D8;
  uint64_t v2 = (E5RT::Ops::JitCallOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::JitCallOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::JitCallOperation::Impl *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE3261D8;
  uint64_t v2 = (E5RT::Ops::JitCallOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::JitCallOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::JitCallOperation::GetOpCode(E5RT::Ops::JitCallOperation *this)
{
  return 13;
}

uint64_t E5RT::Ops::JitCallOperation::GetCalleeOperation@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 296);
  uint64_t v4 = *(void *)(v2 + 96);
  uint64_t v3 = *(void *)(v2 + 104);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t E5RT::Ops::JitCallOperation::EncodeOperation(E5RT::ExecutionStreamOperationInternal ***this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  return kdebug_trace();
}

void sub_1923375CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::JitCallOperation::PrepareOpForEncode(E5RT::Ops::JitCallOperation::Impl **this)
{
}

void sub_19233766C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::JitCallOperation::ResetOperation(E5RT::Ops::JitCallOperation *this)
{
  return kdebug_trace();
}

void sub_19233773C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::JitCallOperation::ExecuteSync(E5RT::Ops::JitCallOperation *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 11;
  strcpy(v5, "ExecuteSync");
  uint64_t v2 = (char *)operator new(0x28uLL);
  long long v3 = xmmword_192DB14B0;
  strcpy(v2, "JITCall Op cannot be executed directly.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_19233781C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v23)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_19233787C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19233786CLL);
}

void E5RT::Ops::JitCallOperation::SubmitAsync()
{
  exception = __cxa_allocate_exception(0x18uLL);
  v4[23] = 11;
  strcpy(v4, "SubmitAsync");
  uint64_t v1 = (char *)operator new(0x28uLL);
  long long v2 = xmmword_192DB14B0;
  strcpy(v1, "JITCall Op cannot be executed directly.");
  E5RT::Status::Status(v3, 2, &v1);
  E5RT::E5RTError::E5RTError(exception, v4, v3);
}

void sub_19233796C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v23)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_1923379CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1923379BCLL);
}

uint64_t std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (double i = *(void **)(a2 + 16); i; double i = (void *)*i)
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_192337D3C(_Unwind_Exception *a1)
{
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192337D50(_Unwind_Exception *a1)
{
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const> const&>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      long long v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            long long v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  long long v16 = (void *)(a1 + 16);
  long long v13 = operator new(0x20uLL);
  *long long v13 = 0;
  v13[1] = v9;
  uint64_t v17 = a3[1];
  v13[2] = *a3;
  v13[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    long long v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_28:
      *long long v13 = *v21;
LABEL_63:
      void *v21 = v13;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v26) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v26)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v26 < 3uLL || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < *(void *)&v26) {
LABEL_39:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        long long v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        long long v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v9;
      uint64_t v20 = *(void *)a1;
      long long v21 = *(void **)(*(void *)a1 + 8 * (v30 & v9));
      if (v21) {
        goto LABEL_28;
      }
    }
  }
  *long long v13 = *v16;
  *long long v16 = v13;
  *(void *)(v20 + 8 * v3) = v16;
  if (*v13)
  {
    unint64_t v31 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10) {
        v31 %= v10;
      }
    }
    else
    {
      v31 &= v10 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1923380C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperationInternal  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperationInternal  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperationInternal  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT32ExecutionStreamOperationInternalEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT32ExecutionStreamOperationInternalEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT32ExecutionStreamOperationInternalEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT32ExecutionStreamOperationInternalEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_1923383E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::Impl::Impl(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, id **a7, uint64_t a8, char a9, char a10, uint64_t a11)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *a3;
  uint64_t v13 = a3[1];
  *(void *)(a1 + 16) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(void *)(a1 + 40) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a5;
  *(void *)(a1 + 64) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a6;
  *(void *)(a1 + 88) = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  unint64_t v14 = (void **)(a1 + 208);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = objc_opt_new();
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 320, a8);
  *(unsigned char *)(a1 + 360) = a9;
  *(unsigned char *)(a1 + 361) = a10;
  *(void *)(a1 + 368) = a11;
  std::vector<std::string>::reserve((std::vector<std::string> *)(a1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3)- 0x5555555555555555 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)(a1 + 96), *(void *)(a1 + 104), *(std::string **)(a1 + 24), *(std::string **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)(a1 + 96), *(void *)(a1 + 104), *(std::string **)(a1 + 72), *(std::string **)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
  uint64_t v15 = *(void *)(a1 + 96);
  long long v16 = *(const void ***)(a1 + 104);
  unint64_t v17 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - v15) >> 3));
  if (v16 == (const void **)v15) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v15, v16, (uint64_t)v71, v18, 1);
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t v21 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 32);
  if (InputPorts[3] != 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 3))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v69, "Input count doesn't match ordered E5 input count.");
    E5RT::Status::Status(v70, 1, v69);
    E5RT::E5RTError::E5RTError(exception, v71, v70);
  }
  uint64_t v24 = OutputPorts[3];
  if (!v24)
  {
    size_t v63 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v69, "No outputs specified.");
    E5RT::Status::Status(v70, 1, v69);
    E5RT::E5RTError::E5RTError(v63, v71, v70);
  }
  uint64_t v26 = *(void *)(a1 + 48);
  uint64_t v25 = *(void *)(a1 + 56);
  if (v24 != 0xAAAAAAAAAAAAAAABLL * ((v25 - v26) >> 3))
  {
    unint64_t v64 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v69, "Output count doesn't match ordered E5 output count.");
    E5RT::Status::Status(v70, 1, v69);
    E5RT::E5RTError::E5RTError(v64, v71, v70);
  }
  unint64_t v27 = (void *)v21;
  if (*(void *)(v21 + 24) != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3))
  {
    uint64_t v65 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v69, "InOut count doesn't match ordered E5 inOut count.");
    E5RT::Status::Status(v70, 1, v69);
    E5RT::E5RTError::E5RTError(v65, v71, v70);
  }
  if (!*(void *)(a1 + 8))
  {
    int v66 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v69, "Op params not specified.");
    E5RT::Status::Status(v70, 1, v69);
    E5RT::E5RTError::E5RTError(v66, v71, v70);
  }
  if (v23 != v22)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v23))
      {
        uint64_t v54 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
        std::string::basic_string[abi:ne180100]<0>(v69, "Input port corresponding to E5 input in ordered list not found.");
        E5RT::Status::Status(v70, 2, v69);
        E5RT::E5RTError::E5RTError(v54, v71, v70);
      }
      uint8x8_t v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v23);
      if (!v28) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v28[5]);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        uint64_t v55 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
        std::string::basic_string[abi:ne180100]<0>(v69, "Input surface ports aren't supported with MPS Graph inference yet.");
        E5RT::Status::Status(v70, 2, v69);
        E5RT::E5RTError::E5RTError(v55, v71, v70);
      }
      v23 += 24;
    }
    while (v23 != v22);
    uint64_t v26 = *(void *)(a1 + 48);
    uint64_t v25 = *(void *)(a1 + 56);
  }
  while (v26 != v25)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v26))
    {
      uint64_t v56 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v69, "Output port corresponding to E5 output in ordered list not found.");
      E5RT::Status::Status(v70, 2, v69);
      E5RT::E5RTError::E5RTError(v56, v71, v70);
    }
    unint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v26);
    if (!v30) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unint64_t v31 = (E5RT::IOPortImpl **)v30[5];
    if (!v31)
    {
      long long v57 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v69, "Invalid output port.");
      E5RT::Status::Status(v70, 1, v69);
      E5RT::E5RTError::E5RTError(v57, v71, v70);
    }
    int v32 = (void *)E5RT::IOPort::GetPortDescriptorRef(v31);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v32))
    {
      uint64_t v58 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v69, "Output surface ports aren't supported with MPS Graph inference yet.");
      E5RT::Status::Status(v70, 2, v69);
      E5RT::E5RTError::E5RTError(v58, v71, v70);
    }
    v26 += 24;
  }
  uint64_t v34 = *(void *)(a1 + 72);
  for (uint64_t i = *(void *)(a1 + 80); v34 != i; v34 += 24)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v27, v34))
    {
      int64x2_t v59 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v69, "InOut port corresponding to E5 inOut in ordered list not found.");
      E5RT::Status::Status(v70, 2, v69);
      E5RT::E5RTError::E5RTError(v59, v71, v70);
    }
    uint64_t v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v27, v34);
    if (!v35) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    long long v36 = (E5RT::IOPortImpl **)v35[5];
    if (!v36)
    {
      uint64_t v60 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v69, "Invalid inOut port.");
      E5RT::Status::Status(v70, 1, v69);
      E5RT::E5RTError::E5RTError(v60, v71, v70);
    }
    uint64_t v37 = (void *)E5RT::IOPort::GetPortDescriptorRef(v36);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v37))
    {
      uint64_t v61 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v69, "InOut surface ports aren't supported with MPS Graph inference yet.");
      E5RT::Status::Status(v70, 2, v69);
      E5RT::E5RTError::E5RTError(v61, v71, v70);
    }
  }
  if (a7)
  {
    uint64_t v38 = E5RT::ComputeGPUDevice::GetMTLDevice(a7);
  }
  else
  {
    uint64_t v38 = MTLCreateSystemDefaultDevice();
  }
  long long v39 = v38;
  uint64_t v40 = *(void *)(*(void *)(a1 + 8) + 48);
  if (!v40 || v40 == [v38 registryID]) {
    objc_storeStrong((id *)(a1 + 280), v39);
  }
  if (!*(void *)(a1 + 280))
  {
    size_t v67 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v71, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v69, "Target MTLDevice not found.");
    E5RT::Status::Status(v70, 11, v69);
    E5RT::E5RTError::E5RTError(v67, v71, v70);
  }
  id v41 = objc_alloc_init(MEMORY[0x1E4F35A68]);
  long long v42 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v41;

  [*(id *)(a1 + 136) setWaitUntilCompleted:0];
  if (*(void *)(a1 + 368) >= 2uLL) {
    objc_msgSend(*(id *)(a1 + 136), "setMaximumNumberOfEncodingThreads:");
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 56))
  {
    [*(id *)(a1 + 136) setEnableProfilingOpNames:1];
    [*(id *)(a1 + 136) setBreakUpMetalEncoders:1];
    [*(id *)(a1 + 136) setBriefProfilingOpNames:1];
  }
  uint64_t v43 = objc_opt_new();
  uint64_t v44 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v43;

  uint64_t v45 = objc_opt_new();
  uint64_t v46 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v45;

  uint64_t v47 = objc_opt_new();
  uint64_t v48 = *v14;
  void *v14 = (void *)v47;

  uint64_t v49 = objc_opt_new();
  std::string v50 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = v49;

  uint64_t v51 = objc_opt_new();
  std::string::size_type v52 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = v51;

  return a1;
}

{
  return E5RT::Ops::MpsGraphInferenceOperation::Impl::Impl(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_192338F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  unint64_t v31 = *(char **)(v28 + 336);
  if (!v31)
  {
LABEL_8:
    uint64_t v33 = *a10;
    *a10 = 0;
    if (v33) {
      operator delete(v33);
    }

    uint64_t v34 = *(id **)(v28 + 248);
    if (v34)
    {
      do
      {
        uint64_t v35 = (id *)*v34;

        operator delete(v34);
        uint64_t v34 = v35;
      }
      while (v35);
    }
    long long v36 = *(void **)(v28 + 232);
    *(void *)(v28 + 232) = 0;
    if (v36) {
      operator delete(v36);
    }

    uint64_t v37 = *(void ***)(v28 + 184);
    if (v37)
    {
      do
      {
        uint64_t v45 = (void **)*v37;
        if (*((char *)v37 + 39) < 0) {
          operator delete(v37[2]);
        }
        operator delete(v37);
        uint64_t v37 = v45;
      }
      while (v45);
    }
    uint64_t v38 = *v29;
    *uint64_t v29 = 0;
    if (v38) {
      operator delete(v38);
    }

    long long v39 = *(std::__shared_weak_count **)(v28 + 128);
    if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    uint64_t v40 = (void **)*a14;
    if (*a14)
    {
      uint64_t v46 = *(void ***)(v28 + 104);
      uint64_t v47 = *a14;
      if (v46 != v40)
      {
        do
        {
          if (*((char *)v46 - 1) < 0) {
            operator delete(*(v46 - 3));
          }
          v46 -= 3;
        }
        while (v46 != v40);
        uint64_t v47 = *a14;
      }
      *(void *)(v28 + 104) = v40;
      operator delete(v47);
      id v41 = (void **)*a12;
      if (!*a12)
      {
LABEL_22:
        long long v42 = (void **)*a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_43;
      }
    }
    else
    {
      id v41 = (void **)*a12;
      if (!*a12) {
        goto LABEL_22;
      }
    }
    uint64_t v48 = *(void ***)(v28 + 80);
    uint64_t v49 = v41;
    if (v48 != v41)
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != v41);
      uint64_t v49 = *a12;
    }
    *(void *)(v28 + 80) = v41;
    operator delete(v49);
    long long v42 = (void **)*a13;
    if (!*a13)
    {
LABEL_23:
      uint64_t v43 = (void **)*a11;
      if (!*a11) {
        goto LABEL_24;
      }
      goto LABEL_50;
    }
LABEL_43:
    std::string v50 = *(void ***)(v28 + 56);
    uint64_t v51 = v42;
    if (v50 != v42)
    {
      do
      {
        if (*((char *)v50 - 1) < 0) {
          operator delete(*(v50 - 3));
        }
        v50 -= 3;
      }
      while (v50 != v42);
      uint64_t v51 = *a13;
    }
    *(void *)(v28 + 56) = v42;
    operator delete(v51);
    uint64_t v43 = (void **)*a11;
    if (!*a11)
    {
LABEL_24:
      uint64_t v44 = *(std::__shared_weak_count **)(v28 + 16);
      if (!v44) {
        goto LABEL_59;
      }
      goto LABEL_57;
    }
LABEL_50:
    std::string::size_type v52 = *(void ***)(v28 + 32);
    uint64_t v53 = v43;
    if (v52 != v43)
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != v43);
      uint64_t v53 = *a11;
    }
    *(void *)(v28 + 32) = v43;
    operator delete(v53);
    uint64_t v44 = *(std::__shared_weak_count **)(v28 + 16);
    if (!v44) {
LABEL_59:
    }
      _Unwind_Resume(a1);
LABEL_57:
    if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      _Unwind_Resume(a1);
    }
    goto LABEL_59;
  }
  while (1)
  {
    int v32 = *(char **)v31;
    if (v31[63] < 0)
    {
      operator delete(*((void **)v31 + 5));
      if ((v31[39] & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_7:
      operator delete(*((void **)v31 + 2));
      operator delete(v31);
      unint64_t v31 = v32;
      if (!v32) {
        goto LABEL_8;
      }
    }
    else
    {
      if (v31[39] < 0) {
        goto LABEL_7;
      }
LABEL_4:
      operator delete(v31);
      unint64_t v31 = v32;
      if (!v32) {
        goto LABEL_8;
      }
    }
  }
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateOutputDtypeSizeForTensorBuffer(E5RT::Ops::MpsGraphInferenceOperation::Impl *this)
{
  uint64_t v2 = *((void *)this + 1);
  memset(&v34, 0, sizeof(v34));
  char v3 = *(unsigned char *)(v2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (std::string *)v2;
  }
  else {
    uint64_t v4 = *(std::string **)v2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v34.__pn_, v4, (std::string *)((char *)v4 + v5));
  std::__fs::filesystem::path::__string_view v6 = std::__fs::filesystem::path::__extension(&v34);
  if (v6.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v8 = (v6.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v8 = v6.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v9 = v8 + 1;
    unint64_t v7 = (std::string *)operator new(v8 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v6.__size_;
    __dst[0].__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_14;
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v6.__size_;
  unint64_t v7 = __dst;
  if (v6.__size_) {
LABEL_14:
  }
    memmove(v7, v6.__data_, v6.__size_);
  v7->__r_.__value_.__s.__data_[v6.__size_] = 0;
  std::__fs::filesystem::path v33 = (std::__fs::filesystem::path)__dst[0];
  memset(__dst, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__dst, (std::string *)".mpsgraphpackage", (std::string *)"");
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v10.__data_ = (const std::string_view::value_type *)__dst;
  }
  else {
    v10.__data_ = (const std::string_view::value_type *)__dst[0].__r_.__value_.__r.__words[0];
  }
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v10.__size_ = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
  }
  else {
    v10.__size_ = __dst[0].__r_.__value_.__l.__size_;
  }
  int v11 = std::__fs::filesystem::path::__compare(&v33, v10);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if (!v11) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v33.__pn_.__r_.__value_.__l.__data_);
  if (!v11)
  {
LABEL_24:
    if ((SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_49:
    operator delete(v34.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_28:
  E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)__dst, &v34, 1);
  uint64_t MILProgram = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)__dst);
  (*(void (**)(long long *__return_ptr))(*(void *)MILProgram + 64))(&v31);
  uint64_t v13 = v31;
  if (!(void)v31)
  {
    *((unsigned char *)&v33.__pn_.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v33, "main");
    (*(void (**)(long long *__return_ptr, uint64_t, std::__fs::filesystem::path *))(*(void *)MILProgram + 64))(&v29, MILProgram, &v33);
    long long v14 = v29;
    long long v29 = 0uLL;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v31 + 1);
    long long v31 = v14;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    long long v16 = (std::__shared_weak_count *)*((void *)&v29 + 1);
    if (*((void *)&v29 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__pn_.__r_.__value_.__l.__data_);
    }
    uint64_t v13 = v31;
    if (!(void)v31)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v33, "PopulateOutputDtypeSizeForTensorBuffer");
      std::string::basic_string[abi:ne180100]<0>(&v29, "MPSGraph op: No function found in the mil model.");
      E5RT::Status::Status(v30, 13, &v29);
      E5RT::E5RTError::E5RTError(exception, &v33, v30);
    }
  }
  (*(void (**)(std::__fs::filesystem::path *__return_ptr))(*(void *)v13 + 160))(&v33);
  uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v31 + 48))(v31);
  uint64_t v18 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 88))(v17);
  uint64_t v19 = *v18;
  if (v18[1] != *v18)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = (char *)this + 168;
    do
    {
      uint64_t v23 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(*(MIL::IRValueType **)(v33.__pn_.__r_.__value_.__r.__words[0] + 8 * v21));
      if (v23)
      {
        uint64_t v24 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v23);
        if (v24)
        {
          int DataType = MIL::IRTensorBufferValueType::GetDataType(v24);
          uint64_t v26 = E5RT::MILProgramUtils::BuildE5RTTensorComponentSize(DataType);
          *(void *)&long long v29 = v19 + v20;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v22, v19 + v20, (uint64_t)&std::piecewise_construct, (long long **)&v29)[5] = v26;
        }
      }
      ++v21;
      uint64_t v19 = *v18;
      v20 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v18[1] - *v18) >> 3) > v21);
  }
  if (v33.__pn_.__r_.__value_.__r.__words[0])
  {
    v33.__pn_.__r_.__value_.__l.__size_ = v33.__pn_.__r_.__value_.__r.__words[0];
    operator delete(v33.__pn_.__r_.__value_.__l.__data_);
  }
  unint64_t v27 = (std::__shared_weak_count *)*((void *)&v31 + 1);
  if (*((void *)&v31 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)__dst);
    if (SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_49;
    }
  }
  else
  {
    E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)__dst);
    if (SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_49;
    }
  }
}

void sub_192339A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a21);
  if (*(char *)(v35 - 65) < 0) {
    operator delete(*(void **)(v35 - 88));
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::PrepareOpForEncode(E5RT::Ops::MpsGraphInferenceOperation::Impl *this)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 1);
  memset(&v97, 0, sizeof(v97));
  char v3 = *(unsigned char *)(v2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (std::string *)v2;
  }
  else {
    uint64_t v4 = *(std::string **)v2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v97.__pn_, v4, (std::string *)((char *)v4 + v5));
  std::__fs::filesystem::__status(&v97, 0);
  if (SHIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__pn_.__r_.__value_.__l.__data_);
  }
  if (LOBYTE(__p[0]) == 255 || LOBYTE(__p[0]) == 0)
  {
    std::operator+<char>();
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    E5RT::Status::Status(v94, 13, &v97);
    E5RT::E5RTError::E5RTError(exception, __p, v94);
  }
  *((unsigned char *)&v97.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v97, "e5rt");
  unint64_t v7 = E5RT::GetE5RTLog((uint64_t)&v97);
  os_signpost_id_t v8 = os_signpost_id_generate(v7);

  if (SHIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__pn_.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v97.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v97, "e5rt");
  std::basic_string_view<_CharT, _Traits>::size_type v9 = E5RT::GetE5RTLog((uint64_t)&v97);
  if (SHIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v97.__pn_.__r_.__value_.__l.__data_);
    if (v8 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_21;
    }
  }
  else if (v8 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_21;
  }
  if (os_signpost_enabled(v9))
  {
    LOWORD(v97.__pn_.__r_.__value_.__l.__data_) = 0;
    _os_signpost_emit_with_name_impl(&dword_1920CB000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v8, "MpsGraphOpPrepareForEncode", (const char *)&unk_192F346DB, (uint8_t *)&v97, 2u);
  }
LABEL_21:

  v93[0] = MEMORY[0x1E4F143A8];
  v93[1] = 3221225472;
  v93[2] = sub_19233AAE0;
  v93[3] = &__block_descriptor_48_e5_v8__0l;
  v93[4] = this;
  v93[5] = v8;
  unint64_t v87 = (void (**)(void))MEMORY[0x192FF2250](v93);
  uint64_t v89 = (void *)[MEMORY[0x1E4F1CC08] mutableCopy];
  uint64_t v10 = *((void *)this + 1);
  if (*(unsigned char *)(v10 + 56))
  {
    [v89 setObject:&unk_1EE3AECF8 forKeyedSubscript:E5Common::kMpsgGraphEnableShaderProfilingStrKey[0]];
    uint64_t v10 = *((void *)this + 1);
  }
  if (*((void *)this + 43))
  {
    uint64_t v78 = *((void *)this + 2);
    v92[0] = v10;
    v92[1] = v78;
    if (v78) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v78 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v79 = sub_19233AC5C((uint64_t)this + 320, (uint64_t)v92);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)v92);
    [v89 setObject:v79 forKeyedSubscript:E5Common::kMpsgGraphDynamicCallableStrKey[0]];
    memset(&v97, 0, sizeof(v97));
    std::vector<std::string>::reserve((std::vector<std::string> *)&v97, *((void *)this + 43) + 1);
    std::vector<std::string>::push_back[abi:ne180100]((uint64_t)&v97, *((void *)this + 1));
    uint64_t v80 = (E5RT::SharedResourceManager *)sub_19233B264(*((uint64_t **)this + 42), 0, (uint64_t)&v97);
    uint64_t v81 = NSString;
    E5RT::SharedResourceManager::GetSharedResourceManager(v80);
    E5RT::SharedResourceManager::GenerateConcatenatedSortedURIs((uint64_t *)&v97, (uint64_t)__p);
    if (v96 >= 0) {
      unint64_t v82 = __p;
    }
    else {
      unint64_t v82 = (void **)__p[0];
    }
    unint64_t v83 = [v81 stringWithUTF8String:v82];
    [v89 setObject:v83 forKeyedSubscript:E5Common::kSharedResourceManagerStrKey[0]];

    if (v96 < 0) {
      operator delete(__p[0]);
    }
    std::vector<std::string>::~vector[abi:ne180100]((void **)&v97.__pn_.__r_.__value_.__l.__data_);

    uint64_t v84 = *((void *)this + 1);
    int v11 = NSString;
    uint64_t v12 = (void *)(v84 + 24);
    if (*(char *)(v84 + 47) < 0) {
      goto LABEL_25;
    }
  }
  else
  {
    int v11 = NSString;
    uint64_t v12 = (void *)(v10 + 24);
    if (*(char *)(v10 + 47) < 0) {
LABEL_25:
    }
      uint64_t v12 = (void *)*v12;
  }
  uint64_t v13 = [v11 stringWithUTF8String:v12];
  [v89 setObject:v13 forKeyedSubscript:E5Common::kMpsgGraphFunctionNameStrKey[0]];

  long long v14 = [NSNumber numberWithBool:*((unsigned __int8 *)this + 360)];
  [v89 setObject:v14 forKeyedSubscript:E5Common::kMpsgGraphDisableTypeInferenceStrKey[0]];

  uint64_t v15 = [NSNumber numberWithBool:*((unsigned __int8 *)this + 361)];
  [v89 setObject:v15 forKeyedSubscript:E5Common::kMpsgGraphEnableGPUQuantOpsStrKey[0]];

  long long v16 = [NSNumber numberWithUnsignedLong:*((void *)this + 46)];
  [v89 setObject:v16 forKeyedSubscript:E5Common::kMpsgGraphMaximumNumberOfEncodingThreadsStrKey[0]];

  uint64_t SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(v17);
  uint64_t v19 = (long long *)*((void *)this + 1);
  *((unsigned char *)&v97.__pn_.__r_.__value_.__s + 23) = 0;
  v97.__pn_.__r_.__value_.__s.__data_[0] = 0;
  E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, v19, 4, (uint64_t *)&v97, v89, (uint64_t *)__p);
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v21 = (std::__shared_weak_count *)*((void *)this + 16);
  *(_OWORD *)((char *)this + 120) = v20;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    uint64_t v22 = (std::__shared_weak_count *)__p[1];
    if (!__p[1]) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v22 = (std::__shared_weak_count *)__p[1];
    if (!__p[1]) {
      goto LABEL_30;
    }
  }
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((SHIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_30:
  if (SHIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]) < 0) {
LABEL_31:
  }
    operator delete(v97.__pn_.__r_.__value_.__l.__data_);
LABEL_32:
  size_t v88 = E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(*((const void **)this + 15));
  E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateOutputDtypeSizeForTensorBuffer(this);
  uint64_t v23 = [v88 getInputShapes];
  uint64_t v91 = [MEMORY[0x1E4F1CA48] array];
  unint64_t v24 = 0;
  int v90 = 0;
  while (1)
  {
    unint64_t v25 = [v23 count];
    if (v24 >= v25)
    {
      char v51 = v90;
      goto LABEL_64;
    }
    uint64_t v26 = *((void *)this + 12);
    unint64_t v27 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    uint64_t v28 = v26 + 24 * v24;
    long long v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v27, v28);
    uint64_t v30 = *(void *)this;
    long long v31 = (E5RT::IOPortImpl **)(v29
                              ? E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(v30, v26 + 24 * v24)
                              : E5RT::ExecutionStreamOperationInternal::GetInputPortRef(v30, v26 + 24 * v24));
    int v32 = v31;
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v31);
    std::__fs::filesystem::path v34 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    if (E5RT::IOPort::IsDynamic(v32))
    {
      if ((E5RT::IOPort::HasKnownShape(v32) & 1) == 0) {
        break;
      }
    }
    uint64_t v35 = [v23 objectAtIndexedSubscript:v24];
    long long v36 = [v35 shape];

    unint64_t v37 = 0;
    while (v37 < [v36 count])
    {
      uint64_t v38 = [v36 objectAtIndexedSubscript:v37];
      char v39 = [v38 isEqual:&unk_1EE3AED10];

      ++v37;
      if (v39)
      {
        int v90 = 1;
        break;
      }
    }
    uint64_t v40 = sub_19233B388(v34);
    id v41 = objc_alloc(MEMORY[0x1E4F35A80]);
    long long v42 = [v23 objectAtIndexedSubscript:v24];
    uint64_t v43 = objc_msgSend(v41, "initWithShape:dataType:", v40, objc_msgSend(v42, "dataType"));
    [v91 addObject:v43];

    uint64_t v44 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    uint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v44, v28);
    int v46 = *(char *)(v28 + 23);
    if (v45)
    {
      if (v46 < 0) {
        uint64_t v28 = *(void *)v28;
      }
      uint64_t v47 = (void *)*((void *)this + 28);
      uint64_t v48 = [NSString stringWithUTF8String:v28];
      [v47 setObject:v40 forKeyedSubscript:v48];
    }
    else
    {
      if (v46 < 0) {
        uint64_t v28 = *(void *)v28;
      }
      uint64_t v49 = (void *)*((void *)this + 26);
      uint64_t v48 = [NSString stringWithUTF8String:v28];
      [v49 setObject:v40 forKeyedSubscript:v48];
    }

    std::string v50 = [v23 objectAtIndexedSubscript:v24];
    sub_19233B48C(v34, v50);

    ++v24;
  }
  *((unsigned char *)&v97.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v97, "e5rt");
  std::string::size_type v52 = E5RT::GetE5RTLog((uint64_t)&v97);
  uint64_t v53 = v52;
  if (SHIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v97.__pn_.__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO)) {
      goto LABEL_63;
    }
  }
  else if (!os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
  {
    goto LABEL_63;
  }
  if (*(char *)(v28 + 23) < 0) {
    uint64_t v28 = *(void *)v28;
  }
  LODWORD(v97.__pn_.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v97.__pn_.__r_.__value_.__r.__words + 4) = v28;
  _os_log_impl(&dword_1920CB000, v53, OS_LOG_TYPE_INFO, "MPSGraph op: E5 Input shape is unknown for input/inOut = %s. Skipping input validation and reshape as part of PrepareOpForEncode().", (uint8_t *)&v97, 0xCu);
LABEL_63:

  char v51 = 1;
LABEL_64:
  uint64_t v54 = [v88 getOutputShapes];
  uint64_t v55 = v54;
  if (v51)
  {
    BOOL v56 = 0;
  }
  else
  {
    id v57 = v54;
    unint64_t v58 = 0;
    do
    {
      unint64_t v59 = [v57 count];
      BOOL v56 = v58 < v59;
      if (v58 >= v59) {
        break;
      }
      uint64_t v60 = [v57 objectAtIndexedSubscript:v58];
      BOOL v61 = sub_19233C364(v60);

      ++v58;
    }
    while (!v61);
  }
  if (v24 >= v25 && ((v90 | v56) & 1) != 0)
  {
    if ([v91 count] != 0xAAAAAAAAAAAAAAABLL
                                     * ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 3))
    {
      long long v85 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v97, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(__p, "Mismatch in number of inputs between E5 operation and MPS types array.");
      E5RT::Status::Status(v94, 2, __p);
      E5RT::E5RTError::E5RTError(v85, &v97, v94);
    }
    int v62 = [MEMORY[0x1E4F35A50] deviceWithMTLDevice:*((void *)this + 35)];
    uint64_t v63 = sub_19233C048(v88, v62, v91, *((unsigned __int8 *)this + 360));

    *((unsigned char *)this + 160) = 1;
    uint64_t v55 = (void *)v63;
  }
  uint64_t v64 = 0;
  for (unint64_t i = 0; i < [v55 count]; ++i)
  {
    uint64_t OutputPortRef = (E5RT::IOPortImpl **)E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(*(void *)this, *((void *)this + 6) + v64);
    uint64_t v67 = *((void *)this + 6);
    int v68 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(OutputPortRef);
    size_t v69 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v68);
    int v70 = (void *)(v67 + v64);
    if (E5RT::IOPort::HasKnownShape(OutputPortRef)
      && ([v55 objectAtIndexedSubscript:i],
          BOOL v71 = objc_claimAutoreleasedReturnValue(),
          BOOL v72 = sub_19233C364(v71),
          v71,
          !v72))
    {
      size_t v75 = [v55 objectAtIndexedSubscript:i];
      sub_19233B48C(v69, v75);

      int v74 = sub_19233B388(v69);
      if (*(char *)(v67 + v64 + 23) < 0) {
        int v70 = (void *)*v70;
      }
      uint64_t v76 = (void *)*((void *)this + 27);
      size_t v77 = [NSString stringWithUTF8String:v70];
      [v76 setObject:v74 forKeyedSubscript:v77];
    }
    else
    {
      *((unsigned char *)&v97.__pn_.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v97, "e5rt");
      v73 = E5RT::GetE5RTLog((uint64_t)&v97);
      int v74 = v73;
      if (SHIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v97.__pn_.__r_.__value_.__l.__data_);
        if (!os_log_type_enabled(v74, OS_LOG_TYPE_INFO)) {
          goto LABEL_88;
        }
      }
      else if (!os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        goto LABEL_88;
      }
      if (*(char *)(v67 + v64 + 23) < 0) {
        int v70 = (void *)*v70;
      }
      LODWORD(v97.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v97.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v70;
      _os_log_impl(&dword_1920CB000, v74, OS_LOG_TYPE_INFO, "MPSGraph op: Skipping output tensor validation for output = %s", (uint8_t *)&v97, 0xCu);
    }
LABEL_88:

    v64 += 24;
  }

  v87[2](v87);
}

void sub_19233A78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**a10)(void), uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v32 - 128));

  a10[2]();
  _Unwind_Resume(a1);
}

void sub_19233AAE0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  HIBYTE(v12) = 4;
  strcpy(__p, "e5rt");
  char v3 = E5RT::GetE5RTLog((uint64_t)__p);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(*(void **)__p);
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  else
  {
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  if (os_signpost_enabled(v3))
  {
    uint64_t v5 = *(uint64_t **)(v2 + 8);
    std::__fs::filesystem::path::__string_view v6 = v5;
    if (*((char *)v5 + 23) < 0)
    {
      std::__fs::filesystem::path::__string_view v6 = (uint64_t *)*v5;
      unint64_t v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      unint64_t v7 = v5 + 3;
      if ((*((char *)v5 + 47) & 0x80000000) == 0)
      {
LABEL_8:
        int v8 = *((unsigned __int8 *)v5 + 56);
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v6;
        __int16 v10 = 2080;
        int v11 = v7;
        __int16 v12 = 1024;
        int v13 = v8;
        _os_signpost_emit_with_name_impl(&dword_1920CB000, v3, OS_SIGNPOST_INTERVAL_END, v4, "MpsGraphOpPrepareForEncode", "Model=%{signpost.description:attribute}s Function=%{signpost.description:attribute}s ShaderProfiling=%{signpost.description:attribute}d ", __p, 0x1Cu);
        goto LABEL_9;
      }
    }
    unint64_t v7 = (void *)*v7;
    goto LABEL_8;
  }
LABEL_9:
}

void sub_19233AC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_19233AC5C(uint64_t a1, uint64_t a2)
{
  os_signpost_id_t v4 = (void *)[MEMORY[0x1E4F1CC08] mutableCopy];
  for (unint64_t i = *(uint64_t **)(a1 + 16); i; unint64_t i = (uint64_t *)*i)
  {
    unint64_t v7 = (std::string *)i[5];
    memset(&__p, 0, sizeof(__p));
    int v8 = *((char *)i + 63);
    if (v8 >= 0) {
      std::basic_string_view<_CharT, _Traits>::size_type v9 = (std::string *)(i + 5);
    }
    else {
      std::basic_string_view<_CharT, _Traits>::size_type v9 = v7;
    }
    uint64_t v10 = i[6];
    if (v8 >= 0) {
      uint64_t v10 = *((unsigned __int8 *)i + 63);
    }
    std::string::append[abi:ne180100]<char const*,0>(&__p, v9, (std::string *)((char *)v9 + v10));
    E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)v45, (const std::__fs::filesystem::path *)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    E5RT::MILProgramUtils::GetFunctionNames((E5RT::MILProgramUtils *)v45, (std::vector<std::string> *)&__p);
    int v11 = i + 2;
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
    {
      char v14 = *((unsigned char *)i + 39);
      if (v14 >= 0) {
        uint64_t v15 = *((unsigned __int8 *)i + 39);
      }
      else {
        uint64_t v15 = i[3];
      }
      if (v14 >= 0) {
        long long v16 = (unsigned __int8 *)(i + 2);
      }
      else {
        long long v16 = (unsigned __int8 *)i[2];
      }
      while (1)
      {
        uint64_t v17 = *(unsigned __int8 *)(v12 + 23);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *(unsigned __int8 *)(v12 + 23);
        }
        else {
          uint64_t v18 = *(void *)(v12 + 8);
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v12, v16, *(void *)(v12 + 8))) {
              break;
            }
          }
          else
          {
            if (!*(unsigned char *)(v12 + 23)) {
              break;
            }
            uint64_t v19 = 0;
            while (*(unsigned __int8 *)(v12 + v19) == v16[v19])
            {
              if (v17 == ++v19) {
                goto LABEL_31;
              }
            }
          }
        }
        v12 += 24;
        if (v12 == size) {
          goto LABEL_50;
        }
      }
    }
LABEL_31:
    if (v12 == size)
    {
LABEL_50:
      std::operator+<char>();
      long long v31 = std::string::append(&v40, " in callable mil program: ");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      int v33 = *((char *)i + 63);
      if (v33 >= 0) {
        std::__fs::filesystem::path v34 = (const std::string::value_type *)(i + 5);
      }
      else {
        std::__fs::filesystem::path v34 = (const std::string::value_type *)i[5];
      }
      if (v33 >= 0) {
        std::string::size_type v35 = *((unsigned __int8 *)i + 63);
      }
      else {
        std::string::size_type v35 = i[6];
      }
      long long v36 = std::string::append(&v41, v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      std::string::size_type v43 = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long v42 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v41, "CreateCallableExecutables");
      E5RT::Status::Status(&v40, 13, v42);
      E5RT::E5RTError::E5RTError(exception, &v41, &v40);
    }
    long long v20 = (void *)[MEMORY[0x1E4F1CC08] mutableCopy];
    unint64_t v21 = v20;
    if (*(unsigned char *)(*(void *)a2 + 56)) {
      [v20 setObject:&unk_1EE3AECF8 forKeyedSubscript:E5Common::kMpsgGraphEnableShaderProfilingStrKey[0]];
    }
    uint64_t v22 = i + 2;
    if (*((char *)i + 39) < 0) {
      uint64_t v22 = (void *)*v11;
    }
    uint64_t v23 = [NSString stringWithUTF8String:v22];
    [v21 setObject:v23 forKeyedSubscript:E5Common::kMpsgGraphFunctionNameStrKey[0]];

    uint64_t SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(v24);
    HIBYTE(v43) = 0;
    LOBYTE(v42[0]) = 0;
    E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, (long long *)(i + 5), 4, (uint64_t *)v42, v21, (uint64_t *)&v41);
    if (SHIBYTE(v43) < 0) {
      operator delete(v42[0]);
    }
    uint64_t v26 = E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(v41.__r_.__value_.__l.__data_);
    [v26 setOptions:0];
    if (*((char *)i + 39) < 0) {
      int v11 = (void *)*v11;
    }
    unint64_t v27 = [NSString stringWithUTF8String:v11];
    [v4 setObject:v26 forKeyedSubscript:v27];

    uint64_t v28 = (std::__shared_weak_count *)v41.__r_.__value_.__l.__size_;
    if (v41.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v41.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);

      std::string::size_type v29 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
LABEL_43:
        std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
        std::__fs::filesystem::path::__string_view v6 = (void *)v29;
        if (__p.__r_.__value_.__l.__size_ != v29)
        {
          do
          {
            if (*(char *)(v30 - 1) < 0) {
              operator delete(*(void **)(v30 - 24));
            }
            v30 -= 24;
          }
          while (v30 != v29);
          std::__fs::filesystem::path::__string_view v6 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v29;
        operator delete(v6);
      }
    }
    else
    {

      std::string::size_type v29 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
    }
    E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)v45);
  }

  return v4;
}

void sub_19233B084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0) {
        operator delete(a23);
      }
      std::vector<std::string>::~vector[abi:ne180100](&a30);
      E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a36);

      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

std::string *std::vector<std::string>::push_back[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    uint64_t result = (std::string *)(v3 + 24);
    *(void *)(a1 + 8) = v3 + 24;
    *(void *)(a1 + 8) = v3 + 24;
  }
  return result;
}

void sub_19233B25C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19233B264(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (*((char *)v5 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v5[5], v5[6]);
        unint64_t v7 = *(void *)(a3 + 8);
        if (v7 >= *(void *)(a3 + 16))
        {
LABEL_9:
          int v8 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)&__p);
          int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(void *)(a3 + 8) = v8;
          if (v9 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_4;
        }
      }
      else
      {
        std::string __p = *(std::string *)(v5 + 5);
        unint64_t v7 = *(void *)(a3 + 8);
        if (v7 >= *(void *)(a3 + 16)) {
          goto LABEL_9;
        }
      }
      long long v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v7 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v7 = v6;
      *(void *)(a3 + 8) = v7 + 24;
LABEL_4:
      uint64_t v5 = (uint64_t *)*v5;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_19233B334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL E5RT::Ops::MpsGraphInferenceOperation::Impl::IsInOutPort(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  unint64_t v3 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*a1);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v3, a2) != 0;
}

id sub_19233B388(E5RT::TensorDescriptor *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v4 = *(void **)TensorShape;
  uint64_t v5 = *(void **)(TensorShape + 8);
  if (*(void **)TensorShape != v5)
  {
    do
    {
      if (*v4 == -1) {
        objc_msgSend(NSNumber, "numberWithLong:");
      }
      else {
      long long v6 = objc_msgSend(NSNumber, "numberWithUnsignedLong:");
      }
      [v2 addObject:v6];

      ++v4;
    }
    while (v4 != v5);
  }

  return v2;
}

void sub_19233B454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233B464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233B47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233B48C(E5RT::TensorDescriptor *a1, void *a2)
{
  id v30 = a2;
  unint64_t v3 = [v30 shape];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v31, "MPSGraph doesn't support more than 1 component.");
    E5RT::Status::Status(v32, 6, v31);
    E5RT::E5RTError::E5RTError(exception, v33, v32);
  }
  int v5 = [v30 dataType];
  if (v5 <= 268435471)
  {
    if (v5 > 15)
    {
      if (v5 == 16)
      {
        if (!E5RT::TensorDataType::IsType<unsigned short>((uint64_t)TensorDataTypeRef))
        {
          int v11 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v11, v33, v32);
        }
      }
      else
      {
        if (v5 != 32) {
          goto LABEL_49;
        }
        if (!E5RT::TensorDataType::IsType<unsigned int>((uint64_t)TensorDataTypeRef))
        {
          int v8 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v8, v33, v32);
        }
      }
    }
    else if (v5 == -2147483640)
    {
      if (!E5RT::TensorDataType::IsType<BOOL>((uint64_t)TensorDataTypeRef))
      {
        uint64_t v10 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
        std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v10, v33, v32);
      }
    }
    else
    {
      if (v5 != 8) {
        goto LABEL_49;
      }
      if (!E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef))
      {
        unint64_t v7 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
        std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v7, v33, v32);
      }
    }
  }
  else if (v5 <= 536870919)
  {
    if (v5 == 268435472)
    {
      if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef))
      {
        std::string::size_type v12 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
        std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v12, v33, v32);
      }
    }
    else
    {
      if (v5 != 268435488) {
        goto LABEL_49;
      }
      if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef))
      {
        int v9 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
        std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v9, v33, v32);
      }
    }
  }
  else
  {
    switch(v5)
    {
      case 536870920:
        if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef))
        {
          int v13 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v13, v33, v32);
        }
        break;
      case 536870928:
        if (!E5RT::TensorDataType::IsType<short>((uint64_t)TensorDataTypeRef))
        {
          unint64_t v27 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v27, v33, v32);
        }
        break;
      case 536870944:
        if (!E5RT::TensorDataType::IsType<int>((uint64_t)TensorDataTypeRef))
        {
          long long v6 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateE5RTDTypeHelper");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dtype doesn't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v6, v33, v32);
        }
        break;
      default:
LABEL_49:
        std::string::size_type v29 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
        std::string::basic_string[abi:ne180100]<0>(v31, "Unsupported MPSDataType.");
        E5RT::Status::Status(v32, 6, v31);
        E5RT::E5RTError::E5RTError(v29, v33, v32);
    }
  }
  if (E5RT::TensorDescriptor::GetRank(a1))
  {
    unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
    if (Rank != [v3 count])
    {
      uint64_t v26 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor rank doesn't match MPSGraphTensor.");
      E5RT::Status::Status(v32, 6, v31);
      E5RT::E5RTError::E5RTError(v26, v33, v32);
    }
    uint64_t TensorShape = (void *)E5RT::TensorDescriptor::GetTensorShape(a1);
    for (unint64_t i = 0; i < [v3 count]; ++i)
    {
      uint64_t v17 = [v3 objectAtIndexedSubscript:i];
      char v18 = [v17 isEqual:&unk_1EE3AED10];

      if ((v18 & 1) == 0)
      {
        uint64_t v19 = [v3 objectAtIndexedSubscript:i];
        int v20 = [v19 unsignedIntValue];
        uint64_t v21 = *(void *)(*TensorShape + 8 * i);

        if (v21 != v20)
        {
          uint64_t v22 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
          std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor dims don't match MPSGraphTensor.");
          E5RT::Status::Status(v32, 6, v31);
          E5RT::E5RTError::E5RTError(v22, v33, v32);
        }
      }
    }
  }
  else if ((unint64_t)[v3 count] > 1 {
         || [v3 count] == 1
  }
         && ([v3 objectAtIndexedSubscript:0],
             unint64_t v24 = objc_claimAutoreleasedReturnValue(),
             int v25 = [v24 intValue],
             v24,
             v25 != 1))
  {
    uint64_t v28 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateTensorDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v31, "E5RT Tensor descriptor rank (=0) doesn't match the shape of MPSGraphTensor.");
    E5RT::Status::Status(v32, 6, v31);
    E5RT::E5RTError::E5RTError(v28, v33, v32);
  }
}

void sub_19233BDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_19233BDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

id sub_19233C048(void *a1, void *a2, void *a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = objc_alloc_init(MEMORY[0x1E4F35A30]);
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x4812000000;
  void v23[3] = sub_19233E05C;
  v23[4] = sub_19233E078;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x2020000000;
  char v22 = 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  uint64_t v18[2] = sub_192341258;
  v18[3] = &unk_1E5745778;
  v18[4] = &v19;
  v18[5] = v23;
  int v11 = (void *)MEMORY[0x192FF2250](v18);
  [v10 setCompilationCompletionHandler:v11];
  [v10 setOptimizationLevel:0];
  if (a4) {
    [v10 disableTypeInference];
  }
  std::string::size_type v12 = [v7 getOutputTypesWithDevice:v8 inputTypes:v9 compilationDescriptor:v10];
  if (*((unsigned char *)v20 + 24))
  {
    std::operator+<char>();
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "SpecializeMPSGraphExecutableAndReturnOutputs");
    E5RT::Status::Status(&v15, 11, v17);
    E5RT::E5RTError::E5RTError(exception, v16, &v15);
  }

  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(v23, 8);
  if (SHIBYTE(v25) < 0) {
    operator delete(*((void **)&v24 + 1));
  }

  return v12;
}

void sub_19233C290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  if (a43 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_19233C364(void *a1)
{
  uint64_t v1 = [a1 shape];
  if (v1)
  {
    unint64_t v2 = 0;
    while (1)
    {
      unint64_t v3 = [v1 count];
      BOOL v4 = v2 < v3;
      if (v2 >= v3) {
        break;
      }
      int v5 = [v1 objectAtIndexedSubscript:v2];
      char v6 = [v5 isEqual:&unk_1EE3AED10];

      ++v2;
      if (v6) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    BOOL v4 = 1;
  }

  return v4;
}

void sub_19233C3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233C40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeMemoryBuffers(E5RT::Ops::MpsGraphInferenceOperation::Impl *this, char a2)
{
  id v20 = [MEMORY[0x1E4F35A50] deviceWithMTLDevice:*((void *)this + 35)];
  E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(*((const void **)this + 15));
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  LOBYTE(v17) = a2;
  objc_msgSend(*((id *)this + 18), "removeAllObjects", this, &v18, &v20, &v19, v17);
  uint64_t v4 = 0;
  for (unint64_t i = 0; ; ++i)
  {
    char v6 = [v18 getInputShapes];
    unint64_t v7 = [v6 count];

    if (i >= v7) {
      break;
    }
    uint64_t v8 = *((void *)this + 12);
    id v9 = (void *)*((void *)this + 18);
    id v10 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    BOOL v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v10, v8 + v4) != 0;
    std::string::size_type v12 = sub_19233C624(&v16, 2 * v11, i);
    [v9 addObject:v12];

    v4 += 24;
  }
  [*((id *)this + 19) removeAllObjects];
  if (*((void *)this + 7) != *((void *)this + 6))
  {
    unint64_t v13 = 0;
    do
    {
      char v14 = (void *)*((void *)this + 19);
      uint64_t v15 = sub_19233C624(&v16, 1, v13);
      [v14 addObject:v15];

      ++v13;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3));
  }
  [v18 setOptions:0];
}

void sub_19233C5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233C5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id sub_19233C624(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = 96;
  if (a2 == 1) {
    uint64_t v6 = 48;
  }
  uint64_t v7 = *(void *)(v5 + v6) + 24 * a3;
  uint64_t v8 = v7;
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v8 = *(void *)v7;
  }
  uint64_t v54 = [NSString stringWithUTF8String:v8];
  E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPort((E5RT::ExecutionStreamOperationInternal **)v5, a2, v7, &v60);
  id v9 = v60;
  E5RT::IOPortPriv::GetMaxPortDescriptor(v60, &v58);
  if (E5RT::IOPortPriv::IsDynamicBounded((E5RT::IOPortImpl **)v9))
  {
    id v10 = v58;
    BOOL v11 = v59;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v57 = v11;
  }
  else
  {
    E5RT::IOPort::GetPortDescriptor(v9, &v65);
    id v57 = (std::__shared_weak_count *)*((void *)&v65 + 1);
    id v10 = (E5RT::OperandDescriptor *)v65;
  }
  std::string::size_type v12 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v10);
  unsigned int v13 = a2 & 0xFFFFFFFD;
  if ((a2 & 0xFFFFFFFD) == 0 && E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v9))
  {
    if (*((unsigned char *)a1 + 32)) {
      goto LABEL_35;
    }
    if ((E5RT::TensorDescriptor::HasKnownShape(v12) & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v65, "operator()");
      std::operator+<char>();
      E5RT::Status::Status(v62, 2, v64);
      E5RT::E5RTError::E5RTError(exception, &v65, v62);
    }
  }
  E5RT::IOPort::GetMemoryObject(v9, &v65);
  if ((void)v65)
  {
    int v14 = E5RT::IOPortPriv::IsBoundMemoryObjectInternal((E5RT::IOPortImpl **)v9) ^ 1;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v65 + 1);
    if (!*((void *)&v65 + 1)) {
      goto LABEL_19;
    }
  }
  else
  {
    int v14 = 0;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v65 + 1);
    if (!*((void *)&v65 + 1)) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v13) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
LABEL_19:
  if (v13)
  {
LABEL_20:
    if (!E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v60))
    {
LABEL_25:
      id v18 = [*(id *)a1[1] getOutputShapes];
      uint64_t v19 = [v18 objectAtIndexedSubscript:a3];
      goto LABEL_28;
    }
    if (v14)
    {
      if (*(char *)(v7 + 23) < 0) {
        uint64_t v7 = *(void *)v7;
      }
      uint64_t v16 = *(void **)(v5 + 312);
      uint64_t v17 = [NSString stringWithUTF8String:v7];
      [v16 addObject:v17];

      goto LABEL_25;
    }
LABEL_35:
    long long v24 = [MEMORY[0x1E4F1CA98] null];
    long long v25 = v57;
    if (!v57) {
      goto LABEL_62;
    }
    goto LABEL_60;
  }
LABEL_27:
  id v18 = [*(id *)a1[1] getInputShapes];
  uint64_t v19 = [v18 objectAtIndexedSubscript:a3];
LABEL_28:
  id v20 = (void *)v19;

  uint64_t v21 = [v20 shape];
  if (E5RT::IOPortPriv::IsDynamicBounded((E5RT::IOPortImpl **)v9))
  {
    uint64_t v22 = sub_19233B388(v12);
  }
  else
  {
    if (!*(unsigned char *)(v5 + 160)) {
      goto LABEL_41;
    }
    if (a2 == 2)
    {
      uint64_t v23 = (id *)(v5 + 224);
    }
    else if (a2 == 1)
    {
      uint64_t v23 = (id *)(v5 + 216);
    }
    else
    {
      if (a2) {
        goto LABEL_41;
      }
      uint64_t v23 = (id *)(v5 + 208);
    }
    uint64_t v22 = [*v23 objectForKeyedSubscript:v54];
  }
  uint64_t v26 = (void *)v22;

  uint64_t v21 = v26;
LABEL_41:
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef((E5RT::IOPortImpl **)v60);
  uint64_t v28 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(MemoryObjectRef);
  int BufferType = E5RT::BufferObject::GetBufferType(v28);
  id v30 = v21;
  long long v31 = objc_opt_new();
  long long v32 = objc_opt_new();
  BOOL v56 = v30;
  uint64_t TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(v12);
  long long v65 = 0uLL;
  int v66 = 0;
  std::string::size_type v35 = *(const void **)TensorStrides;
  uint64_t v34 = *(void *)(TensorStrides + 8);
  int64_t v36 = v34 - *(void *)TensorStrides;
  int v53 = BufferType;
  if (v34 == *(void *)TensorStrides)
  {
    int v38 = 0;
    long long v37 = 0;
  }
  else
  {
    if (v36 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v37 = (uint64_t *)operator new(v36);
    int v38 = &v37[v36 >> 3];
    *(void *)&long long v65 = v37;
    int v66 = v38;
    memcpy(v37, v35, v36);
    *((void *)&v65 + 1) = v38;
  }
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v12);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
  std::string v41 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v12);
  if (E5RT::TensorDataType::GetNumComponents(v41) != 1)
  {
    char v51 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v64, "MpsStridesAndInterleaves");
    std::string::basic_string[abi:ne180100]<0>(v62, "interleave for MPSGraph is not yet supported");
    E5RT::Status::Status(v63, 2, v62);
    E5RT::E5RTError::E5RTError(v51, v64, v63);
  }
  if (E5RT::TensorDescriptor::GetRank(v12))
  {
    if (v37 != v38)
    {
      uint64_t v42 = ElementSize;
      std::string::size_type v43 = v37;
      do
      {
        if (*v43 % v42)
        {
          std::string v50 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v64, "MpsStridesAndInterleaves");
          std::string::basic_string[abi:ne180100]<0>(v62, "stride not divisible by element size");
          E5RT::Status::Status(v63, 2, v62);
          E5RT::E5RTError::E5RTError(v50, v64, v63);
        }
        uint64_t v44 = objc_msgSend(NSNumber, "numberWithLong:");
        [v31 addObject:v44];

        [v32 addObject:&unk_1EE3AECF8];
        ++v43;
      }
      while (v43 != v38);
    }
  }
  else if ([v56 count])
  {
    [v31 addObject:&unk_1EE3AECF8];
    [v32 addObject:&unk_1EE3AECF8];
  }
  if (v37) {
    operator delete(v37);
  }

  if (v53)
  {
    uint64_t v45 = E5RT::BufferObject::GetHandle<objc_object  {objcproto9MTLBuffer}* {__strong}>((uint64_t)v28);
  }
  else
  {
    int v46 = [*(id *)a1[2] metalDevice];
    uint64_t v45 = (void *)[v46 newBufferWithIOSurface:E5RT::BufferObject::GetHandle<__IOSurface *>((uint64_t)v28)];
  }
  long long v24 = objc_msgSend(objc_alloc(MEMORY[0x1E4F35A90]), "initWithMTLBuffer:shape:strides:interleaves:dataType:", v45, v56, v31, v32, objc_msgSend(v20, "dataType"));

  long long v25 = v57;
  if (v57)
  {
LABEL_60:
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
LABEL_62:
  uint64_t v47 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  uint64_t v48 = v61;
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }

  return v24;
}

void sub_19233CDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);

  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPortName(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = 96;
  if (a2 == 1) {
    uint64_t v3 = 48;
  }
  return *(void *)(a1 + v3) + 24 * a3;
}

uint64_t *E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPort@<X0>(E5RT::ExecutionStreamOperationInternal **a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a2 == 2)
  {
    uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*a1);
  }
  else if (a2 == 1)
  {
    uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*a1);
  }
  else
  {
    uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, a3);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v8 = result[6];
  *a4 = result[5];
  a4[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeOperation(id *this, char a2)
{
  E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeMemoryBuffers((E5RT::Ops::MpsGraphInferenceOperation::Impl *)this, a2);
  id v3 = this[35];
  for (unint64_t i = *(void **)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents((E5RT::ExecutionStreamOperationInternal *)*this)
                       + 16); i; unint64_t i = (void *)*i)
  {
    uint64_t v5 = E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(i[2]);
    uint64_t v6 = objc_msgSend(v3, "newSharedEventWithMachPort:", objc_msgSend(v5, "eventPort"));
    uint64_t v27 = i[2];
    long long v25 = &v27;
    uint64_t v7 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong},std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto14MTLSharedEvent}* {__strong}>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::piecewise_construct_t const&<>>((uint64_t)(this + 29), &v27, (uint64_t)&std::piecewise_construct, &v25);
    uint64_t v8 = (void *)v7[3];
    void v7[3] = v6;
  }
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent((uint64_t)*this, &v25);
  id v9 = v25;
  id v10 = v26;
  if (!v26 || atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (v9)
  {
LABEL_6:
    BOOL v11 = E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>((uint64_t)v9);
    uint64_t v12 = objc_msgSend(v3, "newSharedEventWithMachPort:", objc_msgSend(v11, "eventPort"));
    id v13 = this[34];
    this[34] = (id)v12;
  }
LABEL_7:
  StreamConfigOptions = (E5RT::ExecutionStreamConfigOptions *)E5RT::ExecutionStreamOperationInternal::GetStreamConfigOptions((E5RT::ExecutionStreamOperationInternal *)*this);
  if (this[36])
  {
    id v15 = this[37];
    if (v15
      && (int SkipIOFences = E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions),
          SkipIOFences == [v15 disableIOFencing])
      && (int v17 = E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(StreamConfigOptions),
          v17 == [v15 enableLowLatencyWaitSharedEvent]))
    {
      int EnableLowLatencyAsyncEvents = E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(StreamConfigOptions);
      int v24 = [v15 enableLowLatencySignalSharedEvent];

      if (EnableLowLatencyAsyncEvents == v24) {
        goto LABEL_16;
      }
    }
    else
    {
    }
  }
  id v18 = objc_opt_new();
  uint64_t v19 = E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(StreamConfigOptions);
  if (!v19 || (E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions) & 1) != 0)
  {
    [v18 setEnableLowLatencySignalSharedEvent:v19];
    [v18 setEnableLowLatencyWaitSharedEvent:v19];
  }
  [v18 setDisableIOFencing:E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(StreamConfigOptions)];
  [v18 setCommitsWithQoS:1];
  uint64_t v20 = [v3 newCommandQueueWithDescriptor:v18];
  id v21 = this[36];
  this[36] = (id)v20;

  id v22 = this[37];
  this[37] = v18;

LABEL_16:
}

void sub_19233D394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D3F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::Impl::ResetOperation(id *this)
{
  [this[18] removeAllObjects];
  [this[19] removeAllObjects];
  if (this[32])
  {
    unint64_t v2 = (id *)this[31];
    if (v2)
    {
      do
      {
        id v3 = (id *)*v2;

        operator delete(v2);
        unint64_t v2 = v3;
      }
      while (v3);
    }
    this[31] = 0;
    uint64_t v4 = (char *)this[30];
    if (v4)
    {
      for (unint64_t i = 0; i != v4; ++i)
        *((void *)this[29] + i) = 0;
    }
    this[32] = 0;
  }
  id v6 = this[34];
  this[34] = 0;

  id v7 = this[38];
  this[38] = 0;

  id v8 = this[39];

  return [v8 removeAllObjects];
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitWorkToMpsGraph(E5RT::Ops::MpsGraphInferenceOperation::Impl *this, int a2)
{
  uint64_t v4 = (void *)MEMORY[0x192FF2020]();
  if ((E5RT::ExecutionStreamOperationInternal::HasDynamicInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this) & 1) != 0
    || E5RT::ExecutionStreamOperationInternal::HasDynamicInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this))
  {
    for (unint64_t i = *(uint64_t **)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                          + 16); i; unint64_t i = (uint64_t *)*i)
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)i[5]);
      id v7 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      if (v7)
      {
        id v8 = i + 2;
        id v9 = sub_19233B388(v7);
        if (*((char *)i + 39) < 0) {
          id v8 = (void *)*v8;
        }
        id v10 = (void *)*((void *)this + 26);
        BOOL v11 = [NSString stringWithUTF8String:v8];
        [v10 setObject:v9 forKeyedSubscript:v11];
      }
    }
    for (unint64_t j = *(uint64_t **)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                          + 16); j; unint64_t j = (uint64_t *)*j)
    {
      id v13 = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)j[5]);
      int v14 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v13);
      if (v14)
      {
        id v15 = j + 2;
        uint64_t v16 = sub_19233B388(v14);
        if (*((char *)j + 39) < 0) {
          id v15 = (void *)*v15;
        }
        int v17 = (void *)*((void *)this + 28);
        id v18 = [NSString stringWithUTF8String:v15];
        [v17 setObject:v16 forKeyedSubscript:v18];
      }
    }
    *((unsigned char *)this + 160) = 1;
    E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeMemoryBuffers(this, 0);
  }
  uint64_t v19 = E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(*((const void **)this + 15));
  uint64_t v20 = [*((id *)this + 36) commandBuffer];
  id v21 = [MEMORY[0x1E4F35520] commandBufferWithCommandBuffer:v20];
  id v22 = NSString;
  uint64_t OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(*(E5RT::ExecutionStreamOperationInternal **)this);
  if (*(char *)(OpName + 23) >= 0) {
    uint64_t v24 = OpName;
  }
  else {
    uint64_t v24 = *(void *)OpName;
  }
  long long v25 = [v22 stringWithUTF8String:v24];
  [v21 setLabel:v25];

  if (a2)
  {
    for (k = *(uint64_t ***)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*(E5RT::ExecutionStreamOperationInternal **)this)
                           + 16); k; k = (uint64_t **)*k)
    {
      int v38 = (E5RT::AsyncEvent *)k[2];
      uint64_t v27 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((void *)this + 29, (uint64_t *)&v38);
      if (!v27) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      [v20 encodeWaitForEvent:v27[3] value:E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)k[2])];
    }
  }
  HasDynamicuint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
  uint64_t v29 = *((void *)this + 18);
  uint64_t v30 = *((void *)this + 19);
  uint64_t v31 = *((void *)this + 17);
  if (HasDynamicOutputPorts)
  {
    uint64_t v32 = [v19 encodeToCommandBuffer:v21 inputsArray:v29 resultsArray:v30 executionDescriptor:v31];
    int v33 = (void *)*((void *)this + 38);
    *((void *)this + 38) = v32;
  }
  else
  {
    id v34 = (id)[v19 encodeToCommandBuffer:v21 inputsArray:v29 resultsArray:v30 executionDescriptor:v31];
  }
  std::string::size_type v35 = [v21 rootCommandBuffer];
  if (a2)
  {
    uint64_t v36 = *((void *)this + 34);
    E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*(void *)this, &v38);
    [v35 encodeSignalEvent:v36 value:E5RT::AsyncEvent::GetActiveFutureValue(v38)];
    long long v37 = v39;
    if (v39)
    {
      if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  [v35 commit];
}

void sub_19233D80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D8E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233D90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::ExecuteSync(E5RT::Ops::MpsGraphInferenceOperation::Impl *this, const E5RT::ExecuteOptions *a2)
{
  void v36[3] = *MEMORY[0x1E4F143B8];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v32, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&v28, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v23, 2, &v28);
    E5RT::E5RTError::E5RTError(exception, v32, v23);
  }
  dispatch_semaphore_t v4 = dispatch_semaphore_create(0);
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x4812000000;
  void v32[3] = sub_19233E05C;
  v32[4] = sub_19233E078;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  char v31 = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_19233E08C;
  void v24[3] = &unk_1E5745708;
  uint64_t v26 = &v28;
  uint64_t v27 = v32;
  id v6 = v4;
  long long v25 = v6;
  id v7 = (void *)MEMORY[0x192FF2250](v24);
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2020000000;
  void v23[3] = 0;
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = sub_19233E148;
    void v20[3] = &unk_1E5745730;
    id v22 = v23;
    id v21 = v5;
    uint64_t v16 = (void *)MEMORY[0x192FF2250](v20);
    id v9 = (void *)*((void *)this + 17);
    v35[0] = @"MPSGRAPH_PROFILING_BEFORE_FIRST_COMMIT_TIMESTAMP";
    id v10 = objc_opt_new();
    v36[0] = v10;
    v35[1] = @"MPSGRAPH_PROFILING_AFTER_FIRST_COMMIT_TIMESTAMP";
    BOOL v11 = objc_opt_new();
    v36[1] = v11;
    v35[2] = @"MPSGRAPH_PROFILING_FIRST_MTLCOMMANDBUFFER_SCHEDULED_TIMESTAMP";
    uint64_t v12 = objc_opt_new();
    v36[2] = v12;
    id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v36 forKeys:v35 count:3];
    [v9 requestProfilingStatsWithDictionary:v13 profilingCallback:v16];
  }
  [*((id *)this + 17) setCompletionHandler:v7];
  E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitWorkToMpsGraph(this, 0);
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    int v14 = (E5RT::ExecutionStreamTelemetryContainer *)dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    E5RT::ExecutionStreamTelemetryContainer::Create(v14);
  }
  if (*((unsigned char *)v29 + 24))
  {
    std::operator+<char>();
    id v15 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "ExecuteSync");
    E5RT::Status::Status(v17, 11, &__p);
    E5RT::E5RTError::E5RTError(v15, v18, v17);
  }
  if (E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)) {
    E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateDataDependentOutputPorts(this);
  }
  _Block_object_dispose(v23, 8);

  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(v32, 8);
  if (SHIBYTE(v34) < 0) {
    operator delete(*((void **)&v33 + 1));
  }
}

void sub_19233DE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a12) {
    (*(void (**)(void *))(*(void *)a12 + 8))(a12);
  }
  _Block_object_dispose(&a31, 8);

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose((const void *)(v50 - 232), 8);
  if (*(char *)(v50 - 161) < 0) {
    operator delete(*(void **)(v50 - 184));
  }

  _Unwind_Resume(a1);
}

__n128 sub_19233E05C(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void sub_19233E078(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void sub_19233E08C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v6 = v4;
  if (v4)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    id v5 = [v4 localizedDescription];
    MEMORY[0x192FF0F50](*(void *)(*(void *)(a1 + 48) + 8) + 48, [v5 UTF8String]);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_19233E11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19233E130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19233E148(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [v5 objectForKeyedSubscript:@"MPSGRAPH_PROFILING_AFTER_FIRST_COMMIT_TIMESTAMP"];
    if (v7)
    {
      id v8 = [v5 objectForKeyedSubscript:@"MPSGRAPH_PROFILING_BEFORE_FIRST_COMMIT_TIMESTAMP"];
      if (!v8)
      {
LABEL_6:

        goto LABEL_7;
      }
      id v9 = [v5 valueForKey:@"MPSGRAPH_PROFILING_AFTER_FIRST_COMMIT_TIMESTAMP"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {

        goto LABEL_6;
      }
      id v10 = [v5 valueForKey:@"MPSGRAPH_PROFILING_BEFOR_FIRST_COMMIT_TIMESTAMP"];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0)
      {
        mach_timebase_info(&info);
        uint32_t numer = info.numer;
        uint32_t denom = info.denom;
        int v14 = [v5 objectForKeyedSubscript:@"MPSGRAPH_PROFILING_AFTER_FIRST_COMMIT_TIMESTAMP"];
        uint64_t v15 = [v14 unsignedIntegerValue];

        uint64_t v16 = [v5 objectForKeyedSubscript:@"MPSGRAPH_PROFILING_BEFORE_FIRST_COMMIT_TIMESTAMP"];
        uint64_t v17 = [v16 unsignedIntegerValue];

        *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (double)(numer / denom)
                                                                    / 1000000.0
                                                                    * (double)(unint64_t)(v15 - v17);
      }
    }
  }
LABEL_7:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_19233E2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233E314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233E328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233E340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233E354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233E368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19233E3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateDataDependentOutputPorts(E5RT::Ops::MpsGraphInferenceOperation::Impl *this)
{
  if (!*((void *)this + 38))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "PopulateDataDependentOutputPorts");
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "Data dependent outputs array is not populated.");
    E5RT::Status::Status(&v18, 2, &lpsrc);
    E5RT::E5RTError::E5RTError(exception, &__p, &v18);
  }
  uint64_t v2 = *((void *)this + 6);
  if (*((void *)this + 7) != v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      id v5 = (void *)(v2 + v3);
      uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
      id v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v2 + v3);
      if (!v7) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      id v8 = v7;
      id v9 = (void *)v7[5];
      id v10 = (std::__shared_weak_count *)v8[6];
      lpsrc = v9;
      uint64_t v20 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v9))
      {
        if (*(char *)(v2 + v3 + 23) < 0) {
          id v5 = (void *)*v5;
        }
        BOOL v11 = (void *)*((void *)this + 39);
        uint64_t v12 = [NSString stringWithUTF8String:v5];
        LOBYTE(v11) = [v11 containsObject:v12];

        if ((v11 & 1) == 0)
        {
          if (lpsrc) {
          PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)lpsrc);
          }
          int v14 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
          uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v14);
          [*((id *)this + 38) objectAtIndexedSubscript:v4];
          uint64_t v16 = [(id)objc_claimAutoreleasedReturnValue() shape];
          sub_19233FE28(&__p, v16);
          E5RT::TensorDescriptor::CreateTensorDesc((int)&__p, TensorDataTypeRef);
        }
      }
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      ++v4;
      uint64_t v2 = *((void *)this + 6);
      v3 += 24;
    }
    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 7) - v2) >> 3));
  }
}

void sub_19233E97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (a16) {
    sub_192343C0C();
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_19233EA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0)
  {
    operator delete(a25);
    if (v31)
    {
LABEL_7:
      __cxa_free_exception(v30);
      _Unwind_Resume(a1);
    }
  }
  else if (v31)
  {
    goto LABEL_7;
  }
  JUMPOUT(0x19233EA64);
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::ReshapeOperationInternal(uint64_t a1, void *a2)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v105, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v103, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(&v101, 2, &v103);
    E5RT::E5RTError::E5RTError(exception, &v105, &v101);
  }
  if (a2[3] != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3))
  {
    uint64_t v89 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v105, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v103, "Require new shapes for all inputs/inOuts to reshape.");
    E5RT::Status::Status(&v101, 2, &v103);
    E5RT::E5RTError::E5RTError(v89, &v105, &v101);
  }
  int v90 = E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(*(const void **)(a1 + 120));
  uint64_t v92 = [MEMORY[0x1E4F1CA48] array];
  char v96 = [v90 getInputShapes];
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  char v94 = 0;
  for (unint64_t i = [v96 count]; v5 < i; unint64_t i = objc_msgSend(v96, "count"))
  {
    uint64_t v7 = *(void *)(a1 + 96);
    id v8 = (void *)(v7 + v4);
    id v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(a2, v7 + v4);
    if (!v9) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    id v10 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
    BOOL v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v10, v7 + v4) != 0;
    E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPort((E5RT::ExecutionStreamOperationInternal **)a1, 2 * v11, v7 + v4, &v101);
    uint64_t v12 = (E5RT::IOPortImpl **)v101;
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v101);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      long long v85 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v105, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(&v103, "MPSGraph op cannot reshape a surface descriptor.");
      E5RT::Status::Status(lpsrc, 2, &v103);
      E5RT::E5RTError::E5RTError(v85, &v105, lpsrc);
    }
    int v14 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v12);
    uint64_t v15 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v14);
    uint64_t v16 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v9[5]);
    unint64_t Rank = E5RT::TensorDescriptor::GetRank(v15);
    if (Rank != E5RT::TensorDescriptor::GetRank(v16))
    {
      std::operator+<char>();
      uint64_t v86 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v103, "ReshapeOperationInternal");
      E5RT::Status::Status(lpsrc, 2, &v105);
      E5RT::E5RTError::E5RTError(v86, &v103, lpsrc);
    }
    uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v15);
    uint64_t v19 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v16);
    if (E5RT::operator!=(TensorDataTypeRef, v19))
    {
      std::operator+<char>();
      unint64_t v87 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v103, "ReshapeOperationInternal");
      E5RT::Status::Status(lpsrc, 2, &v105);
      E5RT::E5RTError::E5RTError(v87, &v103, lpsrc);
    }
    int HasKnownShape = E5RT::TensorDescriptor::HasKnownShape(v16);
    char v21 = HasKnownShape;
    if (!HasKnownShape)
    {
      char v94 = 1;
      int v31 = v102;
      if (!v102) {
        goto LABEL_4;
      }
LABEL_22:
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      goto LABEL_4;
    }
    id v22 = sub_19233B388(v16);
    id v23 = objc_alloc(MEMORY[0x1E4F35A80]);
    uint64_t v24 = [v96 objectAtIndexedSubscript:v5];
    long long v25 = objc_msgSend(v23, "initWithShape:dataType:", v22, objc_msgSend(v24, "dataType"));
    [v92 addObject:v25];

    uint64_t v26 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
    uint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v26, v7 + v4);
    int v28 = *(char *)(v7 + v4 + 23);
    if (v27)
    {
      if (v28 < 0) {
        id v8 = (void *)*v8;
      }
      uint64_t v29 = *(void **)(a1 + 224);
      uint64_t v30 = [NSString stringWithUTF8String:v8];
      [v29 setObject:v22 forKeyedSubscript:v30];
    }
    else
    {
      if (v28 < 0) {
        id v8 = (void *)*v8;
      }
      uint64_t v32 = *(void **)(a1 + 208);
      uint64_t v30 = [NSString stringWithUTF8String:v8];
      [v32 setObject:v22 forKeyedSubscript:v30];
    }

    int v31 = v102;
    if (v102) {
      goto LABEL_22;
    }
LABEL_4:
    ++v5;
    v4 += 24;
    if ((v21 & 1) == 0) {
      break;
    }
  }
  uint64_t v33 = [v90 getOutputShapes];
  long long v34 = (void *)v33;
  if ((v94 & 1) == 0)
  {
    uint64_t v36 = [MEMORY[0x1E4F35A50] deviceWithMTLDevice:*(void *)(a1 + 280)];
    uint64_t v37 = sub_19233C048(v90, v36, v92, *(unsigned __int8 *)(a1 + 360));

    *(unsigned char *)(a1 + 160) = 1;
    uint64_t v91 = (void *)v37;
    std::string::size_type v35 = (void *)a2[2];
    if (!v35) {
      goto LABEL_41;
    }
    while (1)
    {
LABEL_30:
      int v38 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
      BOOL v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v38, (uint64_t)(v35 + 2)) != 0;
      E5RT::Ops::MpsGraphInferenceOperation::Impl::GetPort((E5RT::ExecutionStreamOperationInternal **)a1, 2 * v39, (uint64_t)(v35 + 2), &v105);
      std::string v40 = (void *)v105;
      if ((void)v105) {
      std::string v41 = (std::__shared_weak_count *)v35[6];
      }
      uint64_t v99 = v35[5];
      unint64_t v100 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v40, &v99);
      uint64_t v42 = v100;
      if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        std::string::size_type v43 = (std::__shared_weak_count *)*((void *)&v105 + 1);
        if (*((void *)&v105 + 1))
        {
LABEL_37:
          if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      else
      {
        std::string::size_type v43 = (std::__shared_weak_count *)*((void *)&v105 + 1);
        if (*((void *)&v105 + 1)) {
          goto LABEL_37;
        }
      }
      std::string::size_type v35 = (void *)*v35;
      if (!v35) {
        goto LABEL_41;
      }
    }
  }
  uint64_t v91 = (void *)v33;
  std::string::size_type v35 = (void *)a2[2];
  if (v35) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t v44 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v44)
  {
    long long v93 = (void *)(a1 + 168);
    uint64_t v45 = *(void *)(a1 + 48);
    int v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v44);
    uint64_t v47 = v46;
    if (!v46) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v48 = (void *)v46[5];
    uint64_t v49 = (atomic_ullong *)v47[6];
    lpsrc[0] = v48;
    lpsrc[1] = v49;
    if (v49) {
      atomic_fetch_add_explicit(v49 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v50 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v48);
    char v51 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v50);
    std::string::size_type v52 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v51);
    unint64_t v53 = E5RT::TensorDescriptor::GetRank(v51);
    std::__fs::filesystem::path v97 = [v91 objectAtIndexedSubscript:0];
    long long v105 = 0uLL;
    size_t v54 = 8 * v53;
    unint64_t v106 = 0;
    if (v53)
    {
      if (v53 >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      *(void *)&long long v105 = operator new(8 * v53);
      *((void *)&v105 + 1) = v105;
      unint64_t v106 = v105 + 8 * v53;
    }
    if ((v94 & 1) == 0)
    {
      uint64_t v55 = [v97 shape];

      if (v55)
      {
        BOOL v56 = [v97 shape];
        id v57 = (void *)[v56 copy];
        uint64_t v58 = v45;
        if (*(char *)(v45 + 23) < 0) {
          uint64_t v58 = *(void *)v45;
        }
        unint64_t v59 = *(void **)(a1 + 216);
        uint64_t v60 = [NSString stringWithUTF8String:v58];
        [v59 setObject:v57 forKeyedSubscript:v60];

        BOOL v61 = [v97 shape];
        sub_19233FE28(&v103, v61);
        if ((void)v105)
        {
          *((void *)&v105 + 1) = v105;
          operator delete((void *)v105);
        }
        long long v105 = v103;
        unint64_t v106 = (unint64_t)v104;
        uint64_t v104 = 0;
        long long v103 = 0uLL;

        if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v93, v45))E5RT::TensorDescriptor::CreateTensorDesc((int)&v105, v52); {
        *(void *)&long long v103 = v45;
        }
        unint64_t v62 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v93, v45, (uint64_t)&std::piecewise_construct, (long long **)&v103)[5];
        uint64_t v63 = (const void *)v105;
        int64_t v64 = *((void *)&v105 + 1) - v105;
        if (*((void *)&v105 + 1) == (void)v105) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        if (v64 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        long long v65 = (char *)operator new(*((void *)&v105 + 1) - v105);
        uint64_t v66 = v64 >> 3;
        memcpy(v65, v63, v64);
        uint64_t v67 = *(void *)&v65[8 * (v64 >> 3) - 8];
        uint64_t v104 = 0;
        long long v103 = 0uLL;
        int v68 = (char *)operator new(v64);
        *(void *)&long long v103 = v68;
        uint64_t v104 = &v68[8 * (v64 >> 3)];
        bzero(v68, v64);
        *((void *)&v103 + 1) = &v68[v64];
        if ((unint64_t)(v64 >> 3) <= 1) {
          uint64_t v69 = 1;
        }
        else {
          uint64_t v69 = v64 >> 3;
        }
        *(void *)&v68[8 * v66 - 8] = 1;
        if ((unint64_t)v64 >= 0x10)
        {
          *(void *)&v68[8 * (v64 >> 3) - 16] = ((v67 * v62 + 63) & 0xFFFFFFFFFFFFFFC0) / v62;
          uint64_t v70 = v69 - 2;
          if (v70)
          {
            uint64_t v71 = *(void *)&v68[(v64 & 0xFFFFFFFFFFFFFFF8) - 16];
            BOOL v72 = &v65[8 * v66 - 16];
            v73 = &v68[8 * v66 - 24];
            do
            {
              uint64_t v74 = *(void *)v72;
              v72 -= 8;
              v71 *= v74;
              *(void *)v73 = v71;
              v73 -= 8;
              --v70;
            }
            while (v70);
          }
        }
        operator delete(v65);
        uint64_t v75 = v103;
        if (*((void *)&v103 + 1) != (void)v103)
        {
          unint64_t v76 = (uint64_t)(*((void *)&v103 + 1) - v103) >> 3;
          if (v76 <= 1) {
            unint64_t v76 = 1;
          }
          if (v76 < 2)
          {
            unint64_t v77 = 0;
            goto LABEL_79;
          }
          unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v80 = (unint64_t *)(v103 + 8);
          unint64_t v81 = v76 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            unint64_t v82 = *v80 * v62;
            *(v80 - 1) *= v62;
            *uint64_t v80 = v82;
            v80 += 2;
            v81 -= 2;
          }
          while (v81);
          if (v76 != v77)
          {
LABEL_79:
            unint64_t v83 = (void *)(v75 + 8 * v77);
            unint64_t v84 = v76 - v77;
            do
            {
              *v83++ *= v62;
              --v84;
            }
            while (v84);
          }
        }
        E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(&v105, &v103, v52);
      }
    }
    if (v53)
    {
      uint64_t v78 = operator new(8 * v53);
      unint64_t v53 = (unint64_t)v78 + 8 * v53;
      memset(v78, 255, v54);
      BOOL v79 = (void *)v105;
      if ((void)v105) {
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v78 = 0;
      BOOL v79 = (void *)v105;
      if ((void)v105)
      {
LABEL_71:
        *((void *)&v105 + 1) = v79;
        operator delete(v79);
      }
    }
    *(void *)&long long v105 = v78;
    *((void *)&v105 + 1) = v53;
    unint64_t v106 = v53;
    E5RT::TensorDescriptor::CreateTensorDesc((int)&v105, v52);
  }
}

void sub_19233F9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_19233FE28(void *a1, void *a2)
{
  id v14 = a2;
  unint64_t v3 = [v14 count];
  unint64_t v4 = v3;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v3)
  {
    if (v3 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 8 * v3;
    id v6 = (char *)operator new(8 * v3);
    *a1 = v6;
    a1[2] = &v6[8 * v4];
    bzero(v6, 8 * v4);
    a1[1] = &v6[v5];
  }
  else
  {
    id v6 = 0;
  }
  for (unint64_t i = 0; i < [v14 count]; ++i)
  {
    id v8 = [v14 objectAtIndexedSubscript:i];
    uint64_t v9 = [v8 integerValue];

    if (v9 < -1)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v19, "MakeTensorDescShapeVectorFromNSArray");
      int v11 = [v14 objectAtIndexedSubscript:i];
      std::to_string(&v15, v11);
      uint64_t v12 = std::string::insert(&v15, 0, "MPSGraph returned an expected shape = ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      std::string::size_type v17 = v12->__r_.__value_.__r.__words[2];
      long long v16 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(v18, 2, &v16);
      E5RT::E5RTError::E5RTError(exception, v19, v18);
    }
    *(void *)&v6[8 * i] = v9;
  }
}

void sub_19233FFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:

      if (a29 < 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);

  if (a29 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_10:
      if (v30)
      {
        *(void *)(v29 + 8) = v30;
        operator delete(v30);
      }

      _Unwind_Resume(a1);
    }
LABEL_9:
    __cxa_free_exception(v31);
    goto LABEL_10;
  }
LABEL_8:
  if (!v33) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 272))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(location, "Completion AsyncEvent (internal or client bound) is required for async submit.");
    E5RT::Status::Status(v10, 11, location);
    E5RT::E5RTError::E5RTError(exception, v11, v10);
  }
  objc_initWeak(location, *(id *)(a1 + 136));
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3321888768;
  v12[2] = sub_192340454;
  v12[3] = &unk_1EE395E08;
  v13[1] = (id)a1;
  objc_copyWeak(v13, location);
  LOBYTE(v14[0]) = 0;
  char v16 = 0;
  if (*(unsigned char *)(a4 + 32))
  {
    uint64_t v6 = *(void *)(a4 + 24);
    if (v6)
    {
      if (v6 == a4)
      {
        std::string v15 = v14;
        (*(void (**)(uint64_t, void *))(*(void *)a4 + 24))(a4, v14);
        goto LABEL_8;
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
    std::string v15 = (void *)v6;
LABEL_8:
    char v16 = 1;
  }
  uint64_t v7 = (void *)MEMORY[0x192FF2250](v12);
  [*(id *)(a1 + 136) setCompletionHandler:v7];
  E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitWorkToMpsGraph((E5RT::Ops::MpsGraphInferenceOperation::Impl *)a1, 1);

  if (v16)
  {
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
    }
    else if (v15)
    {
      (*(void (**)(void))(*v15 + 40))();
    }
  }
  objc_destroyWeak(v13);
  objc_destroyWeak(location);
}

void sub_192340378(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, _Unwind_Exception *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  long long v34 = (_Unwind_Exception *)a1;
  if (a33)
  {
    sub_19230A230((uint64_t)&a23, (uint64_t)&a29, a1, a2, (uint64_t)&__p);
    long long v34 = __p;
  }
  objc_destroyWeak(v33);
  objc_destroyWeak(&location);
  _Unwind_Resume(v34);
}

void sub_19234041C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_192340454(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(E5RT::Ops::MpsGraphInferenceOperation::Impl **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setCompletionHandler:&unk_1EE395DE0];

  if (v6)
  {
    if (*(unsigned char *)(a1 + 80))
    {
      id v9 = [v6 localizedDescription];
      std::string::basic_string[abi:ne180100]<0>(v15, (char *)[v9 UTF8String]);

      if (*(unsigned char *)(a1 + 80))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "SubmitAsync_block_invoke");
        E5RT::Status::Status(v13, 11, v15);
        std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string,E5RT::Status>();
      }
      std::__throw_bad_optional_access[abi:ne180100]();
    }
  }
  else
  {
    if (E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v7)) {
      E5RT::Ops::MpsGraphInferenceOperation::Impl::PopulateDataDependentOutputPorts(v7);
    }
    if (*(unsigned char *)(a1 + 80))
    {
      id v10 = *(E5RT::ExecutionStreamOperationInternal **)v7;
      uint64_t v16 = 0;
      v15[0] = v10;
      uint64_t v11 = *(void *)(a1 + 72);
      if (!v11) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v11 + 48))(v11, v15, &v16);
      uint64_t v12 = v16;
      uint64_t v16 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
  }
}

void sub_19234064C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192340660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v26 = a17;
  a17 = 0;
  if (v26) {
    sub_1922FDF50();
  }
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void E5RT::Ops::MpsGraphInferenceOperation::MpsGraphInferenceOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (E5RT::ExecutionStreamOperationInternal *)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, a6);
  *(void *)uint64_t v7 = &unk_1EE326800;
  *((void *)v7 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(v7);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  operator new();
}

{
  E5RT::Ops::MpsGraphInferenceOperation::MpsGraphInferenceOperation(a1, a2, a3, a4, a5, a6);
}

void sub_1923408F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MEMORY[0x192FF16B0](v6, 0x10E0C40F1B7D6C0);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::MpsGraphInferenceOperation::Impl>>::~propagate_const(v5);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v4);
  _Unwind_Resume(a1);
}

void sub_19234093C(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::MpsGraphInferenceOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

E5RT::Ops::MpsGraphInferenceOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::MpsGraphInferenceOperation::Impl>>::~propagate_const(E5RT::Ops::MpsGraphInferenceOperation::Impl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::MpsGraphInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void E5RT::Ops::MpsGraphInferenceOperation::~MpsGraphInferenceOperation(E5RT::Ops::MpsGraphInferenceOperation *this)
{
  *(void *)this = &unk_1EE326800;
  uint64_t v2 = (E5RT::Ops::MpsGraphInferenceOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::MpsGraphInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::MpsGraphInferenceOperation::Impl *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE326800;
  uint64_t v2 = (E5RT::Ops::MpsGraphInferenceOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::MpsGraphInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::GetOpCode(E5RT::Ops::MpsGraphInferenceOperation *this)
{
  return 8;
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::EncodeOperation(id **this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::EncodeOperation((E5RT::ExecutionStreamOperationInternal *)this, a2, a3);
  uint64_t v6 = (void *)MEMORY[0x192FF2020]();
  E5RT::Ops::MpsGraphInferenceOperation::Impl::EncodeOperation(this[37], 1);
  return kdebug_trace();
}

void sub_192340B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::ResetOperation(id **this)
{
  return kdebug_trace();
}

void sub_192340C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::ExecuteSync(E5RT::Ops::MpsGraphInferenceOperation::Impl **this, const E5RT::ExecuteOptions *a2)
{
  return kdebug_trace();
}

void sub_192340CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::ExecuteSync(E5RT::Ops::MpsGraphInferenceOperation::Impl **this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)this);
  uint64_t v2 = (E5RT::ExecuteOptions *)kdebug_trace();
  unint64_t v3 = this[37];
  unint64_t v4 = (const E5RT::ExecuteOptions *)E5RT::ExecuteOptions::SharedDefaultOption(v2);
  E5RT::Ops::MpsGraphInferenceOperation::Impl::ExecuteSync(v3, v4);
  return kdebug_trace();
}

void sub_192340DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::ReshapeOperationInternal(uint64_t *a1, void *a2)
{
  return kdebug_trace();
}

void sub_192340E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::SubmitAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState((E5RT::ExecutionStreamOperationInternal *)a1) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(v16, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v17, 2, v16);
    E5RT::E5RTError::E5RTError(exception, &v13, v17);
  }
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetStreamId((E5RT::ExecutionStreamOperationInternal *)a1);
  uint64_t v13 = 0x2B23819800000000;
  long long v14 = 0u;
  long long v15 = 0u;
  kdebug_trace();
  uint64_t v8 = *(void *)(a1 + 296);
  LOBYTE(v18[0]) = 0;
  char v20 = 0;
  if (*(unsigned char *)(a4 + 32))
  {
    uint64_t v9 = *(void *)(a4 + 24);
    if (v9)
    {
      if (v9 == a4)
      {
        uint64_t v19 = v18;
        (*(void (**)(uint64_t, void *))(*(void *)a4 + 24))(a4, v18);
        goto LABEL_8;
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    }
    uint64_t v19 = (void *)v9;
LABEL_8:
    char v20 = 1;
  }
  E5RT::Ops::MpsGraphInferenceOperation::Impl::SubmitAsync(v8, v6, v7, (uint64_t)v18);
  if (v20)
  {
    if (v19 == v18)
    {
      (*(void (**)(void *))(v18[0] + 32))(v18);
    }
    else if (v19)
    {
      (*(void (**)(void))(*v19 + 40))();
    }
  }
  unint64_t ActiveFutureValue = E5RT::AsyncEvent::GetActiveFutureValue(*(E5RT::AsyncEvent **)(a1 + 176));
  E5RT::ExecutionStreamOperationInternal::UpdateLastCompletionValue(a1, ActiveFutureValue);
  return kdebug_trace();
}

void sub_1923410BC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
  {
    sub_19230E408(&a19, (uint64_t)a1, a2, (uint64_t)&a15);
    uint64_t v24 = a15;
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a10);
    _Unwind_Resume(v24);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a10);
  _Unwind_Resume(a1);
}

void sub_192341134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a24);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if (v25)
    {
LABEL_8:
      __cxa_free_exception(v24);
      _Unwind_Resume(a1);
    }
  }
  else if (v25)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_192341180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v15);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::MpsGraphInferenceOperation::PrepareOpForEncode(E5RT::Ops::MpsGraphInferenceOperation::Impl **this)
{
  return kdebug_trace();
}

void sub_192341244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_192341258(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    id v6 = v4;
    id v5 = [v4 localizedDescription];
    MEMORY[0x192FF0F50](*(void *)(*(void *)(a1 + 40) + 8) + 48, [v5 UTF8String]);

    id v4 = v6;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
}

void sub_1923412FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_192341310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]()
{
}

void E5RT::Ops::MpsGraphInferenceOperation::Impl::~Impl(E5RT::Ops::MpsGraphInferenceOperation::Impl *this)
{
  uint64_t v2 = (void **)*((void *)this + 42);
  if (v2)
  {
    do
    {
      uint64_t v13 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_21:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_21;
      }
      operator delete(v2);
      uint64_t v2 = v13;
    }
    while (v13);
  }
  unint64_t v3 = (void *)*((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v3) {
    operator delete(v3);
  }

  id v4 = (id *)*((void *)this + 31);
  if (v4)
  {
    do
    {
      id v5 = (id *)*v4;

      operator delete(v4);
      id v4 = v5;
    }
    while (v5);
  }
  id v6 = (void *)*((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v6) {
    operator delete(v6);
  }

  uint64_t v7 = (void **)*((void *)this + 23);
  if (v7)
  {
    do
    {
      long long v14 = (void **)*v7;
      if (*((char *)v7 + 39) < 0) {
        operator delete(v7[2]);
      }
      operator delete(v7);
      uint64_t v7 = v14;
    }
    while (v14);
  }
  uint64_t v8 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v8) {
    operator delete(v8);
  }

  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = (void **)*((void *)this + 12);
    if (!v10) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v10 = (void **)*((void *)this + 12);
    if (!v10) {
      goto LABEL_30;
    }
  }
  uint64_t v11 = (void **)*((void *)this + 13);
  uint64_t v12 = v10;
  if (v11 != v10)
  {
    do
    {
      if (*((char *)v11 - 1) < 0) {
        operator delete(*(v11 - 3));
      }
      v11 -= 3;
    }
    while (v11 != v10);
    uint64_t v12 = (void **)*((void *)this + 12);
  }
  *((void *)this + 13) = v10;
  operator delete(v12);
LABEL_30:
  uint64_t v15 = *((void *)this + 9);
  if (v15)
  {
    uint64_t v16 = *((void *)this + 10);
    uint64_t v17 = (void *)*((void *)this + 9);
    if (v16 != v15)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0) {
          operator delete(*(void **)(v16 - 24));
        }
        v16 -= 24;
      }
      while (v16 != v15);
      uint64_t v17 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v15;
    operator delete(v17);
  }
  uint64_t v18 = *((void *)this + 6);
  if (v18)
  {
    uint64_t v19 = *((void *)this + 7);
    char v20 = (void *)*((void *)this + 6);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0) {
          operator delete(*(void **)(v19 - 24));
        }
        v19 -= 24;
      }
      while (v19 != v18);
      char v20 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v18;
    operator delete(v20);
  }
  uint64_t v21 = *((void *)this + 3);
  if (v21)
  {
    uint64_t v22 = *((void *)this + 4);
    id v23 = (void *)*((void *)this + 3);
    if (v22 != v21)
    {
      do
      {
        if (*(char *)(v22 - 1) < 0) {
          operator delete(*(void **)(v22 - 24));
        }
        v22 -= 24;
      }
      while (v22 != v21);
      id v23 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v21;
    operator delete(v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  id v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1) {
    return (std::string *)v7;
  }
  uint64_t v9 = __str;
  uint64_t v11 = a1[2];
  uint64_t v12 = (long long *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)v12) >> 3)) >= a5)
  {
    uint64_t v18 = (uint64_t)v12 - v7;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      char v20 = &__str[a5];
      int v25 = (char *)a1[1];
      goto LABEL_42;
    }
    char v20 = (std::string *)((char *)__str + 8 * (((uint64_t)v12 - v7) >> 3));
    if (v20 != a4)
    {
      uint64_t v21 = 0;
      do
      {
        id v23 = (std::string *)((char *)v12 + v21 * 24);
        uint64_t v24 = &v20[v21];
        if (SHIBYTE(v20[v21].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v23, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v22 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v23->__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v22;
        }
        ++v21;
      }
      while (&v20[v21] != a4);
      int v25 = (char *)v12 + v21 * 24;
      a1[1] = (char *)v12 + v21 * 24;
      if (v18 < 1) {
        return (std::string *)v7;
      }
LABEL_42:
      uint64_t v39 = v7 + 24 * a5;
      std::string v40 = (long long *)&v25[-24 * a5];
      std::string v41 = v25;
      if (v40 < v12)
      {
        std::string v41 = v25;
        do
        {
          long long v42 = *v40;
          *((void *)v41 + 2) = *((void *)v40 + 2);
          *(_OWORD *)std::string v41 = v42;
          v41 += 24;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = 0;
          *(void *)std::string v40 = 0;
          std::string v40 = (long long *)((char *)v40 + 24);
        }
        while (v40 < v12);
      }
      a1[1] = v41;
      if (v25 != (char *)v39)
      {
        std::string::size_type v43 = v25 - 24;
        uint64_t v44 = 8 * ((uint64_t)&v25[-v39] >> 3);
        do
        {
          if (v43[23] < 0) {
            operator delete(*(void **)v43);
          }
          uint64_t v45 = (long long *)(v7 + v44 - 24);
          long long v46 = *v45;
          *((void *)v43 + 2) = *(void *)(v7 + v44 - 8);
          *(_OWORD *)std::string::size_type v43 = v46;
          v43 -= 24;
          *(unsigned char *)(v7 + v44 - 1) = 0;
          *(unsigned char *)uint64_t v45 = 0;
          v44 -= 24;
        }
        while (v44);
      }
      if (v20 != v9)
      {
        uint64_t v47 = (std::string *)v7;
        do
          std::string::operator=(v47++, v9++);
        while (v9 != v20);
      }
      return (std::string *)v7;
    }
    int v25 = (char *)a1[1];
    a1[1] = v12;
    if (v18 >= 1) {
      goto LABEL_42;
    }
    return (std::string *)v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0x555555555555555) {
    unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v17 = (char *)operator new(24 * v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v26 = (std::string *)&v17[24 * v6];
  uint64_t v49 = v26;
  uint64_t v50 = &v17[24 * v16];
  uint64_t v27 = a5;
  int v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v26->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
    }
    ++v26;
    ++v9;
    --v27;
  }
  while (v27 * 24);
  uint64_t v30 = v49;
  int v31 = *a1;
  uint64_t v32 = v49;
  if (*a1 != (void *)v7)
  {
    int v33 = v49;
    uint64_t v34 = v7;
    do
    {
      uint64_t v32 = v33 - 1;
      long long v35 = *(_OWORD *)(v34 - 24);
      v33[-1].__r_.__value_.__r.__words[2] = *(void *)(v34 - 8);
      *(_OWORD *)&v33[-1].__r_.__value_.__l.__data_ = v35;
      *(void *)(v34 - 16) = 0;
      *(void *)(v34 - 8) = 0;
      *(void *)(v34 - 24) = 0;
      --v33;
      v34 -= 24;
    }
    while ((void *)v34 != v31);
  }
  uint64_t v36 = a1[1];
  if (v36 != (void *)v7)
  {
    do
    {
      long long v37 = *(_OWORD *)v7;
      v28->__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v37;
      ++v28;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v36);
    uint64_t v7 = (uint64_t)a1[1];
  }
  int v38 = *a1;
  *a1 = v32;
  a1[1] = v28;
  a1[2] = v50;
  while ((void *)v7 != v38)
  {
    if (*(char *)(v7 - 1) < 0) {
      operator delete(*(void **)(v7 - 24));
    }
    v7 -= 24;
  }
  if (v38) {
    operator delete(v38);
  }
  return v30;
}

void sub_192341A5C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = (const void **)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          long long v35 = (const void **)*(a2 - 3);
          uint64_t v34 = a2 - 3;
          int v33 = v35;
          int v36 = *(char *)(a1 + 23);
          int v37 = *((char *)v34 + 23);
          if (v37 >= 0) {
            size_t v38 = *((unsigned __int8 *)v34 + 23);
          }
          else {
            size_t v38 = (size_t)v34[1];
          }
          if (v37 >= 0) {
            uint64_t v39 = v34;
          }
          else {
            uint64_t v39 = v33;
          }
          if (v36 >= 0) {
            size_t v40 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v40 = *(void *)(a1 + 8);
          }
          if (v36 >= 0) {
            std::string v41 = (const void *)a1;
          }
          else {
            std::string v41 = *(const void **)a1;
          }
          if (v40 >= v38) {
            size_t v42 = v38;
          }
          else {
            size_t v42 = v40;
          }
          int v43 = memcmp(v39, v41, v42);
          BOOL v44 = v38 < v40;
          if (v43) {
            BOOL v44 = v43 < 0;
          }
          if (v44)
          {
            size_t v54 = *(const void **)(a1 + 16);
            long long v52 = *(_OWORD *)a1;
            long long v45 = *(_OWORD *)v34;
            *(void *)(a1 + 16) = v34[2];
            *(_OWORD *)a1 = v45;
            *(_OWORD *)uint64_t v34 = v52;
            v34[2] = v54;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), a2 - 3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a2 - 3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a1 + 24, a1 + 48, (long long *)(a1 + 72), a2 - 3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575) {
      break;
    }
    if (v12 == 1)
    {
      if ((const void **)a1 != a2)
      {
        unint64_t v46 = (v15 - 2) >> 1;
        unint64_t v47 = v46 + 1;
        uint64_t v48 = (__n128 *)(a1 + 24 * v46);
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a3, 0xAAAAAAAAAAAAAAABLL * (v14 >> 3), v48);
          uint64_t v48 = (__n128 *)((char *)v48 - 24);
          --v47;
        }
        while (v47);
        unint64_t v49 = v14 / 0x18uLL;
        do
        {
          std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(a1, (uint64_t)a2, a3, v49);
          a2 -= 3;
        }
        while (v49-- > 2);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = a1 + 24 * (v15 >> 1);
    if ((unint64_t)v14 < 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)v17, (const void **)a1, a2 - 3);
      if (a5) {
        goto LABEL_29;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)v17, a2 - 3);
      uint64_t v18 = 24 * v16;
      uint64_t v19 = (const void **)(24 * v16 + a1 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 24), v19, a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)(a1 + 48), (const void **)(a1 + 24 + v18), a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v19, (const void **)v17, (const void **)(a1 + 24 + v18));
      uint64_t v53 = *(void *)(a1 + 16);
      long long v51 = *(_OWORD *)a1;
      long long v20 = *(_OWORD *)v17;
      *(void *)(a1 + 16) = *(void *)(v17 + 16);
      *(_OWORD *)a1 = v20;
      *(void *)(v17 + 16) = v53;
      *(_OWORD *)unint64_t v17 = v51;
      if (a5) {
        goto LABEL_29;
      }
    }
    int v21 = *(char *)(a1 + 23);
    int v22 = *(char *)(a1 - 1);
    if (v22 >= 0) {
      size_t v23 = *(unsigned __int8 *)(a1 - 1);
    }
    else {
      size_t v23 = *(void *)(a1 - 16);
    }
    if (v22 >= 0) {
      uint64_t v24 = (const void *)(a1 - 24);
    }
    else {
      uint64_t v24 = *(const void **)(a1 - 24);
    }
    if (v21 >= 0) {
      size_t v25 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v25 = *(void *)(a1 + 8);
    }
    if (v21 >= 0) {
      uint64_t v26 = (const void *)a1;
    }
    else {
      uint64_t v26 = *(const void **)a1;
    }
    if (v25 >= v23) {
      size_t v27 = v23;
    }
    else {
      size_t v27 = v25;
    }
    int v28 = memcmp(v24, v26, v27);
    BOOL v29 = v23 < v25;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    if (!v29)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, a2);
      goto LABEL_34;
    }
LABEL_29:
    uint64_t v30 = (const void **)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((long long *)a1, (uint64_t)a2);
    if ((v31 & 1) == 0) {
      goto LABEL_32;
    }
    BOOL v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v30);
    uint64_t v11 = v30 + 3;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)(v30 + 3), a2))
    {
      a4 = -v13;
      a2 = v30;
      if (v32) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v32)
    {
LABEL_32:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v30, a3, -v13, a5 & 1);
      uint64_t v11 = v30 + 3;
LABEL_34:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t result, const void **a2)
{
  if ((const void **)result != a2)
  {
    uint64_t v35 = v2;
    uint64_t v36 = v3;
    uint64_t v5 = result;
    char v6 = (const void **)(result + 24);
    if ((const void **)(result + 24) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (const void **)result;
      do
      {
        uint64_t v10 = v8;
        uint64_t v8 = v6;
        int v11 = *((char *)v10 + 23);
        int v12 = *((char *)v10 + 47);
        if (v12 >= 0) {
          size_t v13 = *((unsigned __int8 *)v10 + 47);
        }
        else {
          size_t v13 = (size_t)v10[4];
        }
        if (v12 >= 0) {
          uint64_t v14 = v6;
        }
        else {
          uint64_t v14 = (const void **)v10[3];
        }
        if (v11 >= 0) {
          size_t v15 = *((unsigned __int8 *)v10 + 23);
        }
        else {
          size_t v15 = (size_t)v10[1];
        }
        if (v11 >= 0) {
          unint64_t v16 = v10;
        }
        else {
          unint64_t v16 = *v10;
        }
        if (v15 >= v13) {
          size_t v17 = v13;
        }
        else {
          size_t v17 = v15;
        }
        __n128 result = memcmp(v14, v16, v17);
        BOOL v18 = v13 < v15;
        if (result) {
          BOOL v18 = (int)result < 0;
        }
        if (v18)
        {
          uint64_t v34 = v8[2];
          unint64_t v19 = (unint64_t)v34;
          long long v33 = *(_OWORD *)v8;
          v8[1] = 0;
          v8[2] = 0;
          *uint64_t v8 = 0;
          size_t v20 = HIBYTE(v19);
          if ((v20 & 0x80u) == 0) {
            size_t v21 = v20;
          }
          else {
            size_t v21 = *((void *)&v33 + 1);
          }
          if ((v20 & 0x80u) == 0) {
            int v22 = &v33;
          }
          else {
            int v22 = (long long *)v33;
          }
          uint64_t v23 = v7;
          do
          {
            uint64_t v24 = v5 + v23;
            *(_OWORD *)(v24 + 24) = *(_OWORD *)(v5 + v23);
            *(void *)(v24 + 40) = *(void *)(v5 + v23 + 16);
            *(unsigned char *)(v24 + 23) = 0;
            *(unsigned char *)uint64_t v24 = 0;
            if (!v23)
            {
              uint64_t v9 = v5;
              goto LABEL_5;
            }
            size_t v27 = *(const void **)(v24 - 24);
            uint64_t v25 = v24 - 24;
            uint64_t v26 = v27;
            int v28 = *(char *)(v25 + 23);
            if (v28 >= 0) {
              size_t v29 = *(unsigned __int8 *)(v25 + 23);
            }
            else {
              size_t v29 = *(void *)(v25 + 8);
            }
            if (v28 >= 0) {
              uint64_t v30 = (const void *)v25;
            }
            else {
              uint64_t v30 = v26;
            }
            if (v29 >= v21) {
              size_t v31 = v21;
            }
            else {
              size_t v31 = v29;
            }
            __n128 result = memcmp(v22, v30, v31);
            BOOL v32 = v21 < v29;
            if (result) {
              BOOL v32 = (int)result < 0;
            }
            v23 -= 24;
          }
          while (v32);
          uint64_t v9 = v5 + v23 + 24;
LABEL_5:
          *(_OWORD *)uint64_t v9 = v33;
          *(void *)(v9 + 16) = v34;
        }
        char v6 = v8 + 3;
        v7 += 24;
      }
      while (v8 + 3 != a2);
    }
  }
  return result;
}

const void **std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **result, const void **a2)
{
  if (result != a2)
  {
    uint64_t v32 = v2;
    uint64_t v33 = v3;
    uint64_t v5 = result;
    for (unint64_t i = result + 3; v5 + 3 != a2; unint64_t i = v5 + 3)
    {
      uint64_t v7 = v5;
      uint64_t v5 = i;
      int v8 = *((char *)v7 + 23);
      int v9 = *((char *)v7 + 47);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)v7 + 47);
      }
      else {
        size_t v10 = (size_t)v7[4];
      }
      if (v9 >= 0) {
        int v11 = i;
      }
      else {
        int v11 = (const void **)v7[3];
      }
      if (v8 >= 0) {
        size_t v12 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        size_t v12 = (size_t)v7[1];
      }
      if (v8 >= 0) {
        size_t v13 = v7;
      }
      else {
        size_t v13 = *v7;
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      __n128 result = (const void **)memcmp(v11, v13, v14);
      BOOL v15 = v10 < v12;
      if (result) {
        BOOL v15 = (int)result < 0;
      }
      if (v15)
      {
        size_t v31 = v5[2];
        unint64_t v16 = (unint64_t)v31;
        long long v30 = *(_OWORD *)v5;
        v5[1] = 0;
        v5[2] = 0;
        *uint64_t v5 = 0;
        size_t v17 = HIBYTE(v16);
        if ((v17 & 0x80u) == 0) {
          size_t v18 = v17;
        }
        else {
          size_t v18 = *((void *)&v30 + 1);
        }
        if ((v17 & 0x80u) == 0) {
          unint64_t v19 = &v30;
        }
        else {
          unint64_t v19 = (long long *)v30;
        }
        size_t v20 = v5;
        do
        {
          size_t v21 = v20 - 3;
          *(_OWORD *)size_t v20 = *(_OWORD *)(v20 - 3);
          v20[2] = *(v20 - 1);
          *((unsigned char *)v20 - 1) = 0;
          *((unsigned char *)v20 - 24) = 0;
          size_t v22 = *((unsigned __int8 *)v20 - 25);
          uint64_t v23 = v20 - 6;
          uint64_t v24 = (const void **)*(v20 - 6);
          size_t v25 = (size_t)*(v20 - 5);
          if ((v22 & 0x80u) == 0) {
            size_t v26 = v22;
          }
          else {
            size_t v26 = v25;
          }
          if ((v22 & 0x80u) == 0) {
            size_t v27 = v23;
          }
          else {
            size_t v27 = v24;
          }
          if (v26 >= v18) {
            size_t v28 = v18;
          }
          else {
            size_t v28 = v26;
          }
          __n128 result = (const void **)memcmp(v19, v27, v28);
          BOOL v29 = (int)result < 0;
          if (!result) {
            BOOL v29 = v18 < v26;
          }
          size_t v20 = v21;
        }
        while (v29);
        *(_OWORD *)size_t v21 = v30;
        v21[2] = v31;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3)
{
  int v6 = *((char *)a1 + 23);
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v7 >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = *a2;
  }
  if (v6 >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  if (v6 >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *a1;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  else {
    BOOL v14 = v8 < v10;
  }
  int v15 = *((char *)a3 + 23);
  if (v15 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  if (v15 >= 0) {
    size_t v17 = a3;
  }
  else {
    size_t v17 = *a3;
  }
  if (v8 >= v16) {
    size_t v18 = v16;
  }
  else {
    size_t v18 = v8;
  }
  int v19 = memcmp(v17, v9, v18);
  BOOL v20 = v16 < v8;
  if (v19) {
    BOOL v20 = v19 < 0;
  }
  if (v14)
  {
    if (v20)
    {
      size_t v21 = a1[2];
      long long v22 = *(_OWORD *)a1;
      uint64_t v23 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v23;
      *(_OWORD *)a3 = v22;
      a3[2] = v21;
      return 1;
    }
    unint64_t v39 = (unint64_t)a1[2];
    long long v40 = *(_OWORD *)a1;
    std::string v41 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v41;
    *(_OWORD *)a2 = v40;
    a2[2] = (const void *)v39;
    size_t v42 = HIBYTE(v39);
    int v43 = *((char *)a3 + 23);
    if (v43 >= 0) {
      size_t v44 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v44 = (size_t)a3[1];
    }
    if (v43 >= 0) {
      long long v45 = a3;
    }
    else {
      long long v45 = *a3;
    }
    if ((v42 & 0x80u) == 0) {
      size_t v46 = v42;
    }
    else {
      size_t v46 = (size_t)a2[1];
    }
    if ((v42 & 0x80u) == 0) {
      unint64_t v47 = a2;
    }
    else {
      unint64_t v47 = *a2;
    }
    if (v46 >= v44) {
      size_t v48 = v44;
    }
    else {
      size_t v48 = v46;
    }
    int v49 = memcmp(v45, v47, v48);
    BOOL v50 = v44 < v46;
    if (v49) {
      BOOL v50 = v49 < 0;
    }
    if (!v50) {
      return 1;
    }
    long long v51 = a2[2];
    long long v52 = *(_OWORD *)a2;
    uint64_t v53 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v53;
    *(_OWORD *)a3 = v52;
    a3[2] = v51;
    return 2;
  }
  if (v20)
  {
    uint64_t v24 = a2[2];
    long long v25 = *(_OWORD *)a2;
    size_t v26 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v26;
    *(_OWORD *)a3 = v25;
    a3[2] = v24;
    int v27 = *((char *)a1 + 23);
    int v28 = *((char *)a2 + 23);
    if (v28 >= 0) {
      size_t v29 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v29 = (size_t)a2[1];
    }
    if (v28 >= 0) {
      long long v30 = a2;
    }
    else {
      long long v30 = *a2;
    }
    if (v27 >= 0) {
      size_t v31 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v31 = (size_t)a1[1];
    }
    if (v27 >= 0) {
      uint64_t v32 = a1;
    }
    else {
      uint64_t v32 = *a1;
    }
    if (v31 >= v29) {
      size_t v33 = v29;
    }
    else {
      size_t v33 = v31;
    }
    int v34 = memcmp(v30, v32, v33);
    BOOL v35 = v29 < v31;
    if (v34) {
      BOOL v35 = v34 < 0;
    }
    if (!v35) {
      return 1;
    }
    uint64_t v36 = a1[2];
    long long v37 = *(_OWORD *)a1;
    size_t v38 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v38;
    *(_OWORD *)a2 = v37;
    a2[2] = v36;
    return 2;
  }
  return 0;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v58 = a1[2];
  long long v57 = *(_OWORD *)a1;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  int v4 = *((char *)a2 - 1);
  if (SHIBYTE(v58) >= 0) {
    size_t v5 = HIBYTE(v58);
  }
  else {
    size_t v5 = *((void *)&v57 + 1);
  }
  if (SHIBYTE(v58) >= 0) {
    int v6 = &v57;
  }
  else {
    int v6 = (long long *)v57;
  }
  if (v4 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 - 1);
  }
  else {
    size_t v7 = (size_t)*(a2 - 2);
  }
  if (v4 >= 0) {
    size_t v8 = a2 - 3;
  }
  else {
    size_t v8 = (const void **)*(a2 - 3);
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  BOOL v11 = v5 < v7;
  if (v10) {
    BOOL v11 = v10 < 0;
  }
  if (v11)
  {
    size_t v12 = a1 + 3;
    do
    {
      int v13 = *((char *)v12 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v14 = (size_t)v12[1];
      }
      if (v13 >= 0) {
        int v15 = v12;
      }
      else {
        int v15 = *v12;
      }
      if (v14 >= v5) {
        size_t v16 = v5;
      }
      else {
        size_t v16 = v14;
      }
      int v17 = memcmp(v6, v15, v16);
      BOOL v18 = v5 < v14;
      if (v17) {
        BOOL v18 = v17 < 0;
      }
      v12 += 3;
    }
    while (!v18);
    int v19 = v12 - 3;
  }
  else
  {
    BOOL v20 = a1 + 3;
    do
    {
      int v19 = v20;
      if (v20 >= v2) {
        break;
      }
      int v21 = *((char *)v20 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v20 + 23);
      }
      else {
        size_t v22 = (size_t)v20[1];
      }
      if (v21 >= 0) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = *v20;
      }
      if (v22 >= v5) {
        size_t v24 = v5;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v6, v23, v24);
      BOOL v26 = v25 < 0;
      if (!v25) {
        BOOL v26 = v5 < v22;
      }
      BOOL v20 = v19 + 3;
    }
    while (!v26);
  }
  if (v19 < v2)
  {
    int v27 = v2 - 3;
    do
    {
      int v28 = *((char *)v27 + 23);
      if (v28 >= 0) {
        size_t v29 = *((unsigned __int8 *)v27 + 23);
      }
      else {
        size_t v29 = (size_t)v27[1];
      }
      if (v28 >= 0) {
        long long v30 = v27;
      }
      else {
        long long v30 = *v27;
      }
      if (v29 >= v5) {
        size_t v31 = v5;
      }
      else {
        size_t v31 = v29;
      }
      int v32 = memcmp(v6, v30, v31);
      BOOL v33 = v5 < v29;
      if (v32) {
        BOOL v33 = v32 < 0;
      }
      v27 -= 3;
    }
    while (v33);
    uint64_t v2 = v27 + 3;
  }
  for (; v19 < v2; uint64_t v2 = v46 + 3)
  {
    long long v34 = *(_OWORD *)v19;
    uint64_t v60 = v19[2];
    long long v59 = v34;
    long long v35 = *(_OWORD *)v2;
    void v19[2] = v2[2];
    *(_OWORD *)int v19 = v35;
    uint64_t v36 = v19 + 3;
    long long v37 = v59;
    v2[2] = v60;
    *(_OWORD *)uint64_t v2 = v37;
    if (SHIBYTE(v58) >= 0) {
      size_t v38 = HIBYTE(v58);
    }
    else {
      size_t v38 = *((void *)&v57 + 1);
    }
    if (SHIBYTE(v58) >= 0) {
      unint64_t v39 = &v57;
    }
    else {
      unint64_t v39 = (long long *)v57;
    }
    do
    {
      int v40 = *((char *)v36 + 23);
      if (v40 >= 0) {
        size_t v41 = *((unsigned __int8 *)v36 + 23);
      }
      else {
        size_t v41 = (size_t)v36[1];
      }
      if (v40 >= 0) {
        size_t v42 = v36;
      }
      else {
        size_t v42 = *v36;
      }
      if (v41 >= v38) {
        size_t v43 = v38;
      }
      else {
        size_t v43 = v41;
      }
      int v44 = memcmp(v39, v42, v43);
      BOOL v45 = v38 < v41;
      if (v44) {
        BOOL v45 = v44 < 0;
      }
      v36 += 3;
    }
    while (!v45);
    int v19 = v36 - 3;
    size_t v46 = v2 - 3;
    do
    {
      int v47 = *((char *)v46 + 23);
      if (v47 >= 0) {
        size_t v48 = *((unsigned __int8 *)v46 + 23);
      }
      else {
        size_t v48 = (size_t)v46[1];
      }
      if (v47 >= 0) {
        int v49 = v46;
      }
      else {
        int v49 = *v46;
      }
      if (v48 >= v38) {
        size_t v50 = v38;
      }
      else {
        size_t v50 = v48;
      }
      int v51 = memcmp(v39, v49, v50);
      BOOL v52 = v38 < v48;
      if (v51) {
        BOOL v52 = v51 < 0;
      }
      v46 -= 3;
    }
    while (v52);
  }
  uint64_t v53 = (void **)(v19 - 3);
  if (v19 - 3 == a1)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*v53);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v54 = *(_OWORD *)v53;
    a1[2] = *(v19 - 1);
    *(_OWORD *)a1 = v54;
    *((unsigned char *)v19 - 1) = 0;
    *((unsigned char *)v19 - 24) = 0;
  }
  long long v55 = v57;
  *(v19 - 1) = v58;
  *(_OWORD *)uint64_t v53 = v55;
  return v19;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(long long *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v57 = *((void *)a1 + 2);
  unint64_t v5 = v57;
  long long v56 = *a1;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  size_t v6 = HIBYTE(v5);
  if ((v6 & 0x80u) == 0) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = *((void *)&v56 + 1);
  }
  if ((v6 & 0x80u) == 0) {
    size_t v8 = &v56;
  }
  else {
    size_t v8 = (long long *)v56;
  }
  do
  {
    int v9 = *((char *)a1 + v4 + 47);
    if (v9 >= 0) {
      size_t v10 = *((unsigned __int8 *)a1 + v4 + 47);
    }
    else {
      size_t v10 = *(void *)((char *)a1 + v4 + 32);
    }
    if (v9 >= 0) {
      BOOL v11 = (char *)a1 + v4 + 24;
    }
    else {
      BOOL v11 = *(char **)((char *)a1 + v4 + 24);
    }
    if (v7 >= v10) {
      size_t v12 = v10;
    }
    else {
      size_t v12 = v7;
    }
    int v13 = memcmp(v11, v8, v12);
    BOOL v14 = v10 < v7;
    if (v13) {
      BOOL v14 = v13 < 0;
    }
    v4 += 24;
  }
  while (v14);
  unint64_t v15 = (unint64_t)a1 + v4;
  if (v4 == 24)
  {
    size_t v24 = (const void **)(a2 - 24);
    while (1)
    {
      unint64_t v23 = (unint64_t)(v24 + 3);
      if (v15 >= (unint64_t)(v24 + 3)) {
        break;
      }
      int v25 = *((char *)v24 + 23);
      if (v25 >= 0) {
        size_t v26 = *((unsigned __int8 *)v24 + 23);
      }
      else {
        size_t v26 = (size_t)v24[1];
      }
      if (v25 >= 0) {
        int v27 = v24;
      }
      else {
        int v27 = *v24;
      }
      if (v7 >= v26) {
        size_t v28 = v26;
      }
      else {
        size_t v28 = v7;
      }
      int v29 = memcmp(v27, v8, v28);
      BOOL v30 = v26 < v7;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      v24 -= 3;
      if (v30)
      {
        unint64_t v23 = (unint64_t)(v24 + 3);
        break;
      }
    }
  }
  else
  {
    size_t v16 = (const void **)(a2 - 24);
    do
    {
      int v17 = *((char *)v16 + 23);
      if (v17 >= 0) {
        size_t v18 = *((unsigned __int8 *)v16 + 23);
      }
      else {
        size_t v18 = (size_t)v16[1];
      }
      if (v17 >= 0) {
        int v19 = v16;
      }
      else {
        int v19 = *v16;
      }
      if (v7 >= v18) {
        size_t v20 = v18;
      }
      else {
        size_t v20 = v7;
      }
      int v21 = memcmp(v19, v8, v20);
      BOOL v22 = v18 < v7;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      v16 -= 3;
    }
    while (!v22);
    unint64_t v23 = (unint64_t)(v16 + 3);
  }
  if (v15 >= v23)
  {
    unint64_t v31 = v15;
    unint64_t v52 = v15 - 24;
    if ((long long *)(v15 - 24) != a1)
    {
LABEL_84:
      if (*((char *)a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v53 = *(_OWORD *)v52;
      *((void *)a1 + 2) = *(void *)(v52 + 16);
      *a1 = v53;
      *(unsigned char *)(v31 - 1) = 0;
      *(unsigned char *)(v31 - 24) = 0;
      goto LABEL_90;
    }
  }
  else
  {
    unint64_t v31 = v15;
    int v32 = (const void **)v23;
    do
    {
      long long v33 = *(_OWORD *)v31;
      long long v59 = *(const void **)(v31 + 16);
      long long v58 = v33;
      long long v34 = *(_OWORD *)v32;
      *(void *)(v31 + 16) = v32[2];
      *(_OWORD *)unint64_t v31 = v34;
      long long v35 = (const void **)(v31 + 24);
      long long v36 = v58;
      v32[2] = v59;
      *(_OWORD *)int v32 = v36;
      if (v57 >= 0) {
        size_t v37 = HIBYTE(v57);
      }
      else {
        size_t v37 = *((void *)&v56 + 1);
      }
      if (v57 >= 0) {
        size_t v38 = &v56;
      }
      else {
        size_t v38 = (long long *)v56;
      }
      do
      {
        int v39 = *((char *)v35 + 23);
        if (v39 >= 0) {
          size_t v40 = *((unsigned __int8 *)v35 + 23);
        }
        else {
          size_t v40 = (size_t)v35[1];
        }
        if (v39 >= 0) {
          size_t v41 = v35;
        }
        else {
          size_t v41 = *v35;
        }
        if (v37 >= v40) {
          size_t v42 = v40;
        }
        else {
          size_t v42 = v37;
        }
        int v43 = memcmp(v41, v38, v42);
        BOOL v44 = v40 < v37;
        if (v43) {
          BOOL v44 = v43 < 0;
        }
        v35 += 3;
      }
      while (v44);
      unint64_t v31 = (unint64_t)(v35 - 3);
      BOOL v45 = v32 - 3;
      do
      {
        int v46 = *((char *)v45 + 23);
        if (v46 >= 0) {
          size_t v47 = *((unsigned __int8 *)v45 + 23);
        }
        else {
          size_t v47 = (size_t)v45[1];
        }
        if (v46 >= 0) {
          size_t v48 = v45;
        }
        else {
          size_t v48 = *v45;
        }
        if (v37 >= v47) {
          size_t v49 = v47;
        }
        else {
          size_t v49 = v37;
        }
        int v50 = memcmp(v48, v38, v49);
        BOOL v51 = v47 < v37;
        if (v50) {
          BOOL v51 = v50 < 0;
        }
        v45 -= 3;
      }
      while (!v51);
      int v32 = v45 + 3;
    }
    while (v31 < (unint64_t)v32);
    unint64_t v52 = v31 - 24;
    if ((long long *)(v31 - 24) != a1) {
      goto LABEL_84;
    }
  }
  if (*(char *)(v31 - 1) < 0) {
    operator delete(*(void **)v52);
  }
LABEL_90:
  long long v54 = v56;
  *(void *)(v52 + 16) = v57;
  *(_OWORD *)unint64_t v52 = v54;
  return v52;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      size_t v6 = a2 - 3;
      int v7 = *(char *)(a1 + 23);
      int v8 = *((char *)a2 - 1);
      if (v8 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      if (v8 >= 0) {
        size_t v10 = a2 - 3;
      }
      else {
        size_t v10 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v11 = *(void *)(a1 + 8);
      }
      if (v7 >= 0) {
        size_t v12 = (const void *)a1;
      }
      else {
        size_t v12 = *(const void **)a1;
      }
      if (v11 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v11;
      }
      int v14 = memcmp(v10, v12, v13);
      BOOL v15 = v9 < v11;
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      if (v15)
      {
        size_t v16 = *(const void **)(a1 + 16);
        long long v17 = *(_OWORD *)a1;
        size_t v18 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v18;
        *(_OWORD *)size_t v6 = v17;
        v6[2] = v16;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a1 + 24, a1 + 48, (long long *)(a1 + 72), a2 - 3);
      return 1;
    default:
      int v19 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      size_t v20 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      break;
  }
  while (1)
  {
    int v24 = *((char *)v19 + 23);
    int v25 = *((char *)v20 + 23);
    if (v25 >= 0) {
      size_t v26 = *((unsigned __int8 *)v20 + 23);
    }
    else {
      size_t v26 = (size_t)v20[1];
    }
    if (v25 >= 0) {
      int v27 = v20;
    }
    else {
      int v27 = *v20;
    }
    if (v24 >= 0) {
      size_t v28 = *((unsigned __int8 *)v19 + 23);
    }
    else {
      size_t v28 = (size_t)v19[1];
    }
    if (v24 >= 0) {
      int v29 = v19;
    }
    else {
      int v29 = *v19;
    }
    if (v28 >= v26) {
      size_t v30 = v26;
    }
    else {
      size_t v30 = v28;
    }
    int v31 = memcmp(v27, v29, v30);
    BOOL v32 = v26 < v28;
    if (v31) {
      BOOL v32 = v31 < 0;
    }
    if (v32)
    {
      long long v46 = *(_OWORD *)v20;
      size_t v47 = v20[2];
      v20[1] = 0;
      v20[2] = 0;
      *size_t v20 = 0;
      uint64_t v33 = v21;
      do
      {
        uint64_t v34 = a1 + v33;
        *(_OWORD *)(v34 + 72) = *(_OWORD *)(a1 + v33 + 48);
        *(void *)(v34 + 88) = *(void *)(a1 + v33 + 64);
        *(unsigned char *)(v34 + 71) = 0;
        *(unsigned char *)(v34 + 48) = 0;
        if (v33 == -48)
        {
          uint64_t v23 = a1;
          goto LABEL_24;
        }
        size_t v37 = *(const void **)(v34 + 24);
        uint64_t v35 = v34 + 24;
        long long v36 = v37;
        int v38 = *(char *)(v35 + 23);
        if (SHIBYTE(v47) >= 0) {
          size_t v39 = HIBYTE(v47);
        }
        else {
          size_t v39 = *((void *)&v46 + 1);
        }
        if (SHIBYTE(v47) >= 0) {
          size_t v40 = &v46;
        }
        else {
          size_t v40 = (long long *)v46;
        }
        if (v38 >= 0) {
          size_t v41 = *(unsigned __int8 *)(v35 + 23);
        }
        else {
          size_t v41 = *(void *)(v35 + 8);
        }
        if (v38 >= 0) {
          size_t v42 = (const void *)v35;
        }
        else {
          size_t v42 = v36;
        }
        if (v41 >= v39) {
          size_t v43 = v39;
        }
        else {
          size_t v43 = v41;
        }
        int v44 = memcmp(v40, v42, v43);
        BOOL v45 = v39 < v41;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
        v33 -= 24;
      }
      while (v45);
      uint64_t v23 = a1 + v33 + 72;
LABEL_24:
      *(_OWORD *)uint64_t v23 = v46;
      *(void *)(v23 + 16) = v47;
      if (++v22 == 8) {
        return v20 + 3 == a2;
      }
    }
    int v19 = v20;
    v21 += 24;
    v20 += 3;
    if (v20 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, long long *a2, long long *a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)a2, (const void **)a3);
  int v8 = *((char *)a3 + 23);
  int v9 = *((char *)a4 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  if (v9 >= 0) {
    size_t v11 = a4;
  }
  else {
    size_t v11 = *a4;
  }
  if (v8 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = *((void *)a3 + 1);
  }
  if (v8 >= 0) {
    size_t v13 = a3;
  }
  else {
    size_t v13 = *(const void **)a3;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  BOOL v17 = v10 < v12;
  if (v15) {
    BOOL v17 = v15 < 0;
  }
  if (v17)
  {
    size_t v18 = (const void *)*((void *)a3 + 2);
    long long v19 = *a3;
    size_t v20 = a4[2];
    *a3 = *(_OWORD *)a4;
    *((void *)a3 + 2) = v20;
    *(_OWORD *)a4 = v19;
    a4[2] = v18;
    int v21 = *((char *)a2 + 23);
    int v22 = *((char *)a3 + 23);
    if (v22 >= 0) {
      size_t v23 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v23 = *((void *)a3 + 1);
    }
    if (v22 >= 0) {
      int v24 = a3;
    }
    else {
      int v24 = *(const void **)a3;
    }
    if (v21 >= 0) {
      size_t v25 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v25 = *((void *)a2 + 1);
    }
    if (v21 >= 0) {
      size_t v26 = a2;
    }
    else {
      size_t v26 = *(const void **)a2;
    }
    if (v25 >= v23) {
      size_t v27 = v23;
    }
    else {
      size_t v27 = v25;
    }
    int v28 = memcmp(v24, v26, v27);
    BOOL v29 = v23 < v25;
    if (v28) {
      BOOL v29 = v28 < 0;
    }
    if (v29)
    {
      uint64_t v30 = *((void *)a2 + 2);
      long long v31 = *a2;
      uint64_t v32 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v32;
      *a3 = v31;
      *((void *)a3 + 2) = v30;
      int v33 = *(char *)(a1 + 23);
      int v34 = *((char *)a2 + 23);
      if (v34 >= 0) {
        size_t v35 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v35 = *((void *)a2 + 1);
      }
      if (v34 >= 0) {
        long long v36 = a2;
      }
      else {
        long long v36 = *(const void **)a2;
      }
      if (v33 >= 0) {
        size_t v37 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v37 = *(void *)(a1 + 8);
      }
      if (v33 >= 0) {
        int v38 = (const void *)a1;
      }
      else {
        int v38 = *(const void **)a1;
      }
      if (v37 >= v35) {
        size_t v39 = v35;
      }
      else {
        size_t v39 = v37;
      }
      int v40 = memcmp(v36, v38, v39);
      BOOL v41 = v35 < v37;
      if (v40) {
        BOOL v41 = v40 < 0;
      }
      if (v41)
      {
        uint64_t v42 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v43 = *((void *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(void *)(a1 + 16) = v43;
        *a2 = (__int128)result;
        *((void *)a2 + 2) = v42;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (long long *)a2, (long long *)a3, (const void **)a4);
  int v10 = *((char *)a4 + 23);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    size_t v13 = a5;
  }
  else {
    size_t v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v14 = *((void *)a4 + 1);
  }
  if (v10 >= 0) {
    int v15 = a4;
  }
  else {
    int v15 = *(long long **)a4;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v19 = v12 < v14;
  if (v17) {
    BOOL v19 = v17 < 0;
  }
  if (v19)
  {
    size_t v20 = (const void *)*((void *)a4 + 2);
    long long v21 = *a4;
    int v22 = a5[2];
    *a4 = *(_OWORD *)a5;
    *((void *)a4 + 2) = v22;
    *(_OWORD *)a5 = v21;
    a5[2] = v20;
    int v23 = *(char *)(a3 + 23);
    int v24 = *((char *)a4 + 23);
    if (v24 >= 0) {
      size_t v25 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v25 = *((void *)a4 + 1);
    }
    if (v24 >= 0) {
      size_t v26 = a4;
    }
    else {
      size_t v26 = *(long long **)a4;
    }
    if (v23 >= 0) {
      size_t v27 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v27 = *(void *)(a3 + 8);
    }
    if (v23 >= 0) {
      int v28 = (const void *)a3;
    }
    else {
      int v28 = *(const void **)a3;
    }
    if (v27 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v27;
    }
    int v30 = memcmp(v26, v28, v29);
    BOOL v31 = v25 < v27;
    if (v30) {
      BOOL v31 = v30 < 0;
    }
    if (v31)
    {
      uint64_t v32 = *(void *)(a3 + 16);
      long long v33 = *(_OWORD *)a3;
      uint64_t v34 = *((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      *(void *)(a3 + 16) = v34;
      *a4 = v33;
      *((void *)a4 + 2) = v32;
      int v35 = *(char *)(a2 + 23);
      int v36 = *(char *)(a3 + 23);
      if (v36 >= 0) {
        size_t v37 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v37 = *(void *)(a3 + 8);
      }
      if (v36 >= 0) {
        int v38 = (const void *)a3;
      }
      else {
        int v38 = *(const void **)a3;
      }
      if (v35 >= 0) {
        size_t v39 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v39 = *(void *)(a2 + 8);
      }
      if (v35 >= 0) {
        int v40 = (const void *)a2;
      }
      else {
        int v40 = *(const void **)a2;
      }
      if (v39 >= v37) {
        size_t v41 = v37;
      }
      else {
        size_t v41 = v39;
      }
      int v42 = memcmp(v38, v40, v41);
      BOOL v43 = v37 < v39;
      if (v42) {
        BOOL v43 = v42 < 0;
      }
      if (v43)
      {
        uint64_t v44 = *(void *)(a2 + 16);
        long long v45 = *(_OWORD *)a2;
        uint64_t v46 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v46;
        *(_OWORD *)a3 = v45;
        *(void *)(a3 + 16) = v44;
        int v47 = *(char *)(a1 + 23);
        int v48 = *(char *)(a2 + 23);
        if (v48 >= 0) {
          size_t v49 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v49 = *(void *)(a2 + 8);
        }
        if (v48 >= 0) {
          int v50 = (const void *)a2;
        }
        else {
          int v50 = *(const void **)a2;
        }
        if (v47 >= 0) {
          size_t v51 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v51 = *(void *)(a1 + 8);
        }
        if (v47 >= 0) {
          unint64_t v52 = (const void *)a1;
        }
        else {
          unint64_t v52 = *(const void **)a1;
        }
        if (v51 >= v49) {
          size_t v53 = v49;
        }
        else {
          size_t v53 = v51;
        }
        int v54 = memcmp(v50, v52, v53);
        BOOL v55 = v49 < v51;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
        if (v55)
        {
          uint64_t v56 = *(void *)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v57 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v57;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v56;
        }
      }
    }
  }
  return result;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v67 = v4;
    uint64_t v68 = v5;
    int v7 = a4;
    uint64_t v8 = a1;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v10 = a3;
      uint64_t v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      size_t v12 = (__n128 *)(a1 + 24 * v11);
      uint64_t v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 >= a3)
      {
        size_t v25 = (__n128 *)v12->n128_u64[0];
      }
      else
      {
        signed __int8 v14 = v12[2].n128_i8[15];
        signed __int8 v15 = v12[1].n128_i8[7];
        BOOL v61 = (__n128 *)v12[1].n128_u64[1];
        unint64_t v62 = (__n128 *)v12->n128_u64[0];
        if (v15 >= 0) {
          size_t v16 = v12[1].n128_u8[7];
        }
        else {
          size_t v16 = v12->n128_u64[1];
        }
        if (v15 >= 0) {
          int v17 = (const void *)(a1 + 24 * v11);
        }
        else {
          int v17 = (const void *)v12->n128_u64[0];
        }
        unint64_t v18 = v6 >> 1;
        if (v14 >= 0) {
          size_t v19 = v12[2].n128_u8[15];
        }
        else {
          size_t v19 = v12[2].n128_u64[0];
        }
        if (v14 >= 0) {
          size_t v20 = &v12[1].n128_i8[8];
        }
        else {
          size_t v20 = (__int8 *)v12[1].n128_u64[1];
        }
        if (v19 >= v16) {
          size_t v21 = v16;
        }
        else {
          size_t v21 = v19;
        }
        int v22 = memcmp(v17, v20, v21);
        BOOL v23 = v16 >= v19;
        uint64_t v9 = v18;
        BOOL v24 = !v23;
        if (v22) {
          BOOL v24 = v22 < 0;
        }
        BOOL v48 = !v24;
        size_t v25 = v62;
        if (!v48)
        {
          size_t v25 = v61;
          size_t v12 = (__n128 *)((char *)v12 + 24);
          uint64_t v11 = v13;
        }
      }
      int v26 = v7[1].n128_i8[7];
      int v27 = v12[1].n128_i8[7];
      if (v27 >= 0) {
        size_t v28 = v12[1].n128_u8[7];
      }
      else {
        size_t v28 = v12->n128_u64[1];
      }
      if (v27 >= 0) {
        size_t v29 = v12;
      }
      else {
        size_t v29 = v25;
      }
      if (v26 >= 0) {
        size_t v30 = v7[1].n128_u8[7];
      }
      else {
        size_t v30 = v7->n128_u64[1];
      }
      if (v26 >= 0) {
        BOOL v31 = v7;
      }
      else {
        BOOL v31 = (__n128 *)v7->n128_u64[0];
      }
      if (v30 >= v28) {
        size_t v32 = v28;
      }
      else {
        size_t v32 = v30;
      }
      int v33 = memcmp(v29, v31, v32);
      BOOL v35 = v28 < v30;
      if (v33) {
        BOOL v35 = v33 < 0;
      }
      if (!v35)
      {
        __n128 v65 = *v7;
        int64_t v66 = v7[1].n128_i64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        uint64_t v63 = v9;
        uint64_t v64 = v10;
        do
        {
          long long v58 = v12;
          __n128 v59 = *v12;
          v7[1].n128_u64[0] = v12[1].n128_u64[0];
          *int v7 = v59;
          v12[1].n128_u8[7] = 0;
          v12->n128_u8[0] = 0;
          if (v9 < v11) {
            break;
          }
          uint64_t v60 = (2 * v11) | 1;
          size_t v12 = (__n128 *)(v8 + 24 * v60);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 < v10)
          {
            int v36 = v12[2].n128_i8[15];
            unint64_t v37 = v12[1].n128_u64[1];
            int v38 = v12[1].n128_i8[7];
            unint64_t v39 = v12->n128_u64[0];
            uint64_t v40 = v8;
            if (v38 >= 0) {
              size_t v41 = v12[1].n128_u8[7];
            }
            else {
              size_t v41 = v12->n128_u64[1];
            }
            if (v38 >= 0) {
              int v42 = v12;
            }
            else {
              int v42 = (__n128 *)v12->n128_u64[0];
            }
            if (v36 >= 0) {
              size_t v43 = v12[2].n128_u8[15];
            }
            else {
              size_t v43 = v12[2].n128_u64[0];
            }
            if (v36 >= 0) {
              uint64_t v44 = &v12[1].n128_i8[8];
            }
            else {
              uint64_t v44 = (__int8 *)v12[1].n128_u64[1];
            }
            if (v43 >= v41) {
              size_t v45 = v41;
            }
            else {
              size_t v45 = v43;
            }
            int v46 = memcmp(v42, v44, v45);
            BOOL v23 = v41 >= v43;
            uint64_t v8 = v40;
            BOOL v47 = !v23;
            if (v46) {
              BOOL v47 = v46 < 0;
            }
            BOOL v48 = !v47;
            if (v47) {
              size_t v49 = (__n128 *)v37;
            }
            else {
              size_t v49 = (__n128 *)v39;
            }
            if (!v48) {
              size_t v12 = (__n128 *)((char *)v12 + 24);
            }
            uint64_t v9 = v63;
            uint64_t v10 = v64;
            if (v48) {
              uint64_t v11 = v60;
            }
          }
          else
          {
            size_t v49 = (__n128 *)v12->n128_u64[0];
            uint64_t v11 = v60;
          }
          int v50 = v12[1].n128_i8[7];
          unint64_t v51 = v50 >= 0 ? v12[1].n128_u8[7] : v12->n128_u64[1];
          unint64_t v52 = v50 >= 0 ? v12 : v49;
          unint64_t v53 = v66 >= 0 ? HIBYTE(v66) : v65.n128_u64[1];
          int v54 = v66 >= 0 ? &v65 : (__n128 *)v65.n128_u64[0];
          size_t v55 = v53 >= v51 ? v51 : v53;
          int v56 = memcmp(v52, v54, v55);
          BOOL v57 = v51 < v53;
          if (v56) {
            BOOL v57 = v56 < 0;
          }
          int v7 = v58;
        }
        while (!v57);
        __n128 result = v65;
        v58[1].n128_u64[0] = v66;
        __n128 *v58 = result;
      }
    }
  }
  return result;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v5 = 0;
    uint64_t v24 = *(void *)a1;
    *(void *)int v27 = *(void *)(a1 + 8);
    *(void *)&v27[7] = *(void *)(a1 + 15);
    char v25 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    int64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = a1;
    do
    {
      uint64_t v9 = v7 + 24 * v5 + 24;
      uint64_t v10 = 2 * v5;
      uint64_t v5 = (2 * v5) | 1;
      uint64_t v11 = v10 + 2;
      if (v10 + 2 < a4)
      {
        int v12 = *(char *)(v9 + 47);
        int v13 = *(char *)(v9 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          size_t v14 = *(void *)(v9 + 8);
        }
        if (v13 >= 0) {
          signed __int8 v15 = (const void *)v9;
        }
        else {
          signed __int8 v15 = *(const void **)v9;
        }
        if (v12 >= 0) {
          size_t v16 = *(unsigned __int8 *)(v9 + 47);
        }
        else {
          size_t v16 = *(void *)(v9 + 32);
        }
        if (v12 >= 0) {
          int v17 = (const void *)(v9 + 24);
        }
        else {
          int v17 = *(const void **)(v9 + 24);
        }
        if (v16 >= v14) {
          size_t v18 = v14;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v15, v17, v18);
        BOOL v20 = v14 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (v20)
        {
          v9 += 24;
          uint64_t v5 = v11;
        }
      }
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)v9;
      *(void *)(v7 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v9 + 23) = 0;
      *(unsigned char *)uint64_t v9 = 0;
      uint64_t v7 = v9;
    }
    while (v5 <= v6);
    if (v9 == a2 - 24)
    {
      *(void *)uint64_t v9 = v24;
      *(void *)(v9 + 8) = *(void *)v27;
      *(void *)(v9 + 15) = *(void *)&v27[7];
      *(unsigned char *)(v9 + 23) = v25;
    }
    else
    {
      long long v21 = *(_OWORD *)(a2 - 24);
      *(void *)(v9 + 16) = *(void *)(a2 - 8);
      *(_OWORD *)uint64_t v9 = v21;
      *(void *)(a2 - 24) = v24;
      *(void *)(a2 - 16) = *(void *)v27;
      *(void *)(a2 - 9) = *(void *)&v27[7];
      *(unsigned char *)(a2 - 1) = v25;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v9 + 24, a3, 0xAAAAAAAAAAAAAAABLL * ((v9 + 24 - a1) >> 3));
    }
  }
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v35 = v4;
    uint64_t v36 = v5;
    unint64_t v8 = v6 >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * (v6 >> 1));
    uint64_t v10 = (long long *)(a2 - 24);
    int v11 = *(char *)(a2 - 1);
    int v12 = *((char *)v9 + 23);
    if (v12 >= 0) {
      size_t v13 = *((unsigned __int8 *)v9 + 23);
    }
    else {
      size_t v13 = *((void *)v9 + 1);
    }
    if (v12 >= 0) {
      size_t v14 = (const void *)(a1 + 24 * (v6 >> 1));
    }
    else {
      size_t v14 = *(const void **)v9;
    }
    if (v11 >= 0) {
      size_t v15 = *(unsigned __int8 *)(a2 - 1);
    }
    else {
      size_t v15 = *(void *)(a2 - 16);
    }
    if (v11 >= 0) {
      size_t v16 = (const void *)(a2 - 24);
    }
    else {
      size_t v16 = *(const void **)(a2 - 24);
    }
    if (v15 >= v13) {
      size_t v17 = v13;
    }
    else {
      size_t v17 = v15;
    }
    int v18 = memcmp(v14, v16, v17);
    BOOL v20 = v13 < v15;
    if (v18) {
      BOOL v20 = v18 < 0;
    }
    if (v20)
    {
      unint64_t v34 = *((void *)v10 + 2);
      unint64_t v21 = v34;
      long long v33 = *v10;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      unint64_t v22 = HIBYTE(v21);
      if ((v22 & 0x80u) == 0) {
        unint64_t v23 = v22;
      }
      else {
        unint64_t v23 = *((void *)&v33 + 1);
      }
      if ((v22 & 0x80u) == 0) {
        uint64_t v24 = &v33;
      }
      else {
        uint64_t v24 = (long long *)v33;
      }
      do
      {
        char v25 = v9;
        long long v26 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        long long *v10 = v26;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        int v27 = *((char *)v9 + 23);
        unint64_t v28 = v27 >= 0 ? *((unsigned __int8 *)v9 + 23) : *((void *)v9 + 1);
        size_t v29 = v27 >= 0 ? (const void *)(a1 + 24 * v8) : *(const void **)v9;
        size_t v30 = v23 >= v28 ? v28 : v23;
        int v31 = memcmp(v29, v24, v30);
        BOOL v32 = v28 < v23;
        if (v31) {
          BOOL v32 = v31 < 0;
        }
        uint64_t v10 = v25;
      }
      while (v32);
      double result = *(double *)&v33;
      *char v25 = v33;
      *((void *)v25 + 2) = v34;
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong},std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,objc_object  {objcproto14MTLSharedEvent}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto14MTLSharedEvent}* {__strong}>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::piecewise_construct_t const&<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    size_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      size_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            size_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          size_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  size_t v17 = (void *)(a1 + 16);
  size_t v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  void v14[3] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      void *v14 = *v21;
LABEL_61:
      void *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v20 = *(void *)a1;
        unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v20 = *(void *)a1;
        unint64_t v21 = *(void **)(*(void *)a1 + 8 * v10);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      uint64_t v20 = *(void *)a1;
      unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *v17;
  void *v17 = v14;
  *(void *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v30 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192343B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192343B58(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl(&dword_1920CB000, a2, OS_LOG_TYPE_DEBUG, "Profiling Callback invoked. Reported Duration = %f ms\n", (uint8_t *)&v3, 0xCu);
}

uint64_t sub_192343BD8()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_192343C0C()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Espresso::AOT::Builder::BuildTensorOperand()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *std::string::basic_string<std::string_view,0>(void *__dst, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = operator new(v6 + 1);
    __dst[1] = v3;
    std::string __dst[2] = v7 | 0x8000000000000000;
    *std::string __dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v3;
    uint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((unsigned char *)v5 + v3) = 0;
  return __dst;
}

void sub_192343E78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    sub_192344238(v3);
  }
  _Unwind_Resume(exception_object);
}

void *E5RT::ConfigOptions::ConfigOptions(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *double result = &unk_1EE324828;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *double result = &unk_1EE324828;
  result[1] = v2;
  return result;
}

uint64_t E5RT::ConfigOptions::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)unint64_t v11 = 0u;
  int v12 = 1065353216;
  for (uint64_t i = *(void *)(a2 + 8) + 24; ; std::any::operator=[abi:ne180100](v4 + 4, (void (**)(uint64_t))(i + 32)))
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
    size_t v13 = (_OWORD *)(i + 16);
    uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)__p, i + 16, (uint64_t)&std::piecewise_construct, &v13);
  }
  std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__move_assign(*(void *)(a1 + 8) + 8, (uint64_t *)__p);
  uint64_t v5 = v11[0];
  if (v11[0])
  {
    do
    {
      unint64_t v8 = (void *)*v5;
      unint64_t v9 = (void (*)(void, void *, void, void, void))v5[4];
      if (v9) {
        v9(0, v5 + 4, 0, 0, 0);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

void sub_1923440C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t E5RT::ConfigOptions::GetAllConfigOptions(E5RT::ConfigOptions *this)
{
  return *((void *)this + 1) + 8;
}

uint64_t E5RT::ConfigOptions::GetConfigOption(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t E5RT::ConfigOptions::GetNumConfigOptions(E5RT::ConfigOptions *this)
{
  return *(void *)(*((void *)this + 1) + 32);
}

void std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v16 = (void *)*v4;
        size_t v17 = (void (*)(void, void *, void, void, void))v4[4];
        if (v17) {
          v17(0, v4 + 4, 0, 0, 0);
        }
        operator delete(v4);
        uint64_t v4 = v16;
      }
      while (v16);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  unint64_t v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  unint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    void *v10 = 0;
    v10[1] = 0;
  }
}

uint64_t sub_192344238(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void E5RT::ExecutionStreamConfigOptions::ExecutionStreamConfigOptions(E5RT::ExecutionStreamConfigOptions *this)
{
}

void sub_19234441C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = v4;
  MEMORY[0x192FF16B0](v5, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v3);
  _Unwind_Resume(a1);
}

void sub_192344454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v3);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamConfigOptions::~ExecutionStreamConfigOptions(E5RT::ExecutionStreamConfigOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::ExecutionStreamConfigOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

uint64_t E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(E5RT::ExecutionStreamConfigOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "skipIOFences<BOOL>", 18);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecutionStreamConfigOptions::SetSkipIOFences(E5RT::ExecutionStreamConfigOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "skipIOFences<BOOL>", 18, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1923446B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(E5RT::ExecutionStreamConfigOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "enableLowLatencyAsyncEvents<BOOL>", 33);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecutionStreamConfigOptions::SetEnableLowLatencyAsyncEvents(E5RT::ExecutionStreamConfigOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "enableLowLatencyAsyncEvents<BOOL>", 33, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1923448C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::ExecutionStreamConfigOptions::GetEnableConcurrentSyncExecution(E5RT::ExecutionStreamConfigOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "enableConcurrentSyncExecution<BOOL>", 35);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecutionStreamConfigOptions::SetEnableConcurrentSyncExecution(E5RT::ExecutionStreamConfigOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "enableConcurrentSyncExecution<BOOL>", 35, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_192344AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void E5RT::ExecutionStreamConfigOptions::Create(E5RT::ExecutionStreamConfigOptions *this)
{
}

void sub_192344B60(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_192344B88(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(std::string *this, const std::string *a2)
{
  uint64_t v2 = this;
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
    return v2;
  }
  else if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    v2[1].__r_.__value_.__s.__data_[0] = 1;
    return v2;
  }
  else
  {
    long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void std::make_unique[abi:ne180100]<E5RT::Ops::JitCallOperation,std::string &,std::shared_ptr<JitCallOpT const>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::optional<std::string> &>()
{
}

void sub_192344E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  MEMORY[0x192FF16B0](v19, 0x10F3C409D8ED1DCLL);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<E5RT::ExecutionStreamOperationInternal>::operator=[abi:ne180100]<E5RT::Ops::JitCallOperation,std::default_delete<E5RT::Ops::JitCallOperation>,void>(void *result, void *a2)
{
  uint64_t v2 = result;
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  long long v3 = (std::__shared_weak_count *)result[1];
  *uint64_t result = 0;
  result[1] = 0;
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      return v2;
    }
  }
  return result;
}

void std::make_unique[abi:ne180100]<E5RT::Ops::E5MinimalCpuOperation,std::string &,std::shared_ptr<E5MinimalCpuOpT const>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>()
{
}

void sub_192345038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x192FF16B0](v9, 0x10F3C409D8ED1DCLL);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<E5RT::ExecutionStreamOperationInternal>::operator=[abi:ne180100]<E5RT::Ops::E5MinimalCpuOperation,std::default_delete<E5RT::Ops::E5MinimalCpuOperation>,void>(void *result, void *a2)
{
  uint64_t v2 = result;
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  long long v3 = (std::__shared_weak_count *)result[1];
  *uint64_t result = 0;
  result[1] = 0;
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      return v2;
    }
  }
  return result;
}

void std::make_unique[abi:ne180100]<E5RT::Ops::BarrierOperation,std::string &>()
{
}

void sub_1923451A4(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10F3C409D8ED1DCLL);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<E5RT::ExecutionStreamOperationInternal>::operator=[abi:ne180100]<E5RT::Ops::BarrierOperation,std::default_delete<E5RT::Ops::BarrierOperation>,void>(void *result, void *a2)
{
  uint64_t v2 = result;
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  long long v3 = (std::__shared_weak_count *)result[1];
  *uint64_t result = 0;
  result[1] = 0;
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      return v2;
    }
  }
  return result;
}

void sub_1923452B4(uint64_t *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = a1;
    while (*((char *)v5 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v5[2], v5[3]);
      uint64_t v6 = (uint64_t *)v5[5];
      uint64_t v7 = (std::__shared_weak_count *)v5[6];
      uint64_t v12 = (uint64_t)v6;
      uint64_t v13 = v7;
      if (v7) {
        goto LABEL_7;
      }
LABEL_8:
      unint64_t v14 = v6;
      unint64_t v8 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(a3, (uint64_t *)&v14);
      if (v8)
      {
        v8[3] &= *a2;
        uint64_t v9 = v13;
        if (v13) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v10 = v12;
        unint64_t v14 = &v10;
        std::__hash_table<std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::__unordered_map_hasher<E5RT::IOPort *,std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::hash<E5RT::IOPort *>,std::equal_to<E5RT::IOPort *>,true>,std::__unordered_map_equal<E5RT::IOPort *,std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::equal_to<E5RT::IOPort *>,std::hash<E5RT::IOPort *>,true>,std::allocator<std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>>>::__emplace_unique_key_args<E5RT::IOPort *,std::piecewise_construct_t const&,std::tuple<E5RT::IOPort *&&>,std::tuple<>>((uint64_t)a3, &v10, (uint64_t)&std::piecewise_construct, &v14)[3] = *a2;
        uint64_t v9 = v13;
        if (v13)
        {
LABEL_14:
          if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v11.__r_.__value_.__l.__data_);
        uint64_t v5 = (uint64_t *)*v5;
        if (!v5) {
          return;
        }
      }
      else
      {
        uint64_t v5 = (uint64_t *)*v5;
        if (!v5) {
          return;
        }
      }
    }
    std::string v11 = *(std::string *)(v5 + 2);
    uint64_t v6 = (uint64_t *)v5[5];
    uint64_t v7 = (std::__shared_weak_count *)v5[6];
    uint64_t v12 = (uint64_t)v6;
    uint64_t v13 = v7;
    if (!v7) {
      goto LABEL_8;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = (uint64_t *)v12;
    goto LABEL_8;
  }
}

void sub_19234542C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192345440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::~Impl(E5RT::Ops::PreCompiledComputeOperation::Impl *this)
{
  uint64_t v2 = (void **)*((void *)this + 33);
  if (v2)
  {
    do
    {
      std::string v11 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_18:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v2);
      uint64_t v2 = v11;
    }
    while (v11);
  }
  long long v3 = (void *)*((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void **)*((void *)this + 28);
  if (v4)
  {
    do
    {
      uint64_t v12 = (void **)*v4;
      if (*((char *)v4 + 63) < 0)
      {
        operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0) {
LABEL_24:
        }
          operator delete(v4[2]);
      }
      else if (*((char *)v4 + 39) < 0)
      {
        goto LABEL_24;
      }
      operator delete(v4);
      uint64_t v4 = v12;
    }
    while (v12);
  }
  uint64_t v5 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)*((void *)this + 23);
  if (v6)
  {
    do
    {
      uint64_t v13 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0) {
LABEL_30:
        }
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_30;
      }
      operator delete(v6);
      uint64_t v6 = v13;
    }
    while (v13);
  }
  uint64_t v7 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 16);
  if (v8)
  {
    uint64_t v9 = (void *)*((void *)this + 17);
    uint64_t v10 = (void *)*((void *)this + 16);
    if (v9 != v8)
    {
      do
      {
        uint64_t v15 = *--v9;
        uint64_t v14 = v15;
        void *v9 = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      while (v9 != v8);
      uint64_t v10 = (void *)*((void *)this + 16);
    }
    *((void *)this + 17) = v8;
    operator delete(v10);
  }
  uint64_t v16 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  size_t v17 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    float v18 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v18) {
      goto LABEL_44;
    }
  }
  else
  {
    float v18 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v18) {
      goto LABEL_44;
    }
  }
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_44:
  uint64_t v19 = *((void *)this + 6);
  if (v19)
  {
    uint64_t v20 = *((void *)this + 7);
    unint64_t v21 = (void *)*((void *)this + 6);
    if (v20 != v19)
    {
      do
      {
        BOOL v22 = *(std::__shared_weak_count **)(v20 - 8);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v20 -= 16;
      }
      while (v20 != v19);
      unint64_t v21 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v19;
    operator delete(v21);
  }
  unint64_t v23 = (void **)*((void *)this + 3);
  if (v23)
  {
    do
    {
      while (1)
      {
        unint64_t v24 = (void **)*v23;
        char v25 = (std::__shared_weak_count *)v23[6];
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        if (*((char *)v23 + 39) < 0) {
          break;
        }
        operator delete(v23);
        unint64_t v23 = v24;
        if (!v24) {
          goto LABEL_61;
        }
      }
      operator delete(v23[2]);
      operator delete(v23);
      unint64_t v23 = v24;
    }
    while (v24);
  }
LABEL_61:
  unint64_t v26 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v26) {
    operator delete(v26);
  }
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::BindEventsForOpsParallel(E5RT::Ops::PreCompiledComputeOperation::Impl *this)
{
  uint64_t v1 = (void **)(*(uint64_t (**)(void))(**((void **)this + 9) + 32))(*((void *)this + 9));
  uint64_t v2 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)**v1 + 16))(**v1);
  long long v56 = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  uint64_t v3 = *v2;
  if (v2[1] == *v2) {
    goto LABEL_78;
  }
  uint64_t v4 = v2;
  unint64_t v5 = 0;
  size_t v45 = v2;
  do
  {
    uint64_t v6 = *(void *)(v3 + 16 * v5);
    uint64_t v47 = *(void *)(*((void *)this + 6) + 16 * v5);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
    if (v5)
    {
      *(_OWORD *)unint64_t v53 = 0u;
      *(_OWORD *)int v54 = 0u;
      int v55 = 1065353216;
      unint64_t v8 = *(unint64_t **)v7;
      uint64_t v9 = *(unint64_t **)(v7 + 8);
      while (1)
      {
        if (v8 == v9)
        {
          (*(void (**)(uint64_t, void **))(*(void *)v47 + 48))(v47, v53);
          BOOL v22 = v54[0];
          uint64_t v4 = v45;
          if (v54[0])
          {
            do
            {
              unint64_t v24 = v22;
              BOOL v22 = (void *)*v22;
              char v25 = (std::__shared_weak_count *)v24[3];
              if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
              operator delete(v24);
            }
            while (v22);
          }
          unint64_t v23 = v53[0];
          v53[0] = 0;
          if (v23) {
            operator delete(v23);
          }
          goto LABEL_44;
        }
        unint64_t v52 = 0;
        unint64_t v10 = *v8;
        unint64_t v52 = *v8;
        if (!*((void *)&v56 + 1)) {
          goto LABEL_29;
        }
        uint8x8_t v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v56 + 8));
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v12 = v10;
          if (v10 >= *((void *)&v56 + 1)) {
            unint64_t v12 = v10 % *((void *)&v56 + 1);
          }
        }
        else
        {
          unint64_t v12 = (*((void *)&v56 + 1) - 1) & v10;
        }
        uint64_t v13 = *(void **)(v56 + 8 * v12);
        if (!v13 || (uint64_t v14 = (void *)*v13) == 0)
        {
LABEL_29:
          std::to_string(&v50, v10);
          size_t v17 = std::string::insert(&v50, 0, "Compute-Unit-Parallel event:");
          long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          E5RT::AsyncEvent::CreateEvent((uint64_t)&__p, 0);
        }
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v10) {
                goto LABEL_30;
              }
            }
            else if ((v16 & (*((void *)&v56 + 1) - 1)) != v12)
            {
              goto LABEL_29;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_29;
            }
          }
        }
        while (1)
        {
          unint64_t v15 = v14[1];
          if (v15 == v10) {
            break;
          }
          if (v15 >= *((void *)&v56 + 1)) {
            v15 %= *((void *)&v56 + 1);
          }
          if (v15 != v12) {
            goto LABEL_29;
          }
LABEL_19:
          uint64_t v14 = (void *)*v14;
          if (!v14) {
            goto LABEL_29;
          }
        }
        if (v14[2] != v10) {
          goto LABEL_19;
        }
LABEL_30:
        v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
        uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v56, &v52, (uint64_t)&std::piecewise_construct, &v50);
        std::string::size_type v20 = v19[4];
        __p.__r_.__value_.__r.__words[0] = v19[3];
        __p.__r_.__value_.__l.__size_ = v20;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const>>((uint64_t)v53, (uint64_t *)&__p, (uint64_t)&__p);
        std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        ++v8;
      }
    }
    if (*(void *)(v7 + 8) - *(void *)v7 != 8 || **(void **)v7)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v53, "BindEventsForOpsParallel");
      std::string::basic_string[abi:ne180100]<0>(&__p, "First operation must have and only have 0 (no event) as dependent event id.");
      E5RT::Status::Status(&v50, 2, &__p);
      E5RT::E5RTError::E5RTError(exception, v53, &v50);
    }
LABEL_44:
    v59[0] = 0;
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
    if (!*(unsigned char *)(v26 + 8)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    unint64_t v27 = *(void *)v26;
    v59[0] = v27;
    if (v5 < ((v4[1] - *v4) >> 4) - 1)
    {
      if (!*((void *)&v56 + 1)) {
        goto LABEL_66;
      }
      uint8x8_t v28 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v56 + 8));
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v29 = v27;
        if (v27 >= *((void *)&v56 + 1)) {
          unint64_t v29 = v27 % *((void *)&v56 + 1);
        }
      }
      else
      {
        unint64_t v29 = (*((void *)&v56 + 1) - 1) & v27;
      }
      unint64_t v30 = *(void **)(v56 + 8 * v29);
      if (!v30 || (int v31 = (void *)*v30) == 0)
      {
LABEL_66:
        std::to_string(&__p, v27);
        unint64_t v34 = std::string::insert(&__p, 0, "Compute-Unit-Parallel event:");
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v54[0] = (void *)v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)unint64_t v53 = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        E5RT::AsyncEvent::CreateEvent((uint64_t)v53, 0);
      }
      if (v28.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v33 = v31[1];
          if (v33 == v27)
          {
            if (v31[2] == v27) {
              goto LABEL_67;
            }
          }
          else if ((v33 & (*((void *)&v56 + 1) - 1)) != v29)
          {
            goto LABEL_66;
          }
          int v31 = (void *)*v31;
          if (!v31) {
            goto LABEL_66;
          }
        }
      }
      while (1)
      {
        unint64_t v32 = v31[1];
        if (v32 == v27)
        {
          if (v31[2] == v27)
          {
LABEL_67:
            v53[0] = v59;
            uint64_t v36 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v56, v59, (uint64_t)&std::piecewise_construct, (void **)v53);
            unint64_t v37 = (std::__shared_weak_count *)v36[4];
            uint64_t v48 = v36[3];
            size_t v49 = v37;
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v47 + 64))(v47, &v48, 1);
            int v38 = v49;
            if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
            goto LABEL_4;
          }
        }
        else
        {
          if (v32 >= *((void *)&v56 + 1)) {
            v32 %= *((void *)&v56 + 1);
          }
          if (v32 != v29) {
            goto LABEL_66;
          }
        }
        int v31 = (void *)*v31;
        if (!v31) {
          goto LABEL_66;
        }
      }
    }
    if (v27)
    {
      uint64_t v44 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v53, "BindEventsForOpsParallel");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Last operation must have 0 (no event) as completion event id.");
      E5RT::Status::Status(&v50, 2, &__p);
      E5RT::E5RTError::E5RTError(v44, v53, &v50);
    }
LABEL_4:
    ++v5;
    uint64_t v3 = *v4;
  }
  while (v5 < (v4[1] - *v4) >> 4);
  unint64_t v39 = (void *)v57;
  while (v39)
  {
    uint64_t v40 = v39;
    unint64_t v39 = (void *)*v39;
    size_t v41 = (std::__shared_weak_count *)v40[4];
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    operator delete(v40);
  }
LABEL_78:
  int v42 = (void *)v56;
  *(void *)&long long v56 = 0;
  if (v42) {
    operator delete(v42);
  }
}

void sub_1923461A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  size_t v41 = a40;
  while (v41)
  {
    int v42 = v41;
    size_t v41 = (void *)*v41;
    size_t v43 = (std::__shared_weak_count *)v42[4];
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    operator delete(v42);
  }
  if (a38) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1923463A4(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(*a3);
  if (v6)
  {
    uint64_t v7 = v6;
    E5RT::TensorDescriptor::TryGetDefaultTensorShape((uint64_t)v6, &v15);
    unint64_t v8 = v15;
    if (v15)
    {
      if (*v15 != v15[1])
      {
        uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v7);
        size_t v10 = (unsigned char *)v8[1] - (unsigned char *)*v8;
        if (v10 != *(void *)(TensorShape + 8) - *(void *)TensorShape
          || memcmp(*v8, *(const void **)TensorShape, v10))
        {
          **(unsigned char **)a1 = 1;
          int v11 = (int)v15;
          uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v7);
          E5RT::TensorDescriptor::CreateTensorDesc(v11, TensorDataTypeRef);
        }
      }
    }
    uint64_t v13 = v16;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<E5RT::OperandDescriptor const>&>(*(void *)(a1 + 8), a2, a2, a3);
}

void sub_19234657C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3)
  {
    Espresso::AOT::Builder::BuildTensorOperand();
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::ReshapeOperationInternal(uint64_t a1, uint64_t a2)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v105, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v102, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(v97, 2, &v102);
    E5RT::E5RTError::E5RTError(exception, &v105, v97);
  }
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t v5 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t v6 = InputPorts + 2;
  while (1)
  {
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      break;
    }
    E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v6[5], &v105);
    long long v7 = v105;
    if (*((void *)&v105 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v105 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v7 + 1) + 16))(*((void *)&v7 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
    }
    if ((void)v7)
    {
      long long v85 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v105, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(&v102, "Operation cannot be reshaped while memory objects are bound to I/O ports.");
      E5RT::Status::Status(v97, 2, &v102);
      E5RT::E5RTError::E5RTError(v85, &v105, v97);
    }
  }
  uint64_t v8 = OutputPorts + 16;
  while (1)
  {
    uint64_t v8 = *(void *)v8;
    if (!v8) {
      break;
    }
    E5RT::IOPort::GetMemoryObject(*(E5RT::IOPort **)(v8 + 40), &v105);
    long long v9 = v105;
    if (*((void *)&v105 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v105 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v9 + 1) + 16))(*((void *)&v9 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
    }
    if ((void)v9)
    {
      uint64_t v86 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v105, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(&v102, "Operation cannot be reshaped while memory objects are bound to I/O ports.");
      E5RT::Status::Status(v97, 2, &v102);
      E5RT::E5RTError::E5RTError(v86, &v105, v97);
    }
  }
  uint64_t v10 = v5 + 16;
  while (1)
  {
    uint64_t v10 = *(void *)v10;
    if (!v10) {
      break;
    }
    E5RT::IOPort::GetMemoryObject(*(E5RT::IOPort **)(v10 + 40), &v105);
    long long v11 = v105;
    if (*((void *)&v105 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v105 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v11 + 1) + 16))(*((void *)&v11 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v11 + 1));
    }
    if ((void)v11)
    {
      unint64_t v87 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v105, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(&v102, "Operation cannot be reshaped while memory objects are bound to I/O ports.");
      E5RT::Status::Status(v97, 2, &v102);
      E5RT::E5RTError::E5RTError(v87, &v105, v97);
    }
  }
  E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateUserInputsToReshape(a1, a2);
  long long v105 = 0u;
  long long v106 = 0u;
  int v107 = 1065353216;
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    *(void *)&long long v102 = i + 2;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v105, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, (long long **)&v102);
    uint64_t v15 = i[5];
    uint64_t v14 = i[6];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (std::__shared_weak_count *)v13[6];
    v13[5] = v15;
    v13[6] = v14;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  uint64_t v89 = (void *)v5;
  long long v102 = 0u;
  long long v103 = 0u;
  int v104 = 1065353216;
  for (unint64_t j = *(uint64_t ***)(a1 + 24); j; unint64_t j = (uint64_t **)*j)
  {
    E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)j[5], v97);
    if (!v97[0]) {
      goto LABEL_37;
    }
    *(void *)char v96 = j + 2;
    long long v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v102, (uint64_t)(j + 2), (uint64_t)&std::piecewise_construct, (long long **)v96);
    long long v19 = *(_OWORD *)v97;
    v97[0] = 0;
    v97[1] = 0;
    std::string::size_type v20 = (std::__shared_weak_count *)v18[6];
    *(_OWORD *)(v18 + 5) = v19;
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v21 = (uint64_t)j[5];
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    E5RT::IOPort::BindMemoryObject(v21, (uint64_t)&v100);
    BOOL v22 = v101;
    if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      unint64_t v23 = (std::__shared_weak_count *)v97[1];
      if (v97[1])
      {
LABEL_38:
        if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    else
    {
LABEL_37:
      unint64_t v23 = (std::__shared_weak_count *)v97[1];
      if (v97[1]) {
        goto LABEL_38;
      }
    }
  }
  *(_OWORD *)std::__fs::filesystem::path v97 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v99 = 1065353216;
  unint64_t v24 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 48);
  char v25 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 56);
  if (v24 != v25)
  {
    while (1)
    {
      if (__p[1])
      {
        uint64_t v26 = (void **)__p[0];
        if (__p[0])
        {
          do
          {
            while (1)
            {
              unint64_t v27 = (void **)*v26;
              uint8x8_t v28 = (std::__shared_weak_count *)v26[6];
              if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
              if (*((char *)v26 + 39) < 0) {
                break;
              }
              operator delete(v26);
              uint64_t v26 = v27;
              if (!v27) {
                goto LABEL_54;
              }
            }
            operator delete(v26[2]);
            operator delete(v26);
            uint64_t v26 = v27;
          }
          while (v27);
        }
LABEL_54:
        __p[0] = 0;
        unint64_t v29 = (char *)v97[1];
        if (v97[1])
        {
          unint64_t v30 = 0;
          do
            *((void *)v97[0] + (void)v30++) = 0;
          while (v29 != v30);
        }
        __p[1] = 0;
      }
      for (k = *(void **)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*v24) + 16); k; k = (void *)*k)
      {
        unint64_t v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(&v105, (uint64_t)(k + 2));
        if (!v34)
        {
          unint64_t v82 = __cxa_allocate_exception(0x18uLL);
          *(void *)char v96 = operator new(0x20uLL);
          *(_OWORD *)&v96[8] = xmmword_192DAA350;
          strcpy(*(char **)v96, "ReshapeOperationInternal");
          long long v93 = (char *)operator new(0x38uLL);
          long long v94 = xmmword_192DA90D0;
          strcpy(v93, "Reshaping error. Unable to find input tensor's shape.");
          E5RT::Status::Status(v95, 11, &v93);
          E5RT::E5RTError::E5RTError(v82, v96, v95);
        }
        *(void *)char v96 = k + 2;
        long long v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v97, (uint64_t)(k + 2), (uint64_t)&std::piecewise_construct, (long long **)v96);
        uint64_t v37 = v34[5];
        uint64_t v36 = v34[6];
        if (v36) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
        }
        int v38 = (std::__shared_weak_count *)v35[6];
        v35[5] = v37;
        v35[6] = v36;
        if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      for (m = *(void **)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*v24) + 16); m; m = (void *)*m)
      {
        unint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(&v105, (uint64_t)(m + 2));
        if (!v39)
        {
          unint64_t v83 = __cxa_allocate_exception(0x18uLL);
          *(void *)char v96 = operator new(0x20uLL);
          *(_OWORD *)&v96[8] = xmmword_192DAA350;
          strcpy(*(char **)v96, "ReshapeOperationInternal");
          long long v93 = (char *)operator new(0x38uLL);
          long long v94 = xmmword_192DA90D0;
          strcpy(v93, "Reshaping error. Unable to find inout tensor's shape.");
          E5RT::Status::Status(v95, 11, &v93);
          E5RT::E5RTError::E5RTError(v83, v96, v95);
        }
        *(void *)char v96 = m + 2;
        uint64_t v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v97, (uint64_t)(m + 2), (uint64_t)&std::piecewise_construct, (long long **)v96);
        uint64_t v42 = v39[5];
        uint64_t v41 = v39[6];
        if (v41) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
        }
        size_t v43 = (std::__shared_weak_count *)v40[6];
        v40[5] = v42;
        v40[6] = v41;
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      (*(void (**)(E5RT::ExecutionStreamOperationInternal *, void **))(*(void *)*v24 + 120))(*v24, v97);
      uint64_t v33 = *(uint64_t **)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*v24) + 16);
      if (v33) {
        break;
      }
LABEL_44:
      v24 += 2;
      if (v24 == v25) {
        goto LABEL_85;
      }
    }
    while (1)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>(&v105, (uint64_t)(v33 + 2)))
      {
        unint64_t v84 = __cxa_allocate_exception(0x18uLL);
        *(void *)char v96 = operator new(0x20uLL);
        *(_OWORD *)&v96[8] = xmmword_192DAA350;
        strcpy(*(char **)v96, "ReshapeOperationInternal");
        long long v93 = (char *)operator new(0x40uLL);
        long long v94 = xmmword_192DB16B0;
        strcpy(v93, "Reshaping error. A single operand cannot have two new shapes.");
        E5RT::Status::Status(v95, 11, &v93);
        E5RT::E5RTError::E5RTError(v84, v96, v95);
      }
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v33[5], v96);
      long long v93 = (char *)(v33 + 2);
      uint64_t v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v105, (uint64_t)(v33 + 2), (uint64_t)&std::piecewise_construct, (long long **)&v93);
      long long v45 = *(_OWORD *)v96;
      *(_OWORD *)char v96 = 0uLL;
      int v46 = (std::__shared_weak_count *)v44[6];
      *(_OWORD *)(v44 + 5) = v45;
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        uint64_t v47 = *(std::__shared_weak_count **)&v96[8];
        if (*(void *)&v96[8])
        {
LABEL_81:
          if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      else
      {
        uint64_t v47 = *(std::__shared_weak_count **)&v96[8];
        if (*(void *)&v96[8]) {
          goto LABEL_81;
        }
      }
      uint64_t v33 = (uint64_t *)*v33;
      if (!v33) {
        goto LABEL_44;
      }
    }
  }
LABEL_85:
  uint64_t v48 = *(void **)(a1 + 24);
  size_t v49 = v89;
  std::string v50 = (void *)OutputPorts;
  if (v48)
  {
    while (1)
    {
      uint64_t v51 = v48[5];
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v48 + 2))|| std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v50, (uint64_t)(v48 + 2))|| std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v49, (uint64_t)(v48 + 2))|| (E5RT::IOPort::HasKnownShape((E5RT::IOPortImpl **)v48[5]) & 1) == 0)
      {
        goto LABEL_87;
      }
      PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v48[5]);
      unint64_t v53 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
      int v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>(&v102, (uint64_t)(v48 + 2));
      if (!v54) {
        goto LABEL_131;
      }
      unint64_t Size = E5RT::TensorDescriptor::GetSize(v53);
      long long v56 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)v54[5]);
      unint64_t v57 = E5RT::BufferObject::GetSize(v56);
      if (Size <= v57)
      {
        uint64_t v58 = v54[6];
        uint64_t v91 = v54[5];
        uint64_t v92 = (std::__shared_weak_count *)v58;
        if (v58) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
        }
        E5RT::IOPortPriv::BindMemoryObject(v51, (uint64_t)&v91, 1);
        __n128 v59 = v92;
        if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      unint64_t v60 = *((void *)&v102 + 1);
      uint64_t v61 = *v54;
      unint64_t v62 = v54[1];
      uint8x8_t v63 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v102 + 8));
      v63.i16[0] = vaddlv_u8(v63);
      if (v63.u32[0] > 1uLL)
      {
        if (v62 >= *((void *)&v102 + 1)) {
          v62 %= *((void *)&v102 + 1);
        }
      }
      else
      {
        v62 &= *((void *)&v102 + 1) - 1;
      }
      uint64_t v64 = *(uint64_t **)(v102 + 8 * v62);
      do
      {
        __n128 v65 = v64;
        uint64_t v64 = (uint64_t *)*v64;
      }
      while (v64 != v54);
      if (v65 != (uint64_t *)&v103)
      {
        unint64_t v66 = v65[1];
        if (v63.u32[0] > 1uLL)
        {
          if (v66 >= *((void *)&v102 + 1)) {
            v66 %= *((void *)&v102 + 1);
          }
        }
        else
        {
          v66 &= *((void *)&v102 + 1) - 1;
        }
        if (v66 == v62) {
          goto LABEL_118;
        }
      }
      if (!v61) {
        break;
      }
      unint64_t v67 = *(void *)(v61 + 8);
      if (v63.u32[0] > 1uLL)
      {
        if (v67 >= *((void *)&v102 + 1)) {
          v67 %= *((void *)&v102 + 1);
        }
      }
      else
      {
        v67 &= *((void *)&v102 + 1) - 1;
      }
      if (v67 != v62) {
        break;
      }
LABEL_119:
      unint64_t v68 = *(void *)(v61 + 8);
      if (v63.u32[0] > 1uLL)
      {
        if (v68 >= v60) {
          v68 %= v60;
        }
      }
      else
      {
        v68 &= v60 - 1;
      }
      if (v68 != v62)
      {
        *(void *)(v102 + 8 * v68) = v65;
        uint64_t v61 = *v54;
      }
LABEL_125:
      *__n128 v65 = v61;
      uint64_t *v54 = 0;
      --*((void *)&v103 + 1);
      uint64_t v69 = (std::__shared_weak_count *)v54[6];
      if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
      if (*((char *)v54 + 39) < 0) {
        operator delete((void *)v54[2]);
      }
      operator delete(v54);
      size_t v49 = v89;
      std::string v50 = (void *)OutputPorts;
      if (Size > v57) {
LABEL_131:
      }
        E5RT::TensorDescriptor::AllocateMemory((uint64_t)v53, 0, 1uLL);
LABEL_87:
      uint64_t v48 = (void *)*v48;
      if (!v48) {
        goto LABEL_132;
      }
    }
    *(void *)(v102 + 8 * v62) = 0;
    uint64_t v61 = *v54;
LABEL_118:
    if (!v61) {
      goto LABEL_125;
    }
    goto LABEL_119;
  }
LABEL_132:
  *(void *)char v96 = &v105;
  sub_1923484EC((uint64_t *)v96, InputPorts);
  sub_1923484EC((uint64_t *)v96, v50);
  sub_1923484EC((uint64_t *)v96, v49);
  uint64_t v70 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        uint64_t v71 = (void **)*v70;
        BOOL v72 = (std::__shared_weak_count *)v70[6];
        if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
        if (*((char *)v70 + 39) < 0) {
          break;
        }
        operator delete(v70);
        uint64_t v70 = v71;
        if (!v71) {
          goto LABEL_140;
        }
      }
      operator delete(v70[2]);
      operator delete(v70);
      uint64_t v70 = v71;
    }
    while (v71);
  }
LABEL_140:
  v73 = v97[0];
  v97[0] = 0;
  if (v73) {
    operator delete(v73);
  }
  uint64_t v74 = (void **)v103;
  if ((void)v103)
  {
    do
    {
      while (1)
      {
        uint64_t v75 = (void **)*v74;
        unint64_t v76 = (std::__shared_weak_count *)v74[6];
        if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
        if (*((char *)v74 + 39) < 0) {
          break;
        }
        operator delete(v74);
        uint64_t v74 = v75;
        if (!v75) {
          goto LABEL_150;
        }
      }
      operator delete(v74[2]);
      operator delete(v74);
      uint64_t v74 = v75;
    }
    while (v75);
  }
LABEL_150:
  unint64_t v77 = (void *)v102;
  *(void *)&long long v102 = 0;
  if (v77) {
    operator delete(v77);
  }
  uint64_t v78 = (void **)v106;
  if ((void)v106)
  {
    do
    {
      while (1)
      {
        BOOL v79 = (void **)*v78;
        uint64_t v80 = (std::__shared_weak_count *)v78[6];
        if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
        if (*((char *)v78 + 39) < 0) {
          break;
        }
        operator delete(v78);
        uint64_t v78 = v79;
        if (!v79) {
          goto LABEL_160;
        }
      }
      operator delete(v78[2]);
      operator delete(v78);
      uint64_t v78 = v79;
    }
    while (v79);
  }
LABEL_160:
  unint64_t v81 = (void *)v105;
  *(void *)&long long v105 = 0;
  if (v81) {
    operator delete(v81);
  }
}

void sub_1923476F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,void **__p,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a17) {
    sub_192343C0C();
  }
  unint64_t v39 = __p;
  if (__p)
  {
    do
    {
      while (1)
      {
        uint64_t v40 = (void **)*v39;
        uint64_t v41 = (std::__shared_weak_count *)v39[6];
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        if (*((char *)v39 + 39) < 0) {
          break;
        }
        operator delete(v39);
        unint64_t v39 = v40;
        if (!v40) {
          goto LABEL_11;
        }
      }
      operator delete(v39[2]);
      operator delete(v39);
      unint64_t v39 = v40;
    }
    while (v40);
  }
LABEL_11:
  if (a31) {
    operator delete(a31);
  }
  uint64_t v42 = *(void ***)(v37 - 160);
  if (v42)
  {
    do
    {
      while (1)
      {
        size_t v43 = (void **)*v42;
        uint64_t v44 = (std::__shared_weak_count *)v42[6];
        if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
        if (*((char *)v42 + 39) < 0) {
          break;
        }
        operator delete(v42);
        uint64_t v42 = v43;
        if (!v43) {
          goto LABEL_21;
        }
      }
      operator delete(v42[2]);
      operator delete(v42);
      uint64_t v42 = v43;
    }
    while (v43);
  }
LABEL_21:
  long long v45 = *(void **)(v37 - 176);
  *(void *)(v37 - 176) = 0;
  if (v45) {
    operator delete(v45);
  }
  int v46 = *(void ***)(v37 - 112);
  if (v46)
  {
    do
    {
      while (1)
      {
        uint64_t v47 = (void **)*v46;
        uint64_t v48 = (std::__shared_weak_count *)v46[6];
        if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        if (*((char *)v46 + 39) < 0) {
          break;
        }
        operator delete(v46);
        int v46 = v47;
        if (!v47) {
          goto LABEL_31;
        }
      }
      operator delete(v46[2]);
      operator delete(v46);
      int v46 = v47;
    }
    while (v47);
  }
LABEL_31:
  size_t v49 = *(void **)(v37 - 128);
  *(void *)(v37 - 128) = 0;
  if (v49) {
    operator delete(v49);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::unordered_set(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_192347BA4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(v3);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateUserInputsToReshape(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72));
  uint64_t v5 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72));
  if (*(void *)(a2 + 24) != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3)
                             - 0x5555555555555555 * ((uint64_t)(v5[1] - *v5) >> 3))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v49, "ValidateUserInputsToReshape");
    std::string::basic_string[abi:ne180100]<0>(&v46, "Require new shapes for all inputs/inouts to reshape.");
    E5RT::Status::Status(&v44, 1, &v46);
    E5RT::E5RTError::E5RTError(exception, &v49, &v44);
  }
  uint64_t v6 = *(uint64_t ***)(a2 + 16);
  if (v6)
  {
    long long v7 = v5;
    uint64_t v8 = v5 + 3;
    do
    {
      long long v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v4 + 3, (uint64_t)(v6 + 2));
      if (v9)
      {
        unint64_t v10 = v9[5];
        long long v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v8, (uint64_t)(v6 + 2));
        if (v11) {
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
        long long v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v8, (uint64_t)(v6 + 2));
        if (v11)
        {
LABEL_7:
          unint64_t v12 = v11[5];
          uint64_t v13 = *v4;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
          BOOL v15 = v10 >= v14;
          if (v10 == v14) {
            goto LABEL_8;
          }
          goto LABEL_13;
        }
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3);
      uint64_t v13 = *v4;
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
      BOOL v15 = v10 >= v19;
      if (v10 == v19)
      {
LABEL_8:
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 3);
        if (v12 == v16)
        {
          uint64_t v42 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v49, "operator()");
          std::string::basic_string[abi:ne180100]<0>(&v46, "Unknown operand name given for reshaping.");
          E5RT::Status::Status(v48, 2, &v46);
          E5RT::E5RTError::E5RTError(v42, &v49, v48);
        }
        if (v12 >= v16)
        {
LABEL_36:
          size_t v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::out_of_range::out_of_range[abi:ne180100](v43, "iterator out of range");
          __cxa_throw(v43, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
        }
        uint64_t v17 = *v7 + 24 * v12;
        long long v18 = v7;
        goto LABEL_15;
      }
LABEL_13:
      if (v15) {
        goto LABEL_36;
      }
      uint64_t v17 = v13 + 24 * v10;
      long long v18 = v4;
LABEL_15:
      std::string::size_type v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v18 + 8, v17);
      (*(void (**)(E5RT::OperandDescriptor **__return_ptr))(*(void *)v20[5] + 16))(&v44);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v44))
      {
        uint64_t v37 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v49, "ValidateUserInputsToReshape");
        std::string::basic_string[abi:ne180100]<0>(&v46, "Reshaping is not supported for surface descriptors.");
        E5RT::Status::Status(v48, 2, &v46);
        E5RT::E5RTError::E5RTError(v37, &v49, v48);
      }
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v6[5]))
      {
        int v38 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v49, "ValidateUserInputsToReshape");
        std::string::basic_string[abi:ne180100]<0>(&v46, "Cannot reshape a tensor into a surface.");
        E5RT::Status::Status(v48, 2, &v46);
        E5RT::E5RTError::E5RTError(v38, &v49, v48);
      }
      uint64_t v21 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v44);
      BOOL v22 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v6[5]);
      unint64_t Rank = E5RT::TensorDescriptor::GetRank(v21);
      if (Rank != E5RT::TensorDescriptor::GetRank(v22))
      {
        unint64_t v39 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v49, "ValidateUserInputsToReshape");
        std::string::basic_string[abi:ne180100]<0>(&v46, "Cannot reshape tensor to a different rank.");
        E5RT::Status::Status(v48, 2, &v46);
        E5RT::E5RTError::E5RTError(v39, &v49, v48);
      }
      uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v21);
      uint64_t v25 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v22);
      if (E5RT::operator!=(TensorDataTypeRef, v25))
      {
        uint64_t v40 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v49, "ValidateUserInputsToReshape");
        std::string::basic_string[abi:ne180100]<0>(&v46, "Cannot reshape tensor to a different TensorDataType (component pack or component data type) than in E5.");
        E5RT::Status::Status(v48, 2, &v46);
        E5RT::E5RTError::E5RTError(v40, &v49, v48);
      }
      uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v21);
      unint64_t v27 = (unint64_t **)E5RT::TensorDescriptor::GetTensorShape(v22);
      uint8x8_t v28 = *(unint64_t **)TensorShape;
      uint64_t v29 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
      if (v29)
      {
        unint64_t v30 = v29 >> 3;
        int v31 = *v27;
        if (v30 <= 1) {
          unint64_t v30 = 1;
        }
        do
        {
          unint64_t v33 = *v28++;
          unint64_t v32 = v33;
          unint64_t v34 = *v31++;
          if (v32 < v34)
          {
            uint64_t v36 = __cxa_allocate_exception(0x18uLL);
            size_t v49 = (char *)operator new(0x20uLL);
            long long v50 = xmmword_192DB16C0;
            strcpy(v49, "ValidateUserInputsToReshape");
            int v46 = (char *)operator new(0x50uLL);
            long long v47 = xmmword_192DAA8F0;
            strcpy(v46, "Cannot reshape a tensor to a dimension of length longer than original in E5.");
            E5RT::Status::Status(v48, 2, &v46);
            E5RT::E5RTError::E5RTError(v36, &v49, v48);
          }
          --v30;
        }
        while (v30);
      }
      long long v35 = v45;
      if (v45)
      {
        if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      uint64_t v6 = (uint64_t **)*v6;
    }
    while (v6);
  }
}

void sub_1923482A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v25)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

void sub_1923484EC(uint64_t *a1, void *a2)
{
  for (uint64_t i = (uint64_t *)a2[2]; i; uint64_t i = (uint64_t *)*i)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::find<std::string>((void *)*a1, (uint64_t)(i + 2)))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v17, "operator()");
      std::string::basic_string[abi:ne180100]<0>(v15, "Reshaping error. Unable to find new shape for op's input.");
      E5RT::Status::Status(v16, 11, v15);
      E5RT::E5RTError::E5RTError(exception, v17, v16);
    }
    uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, (uint64_t)(i + 2));
    if (!v5) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v6 = (const void *)v5[5];
    if (v6) {
    else
    }
      long long v7 = 0;
    uint64_t v8 = *a1;
    v17[0] = (long long *)(i + 2);
    long long v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, v17);
    uint64_t v10 = v9[6];
    uint64_t v13 = v9[5];
    unint64_t v14 = (std::__shared_weak_count *)v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v7, &v13);
    long long v11 = v14;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1923486E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1923486F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if (v25)
    {
LABEL_8:
      __cxa_free_exception(v24);
      _Unwind_Resume(a1);
    }
  }
  else if (v25)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::Impl::ResetConfigOptions@<X0>(E5RT::Ops::PreCompiledComputeOperation::Impl *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)((char *)this + 128);
  if (*((void *)this + 17) == *((void *)this + 16))
  {
    unint64_t v5 = (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 4;
    if (v5) {
      std::vector<std::unique_ptr<E5RT::ExecutionStreamOperationConfigOptions>>::__append((void **)this + 16, v5);
    }
  }
  uint64_t v6 = *((void *)this + 6);
  if (*((void *)this + 7) != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v6 + v7) + 128))(&v14);
      uint64_t v9 = *v4;
      uint64_t v10 = v14;
      uint64_t v14 = 0;
      uint64_t v11 = *(void *)(v9 + 8 * v8);
      *(void *)(v9 + 8 * v8) = v10;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      uint64_t v12 = v14;
      uint64_t v14 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      ++v8;
      uint64_t v6 = *((void *)this + 6);
      v7 += 16;
    }
    while (v8 < (*((void *)this + 7) - v6) >> 4);
  }
  return E5RT::ExecutionStreamOperationInternal::ResetConfigOptions(*(void *)this, a2);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::Impl::SetConfigOptions(E5RT::Ops::PreCompiledComputeOperation::Impl *a1, uint64_t *a2)
{
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v23, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v21, "ConfigOptions provided is null.");
    E5RT::Status::Status(v22, 1, v21);
    E5RT::E5RTError::E5RTError(exception, v23, v22);
  }
  E5RT::Ops::PreCompiledComputeOperation::Impl::ResetConfigOptions(a1, &v20);
  uint64_t v4 = v20;
  uint64_t v20 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)a1 + 6);
  if (*((void *)a1 + 7) != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((void *)a1 + 16);
      uint64_t v9 = *(void *)(v8 + 8 * v7);
      if (!v9) {
        E5RT::ExecutionStreamOperationConfigOptions::Create(0);
      }
      E5RT::ExecutionStreamOperationConfigOptions::operator=(v9, *a2);
      uint64_t v10 = *(void *)(v5 + v6);
      uint64_t v11 = *(void *)(v8 + 8 * v7);
      *(void *)(v8 + 8 * v7) = 0;
      uint64_t v19 = v11;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 136))(v10, &v19);
      uint64_t v12 = v19;
      uint64_t v19 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      uint64_t v13 = *(void *)(v8 + 8 * v7);
      *(void *)(v8 + 8 * v7) = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      ++v7;
      uint64_t v5 = *((void *)a1 + 6);
      v6 += 16;
    }
    while (v7 < (*((void *)a1 + 7) - v5) >> 4);
  }
  uint64_t v14 = *(void *)a1;
  uint64_t v15 = *a2;
  *a2 = 0;
  uint64_t v18 = v15;
  E5RT::ExecutionStreamOperationInternal::SetConfigOptions(v14, &v18);
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_192348B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a9)
  {
    sub_1922F3308();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192348BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v21);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::BindDependentAsyncEventsImpl(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t DependentAsyncEvents = E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*this);
  if (*(void *)(DependentAsyncEvents + 24))
  {
    std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::unordered_set((uint64_t)v11, DependentAsyncEvents);
    (*(void (**)(E5RT::ExecutionStreamOperationInternal *, void **))(*(void *)this[13] + 48))(this[13], v11);
    uint64_t v3 = __p[0];
    if (__p[0])
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (void *)*v3;
        uint64_t v5 = (std::__shared_weak_count *)v4[3];
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        operator delete(v4);
      }
      while (v3);
    }
  }
  else
  {
    uint64_t v6 = this[13];
    *(_OWORD *)uint64_t v11 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v13 = 1065353216;
    (*(void (**)(E5RT::ExecutionStreamOperationInternal *, void **))(*(void *)v6 + 48))(v6, v11);
    unint64_t v7 = __p[0];
    if (__p[0])
    {
      do
      {
        uint64_t v8 = v7;
        unint64_t v7 = (void *)*v7;
        uint64_t v9 = (std::__shared_weak_count *)v8[3];
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        operator delete(v8);
      }
      while (v7);
    }
  }
  uint64_t v10 = v11[0];
  v11[0] = 0;
  if (v10) {
    operator delete(v10);
  }
}

void sub_192348DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_192348DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(E5RT::Ops::PreCompiledComputeOperation::Impl *this)
{
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*(void *)this, &v11);
  uint64_t v2 = *((void *)this + 14);
  if (v11)
  {
    uint64_t v9 = v11;
    uint64_t v10 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t HasInternalCompletionEventBound = E5RT::ExecutionStreamOperationInternal::HasInternalCompletionEventBound(*(E5RT::ExecutionStreamOperationInternal **)this);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v2 + 64))(v2, &v9, HasInternalCompletionEventBound);
    uint64_t v4 = v10;
    if (!v10) {
      goto LABEL_11;
    }
LABEL_9:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    goto LABEL_11;
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 12);
  uint64_t v7 = *((void *)this + 11);
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v2 + 64))(v2, &v7, 1);
  uint64_t v4 = v8;
  if (v8) {
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v6 = v12;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_192348F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_192348F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::SerializeInferenceFrameDataPerSegment(uint64_t a1, uint64_t a2, const void **a3, int a4)
{
  uint64_t v4 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 48);
  int v25 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 56);
  if (v4 != v25)
  {
    while (1)
    {
      uint64_t OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(*v4);
      if (*(char *)(OpName + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)OpName, *(void *)(OpName + 8));
      }
      else
      {
        long long v8 = *(_OWORD *)OpName;
        v31.__r_.__value_.__r.__words[2] = *(void *)(OpName + 16);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v8;
      }
      int v9 = *((char *)a3 + 23);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v10 = (size_t)a3[1];
      }
      int v11 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v31.__r_.__value_.__l.__size_;
      }
      unint64_t v13 = size + v10;
      if (size + v10 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v13 <= 0x16) {
        break;
      }
      uint64_t v23 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17) {
        uint64_t v23 = v13 | 7;
      }
      uint64_t v24 = v23 + 1;
      p_dst = (std::string *)operator new(v23 + 1);
      __dst.__r_.__value_.__l.__size_ = size + v10;
      __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (v10) {
        goto LABEL_16;
      }
LABEL_20:
      unint64_t v16 = (char *)p_dst + v10;
      if (size)
      {
        if (v11 >= 0) {
          uint64_t v17 = &v31;
        }
        else {
          uint64_t v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        memmove(v16, v17, size);
      }
      v16[size] = 0;
      uint64_t v18 = std::string::append(&__dst, "-");
      uint64_t v19 = (std::string::value_type *)v18->__r_.__value_.__r.__words[0];
      std::string::size_type v20 = v18->__r_.__value_.__l.__size_;
      v30[0] = v18->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v30 + 3) = *(_DWORD *)((char *)&v18->__r_.__value_.__r.__words[2] + 3);
      int v21 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        BOOL v22 = *v4;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_27:
          std::string v28 = *(std::string *)a2;
          goto LABEL_34;
        }
      }
      else
      {
        BOOL v22 = *v4;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_27;
        }
      }
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_34:
      if (v21 < 0)
      {
        std::string::__init_copy_ctor_external(&v27, v19, v20);
      }
      else
      {
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        v27.__r_.__value_.__l.__size_ = v20;
        LODWORD(v27.__r_.__value_.__r.__words[2]) = v30[0];
        *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v30 + 3);
        *((unsigned char *)&v27.__r_.__value_.__s + 23) = v21;
      }
      E5RT::ExecutionStreamOperationInternal::SerializeInferenceFrameData((uint64_t)v22, (const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)&v27, a4);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v27.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_39:
          if ((v21 & 0x80000000) == 0) {
            goto LABEL_40;
          }
          goto LABEL_44;
        }
      }
      else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_39;
      }
      operator delete(v28.__r_.__value_.__l.__data_);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_40:
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_45;
        }
        goto LABEL_3;
      }
LABEL_44:
      operator delete(v19);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
LABEL_45:
      }
        operator delete(v31.__r_.__value_.__l.__data_);
LABEL_3:
      v4 += 2;
      if (v4 == v25) {
        return;
      }
    }
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + v10;
    if (!v10) {
      goto LABEL_20;
    }
LABEL_16:
    if (v9 >= 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = *a3;
    }
    memmove(p_dst, v15, v10);
    goto LABEL_20;
  }
}

void sub_19234923C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((v38 & 0x80000000) == 0)
  {
LABEL_6:
    if (a37 < 0) {
      operator delete(a32);
    }
    _Unwind_Resume(exception_object);
  }
  operator delete(v37);
  goto LABEL_6;
}

void sub_1923492D4(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v10 = 4;
  strcpy(__p, "e5rt");
  uint64_t v2 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v10 < 0)
  {
    operator delete(*(void **)__p);
    os_signpost_id_t v3 = *(void *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_12;
    }
  }
  else
  {
    os_signpost_id_t v3 = *(void *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_12;
    }
  }
  if (os_signpost_enabled(v2))
  {
    uint64_t v4 = *(uint64_t ***)(a1 + 40);
    if (*((char *)v4 + 23) < 0) {
      uint64_t v4 = (uint64_t **)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *(void *)v5;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v4;
    __int16 v8 = 2080;
    uint64_t v9 = v6;
    _os_signpost_emit_with_name_impl(&dword_1920CB000, v2, OS_SIGNPOST_INTERVAL_END, v3, "PreCompiledOpCreate", "OperationName=%{signpost.description:attribute}s E5Function=%{signpost.description:attribute}s", __p, 0x16u);
  }
LABEL_12:
}

void sub_192349430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

E5RT::Ops::PreCompiledComputeOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::PreCompiledComputeOperation::Impl>>::~propagate_const(E5RT::Ops::PreCompiledComputeOperation::Impl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void E5RT::Ops::PreCompiledComputeOperation::~PreCompiledComputeOperation(E5RT::Ops::PreCompiledComputeOperation *this)
{
  *(void *)this = &unk_1EE3268B0;
  uint64_t v2 = (E5RT::Ops::PreCompiledComputeOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  E5RT::Ops::PreCompiledComputeOperation::Impl *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE3268B0;
  uint64_t v2 = (E5RT::Ops::PreCompiledComputeOperation::Impl *)*((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::GetOpCode(E5RT::Ops::PreCompiledComputeOperation *this)
{
  return 6;
}

void sub_1923495B0(uint64_t a1)
{
  char v5 = 4;
  strcpy((char *)__p, "e5rt");
  uint64_t v2 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v5 < 0)
  {
    operator delete(__p[0]);
    os_signpost_id_t v3 = *(void *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_3;
    }
  }
  else
  {
    os_signpost_id_t v3 = *(void *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_3:

      return;
    }
  }
  if (!os_signpost_enabled(v2)) {
    goto LABEL_3;
  }
  LOWORD(__p[0]) = 0;
  _os_signpost_emit_with_name_impl(&dword_1920CB000, v2, OS_SIGNPOST_INTERVAL_END, v3, "PreCompiledOpPrepareOpForEncode", (const char *)&unk_192F346DB, (uint8_t *)__p, 2u);
}

void sub_192349688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::EncodeOperation(E5RT::Ops::PreCompiledComputeOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  uint64_t v6 = *((void *)this + 37);
  uint64_t v7 = *(void **)(v6 + 48);
  for (uint64_t i = *(void **)(v6 + 56); v7 != i; v7 += 2)
    (*(void (**)(void, const E5RT::ExecutionStreamConfigOptions *, uint64_t))(*(void *)*v7 + 72))(*v7, a2, a3);
  E5RT::ExecutionStreamOperationInternal::EncodeOperation(this, a2, a3);
  return kdebug_trace();
}

void sub_192349794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1923497A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::ResetOperation(E5RT::Ops::PreCompiledComputeOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  uint64_t v2 = *((void *)this + 37);
  uint64_t v3 = *(void *)(v2 + 48);
  for (uint64_t i = *(void *)(v2 + 56); v3 != i; v3 += 16)
    (*(void (**)(void))(**(void **)v3 + 80))();
  E5RT::ExecutionStreamOperationInternal::ResetOperation(this);
  return kdebug_trace();
}

void sub_192349898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1923498AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::ExecuteSync(E5RT::Ops::PreCompiledComputeOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  uint64_t v2 = *((void *)this + 37);
  uint64_t v3 = *(void *)(v2 + 48);
  for (uint64_t i = *(void *)(v2 + 56); v3 != i; v3 += 16)
    (*(void (**)(void))(**(void **)v3 + 104))();
  return kdebug_trace();
}

void sub_19234998C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::ReshapeOperationInternal(uint64_t *a1, uint64_t a2)
{
  return kdebug_trace();
}

void sub_192349A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void E5RT::Ops::PreCompiledComputeOperation::CreateResourceSharingPreCompiledComputeOps(E5RT::PrecompiledComputeOpCreateOptions ***a1@<X0>, void *a2@<X8>)
{
  v166[2] = *MEMORY[0x1E4F143B8];
  v161[23] = 0;
  v161[0] = 0;
  memset(__str, 0, 32);
  *(_DWORD *)&__str[32] = 1065353216;
  v158[1] = 0;
  *(void *)&long long v159 = 0;
  v158[0] = &v158[1];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    std::__tree<std::string>::destroy((uint64_t)v158, 0);
    if ((v161[23] & 0x80000000) == 0) {
      goto LABEL_49;
    }
  }
  else
  {
    do
    {
      LibraryPath = (const std::string *)E5RT::PrecompiledComputeOpCreateOptions::GetLibraryPath(*v2);
      char v5 = LibraryPath;
      if (v161[23] >= 0) {
        size_t v6 = v161[23];
      }
      else {
        size_t v6 = *(void *)&v161[8];
      }
      if (v6)
      {
        int v7 = SHIBYTE(LibraryPath->__r_.__value_.__r.__words[2]);
        if (v7 >= 0) {
          size_t size = HIBYTE(LibraryPath->__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = LibraryPath->__r_.__value_.__l.__size_;
        }
        if (v7 < 0) {
          LibraryPath = (const std::string *)LibraryPath->__r_.__value_.__r.__words[0];
        }
        if (v161[23] >= 0) {
          uint64_t v9 = v161;
        }
        else {
          uint64_t v9 = *(unsigned char **)v161;
        }
        if (v6 >= size) {
          size_t v10 = size;
        }
        else {
          size_t v10 = v6;
        }
        if (memcmp(LibraryPath, v9, v10) || v6 != size)
        {
          std::string::basic_string[abi:ne180100]<0>(v156, "All multipleCreateOptions must originate from the same E5Bundle path.");
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v163, "ValidateCreateOptionsForCreateResourceSharingPreCompiledComputeOps");
          E5RT::Status::Status(&v153, 1, v156);
          E5RT::E5RTError::E5RTError(exception, &v163, &v153);
        }
      }
      std::string::operator=((std::string *)v161, v5);
      ProgramFunction = (E5RT::ProgramFunctionPriv *)E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(*v2);
      uint64_t FunctionName = E5RT::ProgramFunctionPriv::GetFunctionName(ProgramFunction);
      uint64_t v14 = (const void **)FunctionName;
      uint64_t v15 = v158[1];
      if (v158[1])
      {
        int v16 = *(char *)(FunctionName + 23);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(FunctionName + 23);
        }
        else {
          size_t v17 = *(void *)(FunctionName + 8);
        }
        if (v16 >= 0) {
          uint64_t v18 = (const void *)FunctionName;
        }
        else {
          uint64_t v18 = *(const void **)FunctionName;
        }
        do
        {
          int v19 = *((char *)v15 + 55);
          if (v19 >= 0) {
            size_t v20 = *((unsigned __int8 *)v15 + 55);
          }
          else {
            size_t v20 = v15[5];
          }
          if (v19 >= 0) {
            int v21 = v15 + 4;
          }
          else {
            int v21 = (const void *)v15[4];
          }
          if (v20 >= v17) {
            size_t v22 = v17;
          }
          else {
            size_t v22 = v20;
          }
          int v23 = memcmp(v18, v21, v22);
          BOOL v24 = v17 < v20;
          if (v23) {
            BOOL v24 = v23 < 0;
          }
          if (!v24)
          {
            int v25 = memcmp(v21, v18, v22);
            BOOL v26 = v20 < v17;
            if (v25) {
              BOOL v26 = v25 < 0;
            }
            if (!v26)
            {
              std::string::basic_string[abi:ne180100]<0>(v156, "Each createOptions must have a unique E5 function.");
              v138 = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(&v163, "ValidateCreateOptionsForCreateResourceSharingPreCompiledComputeOps");
              E5RT::Status::Status(&v153, 1, v156);
              E5RT::E5RTError::E5RTError(v138, &v163, &v153);
            }
            ++v15;
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v158, v14, (uint64_t)v14);
      v2 += 2;
    }
    while (v2 != v3);
    std::__tree<std::string>::destroy((uint64_t)v158, (char *)v158[1]);
    if ((v161[23] & 0x80000000) == 0) {
      goto LABEL_49;
    }
  }
  operator delete(*(void **)v161);
LABEL_49:
  memset(v161, 0, sizeof(v161));
  int v162 = 1065353216;
  v164 = 0;
  uint64_t v165 = 0;
  std::string::size_type v163 = &v164;
  *(_OWORD *)v158 = 0u;
  long long v159 = 0u;
  int v160 = 1065353216;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::string v28 = *a1;
  size_t v141 = a1[1];
  if (*a1 != v141)
  {
    do
    {
      uint64_t v29 = E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(*v28);
      E5RT::ProgramFunctionPriv::GetE5Function(v29, &v153);
      unint64_t v30 = (void **)(*(uint64_t (**)(void *))(*(void *)v153 + 32))(v153);
      std::string v27 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)**v30 + 16))(**v30);
      unint64_t v32 = (const void **)*v27;
      std::string v31 = (const void **)v27[1];
      while (v32 != v31)
      {
        std::string v27 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)*v32 + 16))();
        if (v27 != 1) {
          goto LABEL_53;
        }
        E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(*v32, &__p);
        unint64_t v33 = (char *)__p;
        if (*((char *)__p + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)__p, *((void *)__p + 1));
          unint64_t v33 = (char *)__p;
          if ((*((char *)__p + 47) & 0x80000000) == 0)
          {
LABEL_58:
            *(_OWORD *)v156 = *(_OWORD *)(v33 + 24);
            *(void *)&v156[16] = *((void *)v33 + 5);
            goto LABEL_61;
          }
        }
        else
        {
          long long v34 = *(_OWORD *)__p;
          *(void *)&__str[16] = *((void *)__p + 2);
          *(_OWORD *)__str = v34;
          if ((*((char *)__p + 47) & 0x80000000) == 0) {
            goto LABEL_58;
          }
        }
        std::string::__init_copy_ctor_external((std::string *)v156, *((const std::string::value_type **)v33 + 3), *((void *)v33 + 4));
LABEL_61:
        uint64_t MutableMILWeightPaths = E5RT::PrecompiledComputeOpCreateOptions::GetMutableMILWeightPaths(*v28);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        uint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v161, (uint64_t)__str, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
        std::string v27 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v36 + 5), (uint64_t)v156, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
        if (v27 + 5 != (uint64_t *)MutableMILWeightPaths)
        {
          *((_DWORD *)v27 + 18) = *(_DWORD *)(MutableMILWeightPaths + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v27 + 5, *(uint64_t **)(MutableMILWeightPaths + 16), 0);
        }
        if (*(void *)(MutableMILWeightPaths + 24))
        {
          uint64_t v37 = v164;
          int v38 = &v164;
          unint64_t v39 = &v164;
          if (v164)
          {
            if (__str[23] >= 0) {
              size_t v40 = __str[23];
            }
            else {
              size_t v40 = *(void *)&__str[8];
            }
            if (__str[23] >= 0) {
              uint64_t v41 = __str;
            }
            else {
              uint64_t v41 = *(unsigned char **)__str;
            }
            while (1)
            {
              while (1)
              {
                int v38 = (char **)v37;
                uint64_t v44 = (char *)*((void *)v37 + 4);
                uint64_t v42 = v37 + 32;
                size_t v43 = v44;
                int v45 = v42[23];
                if (v45 >= 0) {
                  size_t v46 = v42[23];
                }
                else {
                  size_t v46 = *((void *)v42 + 1);
                }
                if (v45 >= 0) {
                  long long v47 = v42;
                }
                else {
                  long long v47 = v43;
                }
                if (v46 >= v40) {
                  size_t v48 = v40;
                }
                else {
                  size_t v48 = v46;
                }
                int v49 = memcmp(v41, v47, v48);
                BOOL v50 = v40 < v46;
                if (v49) {
                  BOOL v50 = v49 < 0;
                }
                if (!v50) {
                  break;
                }
                uint64_t v37 = *v38;
                unint64_t v39 = v38;
                if (!*v38) {
                  goto LABEL_89;
                }
              }
              std::string v27 = (uint64_t *)memcmp(v47, v41, v48);
              BOOL v51 = v46 < v40;
              if (v27) {
                BOOL v51 = (int)v27 < 0;
              }
              if (!v51) {
                break;
              }
              uint64_t v37 = v38[1];
              if (!v37)
              {
                unint64_t v39 = v38 + 1;
                goto LABEL_89;
              }
            }
          }
          else
          {
LABEL_89:
            unint64_t v52 = (char *)operator new(0x38uLL);
            std::string v27 = (uint64_t *)(v52 + 32);
            if ((__str[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v27, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
            }
            else
            {
              *(_OWORD *)std::string v27 = *(_OWORD *)__str;
              *((void *)v52 + 6) = *(void *)&__str[16];
            }
            *(void *)unint64_t v52 = 0;
            *((void *)v52 + 1) = 0;
            *((void *)v52 + 2) = v38;
            *unint64_t v39 = v52;
            if (*v163)
            {
              std::string::size_type v163 = (char **)*v163;
              unint64_t v52 = *v39;
            }
            unint64_t v53 = v164;
            v52[24] = v52 == v164;
            if (v52 != v53)
            {
              do
              {
                uint64_t v54 = *((void *)v52 + 2);
                if (*(unsigned char *)(v54 + 24)) {
                  break;
                }
                int v55 = *(char **)(v54 + 16);
                uint64_t v56 = *(void *)v55;
                if (*(void *)v55 == v54)
                {
                  uint64_t v59 = *((void *)v55 + 1);
                  if (!v59 || (v60 = *(unsigned __int8 *)(v59 + 24), unint64_t v57 = (unsigned char *)(v59 + 24), v60))
                  {
                    if (*(char **)v54 == v52)
                    {
                      *(unsigned char *)(v54 + 24) = 1;
                      v55[24] = 0;
                      uint64_t v63 = *(void *)(v54 + 8);
                      *(void *)int v55 = v63;
                      if (v63) {
                        goto LABEL_108;
                      }
                    }
                    else
                    {
                      uint64_t v61 = *(uint64_t **)(v54 + 8);
                      uint64_t v62 = *v61;
                      *(void *)(v54 + 8) = *v61;
                      if (v62)
                      {
                        *(void *)(v62 + 16) = v54;
                        int v55 = *(char **)(v54 + 16);
                      }
                      v61[2] = (uint64_t)v55;
                      *(void *)(*(void *)(v54 + 16) + 8 * (**(void **)(v54 + 16) != v54)) = v61;
                      uint64_t *v61 = v54;
                      *(void *)(v54 + 16) = v61;
                      int v55 = (char *)v61[2];
                      uint64_t v54 = *(void *)v55;
                      *((unsigned char *)v61 + 24) = 1;
                      v55[24] = 0;
                      uint64_t v63 = *(void *)(v54 + 8);
                      *(void *)int v55 = v63;
                      if (v63) {
LABEL_108:
                      }
                        *(void *)(v63 + 16) = v55;
                    }
                    *(void *)(v54 + 16) = *((void *)v55 + 2);
                    *(void *)(*((void *)v55 + 2) + 8 * (**((void **)v55 + 2) != (void)v55)) = v54;
                    *(void *)(v54 + 8) = v55;
LABEL_114:
                    *((void *)v55 + 2) = v54;
                    break;
                  }
                }
                else if (!v56 || (v58 = *(unsigned __int8 *)(v56 + 24), unint64_t v57 = (unsigned char *)(v56 + 24), v58))
                {
                  if (*(char **)v54 == v52)
                  {
                    uint64_t v66 = *((void *)v52 + 1);
                    *(void *)uint64_t v54 = v66;
                    if (v66)
                    {
                      *(void *)(v66 + 16) = v54;
                      int v55 = *(char **)(v54 + 16);
                    }
                    *((void *)v52 + 2) = v55;
                    *(void *)(*(void *)(v54 + 16) + 8 * (**(void **)(v54 + 16) != v54)) = v52;
                    *((void *)v52 + 1) = v54;
                    *(void *)(v54 + 16) = v52;
                    int v55 = (char *)*((void *)v52 + 2);
                    v52[24] = 1;
                    v55[24] = 0;
                    uint64_t v54 = *((void *)v55 + 1);
                    uint64_t v64 = *(char **)v54;
                    *((void *)v55 + 1) = *(void *)v54;
                    if (v64) {
LABEL_112:
                    }
                      *((void *)v64 + 2) = v55;
                  }
                  else
                  {
                    *(unsigned char *)(v54 + 24) = 1;
                    v55[24] = 0;
                    uint64_t v54 = *((void *)v55 + 1);
                    uint64_t v64 = *(char **)v54;
                    *((void *)v55 + 1) = *(void *)v54;
                    if (v64) {
                      goto LABEL_112;
                    }
                  }
                  *(void *)(v54 + 16) = *((void *)v55 + 2);
                  *(void *)(*((void *)v55 + 2) + 8 * (**((void **)v55 + 2) != (void)v55)) = v54;
                  *(void *)uint64_t v54 = v55;
                  goto LABEL_114;
                }
                *(unsigned char *)(v54 + 24) = 1;
                unint64_t v52 = v55;
                v55[24] = v55 == v53;
                *unint64_t v57 = 1;
              }
              while (v55 != v53);
            }
            ++v165;
          }
        }
        if ((v156[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v156);
          if ((__str[23] & 0x80000000) == 0)
          {
LABEL_118:
            __n128 v65 = v147;
            if (!v147) {
              goto LABEL_53;
            }
            goto LABEL_122;
          }
        }
        else if ((__str[23] & 0x80000000) == 0)
        {
          goto LABEL_118;
        }
        operator delete(*(void **)__str);
        __n128 v65 = v147;
        if (!v147) {
          goto LABEL_53;
        }
LABEL_122:
        if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
LABEL_53:
        v32 += 2;
      }
      unint64_t v67 = (std::__shared_weak_count *)v154;
      if (v154 && !atomic_fetch_add((atomic_ullong *volatile)&v154->__r_.__value_.__l.__size_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
      v28 += 2;
    }
    while (v28 != v141);
  }
  uint64_t SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager((E5RT::SharedResourceManager *)v27);
  memset(v156, 0, sizeof(v156));
  int v157 = 1065353216;
  long long v153 = 0;
  v154 = 0;
  unint64_t v155 = 0;
  uint64_t v69 = *(void **)&v161[16];
  if (!*(void *)&v161[16]) {
    goto LABEL_245;
  }
  uint64_t v70 = SharedResourceManager;
  do
  {
    uint64_t v71 = (void *)v69[7];
    if (v71)
    {
      while (1)
      {
        BOOL v72 = (uint64_t *)v71[7];
        if (v72) {
          break;
        }
LABEL_138:
        uint64_t v71 = (void *)*v71;
        if (!v71) {
          goto LABEL_135;
        }
      }
      while (1)
      {
        if (*((char *)v72 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, (const std::string::value_type *)v72[2], v72[3]);
        }
        else
        {
          *(_OWORD *)__str = *((_OWORD *)v72 + 1);
          *(void *)&__str[16] = v72[4];
        }
        if (*((char *)v72 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__str[24], (const std::string::value_type *)v72[5], v72[6]);
        }
        else
        {
          *(_OWORD *)&__str[24] = *(_OWORD *)(v72 + 5);
          int64_t v152 = v72[7];
        }
        uint64_t v73 = HIBYTE(v152);
        char v74 = HIBYTE(v152);
        if (v152 < 0) {
          uint64_t v73 = *(void *)&__str[32];
        }
        if (v73)
        {
          uint64_t v75 = v154;
          if ((unint64_t)v154 >= v155)
          {
            unint64_t v77 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v153, (uint64_t)&__str[24]);
          }
          else
          {
            if (SHIBYTE(v152) < 0)
            {
              std::string::__init_copy_ctor_external(v154, *(const std::string::value_type **)&__str[24], *(std::string::size_type *)&__str[32]);
            }
            else
            {
              long long v76 = *(_OWORD *)&__str[24];
              v154->__r_.__value_.__r.__words[2] = v152;
              *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
            }
            unint64_t v77 = v75 + 1;
          }
          v154 = v77;
          char v74 = HIBYTE(v152);
        }
        if (v74 < 0)
        {
          operator delete(*(void **)&__str[24]);
          if ((__str[23] & 0x80000000) == 0) {
            goto LABEL_142;
          }
LABEL_161:
          operator delete(*(void **)__str);
          BOOL v72 = (uint64_t *)*v72;
          if (!v72) {
            goto LABEL_138;
          }
        }
        else
        {
          if ((__str[23] & 0x80000000) != 0) {
            goto LABEL_161;
          }
LABEL_142:
          BOOL v72 = (uint64_t *)*v72;
          if (!v72) {
            goto LABEL_138;
          }
        }
      }
    }
LABEL_135:
    uint64_t v69 = (void *)*v69;
  }
  while (v69);
  uint64_t v78 = *(long long **)&v161[16];
  if (*(void *)&v161[16])
  {
    do
    {
      BOOL v79 = v78 + 1;
      __str[23] = 0;
      __str[0] = 0;
      E5RT::SharedResourceManager::GetOrCreateResource(v70, v78 + 1, 0, (uint64_t *)__str, 0, (uint64_t *)&v149);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      uint64_t v80 = E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(v149);
      if (*((char *)v78 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *((const std::string::value_type **)v78 + 2), *((void *)v78 + 3));
      }
      else
      {
        *(_OWORD *)__str = *v79;
        *(void *)&__str[16] = *((void *)v78 + 4);
      }
      std::string __p = __str;
      unint64_t v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v156, (uint64_t)__str, (uint64_t)&std::piecewise_construct, (long long **)&__p);
      uint64_t v83 = (uint64_t)v149;
      uint64_t v82 = (uint64_t)v150;
      if (v150) {
        atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v84 = v70;
      long long v85 = (std::__shared_weak_count *)v81[6];
      v81[5] = v83;
      v81[6] = v82;
      if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
        uint64_t v86 = v164;
        if (!v164) {
          goto LABEL_208;
        }
      }
      else
      {
        uint64_t v86 = v164;
        if (!v164) {
          goto LABEL_208;
        }
      }
      unint64_t v87 = v80;
      int v88 = *((char *)v78 + 39);
      if (v88 >= 0) {
        size_t v89 = *((unsigned __int8 *)v78 + 39);
      }
      else {
        size_t v89 = *((void *)v78 + 3);
      }
      if (v88 >= 0) {
        int v90 = v78 + 1;
      }
      else {
        int v90 = (const void *)*((void *)v78 + 2);
      }
      while (1)
      {
        int v91 = v86[55];
        if (v91 >= 0) {
          size_t v92 = v86[55];
        }
        else {
          size_t v92 = *((void *)v86 + 5);
        }
        if (v91 >= 0) {
          long long v93 = v86 + 32;
        }
        else {
          long long v93 = (const void *)*((void *)v86 + 4);
        }
        if (v92 >= v89) {
          size_t v94 = v89;
        }
        else {
          size_t v94 = v92;
        }
        int v95 = memcmp(v90, v93, v94);
        BOOL v96 = v89 < v92;
        if (v95) {
          BOOL v96 = v95 < 0;
        }
        if (v96) {
          goto LABEL_183;
        }
        int v97 = memcmp(v93, v90, v94);
        BOOL v98 = v92 < v89;
        if (v97) {
          BOOL v98 = v97 < 0;
        }
        if (!v98) {
          break;
        }
        v86 += 8;
LABEL_183:
        uint64_t v86 = *(char **)v86;
        if (!v86)
        {
          uint64_t v70 = v84;
          uint64_t v80 = v87;
          goto LABEL_208;
        }
      }
      int v99 = v87;
      E5Common::GetANEFAdaptedModel(v87, (uint64_t)v78 + 40);
      v100 = uint64_t v70 = v84;

      uint64_t v80 = (void *)v100;
      E5RT::SharedResourceManager::GenerateConcatenatedSortedURIs((uint64_t *)&v153, (uint64_t)&__p);
      int v101 = *((char *)v78 + 39);
      if (v101 >= 0) {
        size_t v102 = *((unsigned __int8 *)v78 + 39);
      }
      else {
        size_t v102 = *((void *)v78 + 3);
      }
      unint64_t v103 = v102 + 1;
      if (v102 + 1 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v103 >= 0x17)
      {
        unint64_t v108 = v80;
        uint64_t v109 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v103 | 7) != 0x17) {
          uint64_t v109 = v103 | 7;
        }
        uint64_t v110 = v109 + 1;
        p_dst = (std::string *)operator new(v109 + 1);
        __dst.__r_.__value_.__l.__size_ = v102 + 1;
        __dst.__r_.__value_.__r.__words[2] = v110 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        uint64_t v80 = v108;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v102 + 1;
        if (!v102) {
          goto LABEL_225;
        }
      }
      if (v101 >= 0) {
        uint64_t v111 = v78 + 1;
      }
      else {
        uint64_t v111 = *(const void **)v79;
      }
      memmove(p_dst, v111, v102);
LABEL_225:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v102) = 58;
      if ((v148 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v148 & 0x80u) == 0) {
        std::string::size_type v113 = v148;
      }
      else {
        std::string::size_type v113 = (std::string::size_type)v147;
      }
      long long v114 = std::string::append(&__dst, p_p, v113);
      std::string::size_type v115 = v114->__r_.__value_.__r.__words[0];
      v166[0] = v114->__r_.__value_.__l.__size_;
      *(void *)((char *)v166 + 7) = *(std::string::size_type *)((char *)&v114->__r_.__value_.__r.__words[1] + 7);
      char v116 = HIBYTE(v114->__r_.__value_.__r.__words[2]);
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      *(void *)__str = v115;
      *(void *)&__str[8] = v166[0];
      *(void *)&__str[15] = *(void *)((char *)v166 + 7);
      __str[23] = v116;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (((char)v148 & 0x80000000) == 0) {
          goto LABEL_235;
        }
LABEL_244:
        operator delete(__p);
        goto LABEL_235;
      }
      if ((char)v148 < 0) {
        goto LABEL_244;
      }
LABEL_235:
      uint64_t v117 = (std::__shared_weak_count *)operator new(0x48uLL);
      v117->__shared_owners_ = 0;
      v117->__shared_weak_owners_ = 0;
      v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380D90;
      v118 = (const void *)E5RT::SharedResourcePriv<_ANEModel * {__strong}>::SharedResourcePriv((uint64_t)&v117[1], (long long *)__str, v80, 0);
      v119 = v150;
      v149 = v118;
      unint64_t v150 = v117;
      if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
      std::string __p = __str;
      std::string::size_type v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v156, (uint64_t)__str, (uint64_t)&std::piecewise_construct, (long long **)&__p);
      uint64_t v122 = (uint64_t)v149;
      uint64_t v121 = (uint64_t)v150;
      if (v150) {
        atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v123 = (std::__shared_weak_count *)v120[6];
      v120[5] = v122;
      v120[6] = v121;
      if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
LABEL_208:
      unint64_t v143 = v149;
      uint64_t v144 = v150;
      if (v150) {
        atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::SharedResourceManager::AddResource(v70, __str, (uint64_t *)&v143);
      long long v105 = v144;
      if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
      std::string __p = v78 + 1;
      long long v106 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v158, (uint64_t)(v78 + 1), (uint64_t)&std::piecewise_construct, (long long **)&__p);
      std::string::operator=((std::string *)(v106 + 5), (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }

      int v107 = v150;
      if (v150 && !atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
      uint64_t v78 = *(long long **)v78;
    }
    while (v78);
  }
LABEL_245:
  uint64_t v124 = (const void **)*a1;
  if (*a1 != a1[1])
  {
    if (*v124) {
    else
    }
      uint64_t v125 = 0;
    E5RT::PrecompiledComputeOpCreateOptionsPriv::SetMachoToSharedResourceURI((uint64_t)v125, (uint64_t)v158);
    E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(v125, v126);
  }
  uint64_t v127 = (std::string *)v153;
  if (v153)
  {
    v128 = v154;
    uint64_t v129 = v153;
    if (v154 != v153)
    {
      do
      {
        if (SHIBYTE(v128[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v128[-1].__r_.__value_.__l.__data_);
        }
        --v128;
      }
      while (v128 != v127);
      uint64_t v129 = v153;
    }
    v154 = v127;
    operator delete(v129);
  }
  uint64_t v130 = *(void ***)&v156[16];
  if (*(void *)&v156[16])
  {
    do
    {
      while (1)
      {
        uint64_t v131 = (void **)*v130;
        uint64_t v132 = (std::__shared_weak_count *)v130[6];
        if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
        if (*((char *)v130 + 39) < 0) {
          break;
        }
        operator delete(v130);
        uint64_t v130 = v131;
        if (!v131) {
          goto LABEL_266;
        }
      }
      operator delete(v130[2]);
      operator delete(v130);
      uint64_t v130 = v131;
    }
    while (v131);
  }
LABEL_266:
  v133 = *(void **)v156;
  *(void *)v156 = 0;
  if (v133) {
    operator delete(v133);
  }
  v134 = (char *)v159;
  if ((void)v159)
  {
    while (1)
    {
      uint64_t v135 = *(char **)v134;
      if (v134[63] < 0)
      {
        operator delete(*((void **)v134 + 5));
        if ((v134[39] & 0x80000000) == 0) {
          goto LABEL_271;
        }
LABEL_274:
        operator delete(*((void **)v134 + 2));
        operator delete(v134);
        v134 = v135;
        if (!v135) {
          break;
        }
      }
      else
      {
        if (v134[39] < 0) {
          goto LABEL_274;
        }
LABEL_271:
        operator delete(v134);
        v134 = v135;
        if (!v135) {
          break;
        }
      }
    }
  }
  unint64_t v136 = v158[0];
  v158[0] = 0;
  if (v136) {
    operator delete(v136);
  }
  std::__tree<std::string>::destroy((uint64_t)&v163, v164);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node((int)v161, *(char **)&v161[16]);
  v137 = *(void **)v161;
  *(void *)long long v161 = 0;
  if (v137) {
    operator delete(v137);
  }
}

void sub_19234AC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,char *a50)
{
  unint64_t v52 = a11;
  unint64_t v53 = (void *)*a11;
  if (!*a11)
  {
    uint64_t v54 = a50;
    if (a50) {
      goto LABEL_14;
    }
LABEL_17:
    if (__p) {
      operator delete(__p);
    }
    std::__tree<std::string>::destroy(v50 - 144, *(char **)(v50 - 136));
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node(v50 - 192, *(char **)(v50 - 176));
    int v60 = *(void **)(v50 - 192);
    *(void *)(v50 - 192) = 0;
    if (!v60) {
      _Unwind_Resume(a1);
    }
    operator delete(v60);
    _Unwind_Resume(a1);
  }
  int v55 = (void *)a11[1];
  uint64_t v56 = (void *)*a11;
  if (v55 != v53)
  {
    do
    {
      uint64_t v58 = *--v55;
      uint64_t v57 = v58;
      *int v55 = 0;
      if (v58) {
        (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
      }
    }
    while (v55 != v53);
    unint64_t v52 = a11;
    uint64_t v56 = (void *)*a11;
  }
  v52[1] = v53;
  operator delete(v56);
  uint64_t v54 = a50;
  if (!a50) {
    goto LABEL_17;
  }
  while (1)
  {
LABEL_14:
    uint64_t v59 = *(char **)v54;
    if (v54[63] < 0)
    {
      operator delete(*((void **)v54 + 5));
      if ((v54[39] & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_16:
      operator delete(*((void **)v54 + 2));
      operator delete(v54);
      uint64_t v54 = v59;
      if (!v59) {
        goto LABEL_17;
      }
    }
    else
    {
      if (v54[39] < 0) {
        goto LABEL_16;
      }
LABEL_13:
      operator delete(v54);
      uint64_t v54 = v59;
      if (!v59) {
        goto LABEL_17;
      }
    }
  }
}

uint64_t std::pair<std::string const,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::IsCompositeOp(E5RT::Ops::PreCompiledComputeOperation *this)
{
  return 1;
}

char *E5RT::Ops::PreCompiledComputeOperation::GetFunctionName(E5RT::Ops::PreCompiledComputeOperation *this)
{
  uint64_t result = (char *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 37) + 72) + 16))(*(void *)(*((void *)this + 37) + 72));
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::GetPrimitiveOperations(E5RT::Ops::PreCompiledComputeOperation *this)
{
  return *((void *)this + 37) + 48;
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::ResetConfigOptions@<X0>(E5RT::Ops::PreCompiledComputeOperation::Impl **this@<X0>, void *a2@<X8>)
{
  return E5RT::Ops::PreCompiledComputeOperation::Impl::ResetConfigOptions(this[37], a2);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::SetConfigOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v6 = v3;
  E5RT::Ops::PreCompiledComputeOperation::Impl::SetConfigOptions(v2, &v6);
  uint64_t result = v6;
  if (v6)
  {
    char v5 = *(uint64_t (**)(void))(*(void *)v6 + 8);
    return v5();
  }
  return result;
}

void sub_19234B25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_19234E014(a10);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::PreCompiledComputeOperation::BindDependentAsyncEvents(uint64_t a1, uint64_t *a2)
{
  E5RT::ExecutionStreamOperationInternal::BindDependentAsyncEvents(a1, a2);
  uint64_t v3 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 296);

  E5RT::Ops::PreCompiledComputeOperation::Impl::BindDependentAsyncEventsImpl(v3);
}

void E5RT::Ops::PreCompiledComputeOperation::BindCompletionAsyncEvent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(a1, &v4);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  if (*((void *)&v4 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(*(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296));
  }
  else
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(*(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296));
  }
}

void sub_19234B350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void E5RT::Ops::PreCompiledComputeOperation::BindCompletionAsyncEvent(uint64_t a1, long long *a2, int a3)
{
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(a1, &v5, a3);
  long long v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(*(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296));
  }
  else
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindCompletionAsyncEventImpl(*(E5RT::Ops::PreCompiledComputeOperation::Impl **)(a1 + 296));
  }
}

void sub_19234B408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::SetQualityOfService(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 296);
  uint64_t v3 = *(uint64_t **)(v2 + 48);
  for (uint64_t i = *(uint64_t **)(v2 + 56);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 144))(v6, a2))
  {
    uint64_t v6 = *v3;
    v3 += 2;
  }
  return result;
}

void E5RT::Ops::PreCompiledComputeOperation::SerializeInferenceFrameDataPerSegment(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 296);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v8 = *(std::string *)a2;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string __p = *(std::string *)a3;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_6:
  E5RT::Ops::PreCompiledComputeOperation::Impl::SerializeInferenceFrameDataPerSegment(v6, (uint64_t)&v8, (const void **)&__p.__r_.__value_.__l.__data_, a4);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v8.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
}

void sub_19234B568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19234B5B4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t sub_19234B5C4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  *(void *)(result + 48) = 0;
  if (v1)
  {
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 + 64));
    std::mutex::~mutex((std::mutex *)v1);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t *std::unique_ptr<std::pair<std::mutex,std::exception_ptr>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v2 + 64));
    std::mutex::~mutex((std::mutex *)v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void sub_19234B67C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a1 + 40);
  uint64_t v3 = 16 * a2;
  long long v4 = (void *)MEMORY[0x192FF2020]();
  (*(void (**)(void))(**(void **)(v2 + v3) + 40))(*(void *)(v2 + v3));
}

void sub_19234B6E8(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *(std::mutex **)(*(void *)(*(void *)(v1 + 32) + 8) + 48);
  std::mutex::lock(v2);
  sub_19234E038(v1 + 32, v2);
}

void sub_19234B71C(_Unwind_Exception *a1)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<E5RT::TensorDescriptor>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      int v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          int v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          int v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<E5RT::TensorDescriptor>>(a1, v12, a3, a4, (uint64_t)v41);
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v13 || (float)(v28 * (float)v13) < v27)
  {
    BOOL v30 = 1;
    if (v13 >= 3) {
      BOOL v30 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v13);
    unint64_t v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v38 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v12);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v38 & v12;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v38 & v12));
      if (v29) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v41[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v39 = *(void *)(*(void *)v41[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v39 >= v13) {
          v39 %= v13;
        }
      }
      else
      {
        v39 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v29) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v41[0] = *v29;
  *uint64_t v29 = v41[0];
LABEL_89:
  int v16 = (uint64_t *)v41[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_19234BB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<E5RT::TensorDescriptor>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  unint64_t v11 = v10;
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v10 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
    *((void *)v10 + 4) = *(void *)(a3 + 16);
  }
  uint64_t v12 = *a4;
  *((void *)v11 + 5) = *a4;
  if (v12) {
    operator new();
  }
  uint64_t result = 0;
  *((void *)v11 + 6) = 0;
  *a4 = 0;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_19234BC3C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19234BC50(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(void **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  long long v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1) {
    return (std::string *)v7;
  }
  uint64_t v9 = __str;
  unint64_t v11 = a1[2];
  uint64_t v12 = (long long *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)v12) >> 3)) >= a5)
  {
    uint64_t v18 = (uint64_t)v12 - v7;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      uint64_t v20 = &__str[a5];
      uint64_t v25 = (char *)a1[1];
      goto LABEL_42;
    }
    uint64_t v20 = (std::string *)((char *)__str + 8 * (((uint64_t)v12 - v7) >> 3));
    if (v20 != a4)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v23 = (std::string *)((char *)v12 + v21 * 24);
        uint64_t v24 = &v20[v21];
        if (SHIBYTE(v20[v21].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v23, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v22 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v23->__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v22;
        }
        ++v21;
      }
      while (&v20[v21] != a4);
      uint64_t v25 = (char *)v12 + v21 * 24;
      a1[1] = (char *)v12 + v21 * 24;
      if (v18 < 1) {
        return (std::string *)v7;
      }
LABEL_42:
      uint64_t v39 = v7 + 24 * a5;
      size_t v40 = (long long *)&v25[-24 * a5];
      uint64_t v41 = v25;
      if (v40 < v12)
      {
        uint64_t v41 = v25;
        do
        {
          long long v42 = *v40;
          *((void *)v41 + 2) = *((void *)v40 + 2);
          *(_OWORD *)uint64_t v41 = v42;
          v41 += 24;
          *((void *)v40 + 1) = 0;
          *((void *)v40 + 2) = 0;
          *(void *)size_t v40 = 0;
          size_t v40 = (long long *)((char *)v40 + 24);
        }
        while (v40 < v12);
      }
      a1[1] = v41;
      if (v25 != (char *)v39)
      {
        size_t v43 = v25 - 24;
        uint64_t v44 = 8 * ((uint64_t)&v25[-v39] >> 3);
        do
        {
          if (v43[23] < 0) {
            operator delete(*(void **)v43);
          }
          int v45 = (long long *)(v7 + v44 - 24);
          long long v46 = *v45;
          *((void *)v43 + 2) = *(void *)(v7 + v44 - 8);
          *(_OWORD *)size_t v43 = v46;
          v43 -= 24;
          *(unsigned char *)(v7 + v44 - 1) = 0;
          *(unsigned char *)int v45 = 0;
          v44 -= 24;
        }
        while (v44);
      }
      if (v20 != v9)
      {
        long long v47 = (std::string *)v7;
        do
          std::string::operator=(v47++, v9++);
        while (v9 != v20);
      }
      return (std::string *)v7;
    }
    uint64_t v25 = (char *)a1[1];
    a1[1] = v12;
    if (v18 >= 1) {
      goto LABEL_42;
    }
    return (std::string *)v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0x555555555555555) {
    unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    char v17 = (char *)operator new(24 * v16);
  }
  else
  {
    char v17 = 0;
  }
  uint64_t v26 = (std::string *)&v17[24 * v6];
  int v49 = v26;
  uint64_t v50 = &v17[24 * v16];
  uint64_t v27 = a5;
  float v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v26->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
    }
    ++v26;
    ++v9;
    --v27;
  }
  while (v27 * 24);
  BOOL v30 = v49;
  unint64_t v31 = *a1;
  unint64_t v32 = v49;
  if (*a1 != (void *)v7)
  {
    unint64_t v33 = v49;
    uint64_t v34 = v7;
    do
    {
      unint64_t v32 = v33 - 1;
      long long v35 = *(_OWORD *)(v34 - 24);
      v33[-1].__r_.__value_.__r.__words[2] = *(void *)(v34 - 8);
      *(_OWORD *)&v33[-1].__r_.__value_.__l.__data_ = v35;
      *(void *)(v34 - 16) = 0;
      *(void *)(v34 - 8) = 0;
      *(void *)(v34 - 24) = 0;
      --v33;
      v34 -= 24;
    }
    while ((void *)v34 != v31);
  }
  uint8x8_t v36 = a1[1];
  if (v36 != (void *)v7)
  {
    do
    {
      long long v37 = *(_OWORD *)v7;
      v28->__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v37;
      ++v28;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v36);
    uint64_t v7 = (uint64_t)a1[1];
  }
  unint64_t v38 = *a1;
  *a1 = v32;
  a1[1] = v28;
  a1[2] = v50;
  while ((void *)v7 != v38)
  {
    if (*(char *)(v7 - 1) < 0) {
      operator delete(*(void **)(v7 - 24));
    }
    v7 -= 24;
  }
  if (v38) {
    operator delete(v38);
  }
  return v30;
}

void sub_19234C064(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__shared_ptr_emplace<E5RT::IOPortPriv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::IOPortPriv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380930;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<E5RT::IOPortPriv>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_pointer<E5RT::Ops::AneInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::AneInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::AneInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops21AneInferenceOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21AneInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops21AneInferenceOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21AneInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::MpsGraphInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::MpsGraphInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::MpsGraphInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops26MpsGraphInferenceOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops26MpsGraphInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops26MpsGraphInferenceOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops26MpsGraphInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::CpuInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::CpuInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::CpuInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops21CpuInferenceOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21CpuInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops21CpuInferenceOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21CpuInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::CastOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::CastOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::CastOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops13CastOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops13CastOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops13CastOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops13CastOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::QuantOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::QuantOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::QuantOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops14QuantOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops14QuantOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops14QuantOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops14QuantOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::DequantOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::DequantOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::DequantOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops16DequantOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16DequantOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops16DequantOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16DequantOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::MlcCpuInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::MlcCpuInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::MlcCpuInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops24MlcCpuInferenceOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops24MlcCpuInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops24MlcCpuInferenceOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops24MlcCpuInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::BnnsCpuInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::BnnsCpuInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::BnnsCpuInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops25BnnsCpuInferenceOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops25BnnsCpuInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops25BnnsCpuInferenceOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops25BnnsCpuInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::EIRInferenceOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::EIRInferenceOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::EIRInferenceOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops21EIRInferenceOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21EIRInferenceOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops21EIRInferenceOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21EIRInferenceOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::JitCallOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::JitCallOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::JitCallOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops16JitCallOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16JitCallOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops16JitCallOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16JitCallOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::E5MinimalCpuOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::E5MinimalCpuOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::E5MinimalCpuOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops21E5MinimalCpuOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21E5MinimalCpuOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops21E5MinimalCpuOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops21E5MinimalCpuOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5RT::Ops::BarrierOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::BarrierOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::Ops::BarrierOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4E5RT3Ops16BarrierOperationEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16BarrierOperationEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4E5RT3Ops16BarrierOperationEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4E5RT3Ops16BarrierOperationEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  unint64_t v14 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x28uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  _OWORD v11[2] = **a4;
  void v11[3] = 0;
  v11[4] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *unint64_t v11 = *v18;
LABEL_61:
      void *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v8) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v7);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v26 & v7;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v7));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *unint64_t v11 = *v14;
  void *v14 = v11;
  *(void *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    unint64_t v27 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_19234CE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void std::vector<std::unique_ptr<E5RT::ExecutionStreamOperationConfigOptions>>::__append(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    int8x8_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    char v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    unint64_t v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (!v5) {
        return;
      }
      goto LABEL_30;
    }
    unint64_t v18 = v5 - v7 - 8;
    if (v18 < 0x78 || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5) {
      goto LABEL_39;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v14 -= v20;
    unint64_t v6 = &v5[-v20];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = &v13[8 * v9 - 16];
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *((_OWORD *)v21 - 1);
      long long v24 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v22 - 1) = v25;
      *(_OWORD *)uint64_t v22 = v24;
      v21 -= 32;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        uint64_t v26 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)unint64_t v6 = 0;
        *((void *)v14 - 1) = v26;
        v14 -= 8;
      }
      while (v6 != v7);
    }
    unint64_t v27 = (char *)*a1;
    unint64_t v6 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6 != v27)
    {
      do
      {
        uint64_t v29 = *((void *)v6 - 1);
        v6 -= 8;
        uint64_t v28 = v29;
        *(void *)unint64_t v6 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
      }
      while (v6 != v27);
      unint64_t v6 = v27;
    }
    if (v6)
    {
LABEL_30:
      operator delete(v6);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__deallocate_node(int a1, char *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    while (1)
    {
      unint64_t v3 = *(char **)v2;
      unint64_t v4 = (char *)*((void *)v2 + 7);
      if (v4) {
        break;
      }
LABEL_5:
      unint64_t v5 = (void *)*((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v5) {
        operator delete(v5);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
      if (!v3) {
        return;
      }
    }
    while (1)
    {
      unint64_t v6 = *(char **)v4;
      int8x8_t v7 = (void **)*((void *)v4 + 7);
      if (v7) {
        break;
      }
LABEL_11:
      uint64_t v8 = (void *)*((void *)v4 + 5);
      *((void *)v4 + 5) = 0;
      if (v8) {
        operator delete(v8);
      }
      if (v4[39] < 0) {
        operator delete(*((void **)v4 + 2));
      }
      operator delete(v4);
      unint64_t v4 = v6;
      if (!v6) {
        goto LABEL_5;
      }
    }
    while (1)
    {
      uint64_t v9 = (void **)*v7;
      if (*((char *)v7 + 63) < 0)
      {
        operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0) {
LABEL_20:
        }
          operator delete(v7[2]);
      }
      else if (*((char *)v7 + 39) < 0)
      {
        goto LABEL_20;
      }
      operator delete(v7);
      int8x8_t v7 = v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      size_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            size_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          size_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (char *)operator new(0x50uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  unint64_t v27 = (std::string *)(v26 + 16);
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *((_DWORD *)v26 + 18) = 1065353216;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  *unint64_t v32 = v45[0];
LABEL_92:
  size_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19234DB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19234DB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::unordered_map<std::string,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      unint64_t v3 = *(void **)(v2 + 56);
      if (v3)
      {
        do
        {
          unint64_t v4 = (void *)*v3;
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)(v3 + 2));
          operator delete(v3);
          unint64_t v3 = v4;
        }
        while (v4);
      }
      unint64_t v5 = *(void **)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v5) {
        operator delete(v5);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380D90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t E5RT::SharedResourcePriv<_ANEModel * {__strong}>::SharedResourcePriv(uint64_t a1, long long *a2, void *a3, int a4)
{
  id v7 = a3;
  E5RT::SharedResource::SharedResource((void *)a1);
  *(void *)a1 = &unk_1EE325BB0;
  unint64_t v8 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(void *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 40) = a4;

  return a1;
}

void sub_19234DD10(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  _Unwind_Resume(a1);
}

void sub_19234DD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<E5RT::ExecutionStreamOperation>>::__push_back_slow_path<std::unique_ptr<E5RT::ExecutionStreamOperation>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v9 = (char *)operator new(8 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  unint64_t v10 = &v9[8 * v4];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)unint64_t v10 = v12;
  uint8x8_t v13 = v10 + 8;
  char v14 = (char *)*a1;
  size_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_26;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_34;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  uint64_t v19 = &v15[-v18];
  uint64_t v20 = v15 - 16;
  uint64_t v21 = &v9[8 * v4 - 16];
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v20 - 1);
    long long v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)uint64_t v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)uint64_t v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  size_t v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)size_t v15 = 0;
      *((void *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  uint64_t v26 = (char *)*a1;
  size_t v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v27 = v28;
      *(void *)size_t v15 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
    while (v15 != v26);
    size_t v15 = v26;
  }
  if (v15) {
LABEL_26:
  }
    operator delete(v15);
  return v13;
}

uint64_t sub_19234DF10()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    operator delete(v2);
  }
}

void Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(void **__p)
{
  do
  {
    uint64_t v2 = __p;
    std::string __p = (void **)*__p;
    uint64_t v3 = (std::__shared_weak_count *)v2[3];
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete(v2);
  }
  while (__p);
}

{
  void **v2;

  do
  {
    uint64_t v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
    operator delete(__p);
    std::string __p = v2;
  }
  while (v2);
}

uint64_t sub_19234DFE0()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19234E014(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_19234E038(uint64_t a1, std::mutex *a2)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)a1 + 8) + 48);
  v6.__ptr_ = 0;
  uint64_t v5 = *(void *)(v4 + 64);
  std::exception_ptr::~exception_ptr(&v6);
  if (!v5)
  {
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(*(void *)(*(void *)(*(void *)a1 + 8) + 48) + 64), &v6);
    std::exception_ptr::~exception_ptr(&v6);
  }
  std::mutex::unlock(a2);
  __cxa_end_catch();
}

uint64_t E5RT::Ops::ValidateInOutsForQuantDequantOperation(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) != 1 || *(void *)(a2 + 24) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
    std::string::basic_string[abi:ne180100]<0>(v31, "Quant/dequant op supports only single input and single output.");
    E5RT::Status::Status(v32, 2, v31);
    E5RT::E5RTError::E5RTError(exception, v33, v32);
  }
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (void *)(a1 + 16);
  while (1)
  {
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    std::exception_ptr v6 = (E5RT::IOPortImpl **)v5[5];
    if (!v6)
    {
      uint64_t v25 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v31, "Invalid input port for quant/dequant op.");
      E5RT::Status::Status(v32, 1, v31);
      E5RT::E5RTError::E5RTError(v25, v33, v32);
    }
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(v6);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      unint64_t v8 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v31, "Input surface ports aren't supported with quant/dequant operation yet.");
      E5RT::Status::Status(v32, 2, v31);
      E5RT::E5RTError::E5RTError(v8, v33, v32);
    }
  }
  uint64_t v9 = a2 + 16;
  unint64_t v10 = (void *)(a2 + 16);
  while (1)
  {
    unint64_t v10 = (void *)*v10;
    if (!v10) {
      break;
    }
    unint64_t v11 = (E5RT::IOPortImpl **)v10[5];
    if (!v11)
    {
      uint64_t v26 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v31, "Invalid output port for quant/dequant op.");
      E5RT::Status::Status(v32, 1, v31);
      E5RT::E5RTError::E5RTError(v26, v33, v32);
    }
    uint64_t v12 = (void *)E5RT::IOPort::GetPortDescriptorRef(v11);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v12))
    {
      uint8x8_t v13 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
      std::string::basic_string[abi:ne180100]<0>(v31, "Output surface ports aren't supported with quant/dequant operation yet.");
      E5RT::Status::Status(v32, 2, v31);
      E5RT::E5RTError::E5RTError(v13, v33, v32);
    }
  }
  char v14 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(void *)v4 + 40));
  size_t v15 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v14);
  unint64_t v16 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(void *)v9 + 40));
  uint64_t v17 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v16);
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v15);
  uint64_t v19 = E5RT::TensorDescriptor::GetTensorShape(v17);
  size_t v20 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v20 != *(void *)(v19 + 8) - *(void *)v19 || memcmp(*(const void **)TensorShape, *(const void **)v19, v20))
  {
    uint64_t v28 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
    std::string::basic_string[abi:ne180100]<0>(v31, "Quant/dequant op does not support re-shaping tensors.");
    E5RT::Status::Status(v32, 2, v31);
    E5RT::E5RTError::E5RTError(v28, v33, v32);
  }
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v15);
  uint64_t v22 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(v17);
  int NumComponents = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
  uint64_t result = E5RT::TensorDataType::GetNumComponents(v22);
  if (NumComponents != result)
  {
    long long v29 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
    std::string::basic_string[abi:ne180100]<0>(v31, "Quant/dequant op requires input and output to have same number of components.");
    E5RT::Status::Status(v32, 2, v31);
    E5RT::E5RTError::E5RTError(v29, v33, v32);
  }
  if (NumComponents != 1)
  {
    float v30 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "ValidateInOutsForQuantDequantOperation");
    std::string::basic_string[abi:ne180100]<0>(v31, "Quant/dequant op does not support interleaved tensors yet.");
    E5RT::Status::Status(v32, 2, v31);
    E5RT::E5RTError::E5RTError(v30, v33, v32);
  }
  return result;
}

void sub_19234E5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_9:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_9;
}

uint64_t E5RT::Ops::QuantOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  uint64_t v4 = a1 + 8;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  E5RT::Ops::ValidateInOutsForQuantDequantOperation(InputPorts, OutputPorts);
  if (*(void *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1)
                 + 24))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "InOut ports are not supported by Quant op yet.");
    E5RT::Status::Status(v20, 1, v19);
    E5RT::E5RTError::E5RTError(exception, v21, v20);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(void *)(InputPorts + 16) + 40));
  unint64_t v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  uint64_t v9 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(*(void *)(OutputPorts + 16)
                                                                                           + 40));
  unint64_t v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v9);
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v8);
  uint64_t v12 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v10);
  if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef)
    && !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(TensorDataTypeRef))
  {
    uint64_t v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Input to quant op must be FP32 or FP16.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v17, v21, v20);
  }
  if (!E5RT::TensorDataType::IsType<unsigned char>(v12) && !E5RT::TensorDataType::IsType<signed char>(v12))
  {
    uint64_t v18 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Output from quant op must be U8 or S8.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v18, v21, v20);
  }
  if (**(_DWORD **)v4 != 1)
  {
    size_t v15 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Quant op not yet supported on non-CPU devices.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v15, v21, v20);
  }
  if (*(void *)(*(void *)v4 + 16) - *(void *)(*(void *)v4 + 8) != 4)
  {
    unint64_t v16 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v19, "Quant op currently only supports a single scale factor for all channels.");
    E5RT::Status::Status(v20, 2, v19);
    E5RT::E5RTError::E5RTError(v16, v21, v20);
  }
  return a1;
}

void sub_19234EA60(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19234EA74(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19234EA88(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19234EA9C(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19234EAB0(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19234EAC4(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19234EAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void E5RT::Ops::QuantOperation::Impl::ExecuteSync(E5RT::ExecutionStreamOperationInternal **this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(&v22, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(v18, 2, &v22);
    E5RT::E5RTError::E5RTError(exception, &v19, v18);
  }
  uint64_t v19 = 0x2B2380CC00000000;
  long long v21 = 0u;
  long long v20 = 0u;
  kdebug_trace();
  uint64_t v2 = *(void *)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16);
  uint64_t v4 = *(E5RT::IOPortImpl ***)(v2 + 40);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
  uint64_t v22 = v4;
  char v23 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this) + 16);
  uint64_t v7 = *(E5RT::IOPortImpl ***)(v5 + 40);
  std::exception_ptr v6 = *(std::__shared_weak_count **)(v5 + 48);
  v18[0] = v7;
  v18[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v4);
  uint64_t v9 = (E5RT::BufferObject *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  MemoryObjectRef = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v4);
  unint64_t v11 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(MemoryObjectRef);
  uint64_t v12 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(v7);
  uint8x8_t v13 = (E5RT *)E5RT::OperandDescriptor::TensorDescriptor(v12);
  char v14 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(v7);
  size_t v15 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v14);
  E5RT::TensorQuantize(v13, v15, v9, v11, v16, **((float **)this[1] + 1));
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (E5RT::g_trace_analysis_level >= v19) {
    kdebug_trace();
  }
}

void sub_19234EE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_19234EE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    if (v25)
    {
LABEL_8:
      __cxa_free_exception(v24);
      _Unwind_Resume(a1);
    }
  }
  else if (v25)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::QuantOperation::QuantOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)unint64_t v16 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v18 = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, (uint64_t)v16);
  uint64_t v6 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void **)*v6;
        uint64_t v8 = (std::__shared_weak_count *)v6[6];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        if (*((char *)v6 + 39) < 0) {
          break;
        }
        operator delete(v6);
        uint64_t v6 = v7;
        if (!v7) {
          goto LABEL_9;
        }
      }
      operator delete(v6[2]);
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
LABEL_9:
  uint64_t v9 = v16[0];
  v16[0] = 0;
  if (v9) {
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EE325FC8;
  *((void *)a1 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  uint64_t v10 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(a1) + 16;
  while (1)
  {
    uint64_t v10 = *(void *)v10;
    if (!v10) {
      break;
    }
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v10 + 40)))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v16, "QuantOperation");
      std::string::basic_string[abi:ne180100]<0>(v14, "QuantOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v15, 1, v14);
      E5RT::E5RTError::E5RTError(exception, v16, v15);
    }
  }
  uint64_t v12 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a1) + 16;
  while (1)
  {
    uint64_t v12 = *(void *)v12;
    if (!v12) {
      break;
    }
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v12 + 40)))
    {
      uint8x8_t v13 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v16, "QuantOperation");
      std::string::basic_string[abi:ne180100]<0>(v14, "QuantOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v15, 1, v14);
      E5RT::E5RTError::E5RTError(v13, v16, v15);
    }
  }
  operator new();
}

void sub_19234F288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x192FF16B0](v22, 0x60C40A44E5E0CLL);
  kdebug_trace();
  uint64_t v24 = *((void *)v21 + 37);
  *((void *)v21 + 37) = 0;
  if (v24) {
    sub_19232879C(v24);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::QuantOperation::~QuantOperation(E5RT::Ops::QuantOperation *this)
{
  *(void *)this = &unk_1EE325FC8;
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x60C40A44E5E0CLL);
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE325FC8;
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x60C40A44E5E0CLL);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::QuantOperation::GetOpCode(E5RT::Ops::QuantOperation *this)
{
  return 4;
}

uint64_t E5RT::Ops::QuantOperation::PrepareOpForEncode(E5RT::Ops::QuantOperation *this)
{
  return kdebug_trace();
}

void sub_19234F5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::QuantOperation::ExecuteSync(E5RT::ExecutionStreamOperationInternal ***this)
{
  return kdebug_trace();
}

void sub_19234F6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_config_options_create(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE395E90;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_19234F79C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_config_options_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE395F10;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_19234F898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_config_options_get_skip_io_fences(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395F90;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19234F994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_config_options_set_skip_io_fences(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396010;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19234FA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_config_options_get_enable_low_latency_async_events(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396090;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19234FB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_config_options_set_enable_low_latency_async_events(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396110;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19234FC90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_config_options_get_enable_concurrent_sync_execution(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396190;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19234FD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_config_options_set_enable_concurrent_sync_execution(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396210;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19234FE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19234FEA4()
{
}

void *sub_19234FEB8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE395E90;
  result[1] = v3;
  return result;
}

uint64_t sub_19234FF00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE395E90;
  a2[1] = v2;
  return result;
}

uint64_t sub_19234FF2C(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  uint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_192350090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923500F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_execution_stream_config_options_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z43e5rt_execution_stream_config_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_execution_stream_config_options_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_execution_stream_config_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192350160()
{
  return &unk_1EE395EF0;
}

void sub_192350170()
{
}

void *sub_192350184(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE395F10;
  result[1] = v3;
  return result;
}

uint64_t sub_1923501CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE395F10;
  a2[1] = v2;
  return result;
}

uint64_t sub_1923501F8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      MEMORY[0x192FF16B0](v2, 0x20C4093837F09);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      uint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_1923503B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923503F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_execution_stream_config_options_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z44e5rt_execution_stream_config_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_execution_stream_config_options_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_execution_stream_config_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192350464()
{
  return &unk_1EE395F70;
}

void sub_192350474()
{
}

__n128 sub_192350488(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE395F90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923504D4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE395F90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192350504(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamConfigOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char SkipIOFences = E5RT::ExecutionStreamConfigOptions::GetSkipIOFences(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = SkipIOFences;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: value is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192350684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923506C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z55e5rt_execution_stream_config_options_get_skip_io_fencesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z55e5rt_execution_stream_config_options_get_skip_io_fencesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z55e5rt_execution_stream_config_options_get_skip_io_fencesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z55e5rt_execution_stream_config_options_get_skip_io_fencesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192350734()
{
  return &unk_1EE395FF0;
}

void sub_192350744()
{
}

__n128 sub_192350758(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923507A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923507D4(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamConfigOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamConfigOptions::SetSkipIOFences(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1923508B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923508EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z55e5rt_execution_stream_config_options_set_skip_io_fencesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z55e5rt_execution_stream_config_options_set_skip_io_fencesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z55e5rt_execution_stream_config_options_set_skip_io_fencesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z55e5rt_execution_stream_config_options_set_skip_io_fencesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235095C()
{
  return &unk_1EE396070;
}

void sub_19235096C()
{
}

__n128 sub_192350980(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396090;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923509CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396090;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923509FC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamConfigOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char EnableLowLatencyAsyncEvents = E5RT::ExecutionStreamConfigOptions::GetEnableLowLatencyAsyncEvents(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = EnableLowLatencyAsyncEvents;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: value is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192350B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192350BBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z72e5rt_execution_stream_config_options_get_enable_low_latency_async_eventsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z72e5rt_execution_stream_config_options_get_enable_low_latency_async_eventsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z72e5rt_execution_stream_config_options_get_enable_low_latency_async_eventsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z72e5rt_execution_stream_config_options_get_enable_low_latency_async_eventsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192350C2C()
{
  return &unk_1EE3960F0;
}

void sub_192350C3C()
{
}

__n128 sub_192350C50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192350C9C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192350CCC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamConfigOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamConfigOptions::SetEnableLowLatencyAsyncEvents(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192350DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192350DE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z72e5rt_execution_stream_config_options_set_enable_low_latency_async_eventsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z72e5rt_execution_stream_config_options_set_enable_low_latency_async_eventsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z72e5rt_execution_stream_config_options_set_enable_low_latency_async_eventsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z72e5rt_execution_stream_config_options_set_enable_low_latency_async_eventsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192350E54()
{
  return &unk_1EE396170;
}

void sub_192350E64()
{
}

__n128 sub_192350E78(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396190;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192350EC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396190;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192350EF4(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamConfigOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char EnableConcurrentSyncExecution = E5RT::ExecutionStreamConfigOptions::GetEnableConcurrentSyncExecution(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = EnableConcurrentSyncExecution;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: value is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192351074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923510B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z73e5rt_execution_stream_config_options_get_enable_concurrent_sync_executionE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z73e5rt_execution_stream_config_options_get_enable_concurrent_sync_executionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73e5rt_execution_stream_config_options_get_enable_concurrent_sync_executionE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73e5rt_execution_stream_config_options_get_enable_concurrent_sync_executionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192351124()
{
  return &unk_1EE3961F0;
}

void sub_192351134()
{
}

__n128 sub_192351148(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396210;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192351194(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396210;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923511C4(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamConfigOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamConfigOptions::SetEnableConcurrentSyncExecution(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1923512A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923512DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z73e5rt_execution_stream_config_options_set_enable_concurrent_sync_executionE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z73e5rt_execution_stream_config_options_set_enable_concurrent_sync_executionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73e5rt_execution_stream_config_options_set_enable_concurrent_sync_executionE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73e5rt_execution_stream_config_options_set_enable_concurrent_sync_executionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235134C()
{
  return &unk_1EE396270;
}

uint64_t sub_192351358(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void E5RT::AneDeviceManager::GetAneDevice(int8x8_t *this@<X0>, int a2@<W1>, unint64_t a3@<X2>, int8x8_t *a4@<X8>)
{
  unint64_t v31 = a3;
  if (a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v29, "GetAneDevice");
    std::string::basic_string[abi:ne180100]<0>(v27, "Invalid ANE ID");
    E5RT::Status::Status(v28, 1, v27);
    E5RT::E5RTError::E5RTError(exception, &v29, v28);
  }
  char v7 = (std::mutex *)&this[7];
  std::mutex::lock((std::mutex *)&this[7]);
  *a4 = 0;
  a4[1] = 0;
  if (a3)
  {
    int8x8_t v8 = this[1];
    if (v8)
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v10 = a3;
        if (*(void *)&v8 <= a3) {
          unint64_t v10 = a3 % *(void *)&v8;
        }
      }
      else
      {
        unint64_t v10 = (*(void *)&v8 - 1) & a3;
      }
      char v14 = *(void **)(*(void *)this + 8 * v10);
      if (v14)
      {
        size_t v15 = (void *)*v14;
        if (v15)
        {
          if (v9.u32[0] < 2uLL)
          {
            uint64_t v16 = *(void *)&v8 - 1;
            while (1)
            {
              uint64_t v18 = v15[1];
              if (v18 == a3)
              {
                if (v15[2] == a3) {
                  goto LABEL_35;
                }
              }
              else if ((v18 & v16) != v10)
              {
                goto LABEL_29;
              }
              size_t v15 = (void *)*v15;
              if (!v15) {
                goto LABEL_29;
              }
            }
          }
          do
          {
            unint64_t v17 = v15[1];
            if (v17 == a3)
            {
              if (v15[2] == a3) {
                goto LABEL_35;
              }
            }
            else
            {
              if (v17 >= *(void *)&v8) {
                v17 %= *(void *)&v8;
              }
              if (v17 != v10) {
                break;
              }
            }
            size_t v15 = (void *)*v15;
          }
          while (v15);
        }
      }
    }
LABEL_29:
    uint64_t v19 = operator new(0x30uLL);
    v19[1] = 0;
    void v19[2] = 0;
    void *v19 = &unk_1EE396360;
    sub_192351E34((uint64_t)(v19 + 3), 0, a3);
    long long v29 = v19 + 3;
    float v30 = (std::__shared_weak_count *)v19;
    v27[0] = &v31;
    long long v20 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, &v31, (uint64_t)&std::piecewise_construct, v27);
    long long v29 = 0;
    float v30 = 0;
    long long v21 = (std::__shared_weak_count *)v20[4];
    void v20[3] = v19 + 3;
    void v20[4] = v19;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    uint64_t v22 = v30;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
LABEL_35:
    long long v29 = &v31;
    char v23 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, &v31, (uint64_t)&std::piecewise_construct, &v29);
    int8x8_t v25 = (int8x8_t)v23[3];
    int8x8_t v24 = (int8x8_t)v23[4];
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v24 + 8), 1uLL, memory_order_relaxed);
    }
    uint8x8_t v13 = (std::__shared_weak_count *)a4[1];
    *a4 = v25;
    a4[1] = v24;
    if (v13) {
      goto LABEL_38;
    }
  }
  else
  {
    int8x8_t v11 = this[5];
    if (!*(void *)&v11) {
      operator new();
    }
    int8x8_t v12 = this[6];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v12 + 8), 1uLL, memory_order_relaxed);
    }
    uint8x8_t v13 = (std::__shared_weak_count *)a4[1];
    *a4 = v11;
    a4[1] = v12;
    if (v13)
    {
LABEL_38:
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  std::mutex::unlock(v7);
}

void sub_1923517C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19235190C((void **)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v6);
  std::mutex::unlock(v5);
  _Unwind_Resume(a1);
}

void sub_1923517E4(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v3, 0x10A1C40DF6760FDLL);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_192351818(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_192351888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (v22)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void **sub_19235190C(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_192353574(v2);
    MEMORY[0x192FF16B0](v3, 0x10A1C40DF6760FDLL);
  }
  return a1;
}

void E5RT::AneDeviceManager::DeviceClose(E5RT::AneDeviceManager *this, int a2, unint64_t a3)
{
  if (a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "DeviceClose");
    std::string::basic_string[abi:ne180100]<0>(v20, "DeviceClose() - Invalid Ane id.");
    E5RT::Status::Status(v21, 1, v20);
    E5RT::E5RTError::E5RTError(exception, __p, v21);
  }
  long long v5 = (std::mutex *)((char *)this + 56);
  std::mutex::lock((std::mutex *)((char *)this + 56));
  if (a3)
  {
    int8x8_t v6 = *(int8x8_t *)((char *)this + 8);
    if (!*(void *)&v6) {
      goto LABEL_38;
    }
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = a3;
      if (*(void *)&v6 <= a3) {
        unint64_t v8 = a3 % *(void *)&v6;
      }
    }
    else
    {
      unint64_t v8 = (*(void *)&v6 - 1) & a3;
    }
    unint64_t v10 = *(void ***)(*(void *)this + 8 * v8);
    if (!v10 || (int8x8_t v11 = *v10) == 0)
    {
LABEL_38:
      uint64_t v19 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "DeviceClose");
      std::string::basic_string[abi:ne180100]<0>(v20, "DeviceClose() - Invalid program handle.");
      E5RT::Status::Status(v21, 1, v20);
      E5RT::E5RTError::E5RTError(v19, __p, v21);
    }
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v6 - 1;
      while (1)
      {
        uint64_t v14 = v11[1];
        if (v14 == a3)
        {
          if (v11[2] == a3) {
            goto LABEL_26;
          }
        }
        else if ((v14 & v12) != v8)
        {
          goto LABEL_38;
        }
        int8x8_t v11 = (void *)*v11;
        if (!v11) {
          goto LABEL_38;
        }
      }
    }
    while (1)
    {
      unint64_t v13 = v11[1];
      if (v13 == a3)
      {
        if (v11[2] == a3)
        {
LABEL_26:
          size_t v15 = (std::__shared_weak_count *)v11[4];
          if (v15 && v15->__shared_owners_ <= 1uLL)
          {
            void v11[3] = 0;
            v11[4] = 0;
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
            std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(this, v11, (uint64_t)__p);
            uint64_t v16 = __p[0];
            __p[0] = 0;
            if (v16)
            {
              if (v23)
              {
                unint64_t v17 = (std::__shared_weak_count *)v16[4];
                if (v17)
                {
                  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                    std::__shared_weak_count::__release_weak(v17);
                  }
                }
              }
              operator delete(v16);
            }
          }
          goto LABEL_36;
        }
      }
      else
      {
        if (v13 >= *(void *)&v6) {
          v13 %= *(void *)&v6;
        }
        if (v13 != v8) {
          goto LABEL_38;
        }
      }
      int8x8_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_38;
      }
    }
  }
  uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_36:
  std::mutex::unlock(v5);
}

void sub_192351C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::mutex::unlock(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_192351D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::AneDeviceManager::GetAneDeviceManager(E5RT::AneDeviceManager *this)
{
  if (qword_1E9301BB8 != -1) {
    dispatch_once(&qword_1E9301BB8, &unk_1EE396280);
  }
  return qword_1E9301BB0;
}

void sub_192351DD4()
{
}

uint64_t sub_192351E34(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE3962B0;
  *(void *)(a1 + 8) = 0;
  int8x8_t v6 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  if (a3) {
    int v7 = 1;
  }
  else {
    int v7 = 2;
  }
  LODWORD(v15) = v7;
  *((void *)&v15 + 1) = a3;
  LODWORD(v16) = 5000;
  *(void *)((char *)&v16 + 4) = a2 | 0xFFFFFFFF00000000;
  if (sub_19235343C(a1 + 8, (uint64_t)&v15, a1)
    && sub_19235343C((uint64_t)v6, (uint64_t)&v15, a1)
    || !*v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v19) = 13;
    strcpy((char *)buf, "AneDevicePriv");
    strcpy(v13, "ANE Device open failed");
    v13[23] = 22;
    E5RT::Status::Status(v14, 11, v13);
    E5RT::E5RTError::E5RTError(exception, buf, v14);
  }
  HIBYTE(v19) = 4;
  strcpy((char *)buf, "e5rt");
  unint64_t v8 = E5RT::GetE5RTLog((uint64_t)buf);
  uint8x8_t v9 = v8;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(*(void **)buf);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
LABEL_9:
    uint64_t v10 = *v6;
    *(_DWORD *)buf = 134218496;
    *(void *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2048;
    uint64_t v18 = a3;
    __int16 v19 = 1024;
    unsigned int v20 = a2;
    _os_log_impl(&dword_1920CB000, v9, OS_LOG_TYPE_INFO, "Opened ANEDevice = 0x%lx for programHandle = 0x%llx, aneId = %d \n", buf, 0x1Cu);
  }
LABEL_10:

  return a1;
}

void sub_192352074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923520EC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4 = *a4;
  if (*a4 == 23)
  {
    int v6 = 2;
  }
  else if (v4 == 22)
  {
    int v6 = 1;
  }
  else
  {
    if (v4 != 21)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v12, "fDeviceCallback");
      std::string::basic_string[abi:ne180100]<0>(v10, "Unexpected device callback statusType from ANE.");
      E5RT::Status::Status(v11, 12, v10);
      E5RT::E5RTError::E5RTError(exception, v12, v11);
    }
    int v5 = a4[1];
    if (v5 == 17)
    {
      int v6 = 3;
    }
    else
    {
      if (v5 != 16)
      {
        uint8x8_t v9 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v12, "fDeviceCallback");
        std::string::basic_string[abi:ne180100]<0>(v10, "Unexpected device callback status from ANE.");
        E5RT::Status::Status(v11, 12, v10);
        E5RT::E5RTError::E5RTError(v9, v12, v11);
      }
      int v6 = 4;
    }
  }
  *(_DWORD *)(a1 + 16) = v6;
  return 0;
}

void sub_19235225C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a17);
LABEL_6:
  if (v23) {
    __cxa_free_exception(v22);
  }
  _Unwind_Resume(a1);
}

void sub_192352310(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = *(void *)(a1 + 8);
  id v9 = v7;
  id v12 = v9;
  if (!v8 || !*(void *)v8)
  {

LABEL_8:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "AsyncSubmit");
    std::string::basic_string[abi:ne180100]<0>(v13, "ANE inference async submit failure.");
    E5RT::Status::Status(v14, 1, v13);
    E5RT::E5RTError::E5RTError(exception, v15, v14);
  }
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, id, uint64_t, void, void, void))(*(void *)v8 + 32))(v8, a2, v9, a4, 0, 0, 0);

  if (v10) {
    goto LABEL_8;
  }
}

void sub_192352428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_1923524C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 8);
  id v7 = v5;
  id v10 = v7;
  if (!v6 || !*(void *)v6)
  {

LABEL_8:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "SyncExecute");
    std::string::basic_string[abi:ne180100]<0>(v11, "ANE inference sync execute failure.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, id, void, uint64_t, void, void))(*(void *)v6 + 32))(v6, a2, v7, 0, 1, 0, 0);

  if (v8) {
    goto LABEL_8;
  }
}

void sub_1923525D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_19235266C(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "MapAllocations");
    std::string::basic_string[abi:ne180100]<0>(v12, "Map request params is NULL.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, buf, v13);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3 || !*(void *)v3 || (*(unsigned int (**)(void))(*(void *)v3 + 56))())
  {
    int8x8_t v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "MapAllocations");
    std::string::basic_string[abi:ne180100]<0>(v12, "ANE memory map request failed.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(v11, buf, v13);
  }
  HIBYTE(v17) = 4;
  strcpy(buf, "e5rt");
  id v5 = E5RT::GetE5RTLog((uint64_t)buf);
  uint64_t v6 = v5;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(*(void **)buf);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
LABEL_7:
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a2 + 3072);
    int v9 = *(_DWORD *)(a2 + 3080);
    *(_DWORD *)buf = 134218496;
    *(void *)&buf[4] = v7;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    __int16 v17 = 1024;
    int v18 = v9;
    _os_log_impl(&dword_1920CB000, v6, OS_LOG_TYPE_INFO, "Mapped pre-wire allocations for ANEDevice = 0x%lx programHandle = 0x%llx # buffers = %d\n", buf, 0x1Cu);
  }
LABEL_8:
}

void sub_192352898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (v22) {
      goto LABEL_8;
    }
  }
  else if (v22)
  {
LABEL_8:
    __cxa_free_exception(v21);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_192352984(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "UnmapAllocations");
    std::string::basic_string[abi:ne180100]<0>(v12, "Unmap request params is NULL.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, buf, v13);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3 || !*(void *)v3 || (*(unsigned int (**)(void))(*(void *)v3 + 64))())
  {
    int8x8_t v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "UnmapAllocations");
    std::string::basic_string[abi:ne180100]<0>(v12, "ANE memory unmap request failed.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(v11, buf, v13);
  }
  HIBYTE(v17) = 4;
  strcpy(buf, "e5rt");
  id v5 = E5RT::GetE5RTLog((uint64_t)buf);
  uint64_t v6 = v5;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(*(void **)buf);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
LABEL_7:
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a2 + 3072);
    int v9 = *(_DWORD *)(a2 + 3080);
    *(_DWORD *)buf = 134218496;
    *(void *)&buf[4] = v7;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    __int16 v17 = 1024;
    int v18 = v9;
    _os_log_impl(&dword_1920CB000, v6, OS_LOG_TYPE_INFO, "Unmapped pre-wire allocations for ANEDevice 0x%lx programHandle 0x%llx # buffers = %d\n", buf, 0x1Cu);
  }
LABEL_8:
}

void sub_192352BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (v22) {
      goto LABEL_8;
    }
  }
  else if (v22)
  {
LABEL_8:
    __cxa_free_exception(v21);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_192352C98(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  bzero(v35, 0xD60uLL);
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  mach_msg_type_number_t task_info_outCnt = 8;
  if (!task_info(*MEMORY[0x1E4F14960], 0xFu, (task_info_t)&task_info_out, &task_info_outCnt))
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    audit_token_t v25 = task_info_out;
    CPCopyBundleIdentifierAndTeamFromAuditToken();
    audit_token_t token = task_info_out;
    uint64_t v6 = SecTaskCreateWithAuditToken(0, &token);
    CFStringRef v7 = SecTaskCopySigningIdentifier(v6, 0);
    if (v7)
    {
      CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
      CStringPtr = CFStringGetCStringPtr(v7, SystemEncoding);
      CC_LONG v10 = strlen(CStringPtr);
      CC_SHA256(CStringPtr, v10, (unsigned __int8 *)md);
      long long v37 = md[0];
      long long v38 = md[1];
      CFStringRef v11 = v26;
      if (!v26)
      {
        CFStringRef v11 = &stru_1EE39BDB0;
        uint64_t v26 = &stru_1EE39BDB0;
      }
      CFStringEncoding v12 = CFStringGetSystemEncoding();
      unint64_t v13 = CFStringGetCStringPtr(v11, v12);
      CC_LONG v14 = strlen(v13);
      CC_SHA256(v13, v14, v30);
      *(_OWORD *)&v35[1] = *(_OWORD *)v30;
      long long v36 = v31;
      void v23[3] = 0;
      uint64_t v15 = *(void *)(a1 + 8);
      if (v15 && *(void *)v15 && !(*(unsigned int (**)(void))(*(void *)v15 + 16))())
      {
        *(_OWORD *)float v30 = 0u;
        long long v31 = 0u;
        qos_class_t v16 = qos_class_main();
        *(_DWORD *)&v30[4] = 0;
        *(_DWORD *)&unsigned char v30[8] = v16;
        v30[12] = 1;
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v23, "LoadProgram");
        std::string::basic_string[abi:ne180100]<0>(v21, "ANE Program Destroy failed.");
        E5RT::Status::Status(v22, 9, v21);
        E5RT::E5RTError::E5RTError(exception, v23, v22);
      }
      uint64_t v19 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v30, "LoadProgram");
      std::string::basic_string[abi:ne180100]<0>(v23, "ANE program load failed.");
      E5RT::Status::Status(v21, 9, v23);
      E5RT::E5RTError::E5RTError(v19, v30, v21);
    }
    int v18 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(md, "LoadProgram");
    std::string::basic_string[abi:ne180100]<0>(v30, "Invalid signing identifier.");
    E5RT::Status::Status(v23, 9, v30);
    E5RT::E5RTError::E5RTError(v18, md, v23);
  }
  __int16 v17 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(md, "LoadProgram");
  std::string::basic_string[abi:ne180100]<0>(v30, "task_info() failed.");
  E5RT::Status::Status(v23, 9, v30);
  E5RT::E5RTError::E5RTError(v17, md, v23);
}

void sub_1923530D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v53 & 1) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if ((v53 & 1) == 0)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v52);
  _Unwind_Resume(a1);
}

void sub_1923532E4(uint64_t a1, uint64_t a2)
{
  if (a2
    && *(void *)a2
    && !(*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, 1, 0))
  {
LABEL_7:
    if (*(void *)a2 && !(*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
      return;
    }
    goto LABEL_9;
  }
  char v21 = 4;
  strcpy((char *)__p, "e5rt");
  uint64_t v3 = E5RT::GetE5RTLog((uint64_t)__p);
  int v4 = v3;
  if ((v21 & 0x80000000) == 0)
  {
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
LABEL_16:
    sub_192353C08(v4, v5, v6, v7, v8, v9, v10, v11);

    if (a2) {
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  operator delete(__p[0]);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    goto LABEL_16;
  }
LABEL_6:

  if (a2) {
    goto LABEL_7;
  }
LABEL_9:
  char v21 = 4;
  strcpy((char *)__p, "e5rt");
  CFStringEncoding v12 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    sub_192353BD0(v12, v13, v14, v15, v16, v17, v18, v19);
  }
}

void sub_192353414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192353434(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_19235343C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_lock_with_options();
  uint64_t v6 = (void *)qword_1E9301BC0;
  if (!qword_1E9301BC0)
  {
    uint64_t v7 = dlopen("/System/Library/PrivateFrameworks/ANEServices.framework/ANEServices", 4);
    qword_1E9301BC0 = (uint64_t)v7;
    uint64_t v8 = dlerror();
    if (v7)
    {
      uint64_t v6 = (void *)qword_1E9301BC0;
      if (qword_1E9301BC0) {
        goto LABEL_4;
      }
    }
    else
    {
      printf("dlopen error: %s\n", v8);
      uint64_t v6 = (void *)qword_1E9301BC0;
      if (qword_1E9301BC0) {
        goto LABEL_4;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E9301BA8);
    return 4;
  }
LABEL_4:
  if (!off_1E9301BC8)
  {
    off_1E9301BC8 = dlsym(v6, "H11ANEDeviceOpen");
    uint64_t v9 = dlerror();
    if (v9) {
      printf("dlsym err: %s\n", v9);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E9301BA8);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))off_1E9301BC8;
  if (!off_1E9301BC8) {
    return 4;
  }

  return v10(a1, a2, a3, sub_1923520EC);
}

void *sub_192353574(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EE3962B0;
  uint64_t v2 = a1[1];
  if (!v2 || !*(void *)v2 || (*(unsigned int (**)(uint64_t))(*(void *)v2 + 8))(v2))
  {
    char v16 = 4;
    strcpy(__p, "e5rt");
    uint64_t v7 = E5RT::GetE5RTLog((uint64_t)__p);
    if (v16 < 0) {
      operator delete(*(void **)__p);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_192353C40(v7, v8, v9, v10, v11, v12, v13, v14);
    }

    __assert_rtn("~AneDevicePriv", "AneDevice.mm", 132, "false && \"Device close failed\"");
  }
  char v16 = 4;
  strcpy(__p, "e5rt");
  uint64_t v3 = E5RT::GetE5RTLog((uint64_t)__p);
  int v4 = v3;
  if (v16 < 0)
  {
    operator delete(*(void **)__p);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
LABEL_6:
    uint64_t v5 = a1[1];
    *(_DWORD *)std::string __p = 134217984;
    *(void *)&__p[4] = v5;
    _os_log_impl(&dword_1920CB000, v4, OS_LOG_TYPE_INFO, "Closed ANEDevice = 0x%lx\n", __p, 0xCu);
  }
LABEL_7:

  return a1;
}

void sub_192353718(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_192353728(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void *sub_192353760(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 24);
  if (result)
  {
    sub_192353574(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t sub_1923537A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN12_GLOBAL__N_113AneDevicePrivEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN12_GLOBAL__N_113AneDevicePrivEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN12_GLOBAL__N_113AneDevicePrivEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN12_GLOBAL__N_113AneDevicePrivEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v14 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  _OWORD v11[2] = **a4;
  void v11[3] = 0;
  v11[4] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *uint64_t v11 = *v18;
LABEL_61:
      void *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v8) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v7);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v26 & v7;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v7));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *uint64_t v11 = *v14;
  void *v14 = v11;
  *(void *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    unint64_t v27 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_192353B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AsyncEvent>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192353B50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE396360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_192353B70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE396360;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void *sub_192353BC4(uint64_t a1)
{
  return sub_192353574((void *)(a1 + 24));
}

void sub_192353BD0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_192353C08(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_192353C40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel::TensorToTensorBufferLoadingWeightsKernel(E5RT::Ops::E5MinimalCpu::BaseKernel *a1)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel(a1);
  void *v1 = &unk_1EE2FCED0;
  operator new();
}

void sub_192353F38(_Unwind_Exception *a1)
{
  std::unique_ptr<MIL::Blob::StorageReader>::~unique_ptr[abi:ne180100](v2);
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(v1);
  _Unwind_Resume(a1);
}

void sub_192353F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x192FF16B0](v27, 0x20C4093837F09);
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(v26);
  _Unwind_Resume(a1);
}

void sub_192353FA4(_Unwind_Exception *a1)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(v1);
  _Unwind_Resume(a1);
}

void sub_192353FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void (*a34)(void))
{
  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v38 & 1) == 0)
    {
LABEL_8:
      _Block_object_dispose(&a27, 8);
      uint64_t v40 = a33;
      a33 = 0;
      if (v40) {
        a34();
      }

      if (*(char *)(v34 + 119) < 0) {
        operator delete(*v36);
      }
      std::unique_ptr<MIL::Blob::StorageReader>::~unique_ptr[abi:ne180100](v35);
      E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)v34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  goto LABEL_8;
}

uint64_t sub_192354078(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = *(void *)(a2 + 56);
  return result;
}

uint64_t sub_192354090(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(a1 + 56))();
  }
  return result;
}

uint64_t sub_1923540C0(uint64_t a1)
{
  int v1 = fileno(*(FILE **)(*(void *)(*(void *)(a1 + 32) + 8) + 48));
  if (v1 == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "TensorToTensorBufferLoadingWeightsKernel_block_invoke");
    std::string::basic_string[abi:ne180100]<0>(&v13, "fileno failed");
    E5RT::Status::Status(&v10, 1, &v13);
    E5RT::E5RTError::E5RTError(exception, v15, &v10);
  }
  int v2 = v1;
  lseek(v1, 0, 2);
  unsigned int v3 = lseek(v2, 0, 1);
  lseek(v2, 0, 0);
  v12[0] = 0;
  v12[1] = v3;
  uint64_t result = fcntl(v2, 44, v12);
  if (result == -1)
  {
    uint64_t v6 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "TensorToTensorBufferLoadingWeightsKernel_block_invoke");
    unint64_t v7 = __error();
    std::to_string(&v10, *v7);
    unint64_t v8 = std::string::insert(&v10, 0, "fcntl failed with code: ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v8->__r_.__value_.__r.__words[2];
    long long v13 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v11, 1, &v13);
    E5RT::E5RTError::E5RTError(v6, v15, v11);
  }
  return result;
}

void sub_192354278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a25 < 0)
  {
    operator delete(__p);
    if (a16 < 0)
    {
LABEL_5:
      operator delete(a11);
      if (*(char *)(v27 - 33) < 0)
      {
LABEL_10:
        operator delete(*(void **)(v27 - 56));
        if ((v26 & 1) == 0) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
LABEL_8:
      if (!v26) {
LABEL_12:
      }
        _Unwind_Resume(a1);
LABEL_11:
      __cxa_free_exception(v25);
      goto LABEL_12;
    }
  }
  else if (a16 < 0)
  {
    goto LABEL_5;
  }
  if (*(char *)(v27 - 33) < 0) {
    goto LABEL_10;
  }
  goto LABEL_8;
}

MIL::Blob::StorageReader **std::unique_ptr<MIL::Blob::StorageReader>::~unique_ptr[abi:ne180100](MIL::Blob::StorageReader **a1)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Blob::StorageReader::~StorageReader(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void *E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel::Launch(uint64_t a1, uint64_t a2, void *a3)
{
  Buffer = (E5RT::BufferObject *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(a1, (const void **)(a1 + 96), a3);
  int v5 = *(_DWORD *)(a1 + 88);
  switch(v5)
  {
    case 9:
      uint64_t Data = MIL::Blob::StorageReader::GetDataView<signed char>();
      break;
    case 5:
      uint64_t Data = MIL::Blob::StorageReader::GetDataView<float>();
      break;
    case 4:
      uint64_t Data = MIL::Blob::StorageReader::GetDataView<MIL::Fp16>();
      break;
    default:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v14, "Launch");
      std::string::basic_string[abi:ne180100]<0>(v12, "Only fp32, fp16, and int8 are supported.");
      E5RT::Status::Status(v13, 2, v12);
      E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  unint64_t v7 = (const void *)Data;
  DataSpan = (void *)E5RT::BufferObject::GetDataSpan(Buffer);

  return memcpy(DataSpan, v7, v9);
}

void sub_1923544BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel::~TensorToTensorBufferLoadingWeightsKernel(id *this)
{
  *this = &unk_1EE2FCED0;

  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    int v2 = (MIL::Blob::StorageReader *)this[9];
    this[9] = 0;
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(this[12]);
  int v2 = (MIL::Blob::StorageReader *)this[9];
  this[9] = 0;
  if (v2)
  {
LABEL_3:
    MIL::Blob::StorageReader::~StorageReader(v2);
    MEMORY[0x192FF16B0]();
  }
LABEL_4:

  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)this);
}

{
  MIL::Blob::StorageReader *v2;
  uint64_t vars8;

  *this = &unk_1EE2FCED0;

  if (*((char *)this + 119) < 0)
  {
    operator delete(this[12]);
    int v2 = (MIL::Blob::StorageReader *)this[9];
    this[9] = 0;
    if (!v2)
    {
LABEL_4:
      E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)this);
      JUMPOUT(0x192FF16B0);
    }
  }
  else
  {
    int v2 = (MIL::Blob::StorageReader *)this[9];
    this[9] = 0;
    if (!v2) {
      goto LABEL_4;
    }
  }
  MIL::Blob::StorageReader::~StorageReader(v2);
  MEMORY[0x192FF16B0]();
  goto LABEL_4;
}

E5RT::AsyncComputeScheduler *E5RT::AsyncComputeScheduler::AsyncComputeScheduler(E5RT::AsyncComputeScheduler *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)this = 850045863;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 1018212795;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 41) = 0;
  int v2 = (void *)((char *)this + 336);
  *((void *)this + 45) = 0;
  *((unsigned char *)this + 368) = 0;
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.e5rt.serialCommandQueue", 0);
  unint64_t v4 = (void *)*((void *)this + 34);
  *((void *)this + 34) = v3;

  dispatch_queue_t v5 = dispatch_queue_create("com.apple.e5rt.concurrentExecutionQueue", MEMORY[0x1E4F14430]);
  uint64_t v6 = (void *)*((void *)this + 33);
  *((void *)this + 33) = v5;

  uint64_t v7 = [objc_alloc(MEMORY[0x1E4F2EF98]) initWithDispatchQueue:*((void *)this + 34)];
  unint64_t v8 = (void *)*((void *)this + 35);
  *((void *)this + 35) = v7;

  v10[0] = &unk_1EE3963D0;
  v10[1] = this;
  uint64_t v11 = v10;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v10, v2);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  return this;
}

void sub_19235487C(_Unwind_Exception *a1)
{
  std::function<BOOL ()(void)>::~function(v6);
  std::condition_variable::~condition_variable(v7);

  std::unordered_map<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>::~unordered_map[abi:ne180100](v5);
  std::unordered_map<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>::~unordered_map[abi:ne180100](v4);
  std::unordered_map<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>::~unordered_map[abi:ne180100](v3);
  std::unordered_map<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>::~unordered_map[abi:ne180100](v2);
  std::unordered_map<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>::~unordered_map[abi:ne180100](v1 + 64);
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t std::unordered_map<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[5];
      if (v6)
      {
        do
        {
          uint64_t v7 = (void *)*v6;
          operator delete(v6);
          uint64_t v6 = v7;
        }
        while (v7);
      }
      unint64_t v8 = (void *)v2[3];
      void v2[3] = 0;
      if (v8) {
        operator delete(v8);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unordered_map<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *v2;
      std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unordered_map<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unordered_map<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v5 = v2;
    uint64_t v2 = (void *)*v2;
    uint64_t v6 = (void *)v5[6];
    if (v6 == v5 + 3)
    {
      (*(void (**)(void *))(v5[3] + 32))(v5 + 3);
    }
    else if (v6)
    {
      (*(void (**)(void *))(*v6 + 40))(v6);
    }
    operator delete(v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void E5RT::AsyncComputeScheduler::RemoveTaskTimeoutTimer(E5RT::AsyncComputeScheduler *this, E5RT::AsyncTask *a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = (void *)((char *)this + 144);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((void *)this + 18, (uint64_t *)&v7);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (id)v3[3];
    if (!dispatch_source_testcancel(v5)) {
      dispatch_source_cancel(v5);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v2, v4, (uint64_t)&__p);
    uint64_t v6 = (id *)__p;
    std::string __p = 0;
    if (v6)
    {
      if (v9) {

      }
      operator delete(v6);
    }
  }
}

void *E5RT::AsyncComputeScheduler::RemoveTaskCompletionHandler@<X0>(E5RT::AsyncComputeScheduler *this@<X0>, E5RT::AsyncTask *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  std::string v10 = a2;
  uint64_t v4 = (void *)((char *)this + 104);
  uint64_t result = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((void *)this + 13, (uint64_t *)&v10);
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = (void *)result[6];
    if (v7)
    {
      if (v7 == v6 + 3)
      {
        std::string::size_type v14 = v13;
        (*(void (**)(void *, void *))(*v7 + 24))(v7, v13);
      }
      else
      {
        std::string::size_type v14 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
      }
    }
    else
    {
      std::string::size_type v14 = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v4, v6, (uint64_t)&__p);
    unint64_t v8 = __p;
    std::string __p = 0;
    if (v8)
    {
      if (v12)
      {
        char v9 = (void *)v8[6];
        if (v9 == v8 + 3)
        {
          (*(void (**)(void *))(v8[3] + 32))(v8 + 3);
        }
        else if (v9)
        {
          (*(void (**)(void *))(*v9 + 40))(v9);
        }
      }
      operator delete(v8);
    }
    if (v14)
    {
      if (v14 == v13)
      {
        *(void *)(a3 + 24) = a3;
        (*(void (**)(void *, uint64_t))(v13[0] + 24))(v13, a3);
      }
      else
      {
        *(void *)(a3 + 24) = v14;
        std::string::size_type v14 = 0;
      }
    }
    else
    {
      *(void *)(a3 + 24) = 0;
    }
    *(unsigned char *)(a3 + 32) = 1;
    uint64_t result = v14;
    if (v14 == v13)
    {
      return (void *)(*(uint64_t (**)(void *))(v13[0] + 32))(v13);
    }
    else if (v14)
    {
      return (void *)(*(uint64_t (**)(void))(*v14 + 40))();
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return result;
}

void sub_192354ED4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void E5RT::AsyncComputeScheduler::CleanupCompletedTask(uint64_t a1, E5RT::AsyncTask *a2, uint64_t *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  LOBYTE(v29[0]) = 0;
  char v31 = 0;
  std::mutex::lock((std::mutex *)a1);
  E5RT::AsyncComputeScheduler::RemoveTaskTimeoutTimer((E5RT::AsyncComputeScheduler *)a1, a2);
  E5RT::AsyncComputeScheduler::RemoveTaskCompletionHandler((E5RT::AsyncComputeScheduler *)a1, a2, (uint64_t)__p);
  std::__optional_storage_base<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>,false>>((uint64_t)v29, (uint64_t)__p);
  if (v28)
  {
    if (v27 == __p)
    {
      (*((void (**)(void **))__p[0] + 4))(__p);
    }
    else if (v27)
    {
      (*((void (**)(void))*v27 + 5))();
    }
  }
  uint8x8_t v24 = a2;
  unint64_t StreamId = E5RT::AsyncTask::GetStreamId(a2);
  __p[0] = &StreamId;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 64, &StreamId, (uint64_t)&std::piecewise_construct, (void **)__p)+ 24;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v6, (uint64_t *)&v24);
  if (v7)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v6, v7, (uint64_t)__p);
    unint64_t v8 = __p[0];
    __p[0] = 0;
    if (v8)
    {
      if (v26)
      {
        uint64_t v9 = v8[2];
        v8[2] = 0;
        if (v9) {
          std::default_delete<E5RT::AsyncTask>::operator()[abi:ne180100]((uint64_t)(v8 + 2), v9);
        }
      }
      operator delete(v8);
    }
  }
  uint8x8_t v24 = 0;
  __p[0] = &StreamId;
  if (*((void *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 64, &StreamId, (uint64_t)&std::piecewise_construct, (void **)__p)+ 6))goto LABEL_13; {
  int8x8_t v14 = *(int8x8_t *)(a1 + 72);
  }
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v16 = StreamId;
      if (StreamId >= *(void *)&v14) {
        unint64_t v16 = StreamId % *(void *)&v14;
      }
    }
    else
    {
      unint64_t v16 = (*(void *)&v14 - 1) & StreamId;
    }
    uint64_t v17 = *(uint64_t ***)(*(void *)(a1 + 64) + 8 * v16);
    if (v17)
    {
      uint64_t v18 = *v17;
      if (*v17)
      {
        if (v15.u32[0] < 2uLL)
        {
          uint64_t v19 = *(void *)&v14 - 1;
          while (1)
          {
            uint64_t v21 = v18[1];
            if (v21 == StreamId)
            {
              if (v18[2] == StreamId) {
                goto LABEL_48;
              }
            }
            else if ((v21 & v19) != v16)
            {
              goto LABEL_49;
            }
            uint64_t v18 = (uint64_t *)*v18;
            if (!v18) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v20 = v18[1];
          if (v20 == StreamId)
          {
            if (v18[2] == StreamId)
            {
LABEL_48:
              std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::erase((void *)(a1 + 64), v18);
              break;
            }
          }
          else
          {
            if (v20 >= *(void *)&v14) {
              v20 %= *(void *)&v14;
            }
            if (v20 != v16) {
              break;
            }
          }
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_49:
  if (!*(unsigned char *)(a1 + 368) || *(void *)(a1 + 88))
  {
LABEL_13:
    char v10 = 0;
    uint64_t v11 = (uint64_t)v24;
    uint8x8_t v24 = 0;
    if (!v11) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  *(unsigned char *)(a1 + 368) = 0;
  std::mutex::unlock((std::mutex *)a1);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 288));
  char v10 = 1;
  uint64_t v11 = (uint64_t)v24;
  uint8x8_t v24 = 0;
  if (v11) {
LABEL_14:
  }
    std::default_delete<E5RT::AsyncTask>::operator()[abi:ne180100]((uint64_t)&v24, v11);
LABEL_15:
  if ((v10 & 1) == 0) {
    std::mutex::unlock((std::mutex *)a1);
  }
  if (v31)
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    uint64_t v22 = v12;
    if (!v30) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *, uint64_t *))(*v30 + 48))(v30, &v22);
    uint64_t v13 = v22;
    uint64_t v22 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (v31)
    {
      if (v30 == v29)
      {
        (*(void (**)(void *))(v29[0] + 32))(v29);
      }
      else if (v30)
      {
        (*(void (**)(void))(*v30 + 40))();
      }
    }
  }
}

void sub_1923552C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192355314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v6 = v7;
  uint64_t v7 = 0;
  if (v6) {
    std::default_delete<E5RT::AsyncTask>::operator()[abi:ne180100]((uint64_t)va, v6);
  }
  std::mutex::unlock(v4);
  std::optional<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>::~optional((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>::~optional(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return a1;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != a1)
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return a1;
}

void E5RT::AsyncComputeScheduler::ProcessEventNotification(std::mutex *this, const E5RT::AsyncEvent *a2, unint64_t a3)
{
  unint64_t v51 = a3;
  unint64_t v52 = a2;
  std::mutex::lock(this);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(&this[3].__m_.__opaque[24], (uint64_t *)&v52);
  uint64_t v6 = v5;
  if (v5)
  {
    int8x8_t v7 = (int8x8_t)v5[4];
    if (!*(void *)&v7) {
      goto LABEL_24;
    }
    unint64_t v8 = v5 + 3;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = a3;
      if (*(void *)&v7 <= a3) {
        unint64_t v10 = a3 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v7 - 1) & a3;
    }
    uint64_t v12 = *(void ***)(*v8 + 8 * v10);
    if (!v12 || (uint64_t v13 = *v12) == 0)
    {
LABEL_24:
      if (std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52))
      {
        uint64_t v17 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52);
        if (!v17) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        for (uint64_t i = (void *)v17[4]; i; uint64_t i = (void *)*i)
        {
          unint64_t v19 = i[4];
          if (v51 >= v19)
          {
            if (v19 >= v51)
            {
              exception = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(__p, "ProcessEventNotification");
              std::string::basic_string[abi:ne180100]<0>(v49, "There should be no pending dependent tasks if we unsubscribed for notifications from the event.");
              E5RT::Status::Status(v50, 11, v49);
              E5RT::E5RTError::E5RTError(exception, __p, v50);
            }
            ++i;
          }
        }
      }
      goto LABEL_42;
    }
    if (v9.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v7 - 1;
      while (1)
      {
        uint64_t v16 = v13[1];
        if (v16 == a3)
        {
          if (v13[2] == a3) {
            goto LABEL_32;
          }
        }
        else if ((v16 & v14) != v10)
        {
          goto LABEL_24;
        }
        uint64_t v13 = (void *)*v13;
        if (!v13) {
          goto LABEL_24;
        }
      }
    }
    while (1)
    {
      unint64_t v15 = v13[1];
      if (v15 == a3)
      {
        if (v13[2] == a3)
        {
LABEL_32:
          std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v8, v13, (uint64_t)__p);
          unint64_t v20 = __p[0];
          __p[0] = 0;
          if (v20) {
            operator delete(v20);
          }
          if (!v6[6])
          {
            std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(&this[3].__m_.__opaque[24], v6, (uint64_t)__p);
            uint64_t v21 = __p[0];
            __p[0] = 0;
            if (v21)
            {
              if (v54)
              {
                uint64_t v22 = (void *)v21[5];
                if (v22)
                {
                  do
                  {
                    int v23 = (void *)*v22;
                    operator delete(v22);
                    uint64_t v22 = v23;
                  }
                  while (v23);
                }
                uint8x8_t v24 = (void *)v21[3];
                void v21[3] = 0;
                if (v24) {
                  operator delete(v24);
                }
              }
              operator delete(v21);
            }
          }
          goto LABEL_42;
        }
      }
      else
      {
        if (v15 >= *(void *)&v7) {
          v15 %= *(void *)&v7;
        }
        if (v15 != v10) {
          goto LABEL_24;
        }
      }
      uint64_t v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_24;
      }
    }
  }
  if (std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52))
  {
    uint64_t v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "ProcessEventNotification");
    std::string::basic_string[abi:ne180100]<0>(v49, "There should be no pending dependent tasks if we unsubscribed for notifications from the event.");
    E5RT::Status::Status(v50, 11, v49);
    E5RT::E5RTError::E5RTError(v11, __p, v50);
  }
LABEL_42:
  if (!std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52))goto LABEL_89; {
  __p[0] = &v52;
  }
  uint64_t v25 = (uint64_t **)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)&this[2].__m_.__opaque[48], (uint64_t *)&v52, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
  char v26 = v25;
  uint64_t v27 = v25[4];
  if (!v27) {
    goto LABEL_89;
  }
  char v28 = v25[4];
  while (1)
  {
    unint64_t v29 = v28[4];
    if (v51 >= v29) {
      break;
    }
LABEL_45:
    char v28 = (uint64_t *)*v28;
    if (!v28) {
      goto LABEL_89;
    }
  }
  if (v29 < v51)
  {
    ++v28;
    goto LABEL_45;
  }
  float v30 = v25[4];
  while (1)
  {
    while (1)
    {
      unint64_t v31 = v30[4];
      if (v51 >= v31) {
        break;
      }
      float v30 = (uint64_t *)*v30;
      if (!v30) {
        goto LABEL_54;
      }
    }
    if (v31 >= v51) {
      break;
    }
    float v30 = (uint64_t *)v30[1];
    if (!v30) {
LABEL_54:
    }
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  if (!v30[8]) {
    goto LABEL_89;
  }
  uint64_t v32 = v25[4];
  while (1)
  {
    while (1)
    {
      unint64_t v33 = v32[4];
      if (v51 >= v33) {
        break;
      }
      uint64_t v32 = (uint64_t *)*v32;
      if (!v32) {
        goto LABEL_61;
      }
    }
    if (v33 >= v51) {
      break;
    }
    uint64_t v32 = (uint64_t *)v32[1];
    if (!v32) {
LABEL_61:
    }
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  uint64_t v34 = (void *)v32[7];
  while (2)
  {
    unint64_t v35 = v27;
    while (2)
    {
      unint64_t v36 = v35[4];
      if (v51 < v36)
      {
LABEL_65:
        unint64_t v35 = (uint64_t *)*v35;
        if (!v35) {
          goto LABEL_88;
        }
        continue;
      }
      break;
    }
    if (v36 < v51)
    {
      ++v35;
      goto LABEL_65;
    }
    long long v37 = v27;
    while (1)
    {
      while (1)
      {
        unint64_t v38 = v37[4];
        if (v51 >= v38) {
          break;
        }
        long long v37 = (uint64_t *)*v37;
        if (!v37) {
          goto LABEL_96;
        }
      }
      if (v38 >= v51) {
        break;
      }
      long long v37 = (uint64_t *)v37[1];
      if (!v37) {
LABEL_96:
      }
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    if (v34)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v39 = v27[4];
          if (v51 >= v39) {
            break;
          }
          uint64_t v27 = (uint64_t *)*v27;
          if (!v27) {
            goto LABEL_97;
          }
        }
        if (v39 >= v51) {
          break;
        }
        uint64_t v27 = (uint64_t *)v27[1];
        if (!v27) {
LABEL_97:
        }
          std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
      }
      uint64_t v40 = (E5RT::AsyncTask *)v34[2];
      uint64_t DependentEvents = E5RT::AsyncTask::GetDependentEvents(v40);
      E5RT::AsyncTask::RemoveDependency(v40, v52);
      unint64_t v42 = (void *)*v34;
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v27 + 5, v34, (uint64_t)__p);
      unint64_t v43 = __p[0];
      __p[0] = 0;
      if (v43) {
        operator delete(v43);
      }
      if (!v27[8]) {
        std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::__erase_unique<unsigned long long>(v26 + 3, &v51);
      }
      if (!*(void *)(DependentEvents + 24))
      {
        E5RT::AsyncTask::MarkDispatched((uint64_t)v40);
        uint64_t v44 = *(NSObject **)this[4].__m_.__opaque;
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_192355B08;
        block[3] = &__block_descriptor_48_e5_v8__0l;
        block[4] = this;
        block[5] = v40;
        dispatch_async(v44, block);
      }
      uint64_t v27 = v26[4];
      uint64_t v34 = v42;
      if (v27) {
        continue;
      }
    }
    break;
  }
LABEL_88:
  if (!v26[5])
  {
    int v45 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(&this[2].__m_.__opaque[48], (uint64_t *)&v52);
    if (v45)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(&this[2].__m_.__opaque[48], v45, (uint64_t)__p);
      char v46 = (void **)__p[0];
      __p[0] = 0;
      if (v46)
      {
        if (v54) {
          std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy((uint64_t)(v46 + 3), v46[4]);
        }
        operator delete(v46);
      }
    }
  }
LABEL_89:
  std::mutex::unlock(this);
}

void sub_1923559C8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1923559DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a30 < 0)
  {
    operator delete(a25);
    if ((v32 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v32)
  {
LABEL_8:
    std::mutex::unlock(v30);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

uint64_t sub_192355B08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  E5RT::AsyncTask::SafeExecuteTask(*(E5RT::AsyncTask **)(a1 + 40), &v6);
  uint64_t v3 = *(E5RT::AsyncTask **)(a1 + 40);
  uint64_t v5 = v6;
  uint64_t v6 = 0;
  E5RT::AsyncComputeScheduler::CleanupCompletedTask(v2, v3, &v5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_192355BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    sub_1922FDF50();
  }
  sub_19235A6C8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5RT::AsyncComputeScheduler::CancelTimedOutAsyncTask(std::mutex *this, E5RT::AsyncTask *a2)
{
  std::mutex::lock(this);
  if (E5RT::AsyncTask::Dispatched(a2))
  {
    std::mutex::unlock(this);
  }
  else
  {
    E5RT::AsyncComputeScheduler::RemoveTaskDependencies((E5RT::AsyncComputeScheduler *)this, a2);
    std::mutex::unlock(this);
    uint64_t v4 = *(NSObject **)this[4].__m_.__opaque;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = sub_192356004;
    void v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = this;
    void v5[5] = a2;
    dispatch_async(v4, v5);
  }
}

void sub_192355C98(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::AsyncComputeScheduler::RemoveTaskDependencies(E5RT::AsyncComputeScheduler *this, E5RT::AsyncTask *a2)
{
  uint64_t v34 = a2;
  uint64_t result = E5RT::AsyncTask::Dispatched(a2);
  if ((result & 1) == 0)
  {
    uint64_t result = E5RT::AsyncTask::GetDependentEvents(a2);
    uint64_t v5 = *(void **)(result + 16);
    if (v5)
    {
      uint64_t v6 = (void *)((char *)this + 184);
      unint64_t v33 = (void *)((char *)this + 224);
      do
      {
        __p[0] = v5 + 2;
        int8x8_t v7 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v6, v5 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        unint64_t v8 = v7;
        unint64_t v9 = v5[3];
        uint64_t v11 = (uint64_t **)(v7 + 4);
        unint64_t v10 = (char *)v7[4];
        if (v10)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v12 = v10;
              unint64_t v13 = *((void *)v10 + 4);
              if (v9 >= v13) {
                break;
              }
              unint64_t v10 = *(char **)v12;
              uint64_t v11 = (uint64_t **)v12;
              if (!*(void *)v12) {
                goto LABEL_12;
              }
            }
            if (v13 >= v9) {
              break;
            }
            unint64_t v10 = (char *)*((void *)v12 + 1);
            if (!v10)
            {
              uint64_t v11 = (uint64_t **)(v12 + 8);
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v12 = (char *)(v7 + 4);
LABEL_12:
          uint64_t v14 = v12;
          uint64_t v12 = (char *)operator new(0x50uLL);
          *((void *)v12 + 4) = v9;
          *(_OWORD *)(v12 + 40) = 0u;
          *(_OWORD *)(v12 + 56) = 0u;
          *((_DWORD *)v12 + 18) = 1065353216;
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + 1) = 0;
          *((void *)v12 + 2) = v14;
          *uint64_t v11 = (uint64_t *)v12;
          uint64_t v15 = *(void *)v8[3];
          uint64_t v16 = (uint64_t *)v12;
          if (v15)
          {
            void v8[3] = v15;
            uint64_t v16 = *v11;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v8[4], v16);
          ++v8[5];
        }
        uint64_t v17 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((void *)v12 + 5, (uint64_t *)&v34);
        if (v17)
        {
          std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove((void *)v12 + 5, v17, (uint64_t)__p);
          uint64_t v18 = __p[0];
          __p[0] = 0;
          if (v18) {
            operator delete(v18);
          }
        }
        __p[0] = v5 + 2;
        unint64_t v19 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v6, v5 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        unint64_t v20 = v19;
        uint64_t v22 = (uint64_t **)(v19 + 4);
        uint64_t v21 = (char *)v19[4];
        unint64_t v23 = v5[3];
        if (v21)
        {
          while (1)
          {
            while (1)
            {
              uint8x8_t v24 = v21;
              unint64_t v25 = *((void *)v21 + 4);
              if (v23 >= v25) {
                break;
              }
              uint64_t v21 = *(char **)v24;
              uint64_t v22 = (uint64_t **)v24;
              if (!*(void *)v24) {
                goto LABEL_25;
              }
            }
            if (v25 >= v23) {
              break;
            }
            uint64_t v21 = (char *)*((void *)v24 + 1);
            if (!v21)
            {
              uint64_t v22 = (uint64_t **)(v24 + 8);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint8x8_t v24 = (char *)(v19 + 4);
LABEL_25:
          char v26 = v24;
          uint8x8_t v24 = (char *)operator new(0x50uLL);
          *((void *)v24 + 4) = v23;
          *(_OWORD *)(v24 + 40) = 0u;
          *(_OWORD *)(v24 + 56) = 0u;
          *((_DWORD *)v24 + 18) = 1065353216;
          *(void *)uint8x8_t v24 = 0;
          *((void *)v24 + 1) = 0;
          *((void *)v24 + 2) = v26;
          void *v22 = (uint64_t *)v24;
          uint64_t v27 = *(void *)v20[3];
          char v28 = (uint64_t *)v24;
          if (v27)
          {
            void v20[3] = v27;
            char v28 = *v22;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v20[4], v28);
          ++v20[5];
        }
        if (!*((void *)v24 + 8))
        {
          __p[0] = v5 + 2;
          unint64_t v29 = (uint64_t **)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v6, v5 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
          std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::__erase_unique<unsigned long long>(v29 + 3, v5 + 3);
        }
        __p[0] = v5 + 2;
        if (!std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v6, v5 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[5])
        {
          unint64_t v31 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v6, v5 + 2);
          if (v31)
          {
            std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v6, v31, (uint64_t)__p);
            int v32 = (void **)__p[0];
            __p[0] = 0;
            if (v32)
            {
              if (v36) {
                std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy((uint64_t)(v32 + 3), v32[4]);
              }
              operator delete(v32);
            }
          }
        }
        __p[0] = v5 + 2;
        float v30 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v33, v5 + 2, (uint64_t)&std::piecewise_construct, (void **)__p);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((void *)v30 + 3, v5 + 3);
        __p[0] = v5 + 2;
        uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v33, v5 + 2, (uint64_t)&std::piecewise_construct, (void **)__p);
        if (!*(void *)(result + 48)) {
          uint64_t result = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__erase_unique<E5RT::AsyncEvent const*>(v33, v5 + 2);
        }
        uint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
  }
  return result;
}

void sub_192356004(uint64_t a1)
{
  E5RT::AsyncTask::GetAsyncTaskName(*(E5RT::AsyncTask **)(a1 + 40));
  std::operator+<char>();
  uint64_t v1 = std::string::append(&v4, " has timed out.");
  long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  std::string::size_type v6 = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  E5RT::Status::Status(v3, 10, __p);
  v4.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v4.__r_.__value_.__r.__words[1] = xmmword_192DB2880;
  strcpy(v4.__r_.__value_.__l.__data_, "CancelTimedOutAsyncTask_block_invoke");
  operator new();
}

void sub_19235617C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a10)
  {
    sub_1922FDF50();
    E5RT::Status::~Status((E5RT::Status *)&a11);
    if ((a23 & 0x80000000) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    E5RT::Status::~Status((E5RT::Status *)&a11);
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  operator delete(__p);
  goto LABEL_6;
}

void sub_19235624C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    JUMPOUT(0x192356244);
  }
  JUMPOUT(0x19235623CLL);
}

void sub_19235625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    JUMPOUT(0x192356240);
  }
  JUMPOUT(0x192356244);
}

void E5RT::AsyncComputeScheduler::SubmitAsyncCompute(uint64_t a1, E5RT::AsyncTask **a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v63, "SubmitAsyncCompute");
    std::string::basic_string[abi:ne180100]<0>(v62, "Invalid async task.");
    E5RT::Status::Status(&__lk, 1, v62);
    E5RT::E5RTError::E5RTError(exception, v63, &__lk);
  }
  uint64_t StreamId = E5RT::AsyncTask::GetStreamId(*a2);
  uint64_t DependentEvents = E5RT::AsyncTask::GetDependentEvents(*a2);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)a1;
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)a1);
  if (*(unsigned char *)(a1 + 368))
  {
    uint64_t v11 = *(void *)(a1 + 360);
    if (!v11)
    {
      __n128 v65 = 0;
      goto LABEL_10;
    }
    if (v11 != a1 + 336)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
      __n128 v65 = (void *)v12;
      if (v12) {
        goto LABEL_8;
      }
LABEL_10:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    __n128 v65 = v64;
    (*(void (**)(uint64_t, void *))(*(void *)v11 + 24))(v11, v64);
    uint64_t v12 = (uint64_t)v65;
    if (!v65) {
      goto LABEL_10;
    }
LABEL_8:
    while (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12) & 1) == 0)
    {
      std::condition_variable::wait((std::condition_variable *)(a1 + 288), &__lk);
      uint64_t v12 = (uint64_t)v65;
      if (!v65) {
        goto LABEL_10;
      }
    }
    if (v65 == v64)
    {
      (*(void (**)(void *))(v64[0] + 32))(v64);
    }
    else if (v65)
    {
      (*(void (**)(void *))(*v65 + 40))(v65);
    }
  }
  char v53 = a5;
  uint64_t v59 = *a2;
  v63[0] = &StreamId;
  unint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 64, (unint64_t *)&StreamId, (uint64_t)&std::piecewise_construct, v63);
  std::__hash_table<std::unique_ptr<E5RT::AsyncTask>,std::hash<std::unique_ptr<E5RT::AsyncTask>>,std::equal_to<std::unique_ptr<E5RT::AsyncTask>>,std::allocator<std::unique_ptr<E5RT::AsyncTask>>>::__emplace_unique_key_args<std::unique_ptr<E5RT::AsyncTask>,std::unique_ptr<E5RT::AsyncTask>>((uint64_t)(v13 + 24), (uint64_t *)a2, (uint64_t *)a2);
  if (*(unsigned char *)(a3 + 32))
  {
    v63[0] = (uint64_t *)&v59;
    uint64_t v15 = std::__hash_table<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::__unordered_map_hasher<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,true>,std::__unordered_map_equal<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::equal_to<E5RT::AsyncTask *>,std::hash<E5RT::AsyncTask *>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>>>::__emplace_unique_key_args<E5RT::AsyncTask *,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncTask * const&>,std::tuple<>>(a1 + 104, (uint64_t *)&v59, (uint64_t)&std::piecewise_construct, v63)+ 6;
    uint64_t v14 = (void *)*v15;
    uint64_t v16 = v15 - 3;
    *uint64_t v15 = 0;
    if (v14 == v15 - 3)
    {
      (*(void (**)(void *))(*v16 + 32))(v15 - 3);
      uint64_t v17 = (void *)(a3 + 24);
      uint64_t v18 = *(void *)(a3 + 24);
      if (v18)
      {
LABEL_20:
        if (v18 == a3)
        {
          *uint64_t v15 = v16;
          (*(void (**)(void, void *))(*(void *)*v17 + 24))(*v17, v15 - 3);
        }
        else
        {
          *uint64_t v15 = v18;
          void *v17 = 0;
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (v14) {
        (*(void (**)(void *))(*v14 + 40))(v14);
      }
      uint64_t v17 = (void *)(a3 + 24);
      uint64_t v18 = *(void *)(a3 + 24);
      if (v18) {
        goto LABEL_20;
      }
    }
    *uint64_t v15 = 0;
  }
LABEL_25:
  uint64_t v52 = a4;
  unint64_t v19 = *(uint64_t ***)(DependentEvents + 16);
  if (!v19) {
    goto LABEL_69;
  }
  uint64_t v20 = 0;
  do
  {
    uint64_t v58 = (E5RT::AsyncEvent *)v19[2];
    uint64_t v21 = E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>((uint64_t)v58);
    unint64_t v57 = (unint64_t)v19[3];
    unint64_t LastSignaledValue = E5RT::AsyncEvent::GetLastSignaledValue(v58);
    if (LastSignaledValue >= v57)
    {
      unint64_t v19 = (uint64_t **)*v19;
      E5RT::AsyncTask::RemoveDependency(v59, v58);
    }
    else
    {
      v63[0] = (uint64_t *)&v58;
      unint64_t v23 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(a1 + 184, (uint64_t *)&v58, (uint64_t)&std::piecewise_construct, v63);
      uint8x8_t v24 = v23;
      char v26 = (uint64_t **)(v23 + 4);
      unint64_t v25 = (uint64_t *)v23[4];
      unint64_t v27 = v57;
      if (v25)
      {
        while (1)
        {
          while (1)
          {
            char v28 = (uint64_t **)v25;
            unint64_t v29 = v25[4];
            if (v57 >= v29) {
              break;
            }
            unint64_t v25 = *v28;
            char v26 = v28;
            if (!*v28) {
              goto LABEL_35;
            }
          }
          if (v29 >= v57) {
            break;
          }
          unint64_t v25 = v28[1];
          if (!v25)
          {
            char v26 = v28 + 1;
            goto LABEL_35;
          }
        }
        float v30 = (char *)v28;
      }
      else
      {
        char v28 = (uint64_t **)(v23 + 4);
LABEL_35:
        float v30 = (char *)operator new(0x50uLL);
        *((void *)v30 + 4) = v27;
        *(_OWORD *)(v30 + 40) = 0u;
        *(_OWORD *)(v30 + 56) = 0u;
        *((_DWORD *)v30 + 18) = 1065353216;
        *(void *)float v30 = 0;
        *((void *)v30 + 1) = 0;
        *((void *)v30 + 2) = v28;
        *char v26 = (uint64_t *)v30;
        uint64_t v31 = *(void *)v24[3];
        int v32 = (uint64_t *)v30;
        if (v31)
        {
          void v24[3] = v31;
          int v32 = *v26;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v24[4], v32);
        ++v24[5];
      }
      std::__hash_table<E5RT::AsyncTask *,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,std::allocator<E5RT::AsyncTask *>>::__emplace_unique_key_args<E5RT::AsyncTask *,E5RT::AsyncTask * const&>((uint64_t)(v30 + 40), (uint64_t *)&v59, &v59);
      if (std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>((void *)(a1 + 224), (uint64_t *)&v58))
      {
        unint64_t v33 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>((void *)(a1 + 224), (uint64_t *)&v58);
        if (!v33) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        int8x8_t v34 = (int8x8_t)v33[4];
        if (v34)
        {
          uint8x8_t v35 = (uint8x8_t)vcnt_s8(v34);
          v35.i16[0] = vaddlv_u8(v35);
          if (v35.u32[0] > 1uLL)
          {
            unint64_t v36 = v57;
            if (v57 >= *(void *)&v34) {
              unint64_t v36 = v57 % *(void *)&v34;
            }
          }
          else
          {
            unint64_t v36 = (*(void *)&v34 - 1) & v57;
          }
          long long v37 = *(void **)(v33[3] + 8 * v36);
          if (v37)
          {
            unint64_t v38 = (void *)*v37;
            if (v38)
            {
              if (v35.u32[0] < 2uLL)
              {
                uint64_t v39 = *(void *)&v34 - 1;
                while (1)
                {
                  uint64_t v41 = v38[1];
                  if (v57 == v41)
                  {
                    if (v38[2] == v57) {
                      goto LABEL_64;
                    }
                  }
                  else if ((v41 & v39) != v36)
                  {
                    goto LABEL_62;
                  }
                  unint64_t v38 = (void *)*v38;
                  if (!v38) {
                    goto LABEL_62;
                  }
                }
              }
              do
              {
                unint64_t v40 = v38[1];
                if (v57 == v40)
                {
                  if (v38[2] == v57) {
                    goto LABEL_64;
                  }
                }
                else
                {
                  if (v40 >= *(void *)&v34) {
                    v40 %= *(void *)&v34;
                  }
                  if (v40 != v36) {
                    break;
                  }
                }
                unint64_t v38 = (void *)*v38;
              }
              while (v38);
            }
          }
        }
      }
LABEL_62:
      v63[0] = (uint64_t *)&v58;
      unint64_t v42 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(a1 + 224, (uint64_t *)&v58, (uint64_t)&std::piecewise_construct, v63);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)(v42 + 24), &v57, &v57);
      if (!v21)
      {
        uint64_t v50 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v63, "SubmitAsyncCompute");
        std::string::basic_string[abi:ne180100]<0>(v62, "ioSurfaceSharedEvent is nil, the listener will never be called.");
        E5RT::Status::Status(v56, 11, v62);
        E5RT::E5RTError::E5RTError(v50, v63, v56);
      }
      uint64_t v43 = *(void *)(a1 + 280);
      void block[6] = MEMORY[0x1E4F143A8];
      block[7] = 3221225472;
      block[8] = sub_192356C4C;
      block[9] = &__block_descriptor_56_e33_v24__0__IOSurfaceSharedEvent_8Q16l;
      block[10] = a1;
      block[11] = v58;
      block[12] = v57;
      objc_msgSend(v21, "notifyListener:atValue:block:", v43);
LABEL_64:
      unint64_t v19 = (uint64_t **)*v19;
      ++v20;
    }
  }
  while (v19);
  if (v20)
  {
    if (v53)
    {
      uint64_t v44 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 1uLL, *(dispatch_queue_t *)(a1 + 272));
      dispatch_time_t v45 = dispatch_time(0, 1000000 * v52);
      dispatch_source_set_timer(v44, v45, 0xFFFFFFFFFFFFFFFFLL, 0);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = sub_192356D24;
      handler[3] = &__block_descriptor_48_e5_v8__0l;
      handler[4] = a1;
      handler[5] = v59;
      dispatch_source_set_event_handler(v44, handler);
      v63[0] = (uint64_t *)&v59;
      char v46 = std::__hash_table<std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::__unordered_map_hasher<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,true>,std::__unordered_map_equal<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::equal_to<E5RT::AsyncTask *>,std::hash<E5RT::AsyncTask *>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>>>::__emplace_unique_key_args<E5RT::AsyncTask *,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncTask * const&>,std::tuple<>>(a1 + 144, (uint64_t *)&v59, (uint64_t)&std::piecewise_construct, v63);
      long long v47 = (void *)v46[3];
      void v46[3] = v44;
      size_t v48 = v44;

      dispatch_activate(v48);
    }
  }
  else
  {
LABEL_69:
    E5RT::AsyncTask::MarkDispatched((uint64_t)v59);
    int v49 = *(NSObject **)(a1 + 264);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_192356C5C;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = a1;
    block[5] = v59;
    dispatch_async(v49, block);
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_192356AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::mutex *a36,char a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192356C4C(uint64_t a1)
{
}

uint64_t sub_192356C5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  E5RT::AsyncTask::SafeExecuteTask(*(E5RT::AsyncTask **)(a1 + 40), &v6);
  uint64_t v3 = *(E5RT::AsyncTask **)(a1 + 40);
  uint64_t v5 = v6;
  uint64_t v6 = 0;
  E5RT::AsyncComputeScheduler::CleanupCompletedTask(v2, v3, &v5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_192356D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    sub_1922FDF50();
  }
  sub_19235A6C8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192356D24(uint64_t a1)
{
}

void E5RT::AsyncComputeScheduler::FlushStreamTasks(std::mutex *this, unint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)unint64_t v67 = 0u;
  *(_OWORD *)unint64_t v68 = 0u;
  int v69 = 1065353216;
  std::mutex::lock(this);
  int8x8_t v4 = *(int8x8_t *)this[1].__m_.__opaque;
  if (!*(void *)&v4) {
    goto LABEL_137;
  }
  uint64_t v5 = this + 1;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = a2;
    if (*(void *)&v4 <= a2) {
      unint64_t v7 = a2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v4 - 1) & a2;
  }
  unint64_t v8 = *(void **)(v5->__m_.__sig + 8 * v7);
  if (!v8) {
    goto LABEL_137;
  }
  unint64_t v9 = (void *)*v8;
  if (!*v8) {
    goto LABEL_137;
  }
  uint64_t v10 = *(void *)&v4 - 1;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == a2)
      {
        if (v9[2] == a2) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v10) != v7)
      {
        goto LABEL_137;
      }
      unint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_137;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v9[1];
    if (v12 == a2) {
      break;
    }
    if (v12 >= *(void *)&v4) {
      v12 %= *(void *)&v4;
    }
    if (v12 != v7) {
      goto LABEL_137;
    }
LABEL_16:
    unint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_137;
    }
  }
  if (v9[2] != a2) {
    goto LABEL_16;
  }
LABEL_22:
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v13 = a2;
    if (*(void *)&v4 <= a2) {
      unint64_t v13 = a2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v13 = v10 & a2;
  }
  uint64_t v14 = *(void **)(v5->__m_.__sig + 8 * v13);
  if (!v14 || (uint64_t v15 = (void *)*v14) == 0) {
LABEL_173:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v15[1];
      if (v16 == a2)
      {
        if (v15[2] == a2) {
          goto LABEL_34;
        }
      }
      else if ((v16 & v10) != v13)
      {
        goto LABEL_173;
      }
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_173;
      }
    }
  }
  while (2)
  {
    unint64_t v18 = v15[1];
    if (v18 != a2)
    {
      if (v18 >= *(void *)&v4) {
        v18 %= *(void *)&v4;
      }
      if (v18 != v13) {
        goto LABEL_173;
      }
      goto LABEL_36;
    }
    if (v15[2] != a2)
    {
LABEL_36:
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_173;
      }
      continue;
    }
    break;
  }
LABEL_34:
  uint64_t v17 = (uint64_t *)v15[5];
LABEL_44:
  while (2)
  {
    uint8x8_t v19 = (uint8x8_t)vcnt_s8(v4);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      unint64_t v20 = a2;
      if (*(void *)&v4 <= a2) {
        unint64_t v20 = a2 % *(void *)&v4;
      }
    }
    else
    {
      unint64_t v20 = (*(void *)&v4 - 1) & a2;
    }
    uint64_t sig = v5->__m_.__sig;
    uint64_t v22 = *(void **)(v5->__m_.__sig + 8 * v20);
    if (!v22 || (unint64_t v23 = (void *)*v22) == 0) {
LABEL_123:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    uint64_t v24 = *(void *)&v4 - 1;
    if (v19.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v25 = v23[1];
        if (v25 == a2)
        {
          if (v23[2] == a2) {
            goto LABEL_56;
          }
        }
        else if ((v25 & v24) != v20)
        {
          goto LABEL_123;
        }
        unint64_t v23 = (void *)*v23;
        if (!v23) {
          goto LABEL_123;
        }
      }
    }
    while (2)
    {
      unint64_t v33 = v23[1];
      if (v33 != a2)
      {
        if (v33 >= *(void *)&v4) {
          v33 %= *(void *)&v4;
        }
        if (v33 != v20) {
          goto LABEL_123;
        }
        goto LABEL_63;
      }
      if (v23[2] != a2)
      {
LABEL_63:
        unint64_t v23 = (void *)*v23;
        if (!v23) {
          goto LABEL_123;
        }
        continue;
      }
      break;
    }
LABEL_56:
    if (v17)
    {
      if (E5RT::AsyncTask::Dispatched((E5RT::AsyncTask *)v17[2]))
      {
        unint64_t CompletionEvent = 0;
        unint64_t CompletionEvent = E5RT::AsyncTask::GetCompletionEvent((E5RT::AsyncTask *)v17[2]);
        uint64_t CompletionEventValue = E5RT::AsyncTask::GetCompletionEventValue((E5RT::AsyncTask *)v17[2]);
        if (CompletionEvent)
        {
          unint64_t v27 = CompletionEventValue;
          if (v67[1])
          {
            unint64_t v28 = 0x9DDFEA08EB382D69 * (((8 * CompletionEvent) + 8) ^ HIDWORD(CompletionEvent));
            unint64_t v29 = 0x9DDFEA08EB382D69 * (HIDWORD(CompletionEvent) ^ (v28 >> 47) ^ v28);
            unint64_t v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47));
            uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v67[1]);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              unint64_t v32 = v30;
              if ((void *)v30 >= v67[1]) {
                unint64_t v32 = v30 % (unint64_t)v67[1];
              }
            }
            else
            {
              unint64_t v32 = ((unint64_t)v67[1] - 1) & v30;
            }
            dispatch_time_t v45 = (void *)*((void *)v67[0] + v32);
            if (v45)
            {
              char v46 = (void *)*v45;
              if (v46)
              {
                if (v31.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v48 = v46[1];
                    if (v30 == v48)
                    {
                      if (v46[2] == CompletionEvent) {
                        goto LABEL_119;
                      }
                    }
                    else if ((v48 & ((uint64_t)v67[1] - 1)) != v32)
                    {
                      goto LABEL_42;
                    }
                    char v46 = (void *)*v46;
                    if (!v46) {
                      goto LABEL_42;
                    }
                  }
                }
                do
                {
                  unint64_t v47 = v46[1];
                  if (v30 == v47)
                  {
                    if (v46[2] == CompletionEvent)
                    {
LABEL_119:
                      __p[0] = &CompletionEvent;
                      unint64_t v49 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v67, (uint64_t *)&CompletionEvent, (uint64_t)&std::piecewise_construct, (void **)__p)[3];
                      __p[0] = &CompletionEvent;
                      uint64_t v50 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v67, (uint64_t *)&CompletionEvent, (uint64_t)&std::piecewise_construct, (void **)__p);
                      if (v49 <= v27) {
                        unint64_t v51 = v27;
                      }
                      else {
                        unint64_t v51 = v49;
                      }
                      v50[3] = v51;
                      uint64_t v17 = (uint64_t *)*v17;
                      int8x8_t v4 = *(int8x8_t *)this[1].__m_.__opaque;
                      if (!*(void *)&v4) {
                        goto LABEL_123;
                      }
                      goto LABEL_44;
                    }
                  }
                  else
                  {
                    if ((void *)v47 >= v67[1]) {
                      v47 %= (unint64_t)v67[1];
                    }
                    if (v47 != v32) {
                      break;
                    }
                  }
                  char v46 = (void *)*v46;
                }
                while (v46);
              }
            }
          }
LABEL_42:
          __p[0] = &CompletionEvent;
          std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>((uint64_t)v67, (uint64_t *)&CompletionEvent, (uint64_t)&std::piecewise_construct, (void **)__p)[3] = CompletionEventValue;
        }
        uint64_t v17 = (uint64_t *)*v17;
        int8x8_t v4 = *(int8x8_t *)this[1].__m_.__opaque;
        if (!*(void *)&v4) {
          goto LABEL_123;
        }
        continue;
      }
      E5RT::AsyncComputeScheduler::RemoveTaskDependencies((E5RT::AsyncComputeScheduler *)this, (E5RT::AsyncTask *)v17[2]);
      E5RT::AsyncComputeScheduler::RemoveTaskTimeoutTimer((E5RT::AsyncComputeScheduler *)this, (E5RT::AsyncTask *)v17[2]);
      E5RT::AsyncComputeScheduler::RemoveTaskCompletionHandler((E5RT::AsyncComputeScheduler *)this, (E5RT::AsyncTask *)v17[2], (uint64_t)v72);
      if (v74)
      {
        if (v73 == v72)
        {
          (*(void (**)(void *))(v72[0] + 32))(v72);
        }
        else if (v73)
        {
          (*(void (**)(void))(*v73 + 40))();
        }
      }
      int8x8_t v34 = *(int8x8_t *)this[1].__m_.__opaque;
      if (!*(void *)&v34) {
        goto LABEL_172;
      }
      uint8x8_t v35 = (uint8x8_t)vcnt_s8(v34);
      v35.i16[0] = vaddlv_u8(v35);
      if (v35.u32[0] > 1uLL)
      {
        unint64_t v36 = a2;
        if (*(void *)&v34 <= a2) {
          unint64_t v36 = a2 % *(void *)&v34;
        }
      }
      else
      {
        unint64_t v36 = (*(void *)&v34 - 1) & a2;
      }
      long long v37 = *(void **)(v5->__m_.__sig + 8 * v36);
      if (!v37 || (unint64_t v38 = (void *)*v37) == 0) {
LABEL_172:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (v35.u32[0] < 2uLL)
      {
        uint64_t v39 = *(void *)&v34 - 1;
        while (1)
        {
          uint64_t v41 = v38[1];
          if (v41 == a2)
          {
            if (v38[2] == a2) {
              goto LABEL_94;
            }
          }
          else if ((v41 & v39) != v36)
          {
            goto LABEL_172;
          }
          unint64_t v38 = (void *)*v38;
          if (!v38) {
            goto LABEL_172;
          }
        }
      }
      while (1)
      {
        unint64_t v40 = v38[1];
        if (v40 == a2)
        {
          if (v38[2] == a2)
          {
LABEL_94:
            unint64_t v42 = (uint64_t *)*v17;
            std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v38 + 3, v17, (uint64_t)__p);
            uint64_t v43 = __p[0];
            __p[0] = 0;
            if (v43)
            {
              if (v71)
              {
                uint64_t v44 = v43[2];
                v43[2] = 0;
                if (v44) {
                  std::default_delete<E5RT::AsyncTask>::operator()[abi:ne180100]((uint64_t)(v43 + 2), v44);
                }
              }
              operator delete(v43);
            }
            uint64_t v17 = v42;
            int8x8_t v4 = *(int8x8_t *)this[1].__m_.__opaque;
            if (!*(void *)&v4) {
              goto LABEL_123;
            }
            goto LABEL_44;
          }
        }
        else
        {
          if (v40 >= *(void *)&v34) {
            v40 %= *(void *)&v34;
          }
          if (v40 != v36) {
            goto LABEL_172;
          }
        }
        unint64_t v38 = (void *)*v38;
        if (!v38) {
          goto LABEL_172;
        }
      }
    }
    break;
  }
  if (v19.u32[0] > 1uLL)
  {
    unint64_t v52 = a2;
    if (*(void *)&v4 <= a2) {
      unint64_t v52 = a2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v52 = v24 & a2;
  }
  char v53 = *(void **)(sig + 8 * v52);
  if (!v53 || (char v54 = (void *)*v53) == 0) {
LABEL_174:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v19.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v55 = v54[1];
      if (v55 == a2)
      {
        if (v54[2] == a2) {
          goto LABEL_136;
        }
      }
      else if ((v55 & v24) != v52)
      {
        goto LABEL_174;
      }
      char v54 = (void *)*v54;
      if (!v54) {
        goto LABEL_174;
      }
    }
  }
  while (2)
  {
    unint64_t v60 = v54[1];
    if (v60 != a2)
    {
      if (v60 >= *(void *)&v4) {
        v60 %= *(void *)&v4;
      }
      if (v60 != v52) {
        goto LABEL_174;
      }
      goto LABEL_145;
    }
    if (v54[2] != a2)
    {
LABEL_145:
      char v54 = (void *)*v54;
      if (!v54) {
        goto LABEL_174;
      }
      continue;
    }
    break;
  }
LABEL_136:
  if (!v54[6])
  {
    if (v19.u32[0] > 1uLL)
    {
      unint64_t v61 = a2;
      if (*(void *)&v4 <= a2) {
        unint64_t v61 = a2 % *(void *)&v4;
      }
    }
    else
    {
      unint64_t v61 = v24 & a2;
    }
    uint64_t v62 = *(uint64_t ***)(sig + 8 * v61);
    if (v62)
    {
      uint64_t v63 = *v62;
      if (*v62)
      {
        if (v19.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v64 = v63[1];
            if (v64 == a2)
            {
              if (v63[2] == a2) {
                goto LABEL_171;
              }
            }
            else if ((v64 & v24) != v61)
            {
              goto LABEL_137;
            }
            uint64_t v63 = (uint64_t *)*v63;
            if (!v63) {
              goto LABEL_137;
            }
          }
        }
        do
        {
          unint64_t v65 = v63[1];
          if (v65 == a2)
          {
            if (v63[2] == a2)
            {
LABEL_171:
              std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::erase(&this[1].__m_.__sig, v63);
              break;
            }
          }
          else
          {
            if (v65 >= *(void *)&v4) {
              v65 %= *(void *)&v4;
            }
            if (v65 != v61) {
              break;
            }
          }
          uint64_t v63 = (uint64_t *)*v63;
        }
        while (v63);
      }
    }
  }
LABEL_137:
  std::mutex::unlock(this);
  uint64_t v56 = (E5RT::AsyncEvent *)v68[0];
  if (v68[0])
  {
    do
    {
      E5RT::AsyncEvent::SyncWait(*((E5RT::AsyncEvent **)v56 + 2));
      uint64_t v56 = *(E5RT::AsyncEvent **)v56;
    }
    while (v56);
    unint64_t v57 = v68[0];
    if (v68[0])
    {
      do
      {
        uint64_t v58 = (void *)*v57;
        operator delete(v57);
        unint64_t v57 = v58;
      }
      while (v58);
    }
  }
  uint64_t v59 = v67[0];
  v67[0] = 0;
  if (v59) {
    operator delete(v59);
  }
}

void sub_192357584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex::unlock(v11);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t E5RT::AsyncComputeScheduler::GetAsyncComputeScheduler(E5RT::AsyncComputeScheduler *this)
{
  if (qword_1E9301BD8 != -1) {
    dispatch_once(&qword_1E9301BD8, &unk_1EE3963A0);
  }
  return qword_1E9301BD0;
}

void sub_192357630()
{
}

void sub_192357674(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10A0C409C39DCEBLL);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_storage_base<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (!*(unsigned char *)(result + 32)) {
      return result;
    }
    int8x8_t v4 = (void *)(result + 24);
    uint64_t result = *(void *)(result + 24);
    *(void *)(v3 + 24) = 0;
    if (result == v3)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      uint64_t v5 = (void *)(a2 + 24);
      uint64_t v6 = *(void *)(a2 + 24);
      if (v6)
      {
LABEL_7:
        if (v6 == a2)
        {
          *(void *)(v3 + 24) = v3;
          return (*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 24))(*v5, v3);
        }
        else
        {
          *int8x8_t v4 = v6;
          *uint64_t v5 = 0;
        }
        return result;
      }
    }
    else
    {
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
      }
      uint64_t v5 = (void *)(a2 + 24);
      uint64_t v6 = *(void *)(a2 + 24);
      if (v6) {
        goto LABEL_7;
      }
    }
    *int8x8_t v4 = 0;
    return result;
  }
  if (!*(unsigned char *)(result + 32))
  {
    unint64_t v7 = (void *)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 24);
    if (v8)
    {
      if (v8 == a2)
      {
        *(void *)(result + 24) = result;
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 24))(*v7, result);
        *(unsigned char *)(v3 + 32) = 1;
        return result;
      }
      *(void *)(result + 24) = v8;
    }
    else
    {
      unint64_t v7 = (void *)(result + 24);
    }
    *unint64_t v7 = 0;
    *(unsigned char *)(result + 32) = 1;
    return result;
  }
  uint64_t result = *(void *)(result + 24);
  if (result == v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
    *(unsigned char *)(v3 + 32) = 0;
  }
  else
  {
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
    *(unsigned char *)(v3 + 32) = 0;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    while (1)
    {
      uint64_t v3 = (void *)*v2;
      int8x8_t v4 = (void *)v2[5];
      if (v4) {
        break;
      }
LABEL_5:
      uint64_t v5 = (void *)v2[3];
      void v2[3] = 0;
      if (v5) {
        operator delete(v5);
      }
      operator delete(v2);
      uint64_t v2 = v3;
      if (!v3) {
        return;
      }
    }
    while (1)
    {
      uint64_t v6 = (void *)*v4;
      uint64_t v7 = v4[2];
      v4[2] = 0;
      if (v7) {
        break;
      }
LABEL_9:
      operator delete(v4);
      int8x8_t v4 = v6;
      if (!v6) {
        goto LABEL_5;
      }
    }
    if (*(char *)(v7 + 127) < 0)
    {
      operator delete(*(void **)(v7 + 104));
      uint64_t v8 = *(void **)(v7 + 48);
      if (v8)
      {
        do
        {
LABEL_13:
          unint64_t v9 = (void *)*v8;
          operator delete(v8);
          uint64_t v8 = v9;
        }
        while (v9);
      }
    }
    else
    {
      uint64_t v8 = *(void **)(v7 + 48);
      if (v8) {
        goto LABEL_13;
      }
    }
    uint64_t v10 = *(void **)(v7 + 32);
    *(void *)(v7 + 32) = 0;
    if (v10) {
      operator delete(v10);
    }
    uint64_t v11 = *(void *)(v7 + 24);
    if (v11 == v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
    else if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
    }
    MEMORY[0x192FF16B0](v7, 0x10B2C404C099A3DLL);
    goto LABEL_9;
  }
}

void std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy(a1, a2[1]);
    int8x8_t v4 = (void *)a2[7];
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        operator delete(v4);
        int8x8_t v4 = v5;
      }
      while (v5);
    }
    uint64_t v6 = (void *)a2[5];
    a2[5] = 0;
    if (v6) {
      operator delete(v6);
    }
    operator delete(a2);
  }
}

void sub_192357A88()
{
}

void *sub_192357A9C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE3963D0;
  result[1] = v3;
  return result;
}

uint64_t sub_192357AE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3963D0;
  a2[1] = v2;
  return result;
}

BOOL sub_192357B10(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 8) + 368) == 0;
}

uint64_t sub_192357B24(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT21AsyncComputeSchedulerC1EvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4E5RT21AsyncComputeSchedulerC1EvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT21AsyncComputeSchedulerC1EvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT21AsyncComputeSchedulerC1EvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192357B94()
{
  return &unk_1EE396430;
}

void *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    int8x8_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_192357E2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[6];
      if (v3 == v2 + 3)
      {
        (*(void (**)(void *))(v2[3] + 32))(v2 + 3);
      }
      else if (v3)
      {
        (*(void (**)(void *))(*v3 + 40))(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::default_delete<E5RT::AsyncTask>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 127) < 0)
    {
      operator delete(*(void **)(a2 + 104));
      unint64_t v3 = *(void **)(a2 + 48);
      if (!v3) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v3 = *(void **)(a2 + 48);
      if (!v3) {
        goto LABEL_5;
      }
    }
    do
    {
      int8x8_t v4 = (void *)*v3;
      operator delete(v3);
      unint64_t v3 = v4;
    }
    while (v4);
LABEL_5:
    uint64_t v5 = *(void **)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (v6 == a2)
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
    }
    else if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
    }
    JUMPOUT(0x192FF16B0);
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = *((void *)v11 + 1);
            if (v13 == v7)
            {
              if (*((void *)v11 + 2) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = *(char **)v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v14 = (void *)(a1 + 16);
  uint64_t v11 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((void *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 14) = 1065353216;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    unint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(void *)uint64_t v11 = *v18;
LABEL_61:
      void *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v8) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v17 = *(void *)a1;
        unint64_t v18 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v17 = *(void *)a1;
        unint64_t v18 = *(void **)(*(void *)a1 + 8 * v7);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v26 & v7;
      uint64_t v17 = *(void *)a1;
      unint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v7));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *(void *)uint64_t v11 = *v14;
  void *v14 = v11;
  *(void *)(v17 + 8 * v4) = v14;
  if (*(void *)v11)
  {
    unint64_t v27 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    unint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1923582FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[5];
      if (v3)
      {
        do
        {
          uint64_t v6 = (void *)*v3;
          uint64_t v7 = v3[2];
          v3[2] = 0;
          if (v7) {
            std::default_delete<E5RT::AsyncTask>::operator()[abi:ne180100]((uint64_t)(v3 + 2), v7);
          }
          operator delete(v3);
          unint64_t v3 = v6;
        }
        while (v6);
      }
      unint64_t v4 = (void *)v2[3];
      void v2[3] = 0;
      if (v4) {
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::unique_ptr<E5RT::AsyncTask>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<E5RT::AsyncTask>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[2];
      v2[2] = 0;
      if (v3) {
        std::default_delete<E5RT::AsyncTask>::operator()[abi:ne180100]((uint64_t)(v2 + 2), v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<std::unique_ptr<E5RT::AsyncTask>>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  std::string __p = 0;
  if (v3)
  {
    if (v10)
    {
      unint64_t v4 = (void *)v3[5];
      if (v4)
      {
        do
        {
          uint64_t v7 = (void *)*v4;
          uint64_t v8 = v4[2];
          v4[2] = 0;
          if (v8) {
            std::default_delete<E5RT::AsyncTask>::operator()[abi:ne180100]((uint64_t)(v4 + 2), v8);
          }
          operator delete(v4);
          unint64_t v4 = v7;
        }
        while (v7);
      }
      uint64_t v5 = (void *)v3[3];
      void v3[3] = 0;
      if (v5) {
        operator delete(v5);
      }
    }
    operator delete(v3);
  }
  return v2;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[5];
      if (v3)
      {
        do
        {
          unint64_t v4 = (void *)*v3;
          operator delete(v3);
          uint64_t v3 = v4;
        }
        while (v4);
      }
      uint64_t v5 = (void *)v2[3];
      void v2[3] = 0;
      if (v5) {
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  void *v14 = 0;
  v14[1] = v10;
  uint64_t v18 = **a4;
  v14[5] = 0;
  v14[4] = 0;
  v14[2] = v18;
  void v14[3] = v14 + 4;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      void *v14 = *v22;
LABEL_61:
      void *v22 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *v17;
  void *v17 = v14;
  *(void *)(v21 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v31 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19235885C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::destroy((uint64_t)(v2 + 3), v2[4]);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>::__erase_unique<unsigned long long>(uint64_t **a1, unint64_t *a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 1);
  uint64_t result = a1[1];
  if (result)
  {
    unint64_t v5 = *a2;
    uint64_t v6 = v4;
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = v7[4];
      BOOL v9 = v8 >= v5;
      if (v8 >= v5) {
        unint64_t v10 = (uint64_t **)v7;
      }
      else {
        unint64_t v10 = (uint64_t **)(v7 + 1);
      }
      if (v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = *v10;
    }
    while (*v10);
    if (v6 == v4)
    {
      return 0;
    }
    else if (v5 >= v6[4])
    {
      unint64_t v11 = (uint64_t *)v6[1];
      if (v11)
      {
        do
        {
          uint8x8_t v12 = v11;
          unint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        uint64_t v13 = v6;
        do
        {
          uint8x8_t v12 = (uint64_t *)v13[2];
          BOOL v14 = *v12 == (void)v13;
          uint64_t v13 = v12;
        }
        while (!v14);
      }
      if (*a1 == v6) {
        *a1 = v12;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(result, v6);
      unint64_t v15 = (void *)v6[7];
      if (v15)
      {
        do
        {
          uint64_t v16 = (void *)*v15;
          operator delete(v15);
          unint64_t v15 = v16;
        }
        while (v16);
      }
      uint64_t v17 = (void *)v6[5];
      v6[5] = 0;
      if (v17) {
        operator delete(v17);
      }
      operator delete(v6);
      return (uint64_t *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      uint64_t v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    uint64_t v6 = (uint64_t **)v3[2];
    uint64_t v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    uint64_t v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
    goto LABEL_16;
  }
  uint64_t v7 = 0;
  uint64_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    BOOL v14 = (uint64_t **)v7[2];
    if (*v14 == v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      unint64_t v15 = (void *)*v7;
      if (!*v7) {
        goto LABEL_38;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      uint64_t v17 = v14[1];
      uint64_t v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18) {
        void v18[2] = (uint64_t)v14;
      }
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
      uint64_t *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
      unint64_t v15 = (void *)*v7;
      if (!*v7) {
        goto LABEL_38;
      }
    }
    if (!*((unsigned char *)v15 + 24))
    {
      float v19 = (uint64_t *)v7[1];
      if (!v19) {
        goto LABEL_64;
      }
LABEL_63:
      if (*((unsigned char *)v19 + 24))
      {
LABEL_64:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v23 = v15[1];
        *uint64_t v7 = v23;
        if (v23) {
          *(void *)(v23 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        float v19 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v27 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v27 + 24);
      *(unsigned char *)(v27 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint8x8_t v28 = *(uint64_t **)(v27 + 8);
      uint64_t v29 = *v28;
      *(void *)(v27 + 8) = *v28;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      _OWORD v28[2] = *(void *)(v27 + 16);
      *(void *)(*(void *)(v27 + 16) + 8 * (**(void **)(v27 + 16) != v27)) = v28;
      *uint8x8_t v28 = v27;
      *(void *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    float v19 = (uint64_t *)v7[1];
    if (v19 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_63;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint8x8_t v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      uint8x8_t v12 = result;
LABEL_61:
      *((unsigned char *)v12 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v12 + 24)) {
      goto LABEL_61;
    }
LABEL_24:
    uint64_t v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    uint64_t v16 = (void *)*v7;
    if (!*v7) {
      goto LABEL_49;
    }
LABEL_48:
    if (!*((unsigned char *)v16 + 24)) {
      goto LABEL_67;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    float v20 = (uint64_t *)v7[1];
    void *v14 = v20;
    if (v20) {
      v20[2] = (uint64_t)v14;
    }
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14) {
      uint64_t result = v7;
    }
    uint64_t v7 = *v14;
    uint64_t v16 = (void *)**v14;
    if (v16) {
      goto LABEL_48;
    }
  }
LABEL_49:
  uint64_t v21 = (uint64_t *)v7[1];
  if (!v21 || *((unsigned char *)v21 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint8x8_t v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
    goto LABEL_24;
  }
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_67:
    uint64_t v21 = v7;
  }
  else
  {
    *((unsigned char *)v21 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = *v21;
    v7[1] = *v21;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v21[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
    uint64_t *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    uint64_t v16 = v7;
  }
  unint64_t v24 = (uint64_t *)v21[2];
  *((unsigned char *)v21 + 24) = *((unsigned char *)v24 + 24);
  *((unsigned char *)v24 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v25 = *v24;
  uint64_t v26 = *(void *)(*v24 + 8);
  uint64_t *v24 = v26;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  *(void *)(v25 + 16) = v24[2];
  *(void *)(v24[2] + 8 * (*(void *)v24[2] != (void)v24)) = v25;
  *(void *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

char *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      BOOL v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v14 + 1);
            if (v16 == v10)
            {
              if (*((void *)v14 + 2) == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            BOOL v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            if (*((void *)v14 + 2) == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          BOOL v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  BOOL v14 = (char *)operator new(0x40uLL);
  *(void *)BOOL v14 = 0;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *(void *)BOOL v14 = *v21;
LABEL_61:
      void *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * v10);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *(void *)BOOL v14 = *v17;
  void *v17 = v14;
  *(void *)(v20 + 8 * v4) = v17;
  if (*(void *)v14)
  {
    unint64_t v30 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1923590F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *v6;
  if (!*v6) {
    return 0;
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == v3)
      {
        if (v7[2] == v3) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      uint64_t v7 = (void *)*v7;
      if (!v7) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == v3) {
      break;
    }
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
    if (v9 != v5) {
      return 0;
    }
LABEL_11:
    uint64_t v7 = (void *)*v7;
    if (!v7) {
      return 0;
    }
  }
  if (v7[2] != v3) {
    goto LABEL_11;
  }
LABEL_22:
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(a1, v7, (uint64_t)&__p);
  uint8x8_t v12 = __p;
  std::string __p = 0;
  if (v12) {
    operator delete(v12);
  }
  return 1;
}

uint64_t std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>>>::__erase_unique<E5RT::AsyncEvent const*>(void *a1, uint64_t *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(a1, (void *)result, (uint64_t)&__p);
    uint8x8_t v4 = __p;
    std::string __p = 0;
    if (v4)
    {
      if (v9)
      {
        unint64_t v5 = (void *)v4[5];
        if (v5)
        {
          do
          {
            uint64_t v6 = (void *)*v5;
            operator delete(v5);
            unint64_t v5 = v6;
          }
          while (v6);
        }
        uint64_t v7 = (void *)v4[3];
        void v4[3] = 0;
        if (v7) {
          operator delete(v7);
        }
      }
      operator delete(v4);
    }
    return 1;
  }
  return result;
}

void *std::__hash_table<std::unique_ptr<E5RT::AsyncTask>,std::hash<std::unique_ptr<E5RT::AsyncTask>>,std::equal_to<std::unique_ptr<E5RT::AsyncTask>>,std::allocator<std::unique_ptr<E5RT::AsyncTask>>>::__emplace_unique_key_args<std::unique_ptr<E5RT::AsyncTask>,std::unique_ptr<E5RT::AsyncTask>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      BOOL v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            BOOL v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          BOOL v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  uint64_t v16 = (void *)(a1 + 16);
  BOOL v13 = operator new(0x18uLL);
  *BOOL v13 = 0;
  v13[1] = v9;
  uint64_t v17 = *a3;
  *a3 = 0;
  id v13[2] = v17;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *BOOL v13 = *v21;
LABEL_61:
      void *v21 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_37;
    }
    if (prime < v10)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v10) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *BOOL v13 = *v16;
  *uint64_t v16 = v13;
  *(void *)(v20 + 8 * v3) = v16;
  if (*v13)
  {
    unint64_t v30 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_192359600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::unique_ptr<E5RT::AsyncTask>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<E5RT::AsyncTask>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::__unordered_map_hasher<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,true>,std::__unordered_map_equal<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,std::equal_to<E5RT::AsyncTask *>,std::hash<E5RT::AsyncTask *>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>>>::__emplace_unique_key_args<E5RT::AsyncTask *,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncTask * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v14 = operator new(0x38uLL);
  void *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[6] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      void *v14 = *v21;
LABEL_61:
      void *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * v10);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *v17;
  void *v17 = v14;
  *(void *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v30 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19235996C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncTask *,std::function<void ()(std::unique_ptr<E5RT::E5RTError>)>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<E5RT::AsyncTask *,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,std::allocator<E5RT::AsyncTask *>>::__emplace_unique_key_args<E5RT::AsyncTask *,E5RT::AsyncTask * const&>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      BOOL v13 = (void *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            BOOL v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          BOOL v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  uint64_t v17 = operator new(0x18uLL);
  void *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      void *v17 = *v21;
LABEL_61:
      void *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_37;
    }
    if (prime < v10)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v10) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  void *v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    unint64_t v30 = *(void *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_192359CC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    float v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      void *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        float v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        float v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      float v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    float v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192359FEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::__unordered_map_hasher<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::hash<E5RT::AsyncTask *>,std::equal_to<E5RT::AsyncTask *>,true>,std::__unordered_map_equal<E5RT::AsyncTask *,std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>,std::equal_to<E5RT::AsyncTask *>,std::hash<E5RT::AsyncTask *>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncTask *,NSObject  {objcproto18OS_dispatch_source}* {__strong}>>>::__emplace_unique_key_args<E5RT::AsyncTask *,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncTask * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  unint64_t v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  void v14[3] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      void *v14 = *v21;
LABEL_61:
      void *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v20 = *(void *)a1;
        unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v20 = *(void *)a1;
        unint64_t v21 = *(void **)(*(void *)a1 + 8 * v10);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      uint64_t v20 = *(void *)a1;
      unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *v17;
  void *v17 = v14;
  *(void *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v30 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19235A354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  float v18 = operator new(0x20uLL);
  void *v18 = 0;
  v18[1] = v10;
  void v18[2] = **a4;
  void v18[3] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    BOOL v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      void *v18 = *v22;
LABEL_61:
      void *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      BOOL v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_26;
      }
    }
  }
  void *v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_19235A6B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19235A6C8(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  return result;
}

__CFDictionary *E5RT::ParseSegmentationAnalytics(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  v176[2] = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v168, "ParseSegmentationAnalytics");
    std::string::basic_string[abi:ne180100]<0>(v172, "Error allocating segmentation metadata dictionary.");
    E5RT::Status::Status(&cStr, 3, v172);
    E5RT::E5RTError::E5RTError(exception, v168, &cStr);
  }
  std::__fs::filesystem::__status(this, 0);
  if (LOBYTE(v168[0]))
  {
    if (LOBYTE(v168[0]) != 255)
    {
      std::__fs::filesystem::__status(this, 0);
      if (LOBYTE(v168[0]) != 2)
      {
        E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)v168, this);
        uint64_t MILProgram = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)v168);
        uint64_t valuePtr = 0;
        uint64_t v4 = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)v168);
        (*(void (**)(std::string::size_type *__return_ptr))(*(void *)v4 + 48))(&v165);
        theArray = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
        unint64_t v5 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(v5, @"Type", @"Program");
        CFArrayAppendValue(theArray, v5);
        CFRelease(v5);
        uint64_t v153 = (*(uint64_t (**)(uint64_t))(*(void *)MILProgram + 72))(MILProgram) + 16;
        while (1)
        {
          uint64_t v153 = *(void *)v153;
          if (!v153) {
            break;
          }
          unint64_t v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionarySetValue(v6, @"Type", @"Function");
          if (*(char *)(v153 + 39) >= 0) {
            uint64_t v7 = (const char *)(v153 + 16);
          }
          else {
            uint64_t v7 = *(const char **)(v153 + 16);
          }
          CFStringRef v8 = CFStringCreateWithCString(v3, v7, 0x8000100u);
          CFDictionarySetValue(v6, @"Name", v8);
          CFRelease(v8);
          CFArrayAppendValue(theArray, v6);
          CFRelease(v6);
          unint64_t v9 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionarySetValue(v9, @"Type", @"Block");
          CFArrayAppendValue(theArray, v9);
          CFRelease(v9);
          uint64_t Function = MIL::IRProgram::GetFunction();
          uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
          uint8x8_t v12 = (MIL::IRObject ****)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11);
          BOOL v13 = **v12;
          unint64_t v155 = (*v12)[1];
          if (v13 != v155)
          {
            do
            {
              v156 = v13;
              uint64_t v16 = *v13;
              uint64_t v17 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              int v160 = v16;
              uint64_t Location = MIL::IRObject::GetLocation(v16);
              (*(void (**)(void **__return_ptr))(*(void *)Location + 24))(__p);
              if (v164 >= 0) {
                float v19 = __p;
              }
              else {
                float v19 = (void **)__p[0];
              }
              CFStringRef key = CFStringCreateWithCString(v3, (const char *)v19, 0x8000100u);
              CFNumberRef v20 = CFNumberCreate(v3, kCFNumberIntType, &valuePtr);
              CFDictionarySetValue(v17, @"OpIndex", v20);
              CFRelease(v20);
              uint64_t v21 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v160 + 64))(v160);
              uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
              if (*(char *)(v22 + 23) >= 0) {
                BOOL v23 = (const char *)v22;
              }
              else {
                BOOL v23 = *(const char **)v22;
              }
              CFStringRef v24 = CFStringCreateWithCString(v3, v23, 0x8000100u);
              CFDictionarySetValue(v17, @"OpType", v24);
              CFRelease(v24);
              v172[23] = 15;
              strcpy(v172, "SelectedBackend");
              Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
              if (Attribute)
              {
                uint64_t v26 = MIL::IRValue::AsTensor(Attribute);
                (*(void (**)(std::string *__return_ptr))(*(void *)v26 + 72))(&cStr);
                if ((cStr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_std::string cStr = &cStr;
                }
                else {
                  p_std::string cStr = (std::string *)cStr.__r_.__value_.__r.__words[0];
                }
              }
              else
              {
                *((unsigned char *)&cStr.__r_.__value_.__s + 23) = 7;
                strcpy((char *)&cStr, "unknown");
                p_std::string cStr = &cStr;
              }
              CFStringRef v28 = CFStringCreateWithCString(v3, (const char *)p_cStr, 0x8000100u);
              if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(cStr.__r_.__value_.__l.__data_);
                if ((v172[23] & 0x80000000) == 0) {
                  goto LABEL_26;
                }
              }
              else if ((v172[23] & 0x80000000) == 0)
              {
                goto LABEL_26;
              }
              operator delete(*(void **)v172);
LABEL_26:
              CFDictionarySetValue(v17, @"SelectedBackend", v28);
              CFRelease(v28);
              uint64_t v29 = (const void *)MIL::IRObject::GetLocation(v160);
              unint64_t v30 = __dynamic_cast(v29, MEMORY[0x1E4F733C0], MEMORY[0x1E4F733B0], 0);
              theDict = v17;
              if (!v30)
              {
                uint64_t v39 = (MIL::Location *)MIL::IRObject::GetLocation(v160);
                MIL::Location::GetDescription((uint64_t *)&cStr, v39);
                *(std::string *)v172 = cStr;
                std::string::size_type v40 = HIBYTE(cStr.__r_.__value_.__r.__words[2]);
                std::string::size_type v41 = cStr.__r_.__value_.__r.__words[0];
                goto LABEL_61;
              }
              unint64_t v31 = v30;
              uint64_t v32 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v160 + 64))(v160);
              uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
              int8x8_t v34 = (const void **)v33;
              int v35 = *(char *)(v33 + 23);
              if (v35 >= 0) {
                size_t v36 = *(unsigned __int8 *)(v33 + 23);
              }
              else {
                size_t v36 = *(void *)(v33 + 8);
              }
              unint64_t v37 = v36 + 1;
              if (v36 + 1 >= 0x7FFFFFFFFFFFFFF8) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v37 >= 0x17)
              {
                uint64_t v42 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v37 | 7) != 0x17) {
                  uint64_t v42 = v37 | 7;
                }
                uint64_t v43 = v42 + 1;
                p_dst = (std::string *)operator new(v42 + 1);
                __dst.__r_.__value_.__l.__size_ = v36 + 1;
                __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                memset(&__dst, 0, sizeof(__dst));
                p_dst = &__dst;
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
                if (!v36) {
                  goto LABEL_44;
                }
              }
              if (v35 >= 0) {
                uint64_t v44 = v34;
              }
              else {
                uint64_t v44 = *v34;
              }
              memmove(p_dst, v44, v36);
LABEL_44:
              *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v36) = 58;
              unint64_t v45 = (*(uint64_t (**)(void *))(*(void *)v31 + 48))(v31);
              std::to_string(&v170, v45);
              if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v46 = &v170;
              }
              else {
                char v46 = (std::string *)v170.__r_.__value_.__r.__words[0];
              }
              if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v170.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v170.__r_.__value_.__l.__size_;
              }
              uint64_t v48 = std::string::append(&__dst, (const std::string::value_type *)v46, size);
              long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
              v174.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v49;
              v48->__r_.__value_.__l.__size_ = 0;
              v48->__r_.__value_.__r.__words[2] = 0;
              v48->__r_.__value_.__r.__words[0] = 0;
              uint64_t v50 = std::string::append(&v174, ":");
              long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
              cStr.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
              *(_OWORD *)&cStr.__r_.__value_.__l.__data_ = v51;
              v50->__r_.__value_.__l.__size_ = 0;
              v50->__r_.__value_.__r.__words[2] = 0;
              v50->__r_.__value_.__r.__words[0] = 0;
              unint64_t v52 = (*(uint64_t (**)(void *))(*(void *)v31 + 32))(v31);
              std::to_string(&v169, v52);
              if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v53 = &v169;
              }
              else {
                char v53 = (std::string *)v169.__r_.__value_.__r.__words[0];
              }
              if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v54 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v54 = v169.__r_.__value_.__l.__size_;
              }
              uint64_t v55 = std::string::append(&cStr, (const std::string::value_type *)v53, v54);
              std::string::size_type v41 = v55->__r_.__value_.__r.__words[0];
              v176[0] = v55->__r_.__value_.__l.__size_;
              *(void *)((char *)v176 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
              LOBYTE(v40) = *((unsigned char *)&v55->__r_.__value_.__s + 23);
              v55->__r_.__value_.__l.__size_ = 0;
              v55->__r_.__value_.__r.__words[2] = 0;
              v55->__r_.__value_.__r.__words[0] = 0;
              *(void *)v172 = v41;
              *(void *)&v172[15] = *(void *)((char *)v176 + 7);
              *(void *)&v172[8] = v176[0];
              v172[23] = v40;
              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v169.__r_.__value_.__l.__data_);
                if ((SHIBYTE(cStr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_58:
                  if ((SHIBYTE(v174.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_59;
                  }
                  goto LABEL_230;
                }
              }
              else if ((SHIBYTE(cStr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_58;
              }
              operator delete(cStr.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v174.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_59:
                if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_231;
                }
                goto LABEL_60;
              }
LABEL_230:
              operator delete(v174.__r_.__value_.__l.__data_);
              if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_231:
                operator delete(v170.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_61;
                }
                goto LABEL_232;
              }
LABEL_60:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_61;
              }
LABEL_232:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_61:
              if ((v40 & 0x80u) == 0) {
                uint64_t v56 = v172;
              }
              else {
                uint64_t v56 = (const char *)v41;
              }
              CFStringRef v57 = CFStringCreateWithCString(v3, v56, 0x8000100u);
              uint64_t v58 = theDict;
              if ((v172[23] & 0x80000000) != 0) {
                operator delete(*(void **)v172);
              }
              CFDictionarySetValue(theDict, @"DebugName", v57);
              CFRelease(v57);
              uint64_t v59 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              *((unsigned char *)&cStr.__r_.__value_.__s + 23) = 14;
              strcpy((char *)&cStr, "BackendSupport");
              unint64_t v60 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
              if (v60)
              {
                memset(&v174, 0, sizeof(v174));
                unint64_t v61 = (MIL::IRListValue *)MIL::IRValue::AsList(v60);
                uint64_t Values = MIL::IRListValue::GetValues(v61);
                if (v63)
                {
                  uint64_t v64 = (MIL::IRValue **)Values;
                  unint64_t v65 = (MIL::IRValue **)(Values + 16 * v63);
                  do
                  {
                    MIL::IRValue::AsTensor(*v64);
                    MIL::IRValue::GetScalar<std::string>();
                    unint64_t v67 = (_OWORD *)v174.__r_.__value_.__l.__size_;
                    if (v174.__r_.__value_.__l.__size_ < v174.__r_.__value_.__r.__words[2])
                    {
                      long long v66 = *(_OWORD *)v172;
                      *(void *)(v174.__r_.__value_.__l.__size_ + 16) = *(void *)&v172[16];
                      _OWORD *v67 = v66;
                      v174.__r_.__value_.__l.__size_ = (std::string::size_type)v67 + 24;
                    }
                    else
                    {
                      std::string::size_type v68 = v174.__r_.__value_.__r.__words[0];
                      unint64_t v69 = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(v174.__r_.__value_.__l.__size_ - v174.__r_.__value_.__r.__words[0]) >> 3);
                      unint64_t v70 = v69 + 1;
                      if (v69 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x5555555555555556
                         * ((uint64_t)(v174.__r_.__value_.__r.__words[2] - v174.__r_.__value_.__r.__words[0]) >> 3) > v70)
                        unint64_t v70 = 0x5555555555555556
                            * ((uint64_t)(v174.__r_.__value_.__r.__words[2] - v174.__r_.__value_.__r.__words[0]) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL
                         * ((uint64_t)(v174.__r_.__value_.__r.__words[2] - v174.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                        unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
                      else {
                        unint64_t v71 = v70;
                      }
                      if (v71)
                      {
                        if (v71 > 0xAAAAAAAAAAAAAAALL) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        BOOL v72 = operator new(24 * v71);
                      }
                      else
                      {
                        BOOL v72 = 0;
                      }
                      std::string::size_type v73 = (std::string::size_type)v72 + 24 * v69;
                      *(_OWORD *)std::string::size_type v73 = *(_OWORD *)v172;
                      *(void *)(v73 + 16) = *(void *)&v172[16];
                      memset(v172, 0, 24);
                      std::string::size_type v74 = v73 + 24;
                      if (v67 == (_OWORD *)v68)
                      {
                        v174.__r_.__value_.__r.__words[0] = v73;
                        v174.__r_.__value_.__l.__size_ = v73 + 24;
                        v174.__r_.__value_.__r.__words[2] = (std::string::size_type)v72 + 24 * v71;
                      }
                      else
                      {
                        do
                        {
                          long long v75 = *(_OWORD *)((char *)v67 - 24);
                          *(void *)(v73 - 8) = *((void *)v67 - 1);
                          *(_OWORD *)(v73 - 24) = v75;
                          v73 -= 24;
                          *((void *)v67 - 2) = 0;
                          *((void *)v67 - 1) = 0;
                          *((void *)v67 - 3) = 0;
                          unint64_t v67 = (_OWORD *)((char *)v67 - 24);
                        }
                        while (v67 != (_OWORD *)v68);
                        std::string::size_type v76 = v174.__r_.__value_.__l.__size_;
                        unint64_t v67 = (_OWORD *)v174.__r_.__value_.__r.__words[0];
                        v174.__r_.__value_.__r.__words[0] = v73;
                        v174.__r_.__value_.__l.__size_ = v74;
                        for (v174.__r_.__value_.__r.__words[2] = (std::string::size_type)v72 + 24 * v71;
                              (_OWORD *)v76 != v67;
                              v76 -= 24)
                        {
                          if (*(char *)(v76 - 1) < 0) {
                            operator delete(*(void **)(v76 - 24));
                          }
                        }
                      }
                      if (v67) {
                        operator delete(v67);
                      }
                      v174.__r_.__value_.__l.__size_ = v74;
                      if ((v172[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v172);
                      }
                    }
                    v64 += 2;
                  }
                  while (v64 != v65);
                }
                std::string::size_type v78 = v174.__r_.__value_.__l.__size_;
                std::string::size_type v77 = v174.__r_.__value_.__r.__words[0];
                if (v174.__r_.__value_.__r.__words[0] != v174.__r_.__value_.__l.__size_)
                {
                  while (1)
                  {
                    char v79 = *(unsigned char *)(v77 + 23);
                    if (v79 < 0)
                    {
                      uint64_t v80 = *(const char **)v77;
                      uint64_t v81 = *(void *)(v77 + 8);
                      if (v81 >= 11)
                      {
LABEL_99:
                        uint64_t v82 = (char *)&v80[v81];
                        uint64_t v83 = (char *)v80;
                        do
                        {
                          uint64_t v84 = (char *)memchr(v83, 117, v81 - 10);
                          if (!v84) {
                            break;
                          }
                          if (*(void *)v84 == 0x726F707075736E75 && *(void *)(v84 + 3) == 0x646574726F707075)
                          {
                            if (v84 != v82 && v84 - v80 != -1) {
                              goto LABEL_112;
                            }
                            break;
                          }
                          uint64_t v83 = v84 + 1;
                          uint64_t v81 = v82 - v83;
                        }
                        while (v82 - v83 >= 11);
                      }
                    }
                    else
                    {
                      uint64_t v80 = (const char *)v77;
                      uint64_t v81 = *(unsigned __int8 *)(v77 + 23);
                      if ((unint64_t)v81 >= 0xB) {
                        goto LABEL_99;
                      }
                    }
                    uint64_t v86 = (const char *)v77;
                    if (v79 < 0) {
                      uint64_t v86 = *(const char **)v77;
                    }
                    CFStringRef v87 = CFStringCreateWithCString(v3, v86, 0x8000100u);
                    *(_DWORD *)v172 = 1;
                    CFNumberRef v88 = CFNumberCreate(v3, kCFNumberIntType, v172);
                    CFDictionarySetValue(v59, v87, v88);
                    CFRelease(v88);
                    CFRelease(v87);
LABEL_112:
                    v77 += 24;
                    if (v77 == v78)
                    {
                      std::string::size_type v77 = v174.__r_.__value_.__r.__words[0];
                      break;
                    }
                  }
                }
                if (v77)
                {
                  std::string::size_type v89 = v174.__r_.__value_.__l.__size_;
                  int v90 = (void *)v77;
                  if (v174.__r_.__value_.__l.__size_ != v77)
                  {
                    do
                    {
                      if (*(char *)(v89 - 1) < 0) {
                        operator delete(*(void **)(v89 - 24));
                      }
                      v89 -= 24;
                    }
                    while (v89 != v77);
                    int v90 = (void *)v174.__r_.__value_.__r.__words[0];
                  }
                  v174.__r_.__value_.__l.__size_ = v77;
                  operator delete(v90);
                }
                uint64_t v58 = theDict;
              }
              if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(cStr.__r_.__value_.__l.__data_);
              }
              CFDictionarySetValue(v58, @"BackendSupport", v59);
              CFRelease(v59);
              int v91 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              *((unsigned char *)&cStr.__r_.__value_.__s + 23) = 17;
              strcpy((char *)&cStr, "ValidationMessage");
              size_t v92 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
              if (v92)
              {
                E5Common::Utils::MILDictToCpp<std::string,std::string>(v92, (uint64_t)v172);
                long long v93 = *(uint64_t **)&v172[16];
                if (!*(void *)&v172[16]) {
                  goto LABEL_139;
                }
                do
                {
                  size_t v94 = (const char *)(v93 + 5);
                  if (*((char *)v93 + 63) < 0) {
                    size_t v94 = *(const char **)v94;
                  }
                  CFStringRef v95 = CFStringCreateWithCString(v3, v94, 0x8000100u);
                  BOOL v96 = (const char *)(v93 + 2);
                  if (*((char *)v93 + 39) < 0) {
                    BOOL v96 = *(const char **)v96;
                  }
                  CFStringRef v97 = CFStringCreateWithCString(v3, v96, 0x8000100u);
                  CFDictionarySetValue(v91, v97, v95);
                  CFRelease(v95);
                  CFRelease(v97);
                  long long v93 = (uint64_t *)*v93;
                }
                while (v93);
                BOOL v98 = *(uint64_t ***)&v172[16];
                if (!*(void *)&v172[16])
                {
LABEL_139:
                  uint64_t v100 = *(void **)v172;
                  *(void *)v172 = 0;
                  uint64_t v58 = theDict;
                  if (v100) {
                    operator delete(v100);
                  }
                  goto LABEL_141;
                }
                while (1)
                {
                  int v99 = *v98;
                  if (*((char *)v98 + 63) < 0)
                  {
                    operator delete(v98[5]);
                    if ((*((char *)v98 + 39) & 0x80000000) == 0) {
                      goto LABEL_135;
                    }
                  }
                  else if ((*((char *)v98 + 39) & 0x80000000) == 0)
                  {
LABEL_135:
                    operator delete(v98);
                    BOOL v98 = (uint64_t **)v99;
                    if (!v99) {
                      goto LABEL_139;
                    }
                    continue;
                  }
                  operator delete(v98[2]);
                  operator delete(v98);
                  BOOL v98 = (uint64_t **)v99;
                  if (!v99) {
                    goto LABEL_139;
                  }
                }
              }
LABEL_141:
              if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(cStr.__r_.__value_.__l.__data_);
              }
              CFDictionarySetValue(v58, @"ValidationMessages", v91);
              CFRelease(v91);
              int v101 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              *((unsigned char *)&v174.__r_.__value_.__s + 23) = 16;
              strcpy((char *)&v174, "EstimatedRuntime");
              size_t v102 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
              if (v102)
              {
                memset(v172, 0, sizeof(v172));
                int v173 = 1065353216;
                unint64_t v103 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(v102);
                uint64_t v104 = MIL::IRDictionaryValue::begin(v103);
                uint64_t v105 = MIL::IRDictionaryValue::end(v103);
                while (v104 != v105)
                {
                  MIL::IRValue::AsTensor(*(MIL::IRValue **)(v104 + 32));
                  MIL::IRValue::GetScalar<double>();
                  uint64_t v107 = v106;
                  MIL::IRValue::AsTensor(*(MIL::IRValue **)(v104 + 16));
                  MIL::IRValue::GetScalar<std::string>();
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&cStr;
                  *((void *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v172, (uint64_t)&cStr, (uint64_t)&std::piecewise_construct, (long long **)&__dst)+ 5) = v107;
                  if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(cStr.__r_.__value_.__l.__data_);
                  }
                  uint64_t v104 = *(void *)v104;
                }
                unint64_t v108 = *(uint64_t **)&v172[16];
                if (*(void *)&v172[16])
                {
                  do
                  {
                    CFNumberRef v109 = CFNumberCreate(v3, kCFNumberDoubleType, v108 + 5);
                    uint64_t v110 = (const char *)(v108 + 2);
                    if (*((char *)v108 + 39) < 0) {
                      uint64_t v110 = *(const char **)v110;
                    }
                    CFStringRef v111 = CFStringCreateWithCString(v3, v110, 0x8000100u);
                    CFDictionarySetValue(v101, v111, v109);
                    CFRelease(v111);
                    CFRelease(v109);
                    unint64_t v108 = (uint64_t *)*v108;
                  }
                  while (v108);
                  uint64_t v112 = *(void ***)&v172[16];
                  if (*(void *)&v172[16])
                  {
                    do
                    {
                      uint64_t v117 = (void **)*v112;
                      if (*((char *)v112 + 39) < 0) {
                        operator delete(v112[2]);
                      }
                      operator delete(v112);
                      uint64_t v112 = v117;
                    }
                    while (v117);
                  }
                }
                std::string::size_type v113 = *(void **)v172;
                *(void *)v172 = 0;
                if (v113) {
                  operator delete(v113);
                }
                uint64_t v58 = theDict;
              }
              if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v174.__r_.__value_.__l.__data_);
              }
              CFDictionarySetValue(v58, @"EstimatedRunTime", v101);
              CFRelease(v101);
              std::string::size_type v115 = v165;
              std::string::size_type v114 = (std::string::size_type)v166;
              int v162 = v166;
              if (v166) {
                atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              char v116 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
              cStr.__r_.__value_.__r.__words[0] = v115;
              cStr.__r_.__value_.__l.__size_ = v114;
              if (v114) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v114 + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(std::string *__return_ptr))(*(void *)v160 + 32))(&__dst);
              *(void *)v172 = __dst.__r_.__value_.__r.__words[0];
              if (__dst.__r_.__value_.__r.__words[0]) {
                operator new();
              }
              *(_OWORD *)v172 = 0uLL;
              __dst.__r_.__value_.__r.__words[0] = 0;
              MIL::Attributes::TraceabilityInfo::Make();
              v118 = *(std::__shared_weak_count **)&v172[8];
              if (*(void *)&v172[8]
                && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v172[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
                std::string::size_type v119 = __dst.__r_.__value_.__r.__words[0];
                __dst.__r_.__value_.__r.__words[0] = 0;
                if (!v119) {
                  goto LABEL_172;
                }
LABEL_171:
                (*(void (**)(std::string::size_type))(*(void *)v119 + 8))(v119);
                goto LABEL_172;
              }
              std::string::size_type v119 = __dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = 0;
              if (v119) {
                goto LABEL_171;
              }
LABEL_172:
              std::string::size_type v120 = (std::__shared_weak_count *)cStr.__r_.__value_.__l.__size_;
              if (cStr.__r_.__value_.__l.__size_
                && !atomic_fetch_add((atomic_ullong *volatile)(cStr.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
              MIL::Attributes::TraceabilityInfo::GetNames((uint64_t *)v172, (MIL::Attributes::TraceabilityInfo *)v174.__r_.__value_.__l.__data_);
              uint64_t v122 = *(void *)&v172[8];
              uint64_t v121 = *(void *)v172;
              if (*(void *)v172 != *(void *)&v172[8])
              {
                do
                {
                  unint64_t v123 = (const char *)v121;
                  if (*(char *)(v121 + 23) < 0) {
                    unint64_t v123 = *(const char **)v121;
                  }
                  CFStringRef v124 = CFStringCreateWithCString(v3, v123, 0x8000100u);
                  CFArrayAppendValue(v116, v124);
                  CFRelease(v124);
                  v121 += 24;
                }
                while (v121 != v122);
                uint64_t v121 = *(void *)v172;
              }
              if (v121)
              {
                uint64_t v125 = *(void *)&v172[8];
                uint64_t v126 = (void *)v121;
                if (*(void *)&v172[8] != v121)
                {
                  do
                  {
                    if (*(char *)(v125 - 1) < 0) {
                      operator delete(*(void **)(v125 - 24));
                    }
                    v125 -= 24;
                  }
                  while (v125 != v121);
                  uint64_t v126 = *(void **)v172;
                }
                *(void *)&v172[8] = v121;
                operator delete(v126);
              }
              uint64_t v127 = (MIL::Attributes::TraceabilityInfo *)v174.__r_.__value_.__r.__words[0];
              v174.__r_.__value_.__r.__words[0] = 0;
              if (v127)
              {
                MIL::Attributes::TraceabilityInfo::~TraceabilityInfo(v127);
                MEMORY[0x192FF16B0]();
              }
              if (v162 && !atomic_fetch_add(&v162->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
              CFDictionarySetValue(theDict, @"TraceabilityInfoNames", v116);
              CFRelease(v116);
              std::string::size_type v129 = v165;
              std::string::size_type v128 = (std::string::size_type)v166;
              long long v161 = v166;
              if (v166) {
                atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v130 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
              cStr.__r_.__value_.__r.__words[0] = v129;
              cStr.__r_.__value_.__l.__size_ = v128;
              if (v128) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v128 + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(std::string *__return_ptr))(*(void *)v160 + 32))(&__dst);
              *(void *)v172 = __dst.__r_.__value_.__r.__words[0];
              if (__dst.__r_.__value_.__r.__words[0]) {
                operator new();
              }
              *(_OWORD *)v172 = 0uLL;
              __dst.__r_.__value_.__r.__words[0] = 0;
              MIL::Attributes::TraceabilityInfo::Make();
              uint64_t v131 = *(std::__shared_weak_count **)&v172[8];
              if (!*(void *)&v172[8]
                || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v172[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                std::string::size_type v132 = __dst.__r_.__value_.__r.__words[0];
                __dst.__r_.__value_.__r.__words[0] = 0;
                if (!v132) {
                  goto LABEL_203;
                }
LABEL_202:
                (*(void (**)(std::string::size_type))(*(void *)v132 + 8))(v132);
                goto LABEL_203;
              }
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
              std::string::size_type v132 = __dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = 0;
              if (v132) {
                goto LABEL_202;
              }
LABEL_203:
              v133 = (std::__shared_weak_count *)cStr.__r_.__value_.__l.__size_;
              if (cStr.__r_.__value_.__l.__size_
                && !atomic_fetch_add((atomic_ullong *volatile)(cStr.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                std::__shared_weak_count::__release_weak(v133);
              }
              MIL::Attributes::TraceabilityInfo::GetTypes((uint64_t *)v172, (MIL::Attributes::TraceabilityInfo *)v174.__r_.__value_.__l.__data_);
              uint64_t v135 = *(void *)&v172[8];
              uint64_t v134 = *(void *)v172;
              if (*(void *)v172 != *(void *)&v172[8])
              {
                do
                {
                  unint64_t v136 = (const char *)v134;
                  if (*(char *)(v134 + 23) < 0) {
                    unint64_t v136 = *(const char **)v134;
                  }
                  CFStringRef v137 = CFStringCreateWithCString(v3, v136, 0x8000100u);
                  CFArrayAppendValue(v130, v137);
                  CFRelease(v137);
                  v134 += 24;
                }
                while (v134 != v135);
                uint64_t v134 = *(void *)v172;
              }
              if (v134)
              {
                uint64_t v138 = *(void *)&v172[8];
                v139 = (void *)v134;
                if (*(void *)&v172[8] != v134)
                {
                  do
                  {
                    if (*(char *)(v138 - 1) < 0) {
                      operator delete(*(void **)(v138 - 24));
                    }
                    v138 -= 24;
                  }
                  while (v138 != v134);
                  v139 = *(void **)v172;
                }
                *(void *)&v172[8] = v134;
                operator delete(v139);
              }
              unint64_t v140 = (MIL::Attributes::TraceabilityInfo *)v174.__r_.__value_.__r.__words[0];
              v174.__r_.__value_.__r.__words[0] = 0;
              if (v140)
              {
                MIL::Attributes::TraceabilityInfo::~TraceabilityInfo(v140);
                MEMORY[0x192FF16B0]();
              }
              if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
              CFDictionarySetValue(theDict, @"TraceabilityInfoTypes", v130);
              CFRelease(v130);
              size_t v141 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CFDictionarySetValue(v141, @"Type", @"Operation");
              uint64_t v142 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v160 + 176))(v160);
              if (*(void *)(v142 + 8) == *(void *)v142)
              {
                memset(v172, 0, 24);
              }
              else
              {
                uint64_t Name = MIL::IRNamedValueType::GetName(**(MIL::IRNamedValueType ***)v142);
                if (*(char *)(Name + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v172, *(const std::string::value_type **)Name, *(void *)(Name + 8));
                }
                else
                {
                  long long v144 = *(_OWORD *)Name;
                  *(void *)&v172[16] = *(void *)(Name + 16);
                  *(_OWORD *)v172 = v144;
                }
              }
              if (v172[23] >= 0) {
                size_t v145 = v172;
              }
              else {
                size_t v145 = *(const char **)v172;
              }
              CFStringRef v146 = CFStringCreateWithCString(v3, v145, 0x8000100u);
              CFDictionarySetValue(v141, @"Output", v146);
              CFRelease(v146);
              CFArrayAppendValue(theArray, v141);
              CFRelease(v141);
              if ((v172[23] & 0x80000000) != 0) {
                operator delete(*(void **)v172);
              }
              CFArrayRef Copy = CFArrayCreateCopy(v3, theArray);
              CFDictionarySetValue(theDict, @"OpPath", Copy);
              CFRelease(Copy);
              CFIndex Count = CFArrayGetCount(theArray);
              CFArrayRemoveValueAtIndex(theArray, Count - 1);
              CFDictionarySetValue(Mutable, key, theDict);
              CFRelease(theDict);
              CFRelease(key);
              ++valuePtr;
              if (v164 < 0) {
                operator delete(__p[0]);
              }
              BOOL v13 = v156 + 2;
            }
            while (v156 + 2 != v155);
          }
          CFIndex v14 = CFArrayGetCount(theArray);
          CFArrayRemoveValueAtIndex(theArray, v14 - 1);
          CFIndex v15 = CFArrayGetCount(theArray);
          CFArrayRemoveValueAtIndex(theArray, v15 - 1);
        }
        v149 = v166;
        if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
        E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)v168);
      }
    }
  }
  return Mutable;
}

void sub_19235BEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
}

void sub_19235C1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a33);
  _Unwind_Resume(a1);
}

void sub_19235C1FC()
{
  if (*(char *)(v0 - 217) < 0) {
    operator delete(*(void **)(v0 - 240));
  }
  JUMPOUT(0x19235C248);
}

void sub_19235C21C()
{
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  JUMPOUT(0x19235C258);
}

void sub_19235C244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v33 - 192));
  if (*(char *)(v33 - 137) < 0) {
    operator delete(*(void **)(v33 - 160));
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a33);
  _Unwind_Resume(a1);
}

void sub_19235C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v33 - 240);
  if (*(char *)(v33 - 169) < 0) {
    operator delete(*(void **)(v33 - 192));
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a33);
  _Unwind_Resume(a1);
}

void sub_19235C274()
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v0 - 240);
  JUMPOUT(0x19235C280);
}

void sub_19235C294()
{
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v0 - 240));
  JUMPOUT(0x19235C2A0);
}

void sub_19235C2B0()
{
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v0 - 240));
  JUMPOUT(0x19235C2BCLL);
}

void E5Common::Utils::MILDictToCpp<std::string,std::string>(MIL::IRValue *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  CFAllocatorRef v3 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(a1);
  uint64_t v4 = MIL::IRDictionaryValue::begin(v3);
  for (i = MIL::IRDictionaryValue::end(v3); v4 != i; uint64_t v4 = *(void *)v4)
  {
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 32));
    MIL::IRValue::GetScalar<std::string>();
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 16));
    MIL::IRValue::GetScalar<std::string>();
    uint8x8_t v12 = __p;
    unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v12);
    uint64_t v7 = v6 + 40;
    if ((char)v6[63] < 0) {
      operator delete(*(void **)v7);
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v10;
    *((void *)v7 + 2) = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10[0]) = 0;
    if (v9 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v11) < 0) {
        operator delete(v10[0]);
      }
    }
  }
}

void sub_19235C408(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19235C41C(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19235C430(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19235C444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void sub_19235C4A0(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    CFIndex v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      CFIndex v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            CFIndex v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          CFIndex v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (void *)(a1 + 16);
  CFIndex v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)CFIndex v15 = 0;
  *((void *)v15 + 1) = v11;
  unint64_t v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)unint64_t v27 = 0;
  *((void *)v15 + 5) = 0;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)CFIndex v15 = *v32;
LABEL_89:
      *uint64_t v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)CFIndex v15 = *v26;
  *uint64_t v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19235C8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

MIL::Attributes::TraceabilityInfo **std::unique_ptr<MIL::Attributes::TraceabilityInfo>::~unique_ptr[abi:ne180100](MIL::Attributes::TraceabilityInfo **a1)
{
  int8x8_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Attributes::TraceabilityInfo::~TraceabilityInfo(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::IROperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC03DCLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DC03DCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC03DCLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC03DCLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void E5RT::Ops::E5MinimalCpu::ReadStateKernel::ReadStateKernel(E5RT::Ops::E5MinimalCpu::ReadStateKernel *this)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel(this);
  void *v1 = &unk_1EE300F18;
}

void E5RT::Ops::E5MinimalCpu::ReadStateKernel::~ReadStateKernel(E5RT::Ops::E5MinimalCpu::ReadStateKernel *this)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(this);

  JUMPOUT(0x192FF16B0);
}

void *E5RT::Ops::E5MinimalCpu::ReadStateKernel::Launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 24) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v9, "ReadStateKernel requires exact 1 inout port");
    E5RT::Status::Status(v10, 2, v9);
    E5RT::E5RTError::E5RTError(exception, v11, v10);
  }
  if (*(void *)(a3 + 24) != 1)
  {
    unint64_t v8 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v9, "ReadStateKernel requires exact 1 output port");
    E5RT::Status::Status(v10, 2, v9);
    E5RT::E5RTError::E5RTError(v8, v11, v10);
  }
  unint64_t v4 = *(E5RT::IOPortImpl ***)(*(void *)(a4 + 16) + 40);
  unint64_t v5 = *(E5RT::IOPortImpl ***)(*(void *)(a3 + 16) + 40);

  return sub_19235CC58(v5, v4);
}

void sub_19235CBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *sub_19235CC58(E5RT::IOPortImpl **a1, E5RT::IOPortImpl **this)
{
  MemoryObjectRef = (void *)E5RT::IOPort::GetMemoryObjectRef(this);
  unint64_t v5 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(MemoryObjectRef);
  unint64_t v6 = (void *)E5RT::IOPort::GetMemoryObjectRef(a1);
  uint64_t v7 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(v6);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "CopyBuffer");
    std::string::basic_string[abi:ne180100]<0>(v24, "src memory object is not a buffer");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(exception, v26, v25);
  }
  unint64_t v8 = v7;
  if (!v7)
  {
    uint64_t v22 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "CopyBuffer");
    std::string::basic_string[abi:ne180100]<0>(v24, "dst memory object is not a buffer");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(v22, v26, v25);
  }
  PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(this);
  unint64_t v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
  unint64_t v11 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(a1);
  unint64_t v12 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v11);
  E5RT::TensorDescriptor::GetTensorDataType(v10, (E5RT::TensorDataType *)v26);
  if (E5RT::TensorDataType::GetNumComponents(v26) >= 2)
  {
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v26);
LABEL_11:
    char v23 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "CopyBuffer");
    std::string::basic_string[abi:ne180100]<0>(v24, "Not implemented: ReadState/WriteState for interleaved tensor");
    E5RT::Status::Status(v25, 1, v24);
    E5RT::E5RTError::E5RTError(v23, v26, v25);
  }
  E5RT::TensorDescriptor::GetTensorDataType(v12, (E5RT::TensorDataType *)v24);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v24);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v24);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v26);
  if (NumComponents >= 2) {
    goto LABEL_11;
  }
  if (E5RT::operator==((uint64_t)v10, (uint64_t)v12))
  {
    DataSpan = (void *)E5RT::BufferObject::GetDataSpan(v8);
    CFIndex v15 = (const void *)E5RT::BufferObject::GetDataSpan(v5);
    size_t Size = E5RT::BufferObject::GetSize(v5);
    return memcpy(DataSpan, v15, Size);
  }
  else
  {
    unint64_t v18 = (E5RT::MemoryObject *)E5RT::IOPort::GetMemoryObjectRef(a1);
    uint64_t v19 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v18);
    return (void *)E5RT::Ops::PerformDataFormatChange(v10, v5, v12, v19, v20);
  }
}

void sub_19235CF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void E5RT::Ops::E5MinimalCpu::WriteStateKernel::WriteStateKernel(E5RT::Ops::E5MinimalCpu::WriteStateKernel *this)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel(this);
  void *v1 = &unk_1EE300F40;
}

void E5RT::Ops::E5MinimalCpu::WriteStateKernel::~WriteStateKernel(E5RT::Ops::E5MinimalCpu::WriteStateKernel *this)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(this);

  JUMPOUT(0x192FF16B0);
}

void *E5RT::Ops::E5MinimalCpu::WriteStateKernel::Launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 24) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v9, "WriteStateKernel requires exact 1 inout port");
    E5RT::Status::Status(v10, 2, v9);
    E5RT::E5RTError::E5RTError(exception, v11, v10);
  }
  if (*(void *)(a2 + 24) != 1)
  {
    unint64_t v8 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v9, "WriteStateKernel requires exact 1 input port");
    E5RT::Status::Status(v10, 2, v9);
    E5RT::E5RTError::E5RTError(v8, v11, v10);
  }
  unint64_t v4 = *(E5RT::IOPortImpl ***)(*(void *)(a4 + 16) + 40);
  unint64_t v5 = *(E5RT::IOPortImpl ***)(*(void *)(a2 + 16) + 40);

  return sub_19235CC58(v4, v5);
}

void sub_19235D1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t e5rt_execution_stream_operation_config_options_create(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE396450;
  v3[1] = a1;
  unint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_19235D38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_config_options_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE3964D0;
  v3[1] = a1;
  unint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_19235D488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_config_options_get_prewire_model_memory(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396550;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19235D584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_config_options_set_prewire_model_memory(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3965D0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19235D684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19235D69C()
{
}

void *sub_19235D6B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE396450;
  result[1] = v3;
  return result;
}

uint64_t sub_19235D6F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE396450;
  a2[1] = v2;
  return result;
}

uint64_t sub_19235D724(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  unint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_19235D888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19235D8E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_execution_stream_operation_config_options_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z53e5rt_execution_stream_operation_config_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_execution_stream_operation_config_options_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_execution_stream_operation_config_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235D958()
{
  return &unk_1EE3964B0;
}

void sub_19235D968()
{
}

void *sub_19235D97C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE3964D0;
  result[1] = v3;
  return result;
}

uint64_t sub_19235D9C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3964D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19235D9F0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      MEMORY[0x192FF16B0](v2, 0x20C4093837F09);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      unint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    unint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19235DBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19235DBEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z54e5rt_execution_stream_operation_config_options_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z54e5rt_execution_stream_operation_config_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z54e5rt_execution_stream_operation_config_options_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z54e5rt_execution_stream_operation_config_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235DC5C()
{
  return &unk_1EE396530;
}

void sub_19235DC6C()
{
}

__n128 sub_19235DC80(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19235DCCC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19235DCFC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperationConfigOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char PrewireModelMemory = E5RT::ExecutionStreamOperationConfigOptions::GetPrewireModelMemory(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = PrewireModelMemory;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: value is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19235DE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19235DEBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_execution_stream_operation_config_options_get_prewire_model_memoryE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z71e5rt_execution_stream_operation_config_options_get_prewire_model_memoryE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_execution_stream_operation_config_options_get_prewire_model_memoryE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_execution_stream_operation_config_options_get_prewire_model_memoryE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235DF2C()
{
  return &unk_1EE3965B0;
}

void sub_19235DF3C()
{
}

__n128 sub_19235DF50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3965D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19235DF9C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3965D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19235DFCC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperationConfigOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamOperationConfigOptions::SetPrewireModelMemory(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_19235E0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19235E0E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_execution_stream_operation_config_options_set_prewire_model_memoryE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z71e5rt_execution_stream_operation_config_options_set_prewire_model_memoryE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_execution_stream_operation_config_options_set_prewire_model_memoryE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_execution_stream_operation_config_options_set_prewire_model_memoryE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235E154()
{
  return &unk_1EE396630;
}

void E5RT::AsyncEvent::~AsyncEvent(E5RT::AsyncEvent *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3245E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3245E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3245E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::AsyncEvent::GetEventName(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

uint64_t E5RT::AsyncEvent::SetActiveFutureValue(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

uint64_t E5RT::AsyncEvent::GetLastSignaledValue(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t E5RT::AsyncEvent::SyncWait(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 48))();
}

uint64_t E5RT::AsyncEvent::AsyncNotify(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

uint64_t E5RT::AsyncEvent::Signal(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 64))();
}

void *e5rt_compute_gpu_device::e5rt_compute_gpu_device(void *result, uint64_t a2)
{
  *__n128 result = a2;
  return result;
}

uint64_t e5rt_compute_gpu_device_retain_all(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396650;
  v4[1] = a1;
  v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19235E4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_compute_gpu_device_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE3966D0;
  v3[1] = a1;
  char v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_19235E5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_compute_gpu_device_retain_from_mtl_device(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v6[0] = &unk_1EE396750;
  v6[1] = a1;
  v6[2] = v3;
  char v7 = v6;
  uint64_t v4 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }

  return v4;
}

void sub_19235E6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t e5rt_compute_gpu_device_get_mtl_device(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3967D0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19235E7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19235E808()
{
}

__n128 sub_19235E81C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396650;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19235E868(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396650;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19235E898(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16))
    {
      AllAvailableComputeGPUDevices = (void *)E5RT::ComputeGPUDevice::GetAllAvailableComputeGPUDevices((E5RT::ComputeGPUDevice *)a1);
      **(void **)(a1 + 16) = (uint64_t)(AllAvailableComputeGPUDevices[1] - *AllAvailableComputeGPUDevices) >> 3;
      operator new[]();
    }
    uint64_t v6 = operator new(0x30uLL);
    long long v7 = xmmword_192DA88E0;
    strcpy((char *)v6, "Invalid Function Argument: num_devices is NULL.");
    char v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
  }
  else
  {
    uint64_t v6 = operator new(0x30uLL);
    long long v7 = xmmword_192DA88E0;
    strcpy((char *)v6, "Invalid Function Argument: gpu_devices is NULL.");
    char v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6);
  }
  return 1;
}

void sub_19235EA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_19235EAC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_compute_gpu_device_retain_allE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_compute_gpu_device_retain_allE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_compute_gpu_device_retain_allE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_compute_gpu_device_retain_allE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235EB34()
{
  return &unk_1EE3966B0;
}

void sub_19235EB44()
{
}

void *sub_19235EB58(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE3966D0;
  result[1] = v3;
  return result;
}

uint64_t sub_19235EBA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3966D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19235EBCC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if (v1)
  {
    if (*v1)
    {
      MEMORY[0x192FF16B0](*v1, 0x60C4044C4A2DFLL);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      uint64_t v6 = operator new(0x30uLL);
      long long v7 = xmmword_192DA90C0;
      strcpy((char *)v6, "Invalid Function Argument: *handle is NULL.");
      char v5 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v7) < 0) {
        operator delete(v6);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v6 = operator new(0x30uLL);
    long long v7 = xmmword_192DA88D0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    char v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(v6);
    }
    return 1;
  }
  return result;
}

void sub_19235ED54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19235ED94(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_compute_gpu_device_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z31e5rt_compute_gpu_device_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_compute_gpu_device_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_compute_gpu_device_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235EE04()
{
  return &unk_1EE396730;
}

uint64_t sub_19235EE10(uint64_t a1)
{
  return a1;
}

void sub_19235EE3C(uint64_t a1)
{
  JUMPOUT(0x192FF16B0);
}

void *sub_19235EE88(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  void *v2 = &unk_1EE396750;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id sub_19235EEE0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  *a2 = &unk_1EE396750;
  a2[1] = v3;
  id result = v4;
  a2[2] = result;
  return result;
}

void sub_19235EF28(uint64_t a1)
{
}

void sub_19235EF30(id *a1)
{
  operator delete(a1);
}

uint64_t sub_19235EF6C(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    E5RT::ComputeGPUDevice::GetComputeGPUDeviceForMTLDevice(*(void **)(a1 + 16));
    operator new();
  }
  uint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88F0;
  strcpy((char *)v4, "Invalid Function Argument: gpu_device is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_19235F06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19235F0A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_compute_gpu_device_retain_from_mtl_deviceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z46e5rt_compute_gpu_device_retain_from_mtl_deviceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_compute_gpu_device_retain_from_mtl_deviceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_compute_gpu_device_retain_from_mtl_deviceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235F118()
{
  return &unk_1EE3967B0;
}

void sub_19235F128()
{
}

__n128 sub_19235F13C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3967D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19235F188(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3967D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19235F1B8(uint64_t a1)
{
  uint64_t v1 = *(id ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      E5RT::ComputeGPUDevice::GetMTLDevice(*v1);
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t result = 0;
      **(void **)(a1 + 16) = v3;
    }
    else
    {
      long long v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88C0;
      strcpy((char *)v7, "Invalid Function Argument: mtlDevice is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88F0;
    strcpy((char *)v7, "Invalid Function Argument: gpu_device is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19235F340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19235F380(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z38e5rt_compute_gpu_device_get_mtl_deviceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z38e5rt_compute_gpu_device_get_mtl_deviceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38e5rt_compute_gpu_device_get_mtl_deviceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38e5rt_compute_gpu_device_get_mtl_deviceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19235F3F0()
{
  return &unk_1EE396830;
}

uint64_t E5RT::AsyncTask::AsyncTask(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4, uint64_t a5, uint64_t a6, long long *a7)
{
  uint64_t v13 = *(void *)(a2 + 24);
  if (v13)
  {
    if (v13 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v14 = *a3;
  *a3 = 0;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = a3[1];
  a3[1] = 0;
  uint64_t v17 = a3[2];
  char v16 = a3 + 2;
  uint64_t v15 = v17;
  *(void *)(a1 + 48) = v17;
  uint64_t v18 = v16[1];
  *(void *)(a1 + 56) = v18;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)v16 + 4);
  if (v18)
  {
    unint64_t v19 = *(void *)(v15 + 8);
    unint64_t v20 = *(void *)(a1 + 40);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v19 >= v20) {
        v19 %= v20;
      }
    }
    else
    {
      v19 &= v20 - 1;
    }
    *(void *)(v14 + 8 * v19) = a1 + 48;
    *char v16 = 0;
    v16[1] = 0;
  }
  *(_OWORD *)(a1 + 72) = *a4;
  *(void *)(a1 + 88) = a5;
  *(void *)(a1 + 96) = a6;
  uint64_t v21 = (std::string *)(a1 + 104);
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v22 = *a7;
    *(void *)(a1 + 120) = *((void *)a7 + 2);
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
  }
  *(unsigned char *)(a1 + 128) = 0;
  return a1;
}

void sub_19235F568(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v2);
  std::function<void ()(void)>::~function(v1);
  _Unwind_Resume(a1);
}

void *std::function<void ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::AsyncTask::Dispatched(E5RT::AsyncTask *this)
{
  return *((unsigned __int8 *)this + 128);
}

uint64_t E5RT::AsyncTask::GetStreamId(E5RT::AsyncTask *this)
{
  return *((void *)this + 12);
}

uint64_t E5RT::AsyncTask::GetAsyncTaskName(E5RT::AsyncTask *this)
{
  return (uint64_t)this + 104;
}

uint64_t E5RT::AsyncTask::GetDependentEvents(E5RT::AsyncTask *this)
{
  return (uint64_t)this + 32;
}

uint64_t E5RT::AsyncTask::GetCompletionEvent(E5RT::AsyncTask *this)
{
  return *((void *)this + 9);
}

uint64_t E5RT::AsyncTask::GetCompletionEventValue(E5RT::AsyncTask *this)
{
  return *((void *)this + 10);
}

uint64_t E5RT::AsyncTask::MarkDispatched(uint64_t this)
{
  *(unsigned char *)(this + 128) = 1;
  return this;
}

void E5RT::AsyncTask::RemoveDependency(E5RT::AsyncTask *this, const E5RT::AsyncEvent *a2)
{
  long long v8 = a2;
  uint64_t v2 = (void *)((char *)this + 32);
  if (!std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>((void *)this + 4, (uint64_t *)&v8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "RemoveDependency");
    std::string::basic_string[abi:ne180100]<0>(v6, "Dependent event not found.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, __p, v7);
  }
  unint64_t v3 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v2, (uint64_t *)&v8);
  if (v3)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(v2, v3, (uint64_t)__p);
    uint64_t v4 = __p[0];
    __p[0] = 0;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_19235F740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

E5RT::AsyncEvent *E5RT::AsyncTask::SignalCompletionEvent(E5RT::AsyncTask *this)
{
  uint64_t result = (E5RT::AsyncEvent *)*((void *)this + 9);
  if (result) {
    return (E5RT::AsyncEvent *)E5RT::AsyncEvent::Signal(result);
  }
  return result;
}

E5RT::AsyncEvent *E5RT::AsyncTask::SafeExecuteTask@<X0>(E5RT::AsyncTask *this@<X0>, void *a2@<X8>)
{
  *((unsigned char *)this + 128) = 1;
  *a2 = 0;
  uint64_t v3 = *((void *)this + 3);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  uint64_t result = (E5RT::AsyncEvent *)*((void *)this + 9);
  if (result) {
    return (E5RT::AsyncEvent *)E5RT::AsyncEvent::Signal(result);
  }
  return result;
}

void std::make_unique[abi:ne180100]<E5RT::E5RTError,std::string const&,E5RT::Status>()
{
}

void sub_19235FC4C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xF1C40B1F135EALL);
  _Unwind_Resume(a1);
}

id sub_19235FC70()
{
  E5Common::DispatchOnceWithExceptionThrow((dispatch_once_t *)algn_1E9301BF8, (uint64_t)&unk_1EE396860);
  uint64_t v0 = (void *)qword_1E9301BF0;

  return v0;
}

id sub_19235FCB8(uint64_t *a1)
{
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = (uint64_t *)*a1;
  }
  uint64_t v2 = [NSString stringWithUTF8String:v1];
  uint64_t v3 = [v2 stringByExpandingTildeInPath];

  uint64_t v4 = [v3 stringByStandardizingPath];

  return v4;
}

void sub_19235FD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  long long v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  long long v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_192360000(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](a1 + 128);
  return a1;
}

void E5RT::E5BundleCacheManager::MarkAsMobileOwned(uint64_t a1, std::string::size_type a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 56)) {
    return;
  }
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&buf, "e5rt");
  uint64_t v3 = E5RT::GetE5RTLog((uint64_t)&buf);
  uint64_t v4 = v3;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      goto LABEL_8;
    }
  }
  else if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    goto LABEL_8;
  }
  if (*(char *)(a2 + 23) >= 0) {
    std::string::size_type v5 = a2;
  }
  else {
    std::string::size_type v5 = *(void *)a2;
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
  _os_log_impl(&dword_1920CB000, v4, OS_LOG_TYPE_INFO, "E5BundleCacheManager::MarkAsMobileOwned: path = %s\n", (uint8_t *)&buf, 0xCu);
LABEL_8:

  uint64_t v6 = getpwnam("mobile");
  if (!v6)
  {
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&buf, "e5rt");
    uint64_t v15 = E5RT::GetE5RTLog((uint64_t)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v16 = a2;
      }
      else {
        std::string::size_type v16 = *(void *)a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v16;
      _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "E5BundleCacheManager::MarkAsMobileOwned: path = %s. Unable to query pwd for mobile.\n", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_29;
  }
  uid_t pw_uid = v6->pw_uid;
  long long v8 = getgrnam("mobile");
  if (!v8)
  {
    *((unsigned char *)&buf.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&buf, "e5rt");
    uint64_t v15 = E5RT::GetE5RTLog((uint64_t)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v17 = a2;
      }
      else {
        std::string::size_type v17 = *(void *)a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v17;
      _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "E5BundleCacheManager::MarkAsMobileOwned: path = %s. Unable to query grp for mobile.\n", (uint8_t *)&buf, 0xCu);
    }
LABEL_29:

    return;
  }
  gid_t gr_gid = v8->gr_gid;
  memset(&__p, 0, sizeof(__p));
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = (std::string *)a2;
  }
  else {
    uint64_t v11 = *(std::string **)a2;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v11, (std::string *)((char *)v11 + v10));
  MEMORY[0x192FF13F0](&buf, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    std::string::size_type v13 = buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_) {
      goto LABEL_17;
    }
  }
  else
  {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    std::string::size_type v13 = buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_)
    {
LABEL_17:
      atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
      uint64_t v14 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = v13;
      __p.__r_.__value_.__l.__size_ = size;
      __p.__r_.__value_.__s.__data_[16] = buf.__r_.__value_.__s.__data_[16];
      if (buf.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      goto LABEL_40;
    }
  }
  __p.__r_.__value_.__r.__words[0] = v13;
  __p.__r_.__value_.__l.__size_ = size;
  __p.__r_.__value_.__s.__data_[16] = buf.__r_.__value_.__s.__data_[16];
LABEL_40:
  while (__p.__r_.__value_.__r.__words[0])
  {
    uint64_t v18 = std::__fs::filesystem::recursive_directory_iterator::__dereference((const std::__fs::filesystem::recursive_directory_iterator *)&__p);
    sub_192360BE0(pw_uid, gr_gid, (const char *)v18);
    std::__fs::filesystem::recursive_directory_iterator::__increment((std::__fs::filesystem::recursive_directory_iterator *)&__p, 0);
  }
  unint64_t v19 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  memset(&buf, 0, sizeof(buf));
  uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
  if ((v21 & 0x80u) == 0) {
    long long v22 = (std::string *)a2;
  }
  else {
    long long v22 = *(std::string **)a2;
  }
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *(void *)(a2 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&buf, v22, (std::string *)((char *)v22 + v21));
  sub_192360BE0(pw_uid, gr_gid, (const char *)&buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1923605F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192360668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
}

void E5RT::E5BundleCacheManager::~E5BundleCacheManager(void **this)
{
  *this = &unk_1EE325C78;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0) {
    goto LABEL_5;
  }
}

{
  uint64_t vars8;

  *this = &unk_1EE325C78;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
LABEL_3:

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::E5BundleCacheManager::GetRootPath(E5RT::E5BundleCacheManager *this)
{
  return (uint64_t)this + 8;
}

void E5RT::E5BundleCacheManager::PurgeAllBundlesWithinDirPath(E5RT::E5BundleCacheManager *this, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  if (__dst.__r_.__value_.__s.__data_[0] != 2) {
    goto LABEL_46;
  }
  MEMORY[0x192FF13C0](&v23, a2, 0, 0);
  uint64_t v4 = v23;
  std::string::size_type v5 = v24;
  if (!v24)
  {
    v22.__imp_.__ptr_ = v23;
    v22.__imp_.__cntrl_ = 0;
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v6 = v24;
  v22.__imp_.__ptr_ = v4;
  v22.__imp_.__cntrl_ = v5;
  if (!v24)
  {
LABEL_7:
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  while (v22.__imp_.__ptr_ != v20)
  {
    uint64_t v7 = (const std::__fs::filesystem::path *)std::__fs::filesystem::directory_iterator::__dereference(&v22);
    std::__fs::filesystem::path::__string_view v8 = std::__fs::filesystem::path::__extension(v7);
    if (v8.__size_ >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v8.__size_ >= 0x17)
    {
      std::basic_string_view<_CharT, _Traits>::size_type v10 = (v8.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8.__size_ | 7) != 0x17) {
        std::basic_string_view<_CharT, _Traits>::size_type v10 = v8.__size_ | 7;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v8.__size_;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_19:
      memmove(p_dst, v8.__data_, v8.__size_);
      goto LABEL_20;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8.__size_;
    p_dst = &__dst;
    if (v8.__size_) {
      goto LABEL_19;
    }
LABEL_20:
    p_dst->__r_.__value_.__s.__data_[v8.__size_] = 0;
    v19.__pn_ = __dst;
    memset(&__dst, 0, sizeof(__dst));
    std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)".bundle", (std::string *)"");
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v12.__data_ = (const std::string_view::value_type *)&__dst;
    }
    else {
      v12.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v12.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      v12.__size_ = __dst.__r_.__value_.__l.__size_;
    }
    std::string::size_type v13 = (E5RT::E5BundleCacheManager *)std::__fs::filesystem::path::__compare(&v19, v12);
    int v14 = (int)v13;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_28:
        if (!v14) {
          goto LABEL_9;
        }
        goto LABEL_32;
      }
    }
    else if ((SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(v19.__pn_.__r_.__value_.__l.__data_);
    if (!v14)
    {
LABEL_9:
      E5RT::E5BundleCacheManager::PurgeBundle(v13, v7);
      goto LABEL_10;
    }
LABEL_32:
    if (((1 << v7[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x13) != 0)
    {
      std::__fs::filesystem::__status(v7, 0);
      if (__dst.__r_.__value_.__s.__data_[0] != 2) {
        goto LABEL_10;
      }
    }
    else if (v7[3].__pn_.__r_.__value_.__s.__data_[0] != 2)
    {
      goto LABEL_10;
    }
    E5RT::E5BundleCacheManager::PurgeAllBundlesWithinDirPath(this, v7);
LABEL_10:
    std::__fs::filesystem::directory_iterator::__increment(&v22, 0);
  }
  uint64_t v15 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  cntrl = v22.__imp_.__cntrl_;
  if (v22.__imp_.__cntrl_ && !atomic_fetch_add(&v22.__imp_.__cntrl_->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
    std::__shared_weak_count::__release_weak(cntrl);
  }
  std::string::size_type v17 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_46:
  E5RT::RemoveAll(a2, v3);
}

void sub_192360B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void E5RT::E5BundleCacheManager::PurgeBundlesForInputPath(E5RT::E5BundleCacheManager *a1, std::string *a2)
{
  E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<std::string>((uint64_t)a1, a2, &__p);
  E5RT::E5BundleCacheManager::PurgeAllBundlesWithinDirPath(a1, &__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_192360BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192360BE0(uid_t a1, gid_t a2, const char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3[23] >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *(const char **)a3;
  }
  if (chown(v6, a1, a2))
  {
    char v17 = 4;
    strcpy(__p, "e5rt");
    uint64_t v7 = E5RT::GetE5RTLog((uint64_t)__p);
    std::__fs::filesystem::path::__string_view v8 = v7;
    if (v17 < 0)
    {
      operator delete(*(void **)__p);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
LABEL_13:

        return;
      }
    }
    else if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      goto LABEL_13;
    }
    int v9 = a3[23];
    std::basic_string_view<_CharT, _Traits>::size_type v10 = *(uint64_t **)a3;
    std::basic_string_view<_CharT, _Traits>::size_type v11 = __error();
    if (v9 >= 0) {
      std::__fs::filesystem::path::__string_view v12 = a3;
    }
    else {
      std::__fs::filesystem::path::__string_view v12 = (const char *)v10;
    }
    int v13 = *v11;
    *(_DWORD *)std::__fs::filesystem::path __p = 136315394;
    *(void *)&__p[4] = v12;
    __int16 v15 = 1024;
    int v16 = v13;
    _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "E5BundleCacheManager::MarkAsMobileOwnedRecursive: path = %s failed with errno = %i \n", __p, 0x12u);
    goto LABEL_13;
  }
}

void sub_192360D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_192360D48()
{
  uint64_t v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (v0)
  {
    uint64_t v1 = v0;
    CFTypeRef v2 = SecTaskCopyValueForEntitlement(v0, @"com.apple.private.e5rt.sharing-e5-bundles-allowed", 0);
    if (v2)
    {
      byte_1E9301BE0 = v2 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
      CFRelease(v2);
    }
    CFRelease(v1);
  }
}

void sub_192360DD0()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  bzero(v7, 0x400uLL);
  uint64_t started = sysdir_start_search_path_enumeration_private();
  MEMORY[0x192FF2760](started, v7);
  char v6 = 4;
  strcpy(__p, "e5rt");
  uint64_t v1 = E5RT::GetE5RTLog((uint64_t)__p);
  CFTypeRef v2 = v1;
  if (v6 < 0)
  {
    operator delete(*(void **)__p);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_DWORD *)std::__fs::filesystem::path __p = 136315138;
    *(void *)&__p[4] = v7;
    _os_log_impl(&dword_1920CB000, v2, OS_LOG_TYPE_INFO, "E5BundleCacheManager: GlobalCacheDirectory %s\n", __p, 0xCu);
  }
LABEL_4:

  uint64_t v3 = [NSString stringWithCString:v7 encoding:4];
  uint64_t v4 = (void *)qword_1E9301BF0;
  qword_1E9301BF0 = v3;
}

void sub_192360F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void E5RT::ExecutionStreamTelemetryContainer::Create(E5RT::ExecutionStreamTelemetryContainer *this)
{
}

uint64_t *E5RT::ExecutionStreamTelemetryContainer::AddGPUTelemetryValue(uint64_t a1, long long *a2, double a3)
{
  std::string::size_type v5 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v5);
  *((double *)result + 5) = a3;
  return result;
}

double E5RT::ExecutionStreamTelemetryContainer::GetGPUTelemetryData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  if (!std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>((void *)(a1 + 8), a2))return 0.0; {
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>(v3, a2);
  }
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((double *)v4 + 5);
}

void E5RT::ExecutionStreamTelemetryContainer::~ExecutionStreamTelemetryContainer(E5RT::ExecutionStreamTelemetryContainer *this)
{
  *(void *)this = &unk_1EE300ED8;
  CFTypeRef v2 = (void **)*((void *)this + 3);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      CFTypeRef v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete(v3);
  }
}

{
  void **v2;
  void *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE300ED8;
  CFTypeRef v2 = (void **)*((void *)this + 3);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      CFTypeRef v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete(v3);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  char v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    int v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      __int16 v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          char v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            __int16 v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          __int16 v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *uint64_t v26 = 0;
  v26[1] = v11;
  unint64_t v27 = (std::string *)(v26 + 2);
  long long v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      BOOL v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  *uint64_t v32 = v45[0];
LABEL_92:
  __int16 v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1923615CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923615E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>(void *a1, uint64_t a2)
{
  CFTypeRef v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint8x8_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        CFTypeRef v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint8x8_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint8x8_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void E5RT::ExecutionStream::~ExecutionStream(E5RT::ExecutionStream *this)
{
  CFTypeRef v2 = (E5RT::ExecutionStreamImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325770;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  E5RT::ExecutionStreamImpl *v2;

  CFTypeRef v2 = (E5RT::ExecutionStreamImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325770;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  E5RT::ExecutionStreamImpl *v2;
  uint64_t vars8;

  CFTypeRef v2 = (E5RT::ExecutionStreamImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325770;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  JUMPOUT(0x192FF16B0);
}

void E5RT::ExecutionStreamPriv::~ExecutionStreamPriv(E5RT::ExecutionStreamPriv *this)
{
  CFTypeRef v2 = (E5RT::ExecutionStreamImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325770;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  E5RT::ExecutionStreamImpl *v2;
  uint64_t vars8;

  CFTypeRef v2 = (E5RT::ExecutionStreamImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325770;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  JUMPOUT(0x192FF16B0);
}

void *E5RT::ExecutionStream::ExecutionStream(void *this)
{
  *this = &unk_1EE325770;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1EE325770;
  this[1] = 0;
  return this;
}

void *E5RT::ExecutionStream::ExecutionStream(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE325770;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE325770;
  result[1] = v2;
  return result;
}

E5RT::ExecutionStreamImpl **std::unique_ptr<E5RT::ExecutionStreamImpl>::~unique_ptr[abi:ne180100](E5RT::ExecutionStreamImpl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t E5RT::ExecutionStreamPriv::StepStreamSync(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(E5RT::ExecuteOptions **)(a1 + 8);
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      unint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      unint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  E5RT::ExecutionStreamImpl::StepStreamSync(v2, v5);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_192361B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStream::EncodeComputeWorkload()
{
  exception = __cxa_allocate_exception(0x18uLL);
  v4[23] = 21;
  strcpy(v4, "EncodeComputeWorkload");
  uint64_t v1 = (char *)operator new(0x68uLL);
  long long v2 = xmmword_192DB2FE0;
  strcpy(v1, "ExecutionStream EncodeComputeWorkload() is no longer supported. Switch to ExecutionStreamOperation.");
  E5RT::Status::Status(v3, 2, &v1);
  E5RT::E5RTError::E5RTError(exception, v4, v3);
}

void sub_192361D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_192361DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192361DA8);
}

void E5RT::ExecutionStream::EncodeOperation(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  E5RT::ExecutionStreamImpl::EncodeOperation(v2, (uint64_t)&v4);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  if (*((void *)&v4 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_192361E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::ExecuteStreamSync(this[1]);
}

void *E5RT::ExecutionStream::ExecuteStreamSync(E5RT::ExecutionStreamImpl **this, const E5RT::ExecuteOptions *a2)
{
  return E5RT::ExecutionStreamImpl::ExecuteStreamSync(this[1], a2);
}

uint64_t E5RT::ExecutionStream::PreWireInUseAllocations(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::PreWireInUseAllocations(this[1]);
}

void E5RT::ExecutionStream::ResetStream(E5RT::ExecutionStreamImpl **this)
{
}

uint64_t E5RT::ExecutionStream::GetStreamId(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::GetStreamId(this[1]);
}

uint64_t E5RT::ExecutionStream::SubmitStreamAsync(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      unint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      unint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
  E5RT::ExecutionStreamImpl::SubmitStreamAsync(v2, v5);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_192361FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::function<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void E5RT::ExecutionStream::AsyncSubmit()
{
  exception = __cxa_allocate_exception(0x18uLL);
  v4[23] = 11;
  strcpy(v4, "AsyncSubmit");
  uint64_t v1 = (char *)operator new(0x48uLL);
  long long v2 = xmmword_192DB2FF0;
  E5RT::Status::Status(v3, 2, &v1);
  E5RT::E5RTError::E5RTError(exception, v4, v3);
}

void sub_19236216C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v23)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_1923621CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1923621BCLL);
}

uint64_t E5RT::ExecutionStream::GetInternalAsyncComputeRequestIdForLastSubmit(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::GetInternalAsyncComputeRequestIdForLastSubmit(this[1]);
}

uint64_t E5RT::ExecutionStream::GetConfigOptions(E5RT::ExecutionStreamImpl **this)
{
  return E5RT::ExecutionStreamImpl::GetConfigOptions(this[1]);
}

uint64_t E5RT::ExecutionStream::ResetConfigOptions@<X0>(E5RT::ExecutionStream *this@<X0>, void *a2@<X8>)
{
  return E5RT::ExecutionStreamImpl::ResetConfigOptions(*((void *)this + 1), a2);
}

uint64_t E5RT::ExecutionStream::SetConfigOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = v3;
  E5RT::ExecutionStreamImpl::SetConfigOptions(v2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_192362274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_192351358(a10);
  }
  _Unwind_Resume(exception_object);
}

void E5RT_Private::StepStreamSync(uint64_t *a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  void v8[3] = *a1;
  v8[4] = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "StepStreamSync");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = a2[3];
  if (!v4) {
    goto LABEL_7;
  }
  if ((void *)v4 != a2)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
LABEL_7:
    unint64_t v10 = (void *)v4;
    goto LABEL_9;
  }
  unint64_t v10 = v9;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v9);
LABEL_9:
  E5RT::ExecutionStreamPriv::StepStreamSync(v3, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
    if (!v2) {
      return;
    }
    goto LABEL_15;
  }
  if (v10) {
    (*(void (**)(void))(*v10 + 40))();
  }
  if (v2)
  {
LABEL_15:
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1923624AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1923624C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::function<void ()(void)>::~function((uint64_t *)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1923624DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT_Private::SetANEExecutionPriorityForStream(uint64_t *a1, int a2)
{
  qos_class_t v4 = [MEMORY[0x1E4F4E080] aneDefaultTaskQoS];
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      qos_class_t v5 = [MEMORY[0x1E4F4E080] aneRealTimeTaskQoS];
      uint64_t v6 = *a1;
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      uint64_t v12 = v6;
      uint8x8_t v13 = v7;
      if (v7) {
        goto LABEL_10;
      }
      goto LABEL_11;
    case 3:
      qos_class_t v5 = [MEMORY[0x1E4F4E080] aneUserInteractiveTaskQoS];
      uint64_t v9 = *a1;
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      uint64_t v12 = v9;
      uint8x8_t v13 = v7;
      if (v7) {
        goto LABEL_10;
      }
      goto LABEL_11;
    case 4:
      qos_class_t v4 = [MEMORY[0x1E4F4E080] aneUserInitiatedTaskQoS];
      goto LABEL_9;
    case 5:
      qos_class_t v5 = [MEMORY[0x1E4F4E080] aneDefaultTaskQoS];
      uint64_t v11 = *a1;
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      uint64_t v12 = v11;
      uint8x8_t v13 = v7;
      if (!v7) {
        goto LABEL_11;
      }
      goto LABEL_10;
    case 6:
    case 7:
      qos_class_t v5 = [MEMORY[0x1E4F4E080] aneBackgroundTaskQoS];
      uint64_t v8 = *a1;
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      uint64_t v12 = v8;
      uint8x8_t v13 = v7;
      if (!v7) {
        goto LABEL_11;
      }
      goto LABEL_10;
    default:
LABEL_9:
      qos_class_t v5 = v4;
      uint64_t v10 = *a1;
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      uint64_t v12 = v10;
      uint8x8_t v13 = v7;
      if (v7) {
LABEL_10:
      }
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
      E5RT_Private::SetQualityOfServiceForStream(&v12, v5);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      return;
  }
}

void sub_1923626C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void E5RT_Private::SetQualityOfServiceForStream(uint64_t *a1, qos_class_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  void v7[3] = *a1;
  v7[4] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "SetQualityOfServiceForStream");
    std::string::basic_string[abi:ne180100]<0>(v5, "Invalid execution stream pointer provided.");
    E5RT::Status::Status(v6, 2, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  E5RT::ExecutionStreamImpl::SetQualityOfService(*(void *)(v2 + 8), a2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_192362824(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_192362838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::ExecutionStreamImpl::~ExecutionStreamImpl(E5RT::ExecutionStreamImpl *this)
{
  E5RT::ExecutionStreamImpl::ResetStream(this);
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 5);
  while (v3)
  {
    qos_class_t v4 = v3;
    uint64_t v3 = (void *)*v3;
    qos_class_t v5 = (std::__shared_weak_count *)v4[3];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v4);
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *(void **)this;
    if (v8 != v7)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10)
        {
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 16;
      }
      while (v8 != v7);
      uint64_t v9 = *(void **)this;
    }
    *((void *)this + 1) = v7;
    operator delete(v9);
  }
}

void E5RT::ExecutionStreamImpl::ResetStream(E5RT::ExecutionStreamImpl *this)
{
  if (*((void *)this + 1) == *(void *)this)
  {
    char v15 = 4;
    strcpy((char *)__p, "e5rt");
    uint64_t v12 = E5RT::GetE5RTLog((uint64_t)__p);
    uint8x8_t v13 = v12;
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
        goto LABEL_27;
      }
    }
    else if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
LABEL_27:

      return;
    }
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_1920CB000, v13, OS_LOG_TYPE_INFO, "ResetStream() : No ops in stream.", (uint8_t *)__p, 2u);
    goto LABEL_27;
  }
  if (*((unsigned char *)this + 104))
  {
    AsyncComputeScheduler = (std::mutex *)E5RT::AsyncComputeScheduler::GetAsyncComputeScheduler(this);
    E5RT::AsyncComputeScheduler::FlushStreamTasks(AsyncComputeScheduler, *((void *)this + 8));
    *((unsigned char *)this + 104) = 0;
  }
  for (uint64_t i = (uint64_t **)*((void *)this + 5); i; uint64_t i = (uint64_t **)*i)
  {
    (*(void (**)(uint64_t *, void))(*i[2] + 144))(i[2], 0);
    (*(void (**)(uint64_t *))(*i[2] + 80))(i[2]);
  }
  if (*((void *)this + 6))
  {
    qos_class_t v4 = (void *)*((void *)this + 5);
    while (v4)
    {
      qos_class_t v5 = v4;
      qos_class_t v4 = (void *)*v4;
      uint64_t v6 = (std::__shared_weak_count *)v5[3];
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      operator delete(v5);
    }
    *((void *)this + 5) = 0;
    uint64_t v7 = *((void *)this + 4);
    if (v7)
    {
      for (uint64_t j = 0; j != v7; ++j)
        *(void *)(*((void *)this + 3) + 8 * j) = 0;
    }
    *((void *)this + 6) = 0;
  }
  uint64_t v9 = *(void *)this;
  uint64_t v10 = *((void *)this + 1);
  if (v10 != *(void *)this)
  {
    do
    {
      uint64_t v11 = *(std::__shared_weak_count **)(v10 - 8);
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v10 -= 16;
    }
    while (v10 != v9);
  }
  *((void *)this + 1) = v9;
  atomic_store(0, (unsigned __int8 *)this + 80);
  *((unsigned char *)this + 105) = 0;
}

void sub_192362C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::ExecutionStreamImpl::EncodeOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 80));
  if (v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v41, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v40, "Reset stream to add more operations to stream.");
    E5RT::Status::Status(&v38, 2, v40);
    E5RT::E5RTError::E5RTError(exception, &v41, &v38);
  }
  qos_class_t v5 = *(E5RT::ExecutionStreamOperationInternal **)a2;
  if (!*(void *)a2)
  {
    float v30 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v41, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v40, "Operation pointer is null.");
    E5RT::Status::Status(&v38, 1, v40);
    E5RT::E5RTError::E5RTError(v30, &v41, &v38);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  int8x8_t v38 = *(E5RT::ExecutionStreamOperationInternal **)a2;
  unint64_t v39 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!E5RT::ExecutionStreamOperationInternal::GetOpState(v5))
  {
    float v31 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v41, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v40, "Operation has not been prepared for encode.");
    E5RT::Status::Status(v37, 2, v40);
    E5RT::E5RTError::E5RTError(v31, &v41, v37);
  }
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(v38) == 2)
  {
    uint64_t v32 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v41, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v40, "Operation is already in use in another execution stream.");
    E5RT::Status::Status(v37, 2, v40);
    E5RT::E5RTError::E5RTError(v32, &v41, v37);
  }
  uint64_t v7 = E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal ***)a2) + 16;
  while (1)
  {
    uint64_t v7 = *(void *)v7;
    if (!v7) {
      break;
    }
    E5RT::IOPort::GetMemoryObject(*(E5RT::IOPort **)(v7 + 40), &v41);
    uint64_t v9 = v41;
    uint64_t v8 = v42;
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    if (!v9)
    {
      uint64_t v26 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v41, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v40, "No input memory object provided.");
      E5RT::Status::Status(v37, 2, v40);
      E5RT::E5RTError::E5RTError(v26, &v41, v37);
    }
  }
  for (uint64_t i = *(uint64_t ***)(E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal ***)a2)
                         + 16); i; uint64_t i = (uint64_t **)*i)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)i[5]) & 1) == 0)
    {
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)i[5], &v41);
      uint64_t v12 = v41;
      uint64_t v11 = v42;
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      if (!v12)
      {
        unint64_t v27 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v41, "EncodeOperation");
        std::string::basic_string[abi:ne180100]<0>(v40, "No output memory object provided for static port.");
        E5RT::Status::Status(v37, 2, v40);
        E5RT::E5RTError::E5RTError(v27, &v41, v37);
      }
    }
  }
  for (uint64_t j = *(uint64_t ***)(E5RT::ExecutionStreamOperation::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal ***)a2)
                         + 16); j; uint64_t j = (uint64_t **)*j)
  {
    if ((E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)j[5]) & 1) == 0)
    {
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)j[5], &v41);
      char v15 = v41;
      char v14 = v42;
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      if (!v15)
      {
        long long v28 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v41, "EncodeOperation");
        std::string::basic_string[abi:ne180100]<0>(v40, "No inout memory object provided for static port.");
        E5RT::Status::Status(v37, 2, v40);
        E5RT::E5RTError::E5RTError(v28, &v41, v37);
      }
    }
  }
  uint64_t v16 = *(void *)(a1 + 88);
  if (!v16)
  {
    if (qword_1E9301C08 != -1) {
      dispatch_once(&qword_1E9301C08, &unk_1EE396880);
    }
    uint64_t v16 = qword_1E9301C00;
  }
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, uint64_t, void))(*(void *)v38 + 72))(v38, v16, *(void *)(a1 + 64));
  std::__hash_table<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>,std::hash<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>,std::equal_to<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>,std::allocator<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>,std::shared_ptr<E5RT::ExecutionStreamOperationInternal> const&>(a1 + 24, (uint64_t *)&v38, &v38);
  (*(void (**)(E5RT::ExecutionStreamOperationInternal *, void))(*(void *)v38 + 144))(v38, *(void *)(a1 + 96));
  uint64_t v41 = (void (**)(void **))&unk_1EE3968B0;
  unint64_t v42 = (std::__shared_weak_count *)a1;
  unint64_t v43 = (void **)&v41;
  uint64_t v44 = (void **)&v41;
  if ((*(unsigned int (**)(E5RT::ExecutionStreamOperationInternal *))(*(void *)v38 + 16))(v38))
  {
    uint64_t v17 = (*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *))(*(void *)v38 + 24))(v38);
    uint64_t v18 = *(uint64_t **)v17;
    uint64_t v19 = *(uint64_t **)(v17 + 8);
    if (*(uint64_t **)v17 != v19)
    {
      do
      {
        uint64_t v35 = *v18;
        uint64_t v20 = (std::__shared_weak_count *)v18[1];
        unint64_t v36 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v44) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*((void (**)(void **, uint64_t *))*v44 + 6))(v44, &v35);
        uint64_t v21 = v36;
        if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        v18 += 2;
      }
      while (v18 != v19);
    }
  }
  else
  {
    BOOL v33 = v38;
    BOOL v34 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v44) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*((void (**)(void **, E5RT::ExecutionStreamOperationInternal **))*v44 + 6))(v44, &v33);
    int v22 = v34;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (*(void *)(a1 + 8) - *(void *)a1 == 16) {
        goto LABEL_59;
      }
      goto LABEL_49;
    }
  }
  if (*(void *)(a1 + 8) - *(void *)a1 == 16) {
    goto LABEL_59;
  }
LABEL_49:
  if (*(void *)(a1 + 48) == 1)
  {
    int v23 = *(E5RT::ExecutionStreamConfigOptions **)(a1 + 88);
    if (!v23)
    {
      if (qword_1E9301C08 != -1) {
        dispatch_once(&qword_1E9301C08, &unk_1EE396880);
      }
      int v23 = (E5RT::ExecutionStreamConfigOptions *)qword_1E9301C00;
    }
    if (E5RT::ExecutionStreamConfigOptions::GetEnableConcurrentSyncExecution(v23))
    {
      *(unsigned char *)(a1 + 105) = *(void *)(E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(*(E5RT::ExecutionStreamOperationInternal **)(*(void *)(a1 + 40) + 16))
                                       + 24) == 0;
      uint64_t v24 = v44;
      if (v44 == (void **)&v41) {
        goto LABEL_56;
      }
      goto LABEL_60;
    }
  }
LABEL_59:
  *(unsigned char *)(a1 + 105) = 0;
  uint64_t v24 = v44;
  if (v44 == (void **)&v41)
  {
LABEL_56:
    v41[4]((void **)&v41);
    char v25 = v39;
    if (!v39) {
      return;
    }
    goto LABEL_63;
  }
LABEL_60:
  if (v24) {
    (*((void (**)(void **))*v24 + 5))(v24);
  }
  char v25 = v39;
  if (v39)
  {
LABEL_63:
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1923635EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19)
  {
    if (!atomic_fetch_add(&a19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::GetConfigOptions(E5RT::ExecutionStreamImpl *this)
{
  uint64_t result = *((void *)this + 11);
  if (!result)
  {
    if (qword_1E9301C08 != -1) {
      dispatch_once(&qword_1E9301C08, &unk_1EE396880);
    }
    return qword_1E9301C00;
  }
  return result;
}

void *std::function<void ()(std::shared_ptr<E5RT::ExecutionStreamOperationInternal>)>::~function(void *a1)
{
  unsigned __int8 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::ExecutionStreamImpl::GetStreamId(E5RT::ExecutionStreamImpl *this)
{
  return *((void *)this + 8);
}

void *E5RT::ExecutionStreamImpl::ExecuteStreamSync(E5RT::ExecutionStreamImpl *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = (E5RT::ExecuteOptions *)E5RT::ExecuteOptions::SharedDefaultOption(this);
  qos_class_t v5 = 0;
  E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730532>((uint64_t)this, v2, (uint64_t)v4);
  uint64_t result = v5;
  if (v5 == v4) {
    return (void *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (void *)(*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_192363A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730532>(uint64_t a1, E5RT::ExecuteOptions *a2, uint64_t a3)
{
  void v23[4] = *MEMORY[0x1E4F143B8];
  v20[1] = 0x2B23406400000000;
  long long v21 = 0u;
  long long v22 = 0u;
  kdebug_trace();
  if (*(void *)(a1 + 8) == *(void *)a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v15, "ExecuteStreamSyncImpl");
    std::string::basic_string[abi:ne180100]<0>(v23, "No operations have been encoded to the execution stream.");
    E5RT::Status::Status(v14, 2, v23);
    E5RT::E5RTError::E5RTError(exception, &v15, v14);
  }
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    E5RT::ExecuteOptions::GetExecutionIdentifier(a2);
    E5RT::ExecutionOperationTelemetryEmitter::Create();
  }
  int v6 = *(unsigned __int8 *)(a1 + 105);
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  if (v6)
  {
    dispatch_semaphore_create(0);
    uint64_t v15 = 0;
    *(void *)&long long v16 = &v15;
    *((void *)&v16 + 1) = 0x3812000000;
    *(void *)&long long v17 = sub_1923663F0;
    *((void *)&v17 + 1) = sub_1923663FC;
    uint64_t v18 = 0;
    E5RT::Status::Status((E5RT::Status *)&v19);
  }
  uint64_t v9 = *(uint64_t **)a1;
  uint64_t v10 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v10)
  {
    do
    {
      (*(void (**)(uint64_t, E5RT::ExecuteOptions *))(*(void *)*v9 + 96))(*v9, a2);
      if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
      {
        E5RT::ExecutionStreamOperationInternal::GetTelemetryContainer(*v9, v23);
        uint64_t v11 = v23[0];
        v23[0] = 0;
        v20[0] = v11;
        E5RT::ExecutionOperationTelemetryEmitter::AddContainer(0, v20);
        uint64_t v12 = v20[0];
        v20[0] = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        uint64_t v13 = v23[0];
        v23[0] = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
      if (*(void *)(a3 + 24) && *v9 != *(void *)(*(void *)(a1 + 8) - 16))
      {
        uint64_t v15 = 0x2B2340A800000000;
        long long v16 = 0u;
        long long v17 = 0u;
        kdebug_trace();
        std::function<void ()(void)>::operator()(a3);
        E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&v15);
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    E5RT::ExecutionOperationTelemetryEmitter::EmitToOSSignpost(0);
    E5RT::ExecutionOperationTelemetryEmitter::EmitToCoreAnalytics(0);
  }
  return kdebug_trace();
}

void sub_192364020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_192364034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a22);
  if (v33)
  {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a33);
    _Unwind_Resume(a1);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a33);
  _Unwind_Resume(a1);
}

void *E5RT::ExecutionStreamImpl::ExecuteStreamSync(E5RT::ExecutionStreamImpl *this, const E5RT::ExecuteOptions *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  qos_class_t v4 = 0;
  E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730532>((uint64_t)this, a2, (uint64_t)v3);
  uint64_t result = v4;
  if (v4 == v3) {
    return (void *)(*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (void *)(*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void sub_1923642D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::StepStreamSync(E5RT::ExecuteOptions *a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  qos_class_t v4 = (E5RT::ExecuteOptions *)E5RT::ExecuteOptions::SharedDefaultOption(a1);
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      uint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730536>((uint64_t)a1, v4, (uint64_t)v7);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_192364440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::ExecuteStreamSyncImpl<(E5RT::TraceDetail::EventId)723730536>(uint64_t a1, E5RT::ExecuteOptions *a2, uint64_t a3)
{
  uint64_t v18 = 0x2B23406800000000;
  long long v19 = 0u;
  long long v20 = 0u;
  kdebug_trace();
  if (*(void *)(a1 + 8) == *(void *)a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "ExecuteStreamSyncImpl");
    std::string::basic_string[abi:ne180100]<0>(v16, "No operations have been encoded to the execution stream.");
    E5RT::Status::Status(v17, 2, v16);
    E5RT::E5RTError::E5RTError(exception, &v12, v17);
  }
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    E5RT::ExecuteOptions::GetExecutionIdentifier(a2);
    E5RT::ExecutionOperationTelemetryEmitter::Create();
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  int v6 = *(uint64_t **)a1;
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v7)
  {
    do
    {
      (*(void (**)(uint64_t, E5RT::ExecuteOptions *))(*(void *)*v6 + 96))(*v6, a2);
      if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
      {
        E5RT::ExecutionStreamOperationInternal::GetTelemetryContainer(*v6, v16);
        uint64_t v15 = v16[0];
        v16[0] = 0;
        E5RT::ExecutionOperationTelemetryEmitter::AddContainer(0, &v15);
        uint64_t v8 = v15;
        uint64_t v15 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
        uint64_t v9 = v16[0];
        v16[0] = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      if (*(void *)(a3 + 24) && *v6 != *(void *)(*(void *)(a1 + 8) - 16))
      {
        uint64_t v12 = 0x2B2340A800000000;
        long long v13 = 0u;
        long long v14 = 0u;
        kdebug_trace();
        std::function<void ()(void)>::operator()(a3);
        E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&v12);
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
  if (E5RT::ExecuteOptions::GetEnableResourceTelemetry(a2))
  {
    E5RT::ExecutionOperationTelemetryEmitter::EmitToOSSignpost(0);
    E5RT::ExecutionOperationTelemetryEmitter::EmitToCoreAnalytics(0);
  }
  return kdebug_trace();
}

void sub_192364748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_19236475C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a10);
  if (v29)
  {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a27);
    _Unwind_Resume(a1);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a27);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::PreWireInUseAllocations(E5RT::ExecutionStreamImpl *this)
{
  kdebug_trace();
  uint64_t v3 = *(void *)this;
  for (uint64_t i = *((void *)this + 1); v3 != i; v3 += 16)
    (*(void (**)(void))(**(void **)v3 + 88))();
  return kdebug_trace();
}

void sub_192364938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::SetQualityOfService(uint64_t this, qos_class_t a2)
{
  *(_DWORD *)(this + 96) = a2;
  *(unsigned char *)(this + 100) = 1;
  unsigned __int8 v2 = *(uint64_t ***)(this + 40);
  if (v2)
  {
    uint64_t v3 = this;
    do
    {
      this = (*(uint64_t (**)(uint64_t *, void))(*v2[2] + 144))(v2[2], *(void *)(v3 + 96));
      unsigned __int8 v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return this;
}

void E5RT::ExecutionStreamImpl::SubmitStreamAsync(uint64_t a1, void *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 72) + 1;
  *(void *)(a1 + 72) = v4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 80));
  *(unsigned char *)(a1 + 104) = 1;
  uint64_t v5 = (void *)a2[3];
  int v6 = (char *)operator new(0x68uLL);
  uint64_t v7 = (std::__shared_weak_count *)v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE396930;
  *(_OWORD *)(v6 + 24) = xmmword_192DB3060;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  float v31 = (std::__shared_weak_count *)v6;
  uint64_t v8 = *(E5RT::ExecutionStreamOperationInternal ***)a1;
  uint64_t v9 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 8);
  uint64_t v10 = (uint64_t)v9 - *(void *)a1;
  if (v9 != *(E5RT::ExecutionStreamOperationInternal ***)a1)
  {
    LOBYTE(v42[0]) = 0;
    char v44 = 0;
    if (!v5) {
      goto LABEL_59;
    }
    uint64_t v35 = v4;
    *(void *)&long long v36 = v6 + 24;
    *((void *)&v36 + 1) = v6;
    uint64_t v37 = v10 >> 4;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
    BOOL v38 = v5 != 0;
    if (v5 == a2)
    {
      uint8x8_t v40 = v39;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v39);
    }
    else
    {
      uint8x8_t v40 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v41 = v11;
    if (v44)
    {
      long long v48 = v36;
      long long v36 = 0uLL;
      uint64_t v47 = v35;
      uint64_t v49 = v37;
      BOOL v50 = v38;
      if (v40)
      {
        if (v40 == v39)
        {
          unint64_t v52 = v51;
          (*(void (**)(void *, void *))(v39[0] + 24))(v39, v51);
          uint64_t v11 = v41;
        }
        else
        {
          unint64_t v52 = v40;
          uint8x8_t v40 = 0;
        }
      }
      else
      {
        unint64_t v52 = 0;
      }
      uint64_t v53 = v11;
      char v46 = 0;
      uint64_t v12 = operator new(0x58uLL);
      long long v13 = v12;
      uint64_t v14 = v47;
      uint64_t v15 = v52;
      void *v12 = &unk_1EE396980;
      v12[1] = v14;
      *((_OWORD *)v12 + 1) = v48;
      long long v48 = 0uLL;
      void v12[4] = v49;
      *((unsigned char *)v12 + 40) = v50;
      if (v15)
      {
        if (v15 == v51)
        {
          v12[9] = v12 + 6;
          (*(void (**)(void *))(v51[0] + 24))(v51);
          uint64_t v11 = v53;
        }
        else
        {
          v12[9] = v15;
          unint64_t v52 = 0;
        }
      }
      else
      {
        v12[9] = 0;
      }
      v13[10] = v11;
      char v46 = v13;
      std::__function::__value_func<void ()(E5RT::ExecutionStreamOperationInternal const*,std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](v45, v42);
      if (v46 == v45)
      {
        (*(void (**)(void *))(v45[0] + 32))(v45);
        long long v16 = v52;
        if (v52 != v51) {
          goto LABEL_26;
        }
      }
      else
      {
        if (v46) {
          (*(void (**)(void))(*v46 + 40))();
        }
        long long v16 = v52;
        if (v52 != v51)
        {
LABEL_26:
          if (v16) {
            (*(void (**)(void *))(*v16 + 40))(v16);
          }
          long long v17 = (std::__shared_weak_count *)*((void *)&v48 + 1);
          if (!*((void *)&v48 + 1))
          {
LABEL_34:
            uint64_t v18 = v40;
            if (v40 != v39) {
              goto LABEL_35;
            }
            goto LABEL_55;
          }
LABEL_32:
          if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          goto LABEL_34;
        }
      }
      (*(void (**)(void *))(v51[0] + 32))(v51);
      long long v17 = (std::__shared_weak_count *)*((void *)&v48 + 1);
      if (!*((void *)&v48 + 1)) {
        goto LABEL_34;
      }
      goto LABEL_32;
    }
    long long v48 = v36;
    long long v36 = 0uLL;
    uint64_t v47 = v35;
    uint64_t v49 = v37;
    BOOL v50 = v38;
    if (v40)
    {
      if (v40 == v39)
      {
        unint64_t v52 = v51;
        (*(void (**)(void *, void *))(v39[0] + 24))(v39, v51);
        uint64_t v11 = v41;
      }
      else
      {
        unint64_t v52 = v40;
        uint8x8_t v40 = 0;
      }
    }
    else
    {
      unint64_t v52 = 0;
    }
    uint64_t v53 = v11;
    unint64_t v43 = 0;
    long long v20 = operator new(0x58uLL);
    long long v21 = v20;
    uint64_t v22 = v47;
    int v23 = v52;
    *long long v20 = &unk_1EE396980;
    v20[1] = v22;
    *((_OWORD *)v20 + 1) = v48;
    long long v48 = 0uLL;
    void v20[4] = v49;
    *((unsigned char *)v20 + 40) = v50;
    if (v23)
    {
      if (v23 == v51)
      {
        v20[9] = v20 + 6;
        (*(void (**)(void *))(v51[0] + 24))(v51);
        uint64_t v24 = v52;
        v21[10] = v53;
        unint64_t v43 = v21;
        if (v24 == v51) {
          goto LABEL_51;
        }
      }
      else
      {
        v20[9] = v23;
        unint64_t v52 = 0;
        v20[10] = v11;
        unint64_t v43 = v20;
        uint64_t v24 = v52;
        if (v52 == v51)
        {
LABEL_51:
          (*(void (**)(void *))(v51[0] + 32))(v51);
          char v25 = (std::__shared_weak_count *)*((void *)&v48 + 1);
          if (!*((void *)&v48 + 1)) {
            goto LABEL_54;
          }
          goto LABEL_52;
        }
      }
    }
    else
    {
      v20[9] = 0;
      v20[10] = v11;
      unint64_t v43 = v20;
      uint64_t v24 = v52;
      if (v52 == v51) {
        goto LABEL_51;
      }
    }
    if (v24) {
      (*(void (**)(void *))(*v24 + 40))(v24);
    }
    char v25 = (std::__shared_weak_count *)*((void *)&v48 + 1);
    if (!*((void *)&v48 + 1))
    {
LABEL_54:
      char v44 = 1;
      uint64_t v18 = v40;
      if (v40 != v39)
      {
LABEL_35:
        if (v18) {
          (*(void (**)(void *))(*v18 + 40))(v18);
        }
        long long v19 = (std::__shared_weak_count *)*((void *)&v36 + 1);
        if (!*((void *)&v36 + 1)) {
          goto LABEL_58;
        }
        goto LABEL_56;
      }
LABEL_55:
      (*(void (**)(void *))(v39[0] + 32))(v39);
      long long v19 = (std::__shared_weak_count *)*((void *)&v36 + 1);
      if (!*((void *)&v36 + 1))
      {
LABEL_58:
        uint64_t v8 = *(E5RT::ExecutionStreamOperationInternal ***)a1;
        uint64_t v9 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 8);
LABEL_59:
        while (v8 != v9)
        {
          uint64_t v26 = *v8;
          if (!*v8)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(&v47, "SubmitStreamAsync");
            std::string::basic_string[abi:ne180100]<0>(&v35, "Async execution is not supported with program function encodes. Use Execution stream operations instead.");
            E5RT::Status::Status(v45, 2, &v35);
            E5RT::E5RTError::E5RTError(exception, &v47, v45);
          }
          CompletionAsyncEventRef = (E5RT::AsyncEvent *)E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEventRef(*v8);
          if (E5RT::ExecutionStreamOperationInternal::HasInternalCompletionEventBound(v26))
          {
            E5RT::AsyncEvent::GetActiveFutureValue(CompletionAsyncEventRef);
            E5RT::AsyncEvent::SetActiveFutureValue(CompletionAsyncEventRef);
          }
          uint64_t v28 = *(void *)(a1 + 64);
          LOBYTE(v32[0]) = 0;
          char v34 = 0;
          if (!v44) {
            goto LABEL_73;
          }
          uint64_t v29 = (uint64_t)v43;
          if (v43)
          {
            if (v43 == v42)
            {
              uint64_t v33 = v32;
              (*(void (**)(void *, void *))(v42[0] + 24))(v42, v32);
              goto LABEL_72;
            }
            uint64_t v29 = (*(uint64_t (**)(void))(*v43 + 16))();
          }
          uint64_t v33 = (void *)v29;
LABEL_72:
          char v34 = 1;
LABEL_73:
          (*(void (**)(E5RT::ExecutionStreamOperationInternal *, uint64_t, uint64_t, void *))(*(void *)v26 + 112))(v26, v28, v4, v32);
          if (v34)
          {
            if (v33 == v32)
            {
              (*(void (**)(void *))(v32[0] + 32))(v32);
            }
            else if (v33)
            {
              (*(void (**)(void))(*v33 + 40))();
            }
          }
          v8 += 2;
        }
        if (v44)
        {
          if (v43 == v42)
          {
            (*(void (**)(void *))(v42[0] + 32))(v42);
            uint64_t v7 = v31;
            if (!v31) {
              return;
            }
            goto LABEL_82;
          }
          if (v43) {
            (*(void (**)(void))(*v43 + 40))();
          }
        }
        goto LABEL_81;
      }
LABEL_56:
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      goto LABEL_58;
    }
LABEL_52:
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    goto LABEL_54;
  }
  if (!v5)
  {
LABEL_81:
    uint64_t v7 = v31;
    if (!v31) {
      return;
    }
    goto LABEL_82;
  }
  std::function<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::operator()((uint64_t)a2, *(void *)(a1 + 64), v4);
LABEL_82:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1923653BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a9) {
    sub_1922FDF50();
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_1923655BC(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return a1;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t E5RT::ExecutionStreamImpl::GetInternalAsyncComputeRequestIdForLastSubmit(E5RT::ExecutionStreamImpl *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetInternalAsyncComputeRequestIdForLastSubmit");
    std::string::basic_string[abi:ne180100]<0>(v3, "No async submits have been made to the stream yet.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_19236574C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_1923657C0(E5RT::ExecutionStreamConfigOptions *a1)
{
}

uint64_t E5RT::ExecutionStreamImpl::ResetConfigOptions@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(this + 80));
  if (v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "ResetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v5, "Config Options cannot be reset before the stream is reset.");
    E5RT::Status::Status(v6, 2, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  uint64_t v3 = *(void *)(this + 88);
  if (v3) {
    *(void *)(this + 88) = 0;
  }
  *a2 = v3;
  return this;
}

void sub_1923658B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamImpl::SetConfigOptions(uint64_t result, uint64_t *a2)
{
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v8, "configOptions is NULL.");
    E5RT::Status::Status(v9, 1, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(result + 80));
  if (v2)
  {
    uint64_t v7 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v8, "Config Options cannot be set before the stream is reset.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(v7, v10, v9);
  }
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *(void *)(result + 88);
  *(void *)(result + 88) = v3;
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
    return v5(v4);
  }
  return result;
}

void sub_192365AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *std::__hash_table<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>,std::hash<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>,std::equal_to<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>,std::allocator<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>,std::shared_ptr<E5RT::ExecutionStreamOperationInternal> const&>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      long long v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            long long v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  long long v16 = (void *)(a1 + 16);
  long long v13 = operator new(0x20uLL);
  *long long v13 = 0;
  v13[1] = v9;
  uint64_t v17 = a3[1];
  id v13[2] = *a3;
  void v13[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    long long v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_28:
      *long long v13 = *v21;
LABEL_63:
      void *v21 = v13;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v26) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v26)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v26 < 3uLL || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < *(void *)&v26) {
LABEL_39:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        long long v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        long long v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v9;
      uint64_t v20 = *(void *)a1;
      long long v21 = *(void **)(*(void *)a1 + 8 * (v30 & v9));
      if (v21) {
        goto LABEL_28;
      }
    }
  }
  *long long v13 = *v16;
  *long long v16 = v13;
  *(void *)(v20 + 8 * v3) = v16;
  if (*v13)
  {
    unint64_t v31 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10) {
        v31 %= v10;
      }
    }
    else
    {
      v31 &= v10 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_192365ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192365EE8()
{
}

__n128 sub_192365EFC(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned __int8 v2 = &unk_1EE3968B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192365F48(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3968B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_192365F78(uint64_t a1, void *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  *(void *)&long long v17 = *a2;
  uint64_t v4 = v17;
  *((void *)&v17 + 1) = v3;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) == 13)
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::Ops::JitCallOperation::GetCalleeOperation(v4, &v20);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
    unint64_t v10 = *(uint64_t **)v9;
    uint8x8_t v11 = *(uint64_t **)(v9 + 8);
    if (*(uint64_t **)v9 != v11)
    {
      do
      {
        uint64_t v12 = *(void *)(a1 + 16);
        uint64_t v18 = *v10;
        long long v13 = (std::__shared_weak_count *)v10[1];
        float v19 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = *(void *)(v12 + 24);
        if (!v14) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 48))(v14, &v18);
        uint64_t v15 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        v10 += 2;
      }
      while (v10 != v11);
    }
    long long v16 = v21;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    uint64_t v6 = *(uint64_t **)(v5 + 8);
    if ((unint64_t)v6 >= *(void *)(v5 + 16))
    {
      unint64_t v7 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>(v5, &v17);
    }
    else
    {
      uint64_t *v6 = v4;
      v6[1] = (uint64_t)v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v7 = v6 + 2;
    }
    *(void *)(v5 + 8) = v7;
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_192366220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14 && !atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192366324(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT19ExecutionStreamImpl15EncodeOperationENSt3__110shared_ptrINS_24ExecutionStreamOperationEEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4E5RT19ExecutionStreamImpl15EncodeOperationENSt3__110shared_ptrINS_24ExecutionStreamOperationEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT19ExecutionStreamImpl15EncodeOperationENSt3__110shared_ptrINS_24ExecutionStreamOperationEEEE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT19ExecutionStreamImpl15EncodeOperationENSt3__110shared_ptrINS_24ExecutionStreamOperationEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_192366394()
{
  return &unk_1EE396910;
}

uint64_t std::function<void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unsigned __int8 v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_1923663F0(uint64_t a1, uint64_t a2)
{
  return E5RT::Status::Status(a1 + 48, a2 + 48);
}

void sub_1923663FC(uint64_t a1)
{
}

intptr_t sub_192366404(uint64_t a1, uint64_t a2, uint64_t a3, E5RT::E5RTError **a4)
{
  if (*a4)
  {
    Status = (const E5RT::Status *)E5RT::E5RTError::GetStatus(*a4);
    E5RT::Status::Status((E5RT::Status *)v6, Status);
    E5RT::Status::operator=();
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_192366480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::Status::~Status((E5RT::Status *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::~__func(uint64_t a1)
{
  JUMPOUT(0x192FF16B0);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::__clone()
{
  return 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE3796D0;
  uint64_t result = MEMORY[0x192FF2250](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::destroy(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return MEMORY[0x1F41817F8]();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v7 = v5;
  (*(void (**)(void))(v4 + 16))();
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1923665E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1922FDF50();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DB3289) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DB3289 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DB3289)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DB3289 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>),std::allocator<void({block_pointer} {__strong})(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>,void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::target_type()
{
}

void sub_192366690(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE396930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1923666B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE396930;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void sub_192366704(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  std::mutex::~mutex((std::mutex *)(a1 + 32));
}

void *sub_19236676C(void *a1)
{
  *a1 = &unk_1EE396980;
  uint64_t v2 = a1 + 6;
  uint64_t v3 = (void *)a1[9];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    if (!v4) {
      return a1;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    if (!v4) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_19236686C(void *a1)
{
  *a1 = &unk_1EE396980;
  uint64_t v2 = a1 + 6;
  uint64_t v3 = (void *)a1[9];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    if (!v4)
    {
LABEL_9:
      JUMPOUT(0x192FF16B0);
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  goto LABEL_9;
}

void *sub_192366980(uint64_t a1)
{
  uint64_t v2 = operator new(0x58uLL);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  void *v2 = &unk_1EE396980;
  v2[1] = v4;
  uint64_t v6 = *(void *)(a1 + 24);
  v2[2] = v5;
  void v2[3] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v2[4] = *(void *)(a1 + 32);
  *((unsigned char *)v2 + 40) = *(unsigned char *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 72);
  if (!v7) {
    goto LABEL_6;
  }
  if (v7 != a1 + 48)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_6:
    uint64_t v8 = *(void *)(a1 + 80);
    v3[9] = v7;
    v3[10] = v8;
    return v3;
  }
  v3[9] = v3 + 6;
  (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  v3[10] = *(void *)(a1 + 80);
  return v3;
}

void sub_192366A7C(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[3];
  if (v3) {
    sub_192367464(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_192366A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1EE396980;
  *(void *)(a2 + 8) = v4;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  *(void *)(a2 + 32) = v7;
  uint64_t result = *(void *)(a1 + 72);
  if (!result) {
    goto LABEL_6;
  }
  if (result != a1 + 48)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_6:
    *(void *)(a2 + 72) = result;
    *(void *)(a2 + 80) = *(void *)(a1 + 80);
    return result;
  }
  *(void *)(a2 + 72) = a2 + 48;
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  return result;
}

void sub_192366B90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3) {
    sub_192367464(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_192366BA8(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_192366C94(char *__p)
{
  uint64_t v2 = __p + 48;
  uint64_t v3 = (char *)*((void *)__p + 9);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 3);
    if (!v4) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 3);
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_5:
    uint64_t v5 = __p;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = __p;

LABEL_7:
  operator delete(v5);
}

void sub_192366D98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  if (*(unsigned char *)(a1 + 40) && v4)
  {
    unint64_t v10 = (std::mutex *)(*(void *)(a1 + 16) + 8);
    std::mutex::lock(v10);
    uint64_t v11 = *(void *)(a1 + 16);
    if (!*(void *)(v11 + 72))
    {
      *(void *)(v11 + 72) = v4;
      uint64_t v4 = 0;
    }
    std::mutex::unlock(v10);
  }
  if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 1uLL) == *(void *)(a1 + 32) - 1)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(v5 + 72);
    if (v6) {
      *(void *)(v5 + 72) = 0;
    }
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v8 + 48))(v8, &v14, &v13, &v12);
    uint64_t v9 = v12;
    uint64_t v12 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

void sub_192366EE0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_192366F30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT19ExecutionStreamImpl17SubmitStreamAsyncENSt3__18functionIFvyyNS1_10unique_ptrINS_9E5RTError"
                     "ENS1_14default_deleteIS4_EEEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT19ExecutionStreamImpl17SubmitStreamAsyncENSt3__18functionIFvyyNS1_10unique_ptrINS"
                                "_9E5RTErrorENS1_14default_deleteIS4_EEEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT19ExecutionStreamImpl17SubmitStreamAsyncENSt3__18functionIFvyyNS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS4_EEEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT19ExecutionStreamImpl17SubmitStreamAsyncENSt3__18functionIFvyyNS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS4_EEEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192366FA0()
{
  return &unk_1EE3969E0;
}

void *std::__function::__value_func<void ()(E5RT::ExecutionStreamOperationInternal const*,std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_192367238(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t sub_192367244(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  return result;
}

void OUTLINED_FUNCTION_6(atomic_ullong *a1@<X8>)
{
}

void sub_19236726C(uint64_t *a1)
{
  if (sub_192367244(a1))
  {
    OUTLINED_FUNCTION_0();
    (*(void (**)(void))(v1 + 8))();
  }
  OUTLINED_FUNCTION_5();
}

void sub_1923672BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (v2 == a2)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
  }
  else if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  OUTLINED_FUNCTION_5();
}

void sub_192367350(std::__shared_weak_count **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    OUTLINED_FUNCTION_6(&v1->__shared_owners_);
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  OUTLINED_FUNCTION_5();
}

uint64_t sub_1923673C8(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

void sub_192367404(std::__shared_weak_count **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    OUTLINED_FUNCTION_6(&v1->__shared_owners_);
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_192367464(uint64_t a1)
{
  OUTLINED_FUNCTION_6((atomic_ullong *)(a1 + 8));
  if (!v2)
  {
    unint64_t v3 = v1;
    OUTLINED_FUNCTION_0();
    (*(void (**)(void))(v4 + 16))();
    std::__shared_weak_count::__release_weak(v3);
  }
}

void E5RT::ExecutionStreamOperation::~ExecutionStreamOperation(E5RT::ExecutionStreamOperation *this)
{
}

uint64_t E5RT::ExecutionStreamOperation::GetInOutPorts(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetInOutPorts(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::GetOpName(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetOpName(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::BindDependentAsyncEvents(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

void E5RT::ExecutionStreamOperation::BindCompletionAsyncEvent(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v2 + 56))(v2, &v4);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  if (*((void *)&v4 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1923675FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t E5RT::ExecutionStreamOperation::GetDependentAsyncEvents(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::GetCompletionAsyncEvent@<X0>(E5RT::ExecutionStreamOperation *this@<X0>, void *a2@<X8>)
{
  return E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*((void *)this + 1), a2);
}

void E5RT::ExecutionStreamOperation::ReshapeOperation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)unint64_t v10 = 0u;
  *(_OWORD *)std::__fs::filesystem::path __p = 0u;
  int v12 = 1065353216;
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v13 = (long long *)(i + 2);
    long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v10, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, &v13);
    if (i[5]) {
      operator new();
    }
    i[5] = 0;
    uint64_t v5 = (std::__shared_weak_count *)v4[6];
    v4[5] = 0;
    v4[6] = 0;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(void, void **))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8), v10);
  uint64_t v6 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void **)*v6;
        uint64_t v8 = (std::__shared_weak_count *)v6[6];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        if (*((char *)v6 + 39) < 0) {
          break;
        }
        operator delete(v6);
        uint64_t v6 = v7;
        if (!v7) {
          goto LABEL_17;
        }
      }
      operator delete(v6[2]);
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
LABEL_17:
  uint64_t v9 = v10[0];
  v10[0] = 0;
  if (v9) {
    operator delete(v9);
  }
}

void sub_192367824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_192367838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPortRef(uint64_t a1, uint64_t a2)
{
  return E5RT::ExecutionStreamOperationInternal::GetInputPortRef(*(void *)(a1 + 8), a2);
}

{
  return E5RT::ExecutionStreamOperationInternal::GetInputPortRef(*(void *)(a1 + 8), a2);
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPortRef(uint64_t a1, uint64_t a2)
{
  return E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(*(void *)(a1 + 8), a2);
}

{
  return E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(*(void *)(a1 + 8), a2);
}

uint64_t E5RT::ExecutionStreamOperation::GetInOutPortRef(uint64_t a1, uint64_t a2)
{
  return E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(*(void *)(a1 + 8), a2);
}

{
  return E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(*(void *)(a1 + 8), a2);
}

uint64_t *E5RT::ExecutionStreamOperation::GetDependentAsyncEventRef(uint64_t a1, unsigned __int8 *a2)
{
  return E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEventRef(*(void *)(a1 + 8), a2);
}

uint64_t E5RT::ExecutionStreamOperation::GetCompletionAsyncEventRef(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEventRef(this[1]);
}

{
  return E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEventRef(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::GetConfigOptions(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetConfigOptions(this[1]);
}

uint64_t E5RT::ExecutionStreamOperation::ResetConfigOptions(E5RT::ExecutionStreamOperation *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 128))();
}

uint64_t E5RT::ExecutionStreamOperation::SetConfigOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 136))(v2, &v5);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_192367950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_192351358(a10);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::ExecutionStreamOperation::SerializeInferenceFrameData(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  E5RT::ExecutionStreamOperationInternal::SerializeInferenceFrameData(v4, (const void **)v7, (uint64_t)__p, a4);
  if ((SHIBYTE(v6) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(v7[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v8) < 0) {
    goto LABEL_5;
  }
}

void sub_192367A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::make_unique[abi:ne180100]<Espresso::AOT::AOTCompilerOptionsManager::Impl,std::string,std::string>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperation::SerializeInferenceFrameDataPerSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::__fs::filesystem::path __p = *(_OWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  (*(void (**)(uint64_t, void **, void **))(*(void *)v3 + 152))(v3, v6, __p);
  if ((SHIBYTE(v5) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v7) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(v6[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v7) < 0) {
    goto LABEL_5;
  }
}

void sub_192367AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::make_unique[abi:ne180100]<Espresso::AOT::AOTCompilerOptionsManager::Impl,std::string,std::string>((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::OperandDescriptor const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::OperandDescriptor const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::OperandDescriptor const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DB35B5) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DB35B5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DB35B5)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DB35B5 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::make_unique[abi:ne180100]<Espresso::AOT::AOTCompilerOptionsManager::Impl,std::string,std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(E5RT::ExecutionStreamOperationInternal *this)
{
  *(void *)this = &unk_1EE325DB8;
  kdebug_trace_string();
  uint64_t v2 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 19);
  while (v5)
  {
    uint64_t v6 = v5;
    uint64_t v5 = (void *)*v5;
    uint64_t v7 = (std::__shared_weak_count *)v6[3];
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    operator delete(v6);
  }
  uint64_t v8 = (void *)*((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)*((void *)this + 14);
  if (v9)
  {
    do
    {
      while (1)
      {
        unint64_t v10 = (void **)*v9;
        uint64_t v11 = (std::__shared_weak_count *)v9[6];
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        if (*((char *)v9 + 39) < 0) {
          break;
        }
        operator delete(v9);
        uint64_t v9 = v10;
        if (!v10) {
          goto LABEL_26;
        }
      }
      operator delete(v9[2]);
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
LABEL_26:
  int v12 = (void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void **)*((void *)this + 9);
  if (v13)
  {
    do
    {
      while (1)
      {
        uint64_t v14 = (void **)*v13;
        uint64_t v15 = (std::__shared_weak_count *)v13[6];
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (*((char *)v13 + 39) < 0) {
          break;
        }
        operator delete(v13);
        uint64_t v13 = v14;
        if (!v14) {
          goto LABEL_36;
        }
      }
      operator delete(v13[2]);
      operator delete(v13);
      uint64_t v13 = v14;
    }
    while (v14);
  }
LABEL_36:
  long long v16 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v16) {
    operator delete(v16);
  }
  long long v17 = (void **)*((void *)this + 4);
  if (v17)
  {
    do
    {
      while (1)
      {
        uint64_t v18 = (void **)*v17;
        float v19 = (std::__shared_weak_count *)v17[6];
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        if (*((char *)v17 + 39) < 0) {
          break;
        }
        operator delete(v17);
        long long v17 = v18;
        if (!v18) {
          goto LABEL_46;
        }
      }
      operator delete(v17[2]);
      operator delete(v17);
      long long v17 = v18;
    }
    while (v18);
  }
LABEL_46:
  uint64_t v20 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v20) {
    operator delete(v20);
  }

  E5RT::ExecutionStreamOperation::~ExecutionStreamOperation(this);
}

uint64_t E5RT::ExecutionStreamOperationInternal::PreWireMemoryObjects(uint64_t this)
{
  *(unsigned char *)(this + 248) |= 8u;
  return this;
}

void sub_192367FB8(void *a1, uint64_t **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    while (1)
    {
      E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v2[5], &v24);
      if (v24 && !E5RT::MemoryObject::TryAsSurface(v24))
      {
        if (!E5RT::MemoryObject::TryAsBuffer(v24))
        {
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v22, "operator()");
          std::string::basic_string[abi:ne180100]<0>(&v21, "Found memory object with invalid type.");
          E5RT::Status::Status(&v20, 2, &v21);
          E5RT::E5RTError::E5RTError(exception, &v22, &v20);
        }
        uint64_t v4 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(v24);
        int BufferType = E5RT::BufferObject::GetBufferType(v4);
        if (((a1[29] >> BufferType) & 1) == 0) {
          break;
        }
      }
      uint64_t v6 = v25;
      if (v25)
      {
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      uint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        return;
      }
    }
    std::to_string(&v19, BufferType);
    uint64_t v7 = std::string::insert(&v19, 0, "BufferType = ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v20, " not supported for opcode = ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    unsigned int v11 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
    std::to_string(&__p, v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v14->__r_.__value_.__r.__words[2];
    long long v22 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_20:
        if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_27:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      long long v16 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v21, "operator()");
      E5RT::Status::Status(&v20, 2, &v22);
      E5RT::E5RTError::E5RTError(v16, &v21, &v20);
    }
LABEL_22:
    operator delete(v19.__r_.__value_.__l.__data_);
    goto LABEL_23;
  }
}

void sub_192368290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  E5RT::Status::~Status((E5RT::Status *)&a21);
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v35 - 57) < 0)
      {
        operator delete(*(void **)(v35 - 80));
        std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 48);
        _Unwind_Resume(a1);
      }
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

void E5RT::ExecutionStreamOperationInternal::EncodeOperation(E5RT::ExecutionStreamOperationInternal *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  if ((*((unsigned char *)this + 248) & 7) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v38, "Op is not in \"ReadyForEncode\" state and hence cannot be encoded.");
    E5RT::Status::Status(v36, 2, v38);
    E5RT::E5RTError::E5RTError(exception, &v40, v36);
  }
  if (!a2)
  {
    uint64_t v35 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "EncodeOperation");
    std::string::basic_string[abi:ne180100]<0>(v38, "streamConfigOptions is NULL.");
    E5RT::Status::Status(v36, 1, v38);
    E5RT::E5RTError::E5RTError(v35, &v40, v36);
  }
  if ((*(unsigned int (**)(E5RT::ExecutionStreamOperationInternal *))(*(void *)this + 32))(this) != 8
    && (*(unsigned int (**)(E5RT::ExecutionStreamOperationInternal *))(*(void *)this + 32))(this) != 6)
  {
    std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)&v40, (uint64_t)this + 16);
    BOOL v6 = sub_19236D3F4((uint64_t *)__p);
    uint64_t v7 = (void **)__p;
    if (__p)
    {
      do
      {
        while (1)
        {
          long long v8 = (void **)*v7;
          uint64_t v9 = (std::__shared_weak_count *)v7[6];
          if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          if (*((char *)v7 + 39) < 0) {
            break;
          }
          operator delete(v7);
          uint64_t v7 = v8;
          if (!v8) {
            goto LABEL_13;
          }
        }
        operator delete(v7[2]);
        operator delete(v7);
        uint64_t v7 = v8;
      }
      while (v8);
    }
LABEL_13:
    long long v10 = v40;
    uint8x8_t v40 = 0;
    if (v10) {
      operator delete(v10);
    }
    if (v6) {
      goto LABEL_74;
    }
    std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v38, (uint64_t)this + 96);
    BOOL v11 = sub_19236D3F4((uint64_t *)v39);
    int v12 = (void **)v39;
    if (v39)
    {
      do
      {
        while (1)
        {
          uint64_t v13 = (void **)*v12;
          uint64_t v14 = (std::__shared_weak_count *)v12[6];
          if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
          if (*((char *)v12 + 39) < 0) {
            break;
          }
          operator delete(v12);
          int v12 = v13;
          if (!v13) {
            goto LABEL_24;
          }
        }
        operator delete(v12[2]);
        operator delete(v12);
        int v12 = v13;
      }
      while (v13);
    }
LABEL_24:
    long long v15 = v38[0];
    v38[0] = 0;
    if (v15) {
      operator delete(v15);
    }
    if (v11) {
      goto LABEL_74;
    }
    std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v36, (uint64_t)this + 56);
    BOOL v16 = sub_19236D3F4((uint64_t *)v37);
    long long v17 = (void **)v37;
    if (v37)
    {
      do
      {
        while (1)
        {
          uint64_t v18 = (void **)*v17;
          std::string v19 = (std::__shared_weak_count *)v17[6];
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          if (*((char *)v17 + 39) < 0) {
            break;
          }
          operator delete(v17);
          long long v17 = v18;
          if (!v18) {
            goto LABEL_35;
          }
        }
        operator delete(v17[2]);
        operator delete(v17);
        long long v17 = v18;
      }
      while (v18);
    }
LABEL_35:
    std::string v20 = v36[0];
    v36[0] = 0;
    if (v20)
    {
      operator delete(v20);
      if (!v16) {
        goto LABEL_37;
      }
LABEL_74:
      uint64_t v33 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v40, "EncodeOperation");
      std::string::basic_string[abi:ne180100]<0>(v38, "Max port descriptor is only supported on GPU ops currently.");
      E5RT::Status::Status(v36, 2, v38);
      E5RT::E5RTError::E5RTError(v33, &v40, v36);
    }
    if (v16) {
      goto LABEL_74;
    }
  }
LABEL_37:
  LOBYTE(v38[0]) = 1;
  if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,32ul>,true,BOOL,std::__identity,0>((void *)this + 29, 0, (uint64_t)this + 232, 0x20u, v38) != 4)
  {
    sub_192367FB8(this, *((uint64_t ***)this + 4));
    sub_192367FB8(this, *((uint64_t ***)this + 9));
    sub_192367FB8(this, *((uint64_t ***)this + 14));
  }
  for (uint64_t i = (void *)*((void *)this + 4); i; uint64_t i = (void *)*i)
  {
    long long v22 = (const void *)i[5];
    if (v22
    {
      unint64_t v24 = (std::__shared_weak_count *)i[6];
      uint8x8_t v40 = v23;
      uint64_t v41 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      unint64_t v24 = 0;
      std::string::size_type v23 = 0;
      uint8x8_t v40 = 0;
      uint64_t v41 = 0;
    }
    E5RT::IOPortPriv::LockPort((E5RT::IOPortPriv *)v23, 1);
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  for (uint64_t j = (void *)*((void *)this + 9); j; uint64_t j = (void *)*j)
  {
    int8x8_t v26 = (const void *)j[5];
    if (v26
    {
      uint8x8_t v28 = (std::__shared_weak_count *)j[6];
      uint8x8_t v40 = v27;
      uint64_t v41 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint8x8_t v28 = 0;
      unint64_t v27 = 0;
      uint8x8_t v40 = 0;
      uint64_t v41 = 0;
    }
    E5RT::IOPortPriv::LockPort((E5RT::IOPortPriv *)v27, 1);
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  for (k = (void *)*((void *)this + 14); k; k = (void *)*k)
  {
    unint64_t v30 = (const void *)k[5];
    if (v30
    {
      uint64_t v32 = (std::__shared_weak_count *)k[6];
      uint8x8_t v40 = v31;
      uint64_t v41 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v32 = 0;
      unint64_t v31 = 0;
      uint8x8_t v40 = 0;
      uint64_t v41 = 0;
    }
    E5RT::IOPortPriv::LockPort((E5RT::IOPortPriv *)v31, 1);
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  *((unsigned char *)this + 248) = *((unsigned char *)this + 248) & 0xF8 | 2;
  *((void *)this + 27) = a3;
  *((void *)this + 28) = a2;
}

void sub_192368B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192368BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192368BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192368BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192368BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192368BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192368C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v29 & 1) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperationInternal::ResetOperation(E5RT::ExecutionStreamOperationInternal *this)
{
  if ((*((unsigned char *)this + 248) & 7) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "ResetOperation");
    std::string::basic_string[abi:ne180100]<0>(v15, "Op has not been encoded and hence cannot be reset to \"ReadyForEncode\" state");
    E5RT::Status::Status(v16, 2, v15);
    E5RT::E5RTError::E5RTError(exception, &v17, v16);
  }
  for (uint64_t i = (void *)*((void *)this + 4); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = (const void *)i[5];
    if (v3
    {
      uint64_t v5 = (std::__shared_weak_count *)i[6];
      long long v17 = v4;
      uint64_t v18 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v4 = 0;
      long long v17 = 0;
      uint64_t v18 = 0;
    }
    E5RT::IOPortPriv::LockPort(v4, 0);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  for (uint64_t j = (void *)*((void *)this + 9); j; uint64_t j = (void *)*j)
  {
    uint64_t v7 = (const void *)j[5];
    if (v7
    {
      uint64_t v9 = (std::__shared_weak_count *)j[6];
      long long v17 = v8;
      uint64_t v18 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v9 = 0;
      long long v8 = 0;
      long long v17 = 0;
      uint64_t v18 = 0;
    }
    E5RT::IOPortPriv::LockPort(v8, 0);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  for (k = (void *)*((void *)this + 14); k; k = (void *)*k)
  {
    BOOL v11 = (const void *)k[5];
    if (v11
    {
      uint64_t v13 = (std::__shared_weak_count *)k[6];
      long long v17 = v12;
      uint64_t v18 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v13 = 0;
      int v12 = 0;
      long long v17 = 0;
      uint64_t v18 = 0;
    }
    E5RT::IOPortPriv::LockPort(v12, 0);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *((unsigned char *)this + 248) = *((unsigned char *)this + 248) & 0xF0 | 1;
  *((void *)this + 32) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
}

void sub_192369068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192369084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperationInternal::BindDependentAsyncEvents(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned char *)(a1 + 248) & 7) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "BindDependentAsyncEvents");
    std::string::basic_string[abi:ne180100]<0>(v7, "Operation bind state cannot be changed  while it's encoded and in-use from a stream.");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  uint64_t v2 = (void *)a2[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3)
    {
      do
      {
        if (v2[2] == v3)
        {
          uint64_t v5 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v9, "BindDependentAsyncEvents");
          std::string::basic_string[abi:ne180100]<0>(v7, "Dependent and completion event bindings must be distinct. Dependent and completion async events can use the same underlying shared event object with different active future values.");
          E5RT::Status::Status(v8, 2, v7);
          E5RT::E5RTError::E5RTError(v5, v9, v8);
        }
        uint64_t v2 = (void *)*v2;
      }
      while (v2);
    }
    else
    {
      do
        uint64_t v2 = (void *)*v2;
      while (v2);
    }
  }
  uint64_t v4 = a1 + 136;

  std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__move_assign(v4, a2);
}

void sub_192369278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a17);
LABEL_6:
  if (v23) {
    __cxa_free_exception(v22);
  }
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  (*(void (**)(uint64_t, long long *, void))(*(void *)a1 + 64))(a1, &v3, 0);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)&v3 + 1);
  if (*((void *)&v3 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v3 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1923693E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEvents(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 136;
}

uint64_t E5RT::ExecutionStreamOperationInternal::ExecuteSync(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

void E5RT::ExecutionStreamOperationInternal::SubmitAsync(uint64_t a1)
{
  v17[6] = *(void **)MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 248) & 7) == 2)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v13 = 0x2B2340B000000000;
    long long v14 = 0u;
    long long v15 = 0u;
    kdebug_trace();
    uint64_t v2 = *(E5RT::AsyncEvent **)(a1 + 176);
    if (v2)
    {
      E5RT::AsyncEvent::GetActiveFutureValue(v2);
      *(_OWORD *)long long v10 = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v12 = 1065353216;
      for (uint64_t i = *(uint64_t ***)(a1 + 152); i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t LastSignaledValue = E5RT::AsyncEvent::GetLastSignaledValue((E5RT::AsyncEvent *)i[2]);
        if (LastSignaledValue < E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)i[2]))
        {
          uint64_t ActiveFutureValue = E5RT::AsyncEvent::GetActiveFutureValue((E5RT::AsyncEvent *)i[2]);
          BOOL v16 = i[2];
          v17[0] = &v16;
          std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>((uint64_t)v10, (uint64_t *)&v16, (uint64_t)&std::piecewise_construct, v17)[3] = ActiveFutureValue;
        }
      }
      unint64_t v6 = E5RT::AsyncEvent::GetLastSignaledValue(*(E5RT::AsyncEvent **)(a1 + 176));
      unint64_t v7 = *(void *)(a1 + 256);
      if (v6 < v7)
      {
        BOOL v16 = *(uint64_t **)(a1 + 176);
        v17[0] = &v16;
        std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>((uint64_t)v10, (uint64_t *)&v16, (uint64_t)&std::piecewise_construct, v17)[3] = v7;
      }
      E5RT::AsyncEvent::GetActiveFutureValue(*(E5RT::AsyncEvent **)(a1 + 176));
      operator new();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "SubmitAsync");
    std::string::basic_string[abi:ne180100]<0>(&v16, "Completion AsyncEvent (internal or client bound) is required for async submit.");
    E5RT::Status::Status(v10, 11, &v16);
    E5RT::E5RTError::E5RTError(exception, v17, v10);
  }
  long long v8 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v17, "SubmitAsync");
  std::string::basic_string[abi:ne180100]<0>(&v16, "Cannot async submit workload for an operation hasn't been encoded yet.");
  E5RT::Status::Status(&v13, 2, &v16);
  E5RT::E5RTError::E5RTError(v8, v17, &v13);
}

void sub_192369E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19236A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (*(char *)(v12 - 113) < 0) {
    operator delete(*(void **)(v12 - 136));
  }
  __cxa_free_exception(v11);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_19236A0E8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 113) < 0)
  {
    operator delete(*(void **)(v2 - 136));
    __cxa_free_exception(v1);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetStreamId(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((void *)this + 27);
}

uint64_t sub_19236A144(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40)) {
    return a1;
  }
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 != a1 + 8)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 8);
  return a1;
}

uint64_t E5RT::ExecutionStreamOperationInternal::UpdateLastCompletionValue(uint64_t this, unint64_t a2)
{
  if (*(void *)(this + 256) > a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "UpdateLastCompletionValue");
    std::string::basic_string[abi:ne180100]<0>(v3, "Cannot roll back completion event values.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  *(void *)(this + 256) = a2;
  return this;
}

void sub_19236A294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasPrewiredMemoryObjects(E5RT::ExecutionStreamOperationInternal *this)
{
  return (*((unsigned __int8 *)this + 248) >> 3) & 1;
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasInternalCompletionEventBound(E5RT::ExecutionStreamOperationInternal *this)
{
  return (*((unsigned __int8 *)this + 248) >> 4) & 1;
}

uint64_t E5RT::ExecutionStreamOperationInternal::IsCompositeOp(E5RT::ExecutionStreamOperationInternal *this)
{
  return 0;
}

void E5RT::ExecutionStreamOperationInternal::GetPrimitiveOperations(E5RT::ExecutionStreamOperationInternal *this)
{
  unsigned int v1 = (*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *))(*(void *)this + 32))(this);
  std::to_string(&v9, v1);
  std::operator+<char>();
  uint64_t v2 = std::string::append(&v6, " is not a composite op.");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v2->__r_.__value_.__r.__words[2];
  long long v7 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  strcpy((char *)&v6, "GetPrimitiveOperations");
  *((unsigned char *)&v6.__r_.__value_.__s + 23) = 22;
  E5RT::Status::Status(v5, 2, &v7);
  E5RT::E5RTError::E5RTError(exception, &v6, v5);
}

void sub_19236A430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0) {
        operator delete(a18);
      }
      if (*(char *)(v25 - 33) < 0) {
        operator delete(*(void **)(v25 - 56));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void E5RT::ExecutionStreamOperationInternal::ReshapeOperationInternal(uint64_t a1)
{
  unsigned int v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  std::to_string(&v9, v1);
  std::operator+<char>();
  uint64_t v2 = std::string::append(&v6, " does not support reshape.");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v2->__r_.__value_.__r.__words[2];
  long long v7 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_192DAA350;
  strcpy(v6.__r_.__value_.__l.__data_, "ReshapeOperationInternal");
  E5RT::Status::Status(&v5, 2, &v7);
  E5RT::E5RTError::E5RTError(exception, &v6, &v5);
}

void sub_19236A5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0) {
        operator delete(a16);
      }
      if (a27 < 0) {
        operator delete(a22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetInputPortRef(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>((void *)(a1 + 16), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetInputPortRef");
    std::string::basic_string[abi:ne180100]<0>(v5, "Unable to find input port with given name.");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return v2[5];
}

void sub_19236A708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOutputPortRef(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>((void *)(a1 + 56), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetOutputPortRef");
    std::string::basic_string[abi:ne180100]<0>(v5, "Unable to find output port with given name.");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return v2[5];
}

void sub_19236A830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetInOutPortRef(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>((void *)(a1 + 96), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetInOutPortRef");
    std::string::basic_string[abi:ne180100]<0>(v5, "Unable to find inout port with given name.");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return v2[5];
}

void sub_19236A958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t *E5RT::ExecutionStreamOperationInternal::GetDependentAsyncEventRef(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 152);
  if (!v2)
  {
LABEL_19:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "GetDependentAsyncEventRef");
    std::string::basic_string[abi:ne180100]<0>(v12, "Unable to find bound dependent async event with given name.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  while (1)
  {
    Eventuint64_t Name = (unsigned __int8 *)E5RT::AsyncEvent::GetEventName((E5RT::AsyncEvent *)v2[2]);
    uint64_t v5 = EventName[23];
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = EventName[23];
    }
    else {
      uint64_t v6 = *((void *)EventName + 1);
    }
    uint64_t v7 = a2[23];
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)a2 + 1);
    }
    if (v6 == v7) {
      break;
    }
LABEL_4:
    uint64_t v2 = (uint64_t **)*v2;
    if (!v2) {
      goto LABEL_19;
    }
  }
  if (v8 >= 0) {
    std::string v9 = a2;
  }
  else {
    std::string v9 = *(unsigned __int8 **)a2;
  }
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)EventName, v9, *((void *)EventName + 1))) {
      return v2[2];
    }
    goto LABEL_4;
  }
  if (EventName[23])
  {
    while (*EventName == *v9)
    {
      ++EventName;
      ++v9;
      if (!--v5) {
        return v2[2];
      }
    }
    goto LABEL_4;
  }
  return v2[2];
}

void sub_19236AB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEventRef(E5RT::ExecutionStreamOperationInternal *this)
{
  uint64_t result = *((void *)this + 22);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetCompletionAsyncEventRef");
    std::string::basic_string[abi:ne180100]<0>(v3, "No completion event bound to operation.");
    E5RT::Status::Status(v4, 1, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_19236AC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetConfigOptions(E5RT::ExecutionStreamOperationInternal *this)
{
  uint64_t result = *((void *)this + 34);
  if (!result)
  {
    if (qword_1E9301C18 != -1) {
      dispatch_once(&qword_1E9301C18, &unk_1EE3969F0);
    }
    return qword_1E9301C10;
  }
  return result;
}

void sub_19236ACF8(E5RT::ExecutionStreamOperationConfigOptions *a1)
{
}

uint64_t E5RT::ExecutionStreamOperationInternal::ResetConfigOptions@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if ((*(unsigned char *)(this + 248) & 7) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "ResetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v4, "Cannot reset ConfigOptions for an ES operation while it is encoded to a stream.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  uint64_t v2 = *(void *)(this + 272);
  if (v2) {
    *(void *)(this + 272) = 0;
  }
  *a2 = v2;
  return this;
}

void sub_19236ADEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::SetConfigOptions(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v7, "ConfigOptions provided is null.");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  if ((*(unsigned char *)(result + 248) & 7) == 2)
  {
    uint64_t v6 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "SetConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v7, "Cannot set new ConfigOptions to an ES operation while it is encoded to a stream.");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(v6, v9, v8);
  }
  *a2 = 0;
  uint64_t v3 = *(void *)(result + 272);
  *(void *)(result + 272) = v2;
  if (v3)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v4(v3);
  }
  return result;
}

void sub_19236AFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetStreamConfigOptions(E5RT::ExecutionStreamOperationInternal *this)
{
  uint64_t result = *((void *)this + 28);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetStreamConfigOptions");
    std::string::basic_string[abi:ne180100]<0>(v3, "No stream config options found. Please file a Radar.");
    E5RT::Status::Status(v4, 11, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_19236B158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

unsigned char *E5RT::ExecutionStreamOperationInternal::UpdateDynamicPorts(unsigned char *this)
{
  unsigned int v1 = this;
  *((_WORD *)this + 144) = 0;
  this[290] = 0;
  for (uint64_t i = (void *)*((void *)this + 4); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = (const void *)i[5];
    if (v3) {
    else
    }
      uint64_t v4 = 0;
    char HasKnownShape = E5RT::IOPort::HasKnownShape(v4);
    this = E5RT::IOPortPriv::SetDynamic((E5RT::IOPortPriv *)v4, HasKnownShape ^ 1u);
    if ((HasKnownShape & 1) == 0) {
      v1[288] = 1;
    }
  }
  for (uint64_t j = (void *)*((void *)v1 + 9); j; uint64_t j = (void *)*j)
  {
    uint64_t v7 = (const void *)j[5];
    if (v7) {
    else
    }
      int v8 = 0;
    char v9 = E5RT::IOPort::HasKnownShape(v8);
    this = E5RT::IOPortPriv::SetDynamic((E5RT::IOPortPriv *)v8, v9 ^ 1u);
    if ((v9 & 1) == 0) {
      v1[289] = 1;
    }
  }
  for (k = (void *)*((void *)v1 + 14); k; k = (void *)*k)
  {
    BOOL v11 = (const void *)k[5];
    if (v11) {
    else
    }
      uint64_t v12 = 0;
    char v13 = E5RT::IOPort::HasKnownShape(v12);
    this = E5RT::IOPortPriv::SetDynamic((E5RT::IOPortPriv *)v12, v13 ^ 1u);
    if ((v13 & 1) == 0) {
      v1[290] = 1;
    }
  }
  return this;
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasDynamicInputPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((unsigned __int8 *)this + 288);
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((unsigned __int8 *)this + 289);
}

uint64_t E5RT::ExecutionStreamOperationInternal::HasDynamicInOutPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((unsigned __int8 *)this + 290);
}

void E5RT::ExecutionStreamOperationInternal::SerializeInferenceFrameData(uint64_t a1, const void **a2, uint64_t a3, int a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 >= 0x17)
  {
    uint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v12 = v6 | 7;
    }
    uint64_t v13 = v12 + 1;
    BOOL v11 = (std::string *)operator new(v12 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v5 + 1;
    __dst[0].__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  else
  {
    memset(__dst, 0, 24);
    BOOL v11 = __dst;
    *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v5 + 1;
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    long long v14 = a2;
  }
  else {
    long long v14 = *a2;
  }
  memmove(v11, v14, v5);
LABEL_15:
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v5) = 47;
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    BOOL v16 = (const std::string::value_type *)a3;
  }
  else {
    BOOL v16 = *(const std::string::value_type **)a3;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a3 + 8);
  }
  uint64_t v18 = std::string::append(__dst, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v109.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::string v20 = std::string::append(&v109, "e5-frames.json");
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
  v111.__r_.__value_.__r.__words[0] = v20->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v105.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 7);
  v105.__pn_.__r_.__value_.__r.__words[0] = v21;
  v105.__pn_.__r_.__value_.__l.__size_ = v111.__r_.__value_.__r.__words[0];
  *((unsigned char *)&v105.__pn_.__r_.__value_.__s + 23) = v22;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v109.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_23:
  int v23 = *((char *)a2 + 23);
  if (v23 >= 0) {
    size_t v24 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v24 = (size_t)a2[1];
  }
  unint64_t v25 = v24 + 1;
  if (v24 + 1 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v25 >= 0x17)
  {
    uint64_t v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17) {
      uint64_t v27 = v25 | 7;
    }
    uint64_t v28 = v27 + 1;
    int8x8_t v26 = (std::string *)operator new(v27 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v24 + 1;
    __dst[0].__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  }
  else
  {
    memset(__dst, 0, 24);
    int8x8_t v26 = __dst;
    *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v24 + 1;
    if (!v24) {
      goto LABEL_37;
    }
  }
  if (v23 >= 0) {
    int v29 = a2;
  }
  else {
    int v29 = *a2;
  }
  memmove(v26, v29, v24);
LABEL_37:
  *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v24) = 47;
  int v30 = *(char *)(a3 + 23);
  if (v30 >= 0) {
    unint64_t v31 = (const std::string::value_type *)a3;
  }
  else {
    unint64_t v31 = *(const std::string::value_type **)a3;
  }
  if (v30 >= 0) {
    std::string::size_type v32 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v32 = *(void *)(a3 + 8);
  }
  uint64_t v33 = std::string::append(__dst, v31, v32);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v109.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  uint64_t v35 = std::string::append(&v109, "e5-data.bin");
  std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
  pn.__r_.__value_.__r.__words[0] = v35->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)pn.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
  char v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v111.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)pn.__r_.__value_.__r.__words + 7);
  v111.__r_.__value_.__r.__words[0] = v36;
  v111.__r_.__value_.__l.__size_ = pn.__r_.__value_.__r.__words[0];
  *((unsigned char *)&v111.__r_.__value_.__s + 23) = v37;
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v109.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_45:
  uint64_t v100 = objc_opt_new();
  BOOL v38 = (std::string::size_type *)MEMORY[0x1E4FBA400];
  if (a4)
  {
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(__dst, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    }
    else {
      __dst[0] = v111;
    }
    std::ofstream::basic_ofstream((uint64_t *)&v109);
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst[0].__r_.__value_.__l.__data_);
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&v109 + *(void *)(v109.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v109 + *(void *)(v109.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
    }
    if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&pn, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string pn = v105.__pn_;
    }
    std::ofstream::basic_ofstream((uint64_t *)__dst);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(pn.__r_.__value_.__l.__data_);
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)__dst + *(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__dst[1].__r_.__value_.__r.__words[1]+ *(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) | 4);
    }
    uint64_t v45 = v38;
    std::string::size_type v46 = *v38;
    __dst[0].__r_.__value_.__r.__words[0] = v46;
    std::string::size_type v47 = v45[3];
    *(std::string::size_type *)((char *)__dst[0].__r_.__value_.__r.__words + *(void *)(v46 - 24)) = v47;
    MEMORY[0x192FF1040](&__dst[0].__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x192FF15B0](&v108);
    v109.__r_.__value_.__r.__words[0] = v46;
    *(std::string::size_type *)((char *)v109.__r_.__value_.__r.__words + *(void *)(v46 - 24)) = v47;
    MEMORY[0x192FF1040](&v109.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x192FF15B0](v110);
  }
  else
  {
    std::__fs::filesystem::__status(&v105, 0);
    if (v109.__r_.__value_.__s.__data_[0] && v109.__r_.__value_.__s.__data_[0] != 255)
    {
      if ((v105.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v39 = &v105;
      }
      else {
        unint64_t v39 = (std::__fs::filesystem::path *)v105.__pn_.__r_.__value_.__r.__words[0];
      }
      uint8x8_t v40 = [NSString stringWithUTF8String:v39];
      uint64_t v41 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v40];
      if (!v41)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v109, "SerializeInferenceFrameData");
        if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v103, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          std::string v103 = v105.__pn_;
        }
        int v90 = std::string::insert(&v103, 0, "Unable to load ");
        long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        pn.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        size_t v92 = std::string::append(&pn, " to NSData");
        long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        __dst[0].__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(v104, 2, __dst);
        E5RT::E5RTError::E5RTError(exception, &v109, v104);
      }
      id v102 = 0;
      unint64_t v42 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v41 options:0 error:&v102];
      if (v102)
      {
        CFNumberRef v88 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v109, "SerializeInferenceFrameData");
        if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v103, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          std::string v103 = v105.__pn_;
        }
        size_t v94 = std::string::insert(&v103, 0, "Unable to load data in ");
        long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        pn.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
        *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v95;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        BOOL v96 = std::string::append(&pn, " as valid JSON");
        long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        __dst[0].__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(v104, 2, __dst);
        E5RT::E5RTError::E5RTError(v88, &v109, v104);
      }
      unint64_t v43 = [NSString stringWithUTF8String:"frames"];
      char v44 = [v42 valueForKey:v43];

      if (!v44)
      {
        std::string::size_type v89 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v109, "SerializeInferenceFrameData");
        if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&pn, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          std::string pn = v105.__pn_;
        }
        BOOL v98 = std::string::insert(&pn, 0, "Cannot find 'frames' key in ");
        long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        __dst[0].__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v103, 2, __dst);
        E5RT::E5RTError::E5RTError(v89, &v109, &v103);
      }
      [v100 addObjectsFromArray:v44];
    }
  }
  id v48 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  for (uint64_t i = *(uint64_t **)(a1 + 32); i; uint64_t i = (uint64_t *)*i)
  {
    BOOL v50 = sub_19236CA98((E5RT::IOPort *)i[5], (uint64_t)&v111);
    long long v51 = i + 2;
    if (*((char *)i + 39) < 0) {
      long long v51 = (void *)*v51;
    }
    unint64_t v52 = [NSString stringWithUTF8String:v51];
    [v48 setObject:v50 forKey:v52];
  }
  id v53 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  for (uint64_t j = *(uint64_t **)(a1 + 72); j; uint64_t j = (uint64_t *)*j)
  {
    uint64_t v55 = sub_19236CA98((E5RT::IOPort *)j[5], (uint64_t)&v111);
    uint64_t v56 = j + 2;
    if (*((char *)j + 39) < 0) {
      uint64_t v56 = (void *)*v56;
    }
    CFStringRef v57 = [NSString stringWithUTF8String:v56];
    [v53 setObject:v55 forKey:v57];
  }
  id v58 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  for (k = *(uint64_t **)(a1 + 112); k; k = (uint64_t *)*k)
  {
    unint64_t v60 = sub_19236CA98((E5RT::IOPort *)k[5], (uint64_t)&v111);
    unint64_t v61 = k + 2;
    if (*((char *)k + 39) < 0) {
      unint64_t v61 = (void *)*v61;
    }
    uint64_t v62 = [NSString stringWithUTF8String:v61];
    [v58 setObject:v60 forKey:v62];
  }
  id v63 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v63 setObject:v48 forKey:@"inputPorts"];
  [v63 setObject:v53 forKey:@"outputPorts"];
  [v63 setObject:v58 forKey:@"inOutPorts"];
  [v100 addObject:v63];
  id v64 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  unint64_t v65 = (void *)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    unint64_t v65 = (void *)*v65;
  }
  long long v66 = [NSString stringWithUTF8String:v65];
  [v64 setObject:v66 forKeyedSubscript:@"name"];

  [v64 setObject:v100 forKeyedSubscript:@"frames"];
  if (v67)
  {
    uint64_t FunctionName = E5RT::Ops::PreCompiledComputeOperation::GetFunctionName(v67);
    std::string::size_type v70 = v69;
    if (v69 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v71 = FunctionName;
    if (v69 >= 0x17)
    {
      uint64_t v73 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v69 | 7) != 0x17) {
        uint64_t v73 = v69 | 7;
      }
      uint64_t v74 = v73 + 1;
      BOOL v72 = operator new(v73 + 1);
      v109.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      v109.__r_.__value_.__l.__size_ = v70;
    }
    else
    {
      *((unsigned char *)&v109.__r_.__value_.__s + 23) = v69;
      BOOL v72 = &v109;
      if (!v69)
      {
LABEL_97:
        v72[v70] = 0;
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v75 = &v109;
        }
        else {
          long long v75 = (std::string *)v109.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v76 = [NSString stringWithUTF8String:v75];
        [v64 setObject:v76 forKeyedSubscript:@"functionName"];

        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v109.__r_.__value_.__l.__data_);
        }
        goto LABEL_102;
      }
    }
    memmove(v72, v71, v70);
    goto LABEL_97;
  }
LABEL_102:
  id v101 = 0;
  std::string::size_type v77 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v64 options:3 error:&v101];
  id v78 = v101;
  if (v78)
  {
    uint64_t v80 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v109, "SerializeInferenceFrameData");
    id v81 = [v78 localizedDescription];
    std::string::basic_string[abi:ne180100]<0>(&pn, (char *)objc_msgSend(v81, "UTF8String", v81));
    uint64_t v82 = std::string::insert(&pn, 0, "Error serializing IOPorts to JSON: ");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    __dst[0].__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(&v103, 2, __dst);
    E5RT::E5RTError::E5RTError(v80, &v109, &v103);
  }
  std::ofstream::basic_ofstream((uint64_t *)&v109);
  if (*(_DWORD *)((char *)&v109 + *(void *)(v109.__r_.__value_.__r.__words[0] - 24) + 32))
  {
    uint64_t v84 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "SerializeInferenceFrameData");
    if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v103, v105.__pn_.__r_.__value_.__l.__data_, v105.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string v103 = v105.__pn_;
    }
    long long v85 = std::string::insert(&v103, 0, "Error opening file to serialize inference frames: ");
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    pn.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v104, 2, &pn);
    E5RT::E5RTError::E5RTError(v84, __dst, v104);
  }
  id v79 = v77;
  [v79 bytes];
  [v79 length];
  std::ostream::write();
  v109.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
  *(std::string::size_type *)((char *)v109.__r_.__value_.__r.__words
                            + *(void *)(v109.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                               + 24);
  MEMORY[0x192FF1040](&v109.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](v110);

  if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_108:
    operator delete(v105.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v111.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_108;
  }
}

void sub_19236C2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v28 - 105) < 0) {
    operator delete(*(void **)(v28 - 128));
  }
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19236CA54(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](v1);
  _Unwind_Resume(a1);
}

id sub_19236CA98(E5RT::IOPort *a1, uint64_t a2)
{
  v47[19] = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  E5RT::IOPort::GetPortDescriptor(a1, &v45);
  E5RT::GetOperandDescriptorInformation(v45, (uint64_t)&v35);
  size_t v5 = (std::__shared_weak_count *)v46[0];
  if (v46[0] && !atomic_fetch_add((atomic_ullong *volatile)(v46[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v36) {
    unint64_t v6 = @"Tensor";
  }
  else {
    unint64_t v6 = @"Surface";
  }
  [v4 setObject:v6 forKey:@"PortType"];
  [v4 setObject:v35 forKey:@"Description"];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__dst, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a2;
    *(void *)&__dst[16] = *(void *)(a2 + 16);
  }
  std::ofstream::basic_ofstream((uint64_t *)&v45);
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if (*(_DWORD *)((char *)&v46[3] + *((void *)v45 - 3)))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "SerializeIOPort");
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v31 = *(std::string *)a2;
    }
    int v29 = std::string::insert(&v31, 0, "Error opening file to serialize IOPort data: ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    std::string::size_type v33 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v34, 2, __p);
    E5RT::E5RTError::E5RTError(exception, __dst, v34);
  }
  id v7 = objc_alloc(NSNumber);
  int v8 = (char *)&v46[-1] + *((void *)v45 - 3);
  if ((v8[32] & 5) != 0)
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    memset(__dst, 0, sizeof(__dst));
    uint64_t v44 = -1;
  }
  else
  {
    (*(void (**)(unsigned char *__return_ptr))(**((void **)v8 + 5) + 32))(__dst);
  }
  char v9 = objc_msgSend(v7, "initWithUnsignedLongLong:");
  long long v10 = NSString;
  std::__fs::filesystem::path::__string_view v11 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a2);
  if (v11.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v13 = (v11.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v13 = v11.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v14 = v13 + 1;
    uint64_t v12 = operator new(v13 + 1);
    *(void *)&__dst[8] = v11.__size_;
    *(void *)&__dst[16] = v14 | 0x8000000000000000;
    *(void *)std::string __dst = v12;
    goto LABEL_23;
  }
  __dst[23] = v11.__size_;
  uint64_t v12 = __dst;
  if (v11.__size_) {
LABEL_23:
  }
    memmove(v12, v11.__data_, v11.__size_);
  v12[v11.__size_] = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)__dst;
  std::string::size_type v33 = *(void *)&__dst[16];
  if (__dst[23] >= 0) {
    int v15 = __p;
  }
  else {
    int v15 = *(void ***)__dst;
  }
  BOOL v16 = [v10 stringWithUTF8String:v15];
  [v4 setObject:v16 forKey:@"File"];

  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  [v4 setObject:v9 forKey:@"Offset"];
  E5RT::IOPort::GetMemoryObject(a1, __dst);
  std::string::size_type v17 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*(void **)__dst);
  uint64_t v18 = v17;
  long long v19 = *(std::__shared_weak_count **)&__dst[8];
  if (*(void *)&__dst[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v18) {
      goto LABEL_32;
    }
  }
  else if (v17)
  {
LABEL_32:
    E5RT::BufferObject::GetDataSpan(v18);
    std::ostream::write();
    goto LABEL_38;
  }
  E5RT::IOPort::GetMemoryObject(a1, __dst);
  std::string v20 = E5RT::MemoryObject::TryAsSurface(*(void **)__dst);
  uint64_t v21 = (uint64_t)v20;
  char v22 = *(std::__shared_weak_count **)&__dst[8];
  if (!*(void *)&__dst[8]
    || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__dst[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!v20) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (v21)
  {
LABEL_37:
    int v23 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v21);
    IOSurfaceGetBaseAddress(v23);
    IOSurfaceGetAllocSize(v23);
    std::ostream::write();
  }
LABEL_38:
  id v24 = v4;

  uint64_t v45 = (E5RT *)*MEMORY[0x1E4FBA400];
  uint64_t v25 = *(void *)(MEMORY[0x1E4FBA400] + 24);
  uint64_t v26 = *((void *)v45 - 3);

  *(void *)((char *)&v46[-1] + v26) = v25;
  MEMORY[0x192FF1040](v46);
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](v47);

  return v24;
}

void sub_19236D088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  std::ofstream::~ofstream(&a46);
  _Unwind_Resume(a1);
}

void E5RT::ExecutionStreamOperationInternal::SerializeInferenceFrameDataPerSegment(uint64_t a1)
{
  unsigned int v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  std::to_string(&v9, v1);
  std::operator+<char>();
  uint64_t v2 = std::string::append(&v6, " is not a composite op.");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v2->__r_.__value_.__r.__words[2];
  long long v7 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_192DAB6C0;
  strcpy(v6.__r_.__value_.__l.__data_, "SerializeInferenceFrameDataPerSegment");
  E5RT::Status::Status(&v5, 2, &v7);
  E5RT::E5RTError::E5RTError(exception, &v6, &v5);
}

void sub_19236D318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0) {
        operator delete(a16);
      }
      if (a27 < 0) {
        operator delete(a22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetTelemetryContainer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 240);
  *(void *)(this + 240) = 0;
  *a2 = v2;
  return this;
}

uint64_t E5RT::ExecutionStreamOperationInternal::SetTelemetryContainer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

BOOL sub_19236D3F4(uint64_t *a1)
{
  if (a1)
  {
    unsigned int v1 = a1;
    do
    {
      if (*((char *)v1 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, (const std::string::value_type *)v1[2], v1[3]);
        uint64_t v2 = (E5RT::IOPortPriv *)v1[5];
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        int v15 = v2;
        BOOL v16 = v3;
        if (!v3)
        {
LABEL_8:
          uint64_t v12 = v2;
          std::basic_string_view<_CharT, _Traits>::size_type v13 = 0;
          goto LABEL_9;
        }
      }
      else
      {
        std::string v14 = *(std::string *)(v1 + 2);
        uint64_t v2 = (E5RT::IOPortPriv *)v1[5];
        uint64_t v3 = (std::__shared_weak_count *)v1[6];
        int v15 = v2;
        BOOL v16 = v3;
        if (!v3) {
          goto LABEL_8;
        }
      }
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v2 = v15;
      uint64_t v12 = v15;
      std::basic_string_view<_CharT, _Traits>::size_type v13 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_9:
      E5RT::IOPortPriv::GetMaxPortDescriptor(v2, &v10);
      uint64_t v5 = v10;
      id v4 = v11;
      BOOL v6 = v10 != 0;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
        long long v7 = v13;
        if (!v13) {
          goto LABEL_15;
        }
      }
      else
      {
        long long v7 = v13;
        if (!v13) {
          goto LABEL_15;
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
LABEL_15:
      std::string::size_type v8 = v16;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_19;
        }
LABEL_18:
        operator delete(v14.__r_.__value_.__l.__data_);
        goto LABEL_19;
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_18;
      }
LABEL_19:
      if (v5) {
        return v6;
      }
      unsigned int v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  return 0;
}

void sub_19236D5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,32ul>,true,BOOL,std::__identity,0>(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v5 = (int8x16_t *)a1;
  unint64_t v6 = a4 - (unint64_t)a2;
  unint64_t v7 = v6 + 8 * (a3 - (void)a1);
  if (*a5)
  {
    if (a2)
    {
      if (64 - a2 >= v7) {
        unint64_t v8 = v6 + 8 * (a3 - (void)a1);
      }
      else {
        unint64_t v8 = 64 - a2;
      }
      uint64_t v5 = (int8x16_t *)(a1 + 1);
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *a1));
      v9.i16[0] = vaddlv_u8(v9);
      uint64_t result = v9.u32[0];
      v7 -= v8;
      unint64_t v11 = v7 - 64;
      if (v7 >= 0x40) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t result = 0;
      unint64_t v11 = v7 - 64;
      if (v7 >= 0x40)
      {
LABEL_7:
        if (v11 >= 0xC0)
        {
          uint64_t v17 = (v11 >> 6) + 1;
          uint64_t v12 = (int8x8_t *)v5 + (v17 & 0x7FFFFFFFFFFFFFCLL);
          v7 -= (v17 & 0x7FFFFFFFFFFFFFCLL) << 6;
          int64x2_t v18 = 0uLL;
          int64x2_t v19 = (int64x2_t)(unint64_t)result;
          std::string v20 = v5 + 1;
          uint64_t v21 = v17 & 0x7FFFFFFFFFFFFFCLL;
          do
          {
            int64x2_t v19 = (int64x2_t)vpadalq_u32((uint64x2_t)v19, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v20[-1]))));
            int64x2_t v18 = (int64x2_t)vpadalq_u32((uint64x2_t)v18, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v20))));
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          uint64_t result = vaddvq_s64(vaddq_s64(v18, v19));
          if (v17 == (v17 & 0x7FFFFFFFFFFFFFCLL)) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v12 = (int8x8_t *)v5;
        }
        do
        {
          int8x8_t v22 = *v12++;
          uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
          v23.i16[0] = vaddlv_u8(v23);
          result += v23.u32[0];
          v7 -= 64;
        }
        while (v7 > 0x3F);
LABEL_22:
        if (!v7) {
          return result;
        }
        unint64_t v24 = *(void *)v12 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
        goto LABEL_32;
      }
    }
    uint64_t v12 = (int8x8_t *)v5;
    goto LABEL_22;
  }
  if (a2)
  {
    if (64 - a2 >= v7) {
      unint64_t v13 = v6 + 8 * (a3 - (void)a1);
    }
    else {
      unint64_t v13 = 64 - a2;
    }
    uint64_t v5 = (int8x16_t *)(a1 + 1);
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v13)) & (-1 << a2) & ~*a1));
    v14.i16[0] = vaddlv_u8(v14);
    uint64_t result = v14.u32[0];
    v7 -= v13;
    unint64_t v15 = v7 - 64;
    if (v7 >= 0x40) {
      goto LABEL_14;
    }
LABEL_25:
    BOOL v16 = (uint64_t *)v5;
    goto LABEL_30;
  }
  uint64_t result = 0;
  unint64_t v15 = v7 - 64;
  if (v7 < 0x40) {
    goto LABEL_25;
  }
LABEL_14:
  if (v15 >= 0xC0)
  {
    uint64_t v25 = (v15 >> 6) + 1;
    BOOL v16 = &v5->i64[v25 & 0x7FFFFFFFFFFFFFCLL];
    v7 -= (v25 & 0x7FFFFFFFFFFFFFCLL) << 6;
    int64x2_t v26 = 0uLL;
    int64x2_t v27 = (int64x2_t)(unint64_t)result;
    int v28 = v5 + 1;
    uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v27 = (int64x2_t)vpadalq_u32((uint64x2_t)v27, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(v28[-1])))));
      int64x2_t v26 = (int64x2_t)vpadalq_u32((uint64x2_t)v26, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(*v28)))));
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t result = vaddvq_s64(vaddq_s64(v26, v27));
    if (v25 == (v25 & 0x7FFFFFFFFFFFFFCLL)) {
      goto LABEL_30;
    }
  }
  else
  {
    BOOL v16 = (uint64_t *)v5;
  }
  do
  {
    uint64_t v30 = *v16++;
    uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)~v30);
    v31.i16[0] = vaddlv_u8(v31);
    result += v31.u32[0];
    v7 -= 64;
  }
  while (v7 > 0x3F);
LABEL_30:
  if (!v7) {
    return result;
  }
  unint64_t v24 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v7) & ~*v16;
LABEL_32:
  uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v32.i16[0] = vaddlv_u8(v32);
  result += v32.u32[0];
  return result;
}

void std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    while (v4)
    {
      uint64_t v5 = v4;
      uint64_t v4 = (void *)*v4;
      unint64_t v6 = (std::__shared_weak_count *)v5[3];
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      operator delete(v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v9 = *a2;
  *a2 = 0;
  uint64_t v10 = *(void **)a1;
  *(void *)a1 = v9;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v13 = a2[2];
  uint64_t v12 = a2 + 2;
  uint64_t v11 = v13;
  uint64_t v14 = *(v12 - 1);
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 8) = v14;
  *(v12 - 1) = 0;
  uint64_t v15 = v12[1];
  *(void *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v12 + 4);
  if (v15)
  {
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(a1 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17) {
        v16 %= v17;
      }
    }
    else
    {
      v16 &= v17 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
    void *v12 = 0;
    v12[1] = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,unsigned long long>>>::__emplace_unique_key_args<E5RT::AsyncEvent const*,std::piecewise_construct_t const&,std::tuple<E5RT::AsyncEvent const*&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  int64x2_t v18 = operator new(0x20uLL);
  void *v18 = 0;
  v18[1] = v10;
  void v18[2] = **a4;
  void v18[3] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    int8x8_t v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      void *v18 = *v22;
LABEL_61:
      void *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        int8x8_t v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v21 = *(void *)a1;
        int8x8_t v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      int8x8_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_26;
      }
    }
  }
  void *v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    int8x8_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_19236DCE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19236DCF8()
{
}

__n128 sub_19236DD0C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19236DD58(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19236DD88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))();
}

uint64_t sub_19236DDB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_"
                     "10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionI"
                                "FvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19236DE20()
{
  return &unk_1EE396A80;
}

uint64_t sub_19236DE2C(uint64_t a1)
{
  *(void *)a1 = &unk_1EE396AA0;
  if (!*(unsigned char *)(a1 + 48)) {
    return a1;
  }
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != a1 + 16)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
  return a1;
}

void sub_19236DEE4(uint64_t a1)
{
  *(void *)a1 = &unk_1EE396AA0;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = a1 + 16;
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3 == a1 + 16)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(a1 + 16);
    }
    else if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
  }

  JUMPOUT(0x192FF16B0);
}

void *sub_19236DFB0(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_1EE396AA0;
  v2[1] = v3;
  *((unsigned char *)v2 + 16) = 0;
  unint64_t v4 = (char *)(v2 + 2);
  *((unsigned char *)v2 + 48) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      if (v5 == a1 + 16)
      {
        v2[5] = v4;
        (*(void (**)(uint64_t))(*(void *)(a1 + 16) + 24))(a1 + 16);
        goto LABEL_7;
      }
      uint64_t v5 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v5 + 16))(v5, v4);
    }
    v2[5] = v5;
LABEL_7:
    *((unsigned char *)v2 + 48) = 1;
  }
  return v2;
}

void sub_19236E088(_Unwind_Exception *a1)
{
  if (v1[48]) {
    sub_19236E884((uint64_t)v1, (uint64_t)(v1 + 16));
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19236E0B0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  *(void *)a2 = &unk_1EE396AA0;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v4 = a2 + 16;
  *(unsigned char *)(a2 + 48) = 0;
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v5 = *(void *)(result + 40);
    if (v5)
    {
      if (v5 == result + 16)
      {
        *(void *)(a2 + 40) = v4;
        __n128 result = (*(uint64_t (**)(void))(**(void **)(result + 40) + 24))(*(void *)(result + 40));
        goto LABEL_8;
      }
      __n128 result = (*(uint64_t (**)(void, uint64_t))(*(void *)v5 + 16))(*(void *)(result + 40), v4);
    }
    else
    {
      __n128 result = 0;
    }
    *(void *)(a2 + 40) = result;
LABEL_8:
    *(unsigned char *)(a2 + 48) = 1;
  }
  return result;
}

void sub_19236E180(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48)) {
    sub_19236E884(v1, v1 + 16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19236E1A0(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v1 = result + 16;
    __n128 result = *(void *)(result + 40);
    if (result == v1)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
    }
    else if (result)
    {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
  }
  return result;
}

void sub_19236E20C(char *__p)
{
  if (!__p[48])
  {
LABEL_5:
    uint64_t v4 = __p;
    goto LABEL_7;
  }
  uint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 != __p + 16)
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    goto LABEL_5;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(__p + 16);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

uint64_t sub_19236E2C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (!*(unsigned char *)(a1 + 48)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, &v7, &v6);
  uint64_t result = v6;
  uint64_t v6 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19236E37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_19236E8D8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19236E398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    sub_19230A2C8(a11);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19236E390);
}

uint64_t sub_19236E3B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_"
                     "10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionI"
                                "FvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT32ExecutionStreamOperationInternal11SubmitAsyncEyyNSt3__18optionalINS1_8functionIFvPKS0_NS1_10unique_ptrINS_9E5RTErrorENS1_14default_deleteIS7_EEEEEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19236E424()
{
  return &unk_1EE396B00;
}

void *std::__function::__value_func<void ()(std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_19236E6BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t sub_19236E6C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  return a3(a2);
}

uint64_t sub_19236E6D8(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = a1[3];
  if ((void *)result == a1)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  }
  else if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

uint64_t sub_19236E774(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

uint64_t sub_19236E7AC(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t sub_19236E7EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result == a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  }
  else if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  *(void *)a5 = a3;
  *(_DWORD *)(a5 + 8) = a4;
  return result;
}

uint64_t sub_19236E884(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result == a2) {
    return sub_19236E6C8(result, a2, *(uint64_t (**)(uint64_t))(*(void *)a2 + 32));
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_19236E8D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void *E5RT::IOPort::IOPort(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE326AC8;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE326AC8;
  result[1] = v2;
  return result;
}

void E5RT::IOPort::~IOPort(E5RT::IOPort *this)
{
  uint64_t v2 = (E5RT::IOPortImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE326AC8;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  E5RT::IOPortImpl *v2;

  uint64_t v2 = (E5RT::IOPortImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE326AC8;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  E5RT::IOPortImpl *v2;
  uint64_t vars8;

  uint64_t v2 = (E5RT::IOPortImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE326AC8;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  JUMPOUT(0x192FF16B0);
}

void E5RT::IOPortPriv::~IOPortPriv(E5RT::IOPortPriv *this)
{
  uint64_t v2 = (E5RT::IOPortImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE326AC8;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  E5RT::IOPortImpl *v2;
  uint64_t vars8;

  uint64_t v2 = (E5RT::IOPortImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE326AC8;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::IOPortImpl::~IOPortImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::IOPortPriv::LockPort(E5RT::IOPortPriv *this, char a2)
{
  return E5RT::IOPortImpl::LockPort(*((void *)this + 1), a2);
}

void E5RT::IOPortPriv::SetPortDescriptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  E5RT::IOPortImpl::SetPortDescriptor(v2, &v5);
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19236EB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *E5RT::IOPortPriv::SetDynamic(E5RT::IOPortPriv *this, char a2)
{
  return E5RT::IOPortImpl::SetDynamic(*((unsigned char **)this + 1), a2);
}

uint64_t E5RT::IOPortPriv::GetMaxPortDescriptor@<X0>(E5RT::IOPortPriv *this@<X0>, void *a2@<X8>)
{
  return E5RT::IOPortImpl::GetMaxPortDescriptor(*((void *)this + 1), a2);
}

uint64_t E5RT::IOPortPriv::IsBoundMemoryObjectInternal(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::IsBoundMemoryObjectInternal(this[1]);
}

void E5RT::IOPortPriv::BindMemoryObject(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v5 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  E5RT::IOPortImpl::BindMemoryObject(v3, &v5, a3);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19236EBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL E5RT::IOPortPriv::IsDynamicBounded(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::IsDynamicBounded(this[1]);
}

void *E5RT::IOPort::IOPort(void *this)
{
  *this = &unk_1EE326AC8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1EE326AC8;
  this[1] = 0;
  return this;
}

void *E5RT::IOPort::GetMemoryObject@<X0>(E5RT::IOPort *this@<X0>, void *a2@<X8>)
{
  return E5RT::IOPortImpl::GetMemoryObject(*((void **)this + 1), a2);
}

{
  return E5RT::IOPortImpl::GetMemoryObject(*((void **)this + 1), a2);
}

uint64_t E5RT::IOPort::GetMemoryObjectRef(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::GetMemoryObjectRef(this[1]);
}

{
  return E5RT::IOPortImpl::GetMemoryObjectRef(this[1]);
}

uint64_t E5RT::IOPort::HasKnownShape(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::HasKnownShape(this[1]);
}

void **E5RT::IOPort::GetSupportedBufferTypes(void ***this)
{
  return E5RT::IOPortImpl::GetSupportedBufferTypes(this[1]);
}

void E5RT_Private::SetMaxPortDescriptor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  uint64_t v15 = *a1;
  uint64_t v16 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "SetMaxPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v11, "Invalid dynamic type.");
    E5RT::Status::Status(v12, 2, v11);
    E5RT::E5RTError::E5RTError(exception, &v13, v12);
  }
  uint64_t v4 = *a2;
  long long v5 = (std::__shared_weak_count *)a2[1];
  unint64_t v10 = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *(uint64_t **)(v2 + 8);
    uint64_t v13 = v4;
    uint64_t v14 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v6 = *(uint64_t **)(v2 + 8);
    uint64_t v13 = *a2;
    uint64_t v14 = 0;
  }
  E5RT::IOPortImpl::SetMaxPortDescriptor(v6, (uint64_t)&v13);
  uint64_t v7 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unint64_t v8 = v16;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19236EF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void sub_19236EF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void E5RT_Private::GetMaxPortDescriptor(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  void v7[3] = *a1;
  v7[4] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetMaxPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v5, "Invalid dynamic type.");
    E5RT::Status::Status(v6, 2, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  E5RT::IOPortImpl::GetMaxPortDescriptor(*(void *)(v2 + 8), a2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19236F110(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_19236F124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::ExecuteOptions::ExecuteOptions(E5RT::ExecuteOptions *this)
{
}

void sub_19236F340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v7 = v6;
  MEMORY[0x192FF16B0](v7, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v5);
  _Unwind_Resume(a1);
}

void sub_19236F378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  E5RT::ConfigOptions::~ConfigOptions(v16);
  _Unwind_Resume(a1);
}

void E5RT::ExecuteOptions::~ExecuteOptions(E5RT::ExecuteOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::ExecuteOptions::operator=(uint64_t a1, uint64_t a2)
{
  E5RT::ConfigOptions::operator=(a1, a2);
  return a1;
}

uint64_t E5RT::ExecuteOptions::GetEnableResourceTelemetry(E5RT::ExecuteOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "setResourceTelemetry<BOOL>", 26);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::ExecuteOptions::SetEnableResourceTelemetry(E5RT::ExecuteOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "setResourceTelemetry<BOOL>", 26, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_19236F600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::ExecuteOptions::GetExecutionIdentifier(E5RT::ExecuteOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "executiontIdentifier<std::string>", 33);
  }
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

uint64_t E5RT::ExecuteOptions::SetExecutionIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    uint64_t v6 = 0;
    v7.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string v7 = *(std::string *)a2;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
    v7.__r_.__value_.__r.__words[0] = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_6:
  uint64_t v6 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *(**)(unsigned int, uint64_t, uint64_t, uint64_t, void *)))(*(void *)v4 + 24))(v4, "executiontIdentifier<std::string>", 33, &v6);
  if (v6) {
    return (uint64_t)v6(0, (uint64_t)&v6, 0, 0, 0);
  }
  return result;
}

void sub_19236F858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void E5RT::ExecuteOptions::Create(E5RT::ExecuteOptions *this)
{
}

void sub_19236F91C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19236F950(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecuteOptions::SharedDefaultOption(E5RT::ExecuteOptions *this)
{
  if (qword_1E9301C28 != -1) {
    dispatch_once(&qword_1E9301C28, &unk_1EE396B28);
  }
  return qword_1E9301C20;
}

void sub_19236F9C4()
{
}

void sub_19236FA08(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_19236FA30(E5RT::ConfigOptionsImpl *a1)
{
  E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_pointer<E5RT::ExecuteOptions *,std::shared_ptr<E5RT::ExecuteOptions>::__shared_ptr_default_delete<E5RT::ExecuteOptions,E5RT::ExecuteOptions>,std::allocator<E5RT::ExecuteOptions>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecuteOptions *,std::shared_ptr<E5RT::ExecuteOptions>::__shared_ptr_default_delete<E5RT::ExecuteOptions,E5RT::ExecuteOptions>,std::allocator<E5RT::ExecuteOptions>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecuteOptions *,std::shared_ptr<E5RT::ExecuteOptions>::__shared_ptr_default_delete<E5RT::ExecuteOptions,E5RT::ExecuteOptions>,std::allocator<E5RT::ExecuteOptions>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DB3A5BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DB3A5BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DB3A5BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DB3A5BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void E5RT::Ops::Impl::AneInferenceOperationImpl::~AneInferenceOperationImpl(E5RT::Ops::Impl::AneInferenceOperationImpl *this)
{
  *(void *)this = &unk_1EE326960;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void **)*((void *)this + 14);
    if (!v3) {
      goto LABEL_6;
    }
    while (1)
    {
LABEL_17:
      uint64_t v9 = (void **)*v3;
      if (*((char *)v3 + 63) < 0)
      {
        operator delete(v3[5]);
        if (*((char *)v3 + 39) < 0) {
LABEL_21:
        }
          operator delete(v3[2]);
      }
      else if (*((char *)v3 + 39) < 0)
      {
        goto LABEL_21;
      }
      operator delete(v3);
      uint64_t v3 = v9;
      if (!v9) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v3 = (void **)*((void *)this + 14);
  if (v3) {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v4 = (void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v4) {
    operator delete(v4);
  }
  long long v5 = (void **)*((void *)this + 9);
  if (v5)
  {
    do
    {
      uint64_t v10 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0) {
LABEL_27:
        }
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_27;
      }
      operator delete(v5);
      long long v5 = v10;
    }
    while (v10);
  }
  uint64_t v6 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    operator delete(v6);
  }
  std::string v7 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v8) {
      return;
    }
  }
  else
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v8) {
      return;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void E5RT::Ops::Impl::AneInferenceOperationImpl::ReshapeOperationInternal()
{
  exception = __cxa_allocate_exception(0x18uLL);
  uint64_t v4 = (char *)operator new(0x20uLL);
  long long v5 = xmmword_192DAA350;
  strcpy(v4, "ReshapeOperationInternal");
  uint64_t v1 = (char *)operator new(0x30uLL);
  long long v2 = xmmword_192DA88D0;
  strcpy(v1, "Reshape is not implemented for ANE driver.");
  E5RT::Status::Status(v3, 2, &v1);
  E5RT::E5RTError::E5RTError(exception, &v4, v3);
}

void sub_19236FE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v23)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_19236FEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19236FE94);
}

void sub_19236FEC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptionsImpl::GetOverrideComputeGPUDevice(E5RT::PrecompiledComputeOpCreateOptionsImpl *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetOverrideComputeGPUDevice");
    std::string::basic_string[abi:ne180100]<0>(v3, "Override ComputeGPUDevice not yet specified.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_19236FF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::PrecompiledComputeOpCreateOptions::PrecompiledComputeOpCreateOptions(void *this)
{
  *this = &unk_1EE325E68;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1EE325E68;
  this[1] = 0;
  return this;
}

void *E5RT::PrecompiledComputeOpCreateOptions::PrecompiledComputeOpCreateOptions(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE325E68;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE325E68;
  result[1] = v2;
  return result;
}

void E5RT::PrecompiledComputeOpCreateOptions::~PrecompiledComputeOpCreateOptions(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  uint64_t v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325E68;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  E5RT::PrecompiledComputeOpCreateOptionsImpl *v2;

  uint64_t v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325E68;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  E5RT::PrecompiledComputeOpCreateOptionsImpl *v2;
  uint64_t vars8;

  uint64_t v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325E68;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  JUMPOUT(0x192FF16B0);
}

E5RT::PrecompiledComputeOpCreateOptionsImpl **std::unique_ptr<E5RT::PrecompiledComputeOpCreateOptionsImpl>::~unique_ptr[abi:ne180100](E5RT::PrecompiledComputeOpCreateOptionsImpl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetLibraryPath(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *((void *)this + 1) + 40;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetOverrideComputeGPUDevice(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 8) + 72) = a2;
  return result;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetOverrideComputeGPUDevice(E5RT::PrecompiledComputeOpCreateOptionsImpl **this)
{
  return E5RT::PrecompiledComputeOpCreateOptionsImpl::GetOverrideComputeGPUDevice(this[1]);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetIOSurfaceMemoryPoolId(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 8) + 80) = a2;
  return this;
}

void E5RT::PrecompiledComputeOpCreateOptions::SetDynamicCallables(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 + 88 != a2)
  {
    *(_DWORD *)(v2 + 120) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((void *)(v2 + 88), *(uint64_t **)(a2 + 16), 0);
  }
}

void E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 + 128 != a2)
  {
    *(_DWORD *)(v2 + 160) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((void *)(v2 + 128), *(uint64_t **)(a2 + 16), 0);
  }
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 208) = a2;
  return this;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableGPUQuantOps(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 209) = a2;
  return this;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableMPSGraphParallelEncode(uint64_t this, int a2)
{
  uint64_t v2 = 4;
  if (!a2) {
    uint64_t v2 = 1;
  }
  *(void *)(*(void *)(this + 8) + 216) = v2;
  return this;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalMPSGraphMaximumNumberOfEncodingThreads(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 8) + 216) = a2;
  return this;
}

BOOL E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalEnableMPSGraphParallelEncode(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(void *)(*((void *)this + 1) + 216) > 1uLL;
}

void E5RT::PrecompiledComputeOpCreateOptionsPriv::SetMachoToSharedResourceURI(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 + 168 != a2)
  {
    *(_DWORD *)(v2 + 200) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((void *)(v2 + 168), *(uint64_t **)(a2 + 16), 0);
  }
}

void E5RT::IOPortImpl::~IOPortImpl(E5RT::IOPortImpl *this)
{
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)*((void *)this + 9);
  if (v3)
  {
    do
    {
      std::string v7 = (void **)*v3;
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v7;
    }
    while (v7);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    operator delete(v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_15:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t E5RT::IOPortImpl::SetPortDescriptor(uint64_t *a1, uint64_t *a2)
{
  if (*((unsigned char *)a1 + 48))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "SetPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v15, "Port descriptor cannot be changed while port is locked.");
    E5RT::Status::Status(v16, 2, v15);
    E5RT::E5RTError::E5RTError(exception, v17, v16);
  }
  uint64_t v5 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v5)
  {
    uint64_t v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "SetPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v15, "Port descriptor cannot be changed while memory object is bound to port.");
    E5RT::Status::Status(v16, 2, v15);
    E5RT::E5RTError::E5RTError(v14, v17, v16);
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[3];
  a1[2] = v7;
  a1[3] = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v9 = (void *)a1[2];
    uint64_t v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v9);
    if (v10) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v9 = (void *)a1[2];
    uint64_t v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v9);
    if (v10)
    {
LABEL_11:
      uint64_t result = E5RT::TensorDescriptor::HasKnownShape(v10);
      *((unsigned char *)a1 + 97) = result;
      return result;
    }
  }
  uint8x8_t v12 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor((E5RT::OperandDescriptor *)v9);
  if (E5RT::SurfaceDescriptor::GetSurfaceWidth(v12) == -1)
  {
    uint64_t result = 0;
    *((unsigned char *)a1 + 97) = 0;
  }
  else
  {
    uint64_t result = E5RT::SurfaceDescriptor::GetSurfaceHeight(v12) != -1;
    *((unsigned char *)a1 + 97) = result;
  }
  return result;
}

void sub_192370744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::IOPortImpl::GetMemoryObject@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[1];
  *a2 = *this;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t E5RT::IOPortImpl::HasKnownShape(E5RT::IOPortImpl *this)
{
  return *((unsigned __int8 *)this + 97);
}

uint64_t E5RT::IOPortImpl::GetMaxPortDescriptor@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 40);
  *a2 = *(void *)(this + 32);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t E5RT::IOPortImpl::GetMemoryObjectRef(E5RT::IOPortImpl *this)
{
  uint64_t result = *(void *)this;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetMemoryObjectRef");
    std::string::basic_string[abi:ne180100]<0>(v3, "No memory object bound to port.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

{
  uint64_t result;
  void *exception;
  void v3[3];
  unsigned char v4[8];
  void v5[3];

  uint64_t result = *(void *)this;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetMemoryObjectRef");
    std::string::basic_string[abi:ne180100]<0>(v3, "No memory object bound to port.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_1923708E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_192370A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::IOPortImpl::LockPort(uint64_t this, char a2)
{
  *(unsigned char *)(this + 48) = a2;
  return this;
}

void E5RT::IOPortImpl::SetMaxPortDescriptor(uint64_t *a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 48))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v25, "SetMaxPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v23, "Max port descriptor cannot be changed while port is locked.");
    E5RT::Status::Status(v24, 2, v23);
    E5RT::E5RTError::E5RTError(exception, v25, v24);
  }
  uint64_t v5 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v5)
  {
    unint64_t v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v25, "SetMaxPortDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v23, "Max port descriptor cannot be changed while memory object is bound to port.");
    E5RT::Status::Status(v24, 2, v23);
    E5RT::E5RTError::E5RTError(v17, v25, v24);
  }
  if (*(void *)a2)
  {
    if (!*((unsigned char *)a1 + 96))
    {
      int64x2_t v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v25, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v23, "A max port descriptor can only be set on a dynamic port.");
      E5RT::Status::Status(v24, 2, v23);
      E5RT::E5RTError::E5RTError(v18, v25, v24);
    }
    if (!E5RT::OperandDescriptor::TryAsTensorDescriptor(*(void **)a2))
    {
      int8x8_t v22 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v25, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v23, "SetMaxPortDescriptor is only supported for tensor IO.");
      E5RT::Status::Status(v24, 2, v23);
      E5RT::E5RTError::E5RTError(v22, v25, v24);
    }
    if (!E5RT::OperandDescriptor::TryAsTensorDescriptor((void *)a1[2]))
    {
      float v19 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v25, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v23, "The max descriptor must be of the same type as current descriptor.");
      E5RT::Status::Status(v24, 2, v23);
      E5RT::E5RTError::E5RTError(v19, v25, v24);
    }
    uint64_t v6 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)a1[2]);
    E5RT::TensorDescriptor::GetTensorDataType(v6, (E5RT::TensorDataType *)v25);
    uint64_t v7 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)a2);
    E5RT::TensorDescriptor::GetTensorDataType(v7, (E5RT::TensorDataType *)v23);
    BOOL v8 = E5RT::operator!=((uint64_t)v25, (uint64_t)v23);
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v23);
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v25);
    if (v8)
    {
      float v20 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v25, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v23, "The max descriptor must have the same datatype as the current descriptor.");
      E5RT::Status::Status(v24, 2, v23);
      E5RT::E5RTError::E5RTError(v20, v25, v24);
    }
    uint64_t v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)a1[2]);
    unint64_t Rank = E5RT::TensorDescriptor::GetRank(v9);
    unint64_t v11 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)a2);
    if (Rank != E5RT::TensorDescriptor::GetRank(v11))
    {
      uint64_t v21 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v25, "SetMaxPortDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v23, "The max descriptor must have the same rank as the current descriptor.");
      E5RT::Status::Status(v24, 2, v23);
      E5RT::E5RTError::E5RTError(v21, v25, v24);
    }
    uint64_t v13 = *(void **)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (std::__shared_weak_count *)a1[5];
    a1[4] = (uint64_t)v13;
    a1[5] = v12;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    uint64_t v15 = (std::__shared_weak_count *)a1[5];
    a1[4] = 0;
    a1[5] = 0;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_192370FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOPortImpl::IsBoundMemoryObjectInternal(E5RT::IOPortImpl *this)
{
  return *((unsigned __int8 *)this + 98);
}

BOOL E5RT::IOPortImpl::IsDynamicBounded(E5RT::IOPortImpl *this)
{
  if (!*((unsigned char *)this + 96)) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 4);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2) {
    return v1 != 0;
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v3 = v1 != 0;
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v3;
}

void **E5RT::IOPortImpl::GetSupportedBufferTypes(void **this)
{
  if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(this[2]))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetSupportedBufferTypes");
    std::string::basic_string[abi:ne180100]<0>(v4, "GetSupportedBufferTypes is only supported for Buffer object");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return this + 13;
}

void sub_1923712F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::AllocateAndBindMemory(E5RT::IOPort *a1, unsigned int a2)
{
  E5RT::IOPort::GetPortDescriptor(a1, &v8);
  if (v8)
  {
    if (E5RT::OperandDescriptor::TryAsTensorDescriptor(v8))
    {
      BOOL v3 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(v8);
      uint64_t Size = E5RT::TensorDescriptor::GetSize(v3);
      E5RT::BufferObject::AllocMemory(Size, a2);
    }
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v8))
    {
      uint64_t v5 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor(v8);
      E5RT::SurfaceObject::AllocSurface(v5, 0);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found an unsupported descriptor type.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v6, "Found a null pointer to a port descriptor.");
  __cxa_throw(v6, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192371628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v14 - 32);
  _Unwind_Resume(a1);
}

void sub_19237164C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a5)
  {
    sub_192343C0C();
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5 - 32);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5 - 32);
  _Unwind_Resume(a1);
}

void E5RT::CreateBoundPortForTensor(void *a1, E5RT::TensorDataType::Impl **this, void *a3)
{
  if (*a3 != a3[1]) {
    E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignments(a1, a3, this);
  }
  E5RT::TensorDescriptor::CreateTensorDesc((int)a1, this);
}

void sub_192371B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
  {
    Espresso::AOT::Builder::BuildTensorOperand();
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v15 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void E5RT::CreateBoundPortForSurface(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_192371F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5 - 48);
  _Unwind_Resume(a1);
}

void sub_192372030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
  {
    Espresso::AOT::Builder::BuildTensorOperand();
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192372028);
}

void E5RT::InitializePortRandomly(E5RT *this, E5RT::IOPort *a2, uint64_t a3)
{
  E5RT::IOPort::GetPortDescriptor(this, &v18);
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a null pointer to a port descriptor.");
    goto LABEL_21;
  }
  if (E5RT::OperandDescriptor::TryAsTensorDescriptor(v18))
  {
    uint64_t v6 = (E5RT *)E5RT::OperandDescriptor::TensorDescriptor(v18);
    E5RT::IOPort::GetMemoryObject(this, &v16);
    uint64_t v7 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::TryAsBuffer(v16);
    BOOL v8 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    if (!v7)
    {
      uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Found a null pointer to a tensor memory object.");
      __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    E5RT::InitializeTensorRandomly(v6, v7, a2, a3);
    goto LABEL_14;
  }
  if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v18))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found an unsupported descriptor type.");
LABEL_21:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = (E5RT *)E5RT::OperandDescriptor::SurfaceDescriptor(v18);
  E5RT::IOPort::GetMemoryObject(this, &v16);
  uint64_t v10 = (const E5RT::SurfaceDescriptor *)E5RT::MemoryObject::TryAsSurface(v16);
  unint64_t v11 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (!v10)
  {
    uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Found a null pointer to a surface memory object.");
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  E5RT::InitializeSurfaceRandomly(v9, v10, a2, a3);
LABEL_14:
  uint64_t v12 = v19;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1923722EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_192372340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192372370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192372384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192372398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1923723AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DB3B69) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DB3B69 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DB3B69)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DB3B69 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::TensorDescriptor> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPortPriv::IOPortPriv(a2, &v5);
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1923725A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v9 - 32);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::SurfaceDescriptor  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceDescriptor  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceDescriptor  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DB3C02) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DB3C02 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DB3C02)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DB3C02 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::SurfaceDescriptor> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPortPriv::IOPortPriv(a2, &v5);
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1923727A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v9 - 32);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE396B88;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = a3;
  uint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1923728C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_operation_name(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396D88;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923729C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffers(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396E88;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192372AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encode(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396F08;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192372BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encode(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396F88;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192372CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_device(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397008;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192372DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_device(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397088;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192372EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_id(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397108;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192372FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_id(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397188;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923730AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_dynamic_callables(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397208;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923731A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_copy_dynamic_callables(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397288;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923732A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_paths(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397308;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923733A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_paths(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397388;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19237349C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mpsgraph_type_inference(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397408;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19237359C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_ops(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397488;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19237369C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encode(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397508;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19237379C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encode(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397588;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192373898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_of_encoding_threads(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397608;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192373994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923739AC()
{
}

__n128 sub_1923739C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE396B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192373A14(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192373A4C(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      if (a1[3]) {
        operator new();
      }
      std::string __dst = (char *)operator new(0x38uLL);
      long long v5 = xmmword_192DAB900;
      strcpy(__dst, "Invalid Function Argument: function_name is NULL.");
      char v3 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
    else
    {
      std::string __dst = (char *)operator new(0x38uLL);
      long long v5 = xmmword_192DA90B0;
      strcpy(__dst, "Invalid Function Argument: e5_library_path is NULL.");
      char v3 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
  }
  else
  {
    std::string __dst = (char *)operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy(__dst, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_192373E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192373F68(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_precompiled_compute_op_create_options_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z49e5rt_precompiled_compute_op_create_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_precompiled_compute_op_create_options_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_precompiled_compute_op_create_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192373FD8()
{
  return &unk_1EE396BE8;
}

void std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DB3D58) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DB3D58 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DB3D58)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DB3D58 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_1923740A4()
{
}

__n128 sub_1923740B8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192374104(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192374134(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    uint64_t v4 = operator new(0x38uLL);
    long long v5 = xmmword_192DA90A0;
    strcpy((char *)v4, "Invalid Function Argument: program_function is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    uint64_t v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_192374430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19237452C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_precompiled_compute_op_create_options_create_with_program_functionE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z71e5rt_precompiled_compute_op_create_options_create_with_program_functionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_precompiled_compute_op_create_options_create_with_program_functionE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_precompiled_compute_op_create_options_create_with_program_functionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19237459C()
{
  return &unk_1EE396C68;
}

void sub_1923745AC()
{
}

void *sub_1923745C0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE396C88;
  result[1] = v3;
  return result;
}

uint64_t sub_192374608(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE396C88;
  a2[1] = v2;
  return result;
}

uint64_t sub_192374634(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x20C40A4A59CD2);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      BOOL v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    BOOL v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_192374818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192374858(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z50e5rt_precompiled_compute_op_create_options_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z50e5rt_precompiled_compute_op_create_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z50e5rt_precompiled_compute_op_create_options_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50e5rt_precompiled_compute_op_create_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923748C8()
{
  return &unk_1EE396CE8;
}

void sub_1923748D8()
{
}

__n128 sub_1923748EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396D08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192374938(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396D08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192374968(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *v1;
      size_t v4 = strlen(*(const char **)(a1 + 16));
      if (v4 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v5 = v4;
      if (v4 >= 0x17)
      {
        uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17) {
          uint64_t v7 = v4 | 7;
        }
        uint64_t v8 = v7 + 1;
        p_dst = (std::string *)operator new(v7 + 1);
        __dst.__r_.__value_.__l.__size_ = v5;
        __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
        p_dst = &__dst;
        if (!v4) {
          goto LABEL_11;
        }
      }
      memcpy(p_dst, v2, v5);
LABEL_11:
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      E5RT::PrecompiledComputeOpCreateOptions::SetOperationName(v3, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      return 0;
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_192DA90C0;
    strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: op_name is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_192DA88D0;
    strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: handle is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_192374B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_192374BA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z61e5rt_precompiled_compute_op_create_options_set_operation_nameE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z61e5rt_precompiled_compute_op_create_options_set_operation_nameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z61e5rt_precompiled_compute_op_create_options_set_operation_nameE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z61e5rt_precompiled_compute_op_create_options_set_operation_nameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192374C14()
{
  return &unk_1EE396D68;
}

void sub_192374C24()
{
}

__n128 sub_192374C38(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396D88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192374C84(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396D88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192374CB4(uint64_t a1)
{
  uint64_t v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      Operationuint64_t Name = E5RT::PrecompiledComputeOpCreateOptions::GetOperationName(*v1);
      uint64_t result = 0;
      if (*(char *)(OperationName + 23) < 0) {
        Operationuint64_t Name = *(void *)OperationName;
      }
      **(void **)(a1 + 16) = OperationName;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90C0;
      strcpy((char *)v7, "Invalid Function Argument: op_name is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192374E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192374E84(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z61e5rt_precompiled_compute_op_create_options_get_operation_nameE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z61e5rt_precompiled_compute_op_create_options_get_operation_nameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z61e5rt_precompiled_compute_op_create_options_get_operation_nameE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z61e5rt_precompiled_compute_op_create_options_get_operation_nameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192374EF4()
{
  return &unk_1EE396DE8;
}

void sub_192374F04()
{
}

__n128 sub_192374F18(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396E08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192374F64(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396E08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192374F94(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetAllocateIntermediateBuffers(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    std::string::size_type v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192375070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923750AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z76e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffersE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z76e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffersE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z76e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffersE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z76e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffersE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19237511C()
{
  return &unk_1EE396E68;
}

void sub_19237512C()
{
}

__n128 sub_192375140(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396E88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19237518C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396E88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923751BC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char IntermediateBuffers = E5RT::PrecompiledComputeOpCreateOptions::GetAllocateIntermediateBuffers(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = IntermediateBuffers;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAA4A0;
      strcpy((char *)v7, "Invalid Function Argument: allocate is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19237533C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19237537C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z76e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffersE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z76e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffersE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z76e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffersE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z76e5rt_precompiled_compute_op_create_options_get_allocate_intermediate_buffersE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923753EC()
{
  return &unk_1EE396EE8;
}

void sub_1923753FC()
{
}

__n128 sub_192375410(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19237545C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19237548C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetLazyPrepareOpForEncode(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    std::string::size_type v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192375568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923755A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z73e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encodeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z73e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encodeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73e5rt_precompiled_compute_op_create_options_set_lazy_prepare_op_for_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192375614()
{
  return &unk_1EE396F68;
}

void sub_192375624()
{
}

__n128 sub_192375638(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE396F88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192375684(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE396F88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923756B4(uint64_t a1)
{
  uint64_t v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char LazyPrepareOpForEncode = E5RT::PrecompiledComputeOpCreateOptions::GetLazyPrepareOpForEncode(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = LazyPrepareOpForEncode;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAC000;
      strcpy((char *)v7, "Invalid Function Argument: lazy is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192375834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192375874(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z73e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encodeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z73e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z73e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encodeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z73e5rt_precompiled_compute_op_create_options_get_lazy_prepare_op_for_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923758E4()
{
  return &unk_1EE396FE8;
}

void sub_1923758F4()
{
}

__n128 sub_192375908(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397008;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192375954(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397008;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192375984(uint64_t a1)
{
  uint64_t v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2)
    {
      if (*v2)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        v7[23] = 10;
        strcpy(v7, "operator()");
        *(void *)std::string __p = operator new(0x28uLL);
        *(_OWORD *)&__p[8] = xmmword_192DB3C40;
        strcpy(*(char **)__p, "*override_gpu_device is not NULL.");
        E5RT::Status::Status(v5, 1, __p);
        E5RT::E5RTError::E5RTError(exception, v7, v5);
      }
      if (E5RT::PrecompiledComputeOpCreateOptions::TryGetOverrideComputeGPUDevice(*v1)) {
        operator new();
      }
      return 2;
    }
    else
    {
      *(void *)uint64_t v7 = operator new(0x38uLL);
      *(_OWORD *)&unsigned char v7[8] = xmmword_192DA8910;
      strcpy(*(char **)v7, "Invalid Function Argument: override_gpu_device is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v7, (uint64_t *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v7[23] & 0x80000000) != 0) {
        operator delete(*(void **)v7);
      }
      return 1;
    }
  }
  else
  {
    *(void *)uint64_t v7 = operator new(0x30uLL);
    *(_OWORD *)&unsigned char v7[8] = xmmword_192DA88D0;
    strcpy(*(char **)v7, "Invalid Function Argument: handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v7, (uint64_t *)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if ((v7[23] & 0x80000000) != 0) {
      operator delete(*(void **)v7);
    }
    return 1;
  }
}

void sub_192375C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192375CC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z77e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_deviceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z77e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_deviceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z77e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_deviceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z77e5rt_precompiled_compute_op_create_options_retain_override_compute_gpu_deviceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192375D34()
{
  return &unk_1EE397068;
}

void sub_192375D44()
{
}

__n128 sub_192375D58(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192375DA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192375DD4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    if (v2)
    {
      E5RT::PrecompiledComputeOpCreateOptions::SetOverrideComputeGPUDevice(*v1, *v2);
      return 0;
    }
    else
    {
      char v6 = operator new(0x38uLL);
      long long v7 = xmmword_192DA8910;
      strcpy((char *)v6, "Invalid Function Argument: override_gpu_device is NULL.");
      char v5 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v7) < 0) {
        operator delete(v6);
      }
      return 1;
    }
  }
  else
  {
    char v6 = operator new(0x30uLL);
    long long v7 = xmmword_192DA88D0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    char v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(v6);
    }
    return 1;
  }
}

void sub_192375F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192375F90(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z74e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_deviceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z74e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_deviceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z74e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_deviceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z74e5rt_precompiled_compute_op_create_options_set_override_compute_gpu_deviceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192376000()
{
  return &unk_1EE3970E8;
}

void sub_192376010()
{
}

__n128 sub_192376024(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397108;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192376070(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397108;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923760A0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetIOSurfaceMemoryPoolId(*v1, *(void *)(a1 + 16));
    return 0;
  }
  else
  {
    char v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192376174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923761B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_idE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z71e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_idE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_idE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_precompiled_compute_op_create_options_set_iosurface_memory_pool_idE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192376220()
{
  return &unk_1EE397168;
}

void sub_192376230()
{
}

__n128 sub_192376244(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397188;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192376290(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397188;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923762C0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t IOSurfaceMemoryPoolId = E5RT::PrecompiledComputeOpCreateOptions::GetIOSurfaceMemoryPoolId(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = IOSurfaceMemoryPoolId;
    }
    else
    {
      long long v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90C0;
      strcpy((char *)v7, "Invalid Function Argument: pool_id is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192376440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192376480(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_idE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z71e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_idE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_idE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_precompiled_compute_op_create_options_get_iosurface_memory_pool_idE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923764F0()
{
  return &unk_1EE3971E8;
}

void sub_192376500()
{
}

__n128 sub_192376514(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397208;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192376560(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397208;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192376590(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 16);
    if (v2)
    {
      memset(__p, 0, sizeof(__p));
      int v8 = 1065353216;
      CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)sub_192376884, __p);
      E5RT::PrecompiledComputeOpCreateOptions::SetDynamicCallables(**(void **)(a1 + 8), (uint64_t)__p);
      unint64_t v3 = (void **)__p[2];
      if (!__p[2])
      {
LABEL_4:
        char v4 = __p[0];
        __p[0] = 0;
        if (v4) {
          operator delete(v4);
        }
        return 0;
      }
      while (1)
      {
        char v6 = (void **)*v3;
        if (*((char *)v3 + 63) < 0)
        {
          operator delete(v3[5]);
          if (*((char *)v3 + 39) < 0) {
LABEL_12:
          }
            operator delete(v3[2]);
        }
        else if (*((char *)v3 + 39) < 0)
        {
          goto LABEL_12;
        }
        operator delete(v3);
        unint64_t v3 = v6;
        if (!v6) {
          goto LABEL_4;
        }
      }
    }
    __p[0] = operator new(0x38uLL);
    *(_OWORD *)&__p[1] = xmmword_192DA90D0;
    strcpy((char *)__p[0], "Invalid Function Argument: dynamic_callables is NULL.");
    char v10 = 10;
    strcpy((char *)v9, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, v9);
    if (v10 < 0) {
      operator delete((void *)v9[0]);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return 1;
  }
  else
  {
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_192DA88D0;
    strcpy((char *)__p[0], "Invalid Function Argument: handle is NULL.");
    char v10 = 10;
    strcpy((char *)v9, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, v9);
    if (v10 < 0) {
      operator delete((void *)v9[0]);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return 1;
  }
}

void sub_192376798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192376808(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z64e5rt_precompiled_compute_op_create_options_set_dynamic_callablesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z64e5rt_precompiled_compute_op_create_options_set_dynamic_callablesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z64e5rt_precompiled_compute_op_create_options_set_dynamic_callablesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z64e5rt_precompiled_compute_op_create_options_set_dynamic_callablesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192376878()
{
  return &unk_1EE397268;
}

void sub_192376884(const __CFString *a1, CFURLRef anURL, uint64_t a3)
{
  CFStringRef v5 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  uint64_t v24 = 0;
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  long long v7 = sub_192376AC4(a1, SystemEncoding, (char **)&v24);
  size_t v8 = strlen(v7);
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    char v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    unint64_t v23 = v12 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_8;
  }
  HIBYTE(v23) = v8;
  char v10 = __dst;
  if (v8) {
LABEL_8:
  }
    memmove(v10, v7, (size_t)v9);
  *((unsigned char *)v9 + (void)v10) = 0;
  free(v24);
  uint64_t v24 = 0;
  CFStringEncoding v13 = CFStringGetSystemEncoding();
  uint64_t v14 = sub_192376AC4(v5, v13, (char **)&v24);
  size_t v15 = strlen(v14);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    p_str = operator new(v18 + 1);
    __str.__r_.__value_.__l.__size_ = v16;
    __str.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
    goto LABEL_16;
  }
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = v15;
  p_str = &__str;
  if (v15) {
LABEL_16:
  }
    memmove(p_str, v14, v16);
  *((unsigned char *)p_str + v16) = 0;
  free(v24);
  int v25 = __dst;
  float v20 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (long long **)&v25);
  std::string::operator=((std::string *)(v20 + 5), &__str);
  CFRelease(v5);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23) < 0) {
    goto LABEL_21;
  }
}

void sub_192376A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

char *sub_192376AC4(CFStringRef theString, CFStringEncoding encoding, char **a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (theString)
  {
    CStringPtr = CFStringGetCStringPtr(theString, encoding);
    long long v7 = (char *)CStringPtr;
    if (!a3 || CStringPtr) {
      return v7;
    }
    CFIndex Length = CFStringGetLength(theString);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length + 1, encoding);
    if (MaximumSizeForEncoding != -1)
    {
      CFIndex v10 = MaximumSizeForEncoding;
      long long v7 = (char *)malloc_type_malloc(MaximumSizeForEncoding, 0x4D39200DuLL);
      if (!v7) {
        return v7;
      }
      if (CFStringGetCString(theString, v7, v10, encoding))
      {
        *a3 = v7;
        return v7;
      }
      free(v7);
    }
  }
  return 0;
}

void sub_192376B9C()
{
}

__n128 sub_192376BB0(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x18uLL);
  *(void *)CFDictionaryRef v2 = &unk_1EE397288;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192376BFC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397288;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192376C2C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t DynamicCallables = E5RT::PrecompiledComputeOpCreateOptions::GetDynamicCallables(*v1);
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      for (uint64_t i = *(uint64_t **)(DynamicCallables + 16); i; uint64_t i = (uint64_t *)*i)
      {
        CFIndex v10 = (const char *)(i + 2);
        if (*((char *)i + 39) < 0) {
          CFIndex v10 = *(const char **)v10;
        }
        uint64_t v11 = (const char *)(i + 5);
        CFStringRef v12 = CFStringCreateWithCString(v4, v10, 0x8000100u);
        if (*((char *)i + 63) < 0) {
          uint64_t v11 = *(const char **)v11;
        }
        CFStringRef v8 = CFStringCreateWithCString(v4, v11, 0x8000100u);
        CFURLRef v9 = CFURLCreateWithFileSystemPath(v4, v8, kCFURLPOSIXPathStyle, 0);
        CFDictionaryAddValue(Mutable, v12, v9);
        CFRelease(v12);
        CFRelease(v8);
        CFRelease(v9);
      }
      uint64_t result = 0;
      **(void **)(a1 + 16) = Mutable;
      return result;
    }
    size_t v15 = operator new(0x38uLL);
    long long v16 = xmmword_192DA90D0;
    strcpy((char *)v15, "Invalid Function Argument: dynamic_callables is NULL.");
    char v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
  }
  else
  {
    size_t v15 = operator new(0x30uLL);
    long long v16 = xmmword_192DA88D0;
    strcpy((char *)v15, "Invalid Function Argument: handle is NULL.");
    char v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15);
  }
  return 1;
}

void sub_192376E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_192376E9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z65e5rt_precompiled_compute_op_create_options_copy_dynamic_callablesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z65e5rt_precompiled_compute_op_create_options_copy_dynamic_callablesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z65e5rt_precompiled_compute_op_create_options_copy_dynamic_callablesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z65e5rt_precompiled_compute_op_create_options_copy_dynamic_callablesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192376F0C()
{
  return &unk_1EE3972E8;
}

void sub_192376F1C()
{
}

__n128 sub_192376F30(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x18uLL);
  *(void *)CFDictionaryRef v2 = &unk_1EE397308;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192376F7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397308;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192376FAC(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 16);
    if (v2)
    {
      memset(__p, 0, sizeof(__p));
      int v8 = 1065353216;
      CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)sub_192376884, __p);
      E5RT::PrecompiledComputeOpCreateOptions::SetMutableMILWeightPaths(**(void **)(a1 + 8), (uint64_t)__p);
      unint64_t v3 = (void **)__p[2];
      if (!__p[2])
      {
LABEL_4:
        CFAllocatorRef v4 = __p[0];
        __p[0] = 0;
        if (v4) {
          operator delete(v4);
        }
        return 0;
      }
      while (1)
      {
        char v6 = (void **)*v3;
        if (*((char *)v3 + 63) < 0)
        {
          operator delete(v3[5]);
          if (*((char *)v3 + 39) < 0) {
LABEL_12:
          }
            operator delete(v3[2]);
        }
        else if (*((char *)v3 + 39) < 0)
        {
          goto LABEL_12;
        }
        operator delete(v3);
        unint64_t v3 = v6;
        if (!v6) {
          goto LABEL_4;
        }
      }
    }
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_192DA90C0;
    strcpy((char *)__p[0], "Invalid Function Argument: weights is NULL.");
    char v10 = 10;
    strcpy((char *)v9, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, v9);
    if (v10 < 0) {
      operator delete((void *)v9[0]);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return 1;
  }
  else
  {
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_192DA88D0;
    strcpy((char *)__p[0], "Invalid Function Argument: handle is NULL.");
    char v10 = 10;
    strcpy((char *)v9, "operator()");
    E5RT::LogErrorMessage((uint64_t *)__p, v9);
    if (v10 < 0) {
      operator delete((void *)v9[0]);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return 1;
  }
}

void sub_1923771AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19237721C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z71e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_pathsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z71e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_pathsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z71e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_pathsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z71e5rt_precompiled_compute_op_create_options_set_mutable_mil_weight_pathsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19237728C()
{
  return &unk_1EE397368;
}

void sub_19237729C()
{
}

__n128 sub_1923772B0(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x18uLL);
  *(void *)CFDictionaryRef v2 = &unk_1EE397388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923772FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397388;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19237732C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t MutableMILWeightPaths = E5RT::PrecompiledComputeOpCreateOptions::GetMutableMILWeightPaths(*v1);
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      for (uint64_t i = *(uint64_t **)(MutableMILWeightPaths + 16); i; uint64_t i = (uint64_t *)*i)
      {
        char v10 = (const char *)(i + 2);
        if (*((char *)i + 39) < 0) {
          char v10 = *(const char **)v10;
        }
        uint64_t v11 = (const char *)(i + 5);
        CFStringRef v12 = CFStringCreateWithCString(v4, v10, 0x8000100u);
        if (*((char *)i + 63) < 0) {
          uint64_t v11 = *(const char **)v11;
        }
        CFStringRef v8 = CFStringCreateWithCString(v4, v11, 0x8000100u);
        CFURLRef v9 = CFURLCreateWithFileSystemPath(v4, v8, kCFURLPOSIXPathStyle, 0);
        CFDictionaryAddValue(Mutable, v12, v9);
        CFRelease(v12);
        CFRelease(v8);
        CFRelease(v9);
      }
      uint64_t result = 0;
      **(void **)(a1 + 16) = Mutable;
      return result;
    }
    size_t v15 = operator new(0x30uLL);
    long long v16 = xmmword_192DA90C0;
    strcpy((char *)v15, "Invalid Function Argument: weights is NULL.");
    char v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
  }
  else
  {
    size_t v15 = operator new(0x30uLL);
    long long v16 = xmmword_192DA88D0;
    strcpy((char *)v15, "Invalid Function Argument: handle is NULL.");
    char v14 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v15, (uint64_t *)__p);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15);
  }
  return 1;
}

void sub_192377554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_192377594(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z72e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_pathsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z72e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_pathsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z72e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_pathsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z72e5rt_precompiled_compute_op_create_options_copy_mutable_mil_weight_pathsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192377604()
{
  return &unk_1EE3973E8;
}

void sub_192377614()
{
}

__n128 sub_192377628(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x18uLL);
  *(void *)CFDictionaryRef v2 = &unk_1EE397408;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192377674(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397408;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923776A4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    CFStringRef v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192377780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923777BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z104e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z104e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mps"
                                "graph_type_inferenceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z104e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z104e5rt_precompiled_compute_op_create_options_set_experimental_disable_compile_time_mpsgraph_type_inferenceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19237782C()
{
  return &unk_1EE397468;
}

void sub_19237783C()
{
}

__n128 sub_192377850(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x18uLL);
  *(void *)CFDictionaryRef v2 = &unk_1EE397488;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19237789C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397488;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923778CC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableGPUQuantOps(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    CFStringRef v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1923779A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923779E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z80e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_opsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z80e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_opsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z80e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_opsE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z80e5rt_precompiled_compute_op_create_options_set_experimental_enable_gpu_quant_opsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_192377A54()
{
  return &unk_1EE3974E8;
}

void sub_192377A64()
{
}

__n128 sub_192377A78(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x18uLL);
  *(void *)CFDictionaryRef v2 = &unk_1EE397508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192377AC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192377AF4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalEnableMPSGraphParallelEncode(*v1, *(unsigned __int8 *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    CFStringRef v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_192377BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192377C0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z91e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encodeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z91e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z91e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encodeE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z91e5rt_precompiled_compute_op_create_options_set_experimental_enable_mpsgraph_parallel_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_192377C7C()
{
  return &unk_1EE397568;
}

void sub_192377C8C()
{
}

__n128 sub_192377CA0(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x18uLL);
  *(void *)CFDictionaryRef v2 = &unk_1EE397588;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192377CEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397588;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192377D1C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::PrecompiledComputeOpCreateOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      BOOL ExperimentalEnableMPSGraphParallelEncode = E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalEnableMPSGraphParallelEncode(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = ExperimentalEnableMPSGraphParallelEncode;
    }
    else
    {
      long long v7 = operator new(0x40uLL);
      long long v8 = xmmword_192DA8920;
      strcpy((char *)v7, "Invalid Function Argument: enable_parallel_encode is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192377EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192377EE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z91e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encodeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z91e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z91e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encodeE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z91e5rt_precompiled_compute_op_create_options_get_experimental_enable_mpsgraph_parallel_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_192377F54()
{
  return &unk_1EE3975E8;
}

void sub_192377F64()
{
}

__n128 sub_192377F78(uint64_t a1)
{
  CFDictionaryRef v2 = (char *)operator new(0x18uLL);
  *(void *)CFDictionaryRef v2 = &unk_1EE397608;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192377FC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397608;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192377FF4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::PrecompiledComputeOpCreateOptions::SetExperimentalMPSGraphMaximumNumberOfEncodingThreads(*v1, *(void *)(a1 + 16));
    return 0;
  }
  else
  {
    CFStringRef v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1923780C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192378104(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z103e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_of_encoding_threadsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z103e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_"
                                "of_encoding_threadsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z103e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_of_encoding_threadsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z103e5rt_precompiled_compute_op_create_options_set_experimental_mpsgraph_maximum_number_of_encoding_threadsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192378174()
{
  return &unk_1EE397668;
}

uint64_t sub_19237818C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(void **a1)
{
  CFDictionaryRef v2 = *a1;
  *a1 = 0;
  if (v2) {
    operator delete(v2);
  }
}

void sub_1923781EC(uint64_t a1)
{
  do
  {
    sub_192378180();
    if (v3 < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
    operator delete((void *)a1);
    a1 = v1;
  }
  while (v1);
}

void E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel::~InterleavedTransposeGatherNdKernel(void **this)
{
  *this = &unk_1EE325EF0;
  if (*((char *)this + 143) < 0)
  {
    operator delete(this[15]);
    if ((*((char *)this + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[12]);
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
LABEL_4:
    CFDictionaryRef v2 = (E5RT::Ops::E5MinimalCpu::BaseKernel *)this;
    goto LABEL_6;
  }
LABEL_9:
  operator delete(this[9]);
  CFDictionaryRef v2 = (E5RT::Ops::E5MinimalCpu::BaseKernel *)this;

LABEL_6:
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(v2);
}

{
  uint64_t vars8;

  *this = &unk_1EE325EF0;
  if (*((char *)this + 143) < 0)
  {
    operator delete(this[15]);
    if ((*((char *)this + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      operator delete(this[9]);
LABEL_4:
      E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)this);
      JUMPOUT(0x192FF16B0);
    }
  }
  else if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[12]);
  if ((*((char *)this + 95) & 0x80000000) == 0) {
    goto LABEL_4;
  }
  goto LABEL_9;
}

uint64_t E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel::InterleavedTransposeGatherNdKernel(uint64_t a1, long long *a2, long long *a3, long long *a4, int a5, char a6)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)a1);
  v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE325EF0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12 + 3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    v12[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v12[3].__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v14 = *a3;
    *(void *)(a1 + 112) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 96) = v14;
  }
  size_t v15 = (std::string *)(a1 + 120);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v16 = *a4;
    *(void *)(a1 + 136) = *((void *)a4 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  *(_DWORD *)(a1 + 144) = a5;
  *(unsigned char *)(a1 + 148) = a6;
  return a1;
}

void sub_19237848C(_Unwind_Exception *a1)
{
  if (v1[119] < 0)
  {
    operator delete(*v3);
    if ((v1[95] & 0x80000000) == 0)
    {
LABEL_3:
      E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)v1);
      _Unwind_Resume(a1);
    }
  }
  else if ((v1[95] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel((E5RT::Ops::E5MinimalCpu::BaseKernel *)v1);
  _Unwind_Resume(a1);
}

void sub_1923784E8(_Unwind_Exception *a1)
{
  E5RT::Ops::E5MinimalCpu::BaseKernel::~BaseKernel(v1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel::Launch(uint64_t a1, void *a2, void *a3)
{
  long long v6 = (const void **)(a1 + 96);
  E5RT::Ops::E5MinimalCpu::BaseKernel::CheckName(a1, a1 + 96, a2);
  E5RT::Ops::E5MinimalCpu::BaseKernel::CheckName(a1, a1 + 72, a2);
  E5RT::Ops::E5MinimalCpu::BaseKernel::CheckName(a1, a1 + 120, a3);
  Buffer = (E5RT::BufferObject *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(a1, v6, a2);
  long long v7 = (E5RT::BufferObject *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(a1, (const void **)(a1 + 72), a2);
  long long v8 = (E5RT::BufferObject *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetBuffer(a1, (const void **)(a1 + 120), a3);
  TensorDescriptor = (E5RT::TensorDescriptor *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetTensorDescriptor(a1, v6, a2);
  char v10 = (E5RT::TensorDescriptor *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetTensorDescriptor(a1, (const void **)(a1 + 72), a2);
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(v10);
  CFStringRef v12 = (E5RT::TensorDescriptor *)E5RT::Ops::E5MinimalCpu::BaseKernel::GetTensorDescriptor(a1, (const void **)(a1 + 120), a3);
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v12);
  CFStringRef v146 = 0;
  size_t v15 = *(const void **)TensorShape;
  uint64_t v14 = *(void *)(TensorShape + 8);
  size_t v16 = v14 - *(void *)TensorShape;
  if (v14 == *(void *)TensorShape)
  {
    unint64_t v17 = 0;
    std::string __p = 0;
    if (Rank) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v18 = 0;
    uint64_t v19 = -8;
    unint64_t v20 = MEMORY[0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = -16;
    goto LABEL_10;
  }
  if ((v16 & 0x8000000000000000) != 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v17 = operator new(v14 - *(void *)TensorShape);
  CFStringRef v146 = v17;
  memcpy(v17, v15, v16);
  std::string __p = 0;
  if (!Rank) {
    goto LABEL_9;
  }
LABEL_4:
  if ((Rank & 0x8000000000000000) != 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = operator new(8 * Rank);
  std::string __p = v18;
  memcpy(v18, v17, 8 * Rank);
  uint64_t v19 = (uint64_t)&v18[Rank - 1];
  unint64_t v20 = *(void *)v19;
  if (v18 == (void *)v19)
  {
    uint64_t v22 = 1;
    goto LABEL_16;
  }
  unint64_t v21 = v19 - (void)v18 - 8;
  if (v21 < 8)
  {
    uint64_t v22 = 1;
    unint64_t v23 = v18;
    do
    {
LABEL_13:
      uint64_t v29 = *v23++;
      v22 *= v29;
    }
    while (v23 != (uint64_t *)v19);
    goto LABEL_16;
  }
LABEL_10:
  uint64_t v24 = (v21 >> 3) + 1;
  unint64_t v23 = &v18[v24 & 0x3FFFFFFFFFFFFFFELL];
  int v25 = v18 + 1;
  uint64_t v26 = 1;
  uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v28 = 1;
  do
  {
    v26 *= *(v25 - 1);
    v28 *= *v25;
    v25 += 2;
    v27 -= 2;
  }
  while (v27);
  uint64_t v22 = v28 * v26;
  if (v24 != (v24 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_13;
  }
LABEL_16:
  unint64_t v30 = (void *)E5RT::TensorDescriptor::GetTensorShape(TensorDescriptor);
  unint64_t v31 = (uint64_t *)v30[1];
  uint8x8_t v32 = (uint64_t *)(*v30 + 8 * v20);
  if (v32 == v31)
  {
    uint64_t v35 = 1;
    goto LABEL_24;
  }
  uint64_t v33 = 8 * v20 + *v30;
  unint64_t v34 = (unint64_t)v31 - v33 - 8;
  if (v34 < 8)
  {
    uint64_t v35 = 1;
    do
    {
LABEL_23:
      uint64_t v41 = *v32++;
      v35 *= v41;
    }
    while (v32 != v31);
    goto LABEL_24;
  }
  uint64_t v36 = (v34 >> 3) + 1;
  v32 += v36 & 0x3FFFFFFFFFFFFFFELL;
  char v37 = (void *)(v33 + 8);
  uint64_t v38 = 1;
  uint64_t v39 = v36 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v40 = 1;
  do
  {
    v38 *= *(v37 - 1);
    v40 *= *v37;
    v37 += 2;
    v39 -= 2;
  }
  while (v39);
  uint64_t v35 = v40 * v38;
  if (v36 != (v36 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_23;
  }
LABEL_24:
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(TensorDescriptor);
  int NumComponents = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
  DataSpauint64_t n = (int *)E5RT::BufferObject::GetDataSpan(v7);
  uint64_t v141 = E5RT::BufferObject::GetDataSpan(Buffer);
  uint64_t v44 = TensorDescriptor;
  uint64_t v45 = (unsigned char *)E5RT::BufferObject::GetDataSpan(v8);
  for (unint64_t i = 0; i < E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)v10); ++i)
  {
    int v47 = DataSpan[i];
    if (v47 >= *(_DWORD *)(a1 + 144))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v149, "Launch");
      std::string::basic_string[abi:ne180100]<0>(v147, "Gather op index out of bound.");
      E5RT::Status::Status(v148, 4, v147);
      E5RT::E5RTError::E5RTError(exception, v149, v148);
    }
  }
  uint64_t TensorStrides = (E5RT::BufferObject *)E5RT::TensorDescriptor::GetTensorStrides(v44);
  if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)TensorDataTypeRef) == 4)
  {
    if (E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) == 2)
    {
      if (v22)
      {
        int v49 = *(_DWORD *)(a1 + 144);
        int v50 = *(unsigned __int8 *)(a1 + 148);
        uint64_t v51 = *(void *)(*((void *)TensorStrides + 1) - 8) >> 1;
        if (v20 < 2)
        {
          if (v35)
          {
            uint64_t v81 = 0;
            uint64_t v82 = 2 * v51;
            do
            {
              int v83 = sub_192379468((uint64_t)DataSpan, 0, v49, v50 != 0);
              uint64_t v84 = (_WORD *)(v141
                            + 2 * ((v83 / NumComponents * **(_DWORD **)TensorStrides) >> 1)
                            + 2 * (v83 % NumComponents));
              uint64_t v85 = v35;
              do
              {
                *(_WORD *)uint64_t v45 = *v84;
                v45 += 2;
                uint64_t v84 = (_WORD *)((char *)v84 + v82);
                --v85;
              }
              while (v85);
              DataSpan += v20;
              ++v81;
            }
            while (v81 != v22);
          }
          else
          {
            do
            {
              sub_192379468((uint64_t)DataSpan, 0, v49, v50 != 0);
              DataSpan += v20;
              --v22;
            }
            while (v22);
          }
        }
        else if (v50)
        {
          uint64_t v52 = 0;
          uint64_t v53 = 2 * v51;
          do
          {
            int v54 = sub_192379468((uint64_t)DataSpan, 0, v49, 1);
            int v55 = (v54 / NumComponents * **(_DWORD **)TensorStrides) >> 1;
            for (uint64_t j = 1; j != v20; ++j)
            {
              uint64_t v57 = DataSpan[j];
              if ((int)v57 >= v49 || (v57 & 0x80000000) != 0)
              {
                std::__fs::filesystem::path v105 = __cxa_allocate_exception(0x18uLL);
                v149[23] = 16;
                strcpy(v149, "GetAndCheckIndex");
                HIBYTE(v147[2]) = 19;
                strcpy((char *)v147, "index out of bound.");
                E5RT::Status::Status(v148, 4, v147);
                E5RT::E5RTError::E5RTError(v105, v149, v148);
              }
              v55 += (unint64_t)(*(void *)(*(void *)TensorStrides + 8 * j) * v57) >> 1;
            }
            if (v35)
            {
              id v58 = (_WORD *)(v141 + 2 * v55 + 2 * (v54 % NumComponents));
              uint64_t v59 = v35;
              do
              {
                *(_WORD *)uint64_t v45 = *v58;
                v45 += 2;
                id v58 = (_WORD *)((char *)v58 + v53);
                --v59;
              }
              while (v59);
            }
            DataSpan += v20;
            ++v52;
          }
          while (v52 != v22);
        }
        else
        {
          uint64_t v95 = 0;
          BOOL v96 = *(int **)TensorStrides;
          int v97 = **(_DWORD **)TensorStrides;
          uint64_t v98 = 2 * v51;
          do
          {
            int v99 = *DataSpan;
            if (*DataSpan >= v49 || v99 < 0)
            {
              if (v99 >= 0) {
                int v99 = v49;
              }
              else {
                int v99 = 0;
              }
            }
            int v100 = (v99 / NumComponents * v97) >> 1;
            for (uint64_t k = 1; k != v20; ++k)
            {
              int v102 = DataSpan[k];
              if (v102 >= v49 || v102 < 0)
              {
                if (v102 >= 0) {
                  int v102 = v49;
                }
                else {
                  int v102 = 0;
                }
              }
              v100 += (unint64_t)(*(void *)&v96[2 * k] * v102) >> 1;
            }
            if (v35)
            {
              std::string v103 = (_WORD *)(v141 + 2 * v100 + 2 * (v99 % NumComponents));
              uint64_t v104 = v35;
              do
              {
                *(_WORD *)uint64_t v45 = *v103;
                v45 += 2;
                std::string v103 = (_WORD *)((char *)v103 + v98);
                --v104;
              }
              while (v104);
            }
            DataSpan += v20;
            ++v95;
          }
          while (v95 != v22);
        }
      }
      goto LABEL_159;
    }
LABEL_168:
    unint64_t v140 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v149, "Launch");
    std::string::basic_string[abi:ne180100]<0>(v147, "Not implemented");
    E5RT::Status::Status(v148, 2, v147);
    E5RT::E5RTError::E5RTError(v140, v149, v148);
  }
  if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)TensorDataTypeRef) != 1) {
    goto LABEL_168;
  }
  if (E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) == 1)
  {
    if (v22)
    {
      signed int v60 = *(_DWORD *)(a1 + 144);
      int v61 = *(unsigned __int8 *)(a1 + 148);
      uint64_t v62 = *(void *)(*((void *)TensorStrides + 1) - 8);
      if (v20 < 2)
      {
        if (v35)
        {
          for (uint64_t m = 0; m != v22; ++m)
          {
            int v87 = sub_192379468((uint64_t)DataSpan, 0, v60, v61 != 0);
            CFNumberRef v88 = (unsigned char *)(v141 + v87 / NumComponents * **(_DWORD **)TensorStrides + v87 % NumComponents);
            uint64_t v89 = v35;
            do
            {
              *v45++ = *v88;
              v88 += v62;
              --v89;
            }
            while (v89);
            DataSpan += v20;
          }
        }
        else
        {
          do
          {
            sub_192379468((uint64_t)DataSpan, 0, v60, v61 != 0);
            DataSpan += v20;
            --v22;
          }
          while (v22);
        }
      }
      else if (v61)
      {
        for (uint64_t n = 0; n != v22; ++n)
        {
          int v64 = sub_192379468((uint64_t)DataSpan, 0, v60, 1);
          int v65 = v64 / NumComponents * **(_DWORD **)TensorStrides;
          for (iunint64_t i = 1; ii != v20; ++ii)
          {
            signed int v67 = DataSpan[ii];
            if (v67 >= v60 || v67 < 0)
            {
              uint64_t v138 = __cxa_allocate_exception(0x18uLL);
              v149[23] = 16;
              strcpy(v149, "GetAndCheckIndex");
              HIBYTE(v147[2]) = 19;
              strcpy((char *)v147, "index out of bound.");
              E5RT::Status::Status(v148, 4, v147);
              E5RT::E5RTError::E5RTError(v138, v149, v148);
            }
            v65 += v67 * *(void *)(*(void *)TensorStrides + 8 * ii);
          }
          if (v35)
          {
            std::string::size_type v68 = (unsigned char *)(v141 + v65 + v64 % NumComponents);
            uint64_t v69 = v35;
            do
            {
              *v45++ = *v68;
              v68 += v62;
              --v69;
            }
            while (v69);
          }
          DataSpan += v20;
        }
      }
      else
      {
        uint64_t v106 = 0;
        unint64_t v107 = (v20 - 1) & 0xFFFFFFFFFFFFFFF8;
        int32x4_t v108 = vdupq_n_s32(v60);
        std::string v109 = (int32x4_t *)(DataSpan + 5);
        uint64_t v110 = 4 * v20;
        do
        {
          int v111 = *DataSpan;
          if (*DataSpan >= v60 || v111 < 0)
          {
            if (v111 >= 0) {
              int v111 = v60;
            }
            else {
              int v111 = 0;
            }
          }
          uint64_t v112 = *(int **)TensorStrides;
          int v113 = v111 / NumComponents * **(_DWORD **)TensorStrides;
          if (v20 < 9)
          {
            uint64_t v114 = 1;
            goto LABEL_125;
          }
          int32x4_t v115 = 0uLL;
          int32x4_t v116 = (int32x4_t)(v111 / NumComponents * **(_DWORD **)TensorStrides);
          uint64_t v117 = (int32x4_t *)(v112 + 10);
          unint64_t v118 = (v20 - 1) & 0xFFFFFFFFFFFFFFF8;
          std::string::size_type v119 = v109;
          do
          {
            int32x4_t v121 = v117[-2];
            int32x4_t v120 = v117[-1];
            int32x4_t v123 = *v117;
            int32x4_t v122 = v117[1];
            v117 += 4;
            int32x4_t v116 = vmlaq_s32(v116, (int32x4_t)vandq_s8((int8x16_t)vcgezq_s32(v119[-1]), (int8x16_t)vminq_s32(v119[-1], v108)), vuzp1q_s32(v121, v120));
            int32x4_t v115 = vmlaq_s32(v115, (int32x4_t)vandq_s8((int8x16_t)vcgezq_s32(*v119), (int8x16_t)vminq_s32(*v119, v108)), vuzp1q_s32(v123, v122));
            v119 += 2;
            v118 -= 8;
          }
          while (v118);
          int v113 = vaddvq_s32(vaddq_s32(v115, v116));
          uint64_t v114 = v107 | 1;
          if (v20 - 1 != v107)
          {
            do
            {
LABEL_125:
              while (1)
              {
                int v126 = DataSpan[v114];
                if (v126 >= v60 || v126 < 0) {
                  break;
                }
                v113 += v126 * *(void *)&v112[2 * v114++];
                if (v20 == v114) {
                  goto LABEL_121;
                }
              }
              if (v126 >= 0) {
                signed int v127 = v60;
              }
              else {
                signed int v127 = 0;
              }
              v113 += v127 * *(void *)&v112[2 * v114++];
            }
            while (v20 != v114);
          }
LABEL_121:
          if (v35)
          {
            CFStringRef v124 = (unsigned char *)(v141 + v113 + v111 % NumComponents);
            uint64_t v125 = v35;
            do
            {
              *v45++ = *v124;
              v124 += v62;
              --v125;
            }
            while (v125);
          }
          DataSpauint64_t n = (int *)((char *)DataSpan + v110);
          ++v106;
          std::string v109 = (int32x4_t *)((char *)v109 + v110);
        }
        while (v106 != v22);
      }
    }
  }
  else
  {
    if (E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) != 4) {
      goto LABEL_168;
    }
    if (v22)
    {
      int v70 = *(_DWORD *)(a1 + 144);
      int v71 = *(unsigned __int8 *)(a1 + 148);
      uint64_t v72 = *(void *)(*((void *)TensorStrides + 1) - 8) >> 2;
      if (v20 < 2)
      {
        if (v35)
        {
          uint64_t v90 = 0;
          uint64_t v91 = 4 * v72;
          do
          {
            int v92 = sub_192379468((uint64_t)DataSpan, 0, v70, v71 != 0);
            long long v93 = (_DWORD *)(v141
                           + 4 * ((v92 / NumComponents * **(_DWORD **)TensorStrides) >> 2)
                           + 4 * (v92 % NumComponents));
            uint64_t v94 = v35;
            do
            {
              *(_DWORD *)uint64_t v45 = *v93;
              v45 += 4;
              long long v93 = (_DWORD *)((char *)v93 + v91);
              --v94;
            }
            while (v94);
            DataSpan += v20;
            ++v90;
          }
          while (v90 != v22);
        }
        else
        {
          do
          {
            sub_192379468((uint64_t)DataSpan, 0, v70, v71 != 0);
            DataSpan += v20;
            --v22;
          }
          while (v22);
        }
      }
      else if (v71)
      {
        uint64_t v73 = 0;
        uint64_t v74 = 4 * v72;
        do
        {
          int v75 = sub_192379468((uint64_t)DataSpan, 0, v70, 1);
          int v76 = (v75 / NumComponents * **(_DWORD **)TensorStrides) >> 2;
          for (juint64_t j = 1; jj != v20; ++jj)
          {
            uint64_t v78 = DataSpan[jj];
            if ((int)v78 >= v70 || (v78 & 0x80000000) != 0)
            {
              v139 = __cxa_allocate_exception(0x18uLL);
              v149[23] = 16;
              strcpy(v149, "GetAndCheckIndex");
              HIBYTE(v147[2]) = 19;
              strcpy((char *)v147, "index out of bound.");
              E5RT::Status::Status(v148, 4, v147);
              E5RT::E5RTError::E5RTError(v139, v149, v148);
            }
            v76 += (unint64_t)(*(void *)(*(void *)TensorStrides + 8 * jj) * v78) >> 2;
          }
          if (v35)
          {
            id v79 = (_DWORD *)(v141 + 4 * v76 + 4 * (v75 % NumComponents));
            uint64_t v80 = v35;
            do
            {
              *(_DWORD *)uint64_t v45 = *v79;
              v45 += 4;
              id v79 = (_DWORD *)((char *)v79 + v74);
              --v80;
            }
            while (v80);
          }
          DataSpan += v20;
          ++v73;
        }
        while (v73 != v22);
      }
      else
      {
        uint64_t v128 = 0;
        std::string::size_type v129 = *(int **)TensorStrides;
        int v130 = **(_DWORD **)TensorStrides;
        uint64_t v131 = 4 * v72;
        do
        {
          int v132 = *DataSpan;
          if (*DataSpan >= v70 || v132 < 0)
          {
            if (v132 >= 0) {
              int v132 = v70;
            }
            else {
              int v132 = 0;
            }
          }
          int v133 = (v132 / NumComponents * v130) >> 2;
          for (kuint64_t k = 1; kk != v20; ++kk)
          {
            int v135 = DataSpan[kk];
            if (v135 >= v70 || v135 < 0)
            {
              if (v135 >= 0) {
                int v135 = v70;
              }
              else {
                int v135 = 0;
              }
            }
            v133 += (unint64_t)(*(void *)&v129[2 * kk] * v135) >> 2;
          }
          if (v35)
          {
            unint64_t v136 = (_DWORD *)(v141 + 4 * v133 + 4 * (v132 % NumComponents));
            uint64_t v137 = v35;
            do
            {
              *(_DWORD *)uint64_t v45 = *v136;
              v45 += 4;
              unint64_t v136 = (_DWORD *)((char *)v136 + v131);
              --v137;
            }
            while (v137);
          }
          DataSpan += v20;
          ++v128;
        }
        while (v128 != v22);
      }
    }
  }
LABEL_159:
  if (__p) {
    operator delete(__p);
  }
  if (v146)
  {
    operator delete(v146);
  }
}

void sub_192379310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  E5RT::Status::~Status((E5RT::Status *)&a25);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a31 < 0)
  {
    operator delete(a26);
    if ((v32 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v32)
  {
LABEL_6:
    if (a13) {
      operator delete(a13);
    }
    if (a16) {
      operator delete(a16);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

uint64_t sub_192379468(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result = *(unsigned int *)(a1 + 4 * a2);
  if ((int)result >= a3 || (result & 0x80000000) != 0)
  {
    if (a4)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "GetAndCheckIndex");
      std::string::basic_string[abi:ne180100]<0>(v6, "index out of bound.");
      E5RT::Status::Status(v7, 4, v6);
      E5RT::E5RTError::E5RTError(exception, v8, v7);
    }
    if ((int)result >= 0) {
      return a3;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_19237953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::IOSurfaceSharedAsyncEvent::~IOSurfaceSharedAsyncEvent(void **this)
{
  *this = &unk_1EE325D40;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

{
  uint64_t vars8;

  *this = &unk_1EE325D40;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);

  JUMPOUT(0x192FF16B0);
}

void *E5RT::IOSurfaceSharedAsyncEvent::IOSurfaceSharedAsyncEvent(void *a1, long long *a2, void *a3)
{
  id v5 = a3;
  E5RT::AsyncEventImpl::AsyncEventImpl(a1);
  *a1 = &unk_1EE325D40;
  id v6 = v5;
  a1[1] = v6;
  long long v7 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    a1[4] = *((void *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[5] = 0;

  return a1;
}

void sub_19237972C(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void sub_19237974C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void E5RT::AsyncEvent::CreateEvent<IOSurfaceSharedEvent * {__strong}>(uint64_t a1, void *a2)
{
  id v2 = a2;
  operator new();
}

void sub_192379820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_19237A1B4(a10);
  }
  MEMORY[0x192FF16B0](v11, 0xA1C40BD48D6D6);

  _Unwind_Resume(a1);
}

void sub_192379858(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);

  _Unwind_Resume(a1);
}

void sub_192379890(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1093C4041A044FELL);

  _Unwind_Resume(a1);
}

void sub_1923798B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::GetEventName(E5RT::IOSurfaceSharedAsyncEvent *this)
{
  return (uint64_t)this + 16;
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::GetLastSignaledValue(id *this)
{
  return [this[1] signaledValue];
}

unint64_t E5RT::IOSurfaceSharedAsyncEvent::SetActiveFutureValue(id *this, unint64_t a2)
{
  unint64_t result = [this[1] signaledValue];
  if (result > a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "SetActiveFutureValue");
    std::string::basic_string[abi:ne180100]<0>(v6, "Future value has been signaled.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  this[5] = (id)a2;
  return result;
}

void sub_192379998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::SyncWait(id *this, uint64_t a2, uint64_t a3)
{
  if ((E5RT::IsIOSurfaceSharedEventAvailable((E5RT *)this) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "SyncWait");
    std::string::basic_string[abi:ne180100]<0>(v9, "Shared events are not available.");
    E5RT::Status::Status(v10, 11, v9);
    E5RT::E5RTError::E5RTError(exception, v11, v10);
  }
  uint64_t result = [this[1] waitUntilSignaledValue:a2 timeoutMS:a3];
  if ((result & 1) == 0)
  {
    long long v7 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "SyncWait");
    std::string::basic_string[abi:ne180100]<0>(v9, "IOSurface shared event sync wait timed out.");
    E5RT::Status::Status(v10, 10, v9);
    E5RT::E5RTError::E5RTError(v7, v11, v10);
  }
  return result;
}

void sub_192379B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a17);
LABEL_6:
  if (v23) {
    __cxa_free_exception(v22);
  }
  _Unwind_Resume(a1);
}

void E5RT::IOSurfaceSharedAsyncEvent::AsyncNotify(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  long long v8 = a4;
  if ((E5RT::IsIOSurfaceSharedEventAvailable(v8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "AsyncNotify");
    std::string::basic_string[abi:ne180100]<0>(v17, "Shared events are not available.");
    E5RT::Status::Status(v18, 11, v17);
    E5RT::E5RTError::E5RTError(exception, v19, v18);
  }
  if (!v7)
  {
    CFStringRef v12 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "AsyncNotify");
    std::string::basic_string[abi:ne180100]<0>(v17, "Invalid listener queue.");
    E5RT::Status::Status(v18, 1, v17);
    E5RT::E5RTError::E5RTError(v12, v19, v18);
  }
  if (!v8)
  {
    long long v13 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "AsyncNotify");
    std::string::basic_string[abi:ne180100]<0>(v17, "Invalid notification task.");
    E5RT::Status::Status(v18, 1, v17);
    E5RT::E5RTError::E5RTError(v13, v19, v18);
  }
  CFURLRef v9 = (void *)[objc_alloc(MEMORY[0x1E4F2EF98]) initWithDispatchQueue:v7];
  char v10 = *(void **)(a1 + 8);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = sub_192379F5C;
  void v15[3] = &unk_1E5745950;
  uint64_t v11 = v8;
  size_t v16 = v11;
  [v10 notifyListener:v9 atValue:a2 block:v15];
}

void sub_192379E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v29 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

uint64_t sub_192379F5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::Signal(E5RT::IOSurfaceSharedAsyncEvent *this, unint64_t a2)
{
  if ([*((id *)this + 1) signaledValue] >= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v19, "Signal");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": Potential duplicate signaler. Value has already been signaled to ", (const void **)this + 2, &v14);
    std::to_string(&v13, a2);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v7 = &v13;
    }
    else {
      id v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    CFURLRef v9 = std::string::append(&v14, (const std::string::value_type *)v7, size);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = std::string::append(&v15, ".");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v11->__r_.__value_.__r.__words[2];
    long long v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v18, 2, &v16);
    E5RT::E5RTError::E5RTError(exception, v19, v18);
  }
  char v4 = (void *)*((void *)this + 1);

  return [v4 setSignaledValue:a2];
}

void sub_19237A0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  E5RT::Status::~Status((E5RT::Status *)(v35 - 64));
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_5:
    if (*(char *)(v35 - 33) < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a15);
  if (*(char *)(v35 - 33) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v35 - 56));
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_19237A1B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t E5RT::MILProgramUtils::BuildE5RTTensorComponentSize(int a1)
{
  int v1 = a1 - 4;
  if ((a1 - 4) >= 0xD || ((0x1CE3u >> v1) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "BuildE5RTTensorComponentSize");
    std::string::basic_string[abi:ne180100]<0>(v4, "IRDataType is not supported by E5RT");
    E5RT::Status::Status(v5, 6, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return qword_192DB5230[v1];
}

void sub_19237A2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::MILProgramUtils::CreateOperandDescriptorFromIRValueType(E5RT::MILProgramUtils *this, const MIL::IRValueType *a2)
{
  WrappedType = this;
  if (!(*(uint64_t (**)(E5RT::MILProgramUtils *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2))
  {
    do
    {
      if (MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType))
      {
        int v3 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType);
        if (MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v3))
        {
          id v7 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(WrappedType);
          long long v8 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v7);
          int DataType = MIL::IRTensorBufferValueType::GetDataType(v8);
          if (DataType - 4) < 0xD && ((0x1CE3u >> (DataType - 4)))
          {
            uint64_t v10 = E5RT::MILProgramUtils::BuildE5RTTensorComponentSize(DataType);
            Shape = (MIL::IRDimension ***)MIL::IRTensorBufferValueType::GetShape(v8);
            InterleaveFactors = (uint64_t *)MIL::IRTensorBufferValueType::GetInterleaveFactors(v8);
            uint64_t v13 = *InterleaveFactors;
            if (InterleaveFactors[1] == *InterleaveFactors)
            {
              unint64_t v16 = 0;
              unsigned __int8 v17 = 1;
            }
            else
            {
              std::string v14 = InterleaveFactors;
              unint64_t v15 = 0;
              unint64_t v16 = 0;
              unsigned __int8 v17 = 1;
              do
              {
                uint64_t v18 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v13 + 8 * v15));
                int UInt8ScalarValue = MIL::IRConstantProperty::GetUInt8ScalarValue(v18);
                if (UInt8ScalarValue != 1)
                {
                  int v20 = v17;
                  unsigned __int8 v17 = UInt8ScalarValue;
                  unint64_t v16 = v15;
                  if (v20 != 1)
                  {
                    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v44, "CreateOperandDescriptorFromIRTensorBufferValueType");
                    std::string::basic_string[abi:ne180100]<0>(&v41, "Only one interleave factor of larger than 1 is supported.");
                    E5RT::Status::Status(&v40, 6, &v41);
                    E5RT::E5RTError::E5RTError(exception, &v44, &v40);
                  }
                }
                ++v15;
                uint64_t v13 = *v14;
              }
              while (v15 < (v14[1] - *v14) >> 3);
            }
            sub_19237CB40(&v38, *Shape, Shape[1]);
            if (v17 > 1u)
            {
              unint64_t v22 = *(void *)(v38 + 8 * v16);
              if (v22 == -1)
              {
                uint64_t v24 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(&v44, "CreateOperandDescriptorFromIRTensorBufferValueType");
                std::string::basic_string[abi:ne180100]<0>(&v41, "Interleave dimension cannot be unknown.");
                E5RT::Status::Status(&v40, 6, &v41);
                E5RT::E5RTError::E5RTError(v24, &v44, &v40);
              }
              *(void *)(v38 + 8 * v16) = vcvtps_u32_f32((float)v22 / (float)v17);
            }
            if (v17 <= 8u && ((1 << v17) & 0x116) != 0)
            {
              if (v10 == 4 || v10 == 2 || v10 == 1) {
                E5RT::TensorDataType::TensorDataType(&v41);
              }
              uint64_t v28 = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(&v44, "GetE5RTPackType");
              std::to_string(&v39, 3uLL);
              int v29 = std::string::insert(&v39, 0, "Unsupported component size (");
              long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
              v40.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v30;
              v29->__r_.__value_.__l.__size_ = 0;
              v29->__r_.__value_.__r.__words[2] = 0;
              v29->__r_.__value_.__r.__words[0] = 0;
              unint64_t v31 = std::string::append(&v40, ").");
              long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
              std::string::size_type v42 = v31->__r_.__value_.__r.__words[2];
              long long v41 = v32;
              v31->__r_.__value_.__l.__size_ = 0;
              v31->__r_.__value_.__r.__words[2] = 0;
              v31->__r_.__value_.__r.__words[0] = 0;
              E5RT::Status::Status(v43, 6, &v41);
              E5RT::E5RTError::E5RTError(v28, &v44, v43);
            }
            uint64_t v33 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(&v44, "GetE5RTPackType");
            std::to_string(&v39, v17);
            int v34 = std::string::insert(&v39, 0, "Unsupported interleave (");
            long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
            v40.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v35;
            v34->__r_.__value_.__l.__size_ = 0;
            v34->__r_.__value_.__r.__words[2] = 0;
            v34->__r_.__value_.__r.__words[0] = 0;
            uint64_t v36 = std::string::append(&v40, ").");
            long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
            std::string::size_type v42 = v36->__r_.__value_.__r.__words[2];
            long long v41 = v37;
            v36->__r_.__value_.__l.__size_ = 0;
            v36->__r_.__value_.__r.__words[2] = 0;
            v36->__r_.__value_.__r.__words[0] = 0;
            E5RT::Status::Status(v43, 6, &v41);
            E5RT::E5RTError::E5RTError(v33, &v44, v43);
          }
          uint64_t v26 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v44, "BuildE5RTComponentDtype");
          std::string::basic_string[abi:ne180100]<0>(&v41, "IRDataType is not supported by E5RT");
          E5RT::Status::Status(&v40, 6, &v41);
          E5RT::E5RTError::E5RTError(v26, &v44, &v40);
        }
      }
      if (!MIL::IRValueType::TryCastAsStateType(WrappedType))
      {
        int v25 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v44, "CreateOperandDescriptorFromIRValueType");
        std::string::basic_string[abi:ne180100]<0>(&v41, "Found unsupported IRValueType.");
        E5RT::Status::Status(&v40, 2, &v41);
        E5RT::E5RTError::E5RTError(v25, &v44, &v40);
      }
      char v4 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(WrappedType);
      WrappedType = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v4);
    }
    while (!(*(uint64_t (**)(MIL::IRValueType *))(*(void *)WrappedType + 24))(WrappedType));
  }
  uint64_t v5 = MIL::IRValueType::AsTensorType(WrappedType);
  id v6 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5))
  {
    sub_19237CB40(&v44, *v6, v6[1]);
    switch((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5))
    {
      case 4u:
        E5RT::TensorDataType::TensorDataType(&v41);
      case 5u:
        E5RT::TensorDataType::TensorDataType(&v41);
      case 9u:
        E5RT::TensorDataType::TensorDataType(&v41);
      case 0xAu:
        E5RT::TensorDataType::TensorDataType(&v41);
      case 0xBu:
        E5RT::TensorDataType::TensorDataType(&v41);
      case 0xEu:
        E5RT::TensorDataType::TensorDataType(&v41);
      case 0xFu:
        E5RT::TensorDataType::TensorDataType(&v41);
      case 0x10u:
        E5RT::TensorDataType::TensorDataType(&v41);
      default:
        uint64_t v27 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v41, "CreateOperandDescriptorFromIRTensorValueType");
        std::string::basic_string[abi:ne180100]<0>(&v40, "IRDataType is not supported by E5RT");
        E5RT::Status::Status(&v39, 6, &v40);
        E5RT::E5RTError::E5RTError(v27, &v41, &v39);
    }
  }
  int v23 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(&v44, "CreateOperandDescriptorFromIRTensorValueType");
  std::string::basic_string[abi:ne180100]<0>(&v41, "Found variadic shape.");
  E5RT::Status::Status(&v40, 2, &v41);
  E5RT::E5RTError::E5RTError(v23, &v44, &v40);
}

void sub_19237ACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  E5RT::Status::~Status((E5RT::Status *)&a32);
  if (a30 < 0)
  {
    operator delete(__p);
    if (a23 < 0)
    {
LABEL_5:
      operator delete(a18);
      if (a17 < 0)
      {
LABEL_8:
        operator delete(a12);
        if (*(char *)(v34 - 81) < 0)
        {
LABEL_13:
          operator delete(*(void **)(v34 - 104));
          if ((v33 & 1) == 0) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
LABEL_11:
        if ((v33 & 1) == 0)
        {
LABEL_15:
          if (a9)
          {
            operator delete(a9);
            _Unwind_Resume(a1);
          }
          _Unwind_Resume(a1);
        }
LABEL_14:
        __cxa_free_exception(v32);
        goto LABEL_15;
      }
LABEL_10:
      if (*(char *)(v34 - 81) < 0) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else if (a23 < 0)
  {
    goto LABEL_5;
  }
  if (a17 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void E5RT::MILProgramUtils::~MILProgramUtils(E5RT::MILProgramUtils *this)
{
  uint64_t v2 = (char *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(char **)v2;
      id v6 = (E5RT::MILProgramUtils::MILFunctionIOInfo *)*((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v6)
      {
        E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(v6);
        MEMORY[0x192FF16B0]();
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  int v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

uint64_t std::unordered_map<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(char **)v2;
      id v6 = (E5RT::MILProgramUtils::MILFunctionIOInfo *)*((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v6)
      {
        E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(v6);
        MEMORY[0x192FF16B0]();
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  int v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t E5RT::MILProgramUtils::InitMILProgramUtils(E5RT::MILProgramUtils *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)this + 72))(*(void *)this);
  if (*(void *)(result + 16)) {
    operator new();
  }
  return result;
}

void sub_19237BFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100]((E5RT::MILProgramUtils::MILFunctionIOInfo **)va);
  _Unwind_Resume(a1);
}

void sub_19237BFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100]((E5RT::MILProgramUtils::MILFunctionIOInfo **)va);
  _Unwind_Resume(a1);
}

void sub_19237BFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  *(void *)(v9 + 80) = v8;
  std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100]((E5RT::MILProgramUtils::MILFunctionIOInfo **)va);
  _Unwind_Resume(a1);
}

void sub_19237BFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, E5RT::MILProgramUtils::MILFunctionIOInfo *a16, uint64_t a17, uint64_t a18)
{
  operator delete(v18);
  if (__p)
  {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
    std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100](&a16);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

E5RT::MILProgramUtils::MILFunctionIOInfo **std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>::~unique_ptr[abi:ne180100](E5RT::MILProgramUtils::MILFunctionIOInfo **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

E5RT::MILProgramUtils *E5RT::MILProgramUtils::MILProgramUtils(E5RT::MILProgramUtils *this, const std::__fs::filesystem::path *a2)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  MILContext = (MIL::ParserOptions *)MIL::Opsets::Common::CreateMILContext(v12, this);
  v12[1] = v12[0];
  if (v12[0]) {
    operator new();
  }
  uint64_t v13 = 0;
  MIL::ParserOptions::Make(v12, MILContext);
  uint64_t v5 = v12[0];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = a2->__pn_;
  }
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v5 + 32))(v5, &pn, 1);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12[0] + 64))(v12[0], 1);
  MIL::Text::ParseProgramFromFile();
  uint64_t v6 = *(void *)this;
  *(void *)this = v10;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  E5RT::MILProgramUtils::InitMILProgramUtils(this);
  uint64_t v7 = v12[0];
  v12[0] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return this;
}

void sub_19237C410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a19) {
    sub_19237DC08();
  }
  std::unordered_map<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>::~unordered_map[abi:ne180100]((uint64_t)(v20 + 1));
  uint64_t v22 = *v20;
  *int v20 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  _Unwind_Resume(a1);
}

E5RT::MILProgramUtils *E5RT::MILProgramUtils::MILProgramUtils(E5RT::MILProgramUtils *this, const std::__fs::filesystem::path *a2, char a3)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  MILContext = (MIL::ParserOptions *)MIL::Opsets::Common::CreateMILContext(v14, this);
  v14[1] = v14[0];
  if (v14[0]) {
    operator new();
  }
  unint64_t v15 = 0;
  MIL::ParserOptions::Make(v14, MILContext);
  uint64_t v7 = v14[0];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = a2->__pn_;
  }
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v7 + 32))(v7, &pn, 1);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14[0] + 64))(v14[0], 1);
  MIL::Text::ParseProgramFromFile();
  uint64_t v8 = *(void *)this;
  *(void *)this = v12;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if ((a3 & 1) == 0) {
    E5RT::MILProgramUtils::InitMILProgramUtils(this);
  }
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return this;
}

void sub_19237C798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a19) {
    sub_19237DC08();
  }
  std::unordered_map<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>::~unordered_map[abi:ne180100]((uint64_t)(v20 + 1));
  uint64_t v22 = *v20;
  *int v20 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  _Unwind_Resume(a1);
}

void E5RT::MILProgramUtils::GetFunctionNames(E5RT::MILProgramUtils *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (!v2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "GetFunctionNames");
    std::string::basic_string[abi:ne180100]<0>(&v19, "The program is not initialized.");
    E5RT::Status::Status(v18, 6, &v19);
    E5RT::E5RTError::E5RTError(exception, v15, v18);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 72))(v2);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((uint64_t)v15, v4);
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, __n);
  uint64_t v5 = (const std::string::value_type *)__p;
  if (__p)
  {
    do
    {
      if (v5[39] < 0) {
        std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
      }
      else {
        std::string v19 = *(std::string *)(v5 + 16);
      }
      std::vector<std::string>::pointer end = a2->__end_;
      if (end < a2->__end_cap_.__value_)
      {
        long long v6 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = v19.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v6;
        a2->__end_ = end + 1;
      }
      else
      {
        uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)&a2->__begin_, (uint64_t)&v19);
        int v9 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
        a2->__end_ = (std::vector<std::string>::pointer)v8;
        if (v9 < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v5 = *(const std::string::value_type **)v5;
    }
    while (v5);
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      do
      {
        while (1)
        {
          uint64_t v11 = (void **)*v10;
          uint64_t v12 = (std::__shared_weak_count *)v10[6];
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          if (*((char *)v10 + 39) < 0) {
            break;
          }
          operator delete(v10);
          uint64_t v10 = v11;
          if (!v11) {
            goto LABEL_20;
          }
        }
        operator delete(v10[2]);
        operator delete(v10);
        uint64_t v10 = v11;
      }
      while (v11);
    }
  }
LABEL_20:
  uint64_t v13 = v15[0];
  v15[0] = 0;
  if (v13) {
    operator delete(v13);
  }
}

void sub_19237CA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::vector<std::string>::~vector[abi:ne180100](v20);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19237CAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v24)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::MILProgramUtils::GetMILProgram(E5RT::MILProgramUtils *this)
{
  return *(void *)this;
}

void sub_19237CB40(void *a1, MIL::IRDimension **a2, MIL::IRDimension **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    while (1)
    {
      uint64_t v7 = *v4;
      if (!(*(uint64_t (**)(MIL::IRDimension *))(*(void *)*v4 + 24))(*v4)) {
        break;
      }
      int v9 = (char *)a1[1];
      unint64_t v8 = a1[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v10 = (void *)*a1;
        uint64_t v11 = (uint64_t)&v9[-*a1];
        uint64_t v12 = v11 >> 3;
        unint64_t v13 = (v11 >> 3) + 1;
        if (v13 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v8 - (void)v10;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          if (v15 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v16 = operator new(8 * v15);
          unsigned __int8 v17 = &v16[8 * v12];
          void *v17 = -1;
          uint64_t v6 = (uint64_t)(v17 + 1);
          if (v9 == (char *)v10)
          {
LABEL_36:
            *a1 = v17;
            a1[1] = v6;
            a1[2] = &v16[8 * v15];
            if (!v10) {
              goto LABEL_4;
            }
LABEL_46:
            operator delete(v10);
            goto LABEL_4;
          }
        }
        else
        {
          unint64_t v16 = 0;
          unsigned __int8 v17 = (void *)(8 * v12);
          *(void *)(8 * v12) = -1;
          uint64_t v6 = 8 * v12 + 8;
          if (v9 == (char *)v10) {
            goto LABEL_36;
          }
        }
        unint64_t v30 = v9 - 8 - (char *)v10;
        if (v30 < 0x58) {
          goto LABEL_54;
        }
        if ((unint64_t)(v9 - &v16[v11]) < 0x20) {
          goto LABEL_54;
        }
        uint64_t v31 = (v30 >> 3) + 1;
        uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
        char v33 = &v9[-v32];
        unsigned __int8 v17 = (void *)((char *)v17 - v32);
        uint64_t v34 = &v16[8 * v12 - 16];
        long long v35 = v9 - 16;
        uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *(_OWORD *)v35;
          *(v34 - 1) = *((_OWORD *)v35 - 1);
          _OWORD *v34 = v37;
          v34 -= 2;
          v35 -= 32;
          v36 -= 4;
        }
        while (v36);
        int v9 = v33;
        if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_54:
          do
          {
            uint64_t v38 = *((void *)v9 - 1);
            v9 -= 8;
            *--unsigned __int8 v17 = v38;
          }
          while (v9 != (char *)v10);
        }
        goto LABEL_36;
      }
      *(void *)int v9 = -1;
      uint64_t v6 = (uint64_t)(v9 + 8);
LABEL_4:
      a1[1] = v6;
      if (++v4 == a3) {
        return;
      }
    }
    uint64_t v18 = MIL::IRDimension::AsConstant(v7);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18);
    uint64_t v20 = v19;
    uint64_t v22 = (uint64_t *)a1[1];
    unint64_t v21 = a1[2];
    if ((unint64_t)v22 < v21)
    {
      uint64_t *v22 = v19;
      uint64_t v6 = (uint64_t)(v22 + 1);
      goto LABEL_4;
    }
    uint64_t v10 = (void *)*a1;
    uint64_t v23 = (uint64_t)v22 - *a1;
    uint64_t v24 = v23 >> 3;
    unint64_t v25 = (v23 >> 3) + 1;
    if (v25 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v21 - (void)v10;
    if (v26 >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      if (v27 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v28 = operator new(8 * v27);
      int v29 = (uint64_t *)&v28[8 * v24];
      *int v29 = v20;
      uint64_t v6 = (uint64_t)(v29 + 1);
      if (v22 == v10)
      {
LABEL_45:
        *a1 = v29;
        a1[1] = v6;
        a1[2] = &v28[8 * v27];
        if (v10) {
          goto LABEL_46;
        }
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v28 = 0;
      int v29 = (uint64_t *)(8 * v24);
      *(void *)(8 * v24) = v20;
      uint64_t v6 = 8 * v24 + 8;
      if (v22 == v10) {
        goto LABEL_45;
      }
    }
    unint64_t v39 = (char *)(v22 - 1) - (char *)v10;
    if (v39 < 0x58) {
      goto LABEL_55;
    }
    if ((unint64_t)((char *)v22 - &v28[v23]) < 0x20) {
      goto LABEL_55;
    }
    uint64_t v40 = (v39 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    std::string::size_type v42 = &v22[v41 / 0xFFFFFFFFFFFFFFF8];
    int v29 = (uint64_t *)((char *)v29 - v41);
    long long v43 = &v28[8 * v24 - 16];
    uint64_t v44 = v22 - 2;
    uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      _OWORD *v43 = v46;
      v43 -= 2;
      v44 -= 4;
      v45 -= 4;
    }
    while (v45);
    uint64_t v22 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_55:
      do
      {
        uint64_t v47 = *--v22;
        *--int v29 = v47;
      }
      while (v22 != v10);
    }
    goto LABEL_45;
  }
}

void sub_19237CE94(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(E5RT::MILProgramUtils::MILFunctionIOInfo *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 16);
    uint64_t v4 = (void *)*((void *)this + 15);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 15);
    }
    *((void *)this + 16) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 12);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 13);
    uint64_t v7 = (void *)*((void *)this + 12);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)*((void *)this + 12);
    }
    *((void *)this + 13) = v5;
    operator delete(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 10);
    uint64_t v10 = (void *)*((void *)this + 9);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v8;
    operator delete(v10);
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy((uint64_t)this + 48, *((char **)this + 7));
  std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy((uint64_t)this, *((char **)this + 1));
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = *((void *)a2 + 7);
    *((void *)a2 + 7) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v5 = a2;
    }
    else
    {
      uint64_t v5 = a2;
    }
    operator delete(v5);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            unint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          unint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *uint64_t v26 = 0;
  v26[1] = v11;
  unint64_t v27 = (std::string *)(v26 + 2);
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        char v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        char v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      char v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  char v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  *uint64_t v32 = v45[0];
LABEL_92:
  unint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19237D4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19237D4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::MILProgramUtils::MILFunctionIOInfo>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(E5RT::MILProgramUtils::MILFunctionIOInfo **)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3)
      {
        E5RT::MILProgramUtils::MILFunctionIOInfo::~MILFunctionIOInfo(v3);
        MEMORY[0x192FF16B0]();
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}